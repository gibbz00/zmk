
zmk.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00026000 <_vector_table>:
   26000:	98 62 00 20 1d a5 02 00 45 49 04 00 f1 a4 02 00     .b. ....EI......
   26010:	f1 a4 02 00 f1 a4 02 00 f1 a4 02 00 00 00 00 00     ................
	...
   2602c:	85 a2 02 00 f1 a4 02 00 00 00 00 00 3d a2 02 00     ............=...
   2603c:	f1 a4 02 00                                         ....

00026040 <_irq_vector_table>:
   26040:	01 a3 02 00 65 a1 03 00 01 a3 02 00 01 a3 02 00     ....e...........
   26050:	01 a3 02 00 01 a3 02 00 01 a3 02 00 01 a3 02 00     ................
   26060:	01 a3 02 00 01 a3 02 00 01 a3 02 00 01 a3 02 00     ................
   26070:	01 a3 02 00 01 a3 02 00 01 a3 02 00 01 a3 02 00     ................
   26080:	01 a3 02 00 01 a3 02 00 01 a3 02 00 01 a3 02 00     ................
   26090:	01 a3 02 00 01 a3 02 00 01 a3 02 00 01 a3 02 00     ................
   260a0:	01 a3 02 00 01 a3 02 00 01 a3 02 00 01 a3 02 00     ................
   260b0:	01 a3 02 00 01 a3 02 00 01 a3 02 00 01 a3 02 00     ................
   260c0:	01 a3 02 00 01 a3 02 00 01 a3 02 00 01 a3 02 00     ................
   260d0:	01 a3 02 00 01 a3 02 00 01 a3 02 00 01 a3 02 00     ................
   260e0:	01 a3 02 00 01 a3 02 00 01 a3 02 00 01 a3 02 00     ................
   260f0:	01 a3 02 00 01 a3 02 00 01 a3 02 00 01 a3 02 00     ................

Disassembly of section text:

00026100 <__aeabi_uldivmod>:
   26100:	b953      	cbnz	r3, 26118 <__aeabi_uldivmod+0x18>
   26102:	b94a      	cbnz	r2, 26118 <__aeabi_uldivmod+0x18>
   26104:	2900      	cmp	r1, #0
   26106:	bf08      	it	eq
   26108:	2800      	cmpeq	r0, #0
   2610a:	bf1c      	itt	ne
   2610c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   26110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   26114:	f000 b80c 	b.w	26130 <__aeabi_idiv0>
   26118:	f1ad 0c08 	sub.w	ip, sp, #8
   2611c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   26120:	f000 f808 	bl	26134 <__udivmoddi4>
   26124:	f8dd e004 	ldr.w	lr, [sp, #4]
   26128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2612c:	b004      	add	sp, #16
   2612e:	4770      	bx	lr

00026130 <__aeabi_idiv0>:
   26130:	4770      	bx	lr
   26132:	bf00      	nop

00026134 <__udivmoddi4>:
   26134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26138:	4686      	mov	lr, r0
   2613a:	468c      	mov	ip, r1
   2613c:	4608      	mov	r0, r1
   2613e:	9e08      	ldr	r6, [sp, #32]
   26140:	4615      	mov	r5, r2
   26142:	4674      	mov	r4, lr
   26144:	4619      	mov	r1, r3
   26146:	2b00      	cmp	r3, #0
   26148:	f040 80c2 	bne.w	262d0 <__udivmoddi4+0x19c>
   2614c:	4285      	cmp	r5, r0
   2614e:	fab2 f282 	clz	r2, r2
   26152:	d945      	bls.n	261e0 <__udivmoddi4+0xac>
   26154:	b14a      	cbz	r2, 2616a <__udivmoddi4+0x36>
   26156:	f1c2 0320 	rsb	r3, r2, #32
   2615a:	fa00 fc02 	lsl.w	ip, r0, r2
   2615e:	fa2e f303 	lsr.w	r3, lr, r3
   26162:	4095      	lsls	r5, r2
   26164:	ea43 0c0c 	orr.w	ip, r3, ip
   26168:	4094      	lsls	r4, r2
   2616a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   2616e:	b2a8      	uxth	r0, r5
   26170:	fbbc f8fe 	udiv	r8, ip, lr
   26174:	0c23      	lsrs	r3, r4, #16
   26176:	fb0e cc18 	mls	ip, lr, r8, ip
   2617a:	fb08 f900 	mul.w	r9, r8, r0
   2617e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   26182:	4599      	cmp	r9, r3
   26184:	d928      	bls.n	261d8 <__udivmoddi4+0xa4>
   26186:	18eb      	adds	r3, r5, r3
   26188:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
   2618c:	d204      	bcs.n	26198 <__udivmoddi4+0x64>
   2618e:	4599      	cmp	r9, r3
   26190:	d902      	bls.n	26198 <__udivmoddi4+0x64>
   26192:	f1a8 0702 	sub.w	r7, r8, #2
   26196:	442b      	add	r3, r5
   26198:	eba3 0309 	sub.w	r3, r3, r9
   2619c:	b2a4      	uxth	r4, r4
   2619e:	fbb3 fcfe 	udiv	ip, r3, lr
   261a2:	fb0e 331c 	mls	r3, lr, ip, r3
   261a6:	fb0c f000 	mul.w	r0, ip, r0
   261aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   261ae:	42a0      	cmp	r0, r4
   261b0:	d914      	bls.n	261dc <__udivmoddi4+0xa8>
   261b2:	192c      	adds	r4, r5, r4
   261b4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   261b8:	d204      	bcs.n	261c4 <__udivmoddi4+0x90>
   261ba:	42a0      	cmp	r0, r4
   261bc:	d902      	bls.n	261c4 <__udivmoddi4+0x90>
   261be:	f1ac 0302 	sub.w	r3, ip, #2
   261c2:	442c      	add	r4, r5
   261c4:	1a24      	subs	r4, r4, r0
   261c6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
   261ca:	b11e      	cbz	r6, 261d4 <__udivmoddi4+0xa0>
   261cc:	40d4      	lsrs	r4, r2
   261ce:	2300      	movs	r3, #0
   261d0:	6034      	str	r4, [r6, #0]
   261d2:	6073      	str	r3, [r6, #4]
   261d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   261d8:	4647      	mov	r7, r8
   261da:	e7dd      	b.n	26198 <__udivmoddi4+0x64>
   261dc:	4663      	mov	r3, ip
   261de:	e7f1      	b.n	261c4 <__udivmoddi4+0x90>
   261e0:	bb92      	cbnz	r2, 26248 <__udivmoddi4+0x114>
   261e2:	1b43      	subs	r3, r0, r5
   261e4:	2101      	movs	r1, #1
   261e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   261ea:	b2af      	uxth	r7, r5
   261ec:	fbb3 fcfe 	udiv	ip, r3, lr
   261f0:	0c20      	lsrs	r0, r4, #16
   261f2:	fb0e 331c 	mls	r3, lr, ip, r3
   261f6:	fb0c f807 	mul.w	r8, ip, r7
   261fa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   261fe:	4598      	cmp	r8, r3
   26200:	d962      	bls.n	262c8 <__udivmoddi4+0x194>
   26202:	18eb      	adds	r3, r5, r3
   26204:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   26208:	d204      	bcs.n	26214 <__udivmoddi4+0xe0>
   2620a:	4598      	cmp	r8, r3
   2620c:	d902      	bls.n	26214 <__udivmoddi4+0xe0>
   2620e:	f1ac 0002 	sub.w	r0, ip, #2
   26212:	442b      	add	r3, r5
   26214:	eba3 0308 	sub.w	r3, r3, r8
   26218:	b2a4      	uxth	r4, r4
   2621a:	fbb3 fcfe 	udiv	ip, r3, lr
   2621e:	fb0e 331c 	mls	r3, lr, ip, r3
   26222:	fb0c f707 	mul.w	r7, ip, r7
   26226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   2622a:	42a7      	cmp	r7, r4
   2622c:	d94e      	bls.n	262cc <__udivmoddi4+0x198>
   2622e:	192c      	adds	r4, r5, r4
   26230:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   26234:	d204      	bcs.n	26240 <__udivmoddi4+0x10c>
   26236:	42a7      	cmp	r7, r4
   26238:	d902      	bls.n	26240 <__udivmoddi4+0x10c>
   2623a:	f1ac 0302 	sub.w	r3, ip, #2
   2623e:	442c      	add	r4, r5
   26240:	1be4      	subs	r4, r4, r7
   26242:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   26246:	e7c0      	b.n	261ca <__udivmoddi4+0x96>
   26248:	f1c2 0320 	rsb	r3, r2, #32
   2624c:	fa20 f103 	lsr.w	r1, r0, r3
   26250:	4095      	lsls	r5, r2
   26252:	4090      	lsls	r0, r2
   26254:	fa2e f303 	lsr.w	r3, lr, r3
   26258:	4303      	orrs	r3, r0
   2625a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   2625e:	b2af      	uxth	r7, r5
   26260:	fbb1 fcfe 	udiv	ip, r1, lr
   26264:	fb0e 101c 	mls	r0, lr, ip, r1
   26268:	0c19      	lsrs	r1, r3, #16
   2626a:	fb0c f807 	mul.w	r8, ip, r7
   2626e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   26272:	4588      	cmp	r8, r1
   26274:	fa04 f402 	lsl.w	r4, r4, r2
   26278:	d922      	bls.n	262c0 <__udivmoddi4+0x18c>
   2627a:	1869      	adds	r1, r5, r1
   2627c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   26280:	d204      	bcs.n	2628c <__udivmoddi4+0x158>
   26282:	4588      	cmp	r8, r1
   26284:	d902      	bls.n	2628c <__udivmoddi4+0x158>
   26286:	f1ac 0002 	sub.w	r0, ip, #2
   2628a:	4429      	add	r1, r5
   2628c:	eba1 0108 	sub.w	r1, r1, r8
   26290:	b29b      	uxth	r3, r3
   26292:	fbb1 fcfe 	udiv	ip, r1, lr
   26296:	fb0e 111c 	mls	r1, lr, ip, r1
   2629a:	fb0c f707 	mul.w	r7, ip, r7
   2629e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   262a2:	429f      	cmp	r7, r3
   262a4:	d90e      	bls.n	262c4 <__udivmoddi4+0x190>
   262a6:	18eb      	adds	r3, r5, r3
   262a8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   262ac:	d204      	bcs.n	262b8 <__udivmoddi4+0x184>
   262ae:	429f      	cmp	r7, r3
   262b0:	d902      	bls.n	262b8 <__udivmoddi4+0x184>
   262b2:	f1ac 0102 	sub.w	r1, ip, #2
   262b6:	442b      	add	r3, r5
   262b8:	1bdb      	subs	r3, r3, r7
   262ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   262be:	e792      	b.n	261e6 <__udivmoddi4+0xb2>
   262c0:	4660      	mov	r0, ip
   262c2:	e7e3      	b.n	2628c <__udivmoddi4+0x158>
   262c4:	4661      	mov	r1, ip
   262c6:	e7f7      	b.n	262b8 <__udivmoddi4+0x184>
   262c8:	4660      	mov	r0, ip
   262ca:	e7a3      	b.n	26214 <__udivmoddi4+0xe0>
   262cc:	4663      	mov	r3, ip
   262ce:	e7b7      	b.n	26240 <__udivmoddi4+0x10c>
   262d0:	4283      	cmp	r3, r0
   262d2:	d906      	bls.n	262e2 <__udivmoddi4+0x1ae>
   262d4:	b916      	cbnz	r6, 262dc <__udivmoddi4+0x1a8>
   262d6:	2100      	movs	r1, #0
   262d8:	4608      	mov	r0, r1
   262da:	e77b      	b.n	261d4 <__udivmoddi4+0xa0>
   262dc:	e9c6 e000 	strd	lr, r0, [r6]
   262e0:	e7f9      	b.n	262d6 <__udivmoddi4+0x1a2>
   262e2:	fab3 f783 	clz	r7, r3
   262e6:	b98f      	cbnz	r7, 2630c <__udivmoddi4+0x1d8>
   262e8:	4283      	cmp	r3, r0
   262ea:	d301      	bcc.n	262f0 <__udivmoddi4+0x1bc>
   262ec:	4572      	cmp	r2, lr
   262ee:	d808      	bhi.n	26302 <__udivmoddi4+0x1ce>
   262f0:	ebbe 0402 	subs.w	r4, lr, r2
   262f4:	eb60 0303 	sbc.w	r3, r0, r3
   262f8:	2001      	movs	r0, #1
   262fa:	469c      	mov	ip, r3
   262fc:	b91e      	cbnz	r6, 26306 <__udivmoddi4+0x1d2>
   262fe:	2100      	movs	r1, #0
   26300:	e768      	b.n	261d4 <__udivmoddi4+0xa0>
   26302:	4638      	mov	r0, r7
   26304:	e7fa      	b.n	262fc <__udivmoddi4+0x1c8>
   26306:	e9c6 4c00 	strd	r4, ip, [r6]
   2630a:	e7f8      	b.n	262fe <__udivmoddi4+0x1ca>
   2630c:	f1c7 0c20 	rsb	ip, r7, #32
   26310:	40bb      	lsls	r3, r7
   26312:	fa22 f40c 	lsr.w	r4, r2, ip
   26316:	431c      	orrs	r4, r3
   26318:	fa2e f10c 	lsr.w	r1, lr, ip
   2631c:	fa20 f30c 	lsr.w	r3, r0, ip
   26320:	40b8      	lsls	r0, r7
   26322:	4301      	orrs	r1, r0
   26324:	ea4f 4914 	mov.w	r9, r4, lsr #16
   26328:	fa0e f507 	lsl.w	r5, lr, r7
   2632c:	fbb3 f8f9 	udiv	r8, r3, r9
   26330:	fa1f fe84 	uxth.w	lr, r4
   26334:	fb09 3018 	mls	r0, r9, r8, r3
   26338:	0c0b      	lsrs	r3, r1, #16
   2633a:	fb08 fa0e 	mul.w	sl, r8, lr
   2633e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   26342:	459a      	cmp	sl, r3
   26344:	fa02 f207 	lsl.w	r2, r2, r7
   26348:	d940      	bls.n	263cc <__udivmoddi4+0x298>
   2634a:	18e3      	adds	r3, r4, r3
   2634c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
   26350:	d204      	bcs.n	2635c <__udivmoddi4+0x228>
   26352:	459a      	cmp	sl, r3
   26354:	d902      	bls.n	2635c <__udivmoddi4+0x228>
   26356:	f1a8 0002 	sub.w	r0, r8, #2
   2635a:	4423      	add	r3, r4
   2635c:	eba3 030a 	sub.w	r3, r3, sl
   26360:	b289      	uxth	r1, r1
   26362:	fbb3 f8f9 	udiv	r8, r3, r9
   26366:	fb09 3318 	mls	r3, r9, r8, r3
   2636a:	fb08 fe0e 	mul.w	lr, r8, lr
   2636e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   26372:	458e      	cmp	lr, r1
   26374:	d92c      	bls.n	263d0 <__udivmoddi4+0x29c>
   26376:	1861      	adds	r1, r4, r1
   26378:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   2637c:	d204      	bcs.n	26388 <__udivmoddi4+0x254>
   2637e:	458e      	cmp	lr, r1
   26380:	d902      	bls.n	26388 <__udivmoddi4+0x254>
   26382:	f1a8 0302 	sub.w	r3, r8, #2
   26386:	4421      	add	r1, r4
   26388:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   2638c:	fba0 9802 	umull	r9, r8, r0, r2
   26390:	eba1 010e 	sub.w	r1, r1, lr
   26394:	4541      	cmp	r1, r8
   26396:	46ce      	mov	lr, r9
   26398:	4643      	mov	r3, r8
   2639a:	d302      	bcc.n	263a2 <__udivmoddi4+0x26e>
   2639c:	d106      	bne.n	263ac <__udivmoddi4+0x278>
   2639e:	454d      	cmp	r5, r9
   263a0:	d204      	bcs.n	263ac <__udivmoddi4+0x278>
   263a2:	ebb9 0e02 	subs.w	lr, r9, r2
   263a6:	eb68 0304 	sbc.w	r3, r8, r4
   263aa:	3801      	subs	r0, #1
   263ac:	2e00      	cmp	r6, #0
   263ae:	d0a6      	beq.n	262fe <__udivmoddi4+0x1ca>
   263b0:	ebb5 020e 	subs.w	r2, r5, lr
   263b4:	eb61 0103 	sbc.w	r1, r1, r3
   263b8:	fa01 fc0c 	lsl.w	ip, r1, ip
   263bc:	fa22 f307 	lsr.w	r3, r2, r7
   263c0:	ea4c 0303 	orr.w	r3, ip, r3
   263c4:	40f9      	lsrs	r1, r7
   263c6:	e9c6 3100 	strd	r3, r1, [r6]
   263ca:	e798      	b.n	262fe <__udivmoddi4+0x1ca>
   263cc:	4640      	mov	r0, r8
   263ce:	e7c5      	b.n	2635c <__udivmoddi4+0x228>
   263d0:	4643      	mov	r3, r8
   263d2:	e7d9      	b.n	26388 <__udivmoddi4+0x254>
   263d4:	0000      	movs	r0, r0
	...

000263d8 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
   263d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   263da:	4d3f      	ldr	r5, [pc, #252]	; (264d8 <bt_init+0x100>)
   263dc:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   263e0:	6899      	ldr	r1, [r3, #8]
   263e2:	f011 0101 	ands.w	r1, r1, #1
   263e6:	d121      	bne.n	2642c <bt_init+0x54>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   263e8:	aa01      	add	r2, sp, #4
   263ea:	f640 4003 	movw	r0, #3075	; 0xc03
   263ee:	f004 fe8f 	bl	2b110 <bt_hci_cmd_send_sync>
		if (err) {
   263f2:	4604      	mov	r4, r0
   263f4:	2800      	cmp	r0, #0
   263f6:	d16c      	bne.n	264d2 <bt_init+0xfa>
		hci_reset_complete(rsp);
   263f8:	9801      	ldr	r0, [sp, #4]
	uint8_t status = buf->data[0];
   263fa:	6883      	ldr	r3, [r0, #8]
	if (status) {
   263fc:	781b      	ldrb	r3, [r3, #0]
   263fe:	b99b      	cbnz	r3, 26428 <bt_init+0x50>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26400:	f3bf 8f5b 	dmb	ish
   26404:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   26408:	f3bf 8f5b 	dmb	ish
   2640c:	f105 02cc 	add.w	r2, r5, #204	; 0xcc
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   26410:	f003 0305 	and.w	r3, r3, #5
   26414:	f3bf 8f5b 	dmb	ish
   26418:	e852 1f00 	ldrex	r1, [r2]
   2641c:	e842 3400 	strex	r4, r3, [r2]
   26420:	2c00      	cmp	r4, #0
   26422:	d1f9      	bne.n	26418 <bt_init+0x40>
   26424:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   26428:	f016 fe3e 	bl	3d0a8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   2642c:	aa01      	add	r2, sp, #4
   2642e:	2100      	movs	r1, #0
   26430:	f241 0003 	movw	r0, #4099	; 0x1003
   26434:	f004 fe6c 	bl	2b110 <bt_hci_cmd_send_sync>
	if (err) {
   26438:	4604      	mov	r4, r0
   2643a:	2800      	cmp	r0, #0
   2643c:	d149      	bne.n	264d2 <bt_init+0xfa>
	read_local_features_complete(rsp);
   2643e:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   26440:	4826      	ldr	r0, [pc, #152]	; (264dc <bt_init+0x104>)
   26442:	68b1      	ldr	r1, [r6, #8]
   26444:	2208      	movs	r2, #8
   26446:	3101      	adds	r1, #1
   26448:	f01e fb3b 	bl	44ac2 <memcpy>
	net_buf_unref(rsp);
   2644c:	4630      	mov	r0, r6
   2644e:	f016 fe2b 	bl	3d0a8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   26452:	4621      	mov	r1, r4
   26454:	aa01      	add	r2, sp, #4
   26456:	f241 0001 	movw	r0, #4097	; 0x1001
   2645a:	f004 fe59 	bl	2b110 <bt_hci_cmd_send_sync>
	if (err) {
   2645e:	4604      	mov	r4, r0
   26460:	2800      	cmp	r0, #0
   26462:	d136      	bne.n	264d2 <bt_init+0xfa>
	read_local_ver_complete(rsp);
   26464:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   26466:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   26468:	785a      	ldrb	r2, [r3, #1]
   2646a:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   2646e:	78d9      	ldrb	r1, [r3, #3]
   26470:	789a      	ldrb	r2, [r3, #2]
   26472:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   26476:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   2647a:	791a      	ldrb	r2, [r3, #4]
   2647c:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   26480:	7a19      	ldrb	r1, [r3, #8]
   26482:	79da      	ldrb	r2, [r3, #7]
   26484:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   26488:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   2648c:	795a      	ldrb	r2, [r3, #5]
   2648e:	799b      	ldrb	r3, [r3, #6]
   26490:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   26494:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   26498:	f016 fe06 	bl	3d0a8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   2649c:	4621      	mov	r1, r4
   2649e:	aa01      	add	r2, sp, #4
   264a0:	f241 0002 	movw	r0, #4098	; 0x1002
   264a4:	f004 fe34 	bl	2b110 <bt_hci_cmd_send_sync>
	if (err) {
   264a8:	4604      	mov	r4, r0
   264aa:	b990      	cbnz	r0, 264d2 <bt_init+0xfa>
	read_supported_commands_complete(rsp);
   264ac:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   264ae:	480c      	ldr	r0, [pc, #48]	; (264e0 <bt_init+0x108>)
   264b0:	68b1      	ldr	r1, [r6, #8]
   264b2:	2240      	movs	r2, #64	; 0x40
   264b4:	3101      	adds	r1, #1
   264b6:	f01e fb04 	bl	44ac2 <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
   264ba:	4809      	ldr	r0, [pc, #36]	; (264e0 <bt_init+0x108>)
   264bc:	f01e fba8 	bl	44c10 <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
   264c0:	4630      	mov	r0, r6
   264c2:	f016 fdf1 	bl	3d0a8 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   264c6:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   264ca:	065a      	lsls	r2, r3, #25
   264cc:	d40a      	bmi.n	264e4 <bt_init+0x10c>
		return -ENODEV;
   264ce:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   264d2:	4620      	mov	r0, r4
   264d4:	b002      	add	sp, #8
   264d6:	bd70      	pop	{r4, r5, r6, pc}
   264d8:	20000000 	.word	0x20000000
   264dc:	20000070 	.word	0x20000070
   264e0:	20000078 	.word	0x20000078
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   264e4:	4621      	mov	r1, r4
   264e6:	aa01      	add	r2, sp, #4
   264e8:	f242 0003 	movw	r0, #8195	; 0x2003
   264ec:	f004 fe10 	bl	2b110 <bt_hci_cmd_send_sync>
	if (err) {
   264f0:	4604      	mov	r4, r0
   264f2:	2800      	cmp	r0, #0
   264f4:	d1ed      	bne.n	264d2 <bt_init+0xfa>
	read_le_features_complete(rsp);
   264f6:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   264f8:	48b7      	ldr	r0, [pc, #732]	; (267d8 <bt_init+0x400>)
   264fa:	68b1      	ldr	r1, [r6, #8]
   264fc:	2208      	movs	r2, #8
   264fe:	3101      	adds	r1, #1
   26500:	f01e fadf 	bl	44ac2 <memcpy>
	net_buf_unref(rsp);
   26504:	4630      	mov	r0, r6
   26506:	f016 fdcf 	bl	3d0a8 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   2650a:	4621      	mov	r1, r4
   2650c:	aa01      	add	r2, sp, #4
   2650e:	f242 0002 	movw	r0, #8194	; 0x2002
   26512:	f004 fdfd 	bl	2b110 <bt_hci_cmd_send_sync>
		if (err) {
   26516:	4604      	mov	r4, r0
   26518:	2800      	cmp	r0, #0
   2651a:	d1da      	bne.n	264d2 <bt_init+0xfa>
		le_read_buffer_size_complete(rsp);
   2651c:	9c01      	ldr	r4, [sp, #4]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   2651e:	68a3      	ldr	r3, [r4, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   26520:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   26524:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   26528:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   2652a:	b121      	cbz	r1, 26536 <bt_init+0x15e>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   2652c:	78da      	ldrb	r2, [r3, #3]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   2652e:	48ab      	ldr	r0, [pc, #684]	; (267dc <bt_init+0x404>)
   26530:	4611      	mov	r1, r2
   26532:	f022 f90c 	bl	4874e <z_impl_k_sem_init>
		net_buf_unref(rsp);
   26536:	4620      	mov	r0, r4
   26538:	f016 fdb6 	bl	3d0a8 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   2653c:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   26540:	f016 0620 	ands.w	r6, r6, #32
   26544:	d118      	bne.n	26578 <bt_init+0x1a0>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   26546:	2102      	movs	r1, #2
   26548:	f640 406d 	movw	r0, #3181	; 0xc6d
   2654c:	f004 fd84 	bl	2b058 <bt_hci_cmd_create>
		if (!buf) {
   26550:	4604      	mov	r4, r0
   26552:	2800      	cmp	r0, #0
   26554:	f000 80ce 	beq.w	266f4 <bt_init+0x31c>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   26558:	2102      	movs	r1, #2
   2655a:	3008      	adds	r0, #8
   2655c:	f021 f9e4 	bl	47928 <net_buf_simple_add>
		cp_le->le = 0x01;
   26560:	2301      	movs	r3, #1
   26562:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   26564:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   26566:	4621      	mov	r1, r4
   26568:	4632      	mov	r2, r6
   2656a:	f640 406d 	movw	r0, #3181	; 0xc6d
   2656e:	f004 fdcf 	bl	2b110 <bt_hci_cmd_send_sync>
		if (err) {
   26572:	4604      	mov	r4, r0
   26574:	2800      	cmp	r0, #0
   26576:	d1ac      	bne.n	264d2 <bt_init+0xfa>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   26578:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   2657c:	071b      	lsls	r3, r3, #28
   2657e:	d512      	bpl.n	265a6 <bt_init+0x1ce>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   26580:	aa01      	add	r2, sp, #4
   26582:	2100      	movs	r1, #0
   26584:	f242 001c 	movw	r0, #8220	; 0x201c
   26588:	f004 fdc2 	bl	2b110 <bt_hci_cmd_send_sync>
		if (err) {
   2658c:	4604      	mov	r4, r0
   2658e:	2800      	cmp	r0, #0
   26590:	d19f      	bne.n	264d2 <bt_init+0xfa>
		le_read_supp_states_complete(rsp);
   26592:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   26594:	6883      	ldr	r3, [r0, #8]
   26596:	f8d3 2001 	ldr.w	r2, [r3, #1]
   2659a:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   2659e:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   265a2:	f016 fd81 	bl	3d0a8 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   265a6:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   265aa:	069e      	lsls	r6, r3, #26
   265ac:	d524      	bpl.n	265f8 <bt_init+0x220>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   265ae:	f10d 0102 	add.w	r1, sp, #2
   265b2:	4668      	mov	r0, sp
   265b4:	f01e fd90 	bl	450d8 <hci_le_read_max_data_len>
		if (err) {
   265b8:	4604      	mov	r4, r0
   265ba:	2800      	cmp	r0, #0
   265bc:	d189      	bne.n	264d2 <bt_init+0xfa>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   265be:	2104      	movs	r1, #4
   265c0:	f242 0024 	movw	r0, #8228	; 0x2024
   265c4:	f004 fd48 	bl	2b058 <bt_hci_cmd_create>
		if (!buf) {
   265c8:	4606      	mov	r6, r0
   265ca:	2800      	cmp	r0, #0
   265cc:	f000 8092 	beq.w	266f4 <bt_init+0x31c>
   265d0:	2104      	movs	r1, #4
   265d2:	3008      	adds	r0, #8
   265d4:	f021 f9a8 	bl	47928 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   265d8:	f8bd 3000 	ldrh.w	r3, [sp]
   265dc:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   265de:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   265e2:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   265e4:	4622      	mov	r2, r4
   265e6:	4631      	mov	r1, r6
   265e8:	f242 0024 	movw	r0, #8228	; 0x2024
   265ec:	f004 fd90 	bl	2b110 <bt_hci_cmd_send_sync>
		if (err) {
   265f0:	4604      	mov	r4, r0
   265f2:	2800      	cmp	r0, #0
   265f4:	f47f af6d 	bne.w	264d2 <bt_init+0xfa>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   265f8:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   265fc:	065c      	lsls	r4, r3, #25
   265fe:	d510      	bpl.n	26622 <bt_init+0x24a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   26600:	aa01      	add	r2, sp, #4
   26602:	2100      	movs	r1, #0
   26604:	f242 002a 	movw	r0, #8234	; 0x202a
   26608:	f004 fd82 	bl	2b110 <bt_hci_cmd_send_sync>
		if (err) {
   2660c:	4604      	mov	r4, r0
   2660e:	2800      	cmp	r0, #0
   26610:	f47f af5f 	bne.w	264d2 <bt_init+0xfa>
		le_read_resolving_list_size_complete(rsp);
   26614:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
   26616:	6883      	ldr	r3, [r0, #8]
   26618:	785b      	ldrb	r3, [r3, #1]
   2661a:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
   2661e:	f016 fd43 	bl	3d0a8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   26622:	2108      	movs	r1, #8
   26624:	f242 0001 	movw	r0, #8193	; 0x2001
   26628:	f004 fd16 	bl	2b058 <bt_hci_cmd_create>
	if (!buf) {
   2662c:	4604      	mov	r4, r0
   2662e:	2800      	cmp	r0, #0
   26630:	d060      	beq.n	266f4 <bt_init+0x31c>
   26632:	2108      	movs	r1, #8
   26634:	4408      	add	r0, r1
   26636:	f021 f977 	bl	47928 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   2663a:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   2663e:	f011 0f40 	tst.w	r1, #64	; 0x40
   26642:	4602      	mov	r2, r0
   26644:	f240 2302 	movw	r3, #514	; 0x202
   26648:	bf08      	it	eq
   2664a:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   2664c:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   2664e:	bf4c      	ite	mi
   26650:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   26654:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   26658:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   2665a:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   2665e:	bf48      	it	mi
   26660:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   26664:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   26668:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   2666c:	bf18      	it	ne
   2666e:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   26672:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   26676:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   26678:	bf48      	it	mi
   2667a:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   2667e:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   26680:	bf08      	it	eq
   26682:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   26686:	2100      	movs	r1, #0
   26688:	f01e fc06 	bl	44e98 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   2668c:	4621      	mov	r1, r4
   2668e:	2200      	movs	r2, #0
   26690:	f242 0001 	movw	r0, #8193	; 0x2001
   26694:	f004 fd3c 	bl	2b110 <bt_hci_cmd_send_sync>
	if (err) {
   26698:	4604      	mov	r4, r0
   2669a:	2800      	cmp	r0, #0
   2669c:	f47f af19 	bne.w	264d2 <bt_init+0xfa>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   266a0:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
   266a4:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
   266a8:	0698      	lsls	r0, r3, #26
   266aa:	d426      	bmi.n	266fa <bt_init+0x322>
	if (bt_dev.le.acl_mtu) {
   266ac:	b9d9      	cbnz	r1, 266e6 <bt_init+0x30e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   266ae:	aa01      	add	r2, sp, #4
   266b0:	f241 0005 	movw	r0, #4101	; 0x1005
   266b4:	f004 fd2c 	bl	2b110 <bt_hci_cmd_send_sync>
	if (err) {
   266b8:	4604      	mov	r4, r0
   266ba:	2800      	cmp	r0, #0
   266bc:	f47f af09 	bne.w	264d2 <bt_init+0xfa>
	if (bt_dev.le.acl_mtu) {
   266c0:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
   266c4:	9c01      	ldr	r4, [sp, #4]
	if (bt_dev.le.acl_mtu) {
   266c6:	b95b      	cbnz	r3, 266e0 <bt_init+0x308>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   266c8:	68a3      	ldr	r3, [r4, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   266ca:	785a      	ldrb	r2, [r3, #1]
   266cc:	7899      	ldrb	r1, [r3, #2]
   266ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   266d2:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   266d6:	889a      	ldrh	r2, [r3, #4]
   266d8:	4840      	ldr	r0, [pc, #256]	; (267dc <bt_init+0x404>)
   266da:	4611      	mov	r1, r2
   266dc:	f022 f837 	bl	4874e <z_impl_k_sem_init>
	net_buf_unref(rsp);
   266e0:	4620      	mov	r0, r4
   266e2:	f016 fce1 	bl	3d0a8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   266e6:	2108      	movs	r1, #8
   266e8:	f640 4001 	movw	r0, #3073	; 0xc01
   266ec:	f004 fcb4 	bl	2b058 <bt_hci_cmd_create>
	if (!buf) {
   266f0:	4604      	mov	r4, r0
   266f2:	b938      	cbnz	r0, 26704 <bt_init+0x32c>
		return -ENOBUFS;
   266f4:	f06f 0468 	mvn.w	r4, #104	; 0x68
   266f8:	e6eb      	b.n	264d2 <bt_init+0xfa>
	else if (!bt_dev.le.acl_mtu) {
   266fa:	2900      	cmp	r1, #0
   266fc:	d1f3      	bne.n	266e6 <bt_init+0x30e>
		return -EIO;
   266fe:	f06f 0404 	mvn.w	r4, #4
   26702:	e6e6      	b.n	264d2 <bt_init+0xfa>
   26704:	2108      	movs	r1, #8
   26706:	4408      	add	r0, r1
   26708:	f021 f90e 	bl	47928 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   2670c:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   26710:	07d9      	lsls	r1, r3, #31
   26712:	4602      	mov	r2, r0
   26714:	d457      	bmi.n	267c6 <bt_init+0x3ee>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   26716:	4832      	ldr	r0, [pc, #200]	; (267e0 <bt_init+0x408>)
   26718:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
	sys_put_le64(mask, ev->events);
   2671c:	f01e fbbc 	bl	44e98 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   26720:	4621      	mov	r1, r4
   26722:	2200      	movs	r2, #0
   26724:	f640 4001 	movw	r0, #3073	; 0xc01
   26728:	f004 fcf2 	bl	2b110 <bt_hci_cmd_send_sync>
	if (err) {
   2672c:	4604      	mov	r4, r0
   2672e:	2800      	cmp	r0, #0
   26730:	f47f aecf 	bne.w	264d2 <bt_init+0xfa>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   26734:	4601      	mov	r1, r0
   26736:	aa01      	add	r2, sp, #4
   26738:	f64f 4001 	movw	r0, #64513	; 0xfc01
   2673c:	f004 fce8 	bl	2b110 <bt_hci_cmd_send_sync>
	if (err) {
   26740:	4604      	mov	r4, r0
   26742:	bb48      	cbnz	r0, 26798 <bt_init+0x3c0>
	net_buf_unref(rsp);
   26744:	9801      	ldr	r0, [sp, #4]
   26746:	f016 fcaf 	bl	3d0a8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   2674a:	4621      	mov	r1, r4
   2674c:	aa01      	add	r2, sp, #4
   2674e:	f64f 4002 	movw	r0, #64514	; 0xfc02
   26752:	f004 fcdd 	bl	2b110 <bt_hci_cmd_send_sync>
	if (err) {
   26756:	4604      	mov	r4, r0
   26758:	b9f0      	cbnz	r0, 26798 <bt_init+0x3c0>
	rp.cmds = (void *)rsp->data;
   2675a:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   2675c:	4821      	ldr	r0, [pc, #132]	; (267e4 <bt_init+0x40c>)
   2675e:	68b1      	ldr	r1, [r6, #8]
   26760:	2202      	movs	r2, #2
   26762:	3101      	adds	r1, #1
   26764:	f01e f9ad 	bl	44ac2 <memcpy>
	net_buf_unref(rsp);
   26768:	4630      	mov	r0, r6
   2676a:	f016 fc9d 	bl	3d0a8 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   2676e:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   26772:	075b      	lsls	r3, r3, #29
   26774:	d510      	bpl.n	26798 <bt_init+0x3c0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   26776:	aa01      	add	r2, sp, #4
   26778:	4621      	mov	r1, r4
   2677a:	f64f 4003 	movw	r0, #64515	; 0xfc03
   2677e:	f004 fcc7 	bl	2b110 <bt_hci_cmd_send_sync>
		if (err) {
   26782:	b948      	cbnz	r0, 26798 <bt_init+0x3c0>
		rp.feat = (void *)rsp->data;
   26784:	9c01      	ldr	r4, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   26786:	4818      	ldr	r0, [pc, #96]	; (267e8 <bt_init+0x410>)
   26788:	68a1      	ldr	r1, [r4, #8]
   2678a:	2201      	movs	r2, #1
   2678c:	4411      	add	r1, r2
   2678e:	f01e f998 	bl	44ac2 <memcpy>
		net_buf_unref(rsp);
   26792:	4620      	mov	r0, r4
   26794:	f016 fc88 	bl	3d0a8 <net_buf_unref>
	err = bt_id_init();
   26798:	f01e ff1a 	bl	455d0 <bt_id_init>
	if (err) {
   2679c:	4604      	mov	r4, r0
   2679e:	2800      	cmp	r0, #0
   267a0:	f47f ae97 	bne.w	264d2 <bt_init+0xfa>
		err = bt_conn_init();
   267a4:	f006 fb10 	bl	2cdc8 <bt_conn_init>
		if (err) {
   267a8:	4604      	mov	r4, r0
   267aa:	2800      	cmp	r0, #0
   267ac:	f47f ae91 	bne.w	264d2 <bt_init+0xfa>
		if (!bt_dev.id_count) {
   267b0:	79eb      	ldrb	r3, [r5, #7]
   267b2:	2b00      	cmp	r3, #0
   267b4:	f43f ae8d 	beq.w	264d2 <bt_init+0xfa>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   267b8:	2104      	movs	r1, #4
   267ba:	480c      	ldr	r0, [pc, #48]	; (267ec <bt_init+0x414>)
   267bc:	f01e fafb 	bl	44db6 <atomic_or>
	bt_finalize_init();
   267c0:	f004 ff66 	bl	2b690 <bt_finalize_init>
	return 0;
   267c4:	e685      	b.n	264d2 <bt_init+0xfa>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   267c6:	a102      	add	r1, pc, #8	; (adr r1, 267d0 <bt_init+0x3f8>)
   267c8:	e9d1 0100 	ldrd	r0, r1, [r1]
   267cc:	e7a6      	b.n	2671c <bt_init+0x344>
   267ce:	bf00      	nop
   267d0:	02008890 	.word	0x02008890
   267d4:	20008000 	.word	0x20008000
   267d8:	200000d0 	.word	0x200000d0
   267dc:	20000100 	.word	0x20000100
   267e0:	02008810 	.word	0x02008810
   267e4:	200000b9 	.word	0x200000b9
   267e8:	200000b8 	.word	0x200000b8
   267ec:	200000cc 	.word	0x200000cc

000267f0 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
   267f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
   267f4:	e9d0 350b 	ldrd	r3, r5, [r0, #44]	; 0x2c
	start_to_address_actual_us =
   267f8:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
   267fc:	195c      	adds	r4, r3, r5
	start_to_address_expected_us = EVENT_JITTER_US +
   267fe:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
   26800:	45a0      	cmp	r8, r4
{
   26802:	460f      	mov	r7, r1
   26804:	4616      	mov	r6, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
   26806:	d819      	bhi.n	2683c <ull_drift_ticks_get+0x4c>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
   26808:	4d1d      	ldr	r5, [pc, #116]	; (26880 <ull_drift_ticks_get+0x90>)
   2680a:	fba3 0105 	umull	r0, r1, r3, r5
   2680e:	a31a      	add	r3, pc, #104	; (adr r3, 26878 <ull_drift_ticks_get+0x88>)
   26810:	e9d3 2300 	ldrd	r2, r3, [r3]
   26814:	f7ff fc74 	bl	26100 <__aeabi_uldivmod>
   26818:	4603      	mov	r3, r0
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
   2681a:	eba4 0008 	sub.w	r0, r4, r8
   2681e:	fba0 0105 	umull	r0, r1, r0, r5
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
   26822:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
   26826:	a314      	add	r3, pc, #80	; (adr r3, 26878 <ull_drift_ticks_get+0x88>)
   26828:	e9d3 2300 	ldrd	r2, r3, [r3]
   2682c:	f7ff fc68 	bl	26100 <__aeabi_uldivmod>
   26830:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
   26834:	603c      	str	r4, [r7, #0]
		*ticks_drift_minus =
   26836:	6030      	str	r0, [r6, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
   26838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
   2683c:	f8df 9040 	ldr.w	r9, [pc, #64]	; 26880 <ull_drift_ticks_get+0x90>
   26840:	a30d      	add	r3, pc, #52	; (adr r3, 26878 <ull_drift_ticks_get+0x88>)
   26842:	e9d3 2300 	ldrd	r2, r3, [r3]
   26846:	fba8 0109 	umull	r0, r1, r8, r9
   2684a:	f7ff fc59 	bl	26100 <__aeabi_uldivmod>
   2684e:	4604      	mov	r4, r0
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
   26850:	f105 0030 	add.w	r0, r5, #48	; 0x30
   26854:	a308      	add	r3, pc, #32	; (adr r3, 26878 <ull_drift_ticks_get+0x88>)
   26856:	e9d3 2300 	ldrd	r2, r3, [r3]
   2685a:	fba0 0109 	umull	r0, r1, r0, r9
   2685e:	f7ff fc4f 	bl	26100 <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
   26862:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
   26866:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
   2686a:	603c      	str	r4, [r7, #0]
		*ticks_drift_minus =
   2686c:	6030      	str	r0, [r6, #0]
}
   2686e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26872:	bf00      	nop
   26874:	f3af 8000 	nop.w
   26878:	1afd498d 	.word	0x1afd498d
   2687c:	00000007 	.word	0x00000007
   26880:	3b9aca00 	.word	0x3b9aca00
   26884:	00000000 	.word	0x00000000

00026888 <ll_adv_enable>:
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint8_t hci_err;
	uint32_t ret;

	if (!enable) {
   26888:	2800      	cmp	r0, #0
   2688a:	f000 818d 	beq.w	26ba8 <ll_adv_enable+0x320>
{
   2688e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
   26892:	4ccd      	ldr	r4, [pc, #820]	; (26bc8 <ll_adv_enable+0x340>)
   26894:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
   26898:	f012 0501 	ands.w	r5, r2, #1
{
   2689c:	b08d      	sub	sp, #52	; 0x34
	if (!adv || adv->is_enabled) {
   2689e:	f040 81d2 	bne.w	26c46 <ll_adv_enable+0x3be>
	ull_filter_adv_update(lll->filter_policy);
   268a2:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
	lll->rl_idx = FILTER_IDX_NONE;
   268a6:	23ff      	movs	r3, #255	; 0xff
	ull_filter_adv_update(lll->filter_policy);
   268a8:	f000 0003 	and.w	r0, r0, #3
	lll->rl_idx = FILTER_IDX_NONE;
   268ac:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	ull_filter_adv_update(lll->filter_policy);
   268b0:	f013 f8f8 	bl	39aa4 <ull_filter_adv_update>
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   268b4:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
   268b8:	0746      	lsls	r6, r0, #29
   268ba:	d427      	bmi.n	2690c <ll_adv_enable+0x84>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   268bc:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   268c0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   268c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   268c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   268cc:	6ad7      	ldr	r7, [r2, #44]	; 0x2c
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   268ce:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		pdu_adv_to_update = pdu;
	}

	if (pdu_adv_to_update) {
   268d2:	b187      	cbz	r7, 268f6 <ll_adv_enable+0x6e>
		const uint8_t *adv_addr;

		adv_addr = ull_adv_pdu_update_addrs(adv, pdu_adv_to_update);
   268d4:	4639      	mov	r1, r7
   268d6:	48bc      	ldr	r0, [pc, #752]	; (26bc8 <ll_adv_enable+0x340>)
   268d8:	f00d fd32 	bl	34340 <ull_adv_pdu_update_addrs>

		/* In case the local IRK was not set or no match was
		 * found the fallback address was used instead, check
		 * that a valid address has been set.
		 */
		if (pdu_adv_to_update->tx_addr &&
   268dc:	783b      	ldrb	r3, [r7, #0]
   268de:	0659      	lsls	r1, r3, #25
   268e0:	d505      	bpl.n	268ee <ll_adv_enable+0x66>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
   268e2:	2106      	movs	r1, #6
   268e4:	f009 f8c4 	bl	2fa70 <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
   268e8:	2800      	cmp	r0, #0
   268ea:	f000 81ae 	beq.w	26c4a <ll_adv_enable+0x3c2>
		if ((pdu->type != PDU_ADV_TYPE_EXT_IND) ||
		    (pdu->adv_ext_ind.adv_mode & BT_HCI_LE_ADV_PROP_SCAN)) {
#else
		if (1) {
#endif
			ull_adv_pdu_update_addrs(adv, pdu_scan);
   268ee:	48b6      	ldr	r0, [pc, #728]	; (26bc8 <ll_adv_enable+0x340>)
   268f0:	4641      	mov	r1, r8
   268f2:	f00d fd25 	bl	34340 <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   268f6:	783b      	ldrb	r3, [r7, #0]
   268f8:	f013 0f0e 	tst.w	r3, #14
   268fc:	f040 80ed 	bne.w	26ada <ll_adv_enable+0x252>
		if (lll->conn) {
   26900:	6a23      	ldr	r3, [r4, #32]
   26902:	b193      	cbz	r3, 2692a <ll_adv_enable+0xa2>
	return BT_HCI_ERR_CMD_DISALLOWED;
   26904:	200c      	movs	r0, #12
}
   26906:	b00d      	add	sp, #52	; 0x34
   26908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
   2690c:	462a      	mov	r2, r5
   2690e:	f104 016b 	add.w	r1, r4, #107	; 0x6b
   26912:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   26916:	f013 fa2f 	bl	39d78 <ull_filter_rl_find>
		if (lll->rl_idx != FILTER_IDX_NONE) {
   2691a:	28ff      	cmp	r0, #255	; 0xff
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
   2691c:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
		if (lll->rl_idx != FILTER_IDX_NONE) {
   26920:	d0cc      	beq.n	268bc <ll_adv_enable+0x34>
			ull_filter_rpa_update(false);
   26922:	4628      	mov	r0, r5
   26924:	f013 f8d8 	bl	39ad8 <ull_filter_rpa_update>
   26928:	e7c8      	b.n	268bc <ll_adv_enable+0x34>
		link = ll_rx_link_alloc();
   2692a:	f00c fbcb 	bl	330c4 <ll_rx_link_alloc>
		if (!link) {
   2692e:	4681      	mov	r9, r0
   26930:	2800      	cmp	r0, #0
   26932:	f000 8197 	beq.w	26c64 <ll_adv_enable+0x3dc>
		node_rx = ll_rx_alloc();
   26936:	f00c fbd1 	bl	330dc <ll_rx_alloc>
		if (!node_rx) {
   2693a:	4682      	mov	sl, r0
   2693c:	2800      	cmp	r0, #0
   2693e:	f000 818e 	beq.w	26c5e <ll_adv_enable+0x3d6>
		conn = ll_conn_acquire();
   26942:	f00e fc35 	bl	351b0 <ll_conn_acquire>
		if (!conn) {
   26946:	4605      	mov	r5, r0
   26948:	2800      	cmp	r0, #0
   2694a:	f000 818d 	beq.w	26c68 <ll_adv_enable+0x3e0>
		if (!conn_lll->link_tx_free) {
   2694e:	6f40      	ldr	r0, [r0, #116]	; 0x74
		conn_lll->handle = 0xFFFF;
   26950:	f64f 73ff 	movw	r3, #65535	; 0xffff
   26954:	852b      	strh	r3, [r5, #40]	; 0x28
		conn_lll = &conn->lll;
   26956:	f105 0b1c 	add.w	fp, r5, #28
		if (!conn_lll->link_tx_free) {
   2695a:	2800      	cmp	r0, #0
   2695c:	f000 817b 	beq.w	26c56 <ll_adv_enable+0x3ce>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
   26960:	f105 0268 	add.w	r2, r5, #104	; 0x68
   26964:	f105 0164 	add.w	r1, r5, #100	; 0x64
   26968:	f009 f88e 	bl	2fa88 <memq_init>
			conn_lll->phy_tx = PHY_1M;
   2696c:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   26970:	4a96      	ldr	r2, [pc, #600]	; (26bcc <ll_adv_enable+0x344>)
			conn_lll->phy_tx = PHY_1M;
   26972:	f423 63ef 	bic.w	r3, r3, #1912	; 0x778
   26976:	f023 0307 	bic.w	r3, r3, #7
   2697a:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   2697e:	f043 0301 	orr.w	r3, r3, #1
   26982:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
		conn_lll->data_chan_sel = 0;
   26986:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
   2698a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2698e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   26992:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
		conn_lll->sn = 0;
   26996:	f895 307a 	ldrb.w	r3, [r5, #122]	; 0x7a
   2699a:	f023 0307 	bic.w	r3, r3, #7
   2699e:	f885 307a 	strb.w	r3, [r5, #122]	; 0x7a
		conn_lll->periph.initiated = 0;
   269a2:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   269a6:	f023 0307 	bic.w	r3, r3, #7
   269aa:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
		conn->common.fex_valid = 0;
   269ae:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   269b2:	f023 0307 	bic.w	r3, r3, #7
   269b6:	f885 30d8 	strb.w	r3, [r5, #216]	; 0xd8
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   269ba:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
		conn_lll->link_tx_free = NULL;
   269be:	2600      	movs	r6, #0
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   269c0:	e9c5 3216 	strd	r3, r2, [r5, #88]	; 0x58
		conn->connect_expire = 6;
   269c4:	2306      	movs	r3, #6
   269c6:	f8a5 30c0 	strh.w	r3, [r5, #192]	; 0xc0
		conn_lll->periph.window_widening_event_us = 0;
   269ca:	e9c5 6612 	strd	r6, r6, [r5, #72]	; 0x48
		conn_lll->link_tx_free = NULL;
   269ce:	676e      	str	r6, [r5, #116]	; 0x74
		conn_lll->packet_tx_head_len = 0;
   269d0:	f8a5 6078 	strh.w	r6, [r5, #120]	; 0x78
		conn_lll->event_counter = 0;
   269d4:	866e      	strh	r6, [r5, #50]	; 0x32
		conn_lll->latency_prepare = 0;
   269d6:	f8c5 602e 	str.w	r6, [r5, #46]	; 0x2e
		conn_lll->data_chan_use = 0;
   269da:	f885 603b 	strb.w	r6, [r5, #59]	; 0x3b
		conn_lll->periph.window_size_prepare_us = 0;
   269de:	652e      	str	r6, [r5, #80]	; 0x50
		conn->supervision_expire = 0;
   269e0:	f8a5 60c4 	strh.w	r6, [r5, #196]	; 0xc4
		conn->procedure_expire = 0;
   269e4:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
		conn->apto_expire = 0U;
   269e8:	f8a5 60d0 	strh.w	r6, [r5, #208]	; 0xd0
		conn->appto_expire = 0U;
   269ec:	f8a5 60cc 	strh.w	r6, [r5, #204]	; 0xcc
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
   269f0:	f885 60e6 	strb.w	r6, [r5, #230]	; 0xe6
   269f4:	f8a5 60e4 	strh.w	r6, [r5, #228]	; 0xe4
		conn->llcp_rx = NULL;
   269f8:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
   269fc:	f8a5 610c 	strh.w	r6, [r5, #268]	; 0x10c
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
   26a00:	f8a5 6120 	strh.w	r6, [r5, #288]	; 0x120
		conn->llcp_feature.features_conn = ll_feat_get();
   26a04:	f00b fe30 	bl	32668 <ll_feat_get>
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
   26a08:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
		conn->llcp_version.req = conn->llcp_version.ack = 0;
   26a0c:	f8a5 6138 	strh.w	r6, [r5, #312]	; 0x138
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
   26a10:	f023 0303 	bic.w	r3, r3, #3
   26a14:	f885 313a 	strb.w	r3, [r5, #314]	; 0x13a
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   26a18:	f895 307a 	ldrb.w	r3, [r5, #122]	; 0x7a
		conn->llcp_terminate.req = conn->llcp_terminate.ack = 0;
   26a1c:	f8a5 6140 	strh.w	r6, [r5, #320]	; 0x140
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   26a20:	f023 0318 	bic.w	r3, r3, #24
   26a24:	f885 307a 	strb.w	r3, [r5, #122]	; 0x7a
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   26a28:	f895 3166 	ldrb.w	r3, [r5, #358]	; 0x166
		conn->llcp_terminate.reason_final = 0;
   26a2c:	f885 6143 	strb.w	r6, [r5, #323]	; 0x143
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   26a30:	f023 0307 	bic.w	r3, r3, #7
   26a34:	f885 3166 	strb.w	r3, [r5, #358]	; 0x166
		conn->llcp_conn_param.disabled = 0;
   26a38:	f895 3186 	ldrb.w	r3, [r5, #390]	; 0x186
		conn->llcp_terminate.node_rx.hdr.link = link;
   26a3c:	f8c5 9144 	str.w	r9, [r5, #324]	; 0x144
		conn->llcp_conn_param.disabled = 0;
   26a40:	f366 1345 	bfi	r3, r6, #5, #1
   26a44:	f885 3186 	strb.w	r3, [r5, #390]	; 0x186
		conn->llcp_length.disabled = 0U;
   26a48:	f895 31ae 	ldrb.w	r3, [r5, #430]	; 0x1ae
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
   26a4c:	f8a5 6164 	strh.w	r6, [r5, #356]	; 0x164
		conn->llcp_length.disabled = 0U;
   26a50:	f366 03c3 	bfi	r3, r6, #3, #1
		conn->llcp_feature.features_peer = 0;
   26a54:	2200      	movs	r2, #0
		conn->llcp_length.disabled = 0U;
   26a56:	f885 31ae 	strb.w	r3, [r5, #430]	; 0x1ae
		conn->llcp_feature.features_peer = 0;
   26a5a:	2300      	movs	r3, #0
		conn->llcp_feature.features_conn = ll_feat_get();
   26a5c:	e9c5 014a 	strd	r0, r1, [r5, #296]	; 0x128
		conn->llcp_feature.features_peer = 0;
   26a60:	e9c5 234c 	strd	r2, r3, [r5, #304]	; 0x130
		conn->periph.llcp_type = 0U;
   26a64:	f885 60d9 	strb.w	r6, [r5, #217]	; 0xd9
		conn->llcp_conn_param.req = 0;
   26a68:	f8a5 6184 	strh.w	r6, [r5, #388]	; 0x184
		conn->periph.ticks_to_offset = 0;
   26a6c:	f8c5 60e0 	str.w	r6, [r5, #224]	; 0xe0
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
   26a70:	f8a5 61ac 	strh.w	r6, [r5, #428]	; 0x1ac
		conn->llcp_length.cache.tx_octets = 0U;
   26a74:	f8a5 61b8 	strh.w	r6, [r5, #440]	; 0x1b8
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
   26a78:	f00e fec8 	bl	3580c <ull_conn_default_tx_octets_get>
   26a7c:	f8a5 00d2 	strh.w	r0, [r5, #210]	; 0xd2
		conn->default_tx_time = ull_conn_default_tx_time_get();
   26a80:	f00e feca 	bl	35818 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
   26a84:	f8d5 21bc 	ldr.w	r2, [r5, #444]	; 0x1bc
   26a88:	4b51      	ldr	r3, [pc, #324]	; (26bd0 <ll_adv_enable+0x348>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
   26a8a:	f8a5 00d4 	strh.w	r0, [r5, #212]	; 0xd4
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
   26a8e:	4013      	ands	r3, r2
   26a90:	f8c5 31bc 	str.w	r3, [r5, #444]	; 0x1bc
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
   26a94:	f00e fec6 	bl	35824 <ull_conn_default_phy_tx_get>
   26a98:	f895 31c0 	ldrb.w	r3, [r5, #448]	; 0x1c0
   26a9c:	f360 0302 	bfi	r3, r0, #0, #3
   26aa0:	f885 31c0 	strb.w	r3, [r5, #448]	; 0x1c0
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   26aa4:	f00e fec4 	bl	35830 <ull_conn_default_phy_rx_get>
   26aa8:	f895 31c0 	ldrb.w	r3, [r5, #448]	; 0x1c0
		lll->conn = conn_lll;
   26aac:	f8c4 b020 	str.w	fp, [r4, #32]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   26ab0:	f360 03c5 	bfi	r3, r0, #3, #3
		adv->node_rx_cc_free = node_rx;
   26ab4:	e9c4 9a18 	strd	r9, sl, [r4, #96]	; 0x60
		conn->tx_data = conn->tx_data_last = 0;
   26ab8:	e9c5 6674 	strd	r6, r6, [r5, #464]	; 0x1d0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
   26abc:	e9c5 6672 	strd	r6, r6, [r5, #456]	; 0x1c8
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
	hdr->disabled_cb = hdr->disabled_param = NULL;
   26ac0:	e9c5 6605 	strd	r6, r6, [r5, #20]
   26ac4:	f8c5 61c4 	str.w	r6, [r5, #452]	; 0x1c4
	hdr->ref = 0U;
   26ac8:	702e      	strb	r6, [r5, #0]

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
   26aca:	61ed      	str	r5, [r5, #28]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   26acc:	f885 31c0 	strb.w	r3, [r5, #448]	; 0x1c0
		err = lll_clock_wait();
   26ad0:	f014 f89e 	bl	3ac10 <lll_clock_wait>
		if (err) {
   26ad4:	2800      	cmp	r0, #0
   26ad6:	f040 80ba 	bne.w	26c4e <ll_adv_enable+0x3c6>
	uint8_t ch_map = lll->chan_map;
   26ada:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
   26ade:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
   26ae0:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
   26ae4:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
	uint8_t ch_map = lll->chan_map;
   26ae8:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
   26aec:	f009 f956 	bl	2fd9c <util_ones_count_get>
	if (adv_chn_cnt == 0) {
   26af0:	4602      	mov	r2, r0
   26af2:	2800      	cmp	r0, #0
   26af4:	d05a      	beq.n	26bac <ll_adv_enable+0x324>
	uint16_t time_us = adv_time_get(pdu_adv, pdu_scan, adv_chn_cnt, phy,
   26af6:	f898 1001 	ldrb.w	r1, [r8, #1]
   26afa:	4638      	mov	r0, r7
   26afc:	f00d f9f0 	bl	33ee0 <adv_time_get.constprop.0.isra.0>
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
   26b00:	4934      	ldr	r1, [pc, #208]	; (26bd4 <ll_adv_enable+0x34c>)
	uint16_t interval = adv->interval;
   26b02:	f8b4 6068 	ldrh.w	r6, [r4, #104]	; 0x68
   26b06:	2500      	movs	r5, #0
	adv->ull.ticks_prepare_to_start =
   26b08:	2331      	movs	r3, #49	; 0x31
   26b0a:	60a3      	str	r3, [r4, #8]
	hdr->disabled_cb = hdr->disabled_param = NULL;
   26b0c:	e9c4 5505 	strd	r5, r5, [r4, #20]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
   26b10:	a32b      	add	r3, pc, #172	; (adr r3, 26bc0 <ll_adv_enable+0x338>)
   26b12:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->ref = 0U;
   26b16:	7025      	strb	r5, [r4, #0]
	adv->ull.ticks_active_to_start = 0;
   26b18:	6065      	str	r5, [r4, #4]
	adv->ull.ticks_preempt_to_start =
   26b1a:	60e5      	str	r5, [r4, #12]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
   26b1c:	fba0 0101 	umull	r0, r1, r0, r1
   26b20:	f7ff faee 	bl	26100 <__aeabi_uldivmod>
   26b24:	6120      	str	r0, [r4, #16]
	ticks_anchor = ticker_ticks_now_get();
   26b26:	f00a faa1 	bl	3106c <ticker_ticks_now_get>
   26b2a:	4680      	mov	r8, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
   26b2c:	b93e      	cbnz	r6, 26b3e <ll_adv_enable+0x2b6>
   26b2e:	783d      	ldrb	r5, [r7, #0]
   26b30:	f005 050f 	and.w	r5, r5, #15
   26b34:	f1a5 0501 	sub.w	r5, r5, #1
   26b38:	fab5 f585 	clz	r5, r5
   26b3c:	096d      	lsrs	r5, r5, #5
   26b3e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
				   (adv->ull.ticks_slot + ticks_slot_overhead),
   26b42:	6923      	ldr	r3, [r4, #16]
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
   26b44:	f365 0000 	bfi	r0, r5, #0, #1
	if (lll->is_hdcd) {
   26b48:	f010 0501 	ands.w	r5, r0, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
   26b4c:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	if (lll->is_hdcd) {
   26b50:	d048      	beq.n	26be4 <ll_adv_enable+0x35c>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26b52:	2000      	movs	r0, #0
   26b54:	4a20      	ldr	r2, [pc, #128]	; (26bd8 <ll_adv_enable+0x350>)
   26b56:	4f21      	ldr	r7, [pc, #132]	; (26bdc <ll_adv_enable+0x354>)
   26b58:	9304      	str	r3, [sp, #16]
		ret_cb = TICKER_STATUS_BUSY;
   26b5a:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26b5c:	ae0b      	add	r6, sp, #44	; 0x2c
   26b5e:	9301      	str	r3, [sp, #4]
   26b60:	9205      	str	r2, [sp, #20]
   26b62:	2103      	movs	r1, #3
   26b64:	e9cd 0002 	strd	r0, r0, [sp, #8]
   26b68:	9608      	str	r6, [sp, #32]
   26b6a:	9406      	str	r4, [sp, #24]
   26b6c:	4643      	mov	r3, r8
   26b6e:	9000      	str	r0, [sp, #0]
   26b70:	9707      	str	r7, [sp, #28]
   26b72:	462a      	mov	r2, r5
		ret_cb = TICKER_STATUS_BUSY;
   26b74:	950b      	str	r5, [sp, #44]	; 0x2c
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26b76:	f00a f9ab 	bl	30ed0 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
   26b7a:	4631      	mov	r1, r6
   26b7c:	f00c fb58 	bl	33230 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
   26b80:	b9a0      	cbnz	r0, 26bac <ll_adv_enable+0x324>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26b82:	4917      	ldr	r1, [pc, #92]	; (26be0 <ll_adv_enable+0x358>)
   26b84:	9105      	str	r1, [sp, #20]
   26b86:	f24a 33d8 	movw	r3, #41944	; 0xa3d8
   26b8a:	9300      	str	r3, [sp, #0]
   26b8c:	e9cd 0003 	strd	r0, r0, [sp, #12]
   26b90:	e9cd 0001 	strd	r0, r0, [sp, #4]
   26b94:	9707      	str	r7, [sp, #28]
   26b96:	9608      	str	r6, [sp, #32]
   26b98:	9406      	str	r4, [sp, #24]
   26b9a:	4643      	mov	r3, r8
   26b9c:	2201      	movs	r2, #1
   26b9e:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
   26ba0:	950b      	str	r5, [sp, #44]	; 0x2c
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26ba2:	f00a f995 	bl	30ed0 <ticker_start>
   26ba6:	e043      	b.n	26c30 <ll_adv_enable+0x3a8>
		return disable(handle);
   26ba8:	f00d b8ec 	b.w	33d84 <disable.constprop.0>
	if (adv->lll.conn) {
   26bac:	6a23      	ldr	r3, [r4, #32]
   26bae:	2b00      	cmp	r3, #0
   26bb0:	f43f aea8 	beq.w	26904 <ll_adv_enable+0x7c>
		conn_release(adv);
   26bb4:	f00d f8a4 	bl	33d00 <conn_release.constprop.0>
   26bb8:	e6a4      	b.n	26904 <ll_adv_enable+0x7c>
   26bba:	bf00      	nop
   26bbc:	f3af 8000 	nop.w
   26bc0:	1afd498d 	.word	0x1afd498d
   26bc4:	00000007 	.word	0x00000007
   26bc8:	20002560 	.word	0x20002560
   26bcc:	01480148 	.word	0x01480148
   26bd0:	f6ff0000 	.word	0xf6ff0000
   26bd4:	3b9aca00 	.word	0x3b9aca00
   26bd8:	00033f51 	.word	0x00033f51
   26bdc:	00032709 	.word	0x00032709
   26be0:	00033a91 	.word	0x00033a91
		ll_adv_ticker_ext[handle].ticks_slot_window =
   26be4:	4a26      	ldr	r2, [pc, #152]	; (26c80 <ll_adv_enable+0x3f8>)
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26be6:	4827      	ldr	r0, [pc, #156]	; (26c84 <ll_adv_enable+0x3fc>)
		ret = ticker_start_ext(
   26be8:	9304      	str	r3, [sp, #16]
			ULL_ADV_RANDOM_DELAY + ticks_slot;
   26bea:	f203 1347 	addw	r3, r3, #327	; 0x147
		ret = ticker_start_ext(
   26bee:	9406      	str	r4, [sp, #24]
   26bf0:	9502      	str	r5, [sp, #8]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26bf2:	2191      	movs	r1, #145	; 0x91
		ll_adv_ticker_ext[handle].ticks_slot_window =
   26bf4:	6013      	str	r3, [r2, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26bf6:	fba6 0300 	umull	r0, r3, r6, r0
   26bfa:	fb01 3106 	mla	r1, r1, r6, r3
		ret = ticker_start_ext(
   26bfe:	4b22      	ldr	r3, [pc, #136]	; (26c88 <ll_adv_enable+0x400>)
   26c00:	9307      	str	r3, [sp, #28]
   26c02:	4b22      	ldr	r3, [pc, #136]	; (26c8c <ll_adv_enable+0x404>)
   26c04:	9305      	str	r3, [sp, #20]
   26c06:	f64f 73ff 	movw	r3, #65535	; 0xffff
   26c0a:	9209      	str	r2, [sp, #36]	; 0x24
		ret_cb = TICKER_STATUS_BUSY;
   26c0c:	2702      	movs	r7, #2
		ret = ticker_start_ext(
   26c0e:	9303      	str	r3, [sp, #12]
   26c10:	ae0b      	add	r6, sp, #44	; 0x2c
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26c12:	a319      	add	r3, pc, #100	; (adr r3, 26c78 <ll_adv_enable+0x3f0>)
   26c14:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret_cb = TICKER_STATUS_BUSY;
   26c18:	970b      	str	r7, [sp, #44]	; 0x2c
		ret = ticker_start_ext(
   26c1a:	9608      	str	r6, [sp, #32]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26c1c:	f7ff fa70 	bl	26100 <__aeabi_uldivmod>
		ret = ticker_start_ext(
   26c20:	4643      	mov	r3, r8
   26c22:	e9cd 5000 	strd	r5, r0, [sp]
   26c26:	463a      	mov	r2, r7
   26c28:	4628      	mov	r0, r5
   26c2a:	2103      	movs	r1, #3
   26c2c:	f00a f8fa 	bl	30e24 <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
   26c30:	4631      	mov	r1, r6
   26c32:	f00c fafd 	bl	33230 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
   26c36:	2800      	cmp	r0, #0
   26c38:	d1b8      	bne.n	26bac <ll_adv_enable+0x324>
	adv->is_enabled = 1;
   26c3a:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   26c3e:	f043 0301 	orr.w	r3, r3, #1
   26c42:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
			return 0;
   26c46:	2000      	movs	r0, #0
   26c48:	e65d      	b.n	26906 <ll_adv_enable+0x7e>
			return BT_HCI_ERR_INVALID_PARAM;
   26c4a:	2012      	movs	r0, #18
   26c4c:	e65b      	b.n	26906 <ll_adv_enable+0x7e>
			conn_release(adv);
   26c4e:	f00d f857 	bl	33d00 <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
   26c52:	2003      	movs	r0, #3
   26c54:	e657      	b.n	26906 <ll_adv_enable+0x7e>
			conn_lll->link_tx_free = &conn_lll->link_tx;
   26c56:	f105 006c 	add.w	r0, r5, #108	; 0x6c
   26c5a:	6768      	str	r0, [r5, #116]	; 0x74
   26c5c:	e680      	b.n	26960 <ll_adv_enable+0xd8>
			ll_rx_link_release(link);
   26c5e:	4648      	mov	r0, r9
   26c60:	f00c fa36 	bl	330d0 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   26c64:	2007      	movs	r0, #7
   26c66:	e64e      	b.n	26906 <ll_adv_enable+0x7e>
			ll_rx_release(node_rx);
   26c68:	4650      	mov	r0, sl
   26c6a:	f00c fa3d 	bl	330e8 <ll_rx_release>
			ll_rx_link_release(link);
   26c6e:	4648      	mov	r0, r9
   26c70:	f00c fa2e 	bl	330d0 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   26c74:	e7f6      	b.n	26c64 <ll_adv_enable+0x3dc>
   26c76:	bf00      	nop
   26c78:	1afd498d 	.word	0x1afd498d
   26c7c:	00000007 	.word	0x00000007
   26c80:	20002554 	.word	0x20002554
   26c84:	84e72a00 	.word	0x84e72a00
   26c88:	00032709 	.word	0x00032709
   26c8c:	00033f51 	.word	0x00033f51

00026c90 <ull_adv_time_update>:
{
   26c90:	b570      	push	{r4, r5, r6, lr}
	chan_map = lll->chan_map;
   26c92:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
   26c96:	b08a      	sub	sp, #40	; 0x28
	chan_map = lll->chan_map;
   26c98:	f3c3 0342 	ubfx	r3, r3, #1, #3
{
   26c9c:	460d      	mov	r5, r1
   26c9e:	4604      	mov	r4, r0
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   26ca0:	2101      	movs	r1, #1
   26ca2:	f10d 0023 	add.w	r0, sp, #35	; 0x23
{
   26ca6:	4616      	mov	r6, r2
	chan_map = lll->chan_map;
   26ca8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   26cac:	f009 f876 	bl	2fd9c <util_ones_count_get>
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
   26cb0:	7871      	ldrb	r1, [r6, #1]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   26cb2:	4602      	mov	r2, r0
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
   26cb4:	4628      	mov	r0, r5
   26cb6:	f00d f913 	bl	33ee0 <adv_time_get.constprop.0.isra.0>
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
   26cba:	491d      	ldr	r1, [pc, #116]	; (26d30 <ull_adv_time_update+0xa0>)
   26cbc:	a31a      	add	r3, pc, #104	; (adr r3, 26d28 <ull_adv_time_update+0x98>)
   26cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
   26cc2:	fba0 0101 	umull	r0, r1, r0, r1
   26cc6:	f7ff fa1b 	bl	26100 <__aeabi_uldivmod>
	if (adv->ull.ticks_slot > time_ticks) {
   26cca:	6923      	ldr	r3, [r4, #16]
   26ccc:	4298      	cmp	r0, r3
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
   26cce:	4605      	mov	r5, r0
	if (adv->ull.ticks_slot > time_ticks) {
   26cd0:	d221      	bcs.n	26d16 <ull_adv_time_update+0x86>
		ticks_minus = adv->ull.ticks_slot - time_ticks;
   26cd2:	1a1b      	subs	r3, r3, r0
		ticks_plus = 0U;
   26cd4:	2200      	movs	r2, #0
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26cd6:	9201      	str	r2, [sp, #4]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   26cd8:	4a16      	ldr	r2, [pc, #88]	; (26d34 <ull_adv_time_update+0xa4>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26cda:	9302      	str	r3, [sp, #8]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   26cdc:	4b16      	ldr	r3, [pc, #88]	; (26d38 <ull_adv_time_update+0xa8>)
   26cde:	1aa2      	subs	r2, r4, r2
   26ce0:	fba3 3202 	umull	r3, r2, r3, r2
	ret_cb = TICKER_STATUS_BUSY;
   26ce4:	2102      	movs	r1, #2
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   26ce6:	0992      	lsrs	r2, r2, #6
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26ce8:	2300      	movs	r3, #0
   26cea:	440a      	add	r2, r1
   26cec:	ae09      	add	r6, sp, #36	; 0x24
	ret_cb = TICKER_STATUS_BUSY;
   26cee:	9109      	str	r1, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26cf0:	4912      	ldr	r1, [pc, #72]	; (26d3c <ull_adv_time_update+0xac>)
   26cf2:	9105      	str	r1, [sp, #20]
   26cf4:	e9cd 3303 	strd	r3, r3, [sp, #12]
   26cf8:	2103      	movs	r1, #3
   26cfa:	b2d2      	uxtb	r2, r2
   26cfc:	9606      	str	r6, [sp, #24]
   26cfe:	9300      	str	r3, [sp, #0]
   26d00:	4618      	mov	r0, r3
   26d02:	f00a f959 	bl	30fb8 <ticker_update>
	ret = ull_ticker_status_take(ret, &ret_cb);
   26d06:	4631      	mov	r1, r6
   26d08:	f00c fa92 	bl	33230 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
   26d0c:	b938      	cbnz	r0, 26d1e <ull_adv_time_update+0x8e>
	adv->ull.ticks_slot = time_ticks;
   26d0e:	6125      	str	r5, [r4, #16]
		return BT_HCI_ERR_SUCCESS;
   26d10:	2000      	movs	r0, #0
}
   26d12:	b00a      	add	sp, #40	; 0x28
   26d14:	bd70      	pop	{r4, r5, r6, pc}
	} else if (adv->ull.ticks_slot < time_ticks) {
   26d16:	d9fb      	bls.n	26d10 <ull_adv_time_update+0x80>
		ticks_plus = time_ticks - adv->ull.ticks_slot;
   26d18:	1ac2      	subs	r2, r0, r3
		ticks_minus = 0U;
   26d1a:	2300      	movs	r3, #0
   26d1c:	e7db      	b.n	26cd6 <ull_adv_time_update+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
   26d1e:	200c      	movs	r0, #12
}
   26d20:	b00a      	add	sp, #40	; 0x28
   26d22:	bd70      	pop	{r4, r5, r6, pc}
   26d24:	f3af 8000 	nop.w
   26d28:	1afd498d 	.word	0x1afd498d
   26d2c:	00000007 	.word	0x00000007
   26d30:	3b9aca00 	.word	0x3b9aca00
   26d34:	20002560 	.word	0x20002560
   26d38:	8d3dcb09 	.word	0x8d3dcb09
   26d3c:	00032709 	.word	0x00032709

00026d40 <event_conn_upd_prep>:
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
}

static inline int event_conn_upd_prep(struct ll_conn *conn, uint16_t lazy,
				      uint32_t ticks_at_expire)
{
   26d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_conn *lll = &conn->lll;
	uint16_t instant_latency;
	uint16_t event_counter;

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   26d44:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   26d46:	8e46      	ldrh	r6, [r0, #50]	; 0x32

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
   26d48:	f8b0 70e8 	ldrh.w	r7, [r0, #232]	; 0xe8
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   26d4c:	441e      	add	r6, r3
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
   26d4e:	f890 310e 	ldrb.w	r3, [r0, #270]	; 0x10e
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   26d52:	b2b6      	uxth	r6, r6
   26d54:	4431      	add	r1, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
   26d56:	f013 0307 	ands.w	r3, r3, #7
{
   26d5a:	b08b      	sub	sp, #44	; 0x2c
   26d5c:	4604      	mov	r4, r0
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   26d5e:	fa1f f981 	uxth.w	r9, r1
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
   26d62:	f040 81a1 	bne.w	270a8 <event_conn_upd_prep+0x368>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
   26d66:	eba9 0107 	sub.w	r1, r9, r7
   26d6a:	fa1f f981 	uxth.w	r9, r1
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
   26d6e:	0409      	lsls	r1, r1, #16
   26d70:	f100 8202 	bmi.w	27178 <event_conn_upd_prep+0x438>
   26d74:	4690      	mov	r8, r2
		uint32_t ticker_status;
		uint32_t periodic_us;
		uint16_t latency;

#if defined(CONFIG_BT_PERIPHERAL) && defined(CONFIG_BT_CTLR_LE_ENC)
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   26d76:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   26d7a:	2a00      	cmp	r2, #0
   26d7c:	f2c0 8135 	blt.w	26fea <event_conn_upd_prep+0x2aa>
			conn->periph.llcp_type = LLCP_NONE;
		} else
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */
		{
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
   26d80:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   26d84:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   26d88:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   26d8c:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
		conn->llcp_cu.ack = conn->llcp_cu.req;
   26d90:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
   26d94:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   26d98:	4293      	cmp	r3, r2
   26d9a:	d006      	beq.n	26daa <event_conn_upd_prep+0x6a>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
   26d9c:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   26da0:	f003 030f 	and.w	r3, r3, #15
   26da4:	2b06      	cmp	r3, #6
   26da6:	f000 823b 	beq.w	27220 <event_conn_upd_prep+0x4e0>
	if (conn == conn_upd_curr) {
   26daa:	4bb1      	ldr	r3, [pc, #708]	; (27070 <event_conn_upd_prep+0x330>)
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
   26dac:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
	if (conn == conn_upd_curr) {
   26db0:	681a      	ldr	r2, [r3, #0]
   26db2:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   26db4:	bf04      	itt	eq
   26db6:	2200      	moveq	r2, #0
   26db8:	601a      	streq	r2, [r3, #0]
		LL_ASSERT(rx && rx->hdr.link);
   26dba:	2d00      	cmp	r5, #0
   26dbc:	f000 8143 	beq.w	27046 <event_conn_upd_prep+0x306>
   26dc0:	6828      	ldr	r0, [r5, #0]
   26dc2:	2800      	cmp	r0, #0
   26dc4:	f000 813f 	beq.w	27046 <event_conn_upd_prep+0x306>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
   26dc8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   26dcc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
		conn->llcp_rx = rx->hdr.link->mem;
   26dce:	6841      	ldr	r1, [r0, #4]
   26dd0:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
		if ((conn->llcp_cu.interval != lll->interval) ||
   26dd4:	fa1f fc83 	uxth.w	ip, r3
   26dd8:	4562      	cmp	r2, ip
		    (conn->llcp_cu.latency != lll->latency) ||
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
   26dda:	f8b4 1114 	ldrh.w	r1, [r4, #276]	; 0x114
		if ((conn->llcp_cu.interval != lll->interval) ||
   26dde:	f000 8118 	beq.w	27012 <event_conn_upd_prep+0x2d2>
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
   26de2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
			cu->interval = conn->llcp_cu.interval;
   26de4:	f8c5 301e 	str.w	r3, [r5, #30]
			cu->status = 0x00;
   26de8:	2300      	movs	r3, #0
   26dea:	772b      	strb	r3, [r5, #28]
			rx->hdr.handle = lll->handle;
   26dec:	80ea      	strh	r2, [r5, #6]
			cu->latency = conn->llcp_cu.latency;
			cu->timeout = conn->llcp_cu.timeout;
   26dee:	8469      	strh	r1, [r5, #34]	; 0x22
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   26df0:	2318      	movs	r3, #24
   26df2:	712b      	strb	r3, [r5, #4]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
   26df4:	4629      	mov	r1, r5
   26df6:	f00c f97d 	bl	330f4 <ll_rx_put>
		ll_rx_sched();
   26dfa:	f00c f985 	bl	33108 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
   26dfe:	68a3      	ldr	r3, [r4, #8]
   26e00:	2b00      	cmp	r3, #0
   26e02:	f2c0 80fa 	blt.w	26ffa <event_conn_upd_prep+0x2ba>
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
   26e06:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
   26e0a:	f8b4 5110 	ldrh.w	r5, [r4, #272]	; 0x110
		conn_interval_old = instant_latency * lll->interval;
   26e0e:	fb1c fc09 	smulbb	ip, ip, r9
   26e12:	fa1f fc8c 	uxth.w	ip, ip
		latency = conn_interval_old / conn->llcp_cu.interval;
   26e16:	fbbc f3f5 	udiv	r3, ip, r5
		conn_interval_new = latency * conn->llcp_cu.interval;
   26e1a:	fb15 f003 	smulbb	r0, r5, r3
   26e1e:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
   26e20:	4584      	cmp	ip, r0
		latency = conn_interval_old / conn->llcp_cu.interval;
   26e22:	fa1f fa83 	uxth.w	sl, r3
		if (conn_interval_new > conn_interval_old) {
   26e26:	f0c0 80ce 	bcc.w	26fc6 <event_conn_upd_prep+0x286>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
				(conn_interval_new - conn_interval_old) *
				CONN_INT_UNIT_US);
		} else {
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   26e2a:	fb05 c113 	mls	r1, r5, r3, ip
   26e2e:	4891      	ldr	r0, [pc, #580]	; (27074 <event_conn_upd_prep+0x334>)
   26e30:	f240 43e2 	movw	r3, #1250	; 0x4e2
   26e34:	b289      	uxth	r1, r1
   26e36:	fb03 f101 	mul.w	r1, r3, r1
   26e3a:	fba1 0100 	umull	r0, r1, r1, r0
   26e3e:	a38a      	add	r3, pc, #552	; (adr r3, 27068 <event_conn_upd_prep+0x328>)
   26e40:	e9d3 2300 	ldrd	r2, r3, [r3]
   26e44:	f7ff f95c 	bl	26100 <__aeabi_uldivmod>
   26e48:	eba8 0800 	sub.w	r8, r8, r0
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
		lll->latency_prepare -= (instant_latency - latency);
   26e4c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   26e4e:	441f      	add	r7, r3
   26e50:	1bbf      	subs	r7, r7, r6
			CONN_INT_UNIT_US;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
   26e52:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare -= (instant_latency - latency);
   26e56:	4457      	add	r7, sl
   26e58:	85e7      	strh	r7, [r4, #46]	; 0x2e
		} else if (lll->role) {
   26e5a:	2b00      	cmp	r3, #0
		conn_interval_us = conn->llcp_cu.interval *
   26e5c:	f240 47e2 	movw	r7, #1250	; 0x4e2
   26e60:	fb07 f605 	mul.w	r6, r7, r5
		} else if (lll->role) {
   26e64:	f2c0 818b 	blt.w	2717e <event_conn_upd_prep+0x43e>
			 */
			ticks_win_offset += 1U;
#endif /* CONFIG_BT_CENTRAL */

		} else {
			LL_ASSERT(0);
   26e68:	4a83      	ldr	r2, [pc, #524]	; (27078 <event_conn_upd_prep+0x338>)
   26e6a:	4984      	ldr	r1, [pc, #528]	; (2707c <event_conn_upd_prep+0x33c>)
   26e6c:	4884      	ldr	r0, [pc, #528]	; (27080 <event_conn_upd_prep+0x340>)
   26e6e:	f640 439c 	movw	r3, #3228	; 0xc9c
   26e72:	f01b fd27 	bl	428c4 <printk>
   26e76:	4040      	eors	r0, r0
   26e78:	f380 8811 	msr	BASEPRI, r0
   26e7c:	f04f 0003 	mov.w	r0, #3
   26e80:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
   26e82:	2700      	movs	r7, #0
		periodic_us = conn_interval_us;
   26e84:	46b3      	mov	fp, r6

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
					  conn_interval_us);
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   26e86:	4a7f      	ldr	r2, [pc, #508]	; (27084 <event_conn_upd_prep+0x344>)
		lll->interval = conn->llcp_cu.interval;
   26e88:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   26e8c:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   26e90:	487d      	ldr	r0, [pc, #500]	; (27088 <event_conn_upd_prep+0x348>)
		lll->interval = conn->llcp_cu.interval;
   26e92:	f8c4 102a 	str.w	r1, [r4, #42]	; 0x2a
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   26e96:	4432      	add	r2, r6
   26e98:	fbb2 f2f6 	udiv	r2, r2, r6
   26e9c:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   26ea0:	f242 7210 	movw	r2, #10000	; 0x2710
   26ea4:	0c09      	lsrs	r1, r1, #16
   26ea6:	fb02 6303 	mla	r3, r2, r3, r6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   26eaa:	4430      	add	r0, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   26eac:	3b01      	subs	r3, #1
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   26eae:	fbb0 f0f6 	udiv	r0, r0, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   26eb2:	fbb3 f3f6 	udiv	r3, r3, r6
   26eb6:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   26eba:	b283      	uxth	r3, r0
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   26ebc:	1d88      	adds	r0, r1, #6
   26ebe:	4283      	cmp	r3, r0
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   26ec0:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   26ec4:	dd04      	ble.n	26ed0 <event_conn_upd_prep+0x190>
   26ec6:	f5c1 417f 	rsb	r1, r1, #65280	; 0xff00
   26eca:	31fa      	adds	r1, #250	; 0xfa
   26ecc:	440b      	add	r3, r1
   26ece:	b29b      	uxth	r3, r3
   26ed0:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
				     (conn->apto_reload - (lll->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
   26ed4:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
   26ed8:	071b      	lsls	r3, r3, #28
			conn->supervision_expire = 0U;
   26eda:	bf44      	itt	mi
   26edc:	2300      	movmi	r3, #0
   26ede:	f8a4 30c4 	strhmi.w	r3, [r4, #196]	; 0xc4
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
   26ee2:	2102      	movs	r1, #2
   26ee4:	2001      	movs	r0, #1
   26ee6:	f015 fe65 	bl	3cbb4 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
   26eea:	2200      	movs	r2, #0
   26eec:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
   26eee:	4682      	mov	sl, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
   26ef0:	2001      	movs	r0, #1
   26ef2:	f008 fe19 	bl	2fb28 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   26ef6:	4965      	ldr	r1, [pc, #404]	; (2708c <event_conn_upd_prep+0x34c>)
   26ef8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   26efc:	4620      	mov	r0, r4
   26efe:	f008 fda3 	bl	2fa48 <mem_index_get>
			      0);
#endif

		/* start peripheral/central with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   26f02:	f100 0903 	add.w	r9, r0, #3
   26f06:	fa5f f989 	uxtb.w	r9, r9
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
   26f0a:	4b61      	ldr	r3, [pc, #388]	; (27090 <event_conn_upd_prep+0x350>)
   26f0c:	9400      	str	r4, [sp, #0]
   26f0e:	464a      	mov	r2, r9
   26f10:	2101      	movs	r1, #1
   26f12:	2000      	movs	r0, #0
   26f14:	f00a f868 	bl	30fe8 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   26f18:	f030 0302 	bics.w	r3, r0, #2
   26f1c:	d00c      	beq.n	26f38 <event_conn_upd_prep+0x1f8>
   26f1e:	4a56      	ldr	r2, [pc, #344]	; (27078 <event_conn_upd_prep+0x338>)
   26f20:	495c      	ldr	r1, [pc, #368]	; (27094 <event_conn_upd_prep+0x354>)
   26f22:	4857      	ldr	r0, [pc, #348]	; (27080 <event_conn_upd_prep+0x340>)
   26f24:	f640 43cb 	movw	r3, #3275	; 0xccb
   26f28:	f01b fccc 	bl	428c4 <printk>
   26f2c:	4040      	eors	r0, r0
   26f2e:	f380 8811 	msr	BASEPRI, r0
   26f32:	f04f 0003 	mov.w	r0, #3
   26f36:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
   26f38:	4e4e      	ldr	r6, [pc, #312]	; (27074 <event_conn_upd_prep+0x334>)
   26f3a:	fbab 6b06 	umull	r6, fp, fp, r6
   26f3e:	a34a      	add	r3, pc, #296	; (adr r3, 27068 <event_conn_upd_prep+0x328>)
   26f40:	e9d3 2300 	ldrd	r2, r3, [r3]
   26f44:	4630      	mov	r0, r6
   26f46:	4659      	mov	r1, fp
   26f48:	f7ff f8da 	bl	26100 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   26f4c:	9408      	str	r4, [sp, #32]
   26f4e:	9406      	str	r4, [sp, #24]
   26f50:	6923      	ldr	r3, [r4, #16]
   26f52:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(periodic_us),
   26f54:	4b50      	ldr	r3, [pc, #320]	; (27098 <event_conn_upd_prep+0x358>)
   26f56:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
   26f5a:	fba5 3103 	umull	r3, r1, r5, r3
   26f5e:	1af0      	subs	r0, r6, r3
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   26f60:	4b4e      	ldr	r3, [pc, #312]	; (2709c <event_conn_upd_prep+0x35c>)
   26f62:	9307      	str	r3, [sp, #28]
				     HAL_TICKER_REMAINDER(periodic_us),
   26f64:	f04f 0207 	mov.w	r2, #7
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   26f68:	4b4d      	ldr	r3, [pc, #308]	; (270a0 <event_conn_upd_prep+0x360>)
   26f6a:	9305      	str	r3, [sp, #20]
				     HAL_TICKER_REMAINDER(periodic_us),
   26f6c:	fb02 1105 	mla	r1, r2, r5, r1
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   26f70:	f64f 73fe 	movw	r3, #65534	; 0xfffe
				     HAL_TICKER_REMAINDER(periodic_us),
   26f74:	eb6b 0101 	sbc.w	r1, fp, r1
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   26f78:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
   26f7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26f7e:	2300      	movs	r3, #0
   26f80:	f7ff f8be 	bl	26100 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   26f84:	4643      	mov	r3, r8
   26f86:	e9cd 5001 	strd	r5, r0, [sp, #4]
   26f8a:	9700      	str	r7, [sp, #0]
   26f8c:	464a      	mov	r2, r9
   26f8e:	2101      	movs	r1, #1
   26f90:	2000      	movs	r0, #0
   26f92:	f009 ff9d 	bl	30ed0 <ticker_start>
#else
				     ull_central_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   26f96:	f030 0302 	bics.w	r3, r0, #2
   26f9a:	d00c      	beq.n	26fb6 <event_conn_upd_prep+0x276>
   26f9c:	4a36      	ldr	r2, [pc, #216]	; (27078 <event_conn_upd_prep+0x338>)
   26f9e:	493d      	ldr	r1, [pc, #244]	; (27094 <event_conn_upd_prep+0x354>)
   26fa0:	4837      	ldr	r0, [pc, #220]	; (27080 <event_conn_upd_prep+0x340>)
   26fa2:	f640 43e5 	movw	r3, #3301	; 0xce5
   26fa6:	f01b fc8d 	bl	428c4 <printk>
   26faa:	4040      	eors	r0, r0
   26fac:	f380 8811 	msr	BASEPRI, r0
   26fb0:	f04f 0003 	mov.w	r0, #3
   26fb4:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
   26fb6:	f1ba 0f00 	cmp.w	sl, #0
   26fba:	f040 812b 	bne.w	27214 <event_conn_upd_prep+0x4d4>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
				      TICKER_USER_ID_ULL_LOW, 1);
		}
#endif

		return 0;
   26fbe:	2000      	movs	r0, #0
	}

	return -EINPROGRESS;
}
   26fc0:	b00b      	add	sp, #44	; 0x2c
   26fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
   26fc6:	eba0 000c 	sub.w	r0, r0, ip
   26fca:	f240 42e2 	movw	r2, #1250	; 0x4e2
   26fce:	4929      	ldr	r1, [pc, #164]	; (27074 <event_conn_upd_prep+0x334>)
   26fd0:	fb02 f000 	mul.w	r0, r2, r0
   26fd4:	fba0 0101 	umull	r0, r1, r0, r1
   26fd8:	a323      	add	r3, pc, #140	; (adr r3, 27068 <event_conn_upd_prep+0x328>)
   26fda:	e9d3 2300 	ldrd	r2, r3, [r3]
   26fde:	f7ff f88f 	bl	26100 <__aeabi_uldivmod>
   26fe2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   26fe6:	4480      	add	r8, r0
   26fe8:	e730      	b.n	26e4c <event_conn_upd_prep+0x10c>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   26fea:	f890 20d9 	ldrb.w	r2, [r0, #217]	; 0xd9
   26fee:	2a00      	cmp	r2, #0
   26ff0:	f43f aec6 	beq.w	26d80 <event_conn_upd_prep+0x40>
			conn->periph.llcp_type = LLCP_NONE;
   26ff4:	f880 30d9 	strb.w	r3, [r0, #217]	; 0xd9
   26ff8:	e6c6      	b.n	26d88 <event_conn_upd_prep+0x48>
			uint32_t ticks_prepare_to_start =
   26ffa:	68e1      	ldr	r1, [r4, #12]
   26ffc:	6862      	ldr	r2, [r4, #4]
			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
   26ffe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   27002:	4291      	cmp	r1, r2
   27004:	bf2c      	ite	cs
   27006:	4488      	addcs	r8, r1
   27008:	4490      	addcc	r8, r2
   2700a:	60a3      	str	r3, [r4, #8]
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
   2700c:	eba8 0803 	sub.w	r8, r8, r3
   27010:	e6f9      	b.n	26e06 <event_conn_upd_prep+0xc6>
		if ((conn->llcp_cu.interval != lll->interval) ||
   27012:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
   27016:	ebbc 4f13 	cmp.w	ip, r3, lsr #16
   2701a:	f47f aee2 	bne.w	26de2 <event_conn_upd_prep+0xa2>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
   2701e:	f240 4ce2 	movw	ip, #1250	; 0x4e2
   27022:	fb0c f202 	mul.w	r2, ip, r2
   27026:	f242 7c10 	movw	ip, #10000	; 0x2710
   2702a:	fb0c 2c01 	mla	ip, ip, r1, r2
   2702e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   27032:	fbbc f2f2 	udiv	r2, ip, r2
		    (conn->llcp_cu.latency != lll->latency) ||
   27036:	f8b4 c0c2 	ldrh.w	ip, [r4, #194]	; 0xc2
   2703a:	b292      	uxth	r2, r2
   2703c:	4594      	cmp	ip, r2
   2703e:	f47f aed0 	bne.w	26de2 <event_conn_upd_prep+0xa2>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   27042:	2301      	movs	r3, #1
   27044:	e6d5      	b.n	26df2 <event_conn_upd_prep+0xb2>
		LL_ASSERT(rx && rx->hdr.link);
   27046:	4a0c      	ldr	r2, [pc, #48]	; (27078 <event_conn_upd_prep+0x338>)
   27048:	4916      	ldr	r1, [pc, #88]	; (270a4 <event_conn_upd_prep+0x364>)
   2704a:	480d      	ldr	r0, [pc, #52]	; (27080 <event_conn_upd_prep+0x340>)
   2704c:	f44f 6342 	mov.w	r3, #3104	; 0xc20
   27050:	f01b fc38 	bl	428c4 <printk>
   27054:	4040      	eors	r0, r0
   27056:	f380 8811 	msr	BASEPRI, r0
   2705a:	f04f 0003 	mov.w	r0, #3
   2705e:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   27060:	6828      	ldr	r0, [r5, #0]
   27062:	e6b1      	b.n	26dc8 <event_conn_upd_prep+0x88>
   27064:	f3af 8000 	nop.w
   27068:	1afd498d 	.word	0x1afd498d
   2706c:	00000007 	.word	0x00000007
   27070:	200025f4 	.word	0x200025f4
   27074:	3b9aca00 	.word	0x3b9aca00
   27078:	0004a0dc 	.word	0x0004a0dc
   2707c:	00049cc8 	.word	0x00049cc8
   27080:	00049c68 	.word	0x00049c68
   27084:	026259ff 	.word	0x026259ff
   27088:	01c9c37f 	.word	0x01c9c37f
   2708c:	200014e8 	.word	0x200014e8
   27090:	000349a1 	.word	0x000349a1
   27094:	0004a1bc 	.word	0x0004a1bc
   27098:	1afd498d 	.word	0x1afd498d
   2709c:	00034949 	.word	0x00034949
   270a0:	00038e95 	.word	0x00038e95
   270a4:	0004a1a8 	.word	0x0004a1a8
		rx = ll_pdu_rx_alloc_peek(1);
   270a8:	2001      	movs	r0, #1
   270aa:	f00c f833 	bl	33114 <ll_pdu_rx_alloc_peek>
		if (!rx) {
   270ae:	4606      	mov	r6, r0
   270b0:	2800      	cmp	r0, #0
   270b2:	f000 80db 	beq.w	2726c <event_conn_upd_prep+0x52c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   270b6:	487e      	ldr	r0, [pc, #504]	; (272b0 <event_conn_upd_prep+0x570>)
   270b8:	f008 fc90 	bl	2f9dc <mem_acquire>
		if (!tx) {
   270bc:	4605      	mov	r5, r0
   270be:	2800      	cmp	r0, #0
   270c0:	f000 80d4 	beq.w	2726c <event_conn_upd_prep+0x52c>
	if (!conn_upd_curr) {
   270c4:	4b7b      	ldr	r3, [pc, #492]	; (272b4 <event_conn_upd_prep+0x574>)
   270c6:	681a      	ldr	r2, [r3, #0]
   270c8:	2a00      	cmp	r2, #0
   270ca:	f000 80af 	beq.w	2722c <event_conn_upd_prep+0x4ec>
		(void)ll_pdu_rx_alloc();
   270ce:	f00c f841 	bl	33154 <ll_pdu_rx_alloc>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   270d2:	792b      	ldrb	r3, [r5, #4]
		rx->hdr.link->mem = conn->llcp_rx;
   270d4:	6832      	ldr	r2, [r6, #0]
   270d6:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
   270da:	6051      	str	r1, [r2, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   270dc:	f043 0303 	orr.w	r3, r3, #3
		conn->llcp_rx = rx;
   270e0:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   270e4:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
   270e6:	230c      	movs	r3, #12
   270e8:	716b      	strb	r3, [r5, #5]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
   270ea:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
   270ee:	4872      	ldr	r0, [pc, #456]	; (272b8 <event_conn_upd_prep+0x578>)
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
   270f0:	2100      	movs	r1, #0
   270f2:	71e9      	strb	r1, [r5, #7]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
   270f4:	fba0 0202 	umull	r0, r2, r0, r2
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
   270f8:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
   270fc:	722b      	strb	r3, [r5, #8]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
   270fe:	0a92      	lsrs	r2, r2, #10
					      conn->lll.latency + 6;
   27100:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
   27102:	f8a5 2009 	strh.w	r2, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
   27106:	f8b4 2110 	ldrh.w	r2, [r4, #272]	; 0x110
   2710a:	f8a5 200b 	strh.w	r2, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
   2710e:	f8b4 2112 	ldrh.w	r2, [r4, #274]	; 0x112
   27112:	f8a5 200d 	strh.w	r2, [r5, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
   27116:	f8b4 2114 	ldrh.w	r2, [r4, #276]	; 0x114
   2711a:	f8a5 200f 	strh.w	r2, [r5, #15]
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   2711e:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
					      conn->lll.latency + 6;
   27122:	3306      	adds	r3, #6
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   27124:	f361 0202 	bfi	r2, r1, #0, #3
					      conn->lll.latency + 6;
   27128:	444b      	add	r3, r9
	    conn->tx_head &&
   2712a:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   2712e:	f884 210e 	strb.w	r2, [r4, #270]	; 0x10e
					      conn->lll.latency + 6;
   27132:	b29b      	uxth	r3, r3
		conn->llcp.conn_upd.instant = event_counter +
   27134:	f8a4 30e8 	strh.w	r3, [r4, #232]	; 0xe8
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
   27138:	f8a5 3011 	strh.w	r3, [r5, #17]
	if (
   2713c:	2900      	cmp	r1, #0
   2713e:	d077      	beq.n	27230 <event_conn_upd_prep+0x4f0>
	    !conn->llcp_enc.pause_tx &&
   27140:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   27144:	079e      	lsls	r6, r3, #30
   27146:	d47f      	bmi.n	27248 <event_conn_upd_prep+0x508>
	    !conn->llcp_phy.pause_tx &&
   27148:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   2714c:	07d8      	lsls	r0, r3, #31
   2714e:	d47b      	bmi.n	27248 <event_conn_upd_prep+0x508>
		if (conn->tx_head == conn->tx_data) {
   27150:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   27154:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   27158:	4291      	cmp	r1, r2
   2715a:	f000 808a 	beq.w	27272 <event_conn_upd_prep+0x532>
		} else if (!conn->tx_ctrl) {
   2715e:	2b00      	cmp	r3, #0
   27160:	f000 8094 	beq.w	2728c <event_conn_upd_prep+0x54c>
	tx->next = conn->tx_ctrl_last->next;
   27164:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
   27168:	680b      	ldr	r3, [r1, #0]
   2716a:	602b      	str	r3, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   2716c:	600d      	str	r5, [r1, #0]
	if (!tx->next) {
   2716e:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   27170:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
   27174:	2b00      	cmp	r3, #0
   27176:	d076      	beq.n	27266 <event_conn_upd_prep+0x526>
	return -EINPROGRESS;
   27178:	f06f 0076 	mvn.w	r0, #118	; 0x76
   2717c:	e720      	b.n	26fc0 <event_conn_upd_prep+0x280>
				lll->periph.window_widening_periodic_us *
   2717e:	6c22      	ldr	r2, [r4, #64]	; 0x40
			lll->periph.window_widening_prepare_us -=
   27180:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   27182:	fb02 3319 	mls	r3, r2, r9, r3
   27186:	64a3      	str	r3, [r4, #72]	; 0x48
				ceiling_fraction(((lll_clock_ppm_local_get() +
   27188:	f013 fd92 	bl	3acb0 <lll_clock_ppm_local_get>
   2718c:	4605      	mov	r5, r0
   2718e:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   27192:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   27196:	f013 fd8d 	bl	3acb4 <lll_clock_ppm_get>
   2719a:	4405      	add	r5, r0
   2719c:	fb06 f505 	mul.w	r5, r6, r5
   271a0:	4b46      	ldr	r3, [pc, #280]	; (272bc <event_conn_upd_prep+0x57c>)
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
   271a2:	f894 211c 	ldrb.w	r2, [r4, #284]	; 0x11c
				ceiling_fraction(((lll_clock_ppm_local_get() +
   271a6:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
   271aa:	f205 253f 	addw	r5, r5, #575	; 0x23f
   271ae:	fba3 3505 	umull	r3, r5, r3, r5
   271b2:	0cad      	lsrs	r5, r5, #18
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
   271b4:	fb07 f202 	mul.w	r2, r7, r2
			lll->periph.window_widening_prepare_us +=
   271b8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			lll->periph.window_size_prepare_us =
   271ba:	6522      	str	r2, [r4, #80]	; 0x50
				lll->periph.window_widening_periodic_us *
   271bc:	fb05 f00a 	mul.w	r0, r5, sl
				(conn_interval_us >> 1) - EVENT_IFS_US;
   271c0:	0872      	lsrs	r2, r6, #1
			lll->periph.window_widening_prepare_us +=
   271c2:	4403      	add	r3, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
   271c4:	3a96      	subs	r2, #150	; 0x96
   271c6:	4293      	cmp	r3, r2
   271c8:	bf28      	it	cs
   271ca:	4613      	movcs	r3, r2
			lll->periph.window_widening_periodic_us =
   271cc:	6425      	str	r5, [r4, #64]	; 0x40
			periodic_us -= lll->periph.window_widening_periodic_us;
   271ce:	eba6 0b05 	sub.w	fp, r6, r5
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   271d2:	4d3b      	ldr	r5, [pc, #236]	; (272c0 <event_conn_upd_prep+0x580>)
   271d4:	e9c4 2311 	strd	r2, r3, [r4, #68]	; 0x44
			conn->periph.ticks_to_offset = 0U;
   271d8:	2300      	movs	r3, #0
   271da:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   271de:	fba0 0105 	umull	r0, r1, r0, r5
   271e2:	a331      	add	r3, pc, #196	; (adr r3, 272a8 <event_conn_upd_prep+0x568>)
   271e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   271e8:	f7fe ff8a 	bl	26100 <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   271ec:	4b32      	ldr	r3, [pc, #200]	; (272b8 <event_conn_upd_prep+0x578>)
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   271ee:	eba8 0800 	sub.w	r8, r8, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   271f2:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
   271f6:	fba3 3000 	umull	r3, r0, r3, r0
   271fa:	0a80      	lsrs	r0, r0, #10
   271fc:	fb07 f000 	mul.w	r0, r7, r0
   27200:	a329      	add	r3, pc, #164	; (adr r3, 272a8 <event_conn_upd_prep+0x568>)
   27202:	e9d3 2300 	ldrd	r2, r3, [r3]
   27206:	fba0 0105 	umull	r0, r1, r0, r5
   2720a:	f7fe ff79 	bl	26100 <__aeabi_uldivmod>
   2720e:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			periodic_us -= lll->periph.window_widening_periodic_us;
   27212:	e638      	b.n	26e86 <event_conn_upd_prep+0x146>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
   27214:	2201      	movs	r2, #1
   27216:	2102      	movs	r1, #2
   27218:	4610      	mov	r0, r2
   2721a:	f008 fc85 	bl	2fb28 <mayfly_enable>
   2721e:	e6ce      	b.n	26fbe <event_conn_upd_prep+0x27e>
			conn->procedure_expire = 0U;
   27220:	2300      	movs	r3, #0
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   27222:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->procedure_expire = 0U;
   27226:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   2722a:	e5be      	b.n	26daa <event_conn_upd_prep+0x6a>
		conn_upd_curr = conn;
   2722c:	601c      	str	r4, [r3, #0]
   2722e:	e74e      	b.n	270ce <event_conn_upd_prep+0x38e>
		if (!conn->tx_ctrl) {
   27230:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   27234:	b193      	cbz	r3, 2725c <event_conn_upd_prep+0x51c>
	tx->next = conn->tx_ctrl_last->next;
   27236:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   2723a:	681a      	ldr	r2, [r3, #0]
   2723c:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   2723e:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   27240:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   27242:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
}
   27246:	e795      	b.n	27174 <event_conn_upd_prep+0x434>
		if (!conn->tx_ctrl) {
   27248:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   2724c:	2b00      	cmp	r3, #0
   2724e:	d1f2      	bne.n	27236 <event_conn_upd_prep+0x4f6>
			tx->next = conn->tx_head;
   27250:	6029      	str	r1, [r5, #0]
				conn->tx_ctrl = tx;
   27252:	e9c4 5571 	strd	r5, r5, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   27256:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
   2725a:	e78d      	b.n	27178 <event_conn_upd_prep+0x438>
			tx->next = conn->tx_head;
   2725c:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
   2725e:	e9c4 5571 	strd	r5, r5, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   27262:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
		conn->tx_data_last = tx;
   27266:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
   2726a:	e785      	b.n	27178 <event_conn_upd_prep+0x438>
			return -ENOBUFS;
   2726c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27270:	e6a6      	b.n	26fc0 <event_conn_upd_prep+0x280>
			conn->tx_data = conn->tx_data->next;
   27272:	680a      	ldr	r2, [r1, #0]
   27274:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   27278:	2b00      	cmp	r3, #0
   2727a:	f47f af73 	bne.w	27164 <event_conn_upd_prep+0x424>
			tx->next = conn->tx_head->next;
   2727e:	680b      	ldr	r3, [r1, #0]
   27280:	602b      	str	r3, [r5, #0]
			conn->tx_head->next = tx;
   27282:	600d      	str	r5, [r1, #0]
	if (!tx->next) {
   27284:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   27286:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
   2728a:	e773      	b.n	27174 <event_conn_upd_prep+0x434>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   2728c:	790b      	ldrb	r3, [r1, #4]
   2728e:	f003 0303 	and.w	r3, r3, #3
   27292:	2b03      	cmp	r3, #3
   27294:	d002      	beq.n	2729c <event_conn_upd_prep+0x55c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   27296:	f8c4 11c8 	str.w	r1, [r4, #456]	; 0x1c8
   2729a:	e765      	b.n	27168 <event_conn_upd_prep+0x428>
	    ((pdu_data_tx->llctrl.opcode !=
   2729c:	79cb      	ldrb	r3, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   2729e:	2b03      	cmp	r3, #3
   272a0:	d0ed      	beq.n	2727e <event_conn_upd_prep+0x53e>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   272a2:	2b0a      	cmp	r3, #10
   272a4:	d1f7      	bne.n	27296 <event_conn_upd_prep+0x556>
   272a6:	e7ea      	b.n	2727e <event_conn_upd_prep+0x53e>
   272a8:	1afd498d 	.word	0x1afd498d
   272ac:	00000007 	.word	0x00000007
   272b0:	20002638 	.word	0x20002638
   272b4:	200025f4 	.word	0x200025f4
   272b8:	d1b71759 	.word	0xd1b71759
   272bc:	431bde83 	.word	0x431bde83
   272c0:	3b9aca00 	.word	0x3b9aca00
   272c4:	00000000 	.word	0x00000000

000272c8 <ull_periph_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param);

void ull_periph_setup(struct node_rx_hdr *rx, struct node_rx_ftr *ftr,
		     struct lll_conn *lll)
{
   272c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memq_link_t *link;
	uint16_t timeout;
	uint8_t chan_sel;
	void *node;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
   272cc:	680b      	ldr	r3, [r1, #0]
	conn = lll->hdr.parent;
   272ce:	f8d2 a000 	ldr.w	sl, [r2]
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
   272d2:	f8d3 8000 	ldr.w	r8, [r3]

	/* Populate the peripheral context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_adv->tx_addr;
   272d6:	7f03      	ldrb	r3, [r0, #28]
{
   272d8:	b097      	sub	sp, #92	; 0x5c
   272da:	460c      	mov	r4, r1
	peer_addr_type = pdu_adv->tx_addr;
   272dc:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
   272e0:	f100 011e 	add.w	r1, r0, #30
{
   272e4:	4605      	mov	r5, r0
   272e6:	4616      	mov	r6, r2
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
   272e8:	a814      	add	r0, sp, #80	; 0x50
   272ea:	2206      	movs	r2, #6
	peer_addr_type = pdu_adv->tx_addr;
   272ec:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
   272f0:	f01d fbe7 	bl	44ac2 <memcpy>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	uint8_t rl_idx = ftr->rl_idx;
   272f4:	7c67      	ldrb	r7, [r4, #17]

	if (rl_idx != FILTER_IDX_NONE) {
   272f6:	2fff      	cmp	r7, #255	; 0xff
		/* Get identity address */
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
   272f8:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
	if (rl_idx != FILTER_IDX_NONE) {
   272fc:	d05c      	beq.n	273b8 <ull_periph_setup+0xf0>
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
   272fe:	465a      	mov	r2, fp
   27300:	f10d 0147 	add.w	r1, sp, #71	; 0x47
   27304:	4638      	mov	r0, r7
   27306:	f012 f8db 	bl	394c0 <ll_rl_id_addr_get>
		/* Mark it as identity address from RPA (0x02, 0x03) */
		peer_addr_type += 2;
   2730a:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   2730e:	3302      	adds	r3, #2
   27310:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	}

	/* Use the link stored in the node rx to enqueue connection
	 * complete node rx towards LL context.
	 */
	link = rx->link;
   27314:	4629      	mov	r1, r5
	conn->own_id_addr_type = own_id_addr_type;
	(void)memcpy(conn->own_id_addr, own_id_addr,
		     sizeof(conn->own_id_addr));
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN */

	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
   27316:	2203      	movs	r2, #3
	link = rx->link;
   27318:	f851 3b2e 	ldr.w	r3, [r1], #46
   2731c:	930b      	str	r3, [sp, #44]	; 0x2c
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
   2731e:	f106 0008 	add.w	r0, r6, #8
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
   27322:	f106 0904 	add.w	r9, r6, #4
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
   27326:	f01d fbcc 	bl	44ac2 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
   2732a:	f106 0318 	add.w	r3, r6, #24
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
   2732e:	2204      	movs	r2, #4
   27330:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   27334:	4648      	mov	r0, r9
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
   27336:	930c      	str	r3, [sp, #48]	; 0x30
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
   27338:	f01d fbc3 	bl	44ac2 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
   2733c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2733e:	2205      	movs	r2, #5
   27340:	f105 013a 	add.w	r1, r5, #58	; 0x3a
   27344:	4618      	mov	r0, r3
   27346:	f01d fbbc 	bl	44ac2 <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
   2734a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2734c:	2105      	movs	r1, #5
   2734e:	4618      	mov	r0, r3
   27350:	f008 fd24 	bl	2fd9c <util_ones_count_get>
   27354:	7f73      	ldrb	r3, [r6, #29]
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
   27356:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
   2735a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2735e:	f360 0305 	bfi	r3, r0, #0, #6
   27362:	7773      	strb	r3, [r6, #29]
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
   27364:	f3c2 0304 	ubfx	r3, r2, #0, #5
   27368:	77b3      	strb	r3, [r6, #30]
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
   2736a:	8eab      	ldrh	r3, [r5, #52]	; 0x34
   2736c:	81f3      	strh	r3, [r6, #14]
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
   2736e:	2801      	cmp	r0, #1
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
   27370:	b299      	uxth	r1, r3
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
   27372:	f002 031f 	and.w	r3, r2, #31
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
   27376:	d905      	bls.n	27384 <ull_periph_setup+0xbc>
   27378:	331b      	adds	r3, #27
   2737a:	f003 031f 	and.w	r3, r3, #31
   2737e:	2b0b      	cmp	r3, #11
   27380:	d800      	bhi.n	27384 <ull_periph_setup+0xbc>
	    (lll->data_chan_hop < CHM_HOP_COUNT_MIN) ||
	    (lll->data_chan_hop > CHM_HOP_COUNT_MAX) ||
   27382:	b9f9      	cbnz	r1, 273c4 <ull_periph_setup+0xfc>
{
	/* Reset the advertising disabled callback */
	hdr->disabled_cb = NULL;

	/* Let the advertiser continue with connectable advertising */
	lll->periph.initiated = 0U;
   27384:	f896 3020 	ldrb.w	r3, [r6, #32]
		struct node_rx_pdu *rx_csa;

		/* pick the rx node instance stored within the
		 * connection rx node.
		 */
		rx_csa = rx->rx_ftr.extra;
   27388:	68ec      	ldr	r4, [r5, #12]

		/* Enqueue the connection event to be release */
		ll_rx_put(link, rx);
   2738a:	980b      	ldr	r0, [sp, #44]	; 0x2c
	hdr->disabled_cb = NULL;
   2738c:	2200      	movs	r2, #0
	lll->periph.initiated = 0U;
   2738e:	f362 0300 	bfi	r3, r2, #0, #1
	rx->type = NODE_RX_TYPE_RELEASE;
   27392:	2701      	movs	r7, #1
	hdr->disabled_cb = NULL;
   27394:	f8c8 2014 	str.w	r2, [r8, #20]
		ll_rx_put(link, rx);
   27398:	4629      	mov	r1, r5
	lll->periph.initiated = 0U;
   2739a:	f886 3020 	strb.w	r3, [r6, #32]
	rx->type = NODE_RX_TYPE_RELEASE;
   2739e:	712f      	strb	r7, [r5, #4]
		ll_rx_put(link, rx);
   273a0:	f00b fea8 	bl	330f4 <ll_rx_put>
		/* Mark for buffer for release */
		rx->type = NODE_RX_TYPE_RELEASE;
	}

	/* Enqueue connection or CSA event to be release */
	ll_rx_put(link, rx);
   273a4:	6820      	ldr	r0, [r4, #0]
		rx->type = NODE_RX_TYPE_RELEASE;
   273a6:	7127      	strb	r7, [r4, #4]
	ll_rx_put(link, rx);
   273a8:	4621      	mov	r1, r4
   273aa:	f00b fea3 	bl	330f4 <ll_rx_put>
	ll_rx_sched();
   273ae:	f00b feab 	bl	33108 <ll_rx_sched>
}
   273b2:	b017      	add	sp, #92	; 0x5c
   273b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(peer_id_addr, peer_addr, BDADDR_SIZE);
   273b8:	2206      	movs	r2, #6
   273ba:	a914      	add	r1, sp, #80	; 0x50
   273bc:	4658      	mov	r0, fp
   273be:	f01d fb80 	bl	44ac2 <memcpy>
   273c2:	e7a7      	b.n	27314 <ull_periph_setup+0x4c>
	((struct lll_adv *)ftr->param)->conn = NULL;
   273c4:	6823      	ldr	r3, [r4, #0]
   273c6:	2000      	movs	r0, #0
   273c8:	6058      	str	r0, [r3, #4]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
   273ca:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
   273ce:	f895 0037 	ldrb.w	r0, [r5, #55]	; 0x37
   273d2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   273d6:	8233      	strh	r3, [r6, #16]
	conn->periph.sca = pdu_adv->connect_ind.sca;
   273d8:	f89a 30d8 	ldrb.w	r3, [sl, #216]	; 0xd8
   273dc:	0952      	lsrs	r2, r2, #5
   273de:	f362 03c5 	bfi	r3, r2, #3, #3
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
   273e2:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
	conn->periph.sca = pdu_adv->connect_ind.sca;
   273e4:	f88a 30d8 	strb.w	r3, [sl, #216]	; 0xd8
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
   273e8:	f240 43e2 	movw	r3, #1250	; 0x4e2
   273ec:	fb03 f101 	mul.w	r1, r3, r1
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
   273f0:	920e      	str	r2, [sp, #56]	; 0x38
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
   273f2:	910c      	str	r1, [sp, #48]	; 0x30
		ceiling_fraction(((lll_clock_ppm_local_get() +
   273f4:	f013 fc5c 	bl	3acb0 <lll_clock_ppm_local_get>
   273f8:	900d      	str	r0, [sp, #52]	; 0x34
   273fa:	f89a 00d8 	ldrb.w	r0, [sl, #216]	; 0xd8
   273fe:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   27402:	f013 fc57 	bl	3acb4 <lll_clock_ppm_get>
   27406:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   27408:	990c      	ldr	r1, [sp, #48]	; 0x30
   2740a:	4410      	add	r0, r2
   2740c:	fb01 f000 	mul.w	r0, r1, r0
   27410:	4abd      	ldr	r2, [pc, #756]	; (27708 <ull_periph_setup+0x440>)
   27412:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
   27416:	f200 203f 	addw	r0, r0, #575	; 0x23f
   2741a:	fba2 2000 	umull	r2, r0, r2, r0
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
   2741e:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
   27422:	f240 43e2 	movw	r3, #1250	; 0x4e2
   27426:	fb02 f303 	mul.w	r3, r2, r3
   2742a:	63b3      	str	r3, [r6, #56]	; 0x38
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
   2742c:	084b      	lsrs	r3, r1, #1
		ceiling_fraction(((lll_clock_ppm_local_get() +
   2742e:	0c80      	lsrs	r0, r0, #18
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
   27430:	3b96      	subs	r3, #150	; 0x96
	lll->periph.window_widening_periodic_us =
   27432:	6270      	str	r0, [r6, #36]	; 0x24
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
   27434:	62b3      	str	r3, [r6, #40]	; 0x28
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
   27436:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   27438:	4ab4      	ldr	r2, [pc, #720]	; (2770c <ull_periph_setup+0x444>)
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
   2743a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
   2743e:	4618      	mov	r0, r3
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   27440:	4bb3      	ldr	r3, [pc, #716]	; (27710 <ull_periph_setup+0x448>)
   27442:	468c      	mov	ip, r1
   27444:	440b      	add	r3, r1
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   27446:	4462      	add	r2, ip
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   27448:	fbb3 f3f1 	udiv	r3, r3, r1
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   2744c:	fbb2 f2fc 	udiv	r2, r2, ip
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   27450:	8a31      	ldrh	r1, [r6, #16]
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   27452:	f8aa 20c6 	strh.w	r2, [sl, #198]	; 0xc6
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
   27456:	b282      	uxth	r2, r0
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   27458:	f242 7010 	movw	r0, #10000	; 0x2710
   2745c:	fb00 c202 	mla	r2, r0, r2, ip
   27460:	3a01      	subs	r2, #1
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   27462:	1d88      	adds	r0, r1, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   27464:	fbb2 f2fc 	udiv	r2, r2, ip
   27468:	f8aa 20c2 	strh.w	r2, [sl, #194]	; 0xc2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   2746c:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   2746e:	4282      	cmp	r2, r0
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   27470:	f8aa 20ce 	strh.w	r2, [sl, #206]	; 0xce
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   27474:	dd04      	ble.n	27480 <ull_periph_setup+0x1b8>
   27476:	f5c1 417f 	rsb	r1, r1, #65280	; 0xff00
   2747a:	31fa      	adds	r1, #250	; 0xfa
   2747c:	440a      	add	r2, r1
   2747e:	b292      	uxth	r2, r2
   27480:	f8aa 20ca 	strh.w	r2, [sl, #202]	; 0xca
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
   27484:	4649      	mov	r1, r9
   27486:	2204      	movs	r2, #4
   27488:	f10a 00dc 	add.w	r0, sl, #220	; 0xdc
   2748c:	f01d fb19 	bl	44ac2 <memcpy>
		chan_sel = pdu_adv->chan_sel;
   27490:	462b      	mov	r3, r5
   27492:	f813 2f1c 	ldrb.w	r2, [r3, #28]!
   27496:	f3c2 1240 	ubfx	r2, r2, #5, #1
   2749a:	920d      	str	r2, [sp, #52]	; 0x34
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   2749c:	07da      	lsls	r2, r3, #31
   2749e:	f100 810f 	bmi.w	276c0 <ull_periph_setup+0x3f8>
	cc->status = 0U;
   274a2:	f44f 7380 	mov.w	r3, #256	; 0x100
   274a6:	83ab      	strh	r3, [r5, #28]
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
   274a8:	f898 0026 	ldrb.w	r0, [r8, #38]	; 0x26
   274ac:	f012 fd7e 	bl	39fac <ull_filter_lll_lrpa_used>
   274b0:	4601      	mov	r1, r0
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
   274b2:	2206      	movs	r2, #6
   274b4:	f105 002b 	add.w	r0, r5, #43	; 0x2b
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
   274b8:	2900      	cmp	r1, #0
   274ba:	f000 80e7 	beq.w	2768c <ull_periph_setup+0x3c4>
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
   274be:	f105 0124 	add.w	r1, r5, #36	; 0x24
   274c2:	f01d fafe 	bl	44ac2 <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
   274c6:	2fff      	cmp	r7, #255	; 0xff
		memcpy(cc->peer_rpa, peer_addr, BDADDR_SIZE);
   274c8:	f105 0025 	add.w	r0, r5, #37	; 0x25
	if (rl_idx != FILTER_IDX_NONE) {
   274cc:	f000 80e1 	beq.w	27692 <ull_periph_setup+0x3ca>
		memcpy(cc->peer_rpa, peer_addr, BDADDR_SIZE);
   274d0:	a914      	add	r1, sp, #80	; 0x50
   274d2:	2206      	movs	r2, #6
   274d4:	f01d faf5 	bl	44ac2 <memcpy>
	cc->peer_addr_type = peer_addr_type;
   274d8:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   274dc:	77ab      	strb	r3, [r5, #30]
	memcpy(cc->peer_addr, peer_id_addr, BDADDR_SIZE);
   274de:	4659      	mov	r1, fp
   274e0:	2206      	movs	r2, #6
   274e2:	f105 001f 	add.w	r0, r5, #31
   274e6:	f01d faec 	bl	44ac2 <memcpy>
	cc->interval = lll->interval;
   274ea:	f8d6 300e 	ldr.w	r3, [r6, #14]
   274ee:	f8c5 3032 	str.w	r3, [r5, #50]	; 0x32
	cc->timeout = timeout;
   274f2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
   274f6:	86eb      	strh	r3, [r5, #54]	; 0x36
	cc->sca = conn->periph.sca;
   274f8:	f89a 30d8 	ldrb.w	r3, [sl, #216]	; 0xd8
   274fc:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   27500:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
	lll->handle = ll_conn_handle_get(conn);
   27504:	4650      	mov	r0, sl
   27506:	f00d fe5f 	bl	351c8 <ll_conn_handle_get>
		ll_rx_put(link, rx);
   2750a:	4629      	mov	r1, r5
	lll->handle = ll_conn_handle_get(conn);
   2750c:	81b0      	strh	r0, [r6, #12]
	rx->handle = lll->handle;
   2750e:	80e8      	strh	r0, [r5, #6]
		rx_csa = (void *)ftr->extra;
   27510:	6865      	ldr	r5, [r4, #4]
		ll_rx_put(link, rx);
   27512:	980b      	ldr	r0, [sp, #44]	; 0x2c
   27514:	f00b fdee 	bl	330f4 <ll_rx_put>
		rx->handle = lll->handle;
   27518:	89b3      	ldrh	r3, [r6, #12]
   2751a:	80eb      	strh	r3, [r5, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   2751c:	231b      	movs	r3, #27
   2751e:	712b      	strb	r3, [r5, #4]
		if (chan_sel) {
   27520:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		link = rx->link;
   27522:	682f      	ldr	r7, [r5, #0]
		if (chan_sel) {
   27524:	2b00      	cmp	r3, #0
   27526:	f040 80b9 	bne.w	2769c <ull_periph_setup+0x3d4>
   2752a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			cs->csa = 0x00;
   2752c:	772b      	strb	r3, [r5, #28]
	ll_rx_put(link, rx);
   2752e:	4629      	mov	r1, r5
   27530:	4638      	mov	r0, r7
   27532:	f00b fddf 	bl	330f4 <ll_rx_put>
	ll_rx_sched();
   27536:	f00b fde7 	bl	33108 <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
   2753a:	f896 0045 	ldrb.w	r0, [r6, #69]	; 0x45
	max_tx_time = lll->max_tx_time;
   2753e:	f8b6 7040 	ldrh.w	r7, [r6, #64]	; 0x40
	max_rx_time = lll->max_rx_time;
   27542:	f8b6 5042 	ldrh.w	r5, [r6, #66]	; 0x42
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
   27546:	2101      	movs	r1, #1
   27548:	f000 0007 	and.w	r0, r0, #7
   2754c:	f013 f9ba 	bl	3a8c4 <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   27550:	443d      	add	r5, r7
   27552:	f505 75e1 	add.w	r5, r5, #450	; 0x1c2
   27556:	1829      	adds	r1, r5, r0
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
   27558:	4681      	mov	r9, r0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   2755a:	486e      	ldr	r0, [pc, #440]	; (27714 <ull_periph_setup+0x44c>)
	conn->ull.ticks_active_to_start = 0U;
   2755c:	2700      	movs	r7, #0
	conn->ull.ticks_prepare_to_start =
   2755e:	2331      	movs	r3, #49	; 0x31
   27560:	f8ca 3008 	str.w	r3, [sl, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   27564:	fba1 0100 	umull	r0, r1, r1, r0
   27568:	a365      	add	r3, pc, #404	; (adr r3, 27700 <ull_periph_setup+0x438>)
   2756a:	e9d3 2300 	ldrd	r2, r3, [r3]
	conn->ull.ticks_active_to_start = 0U;
   2756e:	f8ca 7004 	str.w	r7, [sl, #4]
	conn->ull.ticks_preempt_to_start =
   27572:	f8ca 700c 	str.w	r7, [sl, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   27576:	f7fe fdc3 	bl	26100 <__aeabi_uldivmod>
	conn_interval_us -= lll->periph.window_widening_periodic_us;
   2757a:	6a76      	ldr	r6, [r6, #36]	; 0x24
   2757c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
   2757e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	conn_offset_us = ftr->radio_end_us;
   27580:	68e5      	ldr	r5, [r4, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   27582:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_interval_us -= lll->periph.window_widening_periodic_us;
   27586:	1b9e      	subs	r6, r3, r6
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
   27588:	f240 43e2 	movw	r3, #1250	; 0x4e2
   2758c:	fb03 5502 	mla	r5, r3, r2, r5
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
   27590:	2102      	movs	r1, #2
   27592:	463a      	mov	r2, r7
	conn->ull.ticks_slot =
   27594:	f8ca 0010 	str.w	r0, [sl, #16]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
   27598:	2001      	movs	r0, #1
   2759a:	f008 fac5 	bl	2fb28 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
   2759e:	4640      	mov	r0, r8
   275a0:	f00c fe8a 	bl	342b8 <ull_adv_handle_get>
   275a4:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   275a6:	4b5c      	ldr	r3, [pc, #368]	; (27718 <ull_periph_setup+0x450>)
   275a8:	f8cd 8000 	str.w	r8, [sp]
   275ac:	b2d2      	uxtb	r2, r2
   275ae:	4638      	mov	r0, r7
   275b0:	2101      	movs	r1, #1
   275b2:	f009 fd19 	bl	30fe8 <ticker_stop>
	conn_offset_us -= EVENT_JITTER_US;
   275b6:	f205 45b2 	addw	r5, r5, #1202	; 0x4b2
}

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   275ba:	2801      	cmp	r0, #1
	conn_offset_us -= ready_delay_us;
   275bc:	eba5 0509 	sub.w	r5, r5, r9
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   275c0:	f000 808b 	beq.w	276da <ull_periph_setup+0x412>
	if (adv->lll.is_hdcd) {
   275c4:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
   275c8:	07db      	lsls	r3, r3, #31
   275ca:	d471      	bmi.n	276b0 <ull_periph_setup+0x3e8>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   275cc:	4650      	mov	r0, sl
   275ce:	f00d fdfb 	bl	351c8 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   275d2:	f8df 9140 	ldr.w	r9, [pc, #320]	; 27714 <ull_periph_setup+0x44c>
   275d6:	fba6 8609 	umull	r8, r6, r6, r9
   275da:	a349      	add	r3, pc, #292	; (adr r3, 27700 <ull_periph_setup+0x438>)
   275dc:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   275e0:	4683      	mov	fp, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   275e2:	4631      	mov	r1, r6
   275e4:	4640      	mov	r0, r8
   275e6:	f7fe fd8b 	bl	26100 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   275ea:	68a3      	ldr	r3, [r4, #8]
   275ec:	4a4b      	ldr	r2, [pc, #300]	; (2771c <ull_periph_setup+0x454>)
   275ee:	9207      	str	r2, [sp, #28]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   275f0:	f10b 0403 	add.w	r4, fp, #3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   275f4:	f1a3 0b3a 	sub.w	fp, r3, #58	; 0x3a
				     HAL_TICKER_REMAINDER(conn_interval_us),
   275f8:	4b49      	ldr	r3, [pc, #292]	; (27720 <ull_periph_setup+0x458>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   275fa:	f8cd a018 	str.w	sl, [sp, #24]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   275fe:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
   27602:	fba7 3103 	umull	r3, r1, r7, r3
   27606:	ebb8 0003 	subs.w	r0, r8, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   2760a:	4b46      	ldr	r3, [pc, #280]	; (27724 <ull_periph_setup+0x45c>)
   2760c:	9305      	str	r3, [sp, #20]
   2760e:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   27612:	9308      	str	r3, [sp, #32]
   27614:	f8da 3010 	ldr.w	r3, [sl, #16]
   27618:	9304      	str	r3, [sp, #16]
   2761a:	f04f 0300 	mov.w	r3, #0
   2761e:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   27620:	f04f 0307 	mov.w	r3, #7
   27624:	fb03 1107 	mla	r1, r3, r7, r1
   27628:	eb66 0101 	sbc.w	r1, r6, r1
   2762c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   27630:	2300      	movs	r3, #0
   27632:	f7fe fd65 	bl	26100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   27636:	a332      	add	r3, pc, #200	; (adr r3, 27700 <ull_periph_setup+0x438>)
   27638:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   2763c:	e9cd 7001 	strd	r7, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   27640:	fba5 0109 	umull	r0, r1, r5, r9
   27644:	f7fe fd5c 	bl	26100 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27648:	b2e4      	uxtb	r4, r4
   2764a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2764e:	9000      	str	r0, [sp, #0]
   27650:	465b      	mov	r3, fp
   27652:	4622      	mov	r2, r4
   27654:	2101      	movs	r1, #1
   27656:	2000      	movs	r0, #0
   27658:	f009 fc3a 	bl	30ed0 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   2765c:	f030 0302 	bics.w	r3, r0, #2
   27660:	d00c      	beq.n	2767c <ull_periph_setup+0x3b4>
   27662:	4a31      	ldr	r2, [pc, #196]	; (27728 <ull_periph_setup+0x460>)
   27664:	4931      	ldr	r1, [pc, #196]	; (2772c <ull_periph_setup+0x464>)
   27666:	4832      	ldr	r0, [pc, #200]	; (27730 <ull_periph_setup+0x468>)
   27668:	f240 13c9 	movw	r3, #457	; 0x1c9
   2766c:	f01b f92a 	bl	428c4 <printk>
   27670:	4040      	eors	r0, r0
   27672:	f380 8811 	msr	BASEPRI, r0
   27676:	f04f 0003 	mov.w	r0, #3
   2767a:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
   2767c:	2201      	movs	r2, #1
   2767e:	2102      	movs	r1, #2
   27680:	4610      	mov	r0, r2
   27682:	f008 fa51 	bl	2fb28 <mayfly_enable>
}
   27686:	b017      	add	sp, #92	; 0x5c
   27688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
   2768c:	f01d fa24 	bl	44ad8 <memset>
   27690:	e719      	b.n	274c6 <ull_periph_setup+0x1fe>
		memset(cc->peer_rpa, 0x0, BDADDR_SIZE);
   27692:	2206      	movs	r2, #6
   27694:	2100      	movs	r1, #0
   27696:	f01d fa1f 	bl	44ad8 <memset>
   2769a:	e71d      	b.n	274d8 <ull_periph_setup+0x210>
			lll->data_chan_sel = 1;
   2769c:	7f73      	ldrb	r3, [r6, #29]
   2769e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   276a2:	7773      	strb	r3, [r6, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
   276a4:	4648      	mov	r0, r9
   276a6:	f011 fd19 	bl	390dc <lll_chan_id>
   276aa:	2301      	movs	r3, #1
   276ac:	83f0      	strh	r0, [r6, #30]
			cs->csa = 0x01;
   276ae:	e73d      	b.n	2752c <ull_periph_setup+0x264>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   276b0:	2300      	movs	r3, #0
   276b2:	2201      	movs	r2, #1
   276b4:	9300      	str	r3, [sp, #0]
   276b6:	4618      	mov	r0, r3
   276b8:	4611      	mov	r1, r2
   276ba:	f009 fc95 	bl	30fe8 <ticker_stop>
   276be:	e785      	b.n	275cc <ull_periph_setup+0x304>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   276c0:	4a19      	ldr	r2, [pc, #100]	; (27728 <ull_periph_setup+0x460>)
   276c2:	491c      	ldr	r1, [pc, #112]	; (27734 <ull_periph_setup+0x46c>)
   276c4:	481a      	ldr	r0, [pc, #104]	; (27730 <ull_periph_setup+0x468>)
   276c6:	23f1      	movs	r3, #241	; 0xf1
   276c8:	f01b f8fc 	bl	428c4 <printk>
   276cc:	4040      	eors	r0, r0
   276ce:	f380 8811 	msr	BASEPRI, r0
   276d2:	f04f 0003 	mov.w	r0, #3
   276d6:	df02      	svc	2
   276d8:	e6e3      	b.n	274a2 <ull_periph_setup+0x1da>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   276da:	f00b fde9 	bl	332b0 <ull_disable_mark_get>
   276de:	4580      	cmp	r8, r0
   276e0:	f43f af70 	beq.w	275c4 <ull_periph_setup+0x2fc>
   276e4:	4a10      	ldr	r2, [pc, #64]	; (27728 <ull_periph_setup+0x460>)
   276e6:	4914      	ldr	r1, [pc, #80]	; (27738 <ull_periph_setup+0x470>)
   276e8:	4811      	ldr	r0, [pc, #68]	; (27730 <ull_periph_setup+0x468>)
   276ea:	f240 239f 	movw	r3, #671	; 0x29f
   276ee:	f01b f8e9 	bl	428c4 <printk>
   276f2:	4040      	eors	r0, r0
   276f4:	f380 8811 	msr	BASEPRI, r0
   276f8:	f04f 0003 	mov.w	r0, #3
   276fc:	df02      	svc	2
		  param == ull_disable_mark_get());
}
   276fe:	e761      	b.n	275c4 <ull_periph_setup+0x2fc>
   27700:	1afd498d 	.word	0x1afd498d
   27704:	00000007 	.word	0x00000007
   27708:	431bde83 	.word	0x431bde83
   2770c:	026259ff 	.word	0x026259ff
   27710:	01c9c37f 	.word	0x01c9c37f
   27714:	3b9aca00 	.word	0x3b9aca00
   27718:	00038e59 	.word	0x00038e59
   2771c:	00038e29 	.word	0x00038e29
   27720:	1afd498d 	.word	0x1afd498d
   27724:	00038e95 	.word	0x00038e95
   27728:	0004a300 	.word	0x0004a300
   2772c:	0004a1bc 	.word	0x0004a1bc
   27730:	00049c68 	.word	0x00049c68
   27734:	00049d50 	.word	0x00049d50
   27738:	0004a35c 	.word	0x0004a35c
   2773c:	00000000 	.word	0x00000000

00027740 <nrf_flash_sync_exe>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
	_ticker_sync_context.slot = duration;
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   27740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27744:	b08f      	sub	sp, #60	; 0x3c
			      /* (MAYFLY_CALL_ID_PROGRAM) */
			   ticker_id, /* flash ticker id */
			   ticker_ticks_now_get(), /* current tick */
			   0, /* first int. immediately */
			   /* period */
			   HAL_TICKER_US_TO_TICKS(
   27746:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 27820 <nrf_flash_sync_exe+0xe0>
{
   2774a:	900b      	str	r0, [sp, #44]	; 0x2c
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   2774c:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   27750:	f10d 0036 	add.w	r0, sp, #54	; 0x36
   27754:	f00b fd46 	bl	331e4 <ll_timeslice_ticker_id_get>
			   HAL_TICKER_US_TO_TICKS(
   27758:	4f32      	ldr	r7, [pc, #200]	; (27824 <nrf_flash_sync_exe+0xe4>)
	err = ticker_start(instance_index,
   2775a:	f89d a036 	ldrb.w	sl, [sp, #54]	; 0x36
   2775e:	f89d b037 	ldrb.w	fp, [sp, #55]	; 0x37
   27762:	f009 fc83 	bl	3106c <ticker_ticks_now_get>
			   HAL_TICKER_US_TO_TICKS(
   27766:	f8d8 4000 	ldr.w	r4, [r8]
	err = ticker_start(instance_index,
   2776a:	900a      	str	r0, [sp, #40]	; 0x28
			   HAL_TICKER_US_TO_TICKS(
   2776c:	fba4 5407 	umull	r5, r4, r4, r7
   27770:	a329      	add	r3, pc, #164	; (adr r3, 27818 <nrf_flash_sync_exe+0xd8>)
   27772:	e9d3 2300 	ldrd	r2, r3, [r3]
	err = ticker_start(instance_index,
   27776:	2600      	movs	r6, #0
			   HAL_TICKER_US_TO_TICKS(
   27778:	4621      	mov	r1, r4
   2777a:	4628      	mov	r0, r5
   2777c:	f7fe fcc0 	bl	26100 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
   27780:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   27782:	9306      	str	r3, [sp, #24]
   27784:	e9cd 6607 	strd	r6, r6, [sp, #28]
   27788:	4b27      	ldr	r3, [pc, #156]	; (27828 <nrf_flash_sync_exe+0xe8>)
   2778a:	9305      	str	r3, [sp, #20]
			   HAL_TICKER_US_TO_TICKS(
   2778c:	4681      	mov	r9, r0
				_ticker_sync_context.interval),
			   /* period remainder */
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
			   0, /* lazy, voluntary skips */
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
   2778e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   27792:	a321      	add	r3, pc, #132	; (adr r3, 27818 <nrf_flash_sync_exe+0xd8>)
   27794:	e9d3 2300 	ldrd	r2, r3, [r3]
   27798:	fba0 0107 	umull	r0, r1, r0, r7
   2779c:	f7fe fcb0 	bl	26100 <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
   277a0:	4b22      	ldr	r3, [pc, #136]	; (2782c <nrf_flash_sync_exe+0xec>)
   277a2:	f029 477f 	bic.w	r7, r9, #4278190080	; 0xff000000
   277a6:	fba7 3103 	umull	r3, r1, r7, r3
	err = ticker_start(instance_index,
   277aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
   277ae:	2207      	movs	r2, #7
	err = ticker_start(instance_index,
   277b0:	e9cd 6003 	strd	r6, r0, [sp, #12]
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
   277b4:	fb02 1107 	mla	r1, r2, r7, r1
   277b8:	1ae8      	subs	r0, r5, r3
   277ba:	eb64 0101 	sbc.w	r1, r4, r1
   277be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   277c2:	2300      	movs	r3, #0
   277c4:	f7fe fc9c 	bl	26100 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
   277c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   277ca:	9600      	str	r6, [sp, #0]
   277cc:	e9cd 7001 	strd	r7, r0, [sp, #4]
   277d0:	465a      	mov	r2, fp
   277d2:	2103      	movs	r1, #3
   277d4:	4650      	mov	r0, sl
   277d6:	f009 fb7b 	bl	30ed0 <ticker_start>
			   time_slot_callback_prepare,
			   op_desc,
			   NULL, /* no op callback */
			   NULL);

	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   277da:	f030 0402 	bics.w	r4, r0, #2
   277de:	d116      	bne.n	2780e <nrf_flash_sync_exe+0xce>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   277e0:	4a13      	ldr	r2, [pc, #76]	; (27830 <nrf_flash_sync_exe+0xf0>)
   277e2:	4814      	ldr	r0, [pc, #80]	; (27834 <nrf_flash_sync_exe+0xf4>)
   277e4:	2300      	movs	r3, #0
   277e6:	f019 fee3 	bl	415b0 <z_impl_k_sem_take>
		result = -ECANCELED;
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
   277ea:	b168      	cbz	r0, 27808 <nrf_flash_sync_exe+0xc8>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   277ec:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   277f0:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
   277f4:	9400      	str	r4, [sp, #0]
   277f6:	4623      	mov	r3, r4
   277f8:	2103      	movs	r1, #3
   277fa:	f009 fbf5 	bl	30fe8 <ticker_stop>
		/* Stop any scheduled jobs */
		_ticker_stop(instance_index, 3, ticker_id);

		/* wait for operation's complete overrun*/
		result = -ETIMEDOUT;
   277fe:	f06f 0073 	mvn.w	r0, #115	; 0x73
	} else {
		result = _ticker_sync_context.result;
	}

	return result;
}
   27802:	b00f      	add	sp, #60	; 0x3c
   27804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = _ticker_sync_context.result;
   27808:	f8d8 000c 	ldr.w	r0, [r8, #12]
   2780c:	e7f9      	b.n	27802 <nrf_flash_sync_exe+0xc2>
		result = -ECANCELED;
   2780e:	f06f 008b 	mvn.w	r0, #139	; 0x8b
	return result;
   27812:	e7f6      	b.n	27802 <nrf_flash_sync_exe+0xc2>
   27814:	f3af 8000 	nop.w
   27818:	1afd498d 	.word	0x1afd498d
   2781c:	00000007 	.word	0x00000007
   27820:	200036a0 	.word	0x200036a0
   27824:	3b9aca00 	.word	0x3b9aca00
   27828:	0003e999 	.word	0x0003e999
   2782c:	1afd498d 	.word	0x1afd498d
   27830:	000b7b44 	.word	0x000b7b44
   27834:	20003688 	.word	0x20003688

00027838 <nrf_flash_sync_check_time_limit>:
{
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
   27838:	b538      	push	{r3, r4, r5, lr}
	uint32_t ticks_diff;

	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
   2783a:	4d0f      	ldr	r5, [pc, #60]	; (27878 <nrf_flash_sync_check_time_limit+0x40>)
{
   2783c:	4604      	mov	r4, r0
	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
   2783e:	f009 fc15 	bl	3106c <ticker_ticks_now_get>
   27842:	68a9      	ldr	r1, [r5, #8]
   27844:	f009 fc14 	bl	31070 <ticker_ticks_diff_get>
					   _ticker_sync_context.ticks_begin);
	if (ticks_diff + ticks_diff/iteration >
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
   27848:	6869      	ldr	r1, [r5, #4]
	if (ticks_diff + ticks_diff/iteration >
   2784a:	fbb0 f4f4 	udiv	r4, r0, r4
   2784e:	4404      	add	r4, r0
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
   27850:	480a      	ldr	r0, [pc, #40]	; (2787c <nrf_flash_sync_check_time_limit+0x44>)
   27852:	a307      	add	r3, pc, #28	; (adr r3, 27870 <nrf_flash_sync_check_time_limit+0x38>)
   27854:	e9d3 2300 	ldrd	r2, r3, [r3]
   27858:	fba1 0100 	umull	r0, r1, r1, r0
   2785c:	f7fe fc50 	bl	26100 <__aeabi_uldivmod>
   27860:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return true;
	}

	return false;
}
   27864:	4284      	cmp	r4, r0
   27866:	bf94      	ite	ls
   27868:	2000      	movls	r0, #0
   2786a:	2001      	movhi	r0, #1
   2786c:	bd38      	pop	{r3, r4, r5, pc}
   2786e:	bf00      	nop
   27870:	1afd498d 	.word	0x1afd498d
   27874:	00000007 	.word	0x00000007
   27878:	200036a0 	.word	0x200036a0
   2787c:	3b9aca00 	.word	0x3b9aca00

00027880 <activity_expiry_function>:
    }
}

K_WORK_DEFINE(activity_work, activity_work_handler);

void activity_expiry_function() { k_work_submit(&activity_work); }
   27880:	4801      	ldr	r0, [pc, #4]	; (27888 <activity_expiry_function+0x8>)
   27882:	f019 bff3 	b.w	4186c <k_work_submit>
   27886:	bf00      	nop
   27888:	20000260 	.word	0x20000260

0002788c <activity_init>:

K_TIMER_DEFINE(activity_timer, activity_expiry_function, NULL);

int activity_init() {
   2788c:	b507      	push	{r0, r1, r2, lr}
	return z_impl_k_uptime_ticks();
   2788e:	f021 f9b0 	bl	48bf2 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   27892:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   27896:	fba0 0302 	umull	r0, r3, r0, r2
   2789a:	fb02 3101 	mla	r1, r2, r1, r3
   2789e:	0bc0      	lsrs	r0, r0, #15
    activity_last_uptime = k_uptime_get();
   278a0:	4a07      	ldr	r2, [pc, #28]	; (278c0 <activity_init+0x34>)
   278a2:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   278a6:	6010      	str	r0, [r2, #0]

    k_timer_start(&activity_timer, K_SECONDS(1), K_SECONDS(1));
   278a8:	2300      	movs	r3, #0
	compiler_barrier();
   278aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	z_impl_k_timer_start(timer, duration, period);
   278ae:	4805      	ldr	r0, [pc, #20]	; (278c4 <activity_init+0x38>)
   278b0:	e9cd 2300 	strd	r2, r3, [sp]
   278b4:	f01a fd78 	bl	423a8 <z_impl_k_timer_start>
    return 0;
}
   278b8:	2000      	movs	r0, #0
   278ba:	b003      	add	sp, #12
   278bc:	f85d fb04 	ldr.w	pc, [sp], #4
   278c0:	20001968 	.word	0x20001968
   278c4:	20000a10 	.word	0x20000a10

000278c8 <raise_event>:
int raise_event() {
   278c8:	b508      	push	{r3, lr}
    return ZMK_EVENT_RAISE(new_zmk_activity_state_changed(
   278ca:	4b04      	ldr	r3, [pc, #16]	; (278dc <raise_event+0x14>)
   278cc:	7818      	ldrb	r0, [r3, #0]
   278ce:	f000 f8e5 	bl	27a9c <new_zmk_activity_state_changed>
}
   278d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return ZMK_EVENT_RAISE(new_zmk_activity_state_changed(
   278d6:	f01a be5e 	b.w	42596 <zmk_event_manager_raise>
   278da:	bf00      	nop
   278dc:	20003b34 	.word	0x20003b34

000278e0 <set_state>:
    if (activity_state == state)
   278e0:	4b04      	ldr	r3, [pc, #16]	; (278f4 <set_state+0x14>)
   278e2:	781a      	ldrb	r2, [r3, #0]
   278e4:	4282      	cmp	r2, r0
   278e6:	d002      	beq.n	278ee <set_state+0xe>
    activity_state = state;
   278e8:	7018      	strb	r0, [r3, #0]
    return raise_event();
   278ea:	f7ff bfed 	b.w	278c8 <raise_event>
}
   278ee:	2000      	movs	r0, #0
   278f0:	4770      	bx	lr
   278f2:	bf00      	nop
   278f4:	20003b34 	.word	0x20003b34

000278f8 <activity_event_listener>:
int activity_event_listener(const zmk_event_t *eh) {
   278f8:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   278fa:	f021 f97a 	bl	48bf2 <z_impl_k_uptime_ticks>
   278fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   27902:	fba0 0302 	umull	r0, r3, r0, r2
   27906:	fb02 3101 	mla	r1, r2, r1, r3
   2790a:	0bc0      	lsrs	r0, r0, #15
    activity_last_uptime = k_uptime_get();
   2790c:	4a04      	ldr	r2, [pc, #16]	; (27920 <activity_event_listener+0x28>)
   2790e:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   27912:	6010      	str	r0, [r2, #0]
}
   27914:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return set_state(ZMK_ACTIVITY_ACTIVE);
   27918:	2000      	movs	r0, #0
   2791a:	f7ff bfe1 	b.w	278e0 <set_state>
   2791e:	bf00      	nop
   27920:	20001968 	.word	0x20001968

00027924 <activity_work_handler>:
void activity_work_handler(struct k_work *work) {
   27924:	b508      	push	{r3, lr}
   27926:	f021 f964 	bl	48bf2 <z_impl_k_uptime_ticks>
   2792a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2792e:	fba0 0302 	umull	r0, r3, r0, r2
   27932:	fb02 3101 	mla	r1, r2, r1, r3
    int32_t inactive_time = current - activity_last_uptime;
   27936:	4a08      	ldr	r2, [pc, #32]	; (27958 <activity_work_handler+0x34>)
   27938:	0bc3      	lsrs	r3, r0, #15
   2793a:	6812      	ldr	r2, [r2, #0]
   2793c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   27940:	1a9b      	subs	r3, r3, r2
        if (inactive_time > MAX_IDLE_MS) {
   27942:	f247 5230 	movw	r2, #30000	; 0x7530
   27946:	4293      	cmp	r3, r2
   27948:	dd04      	ble.n	27954 <activity_work_handler+0x30>
}
   2794a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        set_state(ZMK_ACTIVITY_IDLE);
   2794e:	2001      	movs	r0, #1
   27950:	f7ff bfc6 	b.w	278e0 <set_state>
}
   27954:	bd08      	pop	{r3, pc}
   27956:	bf00      	nop
   27958:	20001968 	.word	0x20001968

0002795c <zmk_kscan_process_msgq>:

    k_msgq_put(&zmk_kscan_msgq, &ev, K_NO_WAIT);
    k_work_submit(&msg_processor.work);
}

void zmk_kscan_process_msgq(struct k_work *item) {
   2795c:	b530      	push	{r4, r5, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&msgq, *(uintptr_t *)&data, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
   2795e:	4c18      	ldr	r4, [pc, #96]	; (279c0 <zmk_kscan_process_msgq+0x64>)
   27960:	b08d      	sub	sp, #52	; 0x34
   27962:	2200      	movs	r2, #0
   27964:	2300      	movs	r3, #0
   27966:	a903      	add	r1, sp, #12
   27968:	4620      	mov	r0, r4
   2796a:	f019 fcb3 	bl	412d4 <z_impl_k_msgq_get>
    struct zmk_kscan_event ev;

    while (k_msgq_get(&zmk_kscan_msgq, &ev, K_NO_WAIT) == 0) {
   2796e:	b108      	cbz	r0, 27974 <zmk_kscan_process_msgq+0x18>
            (struct zmk_position_state_changed){.source = ZMK_POSITION_STATE_CHANGE_SOURCE_LOCAL,
                                                .state = pressed,
                                                .position = position,
                                                .timestamp = k_uptime_get()}));
    }
}
   27970:	b00d      	add	sp, #52	; 0x34
   27972:	bd30      	pop	{r4, r5, pc}
        bool pressed = (ev.state == ZMK_KSCAN_EVENT_STATE_PRESSED);
   27974:	9d05      	ldr	r5, [sp, #20]
        uint32_t position = zmk_matrix_transform_row_column_to_position(ev.row, ev.column);
   27976:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   2797a:	f000 f857 	bl	27a2c <zmk_matrix_transform_row_column_to_position>
        bool pressed = (ev.state == ZMK_KSCAN_EVENT_STATE_PRESSED);
   2797e:	fab5 f585 	clz	r5, r5
   27982:	096d      	lsrs	r5, r5, #5
        ZMK_EVENT_RAISE(new_zmk_position_state_changed(
   27984:	23ff      	movs	r3, #255	; 0xff
   27986:	f88d 3018 	strb.w	r3, [sp, #24]
   2798a:	9007      	str	r0, [sp, #28]
   2798c:	f88d 5020 	strb.w	r5, [sp, #32]
	return z_impl_k_uptime_ticks();
   27990:	f021 f92f 	bl	48bf2 <z_impl_k_uptime_ticks>
   27994:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   27998:	fba0 0302 	umull	r0, r3, r0, r2
   2799c:	fb02 3101 	mla	r1, r2, r1, r3
   279a0:	0bc0      	lsrs	r0, r0, #15
   279a2:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   279a6:	0bc9      	lsrs	r1, r1, #15
   279a8:	e88d 0003 	stmia.w	sp, {r0, r1}
   279ac:	ab06      	add	r3, sp, #24
   279ae:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   279b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   279b4:	f000 f87e 	bl	27ab4 <new_zmk_position_state_changed>
   279b8:	f01a fded 	bl	42596 <zmk_event_manager_raise>
                                                .timestamp = k_uptime_get()}));
   279bc:	e7d1      	b.n	27962 <zmk_kscan_process_msgq+0x6>
   279be:	bf00      	nop
   279c0:	20000b5c 	.word	0x20000b5c

000279c4 <zmk_kscan_callback>:
                               bool pressed) {
   279c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        .state = (pressed ? ZMK_KSCAN_EVENT_STATE_PRESSED : ZMK_KSCAN_EVENT_STATE_RELEASED)};
   279c6:	f083 0301 	eor.w	r3, r3, #1
    struct zmk_kscan_event ev = {
   279ca:	e9cd 1201 	strd	r1, r2, [sp, #4]
        .state = (pressed ? ZMK_KSCAN_EVENT_STATE_PRESSED : ZMK_KSCAN_EVENT_STATE_RELEASED)};
   279ce:	9303      	str	r3, [sp, #12]
	return z_impl_k_msgq_put(msgq, data, timeout);
   279d0:	2200      	movs	r2, #0
   279d2:	2300      	movs	r3, #0
   279d4:	a901      	add	r1, sp, #4
   279d6:	4804      	ldr	r0, [pc, #16]	; (279e8 <zmk_kscan_callback+0x24>)
   279d8:	f019 fc26 	bl	41228 <z_impl_k_msgq_put>
    k_work_submit(&msg_processor.work);
   279dc:	4803      	ldr	r0, [pc, #12]	; (279ec <zmk_kscan_callback+0x28>)
   279de:	f019 ff45 	bl	4186c <k_work_submit>
}
   279e2:	b005      	add	sp, #20
   279e4:	f85d fb04 	ldr.w	pc, [sp], #4
   279e8:	20000b5c 	.word	0x20000b5c
   279ec:	2000196c 	.word	0x2000196c

000279f0 <zmk_kscan_init>:

int zmk_kscan_init(char *name) {
   279f0:	b510      	push	{r4, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   279f2:	f019 f9ef 	bl	40dd4 <z_impl_device_get_binding>
    const struct device *dev = device_get_binding(name);
    if (dev == NULL) {
   279f6:	4604      	mov	r4, r0
   279f8:	b178      	cbz	r0, 27a1a <zmk_kscan_init+0x2a>
        LOG_ERR("Failed to get the KSCAN device");
        return -EINVAL;
    }

    k_work_init(&msg_processor.work, zmk_kscan_process_msgq);
   279fa:	4909      	ldr	r1, [pc, #36]	; (27a20 <zmk_kscan_init+0x30>)
   279fc:	4809      	ldr	r0, [pc, #36]	; (27a24 <zmk_kscan_init+0x34>)
   279fe:	f020 ff26 	bl	4884e <k_work_init>
					kscan_callback_t callback)
{
	const struct kscan_driver_api *api =
				(struct kscan_driver_api *)dev->api;

	return api->config(dev, callback);
   27a02:	68a3      	ldr	r3, [r4, #8]
   27a04:	4908      	ldr	r1, [pc, #32]	; (27a28 <zmk_kscan_init+0x38>)
   27a06:	681b      	ldr	r3, [r3, #0]
   27a08:	4620      	mov	r0, r4
   27a0a:	4798      	blx	r3
static inline int z_impl_kscan_enable_callback(const struct device *dev)
{
	const struct kscan_driver_api *api =
			(const struct kscan_driver_api *)dev->api;

	if (api->enable_callback == NULL) {
   27a0c:	68a3      	ldr	r3, [r4, #8]
   27a0e:	689b      	ldr	r3, [r3, #8]
   27a10:	b10b      	cbz	r3, 27a16 <zmk_kscan_init+0x26>
		return -ENOSYS;
	}

	return api->enable_callback(dev);
   27a12:	4620      	mov	r0, r4
   27a14:	4798      	blx	r3

    kscan_config(dev, zmk_kscan_callback);
    kscan_enable_callback(dev);

    return 0;
   27a16:	2000      	movs	r0, #0
}
   27a18:	bd10      	pop	{r4, pc}
        return -EINVAL;
   27a1a:	f06f 0015 	mvn.w	r0, #21
   27a1e:	e7fb      	b.n	27a18 <zmk_kscan_init+0x28>
   27a20:	0002795d 	.word	0x0002795d
   27a24:	2000196c 	.word	0x2000196c
   27a28:	000279c5 	.word	0x000279c5

00027a2c <zmk_matrix_transform_row_column_to_position>:
#endif

    matrix_index = (row * ZMK_MATRIX_COLS) + column;

#ifdef ZMK_KEYMAP_TRANSFORM_NODE
    return transform[matrix_index];
   27a2c:	230a      	movs	r3, #10
   27a2e:	fb03 1100 	mla	r1, r3, r0, r1
#else
    return matrix_index;
#endif /* ZMK_KEYMAP_TRANSFORM_NODE */
};
   27a32:	4b02      	ldr	r3, [pc, #8]	; (27a3c <zmk_matrix_transform_row_column_to_position+0x10>)
   27a34:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   27a38:	4770      	bx	lr
   27a3a:	bf00      	nop
   27a3c:	0004947c 	.word	0x0004947c

00027a40 <zmk_event_manager_handle_from>:
extern struct zmk_event_type *__event_type_end[];

extern struct zmk_event_subscription __event_subscriptions_start[];
extern struct zmk_event_subscription __event_subscriptions_end[];

int zmk_event_manager_handle_from(zmk_event_t *event, uint8_t start_index) {
   27a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ret = 0;
    uint8_t len = __event_subscriptions_end - __event_subscriptions_start;
   27a44:	4b13      	ldr	r3, [pc, #76]	; (27a94 <zmk_event_manager_handle_from+0x54>)
   27a46:	4e14      	ldr	r6, [pc, #80]	; (27a98 <zmk_event_manager_handle_from+0x58>)
   27a48:	eba3 0806 	sub.w	r8, r3, r6
int zmk_event_manager_handle_from(zmk_event_t *event, uint8_t start_index) {
   27a4c:	4607      	mov	r7, r0
    for (int i = start_index; i < len; i++) {
   27a4e:	460d      	mov	r5, r1
   27a50:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
   27a54:	f3c8 08c7 	ubfx	r8, r8, #3, #8
   27a58:	45a8      	cmp	r8, r5
   27a5a:	dc06      	bgt.n	27a6a <zmk_event_manager_handle_from+0x2a>
        switch (ret) {
        case ZMK_EV_EVENT_BUBBLE:
            continue;
        case ZMK_EV_EVENT_HANDLED:
            LOG_DBG("Listener handled the event");
            ret = 0;
   27a5c:	2400      	movs	r4, #0
            goto release;
        }
    }

release:
    k_free(event);
   27a5e:	4638      	mov	r0, r7
   27a60:	f021 fa6d 	bl	48f3e <k_free>
    return ret;
}
   27a64:	4620      	mov	r0, r4
   27a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (ev_sub->event_type != event->event) {
   27a6a:	6832      	ldr	r2, [r6, #0]
   27a6c:	683b      	ldr	r3, [r7, #0]
   27a6e:	429a      	cmp	r2, r3
   27a70:	d10b      	bne.n	27a8a <zmk_event_manager_handle_from+0x4a>
        event->last_listener_index = i;
   27a72:	713d      	strb	r5, [r7, #4]
        ret = ev_sub->listener->callback(event);
   27a74:	6873      	ldr	r3, [r6, #4]
   27a76:	4638      	mov	r0, r7
   27a78:	681b      	ldr	r3, [r3, #0]
   27a7a:	4798      	blx	r3
        switch (ret) {
   27a7c:	2801      	cmp	r0, #1
        ret = ev_sub->listener->callback(event);
   27a7e:	4604      	mov	r4, r0
        switch (ret) {
   27a80:	d0ec      	beq.n	27a5c <zmk_event_manager_handle_from+0x1c>
   27a82:	2802      	cmp	r0, #2
   27a84:	d004      	beq.n	27a90 <zmk_event_manager_handle_from+0x50>
   27a86:	2800      	cmp	r0, #0
   27a88:	d1e9      	bne.n	27a5e <zmk_event_manager_handle_from+0x1e>
    for (int i = start_index; i < len; i++) {
   27a8a:	3501      	adds	r5, #1
   27a8c:	3608      	adds	r6, #8
   27a8e:	e7e3      	b.n	27a58 <zmk_event_manager_handle_from+0x18>
        switch (ret) {
   27a90:	2400      	movs	r4, #0
   27a92:	e7e7      	b.n	27a64 <zmk_event_manager_handle_from+0x24>
   27a94:	0004b1cc 	.word	0x0004b1cc
   27a98:	0004b1b4 	.word	0x0004b1b4

00027a9c <new_zmk_activity_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/activity_state_changed.h>

   27a9c:	b510      	push	{r4, lr}
   27a9e:	4604      	mov	r4, r0
   27aa0:	200c      	movs	r0, #12
   27aa2:	f021 fa53 	bl	48f4c <k_malloc>
   27aa6:	4a02      	ldr	r2, [pc, #8]	; (27ab0 <new_zmk_activity_state_changed+0x14>)
   27aa8:	6002      	str	r2, [r0, #0]
   27aaa:	7204      	strb	r4, [r0, #8]
   27aac:	bd10      	pop	{r4, pc}
   27aae:	bf00      	nop
   27ab0:	00049514 	.word	0x00049514

00027ab4 <new_zmk_position_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/position_state_changed.h>

   27ab4:	b084      	sub	sp, #16
   27ab6:	b570      	push	{r4, r5, r6, lr}
   27ab8:	ac04      	add	r4, sp, #16
   27aba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   27abe:	2020      	movs	r0, #32
   27ac0:	f021 fa44 	bl	48f4c <k_malloc>
   27ac4:	4604      	mov	r4, r0
   27ac6:	4b08      	ldr	r3, [pc, #32]	; (27ae8 <new_zmk_position_state_changed+0x34>)
   27ac8:	f844 3b08 	str.w	r3, [r4], #8
   27acc:	ad04      	add	r5, sp, #16
   27ace:	4606      	mov	r6, r0
   27ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   27ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   27ad4:	e895 0003 	ldmia.w	r5, {r0, r1}
   27ad8:	e884 0003 	stmia.w	r4, {r0, r1}
   27adc:	4630      	mov	r0, r6
   27ade:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   27ae2:	b004      	add	sp, #16
   27ae4:	4770      	bx	lr
   27ae6:	bf00      	nop
   27ae8:	00049518 	.word	0x00049518

00027aec <as_zmk_position_state_changed>:
   27aec:	6802      	ldr	r2, [r0, #0]
   27aee:	4b03      	ldr	r3, [pc, #12]	; (27afc <as_zmk_position_state_changed+0x10>)
   27af0:	429a      	cmp	r2, r3
   27af2:	bf0c      	ite	eq
   27af4:	3008      	addeq	r0, #8
   27af6:	2000      	movne	r0, #0
   27af8:	4770      	bx	lr
   27afa:	bf00      	nop
   27afc:	00049518 	.word	0x00049518

00027b00 <new_zmk_usb_conn_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/usb_conn_state_changed.h>

   27b00:	b510      	push	{r4, lr}
   27b02:	4604      	mov	r4, r0
   27b04:	200c      	movs	r0, #12
   27b06:	f021 fa21 	bl	48f4c <k_malloc>
   27b0a:	4a02      	ldr	r2, [pc, #8]	; (27b14 <new_zmk_usb_conn_state_changed+0x14>)
   27b0c:	6002      	str	r2, [r0, #0]
   27b0e:	7204      	strb	r4, [r0, #8]
   27b10:	bd10      	pop	{r4, pc}
   27b12:	bf00      	nop
   27b14:	00049520 	.word	0x00049520

00027b18 <on_keymap_binding_pressed>:

    return 0;
}

static int on_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
   27b18:	b082      	sub	sp, #8
   27b1a:	b538      	push	{r3, r4, r5, lr}
   27b1c:	a904      	add	r1, sp, #16
   27b1e:	e881 000c 	stmia.w	r1, {r2, r3}
   27b22:	4605      	mov	r5, r0
   27b24:	4811      	ldr	r0, [pc, #68]	; (27b6c <on_keymap_binding_pressed+0x54>)
   27b26:	f019 f955 	bl	40dd4 <z_impl_device_get_binding>
   27b2a:	4604      	mov	r4, r0
    const struct device *ext_power = device_get_binding("EXT_POWER");
    if (ext_power == NULL) {
   27b2c:	b1a0      	cbz	r0, 27b58 <on_keymap_binding_pressed+0x40>
        LOG_ERR("Unable to retrieve ext_power device: %d", binding->param1);
        return -EIO;
    }

    switch (binding->param1) {
   27b2e:	686b      	ldr	r3, [r5, #4]
   27b30:	2b01      	cmp	r3, #1
   27b32:	d00c      	beq.n	27b4e <on_keymap_binding_pressed+0x36>
   27b34:	2b02      	cmp	r3, #2
   27b36:	d005      	beq.n	27b44 <on_keymap_binding_pressed+0x2c>
   27b38:	b9a3      	cbnz	r3, 27b64 <on_keymap_binding_pressed+0x4c>
    default:
        LOG_ERR("Unknown ext_power command: %d", binding->param1);
    }

    return -ENOTSUP;
}
   27b3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27b3e:	b002      	add	sp, #8
            return ext_power_disable(ext_power);
   27b40:	f01a bd41 	b.w	425c6 <ext_power_disable>
        if (ext_power_get(ext_power) > 0)
   27b44:	f01a fd46 	bl	425d4 <ext_power_get>
   27b48:	2800      	cmp	r0, #0
            return ext_power_disable(ext_power);
   27b4a:	4620      	mov	r0, r4
        if (ext_power_get(ext_power) > 0)
   27b4c:	dcf5      	bgt.n	27b3a <on_keymap_binding_pressed+0x22>
}
   27b4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27b52:	b002      	add	sp, #8
            return ext_power_enable(ext_power);
   27b54:	f01a bd30 	b.w	425b8 <ext_power_enable>
        return -EIO;
   27b58:	f06f 0004 	mvn.w	r0, #4
}
   27b5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27b60:	b002      	add	sp, #8
   27b62:	4770      	bx	lr
    switch (binding->param1) {
   27b64:	f06f 0085 	mvn.w	r0, #133	; 0x85
   27b68:	e7f8      	b.n	27b5c <on_keymap_binding_pressed+0x44>
   27b6a:	bf00      	nop
   27b6c:	0004ac19 	.word	0x0004ac19

00027b70 <on_keymap_binding_convert_central_state_dependent_params>:
                                                         struct zmk_behavior_binding_event event) {
   27b70:	b082      	sub	sp, #8
   27b72:	b510      	push	{r4, lr}
   27b74:	a902      	add	r1, sp, #8
   27b76:	e881 000c 	stmia.w	r1, {r2, r3}
   27b7a:	4604      	mov	r4, r0
   27b7c:	480b      	ldr	r0, [pc, #44]	; (27bac <on_keymap_binding_convert_central_state_dependent_params+0x3c>)
   27b7e:	f019 f929 	bl	40dd4 <z_impl_device_get_binding>
    if (ext_power == NULL) {
   27b82:	b178      	cbz	r0, 27ba4 <on_keymap_binding_convert_central_state_dependent_params+0x34>
    if (binding->param1 == EXT_POWER_TOGGLE_CMD) {
   27b84:	6863      	ldr	r3, [r4, #4]
   27b86:	2b02      	cmp	r3, #2
   27b88:	d004      	beq.n	27b94 <on_keymap_binding_convert_central_state_dependent_params+0x24>
    return 0;
   27b8a:	2000      	movs	r0, #0
}
   27b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27b90:	b002      	add	sp, #8
   27b92:	4770      	bx	lr
        binding->param1 = ext_power_get(ext_power) > 0 ? EXT_POWER_OFF_CMD : EXT_POWER_ON_CMD;
   27b94:	f01a fd1e 	bl	425d4 <ext_power_get>
   27b98:	2800      	cmp	r0, #0
   27b9a:	bfcc      	ite	gt
   27b9c:	2000      	movgt	r0, #0
   27b9e:	2001      	movle	r0, #1
   27ba0:	6060      	str	r0, [r4, #4]
   27ba2:	e7f2      	b.n	27b8a <on_keymap_binding_convert_central_state_dependent_params+0x1a>
        return -EIO;
   27ba4:	f06f 0004 	mvn.w	r0, #4
   27ba8:	e7f0      	b.n	27b8c <on_keymap_binding_convert_central_state_dependent_params+0x1c>
   27baa:	bf00      	nop
   27bac:	0004ac19 	.word	0x0004ac19

00027bb0 <new_zmk_battery_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/battery_state_changed.h>

   27bb0:	b510      	push	{r4, lr}
   27bb2:	4604      	mov	r4, r0
   27bb4:	200c      	movs	r0, #12
   27bb6:	f021 f9c9 	bl	48f4c <k_malloc>
   27bba:	4a02      	ldr	r2, [pc, #8]	; (27bc4 <new_zmk_battery_state_changed+0x14>)
   27bbc:	6002      	str	r2, [r0, #0]
   27bbe:	7204      	strb	r4, [r0, #8]
   27bc0:	bd10      	pop	{r4, pc}
   27bc2:	bf00      	nop
   27bc4:	00049554 	.word	0x00049554

00027bc8 <zmk_battery_timer>:
    }
}

K_WORK_DEFINE(battery_work, zmk_battery_work);

static void zmk_battery_timer(struct k_timer *timer) { k_work_submit(&battery_work); }
   27bc8:	4801      	ldr	r0, [pc, #4]	; (27bd0 <zmk_battery_timer+0x8>)
   27bca:	f019 be4f 	b.w	4186c <k_work_submit>
   27bce:	bf00      	nop
   27bd0:	20000270 	.word	0x20000270

00027bd4 <zmk_battery_update.constprop.0>:
static int zmk_battery_update(const struct device *battery) {
   27bd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
						  enum sensor_channel type)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, type);
   27bd6:	4c0f      	ldr	r4, [pc, #60]	; (27c14 <zmk_battery_update.constprop.0+0x40>)
   27bd8:	68a5      	ldr	r5, [r4, #8]
   27bda:	212c      	movs	r1, #44	; 0x2c
   27bdc:	68eb      	ldr	r3, [r5, #12]
   27bde:	4620      	mov	r0, r4
   27be0:	4798      	blx	r3
    if (rc != 0) {
   27be2:	b9a0      	cbnz	r0, 27c0e <zmk_battery_update.constprop.0+0x3a>
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
   27be4:	212c      	movs	r1, #44	; 0x2c
   27be6:	692b      	ldr	r3, [r5, #16]
   27be8:	466a      	mov	r2, sp
   27bea:	4620      	mov	r0, r4
   27bec:	4798      	blx	r3
    if (rc != 0) {
   27bee:	b970      	cbnz	r0, 27c0e <zmk_battery_update.constprop.0+0x3a>
    if (last_state_of_charge != state_of_charge.val1) {
   27bf0:	4c09      	ldr	r4, [pc, #36]	; (27c18 <zmk_battery_update.constprop.0+0x44>)
   27bf2:	9b00      	ldr	r3, [sp, #0]
   27bf4:	7822      	ldrb	r2, [r4, #0]
   27bf6:	429a      	cmp	r2, r3
   27bf8:	d009      	beq.n	27c0e <zmk_battery_update.constprop.0+0x3a>
        last_state_of_charge = state_of_charge.val1;
   27bfa:	b2d8      	uxtb	r0, r3
   27bfc:	7020      	strb	r0, [r4, #0]
        rc = bt_bas_set_battery_level(last_state_of_charge);
   27bfe:	f000 fd21 	bl	28644 <bt_bas_set_battery_level>
        if (rc != 0) {
   27c02:	b920      	cbnz	r0, 27c0e <zmk_battery_update.constprop.0+0x3a>
        rc = ZMK_EVENT_RAISE(new_zmk_battery_state_changed(
   27c04:	7820      	ldrb	r0, [r4, #0]
   27c06:	f7ff ffd3 	bl	27bb0 <new_zmk_battery_state_changed>
   27c0a:	f01a fcc4 	bl	42596 <zmk_event_manager_raise>
}
   27c0e:	b003      	add	sp, #12
   27c10:	bd30      	pop	{r4, r5, pc}
   27c12:	bf00      	nop
   27c14:	000490c4 	.word	0x000490c4
   27c18:	20003b35 	.word	0x20003b35

00027c1c <zmk_battery_init>:

K_TIMER_DEFINE(battery_timer, zmk_battery_timer, NULL);

static int zmk_battery_init(const struct device *_arg) {
   27c1c:	b513      	push	{r0, r1, r4, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   27c1e:	480b      	ldr	r0, [pc, #44]	; (27c4c <zmk_battery_init+0x30>)
   27c20:	f020 fbe2 	bl	483e8 <z_device_is_ready>
    }

    LOG_WRN("Finding battery device labeled BATTERY is deprecated. Use zmk,battery chosen node.");
#endif

    if (!device_is_ready(battery)) {
   27c24:	b170      	cbz	r0, 27c44 <zmk_battery_init+0x28>
        LOG_ERR("Battery device \"%s\" is not ready", battery->name);
        return -ENODEV;
    }

    int rc = zmk_battery_update(battery);
   27c26:	f7ff ffd5 	bl	27bd4 <zmk_battery_update.constprop.0>

    if (rc != 0) {
   27c2a:	4604      	mov	r4, r0
   27c2c:	b938      	cbnz	r0, 27c3e <zmk_battery_init+0x22>
        LOG_DBG("Failed to update battery value: %d.", rc);
        return rc;
    }

    k_timer_start(&battery_timer, K_MINUTES(1), K_SECONDS(CONFIG_ZMK_BATTERY_REPORT_INTERVAL));
   27c2e:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   27c32:	2300      	movs	r3, #0
	z_impl_k_timer_start(timer, duration, period);
   27c34:	4806      	ldr	r0, [pc, #24]	; (27c50 <zmk_battery_init+0x34>)
   27c36:	e9cd 2300 	strd	r2, r3, [sp]
   27c3a:	f01a fbb5 	bl	423a8 <z_impl_k_timer_start>

    return 0;
}
   27c3e:	4620      	mov	r0, r4
   27c40:	b002      	add	sp, #8
   27c42:	bd10      	pop	{r4, pc}
        return -ENODEV;
   27c44:	f06f 0412 	mvn.w	r4, #18
   27c48:	e7f9      	b.n	27c3e <zmk_battery_init+0x22>
   27c4a:	bf00      	nop
   27c4c:	000490c4 	.word	0x000490c4
   27c50:	20000a48 	.word	0x20000a48

00027c54 <new_zmk_split_peripheral_status_changed>:
 */

#include <kernel.h>
#include <zmk/events/split_peripheral_status_changed.h>

   27c54:	b510      	push	{r4, lr}
   27c56:	4604      	mov	r4, r0
   27c58:	200c      	movs	r0, #12
   27c5a:	f021 f977 	bl	48f4c <k_malloc>
   27c5e:	4a02      	ldr	r2, [pc, #8]	; (27c68 <new_zmk_split_peripheral_status_changed+0x14>)
   27c60:	6002      	str	r2, [r0, #0]
   27c62:	7204      	strb	r4, [r0, #8]
   27c64:	bd10      	pop	{r4, pc}
   27c66:	bf00      	nop
   27c68:	00049558 	.word	0x00049558

00027c6c <split_svc_pos_state>:
static uint8_t position_state[POS_STATE_LEN];

static struct zmk_split_run_behavior_payload behavior_run_payload;

static ssize_t split_svc_pos_state(struct bt_conn *conn, const struct bt_gatt_attr *attrs,
                                   void *buf, uint16_t len, uint16_t offset) {
   27c6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return bt_gatt_attr_read(conn, attrs, buf, len, offset, &position_state,
   27c6e:	2410      	movs	r4, #16
   27c70:	9402      	str	r4, [sp, #8]
   27c72:	4c04      	ldr	r4, [pc, #16]	; (27c84 <split_svc_pos_state+0x18>)
   27c74:	9401      	str	r4, [sp, #4]
   27c76:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   27c7a:	9400      	str	r4, [sp, #0]
   27c7c:	f01f f873 	bl	46d66 <bt_gatt_attr_read>
                             sizeof(position_state));
}
   27c80:	b004      	add	sp, #16
   27c82:	bd10      	pop	{r4, pc}
   27c84:	20003b49 	.word	0x20003b49

00027c88 <service_init>:
int zmk_split_bt_position_released(uint8_t position) {
    WRITE_BIT(position_state[position / 8], position % 8, false);
    return send_position_state();
}

int service_init(const struct device *_arg) {
   27c88:	b507      	push	{r0, r1, r2, lr}
    static const struct k_work_queue_config queue_config = {
        .name = "Split Peripheral Notification Queue"};
    k_work_queue_start(&service_work_q, service_q_stack, K_THREAD_STACK_SIZEOF(service_q_stack),
   27c8a:	4b06      	ldr	r3, [pc, #24]	; (27ca4 <service_init+0x1c>)
   27c8c:	9300      	str	r3, [sp, #0]
   27c8e:	4906      	ldr	r1, [pc, #24]	; (27ca8 <service_init+0x20>)
   27c90:	4806      	ldr	r0, [pc, #24]	; (27cac <service_init+0x24>)
   27c92:	2305      	movs	r3, #5
   27c94:	f44f 7224 	mov.w	r2, #656	; 0x290
   27c98:	f019 fdee 	bl	41878 <k_work_queue_start>
                       CONFIG_ZMK_SPLIT_BLE_PERIPHERAL_PRIORITY, &queue_config);

    return 0;
}
   27c9c:	2000      	movs	r0, #0
   27c9e:	b003      	add	sp, #12
   27ca0:	f85d fb04 	ldr.w	pc, [sp], #4
   27ca4:	00049560 	.word	0x00049560
   27ca8:	20003c30 	.word	0x20003c30
   27cac:	20000d88 	.word	0x20000d88

00027cb0 <send_position_state_callback>:
void send_position_state_callback(struct k_work *work) {
   27cb0:	b570      	push	{r4, r5, r6, lr}
	return z_impl_k_msgq_get(msgq, data, timeout);
   27cb2:	4d0f      	ldr	r5, [pc, #60]	; (27cf0 <send_position_state_callback+0x40>)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));

	params.attr = attr;
   27cb4:	4e0f      	ldr	r6, [pc, #60]	; (27cf4 <send_position_state_callback+0x44>)
   27cb6:	b08a      	sub	sp, #40	; 0x28
   27cb8:	2200      	movs	r2, #0
   27cba:	2300      	movs	r3, #0
   27cbc:	4669      	mov	r1, sp
   27cbe:	4628      	mov	r0, r5
   27cc0:	f019 fb08 	bl	412d4 <z_impl_k_msgq_get>
    while (k_msgq_get(&position_state_msgq, &state, K_NO_WAIT) == 0) {
   27cc4:	4604      	mov	r4, r0
   27cc6:	b108      	cbz	r0, 27ccc <send_position_state_callback+0x1c>
};
   27cc8:	b00a      	add	sp, #40	; 0x28
   27cca:	bd70      	pop	{r4, r5, r6, pc}
	memset(&params, 0, sizeof(params));
   27ccc:	4621      	mov	r1, r4
   27cce:	2218      	movs	r2, #24
   27cd0:	a804      	add	r0, sp, #16
   27cd2:	f01c ff01 	bl	44ad8 <memset>
	params.data = data;
	params.len = len;
   27cd6:	2310      	movs	r3, #16

	return bt_gatt_notify_cb(conn, &params);
   27cd8:	eb0d 0103 	add.w	r1, sp, r3
   27cdc:	4620      	mov	r0, r4
	params.attr = attr;
   27cde:	9605      	str	r6, [sp, #20]
	params.data = data;
   27ce0:	f8cd d018 	str.w	sp, [sp, #24]
	params.len = len;
   27ce4:	f8ad 301c 	strh.w	r3, [sp, #28]
	return bt_gatt_notify_cb(conn, &params);
   27ce8:	f006 fbce 	bl	2e488 <bt_gatt_notify_cb>
   27cec:	e7e4      	b.n	27cb8 <send_position_state_callback+0x8>
   27cee:	bf00      	nop
   27cf0:	20000b2c 	.word	0x20000b2c
   27cf4:	0004957c 	.word	0x0004957c

00027cf8 <send_position_state>:
int send_position_state() {
   27cf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return z_impl_k_msgq_put(msgq, data, timeout);
   27cfa:	490e      	ldr	r1, [pc, #56]	; (27d34 <send_position_state+0x3c>)
   27cfc:	480e      	ldr	r0, [pc, #56]	; (27d38 <send_position_state+0x40>)
   27cfe:	f640 42cd 	movw	r2, #3277	; 0xccd
   27d02:	2300      	movs	r3, #0
   27d04:	f019 fa90 	bl	41228 <z_impl_k_msgq_put>
    if (err) {
   27d08:	4604      	mov	r4, r0
   27d0a:	b170      	cbz	r0, 27d2a <send_position_state+0x32>
        switch (err) {
   27d0c:	f110 0f0b 	cmn.w	r0, #11
   27d10:	d108      	bne.n	27d24 <send_position_state+0x2c>
	return z_impl_k_msgq_get(msgq, data, timeout);
   27d12:	2200      	movs	r2, #0
   27d14:	2300      	movs	r3, #0
   27d16:	4669      	mov	r1, sp
   27d18:	4807      	ldr	r0, [pc, #28]	; (27d38 <send_position_state+0x40>)
   27d1a:	f019 fadb 	bl	412d4 <z_impl_k_msgq_get>
            return send_position_state();
   27d1e:	f7ff ffeb 	bl	27cf8 <send_position_state>
   27d22:	4604      	mov	r4, r0
}
   27d24:	4620      	mov	r0, r4
   27d26:	b004      	add	sp, #16
   27d28:	bd10      	pop	{r4, pc}
    k_work_submit_to_queue(&service_work_q, &service_position_notify_work);
   27d2a:	4904      	ldr	r1, [pc, #16]	; (27d3c <send_position_state+0x44>)
   27d2c:	4804      	ldr	r0, [pc, #16]	; (27d40 <send_position_state+0x48>)
   27d2e:	f020 fd97 	bl	48860 <k_work_submit_to_queue>
    return 0;
   27d32:	e7f7      	b.n	27d24 <send_position_state+0x2c>
   27d34:	20003b49 	.word	0x20003b49
   27d38:	20000b2c 	.word	0x20000b2c
   27d3c:	20000280 	.word	0x20000280
   27d40:	20000d88 	.word	0x20000d88

00027d44 <zmk_split_bt_position_pressed>:
    WRITE_BIT(position_state[position / 8], position % 8, true);
   27d44:	08c2      	lsrs	r2, r0, #3
   27d46:	4905      	ldr	r1, [pc, #20]	; (27d5c <zmk_split_bt_position_pressed+0x18>)
   27d48:	f000 0007 	and.w	r0, r0, #7
   27d4c:	2301      	movs	r3, #1
   27d4e:	4083      	lsls	r3, r0
   27d50:	5c88      	ldrb	r0, [r1, r2]
   27d52:	4303      	orrs	r3, r0
   27d54:	548b      	strb	r3, [r1, r2]
    return send_position_state();
   27d56:	f7ff bfcf 	b.w	27cf8 <send_position_state>
   27d5a:	bf00      	nop
   27d5c:	20003b49 	.word	0x20003b49

00027d60 <zmk_split_bt_position_released>:
int zmk_split_bt_position_released(uint8_t position) {
   27d60:	b410      	push	{r4}
    WRITE_BIT(position_state[position / 8], position % 8, false);
   27d62:	08c1      	lsrs	r1, r0, #3
   27d64:	4c05      	ldr	r4, [pc, #20]	; (27d7c <zmk_split_bt_position_released+0x1c>)
   27d66:	f000 0007 	and.w	r0, r0, #7
   27d6a:	5c63      	ldrb	r3, [r4, r1]
   27d6c:	2201      	movs	r2, #1
   27d6e:	4082      	lsls	r2, r0
   27d70:	ea23 0302 	bic.w	r3, r3, r2
   27d74:	5463      	strb	r3, [r4, r1]
}
   27d76:	bc10      	pop	{r4}
    return send_position_state();
   27d78:	f7ff bfbe 	b.w	27cf8 <send_position_state>
   27d7c:	20003b49 	.word	0x20003b49

00027d80 <connected>:

static int start_advertising() {
    return bt_le_adv_start(BT_LE_ADV_CONN, zmk_ble_ad, ARRAY_SIZE(zmk_ble_ad), NULL, 0);
};

static void connected(struct bt_conn *conn, uint8_t err) {
   27d80:	b508      	push	{r3, lr}
    is_connected = (err == 0);
   27d82:	fab1 f081 	clz	r0, r1
   27d86:	4b04      	ldr	r3, [pc, #16]	; (27d98 <connected+0x18>)
   27d88:	0940      	lsrs	r0, r0, #5
   27d8a:	7018      	strb	r0, [r3, #0]

    ZMK_EVENT_RAISE(new_zmk_split_peripheral_status_changed(
   27d8c:	f7ff ff62 	bl	27c54 <new_zmk_split_peripheral_status_changed>
        (struct zmk_split_peripheral_status_changed){.connected = is_connected}));
}
   27d90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ZMK_EVENT_RAISE(new_zmk_split_peripheral_status_changed(
   27d94:	f01a bbff 	b.w	42596 <zmk_event_manager_raise>
   27d98:	20003b59 	.word	0x20003b59

00027d9c <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   27d9c:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   27d9e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   27da0:	b08a      	sub	sp, #40	; 0x28
   27da2:	4604      	mov	r4, r0
   27da4:	460e      	mov	r6, r1
   27da6:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   27da8:	2b03      	cmp	r3, #3
   27daa:	d820      	bhi.n	27dee <bt_addr_le_to_str.constprop.0.isra.0+0x52>
   27dac:	e8df f003 	tbb	[pc, r3]
   27db0:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   27db4:	4911      	ldr	r1, [pc, #68]	; (27dfc <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   27db6:	4628      	mov	r0, r5
   27db8:	f01c fe42 	bl	44a40 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   27dbc:	9505      	str	r5, [sp, #20]
   27dbe:	7863      	ldrb	r3, [r4, #1]
   27dc0:	9304      	str	r3, [sp, #16]
   27dc2:	78a3      	ldrb	r3, [r4, #2]
   27dc4:	9303      	str	r3, [sp, #12]
   27dc6:	78e3      	ldrb	r3, [r4, #3]
   27dc8:	9302      	str	r3, [sp, #8]
   27dca:	7923      	ldrb	r3, [r4, #4]
   27dcc:	9301      	str	r3, [sp, #4]
   27dce:	7963      	ldrb	r3, [r4, #5]
   27dd0:	9300      	str	r3, [sp, #0]
   27dd2:	79a3      	ldrb	r3, [r4, #6]
   27dd4:	4a0a      	ldr	r2, [pc, #40]	; (27e00 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
   27dd6:	211e      	movs	r1, #30
   27dd8:	4630      	mov	r0, r6
   27dda:	f01a fd80 	bl	428de <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   27dde:	b00a      	add	sp, #40	; 0x28
   27de0:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   27de2:	4908      	ldr	r1, [pc, #32]	; (27e04 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
   27de4:	e7e7      	b.n	27db6 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
   27de6:	4908      	ldr	r1, [pc, #32]	; (27e08 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
   27de8:	e7e5      	b.n	27db6 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
   27dea:	4908      	ldr	r1, [pc, #32]	; (27e0c <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
   27dec:	e7e3      	b.n	27db6 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   27dee:	4a08      	ldr	r2, [pc, #32]	; (27e10 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
   27df0:	210a      	movs	r1, #10
   27df2:	4628      	mov	r0, r5
   27df4:	f01a fd73 	bl	428de <snprintk>
		break;
   27df8:	e7e0      	b.n	27dbc <bt_addr_le_to_str.constprop.0.isra.0+0x20>
   27dfa:	bf00      	nop
   27dfc:	0004ac8e 	.word	0x0004ac8e
   27e00:	0004acb7 	.word	0x0004acb7
   27e04:	0004ac95 	.word	0x0004ac95
   27e08:	0004ac9c 	.word	0x0004ac9c
   27e0c:	0004aca6 	.word	0x0004aca6
   27e10:	0004acb0 	.word	0x0004acb0

00027e14 <disconnected>:

static void disconnected(struct bt_conn *conn, uint8_t reason) {
   27e14:	b500      	push	{lr}
   27e16:	b089      	sub	sp, #36	; 0x24
    char addr[BT_ADDR_LE_STR_LEN];

    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   27e18:	f01d feb1 	bl	45b7e <bt_conn_get_dst>
   27e1c:	4669      	mov	r1, sp
   27e1e:	f7ff ffbd 	bl	27d9c <bt_addr_le_to_str.constprop.0.isra.0>

    LOG_DBG("Disconnected from %s (reason 0x%02x)", log_strdup(addr), reason);

    is_connected = false;
   27e22:	4b05      	ldr	r3, [pc, #20]	; (27e38 <disconnected+0x24>)
   27e24:	2000      	movs	r0, #0
   27e26:	7018      	strb	r0, [r3, #0]

    ZMK_EVENT_RAISE(new_zmk_split_peripheral_status_changed(
   27e28:	f7ff ff14 	bl	27c54 <new_zmk_split_peripheral_status_changed>
   27e2c:	f01a fbb3 	bl	42596 <zmk_event_manager_raise>
        (struct zmk_split_peripheral_status_changed){.connected = is_connected}));
}
   27e30:	b009      	add	sp, #36	; 0x24
   27e32:	f85d fb04 	ldr.w	pc, [sp], #4
   27e36:	bf00      	nop
   27e38:	20003b59 	.word	0x20003b59

00027e3c <zmk_peripheral_ble_init>:
    .le_param_updated = le_param_updated,
};

bool zmk_split_bt_peripheral_is_connected() { return is_connected; }

static int zmk_peripheral_ble_init(const struct device *_arg) {
   27e3c:	b570      	push	{r4, r5, r6, lr}
    int err = bt_enable(NULL);
   27e3e:	2000      	movs	r0, #0
static int zmk_peripheral_ble_init(const struct device *_arg) {
   27e40:	b088      	sub	sp, #32
    int err = bt_enable(NULL);
   27e42:	f003 fc37 	bl	2b6b4 <bt_enable>

    if (err) {
   27e46:	4606      	mov	r6, r0
   27e48:	b9b8      	cbnz	r0, 27e7a <zmk_peripheral_ble_init+0x3e>
        LOG_ERR("BLUETOOTH FAILED (%d)", err);
        return err;
    }

#if IS_ENABLED(CONFIG_SETTINGS)
    settings_subsys_init();
   27e4a:	f001 fe05 	bl	29a58 <settings_subsys_init>

    settings_load_subtree("ble");
   27e4e:	480c      	ldr	r0, [pc, #48]	; (27e80 <zmk_peripheral_ble_init+0x44>)
    return bt_le_adv_start(BT_LE_ADV_CONN, zmk_ble_ad, ARRAY_SIZE(zmk_ble_ad), NULL, 0);
   27e50:	4d0c      	ldr	r5, [pc, #48]	; (27e84 <zmk_peripheral_ble_init+0x48>)
    settings_load_subtree("ble");
   27e52:	f001 fd27 	bl	298a4 <settings_load_subtree>
    settings_load_subtree("bt");
   27e56:	480c      	ldr	r0, [pc, #48]	; (27e88 <zmk_peripheral_ble_init+0x4c>)
   27e58:	f001 fd24 	bl	298a4 <settings_load_subtree>
    LOG_WRN("Clearing all existing BLE bond information from the keyboard");

    bt_unpair(BT_ID_DEFAULT, NULL);
#endif

    bt_conn_cb_register(&conn_callbacks);
   27e5c:	480b      	ldr	r0, [pc, #44]	; (27e8c <zmk_peripheral_ble_init+0x50>)
   27e5e:	f004 fe2b 	bl	2cab8 <bt_conn_cb_register>
    return bt_le_adv_start(BT_LE_ADV_CONN, zmk_ble_ad, ARRAY_SIZE(zmk_ble_ad), NULL, 0);
   27e62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   27e64:	ac03      	add	r4, sp, #12
   27e66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   27e68:	682b      	ldr	r3, [r5, #0]
   27e6a:	6023      	str	r3, [r4, #0]
   27e6c:	4908      	ldr	r1, [pc, #32]	; (27e90 <zmk_peripheral_ble_init+0x54>)
   27e6e:	9600      	str	r6, [sp, #0]
   27e70:	4633      	mov	r3, r6
   27e72:	2203      	movs	r2, #3
   27e74:	a803      	add	r0, sp, #12
   27e76:	f004 f91d 	bl	2c0b4 <bt_le_adv_start>

    start_advertising();

    return 0;
}
   27e7a:	4630      	mov	r0, r6
   27e7c:	b008      	add	sp, #32
   27e7e:	bd70      	pop	{r4, r5, r6, pc}
   27e80:	0004acda 	.word	0x0004acda
   27e84:	000493d0 	.word	0x000493d0
   27e88:	0004acde 	.word	0x0004acde
   27e8c:	200002b8 	.word	0x200002b8
   27e90:	000495f4 	.word	0x000495f4

00027e94 <usb_status_cb>:
        return ZMK_USB_CONN_POWERED;
    }
}

void usb_status_cb(enum usb_dc_status_code status, const uint8_t *params) {
    usb_status = status;
   27e94:	4b02      	ldr	r3, [pc, #8]	; (27ea0 <usb_status_cb+0xc>)
   27e96:	7018      	strb	r0, [r3, #0]
    k_work_submit(&usb_status_notifier_work);
   27e98:	4802      	ldr	r0, [pc, #8]	; (27ea4 <usb_status_cb+0x10>)
   27e9a:	f019 bce7 	b.w	4186c <k_work_submit>
   27e9e:	bf00      	nop
   27ea0:	200009d9 	.word	0x200009d9
   27ea4:	200002d8 	.word	0x200002d8

00027ea8 <zmk_usb_init>:
};

static int zmk_usb_init(const struct device *_arg) {
   27ea8:	b508      	push	{r3, lr}
    int usb_enable_ret;

    usb_enable_ret = usb_enable(usb_status_cb);
   27eaa:	4804      	ldr	r0, [pc, #16]	; (27ebc <zmk_usb_init+0x14>)
   27eac:	f001 f9e0 	bl	29270 <usb_enable>

    if (usb_enable_ret != 0) {
        LOG_ERR("Unable to enable USB");
        return -EINVAL;
   27eb0:	2800      	cmp	r0, #0
    }

    return 0;
}
   27eb2:	bf18      	it	ne
   27eb4:	f06f 0015 	mvnne.w	r0, #21
   27eb8:	bd08      	pop	{r3, pc}
   27eba:	bf00      	nop
   27ebc:	00027e95 	.word	0x00027e95

00027ec0 <zmk_usb_get_conn_state>:
    switch (usb_status) {
   27ec0:	4b08      	ldr	r3, [pc, #32]	; (27ee4 <zmk_usb_get_conn_state+0x24>)
   27ec2:	781b      	ldrb	r3, [r3, #0]
   27ec4:	3b03      	subs	r3, #3
   27ec6:	2b08      	cmp	r3, #8
   27ec8:	d808      	bhi.n	27edc <zmk_usb_get_conn_state+0x1c>
   27eca:	e8df f003 	tbb	[pc, r3]
   27ece:	0905      	.short	0x0905
   27ed0:	07070505 	.word	0x07070505
   27ed4:	0707      	.short	0x0707
   27ed6:	09          	.byte	0x09
   27ed7:	00          	.byte	0x00
        return ZMK_USB_CONN_HID;
   27ed8:	2002      	movs	r0, #2
   27eda:	4770      	bx	lr
        return ZMK_USB_CONN_POWERED;
   27edc:	2001      	movs	r0, #1
   27ede:	4770      	bx	lr
    switch (usb_status) {
   27ee0:	2000      	movs	r0, #0
}
   27ee2:	4770      	bx	lr
   27ee4:	200009d9 	.word	0x200009d9

00027ee8 <main>:
#define ZMK_KSCAN_DEV DT_LABEL(ZMK_MATRIX_NODE_ID)

void main(void) {
    LOG_INF("Welcome to ZMK!\n");

    if (zmk_kscan_init(ZMK_KSCAN_DEV) != 0) {
   27ee8:	4801      	ldr	r0, [pc, #4]	; (27ef0 <main+0x8>)
   27eea:	f7ff bd81 	b.w	279f0 <zmk_kscan_init>
   27eee:	bf00      	nop
   27ef0:	0004ace1 	.word	0x0004ace1

00027ef4 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   27ef4:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   27ef6:	4c09      	ldr	r4, [pc, #36]	; (27f1c <crc8_ccitt+0x28>)
   27ef8:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   27efa:	4291      	cmp	r1, r2
   27efc:	d100      	bne.n	27f00 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   27efe:	bd10      	pop	{r4, pc}
		val ^= p[i];
   27f00:	f811 3b01 	ldrb.w	r3, [r1], #1
   27f04:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   27f06:	0903      	lsrs	r3, r0, #4
   27f08:	0100      	lsls	r0, r0, #4
   27f0a:	5ce3      	ldrb	r3, [r4, r3]
   27f0c:	b2c0      	uxtb	r0, r0
   27f0e:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   27f10:	0918      	lsrs	r0, r3, #4
   27f12:	011b      	lsls	r3, r3, #4
   27f14:	5c20      	ldrb	r0, [r4, r0]
   27f16:	b2db      	uxtb	r3, r3
   27f18:	4058      	eors	r0, r3
	for (i = 0; i < cnt; i++) {
   27f1a:	e7ee      	b.n	27efa <crc8_ccitt+0x6>
   27f1c:	0004ace7 	.word	0x0004ace7

00027f20 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   27f20:	680b      	ldr	r3, [r1, #0]
   27f22:	3301      	adds	r3, #1
   27f24:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   27f26:	4b01      	ldr	r3, [pc, #4]	; (27f2c <char_out+0xc>)
   27f28:	681b      	ldr	r3, [r3, #0]
   27f2a:	4718      	bx	r3
   27f2c:	200002e8 	.word	0x200002e8

00027f30 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   27f30:	b507      	push	{r0, r1, r2, lr}
   27f32:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
   27f34:	2100      	movs	r1, #0
{
   27f36:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
   27f38:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
   27f3a:	4803      	ldr	r0, [pc, #12]	; (27f48 <vprintk+0x18>)
   27f3c:	a901      	add	r1, sp, #4
   27f3e:	f000 f927 	bl	28190 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   27f42:	b003      	add	sp, #12
   27f44:	f85d fb04 	ldr.w	pc, [sp], #4
   27f48:	00027f21 	.word	0x00027f21

00027f4c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   27f4c:	b530      	push	{r4, r5, lr}
   27f4e:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   27f50:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   27f54:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   27f56:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
   27f58:	a901      	add	r1, sp, #4
   27f5a:	4805      	ldr	r0, [pc, #20]	; (27f70 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   27f5c:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   27f5e:	f000 f917 	bl	28190 <cbvprintf>

	if (ctx.count < ctx.max) {
   27f62:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   27f66:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   27f68:	bfb8      	it	lt
   27f6a:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   27f6c:	b005      	add	sp, #20
   27f6e:	bd30      	pop	{r4, r5, pc}
   27f70:	0004289f 	.word	0x0004289f

00027f74 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   27f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   27f78:	8b05      	ldrh	r5, [r0, #24]
{
   27f7a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   27f7c:	0728      	lsls	r0, r5, #28
{
   27f7e:	4690      	mov	r8, r2
	if (processing) {
   27f80:	d411      	bmi.n	27fa6 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   27f82:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   27f84:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   27f88:	f040 80cd 	bne.w	28126 <process_event+0x1b2>
			evt = process_recheck(mgr);
   27f8c:	4620      	mov	r0, r4
   27f8e:	f01a fcce 	bl	4292e <process_recheck>
		}

		if (evt == EVT_NOP) {
   27f92:	b178      	cbz	r0, 27fb4 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   27f94:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   27f96:	8b21      	ldrh	r1, [r4, #24]
   27f98:	2804      	cmp	r0, #4
   27f9a:	d811      	bhi.n	27fc0 <process_event+0x4c>
   27f9c:	e8df f000 	tbb	[pc, r0]
   27fa0:	856d10c3 	.word	0x856d10c3
   27fa4:	95          	.byte	0x95
   27fa5:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
   27fa6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   27fa8:	bf0c      	ite	eq
   27faa:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   27fae:	f045 0520 	orrne.w	r5, r5, #32
   27fb2:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   27fb4:	f388 8811 	msr	BASEPRI, r8
   27fb8:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   27fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   27fc0:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   27fc4:	45aa      	cmp	sl, r5
   27fc6:	f000 80a6 	beq.w	28116 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
   27fca:	2700      	movs	r7, #0
   27fcc:	46b9      	mov	r9, r7
   27fce:	463e      	mov	r6, r7
   27fd0:	68a3      	ldr	r3, [r4, #8]
   27fd2:	2b00      	cmp	r3, #0
   27fd4:	f000 80bd 	beq.w	28152 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   27fd8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   27fdc:	8321      	strh	r1, [r4, #24]
   27fde:	f388 8811 	msr	BASEPRI, r8
   27fe2:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   27fe6:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   27fe8:	2900      	cmp	r1, #0
   27fea:	f000 80bb 	beq.w	28164 <process_event+0x1f0>
	return node->next;
   27fee:	680d      	ldr	r5, [r1, #0]
   27ff0:	2900      	cmp	r1, #0
   27ff2:	f000 80b7 	beq.w	28164 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
   27ff6:	f8d1 8004 	ldr.w	r8, [r1, #4]
   27ffa:	4633      	mov	r3, r6
   27ffc:	4652      	mov	r2, sl
   27ffe:	4620      	mov	r0, r4
   28000:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   28002:	2d00      	cmp	r5, #0
   28004:	d076      	beq.n	280f4 <process_event+0x180>
   28006:	682b      	ldr	r3, [r5, #0]
   28008:	4629      	mov	r1, r5
   2800a:	461d      	mov	r5, r3
   2800c:	e7f0      	b.n	27ff0 <process_event+0x7c>
   2800e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   28012:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   28014:	2a01      	cmp	r2, #1
   28016:	d81b      	bhi.n	28050 <process_event+0xdc>
	list->head = NULL;
   28018:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2801a:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   2801e:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   28020:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   28022:	b289      	uxth	r1, r1
	list->tail = NULL;
   28024:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   28028:	d109      	bne.n	2803e <process_event+0xca>
   2802a:	463b      	mov	r3, r7
   2802c:	e003      	b.n	28036 <process_event+0xc2>
				mgr->refs += 1U;
   2802e:	8b62      	ldrh	r2, [r4, #26]
	return node->next;
   28030:	681b      	ldr	r3, [r3, #0]
   28032:	3201      	adds	r2, #1
   28034:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   28036:	2b00      	cmp	r3, #0
   28038:	d1f9      	bne.n	2802e <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2803a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   2803e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   28040:	4620      	mov	r0, r4
   28042:	f01a fc74 	bl	4292e <process_recheck>
   28046:	2800      	cmp	r0, #0
   28048:	d07b      	beq.n	28142 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   2804a:	f041 0120 	orr.w	r1, r1, #32
   2804e:	e077      	b.n	28140 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
   28050:	2b04      	cmp	r3, #4
   28052:	d10a      	bne.n	2806a <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   28054:	f021 0107 	bic.w	r1, r1, #7
   28058:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   2805a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   2805c:	4620      	mov	r0, r4
   2805e:	f01a fc66 	bl	4292e <process_recheck>
   28062:	b110      	cbz	r0, 2806a <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   28064:	f041 0120 	orr.w	r1, r1, #32
   28068:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   2806a:	8b21      	ldrh	r1, [r4, #24]
   2806c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   28070:	45aa      	cmp	sl, r5
   28072:	d050      	beq.n	28116 <process_event+0x1a2>
   28074:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
   28076:	46b9      	mov	r9, r7
   28078:	e7aa      	b.n	27fd0 <process_event+0x5c>
			transit = mgr->transitions->start;
   2807a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2807c:	f021 0107 	bic.w	r1, r1, #7
   28080:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   28084:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
   28086:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
   2808a:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   2808c:	d12d      	bne.n	280ea <process_event+0x176>
		    || (transit != NULL)) {
   2808e:	f1b9 0f00 	cmp.w	r9, #0
   28092:	d040      	beq.n	28116 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   28094:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   28098:	8321      	strh	r1, [r4, #24]
   2809a:	f388 8811 	msr	BASEPRI, r8
   2809e:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
   280a2:	493a      	ldr	r1, [pc, #232]	; (2818c <process_event+0x218>)
   280a4:	4620      	mov	r0, r4
   280a6:	47c8      	blx	r9
   280a8:	e029      	b.n	280fe <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   280aa:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
   280ae:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   280b0:	f041 0104 	orr.w	r1, r1, #4
   280b4:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   280b6:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
   280b8:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
   280bc:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   280be:	d0e6      	beq.n	2808e <process_event+0x11a>
   280c0:	2700      	movs	r7, #0
		res = 0;
   280c2:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   280c4:	f04f 0a04 	mov.w	sl, #4
   280c8:	e782      	b.n	27fd0 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   280ca:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
   280ce:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   280d0:	f041 0105 	orr.w	r1, r1, #5
   280d4:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   280d6:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
   280d8:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
   280dc:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   280de:	d0d6      	beq.n	2808e <process_event+0x11a>
   280e0:	2700      	movs	r7, #0
		res = 0;
   280e2:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   280e4:	f04f 0a05 	mov.w	sl, #5
   280e8:	e772      	b.n	27fd0 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
   280ea:	2700      	movs	r7, #0
		res = 0;
   280ec:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   280ee:	f04f 0a06 	mov.w	sl, #6
   280f2:	e76d      	b.n	27fd0 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   280f4:	462b      	mov	r3, r5
   280f6:	e787      	b.n	28008 <process_event+0x94>
			if (transit != NULL) {
   280f8:	f1b9 0f00 	cmp.w	r9, #0
   280fc:	d1d1      	bne.n	280a2 <process_event+0x12e>
	__asm__ volatile(
   280fe:	f04f 0320 	mov.w	r3, #32
   28102:	f3ef 8811 	mrs	r8, BASEPRI
   28106:	f383 8812 	msr	BASEPRI_MAX, r3
   2810a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   2810e:	8b23      	ldrh	r3, [r4, #24]
   28110:	f023 0308 	bic.w	r3, r3, #8
   28114:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   28116:	8b25      	ldrh	r5, [r4, #24]
   28118:	06ea      	lsls	r2, r5, #27
   2811a:	d52e      	bpl.n	2817a <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   2811c:	f025 0310 	bic.w	r3, r5, #16
   28120:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   28122:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
   28126:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   28128:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   2812a:	2e00      	cmp	r6, #0
   2812c:	f6bf af6f 	bge.w	2800e <process_event+0x9a>
	list->head = NULL;
   28130:	2300      	movs	r3, #0
		*clients = mgr->clients;
   28132:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   28134:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   28138:	f021 0107 	bic.w	r1, r1, #7
   2813c:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
   28140:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   28142:	8b21      	ldrh	r1, [r4, #24]
   28144:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   28148:	45aa      	cmp	sl, r5
   2814a:	f04f 0900 	mov.w	r9, #0
   2814e:	f47f af3f 	bne.w	27fd0 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
   28152:	2f00      	cmp	r7, #0
   28154:	d09b      	beq.n	2808e <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   28156:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   2815a:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
   2815c:	f388 8811 	msr	BASEPRI, r8
   28160:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
   28164:	2f00      	cmp	r7, #0
   28166:	d0c7      	beq.n	280f8 <process_event+0x184>
	return node->next;
   28168:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
   2816a:	4639      	mov	r1, r7
   2816c:	4633      	mov	r3, r6
   2816e:	4652      	mov	r2, sl
   28170:	4620      	mov	r0, r4
   28172:	f01a fc08 	bl	42986 <notify_one>
	list->head = node;
   28176:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
   28178:	e7f4      	b.n	28164 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   2817a:	06ab      	lsls	r3, r5, #26
   2817c:	f57f af1a 	bpl.w	27fb4 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   28180:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   28184:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   28186:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   2818a:	e6ff      	b.n	27f8c <process_event+0x18>
   2818c:	000429b3 	.word	0x000429b3

00028190 <cbvprintf>:
 * @param ap Variable parameters
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int cbvprintf(cbprintf_cb out, void *ctx, const char *fmt, va_list ap)
{
   28190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28194:	b08d      	sub	sp, #52	; 0x34
   28196:	461d      	mov	r5, r3
	char *prefix, *data;
	int min_width, precision, data_len;
	char padding_mode, length_mod, special;

	/* we pre-increment in the loop  afterwards */
	fmt--;
   28198:	1e53      	subs	r3, r2, #1
{
   2819a:	4682      	mov	sl, r0
   2819c:	9101      	str	r1, [sp, #4]
	fmt--;
   2819e:	9303      	str	r3, [sp, #12]
	size_t count = 0;
   281a0:	f04f 0900 	mov.w	r9, #0

start:
	while (*++fmt != '%') {
   281a4:	9b03      	ldr	r3, [sp, #12]
   281a6:	7858      	ldrb	r0, [r3, #1]
   281a8:	2825      	cmp	r0, #37	; 0x25
   281aa:	f103 0401 	add.w	r4, r3, #1
   281ae:	d119      	bne.n	281e4 <cbvprintf+0x54>
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;

	for (fmt++ ; ; fmt++) {
   281b0:	461e      	mov	r6, r3
	special = 0;
   281b2:	2000      	movs	r0, #0
	precision = -1;
   281b4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	for (fmt++ ; ; fmt++) {
   281b8:	3602      	adds	r6, #2
	length_mod = 0;
   281ba:	4603      	mov	r3, r0
	padding_mode = 0;
   281bc:	9002      	str	r0, [sp, #8]
	min_width = -1;
   281be:	4644      	mov	r4, r8
		switch (*fmt) {
   281c0:	7831      	ldrb	r1, [r6, #0]
   281c2:	9603      	str	r6, [sp, #12]
   281c4:	2939      	cmp	r1, #57	; 0x39
   281c6:	d854      	bhi.n	28272 <cbvprintf+0xe2>
   281c8:	291f      	cmp	r1, #31
   281ca:	d814      	bhi.n	281f6 <cbvprintf+0x66>
   281cc:	2900      	cmp	r1, #0
   281ce:	f000 81f0 	beq.w	285b2 <cbvprintf+0x422>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
   281d2:	9901      	ldr	r1, [sp, #4]
   281d4:	2025      	movs	r0, #37	; 0x25
   281d6:	47d0      	blx	sl
			OUTC(*fmt);
   281d8:	9901      	ldr	r1, [sp, #4]
   281da:	7830      	ldrb	r0, [r6, #0]
   281dc:	47d0      	blx	sl
   281de:	f109 0902 	add.w	r9, r9, #2
			goto start;
   281e2:	e7df      	b.n	281a4 <cbvprintf+0x14>
		if (*fmt == '\0') {
   281e4:	2800      	cmp	r0, #0
   281e6:	f000 81e4 	beq.w	285b2 <cbvprintf+0x422>
		OUTC(*fmt);
   281ea:	9901      	ldr	r1, [sp, #4]
   281ec:	47d0      	blx	sl
   281ee:	f109 0901 	add.w	r9, r9, #1
	while (*++fmt != '%') {
   281f2:	9403      	str	r4, [sp, #12]
   281f4:	e7d6      	b.n	281a4 <cbvprintf+0x14>
		switch (*fmt) {
   281f6:	f1a1 0220 	sub.w	r2, r1, #32
   281fa:	2a19      	cmp	r2, #25
   281fc:	d8e9      	bhi.n	281d2 <cbvprintf+0x42>
   281fe:	a701      	add	r7, pc, #4	; (adr r7, 28204 <cbvprintf+0x74>)
   28200:	f857 f022 	ldr.w	pc, [r7, r2, lsl #2]
   28204:	0002826d 	.word	0x0002826d
   28208:	000281d3 	.word	0x000281d3
   2820c:	000281d3 	.word	0x000281d3
   28210:	0002826d 	.word	0x0002826d
   28214:	000281d3 	.word	0x000281d3
   28218:	000282ed 	.word	0x000282ed
   2821c:	000281d3 	.word	0x000281d3
   28220:	000281d3 	.word	0x000281d3
   28224:	000281d3 	.word	0x000281d3
   28228:	000281d3 	.word	0x000281d3
   2822c:	00028339 	.word	0x00028339
   28230:	0002826d 	.word	0x0002826d
   28234:	000281d3 	.word	0x000281d3
   28238:	0002834d 	.word	0x0002834d
   2823c:	000282f9 	.word	0x000282f9
   28240:	000281d3 	.word	0x000281d3
   28244:	00028307 	.word	0x00028307
   28248:	00028327 	.word	0x00028327
   2824c:	00028327 	.word	0x00028327
   28250:	00028327 	.word	0x00028327
   28254:	00028327 	.word	0x00028327
   28258:	00028327 	.word	0x00028327
   2825c:	00028327 	.word	0x00028327
   28260:	00028327 	.word	0x00028327
   28264:	00028327 	.word	0x00028327
   28268:	00028327 	.word	0x00028327
   2826c:	4608      	mov	r0, r1
   2826e:	3601      	adds	r6, #1
   28270:	e7a6      	b.n	281c0 <cbvprintf+0x30>
   28272:	2958      	cmp	r1, #88	; 0x58
   28274:	f000 80ee 	beq.w	28454 <cbvprintf+0x2c4>
   28278:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
   2827c:	b2d7      	uxtb	r7, r2
   2827e:	2f17      	cmp	r7, #23
   28280:	d8a7      	bhi.n	281d2 <cbvprintf+0x42>
   28282:	2a17      	cmp	r2, #23
   28284:	d8a5      	bhi.n	281d2 <cbvprintf+0x42>
   28286:	a701      	add	r7, pc, #4	; (adr r7, 2828c <cbvprintf+0xfc>)
   28288:	f857 f022 	ldr.w	pc, [r7, r2, lsl #2]
   2828c:	000284fb 	.word	0x000284fb
   28290:	00028373 	.word	0x00028373
   28294:	000281d3 	.word	0x000281d3
   28298:	000281d3 	.word	0x000281d3
   2829c:	000281d3 	.word	0x000281d3
   282a0:	00028353 	.word	0x00028353
   282a4:	00028373 	.word	0x00028373
   282a8:	000281d3 	.word	0x000281d3
   282ac:	000281d3 	.word	0x000281d3
   282b0:	00028353 	.word	0x00028353
   282b4:	000281d3 	.word	0x000281d3
   282b8:	000281d3 	.word	0x000281d3
   282bc:	000281d3 	.word	0x000281d3
   282c0:	0002842f 	.word	0x0002842f
   282c4:	000281d3 	.word	0x000281d3
   282c8:	000281d3 	.word	0x000281d3
   282cc:	000284cf 	.word	0x000284cf
   282d0:	000281d3 	.word	0x000281d3
   282d4:	00028373 	.word	0x00028373
   282d8:	000281d3 	.word	0x000281d3
   282dc:	000281d3 	.word	0x000281d3
   282e0:	0002842f 	.word	0x0002842f
   282e4:	000281d3 	.word	0x000281d3
   282e8:	00028353 	.word	0x00028353
			OUTC('%');
   282ec:	9901      	ldr	r1, [sp, #4]
   282ee:	2025      	movs	r0, #37	; 0x25
   282f0:	47d0      	blx	sl
   282f2:	f109 0901 	add.w	r9, r9, #1
			goto start;
   282f6:	e755      	b.n	281a4 <cbvprintf+0x14>
			padding_mode &= (char)~PAD_ZERO;
   282f8:	9a02      	ldr	r2, [sp, #8]
   282fa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   282fe:	9202      	str	r2, [sp, #8]
			precision = 0;
   28300:	f04f 0800 	mov.w	r8, #0
			continue;
   28304:	e7b3      	b.n	2826e <cbvprintf+0xde>
			if (min_width < 0 && precision < 0 && !padding_mode) {
   28306:	2c00      	cmp	r4, #0
   28308:	da0d      	bge.n	28326 <cbvprintf+0x196>
   2830a:	f1b8 0f00 	cmp.w	r8, #0
   2830e:	da0d      	bge.n	2832c <cbvprintf+0x19c>
   28310:	9a02      	ldr	r2, [sp, #8]
   28312:	2a00      	cmp	r2, #0
   28314:	f000 8145 	beq.w	285a2 <cbvprintf+0x412>
				if (min_width < 0) {
   28318:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
				min_width = 10 * min_width + *fmt - '0';
   2831c:	220a      	movs	r2, #10
   2831e:	fb02 1404 	mla	r4, r2, r4, r1
   28322:	3c30      	subs	r4, #48	; 0x30
   28324:	e7a3      	b.n	2826e <cbvprintf+0xde>
			if (precision >= 0) {
   28326:	f1b8 0f00 	cmp.w	r8, #0
   2832a:	dbf5      	blt.n	28318 <cbvprintf+0x188>
				precision = 10 * precision + *fmt - '0';
   2832c:	220a      	movs	r2, #10
   2832e:	fb02 1208 	mla	r2, r2, r8, r1
   28332:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
   28336:	e79a      	b.n	2826e <cbvprintf+0xde>
			if (precision >= 0) {
   28338:	f1b8 0f00 	cmp.w	r8, #0
				precision = va_arg(ap, int);
   2833c:	f855 2b04 	ldr.w	r2, [r5], #4
			if (precision >= 0) {
   28340:	f280 8131 	bge.w	285a6 <cbvprintf+0x416>
				if (min_width < 0) {
   28344:	2a00      	cmp	r2, #0
   28346:	f280 8130 	bge.w	285aa <cbvprintf+0x41a>
					min_width = -min_width;
   2834a:	4254      	negs	r4, r2
		switch (*fmt) {
   2834c:	2202      	movs	r2, #2
				padding_mode = PAD_ZERO;
   2834e:	9202      	str	r2, [sp, #8]
   28350:	e78d      	b.n	2826e <cbvprintf+0xde>
			if (*fmt == 'h' && length_mod == 'h') {
   28352:	2968      	cmp	r1, #104	; 0x68
   28354:	d103      	bne.n	2835e <cbvprintf+0x1ce>
   28356:	2b68      	cmp	r3, #104	; 0x68
   28358:	d106      	bne.n	28368 <cbvprintf+0x1d8>
				length_mod = 'H';
   2835a:	2348      	movs	r3, #72	; 0x48
   2835c:	e787      	b.n	2826e <cbvprintf+0xde>
			} else if (*fmt == 'l' && length_mod == 'l') {
   2835e:	296c      	cmp	r1, #108	; 0x6c
   28360:	d102      	bne.n	28368 <cbvprintf+0x1d8>
   28362:	2b6c      	cmp	r3, #108	; 0x6c
   28364:	f000 8123 	beq.w	285ae <cbvprintf+0x41e>
			} else if (length_mod == '\0') {
   28368:	2b00      	cmp	r3, #0
   2836a:	f47f af32 	bne.w	281d2 <cbvprintf+0x42>
		switch (*fmt) {
   2836e:	460b      	mov	r3, r1
   28370:	e77d      	b.n	2826e <cbvprintf+0xde>
			if (length_mod == 'z') {
   28372:	2b7a      	cmp	r3, #122	; 0x7a
   28374:	d106      	bne.n	28384 <cbvprintf+0x1f4>
			} else if (*fmt == 'u') {
   28376:	2975      	cmp	r1, #117	; 0x75
				precision = va_arg(ap, int);
   28378:	f855 6b04 	ldr.w	r6, [r5], #4
			} else if (*fmt == 'u') {
   2837c:	d114      	bne.n	283a8 <cbvprintf+0x218>
				d = va_arg(ap, unsigned int);
   2837e:	f04f 0b00 	mov.w	fp, #0
			if (*fmt != 'u' && (int_value_type)d < 0) {
   28382:	e00c      	b.n	2839e <cbvprintf+0x20e>
			} else if (length_mod == 'l') {
   28384:	2b6c      	cmp	r3, #108	; 0x6c
   28386:	d0f6      	beq.n	28376 <cbvprintf+0x1e6>
			} else if (length_mod == 'L') {
   28388:	2b4c      	cmp	r3, #76	; 0x4c
   2838a:	d1f4      	bne.n	28376 <cbvprintf+0x1e6>
					unsigned long long llu =
   2838c:	3507      	adds	r5, #7
   2838e:	f025 0307 	bic.w	r3, r5, #7
				if (*fmt == 'u') {
   28392:	2975      	cmp	r1, #117	; 0x75
					unsigned long long llu =
   28394:	e9d3 6b00 	ldrd	r6, fp, [r3]
   28398:	f103 0508 	add.w	r5, r3, #8
				if (*fmt == 'u') {
   2839c:	d106      	bne.n	283ac <cbvprintf+0x21c>
			} else if (special == ' ') {
   2839e:	2820      	cmp	r0, #32
   283a0:	d13e      	bne.n	28420 <cbvprintf+0x290>
				prefix = " ";
   283a2:	4f86      	ldr	r7, [pc, #536]	; (285bc <cbvprintf+0x42c>)
				min_width--;
   283a4:	3c01      	subs	r4, #1
   283a6:	e009      	b.n	283bc <cbvprintf+0x22c>
				d = va_arg(ap, int);
   283a8:	ea4f 7be6 	mov.w	fp, r6, asr #31
			if (*fmt != 'u' && (int_value_type)d < 0) {
   283ac:	f1bb 0f00 	cmp.w	fp, #0
   283b0:	daf5      	bge.n	2839e <cbvprintf+0x20e>
				d = -d;
   283b2:	4276      	negs	r6, r6
				prefix = "-";
   283b4:	4f82      	ldr	r7, [pc, #520]	; (285c0 <cbvprintf+0x430>)
				d = -d;
   283b6:	eb6b 0b4b 	sbc.w	fp, fp, fp, lsl #1
				min_width--;
   283ba:	3c01      	subs	r4, #1
	int i = 0;
   283bc:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   283c0:	9305      	str	r3, [sp, #20]
   283c2:	2300      	movs	r3, #0
   283c4:	9304      	str	r3, [sp, #16]
		unsigned int c = num % base;
   283c6:	4630      	mov	r0, r6
   283c8:	4659      	mov	r1, fp
   283ca:	220a      	movs	r2, #10
   283cc:	2300      	movs	r3, #0
   283ce:	f7fd fe97 	bl	26100 <__aeabi_uldivmod>
		buftop[--i] = c + '0';
   283d2:	9b04      	ldr	r3, [sp, #16]
   283d4:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
   283d8:	f8cd c010 	str.w	ip, [sp, #16]
   283dc:	f8dd c014 	ldr.w	ip, [sp, #20]
   283e0:	3230      	adds	r2, #48	; 0x30
   283e2:	f80c 2d01 	strb.w	r2, [ip, #-1]!
   283e6:	f8cd c014 	str.w	ip, [sp, #20]
		num /= base;
   283ea:	46b4      	mov	ip, r6
   283ec:	465a      	mov	r2, fp
	} while (num);
   283ee:	f1bc 0f0a 	cmp.w	ip, #10
   283f2:	f172 0200 	sbcs.w	r2, r2, #0
		num /= base;
   283f6:	4606      	mov	r6, r0
   283f8:	468b      	mov	fp, r1
	} while (num);
   283fa:	d2e4      	bcs.n	283c6 <cbvprintf+0x236>
	return -i;
   283fc:	f1c3 0b01 	rsb	fp, r3, #1
			data = buf + sizeof(buf) - data_len;
   28400:	3330      	adds	r3, #48	; 0x30
			data = buf + sizeof(buf) - data_len;
   28402:	eb0d 0603 	add.w	r6, sp, r3
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
   28406:	f1b8 0f00 	cmp.w	r8, #0
			data = buf + sizeof(buf) - data_len;
   2840a:	f1a6 0604 	sub.w	r6, r6, #4
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
   2840e:	da6d      	bge.n	284ec <cbvprintf+0x35c>
   28410:	9b02      	ldr	r3, [sp, #8]
   28412:	07d9      	lsls	r1, r3, #31
   28414:	d47c      	bmi.n	28510 <cbvprintf+0x380>
			precision = min_width;
		}
		min_width -= data_len;
		precision -= data_len;
   28416:	eba8 030b 	sub.w	r3, r8, fp
		min_width -= data_len;
   2841a:	eba4 040b 	sub.w	r4, r4, fp
   2841e:	e013      	b.n	28448 <cbvprintf+0x2b8>
			} else if (special == '+') {
   28420:	282b      	cmp	r0, #43	; 0x2b
				prefix = "+";
   28422:	bf0a      	itet	eq
   28424:	4f67      	ldreq	r7, [pc, #412]	; (285c4 <cbvprintf+0x434>)
	prefix = "";
   28426:	4f68      	ldrne	r7, [pc, #416]	; (285c8 <cbvprintf+0x438>)
				min_width--;
   28428:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
   2842c:	e7c6      	b.n	283bc <cbvprintf+0x22c>
			if (*fmt == 'p') {
   2842e:	2970      	cmp	r1, #112	; 0x70
   28430:	d10f      	bne.n	28452 <cbvprintf+0x2c2>
				x = (uintptr_t)va_arg(ap, void *);
   28432:	f855 2b04 	ldr.w	r2, [r5], #4
   28436:	2300      	movs	r3, #0
				if (x == (uint_value_type)0) {
   28438:	b9fa      	cbnz	r2, 2847a <cbvprintf+0x2ea>
					data = "(nil)";
   2843a:	4e64      	ldr	r6, [pc, #400]	; (285cc <cbvprintf+0x43c>)
		min_width -= data_len;
   2843c:	3c05      	subs	r4, #5
		precision -= data_len;
   2843e:	f06f 0304 	mvn.w	r3, #4
					data_len = 5;
   28442:	f04f 0b05 	mov.w	fp, #5
	prefix = "";
   28446:	4f60      	ldr	r7, [pc, #384]	; (285c8 <cbvprintf+0x438>)
		if (precision > 0) {
			min_width -= precision;
		}

		if (!(padding_mode & PAD_TAIL)) {
   28448:	9a02      	ldr	r2, [sp, #8]
   2844a:	0792      	lsls	r2, r2, #30
   2844c:	d46f      	bmi.n	2852e <cbvprintf+0x39e>
   2844e:	46a0      	mov	r8, r4
   28450:	e065      	b.n	2851e <cbvprintf+0x38e>
		switch (*fmt) {
   28452:	2178      	movs	r1, #120	; 0x78
			} else if (length_mod == 'l') {
   28454:	2b6c      	cmp	r3, #108	; 0x6c
   28456:	d103      	bne.n	28460 <cbvprintf+0x2d0>
				x = va_arg(ap, unsigned int);
   28458:	f855 2b04 	ldr.w	r2, [r5], #4
   2845c:	2300      	movs	r3, #0
   2845e:	e008      	b.n	28472 <cbvprintf+0x2e2>
			} else if (length_mod == 'L') {
   28460:	2b4c      	cmp	r3, #76	; 0x4c
   28462:	d1f9      	bne.n	28458 <cbvprintf+0x2c8>
				unsigned long long llx =
   28464:	3507      	adds	r5, #7
   28466:	f025 0307 	bic.w	r3, r5, #7
   2846a:	461d      	mov	r5, r3
   2846c:	685b      	ldr	r3, [r3, #4]
   2846e:	f855 2b08 	ldr.w	r2, [r5], #8
			if (special == '#') {
   28472:	2823      	cmp	r0, #35	; 0x23
   28474:	d125      	bne.n	284c2 <cbvprintf+0x332>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
   28476:	0688      	lsls	r0, r1, #26
   28478:	d521      	bpl.n	284be <cbvprintf+0x32e>
   2847a:	4f55      	ldr	r7, [pc, #340]	; (285d0 <cbvprintf+0x440>)
				min_width -= 2;
   2847c:	3c02      	subs	r4, #2
			data_len = convert_value(x, 16, ALPHA(*fmt),
   2847e:	f001 0160 	and.w	r1, r1, #96	; 0x60
   28482:	f1a1 0b39 	sub.w	fp, r1, #57	; 0x39
	int i = 0;
   28486:	f10d 0e2d 	add.w	lr, sp, #45	; 0x2d
   2848a:	2600      	movs	r6, #0
		unsigned int c = num % base;
   2848c:	f002 010f 	and.w	r1, r2, #15
		if (c >= 10) {
   28490:	2909      	cmp	r1, #9
			c += alpha;
   28492:	bf88      	it	hi
   28494:	4459      	addhi	r1, fp
		buftop[--i] = c + '0';
   28496:	3130      	adds	r1, #48	; 0x30
   28498:	f80e 1d01 	strb.w	r1, [lr, #-1]!
	} while (num);
   2849c:	2a10      	cmp	r2, #16
		num /= base;
   2849e:	ea4f 1112 	mov.w	r1, r2, lsr #4
   284a2:	ea41 7103 	orr.w	r1, r1, r3, lsl #28
   284a6:	ea4f 1013 	mov.w	r0, r3, lsr #4
	} while (num);
   284aa:	f173 0300 	sbcs.w	r3, r3, #0
		buftop[--i] = c + '0';
   284ae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
	} while (num);
   284b2:	d208      	bcs.n	284c6 <cbvprintf+0x336>
	return -i;
   284b4:	f1c6 0b01 	rsb	fp, r6, #1
			data = buf + sizeof(buf) - data_len;
   284b8:	f106 0330 	add.w	r3, r6, #48	; 0x30
   284bc:	e7a1      	b.n	28402 <cbvprintf+0x272>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
   284be:	4f45      	ldr	r7, [pc, #276]	; (285d4 <cbvprintf+0x444>)
   284c0:	e7dc      	b.n	2847c <cbvprintf+0x2ec>
	prefix = "";
   284c2:	4f41      	ldr	r7, [pc, #260]	; (285c8 <cbvprintf+0x438>)
   284c4:	e7db      	b.n	2847e <cbvprintf+0x2ee>
		buftop[--i] = c + '0';
   284c6:	4666      	mov	r6, ip
		num /= base;
   284c8:	460a      	mov	r2, r1
   284ca:	4603      	mov	r3, r0
   284cc:	e7de      	b.n	2848c <cbvprintf+0x2fc>
			data = va_arg(ap, char *);
   284ce:	f855 6b04 	ldr.w	r6, [r5], #4
			data_len = strlen(data);
   284d2:	4630      	mov	r0, r6
   284d4:	f01c fabe 	bl	44a54 <strlen>
			if (precision >= 0 && data_len > precision) {
   284d8:	f1b8 0f00 	cmp.w	r8, #0
			data_len = strlen(data);
   284dc:	4683      	mov	fp, r0
			if (precision >= 0 && data_len > precision) {
   284de:	db02      	blt.n	284e6 <cbvprintf+0x356>
   284e0:	4540      	cmp	r0, r8
   284e2:	bfa8      	it	ge
   284e4:	46c3      	movge	fp, r8
	prefix = "";
   284e6:	4f38      	ldr	r7, [pc, #224]	; (285c8 <cbvprintf+0x438>)
			precision = 0;
   284e8:	f04f 0800 	mov.w	r8, #0
		precision -= data_len;
   284ec:	eba8 030b 	sub.w	r3, r8, fp
		if (precision > 0) {
   284f0:	2b00      	cmp	r3, #0
   284f2:	dd92      	ble.n	2841a <cbvprintf+0x28a>
			min_width -= precision;
   284f4:	eba4 0408 	sub.w	r4, r4, r8
   284f8:	e7a6      	b.n	28448 <cbvprintf+0x2b8>
			buf[0] = c;
   284fa:	f855 3b04 	ldr.w	r3, [r5], #4
   284fe:	f88d 3018 	strb.w	r3, [sp, #24]
		min_width -= data_len;
   28502:	3c01      	subs	r4, #1
		precision -= data_len;
   28504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
			data_len = 1;
   28508:	f04f 0b01 	mov.w	fp, #1
			data = buf;
   2850c:	ae06      	add	r6, sp, #24
   2850e:	e79a      	b.n	28446 <cbvprintf+0x2b6>
   28510:	46a0      	mov	r8, r4
   28512:	e7eb      	b.n	284ec <cbvprintf+0x35c>
   28514:	9302      	str	r3, [sp, #8]
			while (--min_width >= 0) {
				OUTC(' ');
   28516:	9901      	ldr	r1, [sp, #4]
   28518:	2020      	movs	r0, #32
   2851a:	47d0      	blx	sl
   2851c:	9b02      	ldr	r3, [sp, #8]
			while (--min_width >= 0) {
   2851e:	f1b8 0801 	subs.w	r8, r8, #1
   28522:	d5f7      	bpl.n	28514 <cbvprintf+0x384>
   28524:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
   28528:	3c01      	subs	r4, #1
   2852a:	4491      	add	r9, r2
   2852c:	1aa4      	subs	r4, r4, r2
   2852e:	46b8      	mov	r8, r7
   28530:	e006      	b.n	28540 <cbvprintf+0x3b0>
   28532:	9304      	str	r3, [sp, #16]
   28534:	9202      	str	r2, [sp, #8]
			}
		}
		while (*prefix) {
			OUTC(*prefix++);
   28536:	9901      	ldr	r1, [sp, #4]
   28538:	47d0      	blx	sl
   2853a:	9a02      	ldr	r2, [sp, #8]
   2853c:	9b04      	ldr	r3, [sp, #16]
   2853e:	4690      	mov	r8, r2
		while (*prefix) {
   28540:	4642      	mov	r2, r8
   28542:	f812 0b01 	ldrb.w	r0, [r2], #1
   28546:	2800      	cmp	r0, #0
   28548:	d1f3      	bne.n	28532 <cbvprintf+0x3a2>
   2854a:	461a      	mov	r2, r3
		}
		while (--precision >= 0) {
   2854c:	3a01      	subs	r2, #1
   2854e:	d515      	bpl.n	2857c <cbvprintf+0x3ec>
   28550:	2b00      	cmp	r3, #0
   28552:	bfac      	ite	ge
   28554:	ebc7 0703 	rsbge	r7, r7, r3
   28558:	427f      	neglt	r7, r7
   2855a:	465b      	mov	r3, fp
			OUTC('0');
		}
		while (--data_len >= 0) {
   2855c:	3b01      	subs	r3, #1
   2855e:	d515      	bpl.n	2858c <cbvprintf+0x3fc>
   28560:	f1bb 0f00 	cmp.w	fp, #0
   28564:	bfa8      	it	ge
   28566:	445f      	addge	r7, fp
   28568:	444f      	add	r7, r9
   2856a:	4626      	mov	r6, r4
			OUTC(*data++);
		}
		while (--min_width >= 0) {
   2856c:	3e01      	subs	r6, #1
   2856e:	d514      	bpl.n	2859a <cbvprintf+0x40a>
   28570:	2c00      	cmp	r4, #0
   28572:	bfa8      	it	ge
   28574:	193f      	addge	r7, r7, r4
   28576:	eb07 0908 	add.w	r9, r7, r8
   2857a:	e613      	b.n	281a4 <cbvprintf+0x14>
   2857c:	9304      	str	r3, [sp, #16]
   2857e:	9202      	str	r2, [sp, #8]
			OUTC('0');
   28580:	9901      	ldr	r1, [sp, #4]
   28582:	2030      	movs	r0, #48	; 0x30
   28584:	47d0      	blx	sl
   28586:	9b04      	ldr	r3, [sp, #16]
   28588:	9a02      	ldr	r2, [sp, #8]
   2858a:	e7df      	b.n	2854c <cbvprintf+0x3bc>
   2858c:	9302      	str	r3, [sp, #8]
			OUTC(*data++);
   2858e:	9901      	ldr	r1, [sp, #4]
   28590:	f816 0b01 	ldrb.w	r0, [r6], #1
   28594:	47d0      	blx	sl
   28596:	9b02      	ldr	r3, [sp, #8]
   28598:	e7e0      	b.n	2855c <cbvprintf+0x3cc>
			OUTC(' ');
   2859a:	9901      	ldr	r1, [sp, #4]
   2859c:	2020      	movs	r0, #32
   2859e:	47d0      	blx	sl
   285a0:	e7e4      	b.n	2856c <cbvprintf+0x3dc>
				padding_mode = PAD_ZERO;
   285a2:	2201      	movs	r2, #1
   285a4:	e6d3      	b.n	2834e <cbvprintf+0x1be>
				precision = va_arg(ap, int);
   285a6:	4690      	mov	r8, r2
   285a8:	e661      	b.n	2826e <cbvprintf+0xde>
   285aa:	4614      	mov	r4, r2
   285ac:	e65f      	b.n	2826e <cbvprintf+0xde>
				length_mod = 'L';
   285ae:	234c      	movs	r3, #76	; 0x4c
   285b0:	e65d      	b.n	2826e <cbvprintf+0xde>
		}

		goto start;
	}
}
   285b2:	4648      	mov	r0, r9
   285b4:	b00d      	add	sp, #52	; 0x34
   285b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   285ba:	bf00      	nop
   285bc:	0004acf9 	.word	0x0004acf9
   285c0:	0004acf7 	.word	0x0004acf7
   285c4:	0004acfb 	.word	0x0004acfb
   285c8:	0004ad31 	.word	0x0004ad31
   285cc:	0004ad03 	.word	0x0004ad03
   285d0:	0004acfd 	.word	0x0004acfd
   285d4:	0004ad00 	.word	0x0004ad00

000285d8 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   285d8:	b508      	push	{r3, lr}
	__asm__ volatile(
   285da:	f04f 0220 	mov.w	r2, #32
   285de:	f3ef 8311 	mrs	r3, BASEPRI
   285e2:	f382 8812 	msr	BASEPRI_MAX, r2
   285e6:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   285ea:	f002 f879 	bl	2a6e0 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   285ee:	4803      	ldr	r0, [pc, #12]	; (285fc <sys_reboot+0x24>)
   285f0:	f01a f968 	bl	428c4 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   285f4:	f001 fd72 	bl	2a0dc <arch_cpu_idle>
   285f8:	e7fc      	b.n	285f4 <sys_reboot+0x1c>
   285fa:	bf00      	nop
   285fc:	0004ad09 	.word	0x0004ad09

00028600 <read_pnp_id>:

#if CONFIG_BT_DIS_PNP
static ssize_t read_pnp_id(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
   28600:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &dis_pnp_id,
   28602:	2407      	movs	r4, #7
   28604:	9402      	str	r4, [sp, #8]
   28606:	4c04      	ldr	r4, [pc, #16]	; (28618 <read_pnp_id+0x18>)
   28608:	9401      	str	r4, [sp, #4]
   2860a:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   2860e:	9400      	str	r4, [sp, #0]
   28610:	f01e fba9 	bl	46d66 <bt_gatt_attr_read>
				 sizeof(dis_pnp_id));
}
   28614:	b004      	add	sp, #16
   28616:	bd10      	pop	{r4, pc}
   28618:	200009da 	.word	0x200009da

0002861c <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
   2861c:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
   2861e:	4c08      	ldr	r4, [pc, #32]	; (28640 <read_blvl+0x24>)
{
   28620:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
   28622:	7824      	ldrb	r4, [r4, #0]
   28624:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
   28628:	2401      	movs	r4, #1
   2862a:	9402      	str	r4, [sp, #8]
   2862c:	f10d 0417 	add.w	r4, sp, #23
   28630:	9401      	str	r4, [sp, #4]
   28632:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   28636:	9400      	str	r4, [sp, #0]
   28638:	f01e fb95 	bl	46d66 <bt_gatt_attr_read>
				 sizeof(lvl8));
}
   2863c:	b006      	add	sp, #24
   2863e:	bd10      	pop	{r4, pc}
   28640:	200009e1 	.word	0x200009e1

00028644 <bt_bas_set_battery_level>:
{
	return battery_level;
}

int bt_bas_set_battery_level(uint8_t level)
{
   28644:	b500      	push	{lr}
   28646:	b089      	sub	sp, #36	; 0x24
	int rc;

	if (level > 100U) {
   28648:	2864      	cmp	r0, #100	; 0x64
{
   2864a:	f88d 0007 	strb.w	r0, [sp, #7]
	if (level > 100U) {
   2864e:	d819      	bhi.n	28684 <bt_bas_set_battery_level+0x40>
		return -EINVAL;
	}

	battery_level = level;
   28650:	4b0e      	ldr	r3, [pc, #56]	; (2868c <bt_bas_set_battery_level+0x48>)
	memset(&params, 0, sizeof(params));
   28652:	2218      	movs	r2, #24
   28654:	7018      	strb	r0, [r3, #0]
   28656:	2100      	movs	r1, #0
   28658:	a802      	add	r0, sp, #8
   2865a:	f01c fa3d 	bl	44ad8 <memset>
	params.attr = attr;
   2865e:	4b0c      	ldr	r3, [pc, #48]	; (28690 <bt_bas_set_battery_level+0x4c>)
   28660:	9303      	str	r3, [sp, #12]
	params.data = data;
   28662:	f10d 0307 	add.w	r3, sp, #7
   28666:	9304      	str	r3, [sp, #16]
	return bt_gatt_notify_cb(conn, &params);
   28668:	a902      	add	r1, sp, #8
	params.len = len;
   2866a:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
   2866c:	2000      	movs	r0, #0
	params.len = len;
   2866e:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
   28672:	f005 ff09 	bl	2e488 <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &bas.attrs[1], &level, sizeof(level));

	return rc == -ENOTCONN ? 0 : rc;
   28676:	f110 0f80 	cmn.w	r0, #128	; 0x80
   2867a:	bf08      	it	eq
   2867c:	2000      	moveq	r0, #0
}
   2867e:	b009      	add	sp, #36	; 0x24
   28680:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   28684:	f06f 0015 	mvn.w	r0, #21
   28688:	e7f9      	b.n	2867e <bt_bas_set_battery_level+0x3a>
   2868a:	bf00      	nop
   2868c:	200009e1 	.word	0x200009e1
   28690:	000496ac 	.word	0x000496ac

00028694 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
   28694:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   28698:	460f      	mov	r7, r1
   2869a:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2869c:	2108      	movs	r1, #8
   2869e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
   286a0:	f8df 9050 	ldr.w	r9, [pc, #80]	; 286f4 <nvs_recover_last_ate+0x60>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   286a4:	f01a fcb7 	bl	43016 <nvs_al_size.isra.0>
	*addr -= ate_size;
   286a8:	683c      	ldr	r4, [r7, #0]
   286aa:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   286ac:	4680      	mov	r8, r0
	*addr -= ate_size;
   286ae:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
   286b0:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
   286b4:	42ac      	cmp	r4, r5
   286b6:	d803      	bhi.n	286c0 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
   286b8:	2000      	movs	r0, #0
}
   286ba:	b003      	add	sp, #12
   286bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   286c0:	2308      	movs	r3, #8
   286c2:	466a      	mov	r2, sp
   286c4:	4621      	mov	r1, r4
   286c6:	4630      	mov	r0, r6
   286c8:	f01a fc1a 	bl	42f00 <nvs_flash_rd>
		if (rc) {
   286cc:	2800      	cmp	r0, #0
   286ce:	d1f4      	bne.n	286ba <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
   286d0:	4669      	mov	r1, sp
   286d2:	4630      	mov	r0, r6
   286d4:	f01a fca9 	bl	4302a <nvs_ate_valid>
   286d8:	b140      	cbz	r0, 286ec <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
   286da:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   286de:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
   286e2:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
   286e4:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
   286e8:	4413      	add	r3, r2
   286ea:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
   286ec:	eba4 0408 	sub.w	r4, r4, r8
   286f0:	e7e0      	b.n	286b4 <nvs_recover_last_ate+0x20>
   286f2:	bf00      	nop
   286f4:	ffff0000 	.word	0xffff0000

000286f8 <nvs_init>:

	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
   286f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   286fc:	4604      	mov	r4, r0
   286fe:	b088      	sub	sp, #32
   28700:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   28702:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
   28706:	4638      	mov	r0, r7
   28708:	f01f ff48 	bl	4859c <z_impl_k_mutex_init>
   2870c:	4628      	mov	r0, r5
   2870e:	f018 fb61 	bl	40dd4 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
   28712:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
   28714:	2800      	cmp	r0, #0
   28716:	f000 8152 	beq.w	289be <nvs_init+0x2c6>
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   2871a:	6883      	ldr	r3, [r0, #8]
   2871c:	68db      	ldr	r3, [r3, #12]
   2871e:	4798      	blx	r3
		LOG_ERR("No valid flash device found");
		return -ENXIO;
	}

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   28720:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   28722:	b928      	cbnz	r0, 28730 <nvs_init+0x38>
		LOG_ERR("Could not obtain flash parameters");
		return -EINVAL;
   28724:	f06f 0515 	mvn.w	r5, #21
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   28728:	4628      	mov	r0, r5
   2872a:	b008      	add	sp, #32
   2872c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
   28730:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
   28732:	6883      	ldr	r3, [r0, #8]
   28734:	68db      	ldr	r3, [r3, #12]
   28736:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   28738:	6803      	ldr	r3, [r0, #0]
   2873a:	3b01      	subs	r3, #1
   2873c:	2b1f      	cmp	r3, #31
   2873e:	d8f1      	bhi.n	28724 <nvs_init+0x2c>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   28740:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   28742:	6821      	ldr	r1, [r4, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   28744:	aa05      	add	r2, sp, #20
   28746:	f01f fb02 	bl	47d4e <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   2874a:	2800      	cmp	r0, #0
   2874c:	d1ea      	bne.n	28724 <nvs_init+0x2c>
	if (!fs->sector_size || fs->sector_size % info.size) {
   2874e:	89a5      	ldrh	r5, [r4, #12]
   28750:	2d00      	cmp	r5, #0
   28752:	d0e7      	beq.n	28724 <nvs_init+0x2c>
   28754:	9b06      	ldr	r3, [sp, #24]
   28756:	fbb5 f2f3 	udiv	r2, r5, r3
   2875a:	fb03 5512 	mls	r5, r3, r2, r5
   2875e:	2d00      	cmp	r5, #0
   28760:	d1e0      	bne.n	28724 <nvs_init+0x2c>
	if (fs->sector_count < 2) {
   28762:	89e3      	ldrh	r3, [r4, #14]
   28764:	2b01      	cmp	r3, #1
   28766:	d9dd      	bls.n	28724 <nvs_init+0x2c>
	uint8_t erase_value = fs->flash_parameters->erase_value;
   28768:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
   2876a:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   2876c:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   28770:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28774:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28778:	4638      	mov	r0, r7
   2877a:	f018 fe05 	bl	41388 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2877e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   28780:	2108      	movs	r1, #8
   28782:	f01a fc48 	bl	43016 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
   28786:	46a8      	mov	r8, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   28788:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
   2878a:	89e3      	ldrh	r3, [r4, #14]
   2878c:	fa1f fa85 	uxth.w	sl, r5
   28790:	4553      	cmp	r3, sl
   28792:	d808      	bhi.n	287a6 <nvs_init+0xae>
	if (closed_sectors == fs->sector_count) {
   28794:	89e3      	ldrh	r3, [r4, #14]
   28796:	4543      	cmp	r3, r8
   28798:	d123      	bne.n	287e2 <nvs_init+0xea>
	return z_impl_k_mutex_unlock(mutex);
   2879a:	4638      	mov	r0, r7
   2879c:	f018 fe6c 	bl	41478 <z_impl_k_mutex_unlock>
		rc = -EDEADLK;
   287a0:	f06f 052c 	mvn.w	r5, #44	; 0x2c
   287a4:	e7c0      	b.n	28728 <nvs_init+0x30>
		       (uint16_t)(fs->sector_size - ate_size);
   287a6:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   287a8:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
   287aa:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
   287ac:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   287b0:	464a      	mov	r2, r9
   287b2:	2308      	movs	r3, #8
   287b4:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   287b6:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   287b8:	f01a fbda 	bl	42f70 <nvs_flash_cmp_const>
		if (rc) {
   287bc:	b178      	cbz	r0, 287de <nvs_init+0xe6>
			nvs_sector_advance(fs, &addr);
   287be:	89e0      	ldrh	r0, [r4, #14]
   287c0:	4669      	mov	r1, sp
   287c2:	f01a fc1d 	bl	43000 <nvs_sector_advance.isra.0>
			closed_sectors++;
   287c6:	f108 0801 	add.w	r8, r8, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   287ca:	9900      	ldr	r1, [sp, #0]
   287cc:	2308      	movs	r3, #8
   287ce:	464a      	mov	r2, r9
   287d0:	4620      	mov	r0, r4
			closed_sectors++;
   287d2:	fa1f f888 	uxth.w	r8, r8
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   287d6:	f01a fbcb 	bl	42f70 <nvs_flash_cmp_const>
			if (!rc) {
   287da:	2800      	cmp	r0, #0
   287dc:	d0da      	beq.n	28794 <nvs_init+0x9c>
	for (i = 0; i < fs->sector_count; i++) {
   287de:	3501      	adds	r5, #1
   287e0:	e7d3      	b.n	2878a <nvs_init+0x92>
	if (i == fs->sector_count) {
   287e2:	4553      	cmp	r3, sl
   287e4:	d10b      	bne.n	287fe <nvs_init+0x106>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   287e6:	9900      	ldr	r1, [sp, #0]
   287e8:	2308      	movs	r3, #8
   287ea:	464a      	mov	r2, r9
   287ec:	1b89      	subs	r1, r1, r6
   287ee:	4620      	mov	r0, r4
   287f0:	f01a fbbe 	bl	42f70 <nvs_flash_cmp_const>
		if (!rc) {
   287f4:	b918      	cbnz	r0, 287fe <nvs_init+0x106>
			nvs_sector_advance(fs, &addr);
   287f6:	89e0      	ldrh	r0, [r4, #14]
   287f8:	4669      	mov	r1, sp
   287fa:	f01a fc01 	bl	43000 <nvs_sector_advance.isra.0>
	rc = nvs_recover_last_ate(fs, &addr);
   287fe:	4669      	mov	r1, sp
   28800:	4620      	mov	r0, r4
   28802:	f7ff ff47 	bl	28694 <nvs_recover_last_ate>
	if (rc) {
   28806:	4605      	mov	r5, r0
   28808:	b118      	cbz	r0, 28812 <nvs_init+0x11a>
   2880a:	4638      	mov	r0, r7
   2880c:	f018 fe34 	bl	41478 <z_impl_k_mutex_unlock>
	if (rc) {
   28810:	e78a      	b.n	28728 <nvs_init+0x30>
	fs->ate_wra = addr;
   28812:	9b00      	ldr	r3, [sp, #0]
   28814:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   28816:	ea4f 4813 	mov.w	r8, r3, lsr #16
   2881a:	ea4f 4808 	mov.w	r8, r8, lsl #16
   2881e:	f8c4 8008 	str.w	r8, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
   28822:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   28826:	4299      	cmp	r1, r3
   28828:	d30f      	bcc.n	2884a <nvs_init+0x152>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2882a:	2308      	movs	r3, #8
   2882c:	aa01      	add	r2, sp, #4
   2882e:	4620      	mov	r0, r4
   28830:	f01a fb66 	bl	42f00 <nvs_flash_rd>
		if (rc) {
   28834:	4605      	mov	r5, r0
   28836:	2800      	cmp	r0, #0
   28838:	d1e7      	bne.n	2880a <nvs_init+0x112>
   2883a:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
   2883c:	f813 2b01 	ldrb.w	r2, [r3], #1
   28840:	4591      	cmp	r9, r2
   28842:	d133      	bne.n	288ac <nvs_init+0x1b4>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   28844:	3501      	adds	r5, #1
   28846:	2d08      	cmp	r5, #8
   28848:	d1f8      	bne.n	2883c <nvs_init+0x144>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   2884a:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
   2884c:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
   2884e:	0c1b      	lsrs	r3, r3, #16
   28850:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
   28852:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
   28854:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
   28856:	f01a fbd3 	bl	43000 <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   2885a:	89a3      	ldrh	r3, [r4, #12]
   2885c:	9900      	ldr	r1, [sp, #0]
   2885e:	464a      	mov	r2, r9
   28860:	4620      	mov	r0, r4
   28862:	f01a fb85 	bl	42f70 <nvs_flash_cmp_const>
	if (rc < 0) {
   28866:	1e05      	subs	r5, r0, #0
   28868:	dbcf      	blt.n	2880a <nvs_init+0x112>
		addr = fs->ate_wra + ate_size;
   2886a:	6863      	ldr	r3, [r4, #4]
	if (rc) {
   2886c:	d074      	beq.n	28958 <nvs_init+0x260>
		addr = fs->ate_wra + ate_size;
   2886e:	eb06 0803 	add.w	r8, r6, r3
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   28872:	f64f 79ff 	movw	r9, #65535	; 0xffff
   28876:	89a3      	ldrh	r3, [r4, #12]
		addr = fs->ate_wra + ate_size;
   28878:	f8cd 8000 	str.w	r8, [sp]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   2887c:	fa1f f288 	uxth.w	r2, r8
   28880:	1b9b      	subs	r3, r3, r6
   28882:	429a      	cmp	r2, r3
   28884:	d32c      	bcc.n	288e0 <nvs_init+0x1e8>
		bool gc_done_marker = false;
   28886:	2300      	movs	r3, #0
			addr = fs->ate_wra & ADDR_SECT_MASK;
   28888:	6861      	ldr	r1, [r4, #4]
		if (gc_done_marker) {
   2888a:	2b00      	cmp	r3, #0
   2888c:	d041      	beq.n	28912 <nvs_init+0x21a>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   2888e:	0c09      	lsrs	r1, r1, #16
   28890:	0409      	lsls	r1, r1, #16
			nvs_sector_advance(fs, &addr);
   28892:	89e0      	ldrh	r0, [r4, #14]
			addr = fs->ate_wra & ADDR_SECT_MASK;
   28894:	9100      	str	r1, [sp, #0]
			nvs_sector_advance(fs, &addr);
   28896:	4669      	mov	r1, sp
   28898:	f01a fbb2 	bl	43000 <nvs_sector_advance.isra.0>
			rc = nvs_flash_erase_sector(fs, addr);
   2889c:	9900      	ldr	r1, [sp, #0]
   2889e:	4620      	mov	r0, r4
   288a0:	f01a fb8b 	bl	42fba <nvs_flash_erase_sector>
		rc = nvs_gc(fs);
   288a4:	4605      	mov	r5, r0
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   288a6:	2d00      	cmp	r5, #0
   288a8:	d072      	beq.n	28990 <nvs_init+0x298>
   288aa:	e7ae      	b.n	2880a <nvs_init+0x112>
		if (nvs_ate_valid(fs, &last_ate)) {
   288ac:	a901      	add	r1, sp, #4
   288ae:	4620      	mov	r0, r4
   288b0:	f01a fbbb 	bl	4302a <nvs_ate_valid>
   288b4:	6862      	ldr	r2, [r4, #4]
   288b6:	b910      	cbnz	r0, 288be <nvs_init+0x1c6>
		fs->ate_wra -= ate_size;
   288b8:	1b92      	subs	r2, r2, r6
   288ba:	6062      	str	r2, [r4, #4]
   288bc:	e7b1      	b.n	28822 <nvs_init+0x12a>
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   288be:	f8bd 5008 	ldrh.w	r5, [sp, #8]
   288c2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   288c6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   288c8:	4429      	add	r1, r5
   288ca:	f01a fba4 	bl	43016 <nvs_al_size.isra.0>
   288ce:	4440      	add	r0, r8
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   288d0:	4290      	cmp	r0, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   288d2:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   288d4:	d1f0      	bne.n	288b8 <nvs_init+0x1c0>
   288d6:	2d00      	cmp	r5, #0
   288d8:	d0ee      	beq.n	288b8 <nvs_init+0x1c0>
				rc = -ESPIPE;
   288da:	f06f 051c 	mvn.w	r5, #28
   288de:	e068      	b.n	289b2 <nvs_init+0x2ba>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   288e0:	2308      	movs	r3, #8
   288e2:	aa03      	add	r2, sp, #12
   288e4:	4641      	mov	r1, r8
   288e6:	4620      	mov	r0, r4
   288e8:	f01a fb0a 	bl	42f00 <nvs_flash_rd>
			if (rc) {
   288ec:	4605      	mov	r5, r0
   288ee:	2800      	cmp	r0, #0
   288f0:	d18b      	bne.n	2880a <nvs_init+0x112>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   288f2:	a903      	add	r1, sp, #12
   288f4:	4620      	mov	r0, r4
   288f6:	f01a fb98 	bl	4302a <nvs_ate_valid>
   288fa:	b130      	cbz	r0, 2890a <nvs_init+0x212>
   288fc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   28900:	454b      	cmp	r3, r9
   28902:	d102      	bne.n	2890a <nvs_init+0x212>
			    (gc_done_ate.id == 0xffff) &&
   28904:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   28908:	b10b      	cbz	r3, 2890e <nvs_init+0x216>
			addr += ate_size;
   2890a:	44b0      	add	r8, r6
   2890c:	e7b3      	b.n	28876 <nvs_init+0x17e>
				gc_done_marker = true;
   2890e:	2301      	movs	r3, #1
   28910:	e7ba      	b.n	28888 <nvs_init+0x190>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   28912:	4620      	mov	r0, r4
   28914:	f01a fb51 	bl	42fba <nvs_flash_erase_sector>
		if (rc) {
   28918:	4605      	mov	r5, r0
   2891a:	2800      	cmp	r0, #0
   2891c:	f47f af75 	bne.w	2880a <nvs_init+0x112>
		fs->ate_wra &= ADDR_SECT_MASK;
   28920:	6863      	ldr	r3, [r4, #4]
   28922:	4a28      	ldr	r2, [pc, #160]	; (289c4 <nvs_init+0x2cc>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   28924:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
   28926:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   28928:	440b      	add	r3, r1
   2892a:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
   2892e:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   28930:	4013      	ands	r3, r2
   28932:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   28934:	4620      	mov	r0, r4
   28936:	f01a fc5a 	bl	431ee <nvs_gc>
   2893a:	e7b3      	b.n	288a4 <nvs_init+0x1ac>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   2893c:	1a5b      	subs	r3, r3, r1
   2893e:	464a      	mov	r2, r9
   28940:	4620      	mov	r0, r4
   28942:	f01a fb15 	bl	42f70 <nvs_flash_cmp_const>
		if (rc < 0) {
   28946:	1e05      	subs	r5, r0, #0
   28948:	f6ff af5f 	blt.w	2880a <nvs_init+0x112>
		if (!rc) {
   2894c:	d008      	beq.n	28960 <nvs_init+0x268>
		fs->data_wra += fs->flash_parameters->write_block_size;
   2894e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   28950:	68a3      	ldr	r3, [r4, #8]
   28952:	6812      	ldr	r2, [r2, #0]
   28954:	4413      	add	r3, r2
   28956:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   28958:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   2895c:	428b      	cmp	r3, r1
   2895e:	d8ed      	bhi.n	2893c <nvs_init+0x244>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   28960:	6861      	ldr	r1, [r4, #4]
   28962:	89a3      	ldrh	r3, [r4, #12]
   28964:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   28968:	429a      	cmp	r2, r3
   2896a:	d19c      	bne.n	288a6 <nvs_init+0x1ae>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   2896c:	f8df 8054 	ldr.w	r8, [pc, #84]	; 289c4 <nvs_init+0x2cc>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   28970:	68a2      	ldr	r2, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   28972:	ea01 0308 	and.w	r3, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   28976:	429a      	cmp	r2, r3
   28978:	d095      	beq.n	288a6 <nvs_init+0x1ae>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   2897a:	4620      	mov	r0, r4
   2897c:	f01a fb1d 	bl	42fba <nvs_flash_erase_sector>
		if (rc) {
   28980:	4605      	mov	r5, r0
   28982:	2800      	cmp	r0, #0
   28984:	f47f af41 	bne.w	2880a <nvs_init+0x112>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   28988:	6863      	ldr	r3, [r4, #4]
   2898a:	ea03 0308 	and.w	r3, r3, r8
   2898e:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
   28990:	89a3      	ldrh	r3, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   28992:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   28994:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   28998:	429a      	cmp	r2, r3
   2899a:	d006      	beq.n	289aa <nvs_init+0x2b2>
   2899c:	4638      	mov	r0, r7
   2899e:	f018 fd6b 	bl	41478 <z_impl_k_mutex_unlock>
	fs->ready = true;
   289a2:	2301      	movs	r3, #1
   289a4:	7423      	strb	r3, [r4, #16]
	return 0;
   289a6:	2500      	movs	r5, #0
   289a8:	e6be      	b.n	28728 <nvs_init+0x30>
		rc = nvs_add_gc_done_ate(fs);
   289aa:	4620      	mov	r0, r4
   289ac:	f01a fc0a 	bl	431c4 <nvs_add_gc_done_ate>
   289b0:	4605      	mov	r5, r0
   289b2:	4638      	mov	r0, r7
   289b4:	f018 fd60 	bl	41478 <z_impl_k_mutex_unlock>
	if (rc) {
   289b8:	2d00      	cmp	r5, #0
   289ba:	d0f2      	beq.n	289a2 <nvs_init+0x2aa>
   289bc:	e6b4      	b.n	28728 <nvs_init+0x30>
		return -ENXIO;
   289be:	f06f 0505 	mvn.w	r5, #5
   289c2:	e6b1      	b.n	28728 <nvs_init+0x30>
   289c4:	ffff0000 	.word	0xffff0000

000289c8 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   289c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   289cc:	461d      	mov	r5, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   289ce:	7c03      	ldrb	r3, [r0, #16]
{
   289d0:	b089      	sub	sp, #36	; 0x24
   289d2:	4604      	mov	r4, r0
   289d4:	4689      	mov	r9, r1
   289d6:	4690      	mov	r8, r2
	if (!fs->ready) {
   289d8:	2b00      	cmp	r3, #0
   289da:	f000 80bd 	beq.w	28b58 <nvs_write+0x190>
		LOG_ERR("NVS not initialized");
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   289de:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   289e0:	2108      	movs	r1, #8
   289e2:	4610      	mov	r0, r2
   289e4:	f01a fb17 	bl	43016 <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
   289e8:	4629      	mov	r1, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   289ea:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   289ec:	4610      	mov	r0, r2
   289ee:	f01a fb12 	bl	43016 <nvs_al_size.isra.0>

	/* The maximum data size is sector size - 4 ate
	 * where: 1 ate for data, 1 ate for sector close, 1 ate for gc done,
	 * and 1 ate to always allow a delete.
	 */
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   289f2:	89a3      	ldrh	r3, [r4, #12]
   289f4:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   289f8:	429d      	cmp	r5, r3
	data_size = nvs_al_size(fs, len);
   289fa:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   289fc:	f200 80af 	bhi.w	28b5e <nvs_write+0x196>
   28a00:	b11d      	cbz	r5, 28a0a <nvs_write+0x42>
	    ((len > 0) && (data == NULL))) {
   28a02:	f1b8 0f00 	cmp.w	r8, #0
   28a06:	f000 80aa 	beq.w	28b5e <nvs_write+0x196>
		return -EINVAL;
	}

	/* find latest entry with same id */
	wlk_addr = fs->ate_wra;
   28a0a:	6863      	ldr	r3, [r4, #4]
   28a0c:	9303      	str	r3, [sp, #12]
	rd_addr = wlk_addr;

	while (1) {
		rd_addr = wlk_addr;
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   28a0e:	aa04      	add	r2, sp, #16
   28a10:	a903      	add	r1, sp, #12
   28a12:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   28a14:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   28a18:	f01a fb3f 	bl	4309a <nvs_prev_ate>
		if (rc) {
   28a1c:	4606      	mov	r6, r0
   28a1e:	2800      	cmp	r0, #0
   28a20:	d165      	bne.n	28aee <nvs_write+0x126>
			return rc;
		}
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   28a22:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   28a26:	454b      	cmp	r3, r9
   28a28:	d005      	beq.n	28a36 <nvs_write+0x6e>
			prev_found = true;
			break;
		}
		if (wlk_addr == fs->ate_wra) {
   28a2a:	6862      	ldr	r2, [r4, #4]
   28a2c:	9b03      	ldr	r3, [sp, #12]
   28a2e:	429a      	cmp	r2, r3
   28a30:	d1ed      	bne.n	28a0e <nvs_write+0x46>
				return rc;
			}
		}
	} else {
		/* skip delete entry for non-existing entry */
		if (len == 0) {
   28a32:	b9e5      	cbnz	r5, 28a6e <nvs_write+0xa6>
   28a34:	e05b      	b.n	28aee <nvs_write+0x126>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   28a36:	a904      	add	r1, sp, #16
   28a38:	4620      	mov	r0, r4
   28a3a:	f01a faf6 	bl	4302a <nvs_ate_valid>
   28a3e:	2800      	cmp	r0, #0
   28a40:	d0f3      	beq.n	28a2a <nvs_write+0x62>
		rd_addr += wlk_ate.offset;
   28a42:	f8bd 0012 	ldrh.w	r0, [sp, #18]
			if (wlk_ate.len == 0U) {
   28a46:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
   28a4a:	b175      	cbz	r5, 28a6a <nvs_write+0xa2>
		} else if (len == wlk_ate.len) {
   28a4c:	429d      	cmp	r5, r3
   28a4e:	d10e      	bne.n	28a6e <nvs_write+0xa6>
		rd_addr &= ADDR_SECT_MASK;
   28a50:	ea4f 411b 	mov.w	r1, fp, lsr #16
   28a54:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   28a56:	4401      	add	r1, r0
   28a58:	462b      	mov	r3, r5
   28a5a:	4642      	mov	r2, r8
   28a5c:	4620      	mov	r0, r4
   28a5e:	f01a fa5d 	bl	42f1c <nvs_flash_block_cmp>
			if (rc <= 0) {
   28a62:	2800      	cmp	r0, #0
   28a64:	dc03      	bgt.n	28a6e <nvs_write+0xa6>
   28a66:	4606      	mov	r6, r0
   28a68:	e041      	b.n	28aee <nvs_write+0x126>
			if (wlk_ate.len == 0U) {
   28a6a:	2b00      	cmp	r3, #0
   28a6c:	d03f      	beq.n	28aee <nvs_write+0x126>
			return 0;
		}
	}

	/* calculate required space if the entry contains data */
	if (data_size) {
   28a6e:	2f00      	cmp	r7, #0
   28a70:	d141      	bne.n	28af6 <nvs_write+0x12e>
		/* Leave space for delete ate */
		required_space = data_size + ate_size;
	}

	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   28a72:	f104 0314 	add.w	r3, r4, #20
   28a76:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   28a78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28a7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28a80:	f104 0014 	add.w	r0, r4, #20
   28a84:	f018 fc80 	bl	41388 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
   28a88:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 28b64 <nvs_write+0x19c>

	gc_count = 0;
	while (1) {
		if (gc_count == fs->sector_count) {
   28a8c:	89e3      	ldrh	r3, [r4, #14]
   28a8e:	429e      	cmp	r6, r3
   28a90:	d05f      	beq.n	28b52 <nvs_write+0x18a>
			 */
			rc = -ENOSPC;
			goto end;
		}

		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   28a92:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   28a96:	18f9      	adds	r1, r7, r3
   28a98:	428a      	cmp	r2, r1
   28a9a:	d32f      	bcc.n	28afc <nvs_write+0x134>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   28a9c:	f8ad 301a 	strh.w	r3, [sp, #26]
	nvs_ate_crc8_update(&entry);
   28aa0:	a806      	add	r0, sp, #24
	entry.part = 0xff;
   28aa2:	23ff      	movs	r3, #255	; 0xff
   28aa4:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
   28aa8:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
   28aac:	f8ad 501c 	strh.w	r5, [sp, #28]
	nvs_ate_crc8_update(&entry);
   28ab0:	f01a fa9d 	bl	42fee <nvs_ate_crc8_update>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   28ab4:	68a1      	ldr	r1, [r4, #8]
   28ab6:	462b      	mov	r3, r5
   28ab8:	4642      	mov	r2, r8
   28aba:	4620      	mov	r0, r4
   28abc:	f01a fb37 	bl	4312e <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   28ac0:	4629      	mov	r1, r5
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   28ac2:	4682      	mov	sl, r0
	fs->data_wra += nvs_al_size(fs, len);
   28ac4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   28ac6:	f01a faa6 	bl	43016 <nvs_al_size.isra.0>
   28aca:	68a2      	ldr	r2, [r4, #8]
   28acc:	4402      	add	r2, r0
   28ace:	60a2      	str	r2, [r4, #8]
	if (rc) {
   28ad0:	f1ba 0f00 	cmp.w	sl, #0
   28ad4:	d107      	bne.n	28ae6 <nvs_write+0x11e>
	rc = nvs_flash_ate_wrt(fs, &entry);
   28ad6:	a906      	add	r1, sp, #24
   28ad8:	4620      	mov	r0, r4
   28ada:	f01a fb62 	bl	431a2 <nvs_flash_ate_wrt>
		if (rc) {
			goto end;
		}
		gc_count++;
	}
	rc = len;
   28ade:	2800      	cmp	r0, #0
   28ae0:	bf14      	ite	ne
   28ae2:	4682      	movne	sl, r0
   28ae4:	46aa      	moveq	sl, r5
	return z_impl_k_mutex_unlock(mutex);
   28ae6:	9801      	ldr	r0, [sp, #4]
   28ae8:	f018 fcc6 	bl	41478 <z_impl_k_mutex_unlock>
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
   28aec:	4656      	mov	r6, sl
}
   28aee:	4630      	mov	r0, r6
   28af0:	b009      	add	sp, #36	; 0x24
   28af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		required_space = data_size + ate_size;
   28af6:	4457      	add	r7, sl
   28af8:	b2bf      	uxth	r7, r7
   28afa:	e7ba      	b.n	28a72 <nvs_write+0xaa>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   28afc:	2108      	movs	r1, #8
   28afe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   28b00:	f01a fa89 	bl	43016 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   28b04:	f64f 73ff 	movw	r3, #65535	; 0xffff
   28b08:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
   28b0c:	2300      	movs	r3, #0
   28b0e:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   28b12:	1813      	adds	r3, r2, r0
   28b14:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   28b18:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   28b1a:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   28b1e:	441a      	add	r2, r3
   28b20:	1a10      	subs	r0, r2, r0
   28b22:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   28b24:	a806      	add	r0, sp, #24
   28b26:	f01a fa62 	bl	42fee <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   28b2a:	a906      	add	r1, sp, #24
   28b2c:	4620      	mov	r0, r4
   28b2e:	f01a fb38 	bl	431a2 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   28b32:	89e0      	ldrh	r0, [r4, #14]
   28b34:	1d21      	adds	r1, r4, #4
   28b36:	f01a fa63 	bl	43000 <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   28b3a:	6863      	ldr	r3, [r4, #4]
   28b3c:	ea03 030b 	and.w	r3, r3, fp
   28b40:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   28b42:	4620      	mov	r0, r4
   28b44:	f01a fb53 	bl	431ee <nvs_gc>
		if (rc) {
   28b48:	4682      	mov	sl, r0
   28b4a:	2800      	cmp	r0, #0
   28b4c:	d1cb      	bne.n	28ae6 <nvs_write+0x11e>
		gc_count++;
   28b4e:	3601      	adds	r6, #1
		if (gc_count == fs->sector_count) {
   28b50:	e79c      	b.n	28a8c <nvs_write+0xc4>
			rc = -ENOSPC;
   28b52:	f06f 0a1b 	mvn.w	sl, #27
   28b56:	e7c6      	b.n	28ae6 <nvs_write+0x11e>
		return -EACCES;
   28b58:	f06f 060c 	mvn.w	r6, #12
   28b5c:	e7c7      	b.n	28aee <nvs_write+0x126>
		return -EINVAL;
   28b5e:	f06f 0615 	mvn.w	r6, #21
   28b62:	e7c4      	b.n	28aee <nvs_write+0x126>
   28b64:	ffff0000 	.word	0xffff0000

00028b68 <class_handler>:
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   28b68:	4b0c      	ldr	r3, [pc, #48]	; (28b9c <class_handler+0x34>)
{
   28b6a:	b4f0      	push	{r4, r5, r6, r7}
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   28b6c:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28b6e:	4e0c      	ldr	r6, [pc, #48]	; (28ba0 <class_handler+0x38>)
   28b70:	4b0c      	ldr	r3, [pc, #48]	; (28ba4 <class_handler+0x3c>)
   28b72:	42b3      	cmp	r3, r6
   28b74:	d303      	bcc.n	28b7e <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
   28b76:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28b7a:	bcf0      	pop	{r4, r5, r6, r7}
   28b7c:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
   28b7e:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   28b80:	42bd      	cmp	r5, r7
   28b82:	d309      	bcc.n	28b98 <class_handler+0x30>
		if (iface->class_handler &&
   28b84:	691c      	ldr	r4, [r3, #16]
   28b86:	b13c      	cbz	r4, 28b98 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   28b88:	f895 c002 	ldrb.w	ip, [r5, #2]
   28b8c:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
   28b8e:	45ac      	cmp	ip, r5
   28b90:	d102      	bne.n	28b98 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
   28b92:	4623      	mov	r3, r4
}
   28b94:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
   28b96:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28b98:	3324      	adds	r3, #36	; 0x24
   28b9a:	e7ea      	b.n	28b72 <class_handler+0xa>
   28b9c:	2000197c 	.word	0x2000197c
   28ba0:	20000d81 	.word	0x20000d81
   28ba4:	20000d81 	.word	0x20000d81

00028ba8 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   28ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28bac:	4c13      	ldr	r4, [pc, #76]	; (28bfc <custom_handler+0x54>)
   28bae:	f8df 8050 	ldr.w	r8, [pc, #80]	; 28c00 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   28bb2:	f8df 9050 	ldr.w	r9, [pc, #80]	; 28c04 <custom_handler+0x5c>
{
   28bb6:	4605      	mov	r5, r0
   28bb8:	460e      	mov	r6, r1
   28bba:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28bbc:	4544      	cmp	r4, r8
   28bbe:	d303      	bcc.n	28bc8 <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
   28bc0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
   28bc8:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   28bca:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   28bce:	429a      	cmp	r2, r3
   28bd0:	d312      	bcc.n	28bf8 <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
   28bd2:	69a3      	ldr	r3, [r4, #24]
   28bd4:	b183      	cbz	r3, 28bf8 <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   28bd6:	7890      	ldrb	r0, [r2, #2]
   28bd8:	7929      	ldrb	r1, [r5, #4]
   28bda:	4288      	cmp	r0, r1
   28bdc:	d105      	bne.n	28bea <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
   28bde:	463a      	mov	r2, r7
   28be0:	4631      	mov	r1, r6
   28be2:	4628      	mov	r0, r5
}
   28be4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
   28be8:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
   28bea:	7952      	ldrb	r2, [r2, #5]
   28bec:	2a01      	cmp	r2, #1
   28bee:	d103      	bne.n	28bf8 <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
   28bf0:	463a      	mov	r2, r7
   28bf2:	4631      	mov	r1, r6
   28bf4:	4628      	mov	r0, r5
   28bf6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28bf8:	3424      	adds	r4, #36	; 0x24
   28bfa:	e7df      	b.n	28bbc <custom_handler+0x14>
   28bfc:	20000d81 	.word	0x20000d81
   28c00:	20000d81 	.word	0x20000d81
   28c04:	2000197c 	.word	0x2000197c

00028c08 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   28c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28c0c:	4c0b      	ldr	r4, [pc, #44]	; (28c3c <vendor_handler+0x34>)
   28c0e:	f8df 8030 	ldr.w	r8, [pc, #48]	; 28c40 <vendor_handler+0x38>
{
   28c12:	4605      	mov	r5, r0
   28c14:	460e      	mov	r6, r1
   28c16:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28c18:	4544      	cmp	r4, r8
   28c1a:	d302      	bcc.n	28c22 <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
   28c1c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28c20:	e009      	b.n	28c36 <vendor_handler+0x2e>
		if (iface->vendor_handler) {
   28c22:	6963      	ldr	r3, [r4, #20]
   28c24:	b90b      	cbnz	r3, 28c2a <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28c26:	3424      	adds	r4, #36	; 0x24
   28c28:	e7f6      	b.n	28c18 <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
   28c2a:	463a      	mov	r2, r7
   28c2c:	4631      	mov	r1, r6
   28c2e:	4628      	mov	r0, r5
   28c30:	4798      	blx	r3
   28c32:	2800      	cmp	r0, #0
   28c34:	d1f7      	bne.n	28c26 <vendor_handler+0x1e>
}
   28c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28c3a:	bf00      	nop
   28c3c:	20000d81 	.word	0x20000d81
   28c40:	20000d81 	.word	0x20000d81

00028c44 <set_endpoint>:
{
   28c44:	b507      	push	{r0, r1, r2, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
   28c46:	7883      	ldrb	r3, [r0, #2]
   28c48:	f88d 3000 	strb.w	r3, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
   28c4c:	7903      	ldrb	r3, [r0, #4]
   28c4e:	7942      	ldrb	r2, [r0, #5]
   28c50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   28c54:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
   28c58:	78c3      	ldrb	r3, [r0, #3]
	ret = usb_dc_ep_configure(&ep_cfg);
   28c5a:	4668      	mov	r0, sp
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
   28c5c:	f003 0303 	and.w	r3, r3, #3
   28c60:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
   28c64:	f014 fdfe 	bl	3d864 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
   28c68:	f110 0f78 	cmn.w	r0, #120	; 0x78
   28c6c:	d004      	beq.n	28c78 <set_endpoint+0x34>
	} else if (ret) {
   28c6e:	b118      	cbz	r0, 28c78 <set_endpoint+0x34>
		return false;
   28c70:	2000      	movs	r0, #0
}
   28c72:	b003      	add	sp, #12
   28c74:	f85d fb04 	ldr.w	pc, [sp], #4
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
   28c78:	f89d 0000 	ldrb.w	r0, [sp]
   28c7c:	f014 fe78 	bl	3d970 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
   28c80:	f110 0f78 	cmn.w	r0, #120	; 0x78
   28c84:	d001      	beq.n	28c8a <set_endpoint+0x46>
	} else if (ret) {
   28c86:	2800      	cmp	r0, #0
   28c88:	d1f2      	bne.n	28c70 <set_endpoint+0x2c>
	usb_dev.configured = true;
   28c8a:	4b02      	ldr	r3, [pc, #8]	; (28c94 <set_endpoint+0x50>)
   28c8c:	2001      	movs	r0, #1
   28c8e:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	return true;
   28c92:	e7ee      	b.n	28c72 <set_endpoint+0x2e>
   28c94:	2000197c 	.word	0x2000197c

00028c98 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
   28c98:	4802      	ldr	r0, [pc, #8]	; (28ca4 <usb_reset_alt_setting+0xc>)
   28c9a:	2208      	movs	r2, #8
   28c9c:	2100      	movs	r1, #0
   28c9e:	f01b bf1b 	b.w	44ad8 <memset>
   28ca2:	bf00      	nop
   28ca4:	20001a37 	.word	0x20001a37

00028ca8 <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
   28ca8:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28caa:	4b0b      	ldr	r3, [pc, #44]	; (28cd8 <is_ep_valid.part.0+0x30>)
   28cac:	4c0b      	ldr	r4, [pc, #44]	; (28cdc <is_ep_valid.part.0+0x34>)
   28cae:	42a3      	cmp	r3, r4
   28cb0:	d301      	bcc.n	28cb6 <is_ep_valid.part.0+0xe>
	return false;
   28cb2:	2000      	movs	r0, #0
}
   28cb4:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
   28cb6:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   28cb8:	7f1e      	ldrb	r6, [r3, #28]
   28cba:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
   28cbc:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   28cbe:	b2d5      	uxtb	r5, r2
   28cc0:	42ae      	cmp	r6, r5
   28cc2:	d801      	bhi.n	28cc8 <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28cc4:	3324      	adds	r3, #36	; 0x24
   28cc6:	e7f2      	b.n	28cae <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
   28cc8:	3201      	adds	r2, #1
   28cca:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
   28cce:	4285      	cmp	r5, r0
   28cd0:	d1f5      	bne.n	28cbe <is_ep_valid.part.0+0x16>
		return true;
   28cd2:	2001      	movs	r0, #1
   28cd4:	e7ee      	b.n	28cb4 <is_ep_valid.part.0+0xc>
   28cd6:	bf00      	nop
   28cd8:	20000d81 	.word	0x20000d81
   28cdc:	20000d81 	.word	0x20000d81

00028ce0 <usb_handle_request.constprop.0>:
	handler = usb_dev.req_handlers[type];
   28ce0:	4809      	ldr	r0, [pc, #36]	; (28d08 <usb_handle_request.constprop.0+0x28>)
static bool usb_handle_request(struct usb_setup_packet *setup,
   28ce2:	b508      	push	{r3, lr}
	uint32_t type = setup->RequestType.type;
   28ce4:	7803      	ldrb	r3, [r0, #0]
   28ce6:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
   28cea:	330a      	adds	r3, #10
   28cec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
   28cf0:	b13b      	cbz	r3, 28d02 <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
   28cf2:	f100 0208 	add.w	r2, r0, #8
   28cf6:	f100 0110 	add.w	r1, r0, #16
   28cfa:	4798      	blx	r3
   28cfc:	43c0      	mvns	r0, r0
   28cfe:	0fc0      	lsrs	r0, r0, #31
}
   28d00:	bd08      	pop	{r3, pc}
		return false;
   28d02:	4618      	mov	r0, r3
   28d04:	e7fc      	b.n	28d00 <usb_handle_request.constprop.0+0x20>
   28d06:	bf00      	nop
   28d08:	2000197c 	.word	0x2000197c

00028d0c <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
   28d0c:	2804      	cmp	r0, #4
{
   28d0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28d12:	f8df 808c 	ldr.w	r8, [pc, #140]	; 28da0 <forward_status_cb+0x94>
   28d16:	4604      	mov	r4, r0
   28d18:	460e      	mov	r6, r1
	if (status == USB_DC_DISCONNECTED) {
   28d1a:	d113      	bne.n	28d44 <forward_status_cb+0x38>
		usb_reset_alt_setting();
   28d1c:	f7ff ffbc 	bl	28c98 <usb_reset_alt_setting>
		if (usb_dev.configured) {
   28d20:	4b20      	ldr	r3, [pc, #128]	; (28da4 <forward_status_cb+0x98>)
   28d22:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
   28d26:	b1ab      	cbz	r3, 28d54 <forward_status_cb+0x48>
			usb_cancel_transfers();
   28d28:	f000 fcf2 	bl	29710 <usb_cancel_transfers>
   28d2c:	4d1e      	ldr	r5, [pc, #120]	; (28da8 <forward_status_cb+0x9c>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28d2e:	4545      	cmp	r5, r8
   28d30:	d226      	bcs.n	28d80 <forward_status_cb+0x74>
		ep_data = cfg_data->endpoint;
   28d32:	f8d5 9020 	ldr.w	r9, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   28d36:	2700      	movs	r7, #0
   28d38:	7f2a      	ldrb	r2, [r5, #28]
   28d3a:	b2fb      	uxtb	r3, r7
   28d3c:	429a      	cmp	r2, r3
   28d3e:	d817      	bhi.n	28d70 <forward_status_cb+0x64>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28d40:	3524      	adds	r5, #36	; 0x24
   28d42:	e7f4      	b.n	28d2e <forward_status_cb+0x22>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND || status == USB_DC_RESET) {
   28d44:	2805      	cmp	r0, #5
   28d46:	d110      	bne.n	28d6a <forward_status_cb+0x5e>
		if (usb_dev.configured) {
   28d48:	4b16      	ldr	r3, [pc, #88]	; (28da4 <forward_status_cb+0x98>)
   28d4a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
   28d4e:	b10b      	cbz	r3, 28d54 <forward_status_cb+0x48>
			usb_cancel_transfers();
   28d50:	f000 fcde 	bl	29710 <usb_cancel_transfers>
   28d54:	4d14      	ldr	r5, [pc, #80]	; (28da8 <forward_status_cb+0x9c>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28d56:	4545      	cmp	r5, r8
   28d58:	d317      	bcc.n	28d8a <forward_status_cb+0x7e>
	if (usb_dev.user_status_callback) {
   28d5a:	4b12      	ldr	r3, [pc, #72]	; (28da4 <forward_status_cb+0x98>)
   28d5c:	6a1b      	ldr	r3, [r3, #32]
   28d5e:	b1e3      	cbz	r3, 28d9a <forward_status_cb+0x8e>
		usb_dev.user_status_callback(status, param);
   28d60:	4631      	mov	r1, r6
   28d62:	4620      	mov	r0, r4
}
   28d64:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		usb_dev.user_status_callback(status, param);
   28d68:	4718      	bx	r3
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND || status == USB_DC_RESET) {
   28d6a:	2801      	cmp	r0, #1
   28d6c:	d1f2      	bne.n	28d54 <forward_status_cb+0x48>
   28d6e:	e7d7      	b.n	28d20 <forward_status_cb+0x14>
	return usb_dc_ep_disable(ep_data->ep_addr);
   28d70:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
			if (ret < 0) {
   28d74:	3701      	adds	r7, #1
	return usb_dc_ep_disable(ep_data->ep_addr);
   28d76:	7918      	ldrb	r0, [r3, #4]
   28d78:	f014 fe24 	bl	3d9c4 <usb_dc_ep_disable>
			if (ret < 0) {
   28d7c:	2800      	cmp	r0, #0
   28d7e:	dadb      	bge.n	28d38 <forward_status_cb+0x2c>
				usb_dev.configured = false;
   28d80:	4b08      	ldr	r3, [pc, #32]	; (28da4 <forward_status_cb+0x98>)
   28d82:	2200      	movs	r2, #0
   28d84:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   28d88:	e7e4      	b.n	28d54 <forward_status_cb+0x48>
		if (cfg_data->cb_usb_status) {
   28d8a:	68eb      	ldr	r3, [r5, #12]
   28d8c:	b11b      	cbz	r3, 28d96 <forward_status_cb+0x8a>
			cfg_data->cb_usb_status(cfg_data, status, param);
   28d8e:	4632      	mov	r2, r6
   28d90:	4621      	mov	r1, r4
   28d92:	4628      	mov	r0, r5
   28d94:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28d96:	3524      	adds	r5, #36	; 0x24
   28d98:	e7dd      	b.n	28d56 <forward_status_cb+0x4a>
}
   28d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28d9e:	bf00      	nop
   28da0:	20000d81 	.word	0x20000d81
   28da4:	2000197c 	.word	0x2000197c
   28da8:	20000d81 	.word	0x20000d81

00028dac <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
   28dac:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
   28dae:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
   28db0:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
   28db2:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
   28db4:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
   28db8:	d007      	beq.n	28dca <usb_halt_endpoint_req.isra.0+0x1e>
   28dba:	4620      	mov	r0, r4
   28dbc:	f7ff ff74 	bl	28ca8 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
   28dc0:	b178      	cbz	r0, 28de2 <usb_halt_endpoint_req.isra.0+0x36>
	return (usb_dev.configuration != 0);
   28dc2:	4b0d      	ldr	r3, [pc, #52]	; (28df8 <usb_halt_endpoint_req.isra.0+0x4c>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   28dc4:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
   28dc8:	b158      	cbz	r0, 28de2 <usb_halt_endpoint_req.isra.0+0x36>
		if (halt) {
   28dca:	4e0b      	ldr	r6, [pc, #44]	; (28df8 <usb_halt_endpoint_req.isra.0+0x4c>)
			usb_dc_ep_set_stall(ep);
   28dcc:	4620      	mov	r0, r4
		if (halt) {
   28dce:	b155      	cbz	r5, 28de6 <usb_halt_endpoint_req.isra.0+0x3a>
			usb_dc_ep_set_stall(ep);
   28dd0:	f014 fd6a 	bl	3d8a8 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
   28dd4:	69f3      	ldr	r3, [r6, #28]
   28dd6:	b11b      	cbz	r3, 28de0 <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
   28dd8:	f10d 0107 	add.w	r1, sp, #7
   28ddc:	2008      	movs	r0, #8
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
   28dde:	4798      	blx	r3
		return true;
   28de0:	2001      	movs	r0, #1
}
   28de2:	b002      	add	sp, #8
   28de4:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
   28de6:	f014 fd87 	bl	3d8f8 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
   28dea:	69f3      	ldr	r3, [r6, #28]
   28dec:	2b00      	cmp	r3, #0
   28dee:	d0f7      	beq.n	28de0 <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
   28df0:	f10d 0107 	add.w	r1, sp, #7
   28df4:	2009      	movs	r0, #9
   28df6:	e7f2      	b.n	28dde <usb_halt_endpoint_req.isra.0+0x32>
   28df8:	2000197c 	.word	0x2000197c

00028dfc <usb_handle_standard_request>:
{
   28dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
   28e00:	4ea4      	ldr	r6, [pc, #656]	; (29094 <usb_handle_standard_request+0x298>)
   28e02:	69b3      	ldr	r3, [r6, #24]
{
   28e04:	4604      	mov	r4, r0
   28e06:	460f      	mov	r7, r1
   28e08:	4615      	mov	r5, r2
	if (usb_dev.custom_req_handler &&
   28e0a:	b9fb      	cbnz	r3, 28e4c <usb_handle_standard_request+0x50>
	switch (setup->RequestType.recipient) {
   28e0c:	7823      	ldrb	r3, [r4, #0]
   28e0e:	f003 031f 	and.w	r3, r3, #31
   28e12:	2b01      	cmp	r3, #1
   28e14:	f000 809d 	beq.w	28f52 <usb_handle_standard_request+0x156>
   28e18:	2b02      	cmp	r3, #2
   28e1a:	f000 8107 	beq.w	2902c <usb_handle_standard_request+0x230>
   28e1e:	bb33      	cbnz	r3, 28e6e <usb_handle_standard_request+0x72>
	if (usb_reqtype_is_to_host(setup)) {
   28e20:	f994 0000 	ldrsb.w	r0, [r4]
	uint8_t *data = *data_buf;
   28e24:	682a      	ldr	r2, [r5, #0]
		switch (setup->bRequest) {
   28e26:	7861      	ldrb	r1, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
   28e28:	2800      	cmp	r0, #0
   28e2a:	da34      	bge.n	28e96 <usb_handle_standard_request+0x9a>
		switch (setup->bRequest) {
   28e2c:	2906      	cmp	r1, #6
   28e2e:	d012      	beq.n	28e56 <usb_handle_standard_request+0x5a>
   28e30:	2908      	cmp	r1, #8
   28e32:	d02b      	beq.n	28e8c <usb_handle_standard_request+0x90>
   28e34:	b9d9      	cbnz	r1, 28e6e <usb_handle_standard_request+0x72>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
   28e36:	2301      	movs	r3, #1
   28e38:	7013      	strb	r3, [r2, #0]
	data[1] = 0U;
   28e3a:	7051      	strb	r1, [r2, #1]
		data[0] |= (usb_dev.remote_wakeup ?
   28e3c:	f896 30c3 	ldrb.w	r3, [r6, #195]	; 0xc3
   28e40:	005b      	lsls	r3, r3, #1
   28e42:	f043 0301 	orr.w	r3, r3, #1
   28e46:	7013      	strb	r3, [r2, #0]
		*len = 2;
   28e48:	2302      	movs	r3, #2
   28e4a:	e12c      	b.n	290a6 <usb_handle_standard_request+0x2aa>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
   28e4c:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
   28e4e:	2800      	cmp	r0, #0
   28e50:	d1dc      	bne.n	28e0c <usb_handle_standard_request+0x10>
		return 0;
   28e52:	2000      	movs	r0, #0
   28e54:	e00d      	b.n	28e72 <usb_handle_standard_request+0x76>
			return usb_get_descriptor(setup, len, data_buf);
   28e56:	8862      	ldrh	r2, [r4, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
   28e58:	0a10      	lsrs	r0, r2, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
   28e5a:	1f01      	subs	r1, r0, #4
   28e5c:	2901      	cmp	r1, #1
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
   28e5e:	4684      	mov	ip, r0
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
   28e60:	d905      	bls.n	28e6e <usb_handle_standard_request+0x72>
   28e62:	2807      	cmp	r0, #7
   28e64:	d803      	bhi.n	28e6e <usb_handle_standard_request+0x72>
	p = (uint8_t *)usb_dev.descriptors;
   28e66:	6a71      	ldr	r1, [r6, #36]	; 0x24
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
   28e68:	b2d2      	uxtb	r2, r2
	while (p[DESC_bLength] != 0U) {
   28e6a:	780c      	ldrb	r4, [r1, #0]
   28e6c:	b91c      	cbnz	r4, 28e76 <usb_handle_standard_request+0x7a>
			rc = -EINVAL;
   28e6e:	f06f 0015 	mvn.w	r0, #21
}
   28e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (p[DESC_bDescriptorType] == type) {
   28e76:	784e      	ldrb	r6, [r1, #1]
   28e78:	4566      	cmp	r6, ip
   28e7a:	d103      	bne.n	28e84 <usb_handle_standard_request+0x88>
			if (cur_index == index) {
   28e7c:	429a      	cmp	r2, r3
   28e7e:	f000 810d 	beq.w	2909c <usb_handle_standard_request+0x2a0>
			cur_index++;
   28e82:	3301      	adds	r3, #1
		p += p[DESC_bLength];
   28e84:	4421      	add	r1, r4
   28e86:	e7f0      	b.n	28e6a <usb_handle_standard_request+0x6e>
			*len = p[DESC_bLength];
   28e88:	780b      	ldrb	r3, [r1, #0]
   28e8a:	e10c      	b.n	290a6 <usb_handle_standard_request+0x2aa>
			data[0] = usb_dev.configuration;
   28e8c:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   28e90:	7013      	strb	r3, [r2, #0]
				*len = 1;
   28e92:	2301      	movs	r3, #1
   28e94:	e107      	b.n	290a6 <usb_handle_standard_request+0x2aa>
		switch (setup->bRequest) {
   28e96:	3901      	subs	r1, #1
   28e98:	2908      	cmp	r1, #8
   28e9a:	d8e8      	bhi.n	28e6e <usb_handle_standard_request+0x72>
   28e9c:	a301      	add	r3, pc, #4	; (adr r3, 28ea4 <usb_handle_standard_request+0xa8>)
   28e9e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   28ea2:	bf00      	nop
   28ea4:	00028f3d 	.word	0x00028f3d
   28ea8:	00028e6f 	.word	0x00028e6f
   28eac:	00028f4b 	.word	0x00028f4b
   28eb0:	00028e6f 	.word	0x00028e6f
   28eb4:	00028ec9 	.word	0x00028ec9
   28eb8:	00028e6f 	.word	0x00028e6f
   28ebc:	00028e6f 	.word	0x00028e6f
   28ec0:	00028e6f 	.word	0x00028e6f
   28ec4:	00028ed5 	.word	0x00028ed5
			return !usb_dc_set_address(setup->wValue);
   28ec8:	78a0      	ldrb	r0, [r4, #2]
   28eca:	f014 fcb9 	bl	3d840 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
   28ece:	2800      	cmp	r0, #0
   28ed0:	d0bf      	beq.n	28e52 <usb_handle_standard_request+0x56>
   28ed2:	e7cc      	b.n	28e6e <usb_handle_standard_request+0x72>
	if (setup->wValue == 0U) {
   28ed4:	8863      	ldrh	r3, [r4, #2]
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
   28ed6:	6a75      	ldr	r5, [r6, #36]	; 0x24
	if (setup->wValue == 0U) {
   28ed8:	bb63      	cbnz	r3, 28f34 <usb_handle_standard_request+0x138>
		usb_reset_alt_setting();
   28eda:	f7ff fedd 	bl	28c98 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
   28ede:	8863      	ldrh	r3, [r4, #2]
   28ee0:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
   28ee4:	69f3      	ldr	r3, [r6, #28]
   28ee6:	2b00      	cmp	r3, #0
   28ee8:	d0b3      	beq.n	28e52 <usb_handle_standard_request+0x56>
			usb_dev.status_callback(USB_DC_CONFIGURED,
   28eea:	496b      	ldr	r1, [pc, #428]	; (29098 <usb_handle_standard_request+0x29c>)
   28eec:	2003      	movs	r0, #3
   28eee:	4798      	blx	r3
   28ef0:	e7af      	b.n	28e52 <usb_handle_standard_request+0x56>
		switch (p[DESC_bDescriptorType]) {
   28ef2:	786b      	ldrb	r3, [r5, #1]
   28ef4:	2b04      	cmp	r3, #4
   28ef6:	d010      	beq.n	28f1a <usb_handle_standard_request+0x11e>
   28ef8:	2b05      	cmp	r3, #5
   28efa:	d011      	beq.n	28f20 <usb_handle_standard_request+0x124>
   28efc:	2b02      	cmp	r3, #2
   28efe:	d104      	bne.n	28f0a <usb_handle_standard_request+0x10e>
			cur_config = p[CONF_DESC_bConfigurationValue];
   28f00:	796f      	ldrb	r7, [r5, #5]
			if (cur_config == setup->wValue) {
   28f02:	8863      	ldrh	r3, [r4, #2]
				found = true;
   28f04:	42bb      	cmp	r3, r7
   28f06:	bf08      	it	eq
   28f08:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
   28f0a:	782b      	ldrb	r3, [r5, #0]
   28f0c:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
   28f0e:	782b      	ldrb	r3, [r5, #0]
   28f10:	2b00      	cmp	r3, #0
   28f12:	d1ee      	bne.n	28ef2 <usb_handle_standard_request+0xf6>
	if (found) {
   28f14:	2800      	cmp	r0, #0
   28f16:	d0aa      	beq.n	28e6e <usb_handle_standard_request+0x72>
   28f18:	e7df      	b.n	28eda <usb_handle_standard_request+0xde>
			cur_alt_setting =
   28f1a:	f895 8003 	ldrb.w	r8, [r5, #3]
			break;
   28f1e:	e7f4      	b.n	28f0a <usb_handle_standard_request+0x10e>
			if ((cur_config != setup->wValue) ||
   28f20:	8863      	ldrh	r3, [r4, #2]
   28f22:	42bb      	cmp	r3, r7
   28f24:	d1f1      	bne.n	28f0a <usb_handle_standard_request+0x10e>
   28f26:	f1b8 0f00 	cmp.w	r8, #0
   28f2a:	d1ee      	bne.n	28f0a <usb_handle_standard_request+0x10e>
			found = set_endpoint((struct usb_ep_descriptor *)p);
   28f2c:	4628      	mov	r0, r5
   28f2e:	f7ff fe89 	bl	28c44 <set_endpoint>
			break;
   28f32:	e7ea      	b.n	28f0a <usb_handle_standard_request+0x10e>
	uint8_t cur_config = 0xFF;
   28f34:	27ff      	movs	r7, #255	; 0xff
	bool found = false;
   28f36:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
   28f38:	46b8      	mov	r8, r7
   28f3a:	e7e8      	b.n	28f0e <usb_handle_standard_request+0x112>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
   28f3c:	8863      	ldrh	r3, [r4, #2]
   28f3e:	2b01      	cmp	r3, #1
   28f40:	d195      	bne.n	28e6e <usb_handle_standard_request+0x72>
					usb_dev.remote_wakeup = false;
   28f42:	2300      	movs	r3, #0
					usb_dev.remote_wakeup = true;
   28f44:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
   28f48:	e783      	b.n	28e52 <usb_handle_standard_request+0x56>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
   28f4a:	8863      	ldrh	r3, [r4, #2]
   28f4c:	2b01      	cmp	r3, #1
   28f4e:	d18e      	bne.n	28e6e <usb_handle_standard_request+0x72>
   28f50:	e7f8      	b.n	28f44 <usb_handle_standard_request+0x148>
	if (!is_device_configured() ||
   28f52:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   28f56:	f8d5 c000 	ldr.w	ip, [r5]
   28f5a:	2b00      	cmp	r3, #0
   28f5c:	d087      	beq.n	28e6e <usb_handle_standard_request+0x72>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
   28f5e:	6a75      	ldr	r5, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
   28f60:	88a3      	ldrh	r3, [r4, #4]
   28f62:	f894 e004 	ldrb.w	lr, [r4, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
   28f66:	462a      	mov	r2, r5
	while (p[DESC_bLength] != 0U) {
   28f68:	7810      	ldrb	r0, [r2, #0]
   28f6a:	2800      	cmp	r0, #0
   28f6c:	f43f af7f 	beq.w	28e6e <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
   28f70:	7851      	ldrb	r1, [r2, #1]
   28f72:	2902      	cmp	r1, #2
   28f74:	d104      	bne.n	28f80 <usb_handle_standard_request+0x184>
			if (interface < cfg_descr->bNumInterfaces) {
   28f76:	f892 8004 	ldrb.w	r8, [r2, #4]
   28f7a:	45f0      	cmp	r8, lr
   28f7c:	f200 8095 	bhi.w	290aa <usb_handle_standard_request+0x2ae>
		p += p[DESC_bLength];
   28f80:	4402      	add	r2, r0
   28f82:	e7f1      	b.n	28f68 <usb_handle_standard_request+0x16c>
			data[0] = 0U;
   28f84:	f88c 2000 	strb.w	r2, [ip]
			data[1] = 0U;
   28f88:	f88c 2001 	strb.w	r2, [ip, #1]
			*len = 2;
   28f8c:	6039      	str	r1, [r7, #0]
			return true;
   28f8e:	e760      	b.n	28e52 <usb_handle_standard_request+0x56>
		p += p[DESC_bLength];
   28f90:	4415      	add	r5, r2
   28f92:	e096      	b.n	290c2 <usb_handle_standard_request+0x2c6>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
   28f94:	2a0b      	cmp	r2, #11
   28f96:	f47f af6a 	bne.w	28e6e <usb_handle_standard_request+0x72>
	bool ret = false;
   28f9a:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
   28f9c:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
   28fa0:	46c1      	mov	r9, r8
	const uint8_t *if_desc = NULL;
   28fa2:	46ba      	mov	sl, r7
   28fa4:	e006      	b.n	28fb4 <usb_handle_standard_request+0x1b8>
		switch (p[DESC_bDescriptorType]) {
   28fa6:	786b      	ldrb	r3, [r5, #1]
   28fa8:	2b04      	cmp	r3, #4
   28faa:	d00f      	beq.n	28fcc <usb_handle_standard_request+0x1d0>
   28fac:	2b05      	cmp	r3, #5
   28fae:	d021      	beq.n	28ff4 <usb_handle_standard_request+0x1f8>
		p += p[DESC_bLength];
   28fb0:	782b      	ldrb	r3, [r5, #0]
   28fb2:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
   28fb4:	782b      	ldrb	r3, [r5, #0]
   28fb6:	2b00      	cmp	r3, #0
   28fb8:	d1f5      	bne.n	28fa6 <usb_handle_standard_request+0x1aa>
	if (usb_dev.status_callback) {
   28fba:	69f3      	ldr	r3, [r6, #28]
   28fbc:	b113      	cbz	r3, 28fc4 <usb_handle_standard_request+0x1c8>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
   28fbe:	4651      	mov	r1, sl
   28fc0:	2007      	movs	r0, #7
   28fc2:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
   28fc4:	2f00      	cmp	r7, #0
   28fc6:	f47f af44 	bne.w	28e52 <usb_handle_standard_request+0x56>
   28fca:	e750      	b.n	28e6e <usb_handle_standard_request+0x72>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   28fcc:	f895 8002 	ldrb.w	r8, [r5, #2]
			if (cur_iface == setup->wIndex &&
   28fd0:	88a3      	ldrh	r3, [r4, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
   28fd2:	f895 9003 	ldrb.w	r9, [r5, #3]
			if (cur_iface == setup->wIndex &&
   28fd6:	4598      	cmp	r8, r3
   28fd8:	d1ea      	bne.n	28fb0 <usb_handle_standard_request+0x1b4>
			    cur_alt_setting == setup->wValue) {
   28fda:	8863      	ldrh	r3, [r4, #2]
			if (cur_iface == setup->wIndex &&
   28fdc:	4599      	cmp	r9, r3
   28fde:	d1e7      	bne.n	28fb0 <usb_handle_standard_request+0x1b4>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   28fe0:	f1b8 0f07 	cmp.w	r8, #7
   28fe4:	d81f      	bhi.n	29026 <usb_handle_standard_request+0x22a>
		usb_dev.alt_setting[iface] = alt_setting;
   28fe6:	eb06 0308 	add.w	r3, r6, r8
		return true;
   28fea:	46aa      	mov	sl, r5
				ret = usb_set_alt_setting(setup->wIndex,
   28fec:	f883 90bb 	strb.w	r9, [r3, #187]	; 0xbb
	return true;
   28ff0:	2701      	movs	r7, #1
   28ff2:	e7dd      	b.n	28fb0 <usb_handle_standard_request+0x1b4>
			if (cur_iface == setup->wIndex) {
   28ff4:	88a3      	ldrh	r3, [r4, #4]
   28ff6:	4543      	cmp	r3, r8
   28ff8:	d1da      	bne.n	28fb0 <usb_handle_standard_request+0x1b4>
	if (cur_alt_setting != alt_setting) {
   28ffa:	78a3      	ldrb	r3, [r4, #2]
   28ffc:	454b      	cmp	r3, r9
   28ffe:	d00d      	beq.n	2901c <usb_handle_standard_request+0x220>
		ret = reset_endpoint(ep_desc);
   29000:	78af      	ldrb	r7, [r5, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
   29002:	4638      	mov	r0, r7
   29004:	f000 fb66 	bl	296d4 <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
   29008:	4638      	mov	r0, r7
   2900a:	f014 fcdb 	bl	3d9c4 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
   2900e:	f110 0f78 	cmn.w	r0, #120	; 0x78
   29012:	d0ed      	beq.n	28ff0 <usb_handle_standard_request+0x1f4>
	} else if (ret) {
   29014:	fab0 f780 	clz	r7, r0
   29018:	097f      	lsrs	r7, r7, #5
   2901a:	e7c9      	b.n	28fb0 <usb_handle_standard_request+0x1b4>
		ret = set_endpoint(ep_desc);
   2901c:	4628      	mov	r0, r5
   2901e:	f7ff fe11 	bl	28c44 <set_endpoint>
   29022:	4607      	mov	r7, r0
   29024:	e7c4      	b.n	28fb0 <usb_handle_standard_request+0x1b4>
   29026:	46aa      	mov	sl, r5
	return false;
   29028:	2700      	movs	r7, #0
   2902a:	e7c1      	b.n	28fb0 <usb_handle_standard_request+0x1b4>
	if (usb_reqtype_is_to_host(setup)) {
   2902c:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
   29030:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
   29032:	2a00      	cmp	r2, #0
   29034:	da18      	bge.n	29068 <usb_handle_standard_request+0x26c>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
   29036:	2b00      	cmp	r3, #0
   29038:	f47f af19 	bne.w	28e6e <usb_handle_standard_request+0x72>
	uint8_t ep = setup->wIndex;
   2903c:	7924      	ldrb	r4, [r4, #4]
   2903e:	682d      	ldr	r5, [r5, #0]
	if (USB_EP_GET_IDX(ep) == 0) {
   29040:	0663      	lsls	r3, r4, #25
   29042:	d00a      	beq.n	2905a <usb_handle_standard_request+0x25e>
   29044:	4620      	mov	r0, r4
   29046:	f7ff fe2f 	bl	28ca8 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
   2904a:	2800      	cmp	r0, #0
   2904c:	f43f af0f 	beq.w	28e6e <usb_handle_standard_request+0x72>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   29050:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   29054:	2b00      	cmp	r3, #0
   29056:	f43f af0a 	beq.w	28e6e <usb_handle_standard_request+0x72>
		usb_dc_ep_is_stalled(ep, &data[0]);
   2905a:	4629      	mov	r1, r5
   2905c:	4620      	mov	r0, r4
   2905e:	f014 fc6b 	bl	3d938 <usb_dc_ep_is_stalled>
		data[1] = 0U;
   29062:	2300      	movs	r3, #0
   29064:	706b      	strb	r3, [r5, #1]
   29066:	e6ef      	b.n	28e48 <usb_handle_standard_request+0x4c>
		switch (setup->bRequest) {
   29068:	2b01      	cmp	r3, #1
   2906a:	d008      	beq.n	2907e <usb_handle_standard_request+0x282>
   2906c:	2b03      	cmp	r3, #3
   2906e:	f47f aefe 	bne.w	28e6e <usb_handle_standard_request+0x72>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   29072:	8863      	ldrh	r3, [r4, #2]
   29074:	2b00      	cmp	r3, #0
   29076:	f47f aefa 	bne.w	28e6e <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
   2907a:	2101      	movs	r1, #1
   2907c:	e003      	b.n	29086 <usb_handle_standard_request+0x28a>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   2907e:	8861      	ldrh	r1, [r4, #2]
   29080:	2900      	cmp	r1, #0
   29082:	f47f aef4 	bne.w	28e6e <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
   29086:	88a0      	ldrh	r0, [r4, #4]
   29088:	f7ff fe90 	bl	28dac <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
   2908c:	2800      	cmp	r0, #0
   2908e:	f47f aee0 	bne.w	28e52 <usb_handle_standard_request+0x56>
   29092:	e6ec      	b.n	28e6e <usb_handle_standard_request+0x72>
   29094:	2000197c 	.word	0x2000197c
   29098:	20001a36 	.word	0x20001a36
		if (type == USB_DESC_CONFIGURATION) {
   2909c:	2802      	cmp	r0, #2
		*data = p;
   2909e:	6029      	str	r1, [r5, #0]
		if (type == USB_DESC_CONFIGURATION) {
   290a0:	f47f aef2 	bne.w	28e88 <usb_handle_standard_request+0x8c>
			*len = (p[CONF_DESC_wTotalLength]) |
   290a4:	884b      	ldrh	r3, [r1, #2]
		*len = 2;
   290a6:	603b      	str	r3, [r7, #0]
		return true;
   290a8:	e6d3      	b.n	28e52 <usb_handle_standard_request+0x56>
	if (usb_reqtype_is_to_host(setup)) {
   290aa:	f994 0000 	ldrsb.w	r0, [r4]
		switch (setup->bRequest) {
   290ae:	7862      	ldrb	r2, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
   290b0:	2800      	cmp	r0, #0
   290b2:	f6bf af6f 	bge.w	28f94 <usb_handle_standard_request+0x198>
		switch (setup->bRequest) {
   290b6:	2a00      	cmp	r2, #0
   290b8:	f43f af64 	beq.w	28f84 <usb_handle_standard_request+0x188>
   290bc:	2a0a      	cmp	r2, #10
   290be:	f47f aed6 	bne.w	28e6e <usb_handle_standard_request+0x72>
	while (p[DESC_bLength] != 0U) {
   290c2:	782a      	ldrb	r2, [r5, #0]
   290c4:	2a00      	cmp	r2, #0
   290c6:	f43f aed2 	beq.w	28e6e <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
   290ca:	7869      	ldrb	r1, [r5, #1]
   290cc:	2904      	cmp	r1, #4
   290ce:	f47f af5f 	bne.w	28f90 <usb_handle_standard_request+0x194>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   290d2:	78a9      	ldrb	r1, [r5, #2]
			if (cur_iface == setup->wIndex) {
   290d4:	428b      	cmp	r3, r1
   290d6:	f47f af5b 	bne.w	28f90 <usb_handle_standard_request+0x194>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   290da:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
   290dc:	bf96      	itet	ls
   290de:	199b      	addls	r3, r3, r6
	return 0;
   290e0:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
   290e2:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
   290e6:	f88c 3000 	strb.w	r3, [ip]
   290ea:	e6d2      	b.n	28e92 <usb_handle_standard_request+0x96>

000290ec <usb_data_to_host>:
{
   290ec:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
   290ee:	4c13      	ldr	r4, [pc, #76]	; (2913c <usb_data_to_host+0x50>)
   290f0:	7d23      	ldrb	r3, [r4, #20]
   290f2:	b9cb      	cbnz	r3, 29128 <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
   290f4:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
   290f6:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
   290f8:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
   290fa:	ab01      	add	r3, sp, #4
   290fc:	2080      	movs	r0, #128	; 0x80
   290fe:	f01a f9ae 	bl	4345e <usb_write>
		usb_dev.data_buf += chunk;
   29102:	9a01      	ldr	r2, [sp, #4]
   29104:	68a3      	ldr	r3, [r4, #8]
   29106:	4413      	add	r3, r2
   29108:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   2910a:	68e3      	ldr	r3, [r4, #12]
   2910c:	1a9b      	subs	r3, r3, r2
   2910e:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
   29110:	b943      	cbnz	r3, 29124 <usb_data_to_host+0x38>
   29112:	b13a      	cbz	r2, 29124 <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
   29114:	6923      	ldr	r3, [r4, #16]
   29116:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
   29118:	429a      	cmp	r2, r3
   2911a:	dd03      	ble.n	29124 <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
   2911c:	069b      	lsls	r3, r3, #26
   2911e:	d101      	bne.n	29124 <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
   29120:	2301      	movs	r3, #1
   29122:	7523      	strb	r3, [r4, #20]
}
   29124:	b002      	add	sp, #8
   29126:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
   29128:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
   2912a:	461a      	mov	r2, r3
   2912c:	4619      	mov	r1, r3
   2912e:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
   29130:	7523      	strb	r3, [r4, #20]
}
   29132:	b002      	add	sp, #8
   29134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
   29138:	f014 bc6a 	b.w	3da10 <usb_dc_ep_write>
   2913c:	2000197c 	.word	0x2000197c

00029140 <usb_handle_control_transfer>:
{
   29140:	b530      	push	{r4, r5, lr}
   29142:	b085      	sub	sp, #20
	uint32_t chunk = 0U;
   29144:	2300      	movs	r3, #0
{
   29146:	4602      	mov	r2, r0
   29148:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
   2914a:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
   2914c:	2800      	cmp	r0, #0
   2914e:	d158      	bne.n	29202 <usb_handle_control_transfer+0xc2>
   29150:	2900      	cmp	r1, #0
   29152:	d135      	bne.n	291c0 <usb_handle_control_transfer+0x80>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
   29154:	2208      	movs	r2, #8
   29156:	460b      	mov	r3, r1
   29158:	eb0d 0102 	add.w	r1, sp, r2
   2915c:	f01e fc56 	bl	47a0c <usb_dc_ep_read>
   29160:	2800      	cmp	r0, #0
   29162:	da04      	bge.n	2916e <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   29164:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   29166:	f014 fb9f 	bl	3d8a8 <usb_dc_ep_set_stall>
}
   2916a:	b005      	add	sp, #20
   2916c:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
   2916e:	4c2a      	ldr	r4, [pc, #168]	; (29218 <usb_handle_control_transfer+0xd8>)
   29170:	9a02      	ldr	r2, [sp, #8]
   29172:	6022      	str	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
   29174:	9a03      	ldr	r2, [sp, #12]
   29176:	6062      	str	r2, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
   29178:	f104 0238 	add.w	r2, r4, #56	; 0x38
   2917c:	60a2      	str	r2, [r4, #8]
		if (usb_reqtype_is_to_device(setup)) {
   2917e:	f99d 2008 	ldrsb.w	r2, [sp, #8]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
   29182:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		usb_dev.zlp_flag = false;
   29186:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
   29188:	2a00      	cmp	r2, #0
		usb_dev.data_buf_residue = 0;
   2918a:	e9c4 5503 	strd	r5, r5, [r4, #12]
		if (usb_reqtype_is_to_device(setup)) {
   2918e:	db0a      	blt.n	291a6 <usb_handle_control_transfer+0x66>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
   29190:	2b80      	cmp	r3, #128	; 0x80
   29192:	d904      	bls.n	2919e <usb_handle_control_transfer+0x5e>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   29194:	2080      	movs	r0, #128	; 0x80
   29196:	f014 fb87 	bl	3d8a8 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   2919a:	2000      	movs	r0, #0
   2919c:	e7e3      	b.n	29166 <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
   2919e:	b113      	cbz	r3, 291a6 <usb_handle_control_transfer+0x66>
				usb_dev.data_buf_residue = setup->wLength;
   291a0:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
   291a4:	e7e1      	b.n	2916a <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
   291a6:	f7ff fd9b 	bl	28ce0 <usb_handle_request.constprop.0>
   291aa:	2800      	cmp	r0, #0
   291ac:	d0da      	beq.n	29164 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
   291ae:	88e2      	ldrh	r2, [r4, #6]
   291b0:	6923      	ldr	r3, [r4, #16]
   291b2:	429a      	cmp	r2, r3
   291b4:	bfd4      	ite	le
   291b6:	60e2      	strle	r2, [r4, #12]
   291b8:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
   291ba:	f7ff ff97 	bl	290ec <usb_data_to_host>
   291be:	e7d4      	b.n	2916a <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
   291c0:	4c15      	ldr	r4, [pc, #84]	; (29218 <usb_handle_control_transfer+0xd8>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   291c2:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
   291c6:	2d00      	cmp	r5, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   291c8:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
   291ca:	dc04      	bgt.n	291d6 <usb_handle_control_transfer+0x96>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   291cc:	f01e fc1e 	bl	47a0c <usb_dc_ep_read>
   291d0:	2800      	cmp	r0, #0
   291d2:	daca      	bge.n	2916a <usb_handle_control_transfer+0x2a>
   291d4:	e7c6      	b.n	29164 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   291d6:	462a      	mov	r2, r5
   291d8:	f01e fc18 	bl	47a0c <usb_dc_ep_read>
   291dc:	2800      	cmp	r0, #0
   291de:	dbd9      	blt.n	29194 <usb_handle_control_transfer+0x54>
		usb_dev.data_buf += chunk;
   291e0:	9a01      	ldr	r2, [sp, #4]
   291e2:	68a3      	ldr	r3, [r4, #8]
   291e4:	4413      	add	r3, r2
   291e6:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   291e8:	68e3      	ldr	r3, [r4, #12]
   291ea:	1a9b      	subs	r3, r3, r2
   291ec:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
   291ee:	2b00      	cmp	r3, #0
   291f0:	d1bb      	bne.n	2916a <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
   291f2:	f104 0338 	add.w	r3, r4, #56	; 0x38
   291f6:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
   291f8:	f7ff fd72 	bl	28ce0 <usb_handle_request.constprop.0>
   291fc:	2800      	cmp	r0, #0
   291fe:	d1dc      	bne.n	291ba <usb_handle_control_transfer+0x7a>
   29200:	e7b0      	b.n	29164 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
   29202:	2880      	cmp	r0, #128	; 0x80
   29204:	d1b1      	bne.n	2916a <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
   29206:	4b04      	ldr	r3, [pc, #16]	; (29218 <usb_handle_control_transfer+0xd8>)
   29208:	68da      	ldr	r2, [r3, #12]
   2920a:	2a00      	cmp	r2, #0
   2920c:	d1d5      	bne.n	291ba <usb_handle_control_transfer+0x7a>
   2920e:	7d1b      	ldrb	r3, [r3, #20]
   29210:	2b00      	cmp	r3, #0
   29212:	d1d2      	bne.n	291ba <usb_handle_control_transfer+0x7a>
   29214:	e7a9      	b.n	2916a <usb_handle_control_transfer+0x2a>
   29216:	bf00      	nop
   29218:	2000197c 	.word	0x2000197c

0002921c <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
   2921c:	4b05      	ldr	r3, [pc, #20]	; (29234 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
   2921e:	4a06      	ldr	r2, [pc, #24]	; (29238 <usb_set_config+0x1c>)
   29220:	629a      	str	r2, [r3, #40]	; 0x28
   29222:	4a06      	ldr	r2, [pc, #24]	; (2923c <usb_set_config+0x20>)
   29224:	62da      	str	r2, [r3, #44]	; 0x2c
   29226:	4a06      	ldr	r2, [pc, #24]	; (29240 <usb_set_config+0x24>)
   29228:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
   2922a:	4a06      	ldr	r2, [pc, #24]	; (29244 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
   2922c:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
   2922e:	619a      	str	r2, [r3, #24]

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
   29230:	2000      	movs	r0, #0
   29232:	4770      	bx	lr
   29234:	2000197c 	.word	0x2000197c
   29238:	00028dfd 	.word	0x00028dfd
   2923c:	00028b69 	.word	0x00028b69
   29240:	00028c09 	.word	0x00028c09
   29244:	00028ba9 	.word	0x00028ba9

00029248 <usb_device_init>:
 */
static int usb_device_init(const struct device *dev)
{
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
   29248:	4b08      	ldr	r3, [pc, #32]	; (2926c <usb_device_init+0x24>)
{
   2924a:	b510      	push	{r4, lr}
	if (usb_dev.enabled == true) {
   2924c:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
   29250:	b934      	cbnz	r4, 29260 <usb_device_init+0x18>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
   29252:	f000 f8cb 	bl	293ec <usb_get_device_descriptor>
	if (!device_descriptor) {
   29256:	b130      	cbz	r0, 29266 <usb_device_init+0x1e>
		LOG_ERR("Failed to configure USB device stack");
		return -1;
	}

	usb_set_config(device_descriptor);
   29258:	f7ff ffe0 	bl	2921c <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
   2925c:	4620      	mov	r0, r4
}
   2925e:	bd10      	pop	{r4, pc}
		return -EALREADY;
   29260:	f06f 0077 	mvn.w	r0, #119	; 0x77
   29264:	e7fb      	b.n	2925e <usb_device_init+0x16>
		return -1;
   29266:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2926a:	e7f8      	b.n	2925e <usb_device_init+0x16>
   2926c:	2000197c 	.word	0x2000197c

00029270 <usb_enable>:
{
   29270:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   29274:	4604      	mov	r4, r0
	if (usb_dev.enabled == true) {
   29276:	4d35      	ldr	r5, [pc, #212]	; (2934c <usb_enable+0xdc>)
	return z_impl_k_mutex_lock(mutex, timeout);
   29278:	4835      	ldr	r0, [pc, #212]	; (29350 <usb_enable+0xe0>)
   2927a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2927e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29282:	f018 f881 	bl	41388 <z_impl_k_mutex_lock>
   29286:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
   2928a:	2e00      	cmp	r6, #0
   2928c:	d15b      	bne.n	29346 <usb_enable+0xd6>
	usb_dev.status_callback = cb;
   2928e:	4831      	ldr	r0, [pc, #196]	; (29354 <usb_enable+0xe4>)
	usb_dev.user_status_callback = status_cb;
   29290:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
   29292:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
   29294:	f014 fcd6 	bl	3dc44 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
   29298:	f014 fa94 	bl	3d7c4 <usb_dc_attach>
	if (ret < 0) {
   2929c:	1e04      	subs	r4, r0, #0
   2929e:	db36      	blt.n	2930e <usb_enable+0x9e>
	ret = usb_transfer_init();
   292a0:	f000 fa5a 	bl	29758 <usb_transfer_init>
	if (ret < 0) {
   292a4:	1e04      	subs	r4, r0, #0
   292a6:	db32      	blt.n	2930e <usb_enable+0x9e>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
   292a8:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
   292aa:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
   292ac:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
   292b0:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
   292b4:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
   292b8:	f014 fad4 	bl	3d864 <usb_dc_ep_configure>
	if (ret < 0) {
   292bc:	1e04      	subs	r4, r0, #0
   292be:	db26      	blt.n	2930e <usb_enable+0x9e>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
   292c0:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
   292c2:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
   292c4:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
   292c8:	f014 facc 	bl	3d864 <usb_dc_ep_configure>
	if (ret < 0) {
   292cc:	1e04      	subs	r4, r0, #0
   292ce:	db1e      	blt.n	2930e <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
   292d0:	4921      	ldr	r1, [pc, #132]	; (29358 <usb_enable+0xe8>)
   292d2:	4630      	mov	r0, r6
   292d4:	f014 fca2 	bl	3dc1c <usb_dc_ep_set_callback>
	if (ret < 0) {
   292d8:	1e04      	subs	r4, r0, #0
   292da:	db18      	blt.n	2930e <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
   292dc:	491e      	ldr	r1, [pc, #120]	; (29358 <usb_enable+0xe8>)
   292de:	4638      	mov	r0, r7
   292e0:	f014 fc9c 	bl	3dc1c <usb_dc_ep_set_callback>
	if (ret < 0) {
   292e4:	1e04      	subs	r4, r0, #0
   292e6:	db12      	blt.n	2930e <usb_enable+0x9e>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   292e8:	4c1c      	ldr	r4, [pc, #112]	; (2935c <usb_enable+0xec>)
   292ea:	f8df 8074 	ldr.w	r8, [pc, #116]	; 29360 <usb_enable+0xf0>
   292ee:	4544      	cmp	r4, r8
   292f0:	d314      	bcc.n	2931c <usb_enable+0xac>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
   292f2:	2000      	movs	r0, #0
   292f4:	f014 fb3c 	bl	3d970 <usb_dc_ep_enable>
	if (ret < 0) {
   292f8:	1e04      	subs	r4, r0, #0
   292fa:	db08      	blt.n	2930e <usb_enable+0x9e>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
   292fc:	2080      	movs	r0, #128	; 0x80
   292fe:	f014 fb37 	bl	3d970 <usb_dc_ep_enable>
	if (ret < 0) {
   29302:	1e04      	subs	r4, r0, #0
   29304:	db03      	blt.n	2930e <usb_enable+0x9e>
	usb_dev.enabled = true;
   29306:	2301      	movs	r3, #1
   29308:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
   2930c:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
   2930e:	4810      	ldr	r0, [pc, #64]	; (29350 <usb_enable+0xe0>)
   29310:	f018 f8b2 	bl	41478 <z_impl_k_mutex_unlock>
}
   29314:	4620      	mov	r0, r4
   29316:	b002      	add	sp, #8
   29318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
   2931c:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   2931e:	2600      	movs	r6, #0
   29320:	7f22      	ldrb	r2, [r4, #28]
   29322:	b2f3      	uxtb	r3, r6
   29324:	429a      	cmp	r2, r3
   29326:	d801      	bhi.n	2932c <usb_enable+0xbc>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   29328:	3424      	adds	r4, #36	; 0x24
   2932a:	e7e0      	b.n	292ee <usb_enable+0x7e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
   2932c:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   29330:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   29334:	7910      	ldrb	r0, [r2, #4]
   29336:	f014 fc71 	bl	3dc1c <usb_dc_ep_set_callback>
   2933a:	3601      	adds	r6, #1
   2933c:	2800      	cmp	r0, #0
   2933e:	d0ef      	beq.n	29320 <usb_enable+0xb0>
   29340:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   29344:	e7e3      	b.n	2930e <usb_enable+0x9e>
		ret = -EALREADY;
   29346:	f06f 0477 	mvn.w	r4, #119	; 0x77
   2934a:	e7e0      	b.n	2930e <usb_enable+0x9e>
   2934c:	2000197c 	.word	0x2000197c
   29350:	20000b18 	.word	0x20000b18
   29354:	00028d0d 	.word	0x00028d0d
   29358:	00029141 	.word	0x00029141
   2935c:	20000d81 	.word	0x20000d81
   29360:	20000d81 	.word	0x20000d81

00029364 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
   29364:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
   29366:	4b1f      	ldr	r3, [pc, #124]	; (293e4 <usb_update_sn_string_descriptor+0x80>)
{
   29368:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
   2936a:	aa05      	add	r2, sp, #20
   2936c:	f103 0510 	add.w	r5, r3, #16
   29370:	6818      	ldr	r0, [r3, #0]
   29372:	6859      	ldr	r1, [r3, #4]
   29374:	4614      	mov	r4, r2
   29376:	c403      	stmia	r4!, {r0, r1}
   29378:	3308      	adds	r3, #8
   2937a:	42ab      	cmp	r3, r5
   2937c:	4622      	mov	r2, r4
   2937e:	d1f7      	bne.n	29370 <usb_update_sn_string_descriptor+0xc>
   29380:	781b      	ldrb	r3, [r3, #0]
   29382:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
   29384:	2210      	movs	r2, #16
   29386:	2100      	movs	r1, #0
   29388:	a801      	add	r0, sp, #4
   2938a:	f01b fba5 	bl	44ad8 <memset>
	memset(sn, 0, sizeof(sn));
   2938e:	2212      	movs	r2, #18
   29390:	2100      	movs	r1, #0
   29392:	4815      	ldr	r0, [pc, #84]	; (293e8 <usb_update_sn_string_descriptor+0x84>)
   29394:	f01b fba0 	bl	44ad8 <memset>
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
   29398:	2110      	movs	r1, #16
   2939a:	a801      	add	r0, sp, #4
   2939c:	f01e fc40 	bl	47c20 <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
   293a0:	2800      	cmp	r0, #0
   293a2:	dd1b      	ble.n	293dc <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
   293a4:	2808      	cmp	r0, #8
   293a6:	bfb8      	it	lt
   293a8:	2008      	movlt	r0, #8
   293aa:	3809      	subs	r0, #9
   293ac:	ab01      	add	r3, sp, #4
   293ae:	490e      	ldr	r1, [pc, #56]	; (293e8 <usb_update_sn_string_descriptor+0x84>)
   293b0:	181a      	adds	r2, r3, r0
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
   293b2:	2000      	movs	r0, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   293b4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   293b8:	ac0a      	add	r4, sp, #40	; 0x28
   293ba:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   293be:	f003 030f 	and.w	r3, r3, #15
   293c2:	3328      	adds	r3, #40	; 0x28
   293c4:	446b      	add	r3, sp
		for (int i = 0; i < usblen; i++) {
   293c6:	3001      	adds	r0, #1
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   293c8:	f814 4c14 	ldrb.w	r4, [r4, #-20]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   293cc:	f813 3c14 	ldrb.w	r3, [r3, #-20]
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   293d0:	700c      	strb	r4, [r1, #0]
		for (int i = 0; i < usblen; i++) {
   293d2:	2808      	cmp	r0, #8
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   293d4:	704b      	strb	r3, [r1, #1]
		for (int i = 0; i < usblen; i++) {
   293d6:	f101 0102 	add.w	r1, r1, #2
   293da:	d1eb      	bne.n	293b4 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
   293dc:	4802      	ldr	r0, [pc, #8]	; (293e8 <usb_update_sn_string_descriptor+0x84>)
   293de:	b00b      	add	sp, #44	; 0x2c
   293e0:	bd30      	pop	{r4, r5, pc}
   293e2:	bf00      	nop
   293e4:	0004ad4d 	.word	0x0004ad4d
   293e8:	20003b5a 	.word	0x20003b5a

000293ec <usb_get_device_descriptor>:
	return 0;
}


uint8_t *usb_get_device_descriptor(void)
{
   293ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   293f0:	4c64      	ldr	r4, [pc, #400]	; (29584 <usb_get_device_descriptor+0x198>)
   293f2:	b085      	sub	sp, #20
	uint8_t str_descr_idx = 0U;
   293f4:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
   293f6:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
   293fa:	46b1      	mov	r9, r6
	struct usb_cfg_data *cfg_data = NULL;
   293fc:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
   293fe:	46b2      	mov	sl, r6
	while (head->bLength != 0U) {
   29400:	7823      	ldrb	r3, [r4, #0]
   29402:	b92b      	cbnz	r3, 29410 <usb_get_device_descriptor+0x24>
	if ((head + 1) != __usb_descriptor_end) {
   29404:	4b60      	ldr	r3, [pc, #384]	; (29588 <usb_get_device_descriptor+0x19c>)
   29406:	3402      	adds	r4, #2
   29408:	429c      	cmp	r4, r3
   2940a:	d1f3      	bne.n	293f4 <usb_get_device_descriptor+0x8>
	if (usb_fix_descriptor(__usb_descriptor_start)) {
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
   2940c:	485d      	ldr	r0, [pc, #372]	; (29584 <usb_get_device_descriptor+0x198>)
   2940e:	e01c      	b.n	2944a <usb_get_device_descriptor+0x5e>
		switch (head->bDescriptorType) {
   29410:	7863      	ldrb	r3, [r4, #1]
   29412:	2b05      	cmp	r3, #5
   29414:	d805      	bhi.n	29422 <usb_get_device_descriptor+0x36>
   29416:	e8df f003 	tbb	[pc, r3]
   2941a:	047b      	.short	0x047b
   2941c:	25077b03 	.word	0x25077b03
   29420:	46a2      	mov	sl, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
   29422:	7823      	ldrb	r3, [r4, #0]
   29424:	441c      	add	r4, r3
   29426:	e7eb      	b.n	29400 <usb_get_device_descriptor+0x14>
			if (if_descr->bAlternateSetting) {
   29428:	78e3      	ldrb	r3, [r4, #3]
   2942a:	2b00      	cmp	r3, #0
   2942c:	d1f9      	bne.n	29422 <usb_get_device_descriptor+0x36>
			if (if_descr->bInterfaceNumber == 0U) {
   2942e:	78a3      	ldrb	r3, [r4, #2]
   29430:	b173      	cbz	r3, 29450 <usb_get_device_descriptor+0x64>
			numof_ifaces++;
   29432:	f109 0901 	add.w	r9, r9, #1
   29436:	fa5f f989 	uxtb.w	r9, r9
			break;
   2943a:	e7f2      	b.n	29422 <usb_get_device_descriptor+0x36>
		if (cfg_data->interface_descriptor == iface) {
   2943c:	686a      	ldr	r2, [r5, #4]
   2943e:	4294      	cmp	r4, r2
   29440:	d009      	beq.n	29456 <usb_get_device_descriptor+0x6a>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   29442:	3524      	adds	r5, #36	; 0x24
   29444:	429d      	cmp	r5, r3
   29446:	d3f9      	bcc.n	2943c <usb_get_device_descriptor+0x50>
		return NULL;
   29448:	2000      	movs	r0, #0
}
   2944a:	b005      	add	sp, #20
   2944c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   29450:	4d4e      	ldr	r5, [pc, #312]	; (2958c <usb_get_device_descriptor+0x1a0>)
   29452:	4b4f      	ldr	r3, [pc, #316]	; (29590 <usb_get_device_descriptor+0x1a4>)
   29454:	e7f6      	b.n	29444 <usb_get_device_descriptor+0x58>
				if (cfg_data->interface_config) {
   29456:	68ab      	ldr	r3, [r5, #8]
   29458:	2b00      	cmp	r3, #0
   2945a:	d0ea      	beq.n	29432 <usb_get_device_descriptor+0x46>
					cfg_data->interface_config(head,
   2945c:	4649      	mov	r1, r9
   2945e:	4620      	mov	r0, r4
   29460:	4798      	blx	r3
   29462:	e7e6      	b.n	29432 <usb_get_device_descriptor+0x46>
			if (!cfg_data) {
   29464:	2d00      	cmp	r5, #0
   29466:	d0ef      	beq.n	29448 <usb_get_device_descriptor+0x5c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   29468:	2300      	movs	r3, #0
   2946a:	2101      	movs	r1, #1
   2946c:	7f2a      	ldrb	r2, [r5, #28]
   2946e:	4293      	cmp	r3, r2
   29470:	d2ea      	bcs.n	29448 <usb_get_device_descriptor+0x5c>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
   29472:	6a2a      	ldr	r2, [r5, #32]
   29474:	78a7      	ldrb	r7, [r4, #2]
   29476:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   2947a:	7910      	ldrb	r0, [r2, #4]
   2947c:	4287      	cmp	r7, r0
   2947e:	d001      	beq.n	29484 <usb_get_device_descriptor+0x98>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   29480:	3301      	adds	r3, #1
   29482:	e7f3      	b.n	2946c <usb_get_device_descriptor+0x80>
   29484:	2701      	movs	r7, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
   29486:	78e0      	ldrb	r0, [r4, #3]
   29488:	f000 0003 	and.w	r0, r0, #3
   2948c:	f88d 000c 	strb.w	r0, [sp, #12]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
   29490:	7920      	ldrb	r0, [r4, #4]
   29492:	f894 c005 	ldrb.w	ip, [r4, #5]
   29496:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
   2949a:	f8ad 000a 	strh.w	r0, [sp, #10]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   2949e:	f994 0002 	ldrsb.w	r0, [r4, #2]
   294a2:	2800      	cmp	r0, #0
   294a4:	fa5f f887 	uxtb.w	r8, r7
   294a8:	da27      	bge.n	294fa <usb_get_device_descriptor+0x10e>
				if ((*requested_ep & (1U << (idx + 16U)))) {
   294aa:	f107 0010 	add.w	r0, r7, #16
   294ae:	fa01 f000 	lsl.w	r0, r1, r0
   294b2:	ea10 0f0b 	tst.w	r0, fp
   294b6:	d127      	bne.n	29508 <usb_get_device_descriptor+0x11c>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
   294b8:	f048 0080 	orr.w	r0, r8, #128	; 0x80
   294bc:	f88d 0008 	strb.w	r0, [sp, #8]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
   294c0:	a802      	add	r0, sp, #8
   294c2:	e9cd 3200 	strd	r3, r2, [sp]
   294c6:	f01e fa89 	bl	479dc <usb_dc_ep_check_cap>
   294ca:	e9dd 3200 	ldrd	r3, r2, [sp]
   294ce:	2101      	movs	r1, #1
   294d0:	b9d0      	cbnz	r0, 29508 <usb_get_device_descriptor+0x11c>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
   294d2:	f89d 3008 	ldrb.w	r3, [sp, #8]
   294d6:	70a3      	strb	r3, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   294d8:	f013 0f80 	tst.w	r3, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
   294dc:	bf18      	it	ne
   294de:	f108 0810 	addne.w	r8, r8, #16
				ep_data[i].ep_addr = ep_cfg.ep_addr;
   294e2:	7113      	strb	r3, [r2, #4]
					*requested_ep |= (1U << (idx + 16U));
   294e4:	bf18      	it	ne
   294e6:	fa5f f888 	uxtbne.w	r8, r8
   294ea:	460b      	mov	r3, r1
					*requested_ep |= (1U << idx);
   294ec:	bf0c      	ite	eq
   294ee:	40bb      	lsleq	r3, r7
					*requested_ep |= (1U << (idx + 16U));
   294f0:	fa01 f308 	lslne.w	r3, r1, r8
					*requested_ep |= (1U << idx);
   294f4:	ea4b 0b03 	orr.w	fp, fp, r3
				return 0;
   294f8:	e793      	b.n	29422 <usb_get_device_descriptor+0x36>
				if ((*requested_ep & (1U << (idx)))) {
   294fa:	fa01 f007 	lsl.w	r0, r1, r7
   294fe:	ea10 0f0b 	tst.w	r0, fp
   29502:	d101      	bne.n	29508 <usb_get_device_descriptor+0x11c>
   29504:	4640      	mov	r0, r8
   29506:	e7d9      	b.n	294bc <usb_get_device_descriptor+0xd0>
		for (uint8_t idx = 1; idx < 16U; idx++) {
   29508:	3701      	adds	r7, #1
   2950a:	2f10      	cmp	r7, #16
   2950c:	d1bb      	bne.n	29486 <usb_get_device_descriptor+0x9a>
   2950e:	e7b7      	b.n	29480 <usb_get_device_descriptor+0x94>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
   29510:	2e03      	cmp	r6, #3
   29512:	d11d      	bne.n	29550 <usb_get_device_descriptor+0x164>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
   29514:	f7ff ff26 	bl	29364 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
   29518:	4607      	mov	r7, r0
   2951a:	b168      	cbz	r0, 29538 <usb_get_device_descriptor+0x14c>
	runtime_sn_len = strlen(runtime_sn);
   2951c:	f01b fa9a 	bl	44a54 <strlen>
	if (!runtime_sn_len) {
   29520:	4680      	mov	r8, r0
   29522:	b148      	cbz	r0, 29538 <usb_get_device_descriptor+0x14c>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
   29524:	481b      	ldr	r0, [pc, #108]	; (29594 <usb_get_device_descriptor+0x1a8>)
   29526:	f01b fa95 	bl	44a54 <strlen>
	if (runtime_sn_len != default_sn_len) {
   2952a:	4580      	cmp	r8, r0
   2952c:	d104      	bne.n	29538 <usb_get_device_descriptor+0x14c>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
   2952e:	4642      	mov	r2, r8
   29530:	4639      	mov	r1, r7
   29532:	1ca0      	adds	r0, r4, #2
   29534:	f01b fac5 	bl	44ac2 <memcpy>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
   29538:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
   2953a:	f06f 0102 	mvn.w	r1, #2
   2953e:	18e2      	adds	r2, r4, r3
   29540:	1b09      	subs	r1, r1, r4
   29542:	eb04 0353 	add.w	r3, r4, r3, lsr #1
   29546:	42d1      	cmn	r1, r2
   29548:	d513      	bpl.n	29572 <usb_get_device_descriptor+0x186>
			str_descr_idx += 1U;
   2954a:	3601      	adds	r6, #1
   2954c:	b2f6      	uxtb	r6, r6
			break;
   2954e:	e768      	b.n	29422 <usb_get_device_descriptor+0x36>
			if (str_descr_idx) {
   29550:	2e00      	cmp	r6, #0
   29552:	d1f1      	bne.n	29538 <usb_get_device_descriptor+0x14c>
				if (!cfg_descr) {
   29554:	f1ba 0f00 	cmp.w	sl, #0
   29558:	f43f af76 	beq.w	29448 <usb_get_device_descriptor+0x5c>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
   2955c:	eba4 030a 	sub.w	r3, r4, sl
	dst[0] = val;
   29560:	f88a 3002 	strb.w	r3, [sl, #2]
	dst[1] = val >> 8;
   29564:	f3c3 2307 	ubfx	r3, r3, #8, #8
   29568:	f88a 3003 	strb.w	r3, [sl, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
   2956c:	f88a 9004 	strb.w	r9, [sl, #4]
   29570:	e7eb      	b.n	2954a <usb_get_device_descriptor+0x15e>
		buf[i] = 0U;
   29572:	f04f 0000 	mov.w	r0, #0
   29576:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
   2957a:	f813 0901 	ldrb.w	r0, [r3], #-1
   2957e:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
   29582:	e7e0      	b.n	29546 <usb_get_device_descriptor+0x15a>
   29584:	20000d24 	.word	0x20000d24
   29588:	20000d81 	.word	0x20000d81
   2958c:	20000d81 	.word	0x20000d81
   29590:	20000d81 	.word	0x20000d81
   29594:	0004ad4d 	.word	0x0004ad4d

00029598 <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
   29598:	b510      	push	{r4, lr}
   2959a:	4b09      	ldr	r3, [pc, #36]	; (295c0 <usb_ep_get_transfer+0x28>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   2959c:	2100      	movs	r1, #0
   2959e:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
   295a0:	781c      	ldrb	r4, [r3, #0]
   295a2:	4284      	cmp	r4, r0
   295a4:	d105      	bne.n	295b2 <usb_ep_get_transfer+0x1a>
   295a6:	685c      	ldr	r4, [r3, #4]
   295a8:	b11c      	cbz	r4, 295b2 <usb_ep_get_transfer+0x1a>
			return &ut_data[i];
   295aa:	2348      	movs	r3, #72	; 0x48
   295ac:	fb03 2001 	mla	r0, r3, r1, r2
		}
	}

	return NULL;
}
   295b0:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   295b2:	3101      	adds	r1, #1
   295b4:	2904      	cmp	r1, #4
   295b6:	f103 0348 	add.w	r3, r3, #72	; 0x48
   295ba:	d1f1      	bne.n	295a0 <usb_ep_get_transfer+0x8>
	return NULL;
   295bc:	2000      	movs	r0, #0
   295be:	e7f7      	b.n	295b0 <usb_ep_get_transfer+0x18>
   295c0:	20001a40 	.word	0x20001a40

000295c4 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
   295c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
   295c8:	f850 3c30 	ldr.w	r3, [r0, #-48]
	ep = trans->ep;
   295cc:	f810 6c34 	ldrb.w	r6, [r0, #-52]
	if (trans->status != -EBUSY) {
   295d0:	3310      	adds	r3, #16
{
   295d2:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
   295d4:	d110      	bne.n	295f8 <usb_transfer_work+0x34>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
   295d6:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
   295d8:	f850 2c28 	ldr.w	r2, [r0, #-40]
	if (trans->flags & USB_TRANS_WRITE) {
   295dc:	0799      	lsls	r1, r3, #30
   295de:	d53c      	bpl.n	2965a <usb_transfer_work+0x96>
		if (!trans->bsize) {
   295e0:	bb02      	cbnz	r2, 29624 <usb_transfer_work+0x60>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
   295e2:	f013 0304 	ands.w	r3, r3, #4
   295e6:	d104      	bne.n	295f2 <usb_transfer_work+0x2e>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
   295e8:	461a      	mov	r2, r3
   295ea:	4619      	mov	r1, r3
   295ec:	4630      	mov	r0, r6
   295ee:	f019 ff36 	bl	4345e <usb_write>
			}
			trans->status = 0;
   295f2:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
   295f4:	f844 3c30 	str.w	r3, [r4, #-48]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
   295f8:	f854 3c30 	ldr.w	r3, [r4, #-48]
   295fc:	3310      	adds	r3, #16
   295fe:	d00e      	beq.n	2961e <usb_transfer_work+0x5a>
   29600:	f854 5c20 	ldr.w	r5, [r4, #-32]
   29604:	b15d      	cbz	r5, 2961e <usb_transfer_work+0x5a>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
   29606:	f854 7c24 	ldr.w	r7, [r4, #-36]
		void *priv = trans->priv;
   2960a:	f854 8c1c 	ldr.w	r8, [r4, #-28]

		if (k_is_in_isr()) {
   2960e:	f01e ffab 	bl	48568 <k_is_in_isr>
   29612:	2800      	cmp	r0, #0
   29614:	d04c      	beq.n	296b0 <usb_transfer_work+0xec>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   29616:	482e      	ldr	r0, [pc, #184]	; (296d0 <usb_transfer_work+0x10c>)
   29618:	4621      	mov	r1, r4
   2961a:	f01f f921 	bl	48860 <k_work_submit_to_queue>
		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
			cb(ep, tsize, priv);
		}
	}
}
   2961e:	b002      	add	sp, #8
   29620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
   29624:	f850 1c2c 	ldr.w	r1, [r0, #-44]
   29628:	ab01      	add	r3, sp, #4
   2962a:	4630      	mov	r0, r6
   2962c:	f019 ff17 	bl	4345e <usb_write>
		if (ret) {
   29630:	b110      	cbz	r0, 29638 <usb_transfer_work+0x74>
			trans->status = -EINVAL;
   29632:	f06f 0315 	mvn.w	r3, #21
   29636:	e7dd      	b.n	295f4 <usb_transfer_work+0x30>
		trans->buffer += bytes;
   29638:	9a01      	ldr	r2, [sp, #4]
   2963a:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   2963e:	4413      	add	r3, r2
   29640:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
   29644:	f854 3c28 	ldr.w	r3, [r4, #-40]
   29648:	1a9b      	subs	r3, r3, r2
   2964a:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
   2964e:	f854 3c24 	ldr.w	r3, [r4, #-36]
   29652:	4413      	add	r3, r2
   29654:	f844 3c24 	str.w	r3, [r4, #-36]
   29658:	e7ce      	b.n	295f8 <usb_transfer_work+0x34>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
   2965a:	f850 1c2c 	ldr.w	r1, [r0, #-44]
   2965e:	ab01      	add	r3, sp, #4
   29660:	4630      	mov	r0, r6
   29662:	f014 fa51 	bl	3db08 <usb_dc_ep_read_wait>
		if (ret) {
   29666:	2800      	cmp	r0, #0
   29668:	d1e3      	bne.n	29632 <usb_transfer_work+0x6e>
		trans->buffer += bytes;
   2966a:	9d01      	ldr	r5, [sp, #4]
   2966c:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   29670:	442b      	add	r3, r5
   29672:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
   29676:	f854 3c28 	ldr.w	r3, [r4, #-40]
   2967a:	1b5b      	subs	r3, r3, r5
   2967c:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
   29680:	f854 3c24 	ldr.w	r3, [r4, #-36]
   29684:	442b      	add	r3, r5
   29686:	f844 3c24 	str.w	r3, [r4, #-36]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
   2968a:	2d00      	cmp	r5, #0
   2968c:	d0b1      	beq.n	295f2 <usb_transfer_work+0x2e>
   2968e:	4630      	mov	r0, r6
   29690:	f014 fade 	bl	3dc50 <usb_dc_ep_mps>
   29694:	fbb5 f3f0 	udiv	r3, r5, r0
   29698:	fb03 5510 	mls	r5, r3, r0, r5
   2969c:	2d00      	cmp	r5, #0
   2969e:	d1a8      	bne.n	295f2 <usb_transfer_work+0x2e>
   296a0:	f854 3c28 	ldr.w	r3, [r4, #-40]
   296a4:	2b00      	cmp	r3, #0
   296a6:	d0a4      	beq.n	295f2 <usb_transfer_work+0x2e>
		usb_dc_ep_read_continue(ep);
   296a8:	4630      	mov	r0, r6
   296aa:	f014 fa75 	bl	3db98 <usb_dc_ep_read_continue>
   296ae:	e7a3      	b.n	295f8 <usb_transfer_work+0x34>
		trans->cb = NULL;
   296b0:	f844 0c20 	str.w	r0, [r4, #-32]
	z_impl_k_sem_give(sem);
   296b4:	f1a4 0018 	sub.w	r0, r4, #24
   296b8:	f017 ff54 	bl	41564 <z_impl_k_sem_give>
		if (trans->status != -ECANCELED) {
   296bc:	f854 3c30 	ldr.w	r3, [r4, #-48]
   296c0:	338c      	adds	r3, #140	; 0x8c
   296c2:	d0ac      	beq.n	2961e <usb_transfer_work+0x5a>
			cb(ep, tsize, priv);
   296c4:	4642      	mov	r2, r8
   296c6:	4639      	mov	r1, r7
   296c8:	4630      	mov	r0, r6
   296ca:	47a8      	blx	r5
   296cc:	e7a7      	b.n	2961e <usb_transfer_work+0x5a>
   296ce:	bf00      	nop
   296d0:	200018c0 	.word	0x200018c0

000296d4 <usb_cancel_transfer>:
	irq_unlock(key);
	return ret;
}

void usb_cancel_transfer(uint8_t ep)
{
   296d4:	b510      	push	{r4, lr}
   296d6:	f04f 0320 	mov.w	r3, #32
   296da:	f3ef 8411 	mrs	r4, BASEPRI
   296de:	f383 8812 	msr	BASEPRI_MAX, r3
   296e2:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
   296e6:	f7ff ff57 	bl	29598 <usb_ep_get_transfer>
	if (!trans) {
   296ea:	b150      	cbz	r0, 29702 <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
   296ec:	6843      	ldr	r3, [r0, #4]
   296ee:	3310      	adds	r3, #16
   296f0:	d107      	bne.n	29702 <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
   296f2:	f06f 038b 	mvn.w	r3, #139	; 0x8b
   296f6:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   296f8:	f100 0134 	add.w	r1, r0, #52	; 0x34
   296fc:	4803      	ldr	r0, [pc, #12]	; (2970c <usb_cancel_transfer+0x38>)
   296fe:	f01f f8af 	bl	48860 <k_work_submit_to_queue>
	__asm__ volatile(
   29702:	f384 8811 	msr	BASEPRI, r4
   29706:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
   2970a:	bd10      	pop	{r4, pc}
   2970c:	200018c0 	.word	0x200018c0

00029710 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
   29710:	b570      	push	{r4, r5, r6, lr}
   29712:	4c0f      	ldr	r4, [pc, #60]	; (29750 <usb_cancel_transfers+0x40>)
   29714:	2504      	movs	r5, #4
	__asm__ volatile(
   29716:	f04f 0320 	mov.w	r3, #32
   2971a:	f3ef 8611 	mrs	r6, BASEPRI
   2971e:	f383 8812 	msr	BASEPRI_MAX, r3
   29722:	f3bf 8f6f 	isb	sy
		struct usb_transfer_data *trans = &ut_data[i];
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
   29726:	6863      	ldr	r3, [r4, #4]
   29728:	3310      	adds	r3, #16
   2972a:	d107      	bne.n	2973c <usb_cancel_transfers+0x2c>
			trans->status = -ECANCELED;
   2972c:	f06f 038b 	mvn.w	r3, #139	; 0x8b
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   29730:	4808      	ldr	r0, [pc, #32]	; (29754 <usb_cancel_transfers+0x44>)
			trans->status = -ECANCELED;
   29732:	6063      	str	r3, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   29734:	f104 0134 	add.w	r1, r4, #52	; 0x34
   29738:	f01f f892 	bl	48860 <k_work_submit_to_queue>
	__asm__ volatile(
   2973c:	f386 8811 	msr	BASEPRI, r6
   29740:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   29744:	3d01      	subs	r5, #1
   29746:	f104 0448 	add.w	r4, r4, #72	; 0x48
   2974a:	d1e4      	bne.n	29716 <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
   2974c:	bd70      	pop	{r4, r5, r6, pc}
   2974e:	bf00      	nop
   29750:	20001a40 	.word	0x20001a40
   29754:	200018c0 	.word	0x200018c0

00029758 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
   29758:	b570      	push	{r4, r5, r6, lr}
   2975a:	4c0a      	ldr	r4, [pc, #40]	; (29784 <usb_transfer_init+0x2c>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
   2975c:	4e0a      	ldr	r6, [pc, #40]	; (29788 <usb_transfer_init+0x30>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   2975e:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
   29760:	4631      	mov	r1, r6
   29762:	4620      	mov	r0, r4
   29764:	f01f f873 	bl	4884e <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
   29768:	2201      	movs	r2, #1
   2976a:	f1a4 0018 	sub.w	r0, r4, #24
   2976e:	4611      	mov	r1, r2
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   29770:	3501      	adds	r5, #1
   29772:	f01e ffec 	bl	4874e <z_impl_k_sem_init>
   29776:	2d04      	cmp	r5, #4
   29778:	f104 0448 	add.w	r4, r4, #72	; 0x48
   2977c:	d1f0      	bne.n	29760 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
   2977e:	2000      	movs	r0, #0
   29780:	bd70      	pop	{r4, r5, r6, pc}
   29782:	bf00      	nop
   29784:	20001a74 	.word	0x20001a74
   29788:	000295c5 	.word	0x000295c5

0002978c <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   2978c:	4b0c      	ldr	r3, [pc, #48]	; (297c0 <flash_area_open+0x34>)
   2978e:	681b      	ldr	r3, [r3, #0]
{
   29790:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
   29792:	b193      	cbz	r3, 297ba <flash_area_open+0x2e>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   29794:	4a0b      	ldr	r2, [pc, #44]	; (297c4 <flash_area_open+0x38>)
   29796:	6815      	ldr	r5, [r2, #0]
   29798:	2200      	movs	r2, #0
   2979a:	42aa      	cmp	r2, r5
   2979c:	db02      	blt.n	297a4 <flash_area_open+0x18>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   2979e:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;
	return 0;
}
   297a2:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   297a4:	461c      	mov	r4, r3
   297a6:	f814 6b10 	ldrb.w	r6, [r4], #16
   297aa:	4286      	cmp	r6, r0
   297ac:	d002      	beq.n	297b4 <flash_area_open+0x28>
	for (int i = 0; i < flash_map_entries; i++) {
   297ae:	3201      	adds	r2, #1
   297b0:	4623      	mov	r3, r4
   297b2:	e7f2      	b.n	2979a <flash_area_open+0xe>
	*fap = area;
   297b4:	600b      	str	r3, [r1, #0]
	return 0;
   297b6:	2000      	movs	r0, #0
   297b8:	e7f3      	b.n	297a2 <flash_area_open+0x16>
		return -EACCES;
   297ba:	f06f 000c 	mvn.w	r0, #12
   297be:	e7f0      	b.n	297a2 <flash_area_open+0x16>
   297c0:	20000324 	.word	0x20000324
   297c4:	000496e8 	.word	0x000496e8

000297c8 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   297c8:	b570      	push	{r4, r5, r6, lr}
   297ca:	b088      	sub	sp, #32
   297cc:	4605      	mov	r5, r0
   297ce:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
   297d0:	b2c0      	uxtb	r0, r0
   297d2:	4669      	mov	r1, sp
{
   297d4:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
   297d6:	f7ff ffd9 	bl	2978c <flash_area_open>
	if (rc < 0 || fa == NULL) {
   297da:	2800      	cmp	r0, #0
   297dc:	db1f      	blt.n	2981e <flash_area_get_sectors+0x56>
   297de:	9b00      	ldr	r3, [sp, #0]
   297e0:	b1eb      	cbz	r3, 2981e <flash_area_get_sectors+0x56>
	cb_data->area_off = fa->fa_off;
   297e2:	685a      	ldr	r2, [r3, #4]
   297e4:	9202      	str	r2, [sp, #8]
	cb_data->area_len = fa->fa_size;
   297e6:	689a      	ldr	r2, [r3, #8]
	cb_data->ret_len = *cnt;
   297e8:	6821      	ldr	r1, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
   297ea:	68d8      	ldr	r0, [r3, #12]
	cb_data->area_idx = idx;
   297ec:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
   297ee:	e9cd 2603 	strd	r2, r6, [sp, #12]
	cb_data->ret_idx = 0U;
   297f2:	2200      	movs	r2, #0
	cb_data->status = 0;
   297f4:	e9cd 1206 	strd	r1, r2, [sp, #24]
	cb_data->ret_idx = 0U;
   297f8:	9205      	str	r2, [sp, #20]
   297fa:	f017 faeb 	bl	40dd4 <z_impl_device_get_binding>
   297fe:	4605      	mov	r5, r0
	flash_area_close(fa);
   29800:	9800      	ldr	r0, [sp, #0]
   29802:	f019 fe44 	bl	4348e <flash_area_close>
	if (flash_dev == NULL) {
   29806:	b16d      	cbz	r5, 29824 <flash_area_get_sectors+0x5c>
	flash_page_foreach(flash_dev, cb, cb_data);
   29808:	4628      	mov	r0, r5
   2980a:	4908      	ldr	r1, [pc, #32]	; (2982c <flash_area_get_sectors+0x64>)
   2980c:	aa01      	add	r2, sp, #4
   2980e:	f01e faa2 	bl	47d56 <flash_page_foreach>
	if (cb_data->status == 0) {
   29812:	9807      	ldr	r0, [sp, #28]
   29814:	b908      	cbnz	r0, 2981a <flash_area_get_sectors+0x52>
		*cnt = cb_data->ret_idx;
   29816:	9b05      	ldr	r3, [sp, #20]
   29818:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   2981a:	b008      	add	sp, #32
   2981c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2981e:	f06f 0015 	mvn.w	r0, #21
   29822:	e7fa      	b.n	2981a <flash_area_get_sectors+0x52>
		return -ENODEV;
   29824:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   29828:	e7f7      	b.n	2981a <flash_area_get_sectors+0x52>
   2982a:	bf00      	nop
   2982c:	00043491 	.word	0x00043491

00029830 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   29830:	4b10      	ldr	r3, [pc, #64]	; (29874 <settings_save_one+0x44>)
{
   29832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   29836:	681c      	ldr	r4, [r3, #0]
{
   29838:	4605      	mov	r5, r0
   2983a:	460e      	mov	r6, r1
   2983c:	4617      	mov	r7, r2
	if (!cs) {
   2983e:	b1ac      	cbz	r4, 2986c <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   29840:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29844:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29848:	480b      	ldr	r0, [pc, #44]	; (29878 <settings_save_one+0x48>)
   2984a:	f017 fd9d 	bl	41388 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   2984e:	6863      	ldr	r3, [r4, #4]
   29850:	4632      	mov	r2, r6
   29852:	f8d3 8008 	ldr.w	r8, [r3, #8]
   29856:	4629      	mov	r1, r5
   29858:	463b      	mov	r3, r7
   2985a:	4620      	mov	r0, r4
   2985c:	47c0      	blx	r8
   2985e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   29860:	4805      	ldr	r0, [pc, #20]	; (29878 <settings_save_one+0x48>)
   29862:	f017 fe09 	bl	41478 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   29866:	4620      	mov	r0, r4
   29868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   2986c:	f06f 0401 	mvn.w	r4, #1
   29870:	e7f9      	b.n	29866 <settings_save_one+0x36>
   29872:	bf00      	nop
   29874:	20001b60 	.word	0x20001b60
   29878:	20000b04 	.word	0x20000b04

0002987c <settings_src_register>:
	parent->next = child;
   2987c:	2300      	movs	r3, #0
   2987e:	6003      	str	r3, [r0, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   29880:	4b04      	ldr	r3, [pc, #16]	; (29894 <settings_src_register+0x18>)
   29882:	685a      	ldr	r2, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   29884:	b912      	cbnz	r2, 2988c <settings_src_register+0x10>
	list->head = node;
   29886:	e9c3 0000 	strd	r0, r0, [r3]
}
   2988a:	4770      	bx	lr
	parent->next = child;
   2988c:	6010      	str	r0, [r2, #0]
	list->tail = node;
   2988e:	6058      	str	r0, [r3, #4]
}
   29890:	4770      	bx	lr
   29892:	bf00      	nop
   29894:	20001b64 	.word	0x20001b64

00029898 <settings_dst_register>:
	settings_save_dst = cs;
   29898:	4b01      	ldr	r3, [pc, #4]	; (298a0 <settings_dst_register+0x8>)
   2989a:	6018      	str	r0, [r3, #0]
}
   2989c:	4770      	bx	lr
   2989e:	bf00      	nop
   298a0:	20001b60 	.word	0x20001b60

000298a4 <settings_load_subtree>:
{
   298a4:	b530      	push	{r4, r5, lr}
   298a6:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
   298a8:	2300      	movs	r3, #0
{
   298aa:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   298ac:	e9cd 3302 	strd	r3, r3, [sp, #8]
   298b0:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   298b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   298b6:	480c      	ldr	r0, [pc, #48]	; (298e8 <settings_load_subtree+0x44>)
   298b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   298bc:	f017 fd64 	bl	41388 <z_impl_k_mutex_lock>
	return list->head;
   298c0:	4b0a      	ldr	r3, [pc, #40]	; (298ec <settings_load_subtree+0x48>)
   298c2:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   298c4:	b94c      	cbnz	r4, 298da <settings_load_subtree+0x36>
	rc = settings_commit_subtree(subtree);
   298c6:	4628      	mov	r0, r5
   298c8:	f000 f88e 	bl	299e8 <settings_commit_subtree>
   298cc:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   298ce:	4806      	ldr	r0, [pc, #24]	; (298e8 <settings_load_subtree+0x44>)
   298d0:	f017 fdd2 	bl	41478 <z_impl_k_mutex_unlock>
}
   298d4:	4620      	mov	r0, r4
   298d6:	b005      	add	sp, #20
   298d8:	bd30      	pop	{r4, r5, pc}
		cs->cs_itf->csi_load(cs, &arg);
   298da:	6863      	ldr	r3, [r4, #4]
   298dc:	4620      	mov	r0, r4
   298de:	681b      	ldr	r3, [r3, #0]
   298e0:	a901      	add	r1, sp, #4
   298e2:	4798      	blx	r3
	return node->next;
   298e4:	6824      	ldr	r4, [r4, #0]
   298e6:	e7ed      	b.n	298c4 <settings_load_subtree+0x20>
   298e8:	20000b04 	.word	0x20000b04
   298ec:	20001b64 	.word	0x20001b64

000298f0 <settings_load_subtree_direct>:
{
   298f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   298f2:	e9cd 0101 	strd	r0, r1, [sp, #4]
   298f6:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   298f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   298fc:	480a      	ldr	r0, [pc, #40]	; (29928 <settings_load_subtree_direct+0x38>)
   298fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29902:	f017 fd41 	bl	41388 <z_impl_k_mutex_lock>
	return list->head;
   29906:	4b09      	ldr	r3, [pc, #36]	; (2992c <settings_load_subtree_direct+0x3c>)
   29908:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   2990a:	b92c      	cbnz	r4, 29918 <settings_load_subtree_direct+0x28>
	return z_impl_k_mutex_unlock(mutex);
   2990c:	4806      	ldr	r0, [pc, #24]	; (29928 <settings_load_subtree_direct+0x38>)
   2990e:	f017 fdb3 	bl	41478 <z_impl_k_mutex_unlock>
}
   29912:	4620      	mov	r0, r4
   29914:	b004      	add	sp, #16
   29916:	bd10      	pop	{r4, pc}
		cs->cs_itf->csi_load(cs, &arg);
   29918:	6863      	ldr	r3, [r4, #4]
   2991a:	4620      	mov	r0, r4
   2991c:	681b      	ldr	r3, [r3, #0]
   2991e:	a901      	add	r1, sp, #4
   29920:	4798      	blx	r3
	return node->next;
   29922:	6824      	ldr	r4, [r4, #0]
   29924:	e7f1      	b.n	2990a <settings_load_subtree_direct+0x1a>
   29926:	bf00      	nop
   29928:	20000b04 	.word	0x20000b04
   2992c:	20001b64 	.word	0x20001b64

00029930 <settings_store_init>:
	list->head = NULL;
   29930:	4b02      	ldr	r3, [pc, #8]	; (2993c <settings_store_init+0xc>)
   29932:	2200      	movs	r2, #0
	list->tail = NULL;
   29934:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   29938:	4770      	bx	lr
   2993a:	bf00      	nop
   2993c:	20001b64 	.word	0x20001b64

00029940 <settings_init>:
	list->head = NULL;
   29940:	4b02      	ldr	r3, [pc, #8]	; (2994c <settings_init+0xc>)
   29942:	2200      	movs	r2, #0
	list->tail = NULL;
   29944:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   29948:	f7ff bff2 	b.w	29930 <settings_store_init>
   2994c:	20001b6c 	.word	0x20001b6c

00029950 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   29950:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   29954:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   29956:	460c      	mov	r4, r1
   29958:	b109      	cbz	r1, 2995e <settings_parse_and_lookup+0xe>
		*next = NULL;
   2995a:	2300      	movs	r3, #0
   2995c:	600b      	str	r3, [r1, #0]
{
   2995e:	4d1f      	ldr	r5, [pc, #124]	; (299dc <settings_parse_and_lookup+0x8c>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   29960:	f8df 907c 	ldr.w	r9, [pc, #124]	; 299e0 <settings_parse_and_lookup+0x90>
{
   29964:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   29966:	454d      	cmp	r5, r9
   29968:	d30f      	bcc.n	2998a <settings_parse_and_lookup+0x3a>
	return list->head;
   2996a:	4b1e      	ldr	r3, [pc, #120]	; (299e4 <settings_parse_and_lookup+0x94>)
   2996c:	681d      	ldr	r5, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   2996e:	b385      	cbz	r5, 299d2 <settings_parse_and_lookup+0x82>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   29970:	f855 8c14 	ldr.w	r8, [r5, #-20]
   29974:	aa01      	add	r2, sp, #4
   29976:	4641      	mov	r1, r8
   29978:	4638      	mov	r0, r7
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   2997a:	3d14      	subs	r5, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   2997c:	f019 fdac 	bl	434d8 <settings_name_steq>
   29980:	b310      	cbz	r0, 299c8 <settings_parse_and_lookup+0x78>
			continue;
		}
		if (!bestmatch) {
   29982:	b9d6      	cbnz	r6, 299ba <settings_parse_and_lookup+0x6a>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   29984:	bb14      	cbnz	r4, 299cc <settings_parse_and_lookup+0x7c>
{
   29986:	462e      	mov	r6, r5
   29988:	e01e      	b.n	299c8 <settings_parse_and_lookup+0x78>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   2998a:	f8d5 8000 	ldr.w	r8, [r5]
   2998e:	aa01      	add	r2, sp, #4
   29990:	4641      	mov	r1, r8
   29992:	4638      	mov	r0, r7
   29994:	f019 fda0 	bl	434d8 <settings_name_steq>
   29998:	b150      	cbz	r0, 299b0 <settings_parse_and_lookup+0x60>
		if (!bestmatch) {
   2999a:	b916      	cbnz	r6, 299a2 <settings_parse_and_lookup+0x52>
			if (next) {
   2999c:	b954      	cbnz	r4, 299b4 <settings_parse_and_lookup+0x64>
{
   2999e:	462e      	mov	r6, r5
   299a0:	e006      	b.n	299b0 <settings_parse_and_lookup+0x60>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   299a2:	6831      	ldr	r1, [r6, #0]
   299a4:	2200      	movs	r2, #0
   299a6:	4640      	mov	r0, r8
   299a8:	f019 fd96 	bl	434d8 <settings_name_steq>
   299ac:	2800      	cmp	r0, #0
   299ae:	d1f5      	bne.n	2999c <settings_parse_and_lookup+0x4c>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   299b0:	3514      	adds	r5, #20
   299b2:	e7d8      	b.n	29966 <settings_parse_and_lookup+0x16>
				*next = tmpnext;
   299b4:	9b01      	ldr	r3, [sp, #4]
   299b6:	6023      	str	r3, [r4, #0]
   299b8:	e7f1      	b.n	2999e <settings_parse_and_lookup+0x4e>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   299ba:	6831      	ldr	r1, [r6, #0]
   299bc:	2200      	movs	r2, #0
   299be:	4640      	mov	r0, r8
   299c0:	f019 fd8a 	bl	434d8 <settings_name_steq>
   299c4:	2800      	cmp	r0, #0
   299c6:	d1dd      	bne.n	29984 <settings_parse_and_lookup+0x34>
	return node->next;
   299c8:	696d      	ldr	r5, [r5, #20]
   299ca:	e7d0      	b.n	2996e <settings_parse_and_lookup+0x1e>
				*next = tmpnext;
   299cc:	9b01      	ldr	r3, [sp, #4]
   299ce:	6023      	str	r3, [r4, #0]
   299d0:	e7d9      	b.n	29986 <settings_parse_and_lookup+0x36>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   299d2:	4630      	mov	r0, r6
   299d4:	b003      	add	sp, #12
   299d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   299da:	bf00      	nop
   299dc:	00049308 	.word	0x00049308
   299e0:	00049380 	.word	0x00049380
   299e4:	20001b6c 	.word	0x20001b6c

000299e8 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   299e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   299ea:	4c18      	ldr	r4, [pc, #96]	; (29a4c <settings_commit_subtree+0x64>)
   299ec:	4f18      	ldr	r7, [pc, #96]	; (29a50 <settings_commit_subtree+0x68>)
{
   299ee:	4606      	mov	r6, r0
	rc = 0;
   299f0:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   299f2:	42bc      	cmp	r4, r7
   299f4:	d308      	bcc.n	29a08 <settings_commit_subtree+0x20>
	return list->head;
   299f6:	4b17      	ldr	r3, [pc, #92]	; (29a54 <settings_commit_subtree+0x6c>)
   299f8:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   299fa:	b32c      	cbz	r4, 29a48 <settings_commit_subtree+0x60>
   299fc:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   299fe:	b9b6      	cbnz	r6, 29a2e <settings_commit_subtree+0x46>
			continue;
		}
		if (ch->h_commit) {
   29a00:	68e3      	ldr	r3, [r4, #12]
   29a02:	b9e3      	cbnz	r3, 29a3e <settings_commit_subtree+0x56>
	return node->next;
   29a04:	6964      	ldr	r4, [r4, #20]
   29a06:	e7f8      	b.n	299fa <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   29a08:	b92e      	cbnz	r6, 29a16 <settings_commit_subtree+0x2e>
		if (ch->h_commit) {
   29a0a:	68e3      	ldr	r3, [r4, #12]
   29a0c:	b95b      	cbnz	r3, 29a26 <settings_commit_subtree+0x3e>
{
   29a0e:	4628      	mov	r0, r5
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   29a10:	3414      	adds	r4, #20
   29a12:	4605      	mov	r5, r0
   29a14:	e7ed      	b.n	299f2 <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   29a16:	6820      	ldr	r0, [r4, #0]
   29a18:	2200      	movs	r2, #0
   29a1a:	4631      	mov	r1, r6
   29a1c:	f019 fd5c 	bl	434d8 <settings_name_steq>
   29a20:	2800      	cmp	r0, #0
   29a22:	d1f2      	bne.n	29a0a <settings_commit_subtree+0x22>
   29a24:	e7f3      	b.n	29a0e <settings_commit_subtree+0x26>
			rc2 = ch->h_commit();
   29a26:	4798      	blx	r3
			if (!rc) {
   29a28:	2d00      	cmp	r5, #0
   29a2a:	d1f0      	bne.n	29a0e <settings_commit_subtree+0x26>
   29a2c:	e7f0      	b.n	29a10 <settings_commit_subtree+0x28>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   29a2e:	6820      	ldr	r0, [r4, #0]
   29a30:	2200      	movs	r2, #0
   29a32:	4631      	mov	r1, r6
   29a34:	f019 fd50 	bl	434d8 <settings_name_steq>
   29a38:	2800      	cmp	r0, #0
   29a3a:	d1e1      	bne.n	29a00 <settings_commit_subtree+0x18>
   29a3c:	e7e2      	b.n	29a04 <settings_commit_subtree+0x1c>
			rc2 = ch->h_commit();
   29a3e:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
   29a40:	2d00      	cmp	r5, #0
   29a42:	bf08      	it	eq
   29a44:	4605      	moveq	r5, r0
   29a46:	e7dd      	b.n	29a04 <settings_commit_subtree+0x1c>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   29a48:	4628      	mov	r0, r5
   29a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29a4c:	00049308 	.word	0x00049308
   29a50:	00049380 	.word	0x00049380
   29a54:	20001b6c 	.word	0x20001b6c

00029a58 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   29a58:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   29a5a:	4c07      	ldr	r4, [pc, #28]	; (29a78 <settings_subsys_init+0x20>)
   29a5c:	7823      	ldrb	r3, [r4, #0]
   29a5e:	b10b      	cbz	r3, 29a64 <settings_subsys_init+0xc>
		return 0;
   29a60:	2000      	movs	r0, #0
	if (!err) {
		settings_subsys_initialized = true;
	}

	return err;
}
   29a62:	bd10      	pop	{r4, pc}
	settings_init();
   29a64:	f7ff ff6c 	bl	29940 <settings_init>
	err = settings_backend_init(); /* func rises kernel panic once error */
   29a68:	f000 f866 	bl	29b38 <settings_backend_init>
	if (!err) {
   29a6c:	2800      	cmp	r0, #0
   29a6e:	d1f8      	bne.n	29a62 <settings_subsys_init+0xa>
		settings_subsys_initialized = true;
   29a70:	2301      	movs	r3, #1
   29a72:	7023      	strb	r3, [r4, #0]
   29a74:	e7f4      	b.n	29a60 <settings_subsys_init+0x8>
   29a76:	bf00      	nop
   29a78:	20003b6c 	.word	0x20003b6c

00029a7c <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   29a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   29a80:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
   29a82:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 29b34 <settings_nvs_load+0xb8>
	name_id = cf->last_name_id + 1;
   29a86:	3401      	adds	r4, #1
{
   29a88:	b098      	sub	sp, #96	; 0x60
   29a8a:	4680      	mov	r8, r0
   29a8c:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
   29a8e:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   29a90:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   29a94:	1e65      	subs	r5, r4, #1
   29a96:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   29a98:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   29a9c:	d047      	beq.n	29b2e <settings_nvs_load+0xb2>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   29a9e:	234a      	movs	r3, #74	; 0x4a
   29aa0:	aa05      	add	r2, sp, #20
   29aa2:	4629      	mov	r1, r5
   29aa4:	4630      	mov	r0, r6
   29aa6:	f019 fcd3 	bl	43450 <nvs_read>
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   29aaa:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   29aae:	343f      	adds	r4, #63	; 0x3f
   29ab0:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   29ab2:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   29ab4:	4621      	mov	r1, r4
   29ab6:	2301      	movs	r3, #1
   29ab8:	f10d 020b 	add.w	r2, sp, #11
   29abc:	4630      	mov	r0, r6
   29abe:	f019 fcc7 	bl	43450 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   29ac2:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   29ac4:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   29ac6:	dc03      	bgt.n	29ad0 <settings_nvs_load+0x54>
   29ac8:	2800      	cmp	r0, #0
   29aca:	dc03      	bgt.n	29ad4 <settings_nvs_load+0x58>
{
   29acc:	462c      	mov	r4, r5
   29ace:	e7e1      	b.n	29a94 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   29ad0:	2800      	cmp	r0, #0
   29ad2:	dc16      	bgt.n	29b02 <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   29ad4:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   29ad8:	42ab      	cmp	r3, r5
   29ada:	d109      	bne.n	29af0 <settings_nvs_load+0x74>
				cf->last_name_id--;
   29adc:	4642      	mov	r2, r8
   29ade:	1e6b      	subs	r3, r5, #1
   29ae0:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   29ae4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   29ae8:	2302      	movs	r3, #2
   29aea:	4630      	mov	r0, r6
   29aec:	f7fe ff6c 	bl	289c8 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   29af0:	4629      	mov	r1, r5
   29af2:	4630      	mov	r0, r6
   29af4:	f019 fc48 	bl	43388 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   29af8:	4621      	mov	r1, r4
   29afa:	4630      	mov	r0, r6
   29afc:	f019 fc44 	bl	43388 <nvs_delete>
			continue;
   29b00:	e7e4      	b.n	29acc <settings_nvs_load+0x50>
		name[rc1] = '\0';
   29b02:	f107 0360 	add.w	r3, r7, #96	; 0x60
   29b06:	eb0d 0703 	add.w	r7, sp, r3
   29b0a:	2300      	movs	r3, #0
   29b0c:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   29b10:	4652      	mov	r2, sl
   29b12:	f8cd 9000 	str.w	r9, [sp]
   29b16:	ab03      	add	r3, sp, #12
   29b18:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
   29b1a:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   29b1c:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   29b20:	f019 fd10 	bl	43544 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   29b24:	2800      	cmp	r0, #0
   29b26:	d0d1      	beq.n	29acc <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   29b28:	b018      	add	sp, #96	; 0x60
   29b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29b2e:	2000      	movs	r0, #0
	return ret;
   29b30:	e7fa      	b.n	29b28 <settings_nvs_load+0xac>
   29b32:	bf00      	nop
   29b34:	000435af 	.word	0x000435af

00029b38 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   29b38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   29b3a:	2301      	movs	r3, #1

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   29b3c:	4669      	mov	r1, sp
   29b3e:	2002      	movs	r0, #2
	uint32_t sector_cnt = 1;
   29b40:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   29b42:	f7ff fe23 	bl	2978c <flash_area_open>
	if (rc) {
   29b46:	4604      	mov	r4, r0
   29b48:	2800      	cmp	r0, #0
   29b4a:	d134      	bne.n	29bb6 <settings_backend_init+0x7e>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   29b4c:	aa02      	add	r2, sp, #8
   29b4e:	a901      	add	r1, sp, #4
   29b50:	2002      	movs	r0, #2
   29b52:	f7ff fe39 	bl	297c8 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
   29b56:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   29b5a:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
   29b5c:	d02b      	beq.n	29bb6 <settings_backend_init+0x7e>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   29b5e:	b138      	cbz	r0, 29b70 <settings_backend_init+0x38>
   29b60:	340c      	adds	r4, #12
   29b62:	d005      	beq.n	29b70 <settings_backend_init+0x38>
		k_panic();
   29b64:	4040      	eors	r0, r0
   29b66:	f380 8811 	msr	BASEPRI, r0
   29b6a:	f04f 0004 	mov.w	r0, #4
   29b6e:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   29b70:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   29b72:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   29b76:	d223      	bcs.n	29bc0 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   29b78:	9a00      	ldr	r2, [sp, #0]
   29b7a:	2300      	movs	r3, #0
   29b7c:	6894      	ldr	r4, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
   29b7e:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
   29b80:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   29b82:	4284      	cmp	r4, r0
   29b84:	d31a      	bcc.n	29bbc <settings_backend_init+0x84>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   29b86:	3301      	adds	r3, #1
   29b88:	2b08      	cmp	r3, #8
   29b8a:	d1f9      	bne.n	29b80 <settings_backend_init+0x48>
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   29b8c:	4d0e      	ldr	r5, [pc, #56]	; (29bc8 <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
   29b8e:	82eb      	strh	r3, [r5, #22]
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   29b90:	6853      	ldr	r3, [r2, #4]
   29b92:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   29b94:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   29b96:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   29b98:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   29b9a:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   29b9c:	f019 fda1 	bl	436e2 <settings_nvs_backend_init>
	if (rc) {
   29ba0:	4604      	mov	r4, r0
   29ba2:	b940      	cbnz	r0, 29bb6 <settings_backend_init+0x7e>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   29ba4:	4e09      	ldr	r6, [pc, #36]	; (29bcc <settings_backend_init+0x94>)
   29ba6:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   29ba8:	4628      	mov	r0, r5
   29baa:	f7ff fe67 	bl	2987c <settings_src_register>
	settings_dst_register(&cf->cf_store);
   29bae:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   29bb0:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   29bb2:	f7ff fe71 	bl	29898 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   29bb6:	4620      	mov	r0, r4
   29bb8:	b004      	add	sp, #16
   29bba:	bd70      	pop	{r4, r5, r6, pc}
   29bbc:	b29b      	uxth	r3, r3
   29bbe:	e7e5      	b.n	29b8c <settings_backend_init+0x54>
		return -EDOM;
   29bc0:	f06f 0420 	mvn.w	r4, #32
   29bc4:	e7f7      	b.n	29bb6 <settings_backend_init+0x7e>
   29bc6:	bf00      	nop
   29bc8:	20001b74 	.word	0x20001b74
   29bcc:	20000328 	.word	0x20000328

00029bd0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   29bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29bd4:	4605      	mov	r5, r0
	__asm__ volatile(
   29bd6:	f04f 0320 	mov.w	r3, #32
   29bda:	f3ef 8611 	mrs	r6, BASEPRI
   29bde:	f383 8812 	msr	BASEPRI_MAX, r3
   29be2:	f3bf 8f6f 	isb	sy
	return list->head;
   29be6:	4b0e      	ldr	r3, [pc, #56]	; (29c20 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   29be8:	4f0e      	ldr	r7, [pc, #56]	; (29c24 <pm_state_notify+0x54>)
   29bea:	681c      	ldr	r4, [r3, #0]
   29bec:	f8df 8038 	ldr.w	r8, [pc, #56]	; 29c28 <pm_state_notify+0x58>
   29bf0:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   29bf4:	b92c      	cbnz	r4, 29c02 <pm_state_notify+0x32>
	__asm__ volatile(
   29bf6:	f386 8811 	msr	BASEPRI, r6
   29bfa:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   29bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
   29c02:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   29c06:	2d00      	cmp	r5, #0
   29c08:	bf18      	it	ne
   29c0a:	4613      	movne	r3, r2
		if (callback) {
   29c0c:	b12b      	cbz	r3, 29c1a <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   29c0e:	f898 2014 	ldrb.w	r2, [r8, #20]
   29c12:	fb09 f202 	mul.w	r2, r9, r2
   29c16:	5cb8      	ldrb	r0, [r7, r2]
   29c18:	4798      	blx	r3
	return node->next;
   29c1a:	6824      	ldr	r4, [r4, #0]
   29c1c:	e7ea      	b.n	29bf4 <pm_state_notify+0x24>
   29c1e:	bf00      	nop
   29c20:	20001bc4 	.word	0x20001bc4
   29c24:	20001bb8 	.word	0x20001bb8
   29c28:	20003aac 	.word	0x20003aac

00029c2c <atomic_clear_bit.constprop.0>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29c2c:	4a0a      	ldr	r2, [pc, #40]	; (29c58 <atomic_clear_bit.constprop.0+0x2c>)
   29c2e:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   29c32:	0943      	lsrs	r3, r0, #5
   29c34:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   29c38:	f000 001f 	and.w	r0, r0, #31
   29c3c:	2301      	movs	r3, #1
   29c3e:	4083      	lsls	r3, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   29c40:	43db      	mvns	r3, r3
   29c42:	e852 0f00 	ldrex	r0, [r2]
   29c46:	4018      	ands	r0, r3
   29c48:	e842 0100 	strex	r1, r0, [r2]
   29c4c:	2900      	cmp	r1, #0
   29c4e:	d1f8      	bne.n	29c42 <atomic_clear_bit.constprop.0+0x16>
   29c50:	f3bf 8f5b 	dmb	ish
}
   29c54:	4770      	bx	lr
   29c56:	bf00      	nop
   29c58:	20001bb4 	.word	0x20001bb4

00029c5c <pm_system_resume>:

void pm_system_resume(void)
{
   29c5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
   29c5e:	4b1c      	ldr	r3, [pc, #112]	; (29cd0 <pm_system_resume+0x74>)
   29c60:	7d1c      	ldrb	r4, [r3, #20]
   29c62:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   29c66:	f004 031f 	and.w	r3, r4, #31
   29c6a:	2201      	movs	r2, #1
   29c6c:	409a      	lsls	r2, r3
   29c6e:	4b19      	ldr	r3, [pc, #100]	; (29cd4 <pm_system_resume+0x78>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   29c70:	0961      	lsrs	r1, r4, #5
   29c72:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   29c76:	43d0      	mvns	r0, r2
   29c78:	e853 1f00 	ldrex	r1, [r3]
   29c7c:	ea01 0500 	and.w	r5, r1, r0
   29c80:	e843 5600 	strex	r6, r5, [r3]
   29c84:	2e00      	cmp	r6, #0
   29c86:	d1f7      	bne.n	29c78 <pm_system_resume+0x1c>
   29c88:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   29c8c:	420a      	tst	r2, r1
   29c8e:	d017      	beq.n	29cc0 <pm_system_resume+0x64>
		exit_pos_ops(z_cpus_pm_state[id]);
   29c90:	4d11      	ldr	r5, [pc, #68]	; (29cd8 <pm_system_resume+0x7c>)
   29c92:	220c      	movs	r2, #12
   29c94:	fb02 5204 	mla	r2, r2, r4, r5
   29c98:	ca07      	ldmia	r2, {r0, r1, r2}
   29c9a:	ab01      	add	r3, sp, #4
   29c9c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   29ca0:	4a0e      	ldr	r2, [pc, #56]	; (29cdc <pm_system_resume+0x80>)
   29ca2:	b17a      	cbz	r2, 29cc4 <pm_system_resume+0x68>
		pm_power_state_exit_post_ops(info);
   29ca4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   29ca8:	f01a ff32 	bl	44b10 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   29cac:	2000      	movs	r0, #0
   29cae:	f7ff ff8f 	bl	29bd0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   29cb2:	230c      	movs	r3, #12
   29cb4:	435c      	muls	r4, r3
   29cb6:	192a      	adds	r2, r5, r4
   29cb8:	2300      	movs	r3, #0
   29cba:	512b      	str	r3, [r5, r4]
   29cbc:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   29cc0:	b004      	add	sp, #16
   29cc2:	bd70      	pop	{r4, r5, r6, pc}
   29cc4:	f382 8811 	msr	BASEPRI, r2
   29cc8:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   29ccc:	e7ee      	b.n	29cac <pm_system_resume+0x50>
   29cce:	bf00      	nop
   29cd0:	20003aac 	.word	0x20003aac
   29cd4:	20001bcc 	.word	0x20001bcc
   29cd8:	20001bb8 	.word	0x20001bb8
   29cdc:	00044b11 	.word	0x00044b11

00029ce0 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   29ce0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   29ce4:	4b35      	ldr	r3, [pc, #212]	; (29dbc <pm_system_suspend+0xdc>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29ce6:	4a36      	ldr	r2, [pc, #216]	; (29dc0 <pm_system_suspend+0xe0>)
   29ce8:	7d1c      	ldrb	r4, [r3, #20]
   29cea:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   29cee:	0963      	lsrs	r3, r4, #5
   29cf0:	ea4f 0883 	mov.w	r8, r3, lsl #2
   29cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   29cf8:	4d32      	ldr	r5, [pc, #200]	; (29dc4 <pm_system_suspend+0xe4>)
   29cfa:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   29cfe:	f004 091f 	and.w	r9, r4, #31
   29d02:	fa43 f309 	asr.w	r3, r3, r9

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   29d06:	f013 0f01 	tst.w	r3, #1
{
   29d0a:	b085      	sub	sp, #20
   29d0c:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   29d0e:	d10a      	bne.n	29d26 <pm_system_suspend+0x46>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   29d10:	4601      	mov	r1, r0
   29d12:	4620      	mov	r0, r4
   29d14:	f000 f876 	bl	29e04 <pm_policy_next_state>
		if (info != NULL) {
   29d18:	b128      	cbz	r0, 29d26 <pm_system_suspend+0x46>
			z_cpus_pm_state[id] = *info;
   29d1a:	c807      	ldmia	r0, {r0, r1, r2}
   29d1c:	230c      	movs	r3, #12
   29d1e:	fb03 5304 	mla	r3, r3, r4, r5
   29d22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   29d26:	230c      	movs	r3, #12
   29d28:	4363      	muls	r3, r4
   29d2a:	18ea      	adds	r2, r5, r3
   29d2c:	5cee      	ldrb	r6, [r5, r3]
   29d2e:	b936      	cbnz	r6, 29d3e <pm_system_suspend+0x5e>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
   29d30:	4620      	mov	r0, r4
   29d32:	f7ff ff7b 	bl	29c2c <atomic_clear_bit.constprop.0>
		ret = false;
   29d36:	4630      	mov	r0, r6
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
   29d38:	b005      	add	sp, #20
   29d3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
   29d3e:	1c7b      	adds	r3, r7, #1
   29d40:	d010      	beq.n	29d64 <pm_system_suspend+0x84>
			return (uint32_t)((t * to_hz + off) / from_hz);
   29d42:	f8d2 c008 	ldr.w	ip, [r2, #8]
   29d46:	4e20      	ldr	r6, [pc, #128]	; (29dc8 <pm_system_suspend+0xe8>)
   29d48:	4a20      	ldr	r2, [pc, #128]	; (29dcc <pm_system_suspend+0xec>)
   29d4a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   29d4e:	2100      	movs	r1, #0
   29d50:	fbec 6100 	umlal	r6, r1, ip, r0
   29d54:	2300      	movs	r3, #0
   29d56:	4630      	mov	r0, r6
   29d58:	f7fc f9d2 	bl	26100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   29d5c:	2101      	movs	r1, #1
   29d5e:	1a38      	subs	r0, r7, r0
   29d60:	f01e ff27 	bl	48bb2 <z_set_timeout_expiry>
	k_sched_lock();
   29d64:	f018 f830 	bl	41dc8 <k_sched_lock>
	pm_state_notify(true);
   29d68:	2001      	movs	r0, #1
   29d6a:	f7ff ff31 	bl	29bd0 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29d6e:	f3bf 8f5b 	dmb	ish
   29d72:	4b17      	ldr	r3, [pc, #92]	; (29dd0 <pm_system_suspend+0xf0>)
   29d74:	4498      	add	r8, r3
	atomic_val_t mask = ATOMIC_MASK(bit);
   29d76:	2301      	movs	r3, #1
   29d78:	fa03 f309 	lsl.w	r3, r3, r9
   29d7c:	e858 2f00 	ldrex	r2, [r8]
   29d80:	431a      	orrs	r2, r3
   29d82:	e848 2100 	strex	r1, r2, [r8]
   29d86:	2900      	cmp	r1, #0
   29d88:	d1f8      	bne.n	29d7c <pm_system_suspend+0x9c>
   29d8a:	f3bf 8f5b 	dmb	ish
	pm_state_set(z_cpus_pm_state[id]);
   29d8e:	230c      	movs	r3, #12
   29d90:	fb03 5504 	mla	r5, r3, r4, r5
   29d94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   29d98:	ab01      	add	r3, sp, #4
   29d9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   29d9e:	4a0d      	ldr	r2, [pc, #52]	; (29dd4 <pm_system_suspend+0xf4>)
   29da0:	b11a      	cbz	r2, 29daa <pm_system_suspend+0xca>
		pm_power_state_set(info);
   29da2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   29da6:	f01a fea0 	bl	44aea <pm_power_state_set>
	pm_system_resume();
   29daa:	f7ff ff57 	bl	29c5c <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
   29dae:	4620      	mov	r0, r4
   29db0:	f7ff ff3c 	bl	29c2c <atomic_clear_bit.constprop.0>
	k_sched_unlock();
   29db4:	f018 f81c 	bl	41df0 <k_sched_unlock>
	bool ret = true;
   29db8:	2001      	movs	r0, #1
   29dba:	e7bd      	b.n	29d38 <pm_system_suspend+0x58>
   29dbc:	20003aac 	.word	0x20003aac
   29dc0:	20001bb4 	.word	0x20001bb4
   29dc4:	20001bb8 	.word	0x20001bb8
   29dc8:	000f423f 	.word	0x000f423f
   29dcc:	000f4240 	.word	0x000f4240
   29dd0:	20001bcc 	.word	0x20001bcc
   29dd4:	00044aeb 	.word	0x00044aeb

00029dd8 <pm_constraint_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29dd8:	4b05      	ldr	r3, [pc, #20]	; (29df0 <pm_constraint_get+0x18>)
   29dda:	f3bf 8f5b 	dmb	ish
   29dde:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   29de2:	f3bf 8f5b 	dmb	ish
__weak bool pm_constraint_get(enum pm_state state)
{
	__ASSERT(state < PM_STATE_COUNT, "Invalid power state!");

	return (atomic_get(&power_state_disable_count[state]) == 0);
}
   29de6:	fab0 f080 	clz	r0, r0
   29dea:	0940      	lsrs	r0, r0, #5
   29dec:	4770      	bx	lr
   29dee:	bf00      	nop
   29df0:	20001bd0 	.word	0x20001bd0

00029df4 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   29df4:	b908      	cbnz	r0, 29dfa <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   29df6:	4b02      	ldr	r3, [pc, #8]	; (29e00 <pm_state_cpu_get_all+0xc>)
   29df8:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   29dfa:	2000      	movs	r0, #0
   29dfc:	4770      	bx	lr
   29dfe:	bf00      	nop
   29e00:	0004972c 	.word	0x0004972c

00029e04 <pm_policy_next_state>:

#include <logging/log.h>
LOG_MODULE_DECLARE(pm, CONFIG_PM_LOG_LEVEL);

const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   29e04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29e08:	460f      	mov	r7, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   29e0a:	a901      	add	r1, sp, #4
   29e0c:	f7ff fff2 	bl	29df4 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   29e10:	1e44      	subs	r4, r0, #1
   29e12:	b224      	sxth	r4, r4
   29e14:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   29e18:	f8df 9060 	ldr.w	r9, [pc, #96]	; 29e7c <pm_policy_next_state+0x78>
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   29e1c:	4605      	mov	r5, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   29e1e:	00a4      	lsls	r4, r4, #2
   29e20:	f44f 4800 	mov.w	r8, #32768	; 0x8000
   29e24:	b925      	cbnz	r5, 29e30 <pm_policy_next_state+0x2c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   29e26:	462e      	mov	r6, r5
}
   29e28:	4630      	mov	r0, r6
   29e2a:	b003      	add	sp, #12
   29e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
   29e30:	9b01      	ldr	r3, [sp, #4]
		if (!pm_constraint_get(state->state)) {
   29e32:	5d18      	ldrb	r0, [r3, r4]
		const struct pm_state_info *state = &cpu_states[i];
   29e34:	191e      	adds	r6, r3, r4
		if (!pm_constraint_get(state->state)) {
   29e36:	f7ff ffcf 	bl	29dd8 <pm_constraint_get>
   29e3a:	b1d8      	cbz	r0, 29e74 <pm_policy_next_state+0x70>
   29e3c:	6870      	ldr	r0, [r6, #4]
   29e3e:	4a10      	ldr	r2, [pc, #64]	; (29e80 <pm_policy_next_state+0x7c>)
   29e40:	f04f 0a00 	mov.w	sl, #0
   29e44:	46cc      	mov	ip, r9
   29e46:	4651      	mov	r1, sl
   29e48:	fbe0 c108 	umlal	ip, r1, r0, r8
   29e4c:	2300      	movs	r3, #0
   29e4e:	4660      	mov	r0, ip
   29e50:	f7fc f956 	bl	26100 <__aeabi_uldivmod>
   29e54:	4683      	mov	fp, r0
   29e56:	68b0      	ldr	r0, [r6, #8]
   29e58:	4a09      	ldr	r2, [pc, #36]	; (29e80 <pm_policy_next_state+0x7c>)
   29e5a:	46cc      	mov	ip, r9
   29e5c:	4651      	mov	r1, sl
   29e5e:	fbe0 c108 	umlal	ip, r1, r0, r8
   29e62:	2300      	movs	r3, #0
   29e64:	4660      	mov	r0, ip
   29e66:	f7fc f94b 	bl	26100 <__aeabi_uldivmod>
		if ((ticks == K_TICKS_FOREVER) ||
   29e6a:	1c7b      	adds	r3, r7, #1
   29e6c:	d0dc      	beq.n	29e28 <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
   29e6e:	4458      	add	r0, fp
		if ((ticks == K_TICKS_FOREVER) ||
   29e70:	42b8      	cmp	r0, r7
   29e72:	d9d9      	bls.n	29e28 <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   29e74:	3d01      	subs	r5, #1
   29e76:	b2ad      	uxth	r5, r5
   29e78:	3c0c      	subs	r4, #12
   29e7a:	e7d3      	b.n	29e24 <pm_policy_next_state+0x20>
   29e7c:	000f423f 	.word	0x000f423f
   29e80:	000f4240 	.word	0x000f4240

00029e84 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
   29e84:	4b01      	ldr	r3, [pc, #4]	; (29e8c <uECC_get_rng+0x8>)
   29e86:	6818      	ldr	r0, [r3, #0]
   29e88:	4770      	bx	lr
   29e8a:	bf00      	nop
   29e8c:	20000338 	.word	0x20000338

00029e90 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   29e90:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   29e92:	2208      	movs	r2, #8
{
   29e94:	b089      	sub	sp, #36	; 0x24
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   29e96:	f019 fdf6 	bl	43a86 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
   29e9a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   29e9c:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   29e9e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   29ea0:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   29ea2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   29ea4:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   29ea6:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   29ea8:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   29eaa:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   29eac:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   29eae:	4613      	mov	r3, r2
   29eb0:	466a      	mov	r2, sp
{
   29eb2:	460c      	mov	r4, r1
   29eb4:	4606      	mov	r6, r0
	tmp[0] = tmp[1] = tmp[2] = 0;
   29eb6:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   29eb8:	4611      	mov	r1, r2
   29eba:	4610      	mov	r0, r2
	tmp[0] = tmp[1] = tmp[2] = 0;
   29ebc:	e9cd 7701 	strd	r7, r7, [sp, #4]
   29ec0:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   29ec2:	f019 fcee 	bl	438a2 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   29ec6:	4631      	mov	r1, r6
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   29ec8:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   29eca:	4630      	mov	r0, r6
   29ecc:	f019 fce9 	bl	438a2 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
   29ed0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   29ed2:	9103      	str	r1, [sp, #12]
	tmp[4] = product[13];
   29ed4:	6b61      	ldr	r1, [r4, #52]	; 0x34
   29ed6:	9104      	str	r1, [sp, #16]
	tmp[5] = product[14];
   29ed8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   29eda:	9105      	str	r1, [sp, #20]
	tmp[6] = product[15];
   29edc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   29ede:	4405      	add	r5, r0
	tmp[7] = 0;
   29ee0:	e9cd 1706 	strd	r1, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   29ee4:	4610      	mov	r0, r2
   29ee6:	4611      	mov	r1, r2
   29ee8:	f019 fcdb 	bl	438a2 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   29eec:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   29eee:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   29ef0:	4630      	mov	r0, r6
   29ef2:	f019 fcd6 	bl	438a2 <uECC_vli_add>
   29ef6:	4405      	add	r5, r0

	/* s3 */
	tmp[0] = product[8];
   29ef8:	6a20      	ldr	r0, [r4, #32]
   29efa:	9000      	str	r0, [sp, #0]
	tmp[1] = product[9];
   29efc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   29efe:	9001      	str	r0, [sp, #4]
	tmp[2] = product[10];
   29f00:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   29f02:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
   29f04:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   29f06:	9006      	str	r0, [sp, #24]
	tmp[7] = product[15];
   29f08:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   29f0a:	9007      	str	r0, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   29f0c:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   29f0e:	e9cd 7704 	strd	r7, r7, [sp, #16]
   29f12:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   29f14:	f019 fcc5 	bl	438a2 <uECC_vli_add>
   29f18:	4405      	add	r5, r0

	/* s4 */
	tmp[0] = product[9];
   29f1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   29f1c:	9000      	str	r0, [sp, #0]
	tmp[1] = product[10];
   29f1e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
   29f20:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
	tmp[1] = product[10];
   29f24:	9001      	str	r0, [sp, #4]
	tmp[2] = product[11];
   29f26:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   29f28:	9002      	str	r0, [sp, #8]
	tmp[4] = product[14];
   29f2a:	f8cd c010 	str.w	ip, [sp, #16]
	tmp[3] = product[13];
   29f2e:	6b60      	ldr	r0, [r4, #52]	; 0x34
	tmp[5] = product[15];
   29f30:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
	tmp[3] = product[13];
   29f34:	9003      	str	r0, [sp, #12]
	tmp[6] = product[13];
   29f36:	e9cd c005 	strd	ip, r0, [sp, #20]
	tmp[7] = product[8];
   29f3a:	6a20      	ldr	r0, [r4, #32]
   29f3c:	9007      	str	r0, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   29f3e:	4630      	mov	r0, r6
   29f40:	f019 fcaf 	bl	438a2 <uECC_vli_add>
   29f44:	4405      	add	r5, r0

	/* d1 */
	tmp[0] = product[11];
   29f46:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   29f48:	9000      	str	r0, [sp, #0]
	tmp[1] = product[12];
   29f4a:	6b20      	ldr	r0, [r4, #48]	; 0x30
   29f4c:	9001      	str	r0, [sp, #4]
	tmp[2] = product[13];
   29f4e:	6b60      	ldr	r0, [r4, #52]	; 0x34
   29f50:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
   29f52:	6a20      	ldr	r0, [r4, #32]
   29f54:	9006      	str	r0, [sp, #24]
	tmp[7] = product[10];
   29f56:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   29f58:	9007      	str	r0, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   29f5a:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   29f5c:	e9cd 7704 	strd	r7, r7, [sp, #16]
   29f60:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   29f62:	f019 fdc3 	bl	43aec <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
   29f66:	6b23      	ldr	r3, [r4, #48]	; 0x30
   29f68:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   29f6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   29f6c:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   29f6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   29f70:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   29f72:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   29f74:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
   29f76:	6a63      	ldr	r3, [r4, #36]	; 0x24
   29f78:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   29f7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   29f7c:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   29f7e:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   29f80:	2308      	movs	r3, #8
   29f82:	4630      	mov	r0, r6
   29f84:	f019 fdb2 	bl	43aec <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
   29f88:	6b63      	ldr	r3, [r4, #52]	; 0x34
   29f8a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   29f8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   29f8e:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   29f90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   29f92:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   29f94:	6a23      	ldr	r3, [r4, #32]
   29f96:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   29f98:	6a63      	ldr	r3, [r4, #36]	; 0x24
   29f9a:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   29f9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
   29f9e:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
   29fa2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   29fa4:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   29fa6:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   29fa8:	2308      	movs	r3, #8
   29faa:	4630      	mov	r0, r6
   29fac:	f019 fd9e 	bl	43aec <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
   29fb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   29fb2:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   29fb4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
   29fb6:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
   29fba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   29fbc:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   29fbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   29fc0:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   29fc2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   29fc4:	9305      	str	r3, [sp, #20]
	tmp[6] = 0;
	tmp[7] = product[13];
   29fc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   29fc8:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   29fca:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   29fcc:	2308      	movs	r3, #8
   29fce:	4630      	mov	r0, r6
   29fd0:	f019 fd8c 	bl	43aec <uECC_vli_sub>

	if (carry < 0) {
   29fd4:	1a2d      	subs	r5, r5, r0
   29fd6:	d410      	bmi.n	29ffa <vli_mmod_fast_secp256r1+0x16a>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   29fd8:	4c0d      	ldr	r4, [pc, #52]	; (2a010 <vli_mmod_fast_secp256r1+0x180>)
		while (carry || 
   29fda:	b935      	cbnz	r5, 29fea <vli_mmod_fast_secp256r1+0x15a>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   29fdc:	2208      	movs	r2, #8
   29fde:	4631      	mov	r1, r6
   29fe0:	4620      	mov	r0, r4
   29fe2:	f019 fd5c 	bl	43a9e <uECC_vli_cmp_unsafe>
		while (carry || 
   29fe6:	2801      	cmp	r0, #1
   29fe8:	d00f      	beq.n	2a00a <vli_mmod_fast_secp256r1+0x17a>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   29fea:	2308      	movs	r3, #8
   29fec:	4622      	mov	r2, r4
   29fee:	4631      	mov	r1, r6
   29ff0:	4630      	mov	r0, r6
   29ff2:	f019 fd7b 	bl	43aec <uECC_vli_sub>
   29ff6:	1a2d      	subs	r5, r5, r0
   29ff8:	e7ef      	b.n	29fda <vli_mmod_fast_secp256r1+0x14a>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   29ffa:	4a05      	ldr	r2, [pc, #20]	; (2a010 <vli_mmod_fast_secp256r1+0x180>)
   29ffc:	2308      	movs	r3, #8
   29ffe:	4631      	mov	r1, r6
   2a000:	4630      	mov	r0, r6
   2a002:	f019 fc4e 	bl	438a2 <uECC_vli_add>
		while (carry < 0);
   2a006:	182d      	adds	r5, r5, r0
   2a008:	d4f8      	bmi.n	29ffc <vli_mmod_fast_secp256r1+0x16c>
		}
	}
}
   2a00a:	b009      	add	sp, #36	; 0x24
   2a00c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a00e:	bf00      	nop
   2a010:	00049730 	.word	0x00049730

0002a014 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   2a014:	4904      	ldr	r1, [pc, #16]	; (2a028 <sub_bytes+0x14>)
   2a016:	1e43      	subs	r3, r0, #1
   2a018:	300f      	adds	r0, #15
   2a01a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2a01e:	5c8a      	ldrb	r2, [r1, r2]
   2a020:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   2a022:	4283      	cmp	r3, r0
   2a024:	d1f9      	bne.n	2a01a <sub_bytes+0x6>
	}
}
   2a026:	4770      	bx	lr
   2a028:	0004ad71 	.word	0x0004ad71

0002a02c <tc_aes128_set_encrypt_key>:
{
   2a02c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   2a02e:	4e26      	ldr	r6, [pc, #152]	; (2a0c8 <tc_aes128_set_encrypt_key+0x9c>)
{
   2a030:	4607      	mov	r7, r0
   2a032:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   2a034:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   2a036:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   2a038:	ad01      	add	r5, sp, #4
   2a03a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2a03c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2a03e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2a040:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   2a044:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   2a048:	4638      	mov	r0, r7
   2a04a:	2f00      	cmp	r7, #0
   2a04c:	d038      	beq.n	2a0c0 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   2a04e:	2c00      	cmp	r4, #0
   2a050:	d038      	beq.n	2a0c4 <tc_aes128_set_encrypt_key+0x98>
   2a052:	1f38      	subs	r0, r7, #4
   2a054:	4621      	mov	r1, r4
   2a056:	4602      	mov	r2, r0
   2a058:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   2a05a:	784b      	ldrb	r3, [r1, #1]
   2a05c:	780d      	ldrb	r5, [r1, #0]
   2a05e:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   2a060:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   2a064:	78cd      	ldrb	r5, [r1, #3]
   2a066:	432b      	orrs	r3, r5
   2a068:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   2a06a:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   2a06c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   2a070:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   2a072:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   2a076:	d1f0      	bne.n	2a05a <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   2a078:	4c14      	ldr	r4, [pc, #80]	; (2a0cc <tc_aes128_set_encrypt_key+0xa0>)
   2a07a:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   2a07c:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   2a07e:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   2a080:	d116      	bne.n	2a0b0 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   2a082:	f3c3 4207 	ubfx	r2, r3, #16, #8
   2a086:	5ca5      	ldrb	r5, [r4, r2]
   2a088:	0e1a      	lsrs	r2, r3, #24
   2a08a:	5ca2      	ldrb	r2, [r4, r2]
   2a08c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   2a090:	f3c3 2507 	ubfx	r5, r3, #8, #8
   2a094:	b2db      	uxtb	r3, r3
   2a096:	5d65      	ldrb	r5, [r4, r5]
   2a098:	5ce3      	ldrb	r3, [r4, r3]
   2a09a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   2a09e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   2a0a2:	f021 0303 	bic.w	r3, r1, #3
   2a0a6:	3330      	adds	r3, #48	; 0x30
   2a0a8:	446b      	add	r3, sp
   2a0aa:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   2a0ae:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   2a0b0:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   2a0b4:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   2a0b6:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   2a0b8:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   2a0ba:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   2a0bc:	d1de      	bne.n	2a07c <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   2a0be:	2001      	movs	r0, #1
}
   2a0c0:	b00d      	add	sp, #52	; 0x34
   2a0c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   2a0c4:	4620      	mov	r0, r4
   2a0c6:	e7fb      	b.n	2a0c0 <tc_aes128_set_encrypt_key+0x94>
   2a0c8:	000493e4 	.word	0x000493e4
   2a0cc:	0004ad71 	.word	0x0004ad71

0002a0d0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   2a0d0:	4901      	ldr	r1, [pc, #4]	; (2a0d8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   2a0d2:	2210      	movs	r2, #16
	str	r2, [r1]
   2a0d4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   2a0d6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   2a0d8:	e000ed10 	.word	0xe000ed10

0002a0dc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   2a0dc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   2a0de:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   2a0e0:	f380 8811 	msr	BASEPRI, r0
	isb
   2a0e4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   2a0e8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   2a0ec:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   2a0ee:	b662      	cpsie	i
	isb
   2a0f0:	f3bf 8f6f 	isb	sy

	bx	lr
   2a0f4:	4770      	bx	lr
   2a0f6:	bf00      	nop

0002a0f8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   2a0f8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   2a0fa:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   2a0fc:	f381 8811 	msr	BASEPRI, r1

	wfe
   2a100:	bf20      	wfe

	msr	BASEPRI, r0
   2a102:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   2a106:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   2a108:	4770      	bx	lr
   2a10a:	bf00      	nop

0002a10c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   2a10c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   2a10e:	2800      	cmp	r0, #0
   2a110:	db07      	blt.n	2a122 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2a112:	4a04      	ldr	r2, [pc, #16]	; (2a124 <arch_irq_enable+0x18>)
   2a114:	0941      	lsrs	r1, r0, #5
   2a116:	2301      	movs	r3, #1
   2a118:	f000 001f 	and.w	r0, r0, #31
   2a11c:	4083      	lsls	r3, r0
   2a11e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   2a122:	4770      	bx	lr
   2a124:	e000e100 	.word	0xe000e100

0002a128 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   2a128:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   2a12a:	2800      	cmp	r0, #0
   2a12c:	db0c      	blt.n	2a148 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2a12e:	0943      	lsrs	r3, r0, #5
   2a130:	4906      	ldr	r1, [pc, #24]	; (2a14c <arch_irq_disable+0x24>)
   2a132:	f000 001f 	and.w	r0, r0, #31
   2a136:	3320      	adds	r3, #32
   2a138:	2201      	movs	r2, #1
   2a13a:	4082      	lsls	r2, r0
   2a13c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   2a140:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2a144:	f3bf 8f6f 	isb	sy
}
   2a148:	4770      	bx	lr
   2a14a:	bf00      	nop
   2a14c:	e000e100 	.word	0xe000e100

0002a150 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   2a150:	4b05      	ldr	r3, [pc, #20]	; (2a168 <arch_irq_is_enabled+0x18>)
   2a152:	0942      	lsrs	r2, r0, #5
   2a154:	f000 001f 	and.w	r0, r0, #31
   2a158:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   2a15c:	2301      	movs	r3, #1
   2a15e:	fa03 f000 	lsl.w	r0, r3, r0
}
   2a162:	4010      	ands	r0, r2
   2a164:	4770      	bx	lr
   2a166:	bf00      	nop
   2a168:	e000e100 	.word	0xe000e100

0002a16c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   2a16c:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   2a16e:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2a170:	bfa8      	it	ge
   2a172:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
   2a176:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2a17a:	bfb8      	it	lt
   2a17c:	4b06      	ldrlt	r3, [pc, #24]	; (2a198 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2a17e:	ea4f 1141 	mov.w	r1, r1, lsl #5
   2a182:	bfac      	ite	ge
   2a184:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2a188:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2a18c:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2a18e:	bfb4      	ite	lt
   2a190:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2a192:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
   2a196:	4770      	bx	lr
   2a198:	e000ed14 	.word	0xe000ed14

0002a19c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   2a19c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   2a19e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   2a1a0:	4b04      	ldr	r3, [pc, #16]	; (2a1b4 <_arch_isr_direct_pm+0x18>)
   2a1a2:	699a      	ldr	r2, [r3, #24]
   2a1a4:	b11a      	cbz	r2, 2a1ae <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   2a1a6:	2200      	movs	r2, #0
   2a1a8:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   2a1aa:	f01e f9e8 	bl	4857e <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   2a1ae:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   2a1b0:	bd08      	pop	{r3, pc}
   2a1b2:	bf00      	nop
   2a1b4:	20003aac 	.word	0x20003aac

0002a1b8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   2a1b8:	bf30      	wfi
    b z_SysNmiOnReset
   2a1ba:	f7ff bffd 	b.w	2a1b8 <z_SysNmiOnReset>
   2a1be:	bf00      	nop

0002a1c0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   2a1c0:	4a0f      	ldr	r2, [pc, #60]	; (2a200 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   2a1c2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   2a1c4:	4b0f      	ldr	r3, [pc, #60]	; (2a204 <z_arm_prep_c+0x44>)
   2a1c6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   2a1ca:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   2a1cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2a1d0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   2a1d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   2a1d8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   2a1dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
   2a1e0:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   2a1e4:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   2a1e8:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   2a1ec:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   2a1f0:	f016 fe64 	bl	40ebc <z_bss_zero>
	z_data_copy();
   2a1f4:	f017 ff3a 	bl	4206c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   2a1f8:	f000 f984 	bl	2a504 <z_arm_interrupt_init>
	z_cstart();
   2a1fc:	f016 fe68 	bl	40ed0 <z_cstart>
   2a200:	00026000 	.word	0x00026000
   2a204:	e000ed00 	.word	0xe000ed00

0002a208 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   2a208:	4a09      	ldr	r2, [pc, #36]	; (2a230 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   2a20a:	490a      	ldr	r1, [pc, #40]	; (2a234 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   2a20c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   2a20e:	6809      	ldr	r1, [r1, #0]
   2a210:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2a212:	4909      	ldr	r1, [pc, #36]	; (2a238 <arch_swap+0x30>)
	_current->arch.basepri = key;
   2a214:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2a216:	684b      	ldr	r3, [r1, #4]
   2a218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   2a21c:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   2a21e:	2300      	movs	r3, #0
   2a220:	f383 8811 	msr	BASEPRI, r3
   2a224:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   2a228:	6893      	ldr	r3, [r2, #8]
}
   2a22a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   2a22c:	4770      	bx	lr
   2a22e:	bf00      	nop
   2a230:	20003aac 	.word	0x20003aac
   2a234:	0004ab80 	.word	0x0004ab80
   2a238:	e000ed00 	.word	0xe000ed00

0002a23c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   2a23c:	490f      	ldr	r1, [pc, #60]	; (2a27c <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
   2a23e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   2a240:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   2a244:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   2a246:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   2a24a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   2a24e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   2a250:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   2a254:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   2a258:	4f09      	ldr	r7, [pc, #36]	; (2a280 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   2a25a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   2a25e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   2a260:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   2a262:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   2a264:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   2a266:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   2a268:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   2a26a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   2a26e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   2a272:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   2a276:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   2a27a:	4770      	bx	lr
    ldr r1, =_kernel
   2a27c:	20003aac 	.word	0x20003aac
    ldr v4, =_SCS_ICSR
   2a280:	e000ed04 	.word	0xe000ed04

0002a284 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   2a284:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   2a288:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   2a28a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   2a28e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   2a292:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   2a294:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   2a298:	2902      	cmp	r1, #2
    beq _oops
   2a29a:	d0ff      	beq.n	2a29c <_oops>

0002a29c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   2a29c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   2a29e:	f01a fb49 	bl	44934 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   2a2a2:	bd01      	pop	{r0, pc}

0002a2a4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   2a2a4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   2a2a8:	9b00      	ldr	r3, [sp, #0]
   2a2aa:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   2a2ae:	490a      	ldr	r1, [pc, #40]	; (2a2d8 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   2a2b0:	9b01      	ldr	r3, [sp, #4]
   2a2b2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   2a2b6:	9b02      	ldr	r3, [sp, #8]
   2a2b8:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   2a2bc:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   2a2c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   2a2c4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   2a2c8:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   2a2cc:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   2a2ce:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   2a2d0:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   2a2d2:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   2a2d4:	4770      	bx	lr
   2a2d6:	bf00      	nop
   2a2d8:	00042b27 	.word	0x00042b27

0002a2dc <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   2a2dc:	4b07      	ldr	r3, [pc, #28]	; (2a2fc <arch_switch_to_main_thread+0x20>)
   2a2de:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   2a2e0:	4610      	mov	r0, r2
   2a2e2:	f381 8809 	msr	PSP, r1
   2a2e6:	2100      	movs	r1, #0
   2a2e8:	b663      	cpsie	if
   2a2ea:	f381 8811 	msr	BASEPRI, r1
   2a2ee:	f3bf 8f6f 	isb	sy
   2a2f2:	2200      	movs	r2, #0
   2a2f4:	2300      	movs	r3, #0
   2a2f6:	f018 fc16 	bl	42b26 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   2a2fa:	bf00      	nop
   2a2fc:	20003aac 	.word	0x20003aac

0002a300 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   2a300:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   2a302:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   2a304:	4a0b      	ldr	r2, [pc, #44]	; (2a334 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   2a306:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   2a308:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   2a30a:	bf1e      	ittt	ne
	movne	r1, #0
   2a30c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   2a30e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   2a310:	f01e f935 	blne	4857e <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   2a314:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   2a316:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   2a31a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   2a31e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   2a322:	4905      	ldr	r1, [pc, #20]	; (2a338 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   2a324:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   2a326:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   2a328:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   2a32a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   2a32e:	4903      	ldr	r1, [pc, #12]	; (2a33c <_isr_wrapper+0x3c>)
	bx r1
   2a330:	4708      	bx	r1
   2a332:	0000      	.short	0x0000
	ldr r2, =_kernel
   2a334:	20003aac 	.word	0x20003aac
	ldr r1, =_sw_isr_table
   2a338:	0004913c 	.word	0x0004913c
	ldr r1, =z_arm_int_exit
   2a33c:	0002a341 	.word	0x0002a341

0002a340 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   2a340:	4b04      	ldr	r3, [pc, #16]	; (2a354 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   2a342:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   2a344:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   2a346:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   2a348:	d003      	beq.n	2a352 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   2a34a:	4903      	ldr	r1, [pc, #12]	; (2a358 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   2a34c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   2a350:	600a      	str	r2, [r1, #0]

0002a352 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   2a352:	4770      	bx	lr
	ldr r3, =_kernel
   2a354:	20003aac 	.word	0x20003aac
	ldr r1, =_SCS_ICSR
   2a358:	e000ed04 	.word	0xe000ed04

0002a35c <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   2a35c:	4b0d      	ldr	r3, [pc, #52]	; (2a394 <bus_fault.constprop.0+0x38>)
   2a35e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   2a360:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   2a362:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a364:	0592      	lsls	r2, r2, #22
   2a366:	d508      	bpl.n	2a37a <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   2a368:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   2a36a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a36c:	0412      	lsls	r2, r2, #16
   2a36e:	d504      	bpl.n	2a37a <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
   2a370:	b118      	cbz	r0, 2a37a <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   2a372:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a374:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   2a378:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   2a37a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   2a37c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a37e:	05d2      	lsls	r2, r2, #23
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   2a380:	4a04      	ldr	r2, [pc, #16]	; (2a394 <bus_fault.constprop.0+0x38>)
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   2a382:	bf58      	it	pl
   2a384:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   2a386:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   2a388:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   2a38a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   2a38e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   2a390:	7008      	strb	r0, [r1, #0]

	return reason;
}
   2a392:	4770      	bx	lr
   2a394:	e000ed00 	.word	0xe000ed00

0002a398 <mem_manage_fault.constprop.0>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   2a398:	4b0e      	ldr	r3, [pc, #56]	; (2a3d4 <mem_manage_fault.constprop.0+0x3c>)
   2a39a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   2a39c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   2a39e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a3a0:	0792      	lsls	r2, r2, #30
   2a3a2:	d508      	bpl.n	2a3b6 <mem_manage_fault.constprop.0+0x1e>
		uint32_t temp = SCB->MMFAR;
   2a3a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   2a3a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a3a8:	0612      	lsls	r2, r2, #24
   2a3aa:	d504      	bpl.n	2a3b6 <mem_manage_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
   2a3ac:	b118      	cbz	r0, 2a3b6 <mem_manage_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   2a3ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a3b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   2a3b4:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   2a3b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   2a3b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   2a3ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a3bc:	06d2      	lsls	r2, r2, #27
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   2a3be:	4a05      	ldr	r2, [pc, #20]	; (2a3d4 <mem_manage_fault.constprop.0+0x3c>)
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   2a3c0:	bf58      	it	pl
   2a3c2:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   2a3c4:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   2a3c6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   2a3c8:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   2a3cc:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   2a3ce:	7008      	strb	r0, [r1, #0]
}
   2a3d0:	4770      	bx	lr
   2a3d2:	bf00      	nop
   2a3d4:	e000ed00 	.word	0xe000ed00

0002a3d8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   2a3d8:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   2a3da:	4b40      	ldr	r3, [pc, #256]	; (2a4dc <z_arm_fault+0x104>)
   2a3dc:	685b      	ldr	r3, [r3, #4]
{
   2a3de:	b08a      	sub	sp, #40	; 0x28
   2a3e0:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   2a3e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2a3e6:	2500      	movs	r5, #0
   2a3e8:	f385 8811 	msr	BASEPRI, r5
   2a3ec:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   2a3f0:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
   2a3f4:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
   2a3f8:	d111      	bne.n	2a41e <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   2a3fa:	f002 000c 	and.w	r0, r2, #12
   2a3fe:	2808      	cmp	r0, #8
   2a400:	d00d      	beq.n	2a41e <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   2a402:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   2a404:	bf4c      	ite	mi
   2a406:	460e      	movmi	r6, r1
			*nested_exc = true;
   2a408:	2501      	movpl	r5, #1
	*recoverable = false;
   2a40a:	2200      	movs	r2, #0
	switch (fault) {
   2a40c:	3b03      	subs	r3, #3
	*recoverable = false;
   2a40e:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   2a412:	2b03      	cmp	r3, #3
   2a414:	d83a      	bhi.n	2a48c <z_arm_fault+0xb4>
   2a416:	e8df f003 	tbb	[pc, r3]
   2a41a:	5204      	.short	0x5204
   2a41c:	5a56      	.short	0x5a56
		return NULL;
   2a41e:	462e      	mov	r6, r5
   2a420:	e7f3      	b.n	2a40a <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   2a422:	4b2e      	ldr	r3, [pc, #184]	; (2a4dc <z_arm_fault+0x104>)
   2a424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2a426:	0791      	lsls	r1, r2, #30
   2a428:	d430      	bmi.n	2a48c <z_arm_fault+0xb4>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   2a42a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2a42c:	2a00      	cmp	r2, #0
   2a42e:	db2d      	blt.n	2a48c <z_arm_fault+0xb4>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   2a430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2a432:	0052      	lsls	r2, r2, #1
   2a434:	d52a      	bpl.n	2a48c <z_arm_fault+0xb4>
	uint16_t fault_insn = *(ret_addr - 1);
   2a436:	69b2      	ldr	r2, [r6, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   2a438:	f832 1c02 	ldrh.w	r1, [r2, #-2]
   2a43c:	f64d 7202 	movw	r2, #57090	; 0xdf02
   2a440:	4291      	cmp	r1, r2
   2a442:	d009      	beq.n	2a458 <z_arm_fault+0x80>
		} else if (SCB_MMFSR != 0) {
   2a444:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   2a448:	b142      	cbz	r2, 2a45c <z_arm_fault+0x84>
			reason = mem_manage_fault(esf, 1, recoverable);
   2a44a:	f10d 0107 	add.w	r1, sp, #7
   2a44e:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   2a450:	f7ff ffa2 	bl	2a398 <mem_manage_fault.constprop.0>
   2a454:	4604      	mov	r4, r0
		break;
   2a456:	e01a      	b.n	2a48e <z_arm_fault+0xb6>
			reason = esf->basic.r0;
   2a458:	6834      	ldr	r4, [r6, #0]
   2a45a:	e018      	b.n	2a48e <z_arm_fault+0xb6>
		} else if (SCB_BFSR != 0) {
   2a45c:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
   2a460:	b12a      	cbz	r2, 2a46e <z_arm_fault+0x96>
			reason = bus_fault(esf, 1, recoverable);
   2a462:	f10d 0107 	add.w	r1, sp, #7
   2a466:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   2a468:	f7ff ff78 	bl	2a35c <bus_fault.constprop.0>
   2a46c:	e7f2      	b.n	2a454 <z_arm_fault+0x7c>
		} else if (SCB_UFSR != 0) {
   2a46e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
   2a470:	b292      	uxth	r2, r2
   2a472:	b15a      	cbz	r2, 2a48c <z_arm_fault+0xb4>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   2a474:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   2a476:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   2a478:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   2a47a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   2a47c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   2a47e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   2a480:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a482:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   2a486:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   2a48a:	629a      	str	r2, [r3, #40]	; 0x28
		return NULL;
   2a48c:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   2a48e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2a492:	b993      	cbnz	r3, 2a4ba <z_arm_fault+0xe2>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   2a494:	2220      	movs	r2, #32
   2a496:	4631      	mov	r1, r6
   2a498:	a802      	add	r0, sp, #8
   2a49a:	f01a fb12 	bl	44ac2 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   2a49e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2a4a0:	b1bd      	cbz	r5, 2a4d2 <z_arm_fault+0xfa>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   2a4a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
   2a4a6:	b922      	cbnz	r2, 2a4b2 <z_arm_fault+0xda>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   2a4a8:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   2a4ac:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   2a4b0:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   2a4b2:	a902      	add	r1, sp, #8
   2a4b4:	4620      	mov	r0, r4
   2a4b6:	f01a fa3b 	bl	44930 <z_arm_fatal_error>
}
   2a4ba:	b00a      	add	sp, #40	; 0x28
   2a4bc:	bd70      	pop	{r4, r5, r6, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   2a4be:	f10d 0107 	add.w	r1, sp, #7
   2a4c2:	2000      	movs	r0, #0
   2a4c4:	e7c4      	b.n	2a450 <z_arm_fault+0x78>
		reason = bus_fault(esf, 0, recoverable);
   2a4c6:	f10d 0107 	add.w	r1, sp, #7
   2a4ca:	2000      	movs	r0, #0
   2a4cc:	e7cc      	b.n	2a468 <z_arm_fault+0x90>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   2a4ce:	4b03      	ldr	r3, [pc, #12]	; (2a4dc <z_arm_fault+0x104>)
   2a4d0:	e7d0      	b.n	2a474 <z_arm_fault+0x9c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   2a4d2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   2a4d6:	f023 0301 	bic.w	r3, r3, #1
   2a4da:	e7e9      	b.n	2a4b0 <z_arm_fault+0xd8>
   2a4dc:	e000ed00 	.word	0xe000ed00

0002a4e0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   2a4e0:	4a02      	ldr	r2, [pc, #8]	; (2a4ec <z_arm_fault_init+0xc>)
   2a4e2:	6953      	ldr	r3, [r2, #20]
   2a4e4:	f043 0310 	orr.w	r3, r3, #16
   2a4e8:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   2a4ea:	4770      	bx	lr
   2a4ec:	e000ed00 	.word	0xe000ed00

0002a4f0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   2a4f0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   2a4f4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   2a4f8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   2a4fa:	4672      	mov	r2, lr
	bl z_arm_fault
   2a4fc:	f7ff ff6c 	bl	2a3d8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   2a500:	bd01      	pop	{r0, pc}
   2a502:	bf00      	nop

0002a504 <z_arm_interrupt_init>:
   2a504:	4804      	ldr	r0, [pc, #16]	; (2a518 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   2a506:	2300      	movs	r3, #0
   2a508:	2120      	movs	r1, #32
   2a50a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   2a50c:	3301      	adds	r3, #1
   2a50e:	2b30      	cmp	r3, #48	; 0x30
   2a510:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   2a514:	d1f9      	bne.n	2a50a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   2a516:	4770      	bx	lr
   2a518:	e000e100 	.word	0xe000e100

0002a51c <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   2a51c:	f01e fd1c 	bl	48f58 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   2a520:	2020      	movs	r0, #32
    msr BASEPRI, r0
   2a522:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   2a526:	4808      	ldr	r0, [pc, #32]	; (2a548 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   2a528:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   2a52c:	1840      	adds	r0, r0, r1
    msr PSP, r0
   2a52e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   2a532:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   2a536:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   2a538:	4308      	orrs	r0, r1
    msr CONTROL, r0
   2a53a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   2a53e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   2a542:	f7ff fe3d 	bl	2a1c0 <z_arm_prep_c>
   2a546:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   2a548:	20005558 	.word	0x20005558

0002a54c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   2a54c:	4b06      	ldr	r3, [pc, #24]	; (2a568 <z_impl_k_thread_abort+0x1c>)
   2a54e:	689b      	ldr	r3, [r3, #8]
   2a550:	4283      	cmp	r3, r0
   2a552:	d107      	bne.n	2a564 <z_impl_k_thread_abort+0x18>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2a554:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   2a558:	b123      	cbz	r3, 2a564 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2a55a:	4a04      	ldr	r2, [pc, #16]	; (2a56c <z_impl_k_thread_abort+0x20>)
   2a55c:	6853      	ldr	r3, [r2, #4]
   2a55e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   2a562:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   2a564:	f017 bd1e 	b.w	41fa4 <z_thread_abort>
   2a568:	20003aac 	.word	0x20003aac
   2a56c:	e000ed00 	.word	0xe000ed00

0002a570 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   2a570:	4b02      	ldr	r3, [pc, #8]	; (2a57c <z_arm_configure_static_mpu_regions+0xc>)
   2a572:	4a03      	ldr	r2, [pc, #12]	; (2a580 <z_arm_configure_static_mpu_regions+0x10>)
   2a574:	4803      	ldr	r0, [pc, #12]	; (2a584 <z_arm_configure_static_mpu_regions+0x14>)
   2a576:	2101      	movs	r1, #1
   2a578:	f000 b860 	b.w	2a63c <arm_core_mpu_configure_static_mpu_regions>
   2a57c:	20040000 	.word	0x20040000
   2a580:	20000000 	.word	0x20000000
   2a584:	000497dc 	.word	0x000497dc

0002a588 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   2a588:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   2a58a:	4e20      	ldr	r6, [pc, #128]	; (2a60c <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   2a58c:	2500      	movs	r5, #0
   2a58e:	428d      	cmp	r5, r1
   2a590:	db01      	blt.n	2a596 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   2a592:	4610      	mov	r0, r2
   2a594:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
   2a596:	6844      	ldr	r4, [r0, #4]
   2a598:	b374      	cbz	r4, 2a5f8 <mpu_configure_regions+0x70>
		if (do_sanity_check &&
   2a59a:	b153      	cbz	r3, 2a5b2 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   2a59c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   2a5a0:	ea14 0f0c 	tst.w	r4, ip
   2a5a4:	d12f      	bne.n	2a606 <mpu_configure_regions+0x7e>
		&&
   2a5a6:	2c1f      	cmp	r4, #31
   2a5a8:	d92d      	bls.n	2a606 <mpu_configure_regions+0x7e>
		((part->start & (part->size - 1U)) == 0U);
   2a5aa:	6807      	ldr	r7, [r0, #0]
		&&
   2a5ac:	ea1c 0f07 	tst.w	ip, r7
   2a5b0:	d129      	bne.n	2a606 <mpu_configure_regions+0x7e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   2a5b2:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   2a5b4:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   2a5b6:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   2a5ba:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
   2a5be:	d91e      	bls.n	2a5fe <mpu_configure_regions+0x76>
	if (size > (1UL << 31)) {
   2a5c0:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   2a5c4:	d81d      	bhi.n	2a602 <mpu_configure_regions+0x7a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   2a5c6:	3c01      	subs	r4, #1
   2a5c8:	fab4 f484 	clz	r4, r4
   2a5cc:	f1c4 041f 	rsb	r4, r4, #31
   2a5d0:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   2a5d2:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   2a5d6:	ea4c 0c04 	orr.w	ip, ip, r4
   2a5da:	d814      	bhi.n	2a606 <mpu_configure_regions+0x7e>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2a5dc:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
   2a5e0:	4314      	orrs	r4, r2
   2a5e2:	f044 0410 	orr.w	r4, r4, #16
   2a5e6:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2a5ea:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   2a5ee:	f04c 0401 	orr.w	r4, ip, #1
   2a5f2:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		reg_index++;
   2a5f6:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
   2a5f8:	3501      	adds	r5, #1
   2a5fa:	300c      	adds	r0, #12
   2a5fc:	e7c7      	b.n	2a58e <mpu_configure_regions+0x6>
		return REGION_32B;
   2a5fe:	2408      	movs	r4, #8
   2a600:	e7e7      	b.n	2a5d2 <mpu_configure_regions+0x4a>
		return REGION_4G;
   2a602:	243e      	movs	r4, #62	; 0x3e
   2a604:	e7e5      	b.n	2a5d2 <mpu_configure_regions+0x4a>
			return -EINVAL;
   2a606:	f06f 0215 	mvn.w	r2, #21
   2a60a:	e7c2      	b.n	2a592 <mpu_configure_regions+0xa>
   2a60c:	e000ed00 	.word	0xe000ed00

0002a610 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   2a610:	4b04      	ldr	r3, [pc, #16]	; (2a624 <arm_core_mpu_enable+0x14>)
   2a612:	2205      	movs	r2, #5
   2a614:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   2a618:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2a61c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   2a620:	4770      	bx	lr
   2a622:	bf00      	nop
   2a624:	e000ed00 	.word	0xe000ed00

0002a628 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   2a628:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   2a62c:	4b02      	ldr	r3, [pc, #8]	; (2a638 <arm_core_mpu_disable+0x10>)
   2a62e:	2200      	movs	r2, #0
   2a630:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   2a634:	4770      	bx	lr
   2a636:	bf00      	nop
   2a638:	e000ed00 	.word	0xe000ed00

0002a63c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   2a63c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   2a63e:	4c03      	ldr	r4, [pc, #12]	; (2a64c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   2a640:	2301      	movs	r3, #1
   2a642:	7822      	ldrb	r2, [r4, #0]
   2a644:	f7ff ffa0 	bl	2a588 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   2a648:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   2a64a:	bd10      	pop	{r4, pc}
   2a64c:	20003b6d 	.word	0x20003b6d

0002a650 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   2a650:	4914      	ldr	r1, [pc, #80]	; (2a6a4 <z_arm_mpu_init+0x54>)
   2a652:	6808      	ldr	r0, [r1, #0]
   2a654:	2808      	cmp	r0, #8
{
   2a656:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   2a658:	d821      	bhi.n	2a69e <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   2a65a:	f7ff ffe5 	bl	2a628 <arm_core_mpu_disable>
   2a65e:	4c12      	ldr	r4, [pc, #72]	; (2a6a8 <z_arm_mpu_init+0x58>)
   2a660:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   2a662:	2200      	movs	r2, #0
   2a664:	4290      	cmp	r0, r2
   2a666:	f101 010c 	add.w	r1, r1, #12
   2a66a:	d105      	bne.n	2a678 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   2a66c:	4b0f      	ldr	r3, [pc, #60]	; (2a6ac <z_arm_mpu_init+0x5c>)
   2a66e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   2a670:	f7ff ffce 	bl	2a610 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   2a674:	2000      	movs	r0, #0
}
   2a676:	bd10      	pop	{r4, pc}
   2a678:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2a67c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   2a680:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   2a684:	4313      	orrs	r3, r2
   2a686:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2a68a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   2a68e:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2a692:	f043 0301 	orr.w	r3, r3, #1
   2a696:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   2a69a:	3201      	adds	r2, #1
   2a69c:	e7e2      	b.n	2a664 <z_arm_mpu_init+0x14>
		return -1;
   2a69e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a6a2:	e7e8      	b.n	2a676 <z_arm_mpu_init+0x26>
   2a6a4:	000497e8 	.word	0x000497e8
   2a6a8:	e000ed00 	.word	0xe000ed00
   2a6ac:	20003b6d 	.word	0x20003b6d

0002a6b0 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   2a6b0:	f04f 0320 	mov.w	r3, #32
   2a6b4:	f3ef 8211 	mrs	r2, BASEPRI
   2a6b8:	f383 8812 	msr	BASEPRI_MAX, r3
   2a6bc:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   2a6c0:	4906      	ldr	r1, [pc, #24]	; (2a6dc <nordicsemi_nrf52_init+0x2c>)
   2a6c2:	2301      	movs	r3, #1
   2a6c4:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   2a6c8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   2a6cc:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   2a6d0:	f382 8811 	msr	BASEPRI, r2
   2a6d4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   2a6d8:	2000      	movs	r0, #0
   2a6da:	4770      	bx	lr
   2a6dc:	4001e000 	.word	0x4001e000

0002a6e0 <sys_arch_reboot>:
    *p_gpregret = val;
   2a6e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2a6e4:	b2c0      	uxtb	r0, r0
   2a6e6:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   2a6ea:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   2a6ee:	4905      	ldr	r1, [pc, #20]	; (2a704 <sys_arch_reboot+0x24>)
   2a6f0:	4b05      	ldr	r3, [pc, #20]	; (2a708 <sys_arch_reboot+0x28>)
   2a6f2:	68ca      	ldr	r2, [r1, #12]
   2a6f4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2a6f8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   2a6fa:	60cb      	str	r3, [r1, #12]
   2a6fc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   2a700:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   2a702:	e7fd      	b.n	2a700 <sys_arch_reboot+0x20>
   2a704:	e000ed00 	.word	0xe000ed00
   2a708:	05fa0004 	.word	0x05fa0004

0002a70c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   2a70c:	b120      	cbz	r0, 2a718 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   2a70e:	4b03      	ldr	r3, [pc, #12]	; (2a71c <arch_busy_wait+0x10>)
   2a710:	0180      	lsls	r0, r0, #6
   2a712:	f043 0301 	orr.w	r3, r3, #1
   2a716:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   2a718:	4770      	bx	lr
   2a71a:	bf00      	nop
   2a71c:	00049470 	.word	0x00049470

0002a720 <pinmux_borne_init>:
#include <devicetree.h>

#define CHARGE_CTRL_1 26
#define CHARGE_CTRL_2 4

static int pinmux_borne_init(const struct device *port) {
   2a720:	b510      	push	{r4, lr}
   2a722:	4816      	ldr	r0, [pc, #88]	; (2a77c <pinmux_borne_init+0x5c>)
   2a724:	f016 fb56 	bl	40dd4 <z_impl_device_get_binding>
   2a728:	4604      	mov	r4, r0
   2a72a:	4815      	ldr	r0, [pc, #84]	; (2a780 <pinmux_borne_init+0x60>)
   2a72c:	f016 fb52 	bl	40dd4 <z_impl_device_get_binding>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   2a730:	6922      	ldr	r2, [r4, #16]
	const struct gpio_driver_api *api =
   2a732:	68a1      	ldr	r1, [r4, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2a734:	6813      	ldr	r3, [r2, #0]
   2a736:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   2a73a:	6013      	str	r3, [r2, #0]
	}

	return api->pin_configure(port, pin, flags);
   2a73c:	4620      	mov	r0, r4
   2a73e:	680b      	ldr	r3, [r1, #0]
   2a740:	f44f 7200 	mov.w	r2, #512	; 0x200
   2a744:	211a      	movs	r1, #26
   2a746:	4798      	blx	r3

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2a748:	6923      	ldr	r3, [r4, #16]
   2a74a:	681b      	ldr	r3, [r3, #0]
   2a74c:	015b      	lsls	r3, r3, #5
	return api->port_clear_bits_raw(port, pins);
   2a74e:	68a3      	ldr	r3, [r4, #8]
	return api->port_set_bits_raw(port, pins);
   2a750:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
	return api->port_clear_bits_raw(port, pins);
   2a754:	bf54      	ite	pl
   2a756:	691b      	ldrpl	r3, [r3, #16]
	return api->port_set_bits_raw(port, pins);
   2a758:	68db      	ldrmi	r3, [r3, #12]
   2a75a:	4620      	mov	r0, r4
   2a75c:	4798      	blx	r3
	struct gpio_driver_data *data =
   2a75e:	6922      	ldr	r2, [r4, #16]
	const struct gpio_driver_api *api =
   2a760:	68a1      	ldr	r1, [r4, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2a762:	6813      	ldr	r3, [r2, #0]
   2a764:	f023 0310 	bic.w	r3, r3, #16
   2a768:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   2a76a:	4620      	mov	r0, r4
   2a76c:	680b      	ldr	r3, [r1, #0]
   2a76e:	f44f 7280 	mov.w	r2, #256	; 0x100
   2a772:	2104      	movs	r1, #4
   2a774:	4798      	blx	r3
    gpio_pin_configure(p0, CHARGE_CTRL_1, GPIO_INPUT);
    gpio_pin_configure(p0, CHARGE_CTRL_2, GPIO_INPUT);
#endif
#endif
    return 0;
}
   2a776:	2000      	movs	r0, #0
   2a778:	bd10      	pop	{r4, pc}
   2a77a:	bf00      	nop
   2a77c:	0004ae80 	.word	0x0004ae80
   2a780:	0004ae87 	.word	0x0004ae87

0002a784 <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
   2a784:	b570      	push	{r4, r5, r6, lr}
   2a786:	4c21      	ldr	r4, [pc, #132]	; (2a80c <le_gen_dhkey+0x88>)
   2a788:	f3bf 8f5b 	dmb	ish
   2a78c:	6823      	ldr	r3, [r4, #0]
   2a78e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   2a792:	07da      	lsls	r2, r3, #31
{
   2a794:	4606      	mov	r6, r0
   2a796:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   2a798:	d501      	bpl.n	2a79e <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   2a79a:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	k_sem_give(&cmd_sem);

	return BT_HCI_ERR_SUCCESS;
}
   2a79c:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   2a79e:	2901      	cmp	r1, #1
   2a7a0:	d831      	bhi.n	2a806 <le_gen_dhkey+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a7a2:	f3bf 8f5b 	dmb	ish
   2a7a6:	e854 3f00 	ldrex	r3, [r4]
   2a7aa:	f043 0202 	orr.w	r2, r3, #2
   2a7ae:	e844 2100 	strex	r1, r2, [r4]
   2a7b2:	2900      	cmp	r1, #0
   2a7b4:	d1f7      	bne.n	2a7a6 <le_gen_dhkey+0x22>
   2a7b6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
   2a7ba:	079b      	lsls	r3, r3, #30
   2a7bc:	d4ed      	bmi.n	2a79a <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, BT_PUB_KEY_COORD_LEN);
   2a7be:	4814      	ldr	r0, [pc, #80]	; (2a810 <le_gen_dhkey+0x8c>)
   2a7c0:	4631      	mov	r1, r6
   2a7c2:	f01a fa1b 	bl	44bfc <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[BT_PUB_KEY_COORD_LEN], &key[BT_PUB_KEY_COORD_LEN],
   2a7c6:	4813      	ldr	r0, [pc, #76]	; (2a814 <le_gen_dhkey+0x90>)
   2a7c8:	f106 0120 	add.w	r1, r6, #32
   2a7cc:	f01a fa16 	bl	44bfc <sys_memcpy_swap.constprop.0>
   2a7d0:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
   2a7d4:	b175      	cbz	r5, 2a7f4 <le_gen_dhkey+0x70>
   2a7d6:	e854 3f00 	ldrex	r3, [r4]
   2a7da:	f043 0304 	orr.w	r3, r3, #4
   2a7de:	e844 3200 	strex	r2, r3, [r4]
   2a7e2:	2a00      	cmp	r2, #0
   2a7e4:	d1f7      	bne.n	2a7d6 <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a7e6:	f3bf 8f5b 	dmb	ish
	z_impl_k_sem_give(sem);
   2a7ea:	480b      	ldr	r0, [pc, #44]	; (2a818 <le_gen_dhkey+0x94>)
   2a7ec:	f016 feba 	bl	41564 <z_impl_k_sem_give>
   2a7f0:	2000      	movs	r0, #0
   2a7f2:	e7d3      	b.n	2a79c <le_gen_dhkey+0x18>
   2a7f4:	e854 3f00 	ldrex	r3, [r4]
   2a7f8:	f023 0304 	bic.w	r3, r3, #4
   2a7fc:	e844 3200 	strex	r2, r3, [r4]
   2a800:	2a00      	cmp	r2, #0
   2a802:	d0f0      	beq.n	2a7e6 <le_gen_dhkey+0x62>
   2a804:	e7f6      	b.n	2a7f4 <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
   2a806:	2012      	movs	r0, #18
   2a808:	e7c8      	b.n	2a79c <le_gen_dhkey+0x18>
   2a80a:	bf00      	nop
   2a80c:	20001bec 	.word	0x20001bec
   2a810:	20003b8e 	.word	0x20003b8e
   2a814:	20003bae 	.word	0x20003bae
   2a818:	20000b8c 	.word	0x20000b8c

0002a81c <ecc_thread>:
{
   2a81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   2a820:	4f5f      	ldr	r7, [pc, #380]	; (2a9a0 <ecc_thread+0x184>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a822:	4d60      	ldr	r5, [pc, #384]	; (2a9a4 <ecc_thread+0x188>)
   2a824:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a828:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a82c:	4638      	mov	r0, r7
   2a82e:	f016 febf 	bl	415b0 <z_impl_k_sem_take>
   2a832:	f3bf 8f5b 	dmb	ish
   2a836:	682c      	ldr	r4, [r5, #0]
   2a838:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   2a83c:	f014 0401 	ands.w	r4, r4, #1
   2a840:	d055      	beq.n	2a8ee <ecc_thread+0xd2>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   2a842:	f8df 8164 	ldr.w	r8, [pc, #356]	; 2a9a8 <ecc_thread+0x18c>
   2a846:	4c59      	ldr	r4, [pc, #356]	; (2a9ac <ecc_thread+0x190>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   2a848:	4e59      	ldr	r6, [pc, #356]	; (2a9b0 <ecc_thread+0x194>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   2a84a:	485a      	ldr	r0, [pc, #360]	; (2a9b4 <ecc_thread+0x198>)
   2a84c:	4642      	mov	r2, r8
   2a84e:	4621      	mov	r1, r4
   2a850:	f018 ff7b 	bl	4374a <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
   2a854:	2800      	cmp	r0, #0
   2a856:	d03e      	beq.n	2a8d6 <ecc_thread+0xba>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   2a858:	2220      	movs	r2, #32
   2a85a:	4631      	mov	r1, r6
   2a85c:	4620      	mov	r0, r4
   2a85e:	f01a f920 	bl	44aa2 <memcmp>
   2a862:	2800      	cmp	r0, #0
   2a864:	d0f1      	beq.n	2a84a <ecc_thread+0x2e>
	return 0;
   2a866:	f04f 0800 	mov.w	r8, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   2a86a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a86e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a872:	2001      	movs	r0, #1
   2a874:	f000 fa0e 	bl	2ac94 <bt_buf_get_rx>
   2a878:	f100 0608 	add.w	r6, r0, #8
   2a87c:	2102      	movs	r1, #2
   2a87e:	4604      	mov	r4, r0
   2a880:	4630      	mov	r0, r6
   2a882:	f01d f851 	bl	47928 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   2a886:	233e      	movs	r3, #62	; 0x3e
   2a888:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   2a88a:	2342      	movs	r3, #66	; 0x42
   2a88c:	7043      	strb	r3, [r0, #1]
   2a88e:	2101      	movs	r1, #1
   2a890:	4630      	mov	r0, r6
   2a892:	f01d f849 	bl	47928 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   2a896:	2308      	movs	r3, #8
   2a898:	7003      	strb	r3, [r0, #0]
   2a89a:	2141      	movs	r1, #65	; 0x41
   2a89c:	4630      	mov	r0, r6
   2a89e:	f01d f843 	bl	47928 <net_buf_simple_add>
   2a8a2:	4606      	mov	r6, r0
	evt->status = status;
   2a8a4:	f800 8b01 	strb.w	r8, [r0], #1
	if (status) {
   2a8a8:	f1b8 0f00 	cmp.w	r8, #0
   2a8ac:	d016      	beq.n	2a8dc <ecc_thread+0xc0>
		(void)memset(evt->key, 0, sizeof(evt->key));
   2a8ae:	2240      	movs	r2, #64	; 0x40
   2a8b0:	2100      	movs	r1, #0
   2a8b2:	f01a f911 	bl	44ad8 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a8b6:	f3bf 8f5b 	dmb	ish
   2a8ba:	e855 3f00 	ldrex	r3, [r5]
   2a8be:	f023 0301 	bic.w	r3, r3, #1
   2a8c2:	e845 3200 	strex	r2, r3, [r5]
   2a8c6:	2a00      	cmp	r2, #0
   2a8c8:	d1f7      	bne.n	2a8ba <ecc_thread+0x9e>
   2a8ca:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   2a8ce:	4620      	mov	r0, r4
	bt_recv(buf);
   2a8d0:	f000 fe28 	bl	2b524 <bt_recv>
	while (true) {
   2a8d4:	e7a6      	b.n	2a824 <ecc_thread+0x8>
			return BT_HCI_ERR_UNSPECIFIED;
   2a8d6:	f04f 081f 	mov.w	r8, #31
   2a8da:	e7c6      	b.n	2a86a <ecc_thread+0x4e>
		sys_memcpy_swap(evt->key, ecc.public_key_be, BT_PUB_KEY_COORD_LEN);
   2a8dc:	4935      	ldr	r1, [pc, #212]	; (2a9b4 <ecc_thread+0x198>)
   2a8de:	f01a f98d 	bl	44bfc <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[BT_PUB_KEY_COORD_LEN],
   2a8e2:	3120      	adds	r1, #32
   2a8e4:	f106 0021 	add.w	r0, r6, #33	; 0x21
   2a8e8:	f01a f988 	bl	44bfc <sys_memcpy_swap.constprop.0>
   2a8ec:	e7e3      	b.n	2a8b6 <ecc_thread+0x9a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a8ee:	f3bf 8f5b 	dmb	ish
   2a8f2:	682b      	ldr	r3, [r5, #0]
   2a8f4:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
   2a8f8:	079b      	lsls	r3, r3, #30
   2a8fa:	d593      	bpl.n	2a824 <ecc_thread+0x8>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
   2a8fc:	492a      	ldr	r1, [pc, #168]	; (2a9a8 <ecc_thread+0x18c>)
   2a8fe:	482d      	ldr	r0, [pc, #180]	; (2a9b4 <ecc_thread+0x198>)
   2a900:	f019 fde1 	bl	444c6 <uECC_valid_public_key>
	if (ret < 0) {
   2a904:	2800      	cmp	r0, #0
   2a906:	db11      	blt.n	2a92c <ecc_thread+0x110>
   2a908:	f3bf 8f5b 	dmb	ish
		ret = uECC_shared_secret(ecc.public_key_be,
   2a90c:	4927      	ldr	r1, [pc, #156]	; (2a9ac <ecc_thread+0x190>)
   2a90e:	682b      	ldr	r3, [r5, #0]
   2a910:	4827      	ldr	r0, [pc, #156]	; (2a9b0 <ecc_thread+0x194>)
   2a912:	f3bf 8f5b 	dmb	ish
   2a916:	f013 0f04 	tst.w	r3, #4
   2a91a:	f101 0220 	add.w	r2, r1, #32
   2a91e:	4b22      	ldr	r3, [pc, #136]	; (2a9a8 <ecc_thread+0x18c>)
   2a920:	bf18      	it	ne
   2a922:	4601      	movne	r1, r0
   2a924:	4610      	mov	r0, r2
   2a926:	f018 ff5f 	bl	437e8 <uECC_shared_secret>
   2a92a:	4604      	mov	r4, r0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   2a92c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a930:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a934:	2001      	movs	r0, #1
   2a936:	f000 f9ad 	bl	2ac94 <bt_buf_get_rx>
   2a93a:	f100 0808 	add.w	r8, r0, #8
   2a93e:	2102      	movs	r1, #2
   2a940:	4606      	mov	r6, r0
   2a942:	4640      	mov	r0, r8
   2a944:	f01c fff0 	bl	47928 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   2a948:	233e      	movs	r3, #62	; 0x3e
   2a94a:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   2a94c:	2322      	movs	r3, #34	; 0x22
   2a94e:	7043      	strb	r3, [r0, #1]
   2a950:	2101      	movs	r1, #1
   2a952:	4640      	mov	r0, r8
   2a954:	f01c ffe8 	bl	47928 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   2a958:	2309      	movs	r3, #9
   2a95a:	7003      	strb	r3, [r0, #0]
   2a95c:	2121      	movs	r1, #33	; 0x21
   2a95e:	4640      	mov	r0, r8
   2a960:	f01c ffe2 	bl	47928 <net_buf_simple_add>
   2a964:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
   2a966:	3001      	adds	r0, #1
   2a968:	b99c      	cbnz	r4, 2a992 <ecc_thread+0x176>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
   2a96a:	221f      	movs	r2, #31
   2a96c:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   2a96e:	21ff      	movs	r1, #255	; 0xff
   2a970:	2220      	movs	r2, #32
   2a972:	f01a f8b1 	bl	44ad8 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a976:	f3bf 8f5b 	dmb	ish
   2a97a:	e855 3f00 	ldrex	r3, [r5]
   2a97e:	f023 0302 	bic.w	r3, r3, #2
   2a982:	e845 3200 	strex	r2, r3, [r5]
   2a986:	2a00      	cmp	r2, #0
   2a988:	d1f7      	bne.n	2a97a <ecc_thread+0x15e>
   2a98a:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   2a98e:	4630      	mov	r0, r6
   2a990:	e79e      	b.n	2a8d0 <ecc_thread+0xb4>
		evt->status = 0U;
   2a992:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   2a994:	4907      	ldr	r1, [pc, #28]	; (2a9b4 <ecc_thread+0x198>)
		evt->status = 0U;
   2a996:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   2a998:	f01a f930 	bl	44bfc <sys_memcpy_swap.constprop.0>
   2a99c:	e7eb      	b.n	2a976 <ecc_thread+0x15a>
   2a99e:	bf00      	nop
   2a9a0:	20000b8c 	.word	0x20000b8c
   2a9a4:	20001bec 	.word	0x20001bec
   2a9a8:	00049808 	.word	0x00049808
   2a9ac:	20003b6e 	.word	0x20003b6e
   2a9b0:	0004ae95 	.word	0x0004ae95
   2a9b4:	20003b8e 	.word	0x20003b8e

0002a9b8 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
   2a9b8:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2a9ba:	7d06      	ldrb	r6, [r0, #20]
   2a9bc:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
   2a9be:	b976      	cbnz	r6, 2a9de <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
   2a9c0:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
   2a9c2:	881d      	ldrh	r5, [r3, #0]
   2a9c4:	f242 0226 	movw	r2, #8230	; 0x2026
   2a9c8:	4295      	cmp	r5, r2
   2a9ca:	d045      	beq.n	2aa58 <bt_hci_ecc_send+0xa0>
   2a9cc:	d80f      	bhi.n	2a9ee <bt_hci_ecc_send+0x36>
   2a9ce:	f242 0201 	movw	r2, #8193	; 0x2001
   2a9d2:	4295      	cmp	r5, r2
   2a9d4:	d04f      	beq.n	2aa76 <bt_hci_ecc_send+0xbe>
   2a9d6:	f242 0325 	movw	r3, #8229	; 0x2025
   2a9da:	429d      	cmp	r5, r3
   2a9dc:	d013      	beq.n	2aa06 <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
   2a9de:	4b2a      	ldr	r3, [pc, #168]	; (2aa88 <bt_hci_ecc_send+0xd0>)
   2a9e0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   2a9e4:	4620      	mov	r0, r4
   2a9e6:	691b      	ldr	r3, [r3, #16]
}
   2a9e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
   2a9ec:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
   2a9ee:	f242 035e 	movw	r3, #8286	; 0x205e
   2a9f2:	429d      	cmp	r5, r3
   2a9f4:	d1f3      	bne.n	2a9de <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
   2a9f6:	2103      	movs	r1, #3
   2a9f8:	3008      	adds	r0, #8
   2a9fa:	f01c ffb4 	bl	47966 <net_buf_simple_pull>
	cmd = (void *)buf->data;
   2a9fe:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   2aa00:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   2aa04:	e02e      	b.n	2aa64 <bt_hci_ecc_send+0xac>
   2aa06:	2103      	movs	r1, #3
   2aa08:	3008      	adds	r0, #8
   2aa0a:	f01c ffac 	bl	47966 <net_buf_simple_pull>
	net_buf_unref(buf);
   2aa0e:	4620      	mov	r0, r4
   2aa10:	f012 fb4a 	bl	3d0a8 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2aa14:	f3bf 8f5b 	dmb	ish
   2aa18:	4b1c      	ldr	r3, [pc, #112]	; (2aa8c <bt_hci_ecc_send+0xd4>)
   2aa1a:	681a      	ldr	r2, [r3, #0]
   2aa1c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
   2aa20:	0792      	lsls	r2, r2, #30
   2aa22:	d507      	bpl.n	2aa34 <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
   2aa24:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
   2aa26:	4631      	mov	r1, r6
   2aa28:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
   2aa2c:	f01a f8c2 	bl	44bb4 <send_cmd_status>
}
   2aa30:	2000      	movs	r0, #0
   2aa32:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2aa34:	f3bf 8f5b 	dmb	ish
   2aa38:	e853 2f00 	ldrex	r2, [r3]
   2aa3c:	f042 0101 	orr.w	r1, r2, #1
   2aa40:	e843 1000 	strex	r0, r1, [r3]
   2aa44:	2800      	cmp	r0, #0
   2aa46:	d1f7      	bne.n	2aa38 <bt_hci_ecc_send+0x80>
   2aa48:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
   2aa4c:	07d3      	lsls	r3, r2, #31
   2aa4e:	d4e9      	bmi.n	2aa24 <bt_hci_ecc_send+0x6c>
	z_impl_k_sem_give(sem);
   2aa50:	480f      	ldr	r0, [pc, #60]	; (2aa90 <bt_hci_ecc_send+0xd8>)
   2aa52:	f016 fd87 	bl	41564 <z_impl_k_sem_give>
}
   2aa56:	e7e6      	b.n	2aa26 <bt_hci_ecc_send+0x6e>
   2aa58:	2103      	movs	r1, #3
   2aa5a:	3008      	adds	r0, #8
   2aa5c:	f01c ff83 	bl	47966 <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
   2aa60:	68a0      	ldr	r0, [r4, #8]
   2aa62:	4631      	mov	r1, r6
   2aa64:	f7ff fe8e 	bl	2a784 <le_gen_dhkey>
   2aa68:	4606      	mov	r6, r0
	net_buf_unref(buf);
   2aa6a:	4620      	mov	r0, r4
   2aa6c:	f012 fb1c 	bl	3d0a8 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
   2aa70:	4631      	mov	r1, r6
   2aa72:	4628      	mov	r0, r5
   2aa74:	e7da      	b.n	2aa2c <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
   2aa76:	78da      	ldrb	r2, [r3, #3]
   2aa78:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   2aa7c:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
   2aa7e:	791a      	ldrb	r2, [r3, #4]
   2aa80:	f022 0201 	bic.w	r2, r2, #1
   2aa84:	711a      	strb	r2, [r3, #4]
}
   2aa86:	e7aa      	b.n	2a9de <bt_hci_ecc_send+0x26>
   2aa88:	20000000 	.word	0x20000000
   2aa8c:	20001bec 	.word	0x20001bec
   2aa90:	20000b8c 	.word	0x20000b8c

0002aa94 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
   2aa94:	b510      	push	{r4, lr}
   2aa96:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2aa98:	4c0c      	ldr	r4, [pc, #48]	; (2aacc <bt_hci_ecc_init+0x38>)
   2aa9a:	490d      	ldr	r1, [pc, #52]	; (2aad0 <bt_hci_ecc_init+0x3c>)
   2aa9c:	2200      	movs	r2, #0
   2aa9e:	2300      	movs	r3, #0
   2aaa0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2aaa4:	2300      	movs	r3, #0
   2aaa6:	220a      	movs	r2, #10
   2aaa8:	e9cd 2303 	strd	r2, r3, [sp, #12]
   2aaac:	e9cd 3301 	strd	r3, r3, [sp, #4]
   2aab0:	9300      	str	r3, [sp, #0]
   2aab2:	f44f 628f 	mov.w	r2, #1144	; 0x478
   2aab6:	4b07      	ldr	r3, [pc, #28]	; (2aad4 <bt_hci_ecc_init+0x40>)
   2aab8:	4620      	mov	r0, r4
   2aaba:	f016 fb11 	bl	410e0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   2aabe:	4906      	ldr	r1, [pc, #24]	; (2aad8 <bt_hci_ecc_init+0x44>)
   2aac0:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
   2aac2:	b008      	add	sp, #32
   2aac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2aac8:	f01d bd54 	b.w	48574 <z_impl_k_thread_name_set>
   2aacc:	20000e28 	.word	0x20000e28
   2aad0:	20003ec0 	.word	0x20003ec0
   2aad4:	0002a81d 	.word	0x0002a81d
   2aad8:	0004ae8e 	.word	0x0004ae8e

0002aadc <save_id>:
static void save_id(struct k_work *work)
{
	int err;
	BT_INFO("Saving ID");
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   2aadc:	4903      	ldr	r1, [pc, #12]	; (2aaec <save_id+0x10>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   2aade:	4804      	ldr	r0, [pc, #16]	; (2aaf0 <save_id+0x14>)
   2aae0:	79ca      	ldrb	r2, [r1, #7]
   2aae2:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   2aae6:	f7fe bea3 	b.w	29830 <settings_save_one>
   2aaea:	bf00      	nop
   2aaec:	20000000 	.word	0x20000000
   2aaf0:	0004aeb5 	.word	0x0004aeb5

0002aaf4 <set>:
{
   2aaf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2aaf6:	4616      	mov	r6, r2
   2aaf8:	461f      	mov	r7, r3
	if (!name) {
   2aafa:	4604      	mov	r4, r0
   2aafc:	b920      	cbnz	r0, 2ab08 <set+0x14>
		return -ENOENT;
   2aafe:	f06f 0401 	mvn.w	r4, #1
}
   2ab02:	4620      	mov	r0, r4
   2ab04:	b003      	add	sp, #12
   2ab06:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = settings_name_next(name, &next);
   2ab08:	a901      	add	r1, sp, #4
   2ab0a:	f018 fd09 	bl	43520 <settings_name_next>
	if (!strncmp(name, "id", len)) {
   2ab0e:	4911      	ldr	r1, [pc, #68]	; (2ab54 <set+0x60>)
	len = settings_name_next(name, &next);
   2ab10:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
   2ab12:	4620      	mov	r0, r4
   2ab14:	f019 ffb1 	bl	44a7a <strncmp>
   2ab18:	4604      	mov	r4, r0
   2ab1a:	2800      	cmp	r0, #0
   2ab1c:	d1ef      	bne.n	2aafe <set+0xa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ab1e:	f3bf 8f5b 	dmb	ish
   2ab22:	4d0d      	ldr	r5, [pc, #52]	; (2ab58 <set+0x64>)
   2ab24:	682b      	ldr	r3, [r5, #0]
   2ab26:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   2ab2a:	075b      	lsls	r3, r3, #29
   2ab2c:	d4e9      	bmi.n	2ab02 <set+0xe>
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   2ab2e:	3dcc      	subs	r5, #204	; 0xcc
   2ab30:	2207      	movs	r2, #7
   2ab32:	4629      	mov	r1, r5
   2ab34:	4638      	mov	r0, r7
   2ab36:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   2ab38:	2806      	cmp	r0, #6
   2ab3a:	d806      	bhi.n	2ab4a <set+0x56>
			(void)memset(bt_dev.id_addr, 0,
   2ab3c:	2207      	movs	r2, #7
   2ab3e:	4621      	mov	r1, r4
   2ab40:	4628      	mov	r0, r5
   2ab42:	f019 ffc9 	bl	44ad8 <memset>
			bt_dev.id_count = 0U;
   2ab46:	71ec      	strb	r4, [r5, #7]
   2ab48:	e7db      	b.n	2ab02 <set+0xe>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   2ab4a:	2307      	movs	r3, #7
   2ab4c:	fbb0 f0f3 	udiv	r0, r0, r3
   2ab50:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   2ab52:	e7d6      	b.n	2ab02 <set+0xe>
   2ab54:	0004aca3 	.word	0x0004aca3
   2ab58:	200000cc 	.word	0x200000cc

0002ab5c <bt_settings_encode_key>:
{
   2ab5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ab60:	b088      	sub	sp, #32
		snprintk(path, path_size,
   2ab62:	799c      	ldrb	r4, [r3, #6]
{
   2ab64:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
   2ab68:	795d      	ldrb	r5, [r3, #5]
   2ab6a:	791e      	ldrb	r6, [r3, #4]
   2ab6c:	78df      	ldrb	r7, [r3, #3]
   2ab6e:	f893 c002 	ldrb.w	ip, [r3, #2]
   2ab72:	f893 e001 	ldrb.w	lr, [r3, #1]
   2ab76:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   2ab78:	f1b8 0f00 	cmp.w	r8, #0
   2ab7c:	d00e      	beq.n	2ab9c <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   2ab7e:	e9cd 3806 	strd	r3, r8, [sp, #24]
   2ab82:	e9cd ce04 	strd	ip, lr, [sp, #16]
   2ab86:	4613      	mov	r3, r2
   2ab88:	e9cd 6702 	strd	r6, r7, [sp, #8]
   2ab8c:	e9cd 4500 	strd	r4, r5, [sp]
   2ab90:	4a08      	ldr	r2, [pc, #32]	; (2abb4 <bt_settings_encode_key+0x58>)
   2ab92:	f017 fea4 	bl	428de <snprintk>
}
   2ab96:	b008      	add	sp, #32
   2ab98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   2ab9c:	e9cd e305 	strd	lr, r3, [sp, #20]
   2aba0:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   2aba4:	4613      	mov	r3, r2
   2aba6:	e9cd 5601 	strd	r5, r6, [sp, #4]
   2abaa:	4a03      	ldr	r2, [pc, #12]	; (2abb8 <bt_settings_encode_key+0x5c>)
   2abac:	9400      	str	r4, [sp, #0]
   2abae:	f017 fe96 	bl	428de <snprintk>
}
   2abb2:	e7f0      	b.n	2ab96 <bt_settings_encode_key+0x3a>
   2abb4:	0004aebb 	.word	0x0004aebb
   2abb8:	0004aedf 	.word	0x0004aedf

0002abbc <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   2abbc:	4801      	ldr	r0, [pc, #4]	; (2abc4 <bt_settings_save_id+0x8>)
   2abbe:	f016 be55 	b.w	4186c <k_work_submit>
   2abc2:	bf00      	nop
   2abc4:	2000033c 	.word	0x2000033c

0002abc8 <commit>:
}

static int commit(void)
{
   2abc8:	b510      	push	{r4, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   2abca:	4c15      	ldr	r4, [pc, #84]	; (2ac20 <commit+0x58>)
   2abcc:	79e3      	ldrb	r3, [r4, #7]
   2abce:	b1cb      	cbz	r3, 2ac04 <commit+0x3c>
   2abd0:	f3bf 8f5b 	dmb	ish
   2abd4:	4c13      	ldr	r4, [pc, #76]	; (2ac24 <commit+0x5c>)
   2abd6:	6823      	ldr	r3, [r4, #0]
   2abd8:	f3bf 8f5b 	dmb	ish
			BT_ERR("Unable to setup an identity address");
			return err;
		}
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2abdc:	079a      	lsls	r2, r3, #30
   2abde:	d401      	bmi.n	2abe4 <commit+0x1c>
		bt_finalize_init();
   2abe0:	f000 fd56 	bl	2b690 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2abe4:	f3bf 8f5b 	dmb	ish
   2abe8:	e854 3f00 	ldrex	r3, [r4]
   2abec:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
   2abf0:	e844 2100 	strex	r1, r2, [r4]
   2abf4:	2900      	cmp	r1, #0
   2abf6:	d1f7      	bne.n	2abe8 <commit+0x20>
   2abf8:	f3bf 8f5b 	dmb	ish
	}

	/* If any part of the Identity Information of the device has been
	 * generated this Identity needs to be saved persistently.
	 */
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   2abfc:	045b      	lsls	r3, r3, #17
   2abfe:	d40c      	bmi.n	2ac1a <commit+0x52>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
   2ac00:	2000      	movs	r0, #0
   2ac02:	e009      	b.n	2ac18 <commit+0x50>
		err = bt_setup_public_id_addr();
   2ac04:	f000 ffe2 	bl	2bbcc <bt_setup_public_id_addr>
		if (err) {
   2ac08:	b930      	cbnz	r0, 2ac18 <commit+0x50>
	if (!bt_dev.id_count) {
   2ac0a:	79e3      	ldrb	r3, [r4, #7]
   2ac0c:	2b00      	cmp	r3, #0
   2ac0e:	d1df      	bne.n	2abd0 <commit+0x8>
		err = bt_setup_random_id_addr();
   2ac10:	f001 f81c 	bl	2bc4c <bt_setup_random_id_addr>
		if (err) {
   2ac14:	2800      	cmp	r0, #0
   2ac16:	d0db      	beq.n	2abd0 <commit+0x8>
}
   2ac18:	bd10      	pop	{r4, pc}
		bt_settings_save_id();
   2ac1a:	f7ff ffcf 	bl	2abbc <bt_settings_save_id>
   2ac1e:	e7ef      	b.n	2ac00 <commit+0x38>
   2ac20:	20000000 	.word	0x20000000
   2ac24:	200000cc 	.word	0x200000cc

0002ac28 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   2ac28:	b430      	push	{r4, r5}
   2ac2a:	4603      	mov	r3, r0
   2ac2c:	4608      	mov	r0, r1
	switch (src->type) {
   2ac2e:	781a      	ldrb	r2, [r3, #0]
   2ac30:	2a01      	cmp	r2, #1
   2ac32:	d013      	beq.n	2ac5c <uuid_to_uuid128+0x34>
   2ac34:	2a02      	cmp	r2, #2
   2ac36:	d026      	beq.n	2ac86 <uuid_to_uuid128+0x5e>
   2ac38:	b972      	cbnz	r2, 2ac58 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   2ac3a:	4a15      	ldr	r2, [pc, #84]	; (2ac90 <uuid_to_uuid128+0x68>)
   2ac3c:	f102 0410 	add.w	r4, r2, #16
   2ac40:	f852 5b04 	ldr.w	r5, [r2], #4
   2ac44:	f841 5b04 	str.w	r5, [r1], #4
   2ac48:	42a2      	cmp	r2, r4
   2ac4a:	d1f9      	bne.n	2ac40 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
   2ac4c:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
   2ac4e:	7812      	ldrb	r2, [r2, #0]
   2ac50:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
   2ac52:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   2ac54:	0a1b      	lsrs	r3, r3, #8
   2ac56:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   2ac58:	bc30      	pop	{r4, r5}
   2ac5a:	4770      	bx	lr
		*dst = uuid128_base;
   2ac5c:	4a0c      	ldr	r2, [pc, #48]	; (2ac90 <uuid_to_uuid128+0x68>)
   2ac5e:	f102 0410 	add.w	r4, r2, #16
   2ac62:	f852 5b04 	ldr.w	r5, [r2], #4
   2ac66:	f841 5b04 	str.w	r5, [r1], #4
   2ac6a:	42a2      	cmp	r2, r4
   2ac6c:	d1f9      	bne.n	2ac62 <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
   2ac6e:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
   2ac70:	7812      	ldrb	r2, [r2, #0]
   2ac72:	700a      	strb	r2, [r1, #0]
   2ac74:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   2ac78:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
   2ac7a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   2ac7c:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   2ac7e:	0a1b      	lsrs	r3, r3, #8
   2ac80:	7382      	strb	r2, [r0, #14]
   2ac82:	7403      	strb	r3, [r0, #16]
}
   2ac84:	e7e8      	b.n	2ac58 <uuid_to_uuid128+0x30>
}
   2ac86:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   2ac88:	2211      	movs	r2, #17
   2ac8a:	4619      	mov	r1, r3
   2ac8c:	f019 bf19 	b.w	44ac2 <memcpy>
   2ac90:	0004af00 	.word	0x0004af00

0002ac94 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   2ac94:	b538      	push	{r3, r4, r5, lr}
   2ac96:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
   2ac98:	4805      	ldr	r0, [pc, #20]	; (2acb0 <bt_buf_get_rx+0x1c>)
   2ac9a:	f01c fde3 	bl	47864 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   2ac9e:	4604      	mov	r4, r0
   2aca0:	b120      	cbz	r0, 2acac <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
   2aca2:	2100      	movs	r1, #0
   2aca4:	3008      	adds	r0, #8
   2aca6:	f01c fdfc 	bl	478a2 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2acaa:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   2acac:	4620      	mov	r0, r4
   2acae:	bd38      	pop	{r3, r4, r5, pc}
   2acb0:	20000ccc 	.word	0x20000ccc

0002acb4 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   2acb4:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   2acb6:	490b      	ldr	r1, [pc, #44]	; (2ace4 <bt_buf_get_cmd_complete+0x30>)
{
   2acb8:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   2acba:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
{
   2acbe:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   2acc0:	b920      	cbnz	r0, 2accc <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   2acc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   2acc6:	2001      	movs	r0, #1
   2acc8:	f7ff bfe4 	b.w	2ac94 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   2accc:	f01c fdfa 	bl	478c4 <net_buf_ref>
   2acd0:	2301      	movs	r3, #1
		buf->len = 0U;
   2acd2:	2100      	movs	r1, #0
   2acd4:	7503      	strb	r3, [r0, #20]
   2acd6:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   2acd8:	4604      	mov	r4, r0
   2acda:	3008      	adds	r0, #8
   2acdc:	f01c fde1 	bl	478a2 <net_buf_simple_reserve>
}
   2ace0:	4620      	mov	r0, r4
   2ace2:	bd10      	pop	{r4, pc}
   2ace4:	20000000 	.word	0x20000000

0002ace8 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   2ace8:	b570      	push	{r4, r5, r6, lr}
   2acea:	4604      	mov	r4, r0
	switch (evt) {
   2acec:	2c0f      	cmp	r4, #15
{
   2acee:	460d      	mov	r5, r1
   2acf0:	4610      	mov	r0, r2
   2acf2:	4619      	mov	r1, r3
	switch (evt) {
   2acf4:	d805      	bhi.n	2ad02 <bt_buf_get_evt+0x1a>
   2acf6:	2c0d      	cmp	r4, #13
   2acf8:	d90d      	bls.n	2ad16 <bt_buf_get_evt+0x2e>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   2acfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   2acfe:	f7ff bfd9 	b.w	2acb4 <bt_buf_get_cmd_complete>
	switch (evt) {
   2ad02:	2c13      	cmp	r4, #19
   2ad04:	d107      	bne.n	2ad16 <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   2ad06:	480c      	ldr	r0, [pc, #48]	; (2ad38 <bt_buf_get_evt+0x50>)
   2ad08:	f01c fdac 	bl	47864 <net_buf_alloc_fixed>
			if (buf) {
   2ad0c:	4604      	mov	r4, r0
   2ad0e:	b938      	cbnz	r0, 2ad20 <bt_buf_get_evt+0x38>
{
   2ad10:	2400      	movs	r4, #0
}
   2ad12:	4620      	mov	r0, r4
   2ad14:	bd70      	pop	{r4, r5, r6, pc}
   2ad16:	4602      	mov	r2, r0
   2ad18:	460b      	mov	r3, r1
		if (discardable) {
   2ad1a:	b145      	cbz	r5, 2ad2e <bt_buf_get_evt+0x46>
   2ad1c:	4807      	ldr	r0, [pc, #28]	; (2ad3c <bt_buf_get_evt+0x54>)
   2ad1e:	e7f3      	b.n	2ad08 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   2ad20:	2100      	movs	r1, #0
   2ad22:	3008      	adds	r0, #8
   2ad24:	f01c fdbd 	bl	478a2 <net_buf_simple_reserve>
   2ad28:	2301      	movs	r3, #1
   2ad2a:	7523      	strb	r3, [r4, #20]
}
   2ad2c:	e7f1      	b.n	2ad12 <bt_buf_get_evt+0x2a>
}
   2ad2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   2ad32:	2001      	movs	r0, #1
   2ad34:	f7ff bfae 	b.w	2ac94 <bt_buf_get_rx>
   2ad38:	20000cf8 	.word	0x20000cf8
   2ad3c:	20000c48 	.word	0x20000c48

0002ad40 <hci_disconn_complete_prio>:
{
   2ad40:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   2ad42:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2ad44:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   2ad48:	781b      	ldrb	r3, [r3, #0]
   2ad4a:	b963      	cbnz	r3, 2ad66 <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   2ad4c:	4620      	mov	r0, r4
   2ad4e:	f001 fcef 	bl	2c730 <bt_conn_lookup_handle>
	if (!conn) {
   2ad52:	4605      	mov	r5, r0
   2ad54:	b940      	cbnz	r0, 2ad68 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   2ad56:	4b08      	ldr	r3, [pc, #32]	; (2ad78 <hci_disconn_complete_prio+0x38>)
   2ad58:	881a      	ldrh	r2, [r3, #0]
   2ad5a:	b922      	cbnz	r2, 2ad66 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   2ad5c:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   2ad60:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   2ad64:	8018      	strh	r0, [r3, #0]
}
   2ad66:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   2ad68:	2101      	movs	r1, #1
   2ad6a:	f001 fce9 	bl	2c740 <bt_conn_set_state>
	bt_conn_unref(conn);
   2ad6e:	4628      	mov	r0, r5
}
   2ad70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   2ad74:	f01a be45 	b.w	45a02 <bt_conn_unref>
   2ad78:	20003aec 	.word	0x20003aec

0002ad7c <hci_le_meta_event>:
{
   2ad7c:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   2ad7e:	2101      	movs	r1, #1
   2ad80:	4604      	mov	r4, r0
   2ad82:	3008      	adds	r0, #8
   2ad84:	f01c fdf7 	bl	47976 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   2ad88:	4621      	mov	r1, r4
   2ad8a:	4a03      	ldr	r2, [pc, #12]	; (2ad98 <hci_le_meta_event+0x1c>)
   2ad8c:	7800      	ldrb	r0, [r0, #0]
}
   2ad8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   2ad92:	230a      	movs	r3, #10
   2ad94:	f019 bfdf 	b.w	44d56 <handle_event>
   2ad98:	00049940 	.word	0x00049940

0002ad9c <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   2ad9c:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   2ad9e:	4c0c      	ldr	r4, [pc, #48]	; (2add0 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   2ada0:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   2ada2:	2205      	movs	r2, #5
   2ada4:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   2ada8:	f001 fec4 	bl	2cb34 <bt_conn_lookup_state_le>
		if (!conn) {
   2adac:	b970      	cbnz	r0, 2adcc <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
   2adae:	4b09      	ldr	r3, [pc, #36]	; (2add4 <find_pending_connect.part.0+0x38>)
   2adb0:	6818      	ldr	r0, [r3, #0]
   2adb2:	889a      	ldrh	r2, [r3, #4]
   2adb4:	9000      	str	r0, [sp, #0]
   2adb6:	799b      	ldrb	r3, [r3, #6]
   2adb8:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   2adbc:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
   2adc0:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   2adc4:	2204      	movs	r2, #4
   2adc6:	4669      	mov	r1, sp
   2adc8:	f001 feb4 	bl	2cb34 <bt_conn_lookup_state_le>
}
   2adcc:	b002      	add	sp, #8
   2adce:	bd10      	pop	{r4, pc}
   2add0:	20000000 	.word	0x20000000
   2add4:	0004941e 	.word	0x0004941e

0002add8 <hci_cmd_done>:
{
   2add8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2adda:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   2addc:	7990      	ldrb	r0, [r2, #6]
{
   2adde:	460e      	mov	r6, r1
   2ade0:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   2ade2:	f012 f89f 	bl	3cf24 <net_buf_pool_get>
   2ade6:	4b2d      	ldr	r3, [pc, #180]	; (2ae9c <hci_cmd_done+0xc4>)
   2ade8:	4283      	cmp	r3, r0
   2adea:	d155      	bne.n	2ae98 <hci_cmd_done+0xc0>
	if (cmd(buf)->opcode != opcode) {
   2adec:	4620      	mov	r0, r4
   2adee:	f012 f8a1 	bl	3cf34 <net_buf_id>
   2adf2:	4d2b      	ldr	r5, [pc, #172]	; (2aea0 <hci_cmd_done+0xc8>)
   2adf4:	230c      	movs	r3, #12
   2adf6:	fb03 5000 	mla	r0, r3, r0, r5
   2adfa:	8843      	ldrh	r3, [r0, #2]
   2adfc:	42bb      	cmp	r3, r7
   2adfe:	d14b      	bne.n	2ae98 <hci_cmd_done+0xc0>
	if (bt_dev.sent_cmd) {
   2ae00:	4f28      	ldr	r7, [pc, #160]	; (2aea4 <hci_cmd_done+0xcc>)
   2ae02:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   2ae06:	b120      	cbz	r0, 2ae12 <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
   2ae08:	f012 f94e 	bl	3d0a8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   2ae0c:	2300      	movs	r3, #0
   2ae0e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   2ae12:	4620      	mov	r0, r4
   2ae14:	f012 f88e 	bl	3cf34 <net_buf_id>
   2ae18:	270c      	movs	r7, #12
   2ae1a:	fb07 5000 	mla	r0, r7, r0, r5
   2ae1e:	6843      	ldr	r3, [r0, #4]
   2ae20:	b1a3      	cbz	r3, 2ae4c <hci_cmd_done+0x74>
   2ae22:	b99e      	cbnz	r6, 2ae4c <hci_cmd_done+0x74>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   2ae24:	4620      	mov	r0, r4
   2ae26:	f012 f885 	bl	3cf34 <net_buf_id>
   2ae2a:	fb07 5000 	mla	r0, r7, r0, r5
	atomic_val_t mask = ATOMIC_MASK(bit);
   2ae2e:	2301      	movs	r3, #1
   2ae30:	6847      	ldr	r7, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   2ae32:	e9d7 2000 	ldrd	r2, r0, [r7]
   2ae36:	f000 011f 	and.w	r1, r0, #31
   2ae3a:	fa03 f101 	lsl.w	r1, r3, r1
	if (val) {
   2ae3e:	7a3b      	ldrb	r3, [r7, #8]
   2ae40:	0940      	lsrs	r0, r0, #5
   2ae42:	b1d3      	cbz	r3, 2ae7a <hci_cmd_done+0xa2>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2ae44:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   2ae48:	f019 ffb5 	bl	44db6 <atomic_or>
	if (cmd(buf)->sync) {
   2ae4c:	4620      	mov	r0, r4
   2ae4e:	f012 f871 	bl	3cf34 <net_buf_id>
   2ae52:	270c      	movs	r7, #12
   2ae54:	fb07 5000 	mla	r0, r7, r0, r5
   2ae58:	6883      	ldr	r3, [r0, #8]
   2ae5a:	b1eb      	cbz	r3, 2ae98 <hci_cmd_done+0xc0>
		cmd(buf)->status = status;
   2ae5c:	4620      	mov	r0, r4
   2ae5e:	f012 f869 	bl	3cf34 <net_buf_id>
   2ae62:	4378      	muls	r0, r7
   2ae64:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   2ae66:	4620      	mov	r0, r4
   2ae68:	f012 f864 	bl	3cf34 <net_buf_id>
   2ae6c:	fb07 5500 	mla	r5, r7, r0, r5
   2ae70:	68a8      	ldr	r0, [r5, #8]
}
   2ae72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
   2ae76:	f016 bb75 	b.w	41564 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2ae7a:	43cb      	mvns	r3, r1
   2ae7c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   2ae80:	f3bf 8f5b 	dmb	ish
   2ae84:	e852 0f00 	ldrex	r0, [r2]
   2ae88:	4018      	ands	r0, r3
   2ae8a:	e842 0100 	strex	r1, r0, [r2]
   2ae8e:	2900      	cmp	r1, #0
   2ae90:	d1f8      	bne.n	2ae84 <hci_cmd_done+0xac>
   2ae92:	f3bf 8f5b 	dmb	ish
   2ae96:	e7d9      	b.n	2ae4c <hci_cmd_done+0x74>
   2ae98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2ae9a:	bf00      	nop
   2ae9c:	20000ca0 	.word	0x20000ca0
   2aea0:	20001bf4 	.word	0x20001bf4
   2aea4:	20000000 	.word	0x20000000

0002aea8 <hci_cmd_status>:
{
   2aea8:	b538      	push	{r3, r4, r5, lr}
   2aeaa:	2104      	movs	r1, #4
   2aeac:	4604      	mov	r4, r0
   2aeae:	3008      	adds	r0, #8
   2aeb0:	f01c fd61 	bl	47976 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   2aeb4:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   2aeb6:	7801      	ldrb	r1, [r0, #0]
   2aeb8:	8840      	ldrh	r0, [r0, #2]
   2aeba:	4622      	mov	r2, r4
   2aebc:	f7ff ff8c 	bl	2add8 <hci_cmd_done>
	if (ncmd) {
   2aec0:	b125      	cbz	r5, 2aecc <hci_cmd_status+0x24>
   2aec2:	4803      	ldr	r0, [pc, #12]	; (2aed0 <hci_cmd_status+0x28>)
}
   2aec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2aec8:	f016 bb4c 	b.w	41564 <z_impl_k_sem_give>
   2aecc:	bd38      	pop	{r3, r4, r5, pc}
   2aece:	bf00      	nop
   2aed0:	20000120 	.word	0x20000120

0002aed4 <hci_cmd_complete>:
{
   2aed4:	b538      	push	{r3, r4, r5, lr}
   2aed6:	2103      	movs	r1, #3
   2aed8:	4604      	mov	r4, r0
   2aeda:	3008      	adds	r0, #8
   2aedc:	f01c fd4b 	bl	47976 <net_buf_simple_pull_mem>
	status = buf->data[0];
   2aee0:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   2aee2:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   2aee4:	7819      	ldrb	r1, [r3, #0]
   2aee6:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   2aeea:	4622      	mov	r2, r4
   2aeec:	f7ff ff74 	bl	2add8 <hci_cmd_done>
	if (ncmd) {
   2aef0:	b125      	cbz	r5, 2aefc <hci_cmd_complete+0x28>
   2aef2:	4803      	ldr	r0, [pc, #12]	; (2af00 <hci_cmd_complete+0x2c>)
}
   2aef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2aef8:	f016 bb34 	b.w	41564 <z_impl_k_sem_give>
   2aefc:	bd38      	pop	{r3, r4, r5, pc}
   2aefe:	bf00      	nop
   2af00:	20000120 	.word	0x20000120

0002af04 <hci_tx_thread>:
{
   2af04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   2af08:	f8df 8104 	ldr.w	r8, [pc, #260]	; 2b010 <hci_tx_thread+0x10c>
		BT_ASSERT(err == 0);
   2af0c:	f8df 9104 	ldr.w	r9, [pc, #260]	; 2b014 <hci_tx_thread+0x110>
			ev_count += bt_conn_prepare_events(&events[1]);
   2af10:	f108 0a14 	add.w	sl, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
   2af14:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   2af18:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
   2af1a:	f36f 3352 	bfc	r3, #13, #6
   2af1e:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   2af22:	f001 fbd1 	bl	2c6c8 <bt_conn_prepare_events>
   2af26:	1c45      	adds	r5, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   2af28:	4839      	ldr	r0, [pc, #228]	; (2b010 <hci_tx_thread+0x10c>)
   2af2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2af2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2af32:	4629      	mov	r1, r5
   2af34:	f017 fa84 	bl	42440 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   2af38:	b160      	cbz	r0, 2af54 <hci_tx_thread+0x50>
   2af3a:	4937      	ldr	r1, [pc, #220]	; (2b018 <hci_tx_thread+0x114>)
   2af3c:	4837      	ldr	r0, [pc, #220]	; (2b01c <hci_tx_thread+0x118>)
   2af3e:	f640 1393 	movw	r3, #2451	; 0x993
   2af42:	464a      	mov	r2, r9
   2af44:	f017 fcbe 	bl	428c4 <printk>
   2af48:	4040      	eors	r0, r0
   2af4a:	f380 8811 	msr	BASEPRI, r0
   2af4e:	f04f 0003 	mov.w	r0, #3
   2af52:	df02      	svc	2
{
   2af54:	4e2e      	ldr	r6, [pc, #184]	; (2b010 <hci_tx_thread+0x10c>)
	for (; count; ev++, count--) {
   2af56:	b915      	cbnz	r5, 2af5e <hci_tx_thread+0x5a>
	z_impl_k_yield();
   2af58:	f016 ff72 	bl	41e40 <z_impl_k_yield>
	while (1) {
   2af5c:	e7da      	b.n	2af14 <hci_tx_thread+0x10>
		switch (ev->state) {
   2af5e:	68f3      	ldr	r3, [r6, #12]
   2af60:	f3c3 3345 	ubfx	r3, r3, #13, #6
   2af64:	2b04      	cmp	r3, #4
   2af66:	d148      	bne.n	2affa <hci_tx_thread+0xf6>
			if (ev->tag == BT_EVENT_CMD_TX) {
   2af68:	7b33      	ldrb	r3, [r6, #12]
   2af6a:	2b00      	cmp	r3, #0
   2af6c:	d148      	bne.n	2b000 <hci_tx_thread+0xfc>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   2af6e:	482c      	ldr	r0, [pc, #176]	; (2b020 <hci_tx_thread+0x11c>)
   2af70:	2200      	movs	r2, #0
   2af72:	2300      	movs	r3, #0
   2af74:	f01c fc7b 	bl	4786e <net_buf_get>
	BT_ASSERT(buf);
   2af78:	4604      	mov	r4, r0
   2af7a:	b960      	cbnz	r0, 2af96 <hci_tx_thread+0x92>
   2af7c:	4929      	ldr	r1, [pc, #164]	; (2b024 <hci_tx_thread+0x120>)
   2af7e:	4827      	ldr	r0, [pc, #156]	; (2b01c <hci_tx_thread+0x118>)
   2af80:	f640 132a 	movw	r3, #2346	; 0x92a
   2af84:	464a      	mov	r2, r9
   2af86:	f017 fc9d 	bl	428c4 <printk>
   2af8a:	4040      	eors	r0, r0
   2af8c:	f380 8811 	msr	BASEPRI, r0
   2af90:	f04f 0003 	mov.w	r0, #3
   2af94:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   2af96:	4f24      	ldr	r7, [pc, #144]	; (2b028 <hci_tx_thread+0x124>)
	return z_impl_k_sem_take(sem, timeout);
   2af98:	4824      	ldr	r0, [pc, #144]	; (2b02c <hci_tx_thread+0x128>)
   2af9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2af9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2afa2:	f016 fb05 	bl	415b0 <z_impl_k_sem_take>
   2afa6:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   2afaa:	b120      	cbz	r0, 2afb6 <hci_tx_thread+0xb2>
		net_buf_unref(bt_dev.sent_cmd);
   2afac:	f012 f87c 	bl	3d0a8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   2afb0:	2300      	movs	r3, #0
   2afb2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   2afb6:	4620      	mov	r0, r4
   2afb8:	f01c fc84 	bl	478c4 <net_buf_ref>
   2afbc:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
		return bt_hci_ecc_send(buf);
   2afc0:	4620      	mov	r0, r4
   2afc2:	f7ff fcf9 	bl	2a9b8 <bt_hci_ecc_send>
	if (err) {
   2afc6:	b1c0      	cbz	r0, 2affa <hci_tx_thread+0xf6>
	z_impl_k_sem_give(sem);
   2afc8:	4818      	ldr	r0, [pc, #96]	; (2b02c <hci_tx_thread+0x128>)
   2afca:	f016 facb 	bl	41564 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   2afce:	4620      	mov	r0, r4
   2afd0:	f011 ffb0 	bl	3cf34 <net_buf_id>
   2afd4:	4b16      	ldr	r3, [pc, #88]	; (2b030 <hci_tx_thread+0x12c>)
   2afd6:	220c      	movs	r2, #12
   2afd8:	fb02 3000 	mla	r0, r2, r0, r3
   2afdc:	211f      	movs	r1, #31
   2afde:	8840      	ldrh	r0, [r0, #2]
   2afe0:	4622      	mov	r2, r4
   2afe2:	f7ff fef9 	bl	2add8 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   2afe6:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   2afea:	f012 f85d 	bl	3d0a8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   2afee:	2300      	movs	r3, #0
		net_buf_unref(buf);
   2aff0:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   2aff2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		net_buf_unref(buf);
   2aff6:	f012 f857 	bl	3d0a8 <net_buf_unref>
	for (; count; ev++, count--) {
   2affa:	3614      	adds	r6, #20
   2affc:	3d01      	subs	r5, #1
   2affe:	e7aa      	b.n	2af56 <hci_tx_thread+0x52>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   2b000:	2b01      	cmp	r3, #1
   2b002:	d1fa      	bne.n	2affa <hci_tx_thread+0xf6>
					conn = CONTAINER_OF(ev->fifo,
   2b004:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   2b006:	3838      	subs	r0, #56	; 0x38
   2b008:	f001 fe7e 	bl	2cd08 <bt_conn_process_tx>
   2b00c:	e7f5      	b.n	2affa <hci_tx_thread+0xf6>
   2b00e:	bf00      	nop
   2b010:	2000034c 	.word	0x2000034c
   2b014:	0004af11 	.word	0x0004af11
   2b018:	0004af45 	.word	0x0004af45
   2b01c:	0004af4e 	.word	0x0004af4e
   2b020:	2000013c 	.word	0x2000013c
   2b024:	0004af6b 	.word	0x0004af6b
   2b028:	20000000 	.word	0x20000000
   2b02c:	20000120 	.word	0x20000120
   2b030:	20001bf4 	.word	0x20001bf4

0002b034 <bt_hci_cmd_state_set_init>:
{
   2b034:	b510      	push	{r4, lr}
	state->bit = bit;
   2b036:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   2b03a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   2b03e:	720b      	strb	r3, [r1, #8]
{
   2b040:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   2b042:	f011 ff77 	bl	3cf34 <net_buf_id>
   2b046:	4b03      	ldr	r3, [pc, #12]	; (2b054 <bt_hci_cmd_state_set_init+0x20>)
   2b048:	220c      	movs	r2, #12
   2b04a:	fb02 3300 	mla	r3, r2, r0, r3
   2b04e:	605c      	str	r4, [r3, #4]
}
   2b050:	bd10      	pop	{r4, pc}
   2b052:	bf00      	nop
   2b054:	20001bf4 	.word	0x20001bf4

0002b058 <bt_hci_cmd_create>:
{
   2b058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   2b05c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b064:	4606      	mov	r6, r0
   2b066:	4817      	ldr	r0, [pc, #92]	; (2b0c4 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   2b068:	4d17      	ldr	r5, [pc, #92]	; (2b0c8 <bt_hci_cmd_create+0x70>)
{
   2b06a:	460f      	mov	r7, r1
   2b06c:	f01c fbfa 	bl	47864 <net_buf_alloc_fixed>
   2b070:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   2b072:	f100 0a08 	add.w	sl, r0, #8
   2b076:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2b078:	f04f 0800 	mov.w	r8, #0
   2b07c:	4650      	mov	r0, sl
   2b07e:	f01c fc10 	bl	478a2 <net_buf_simple_reserve>
   2b082:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   2b086:	4620      	mov	r0, r4
   2b088:	f011 ff54 	bl	3cf34 <net_buf_id>
   2b08c:	f04f 090c 	mov.w	r9, #12
   2b090:	fb09 5000 	mla	r0, r9, r0, r5
   2b094:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   2b096:	4620      	mov	r0, r4
   2b098:	f011 ff4c 	bl	3cf34 <net_buf_id>
   2b09c:	fb09 5000 	mla	r0, r9, r0, r5
   2b0a0:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   2b0a4:	4620      	mov	r0, r4
   2b0a6:	f011 ff45 	bl	3cf34 <net_buf_id>
   2b0aa:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   2b0ae:	2103      	movs	r1, #3
   2b0b0:	f8c5 8004 	str.w	r8, [r5, #4]
   2b0b4:	4650      	mov	r0, sl
   2b0b6:	f01c fc37 	bl	47928 <net_buf_simple_add>
	hdr->param_len = param_len;
   2b0ba:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   2b0bc:	8006      	strh	r6, [r0, #0]
}
   2b0be:	4620      	mov	r0, r4
   2b0c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b0c4:	20000ca0 	.word	0x20000ca0
   2b0c8:	20001bf4 	.word	0x20001bf4

0002b0cc <bt_hci_cmd_send>:
{
   2b0cc:	b538      	push	{r3, r4, r5, lr}
   2b0ce:	4605      	mov	r5, r0
	if (!buf) {
   2b0d0:	460c      	mov	r4, r1
   2b0d2:	b919      	cbnz	r1, 2b0dc <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   2b0d4:	f7ff ffc0 	bl	2b058 <bt_hci_cmd_create>
		if (!buf) {
   2b0d8:	4604      	mov	r4, r0
   2b0da:	b198      	cbz	r0, 2b104 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   2b0dc:	f640 4335 	movw	r3, #3125	; 0xc35
   2b0e0:	429d      	cmp	r5, r3
   2b0e2:	d109      	bne.n	2b0f8 <bt_hci_cmd_send+0x2c>
		return bt_hci_ecc_send(buf);
   2b0e4:	4620      	mov	r0, r4
   2b0e6:	f7ff fc67 	bl	2a9b8 <bt_hci_ecc_send>
		if (err) {
   2b0ea:	4605      	mov	r5, r0
   2b0ec:	b140      	cbz	r0, 2b100 <bt_hci_cmd_send+0x34>
			net_buf_unref(buf);
   2b0ee:	4620      	mov	r0, r4
   2b0f0:	f011 ffda 	bl	3d0a8 <net_buf_unref>
}
   2b0f4:	4628      	mov	r0, r5
   2b0f6:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   2b0f8:	4804      	ldr	r0, [pc, #16]	; (2b10c <bt_hci_cmd_send+0x40>)
   2b0fa:	4621      	mov	r1, r4
   2b0fc:	f01c fbd5 	bl	478aa <net_buf_put>
	return 0;
   2b100:	2500      	movs	r5, #0
   2b102:	e7f7      	b.n	2b0f4 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
   2b104:	f06f 0568 	mvn.w	r5, #104	; 0x68
   2b108:	e7f4      	b.n	2b0f4 <bt_hci_cmd_send+0x28>
   2b10a:	bf00      	nop
   2b10c:	2000013c 	.word	0x2000013c

0002b110 <bt_hci_cmd_send_sync>:
{
   2b110:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b112:	4615      	mov	r5, r2
   2b114:	b087      	sub	sp, #28
	if (!buf) {
   2b116:	460c      	mov	r4, r1
   2b118:	b921      	cbnz	r1, 2b124 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
   2b11a:	f7ff ff9d 	bl	2b058 <bt_hci_cmd_create>
		if (!buf) {
   2b11e:	4604      	mov	r4, r0
   2b120:	2800      	cmp	r0, #0
   2b122:	d047      	beq.n	2b1b4 <bt_hci_cmd_send_sync+0xa4>
	return z_impl_k_sem_init(sem, initial_count, limit);
   2b124:	2201      	movs	r2, #1
   2b126:	2100      	movs	r1, #0
   2b128:	4668      	mov	r0, sp
   2b12a:	f01d fb10 	bl	4874e <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   2b12e:	4620      	mov	r0, r4
   2b130:	f011 ff00 	bl	3cf34 <net_buf_id>
   2b134:	4f21      	ldr	r7, [pc, #132]	; (2b1bc <bt_hci_cmd_send_sync+0xac>)
   2b136:	230c      	movs	r3, #12
   2b138:	fb03 7000 	mla	r0, r3, r0, r7
   2b13c:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   2b140:	4620      	mov	r0, r4
   2b142:	f01c fbbf 	bl	478c4 <net_buf_ref>
   2b146:	4601      	mov	r1, r0
   2b148:	481d      	ldr	r0, [pc, #116]	; (2b1c0 <bt_hci_cmd_send_sync+0xb0>)
   2b14a:	f01c fbae 	bl	478aa <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   2b14e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   2b152:	2300      	movs	r3, #0
   2b154:	4668      	mov	r0, sp
   2b156:	f016 fa2b 	bl	415b0 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   2b15a:	4606      	mov	r6, r0
   2b15c:	b180      	cbz	r0, 2b180 <bt_hci_cmd_send_sync+0x70>
   2b15e:	4a19      	ldr	r2, [pc, #100]	; (2b1c4 <bt_hci_cmd_send_sync+0xb4>)
   2b160:	4919      	ldr	r1, [pc, #100]	; (2b1c8 <bt_hci_cmd_send_sync+0xb8>)
   2b162:	481a      	ldr	r0, [pc, #104]	; (2b1cc <bt_hci_cmd_send_sync+0xbc>)
   2b164:	f240 1331 	movw	r3, #305	; 0x131
   2b168:	f017 fbac 	bl	428c4 <printk>
   2b16c:	4818      	ldr	r0, [pc, #96]	; (2b1d0 <bt_hci_cmd_send_sync+0xc0>)
   2b16e:	4631      	mov	r1, r6
   2b170:	f017 fba8 	bl	428c4 <printk>
   2b174:	4040      	eors	r0, r0
   2b176:	f380 8811 	msr	BASEPRI, r0
   2b17a:	f04f 0003 	mov.w	r0, #3
   2b17e:	df02      	svc	2
	status = cmd(buf)->status;
   2b180:	4620      	mov	r0, r4
   2b182:	f011 fed7 	bl	3cf34 <net_buf_id>
   2b186:	230c      	movs	r3, #12
   2b188:	4358      	muls	r0, r3
   2b18a:	5c3e      	ldrb	r6, [r7, r0]
	if (status) {
   2b18c:	b156      	cbz	r6, 2b1a4 <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
   2b18e:	4620      	mov	r0, r4
   2b190:	f011 ff8a 	bl	3d0a8 <net_buf_unref>
			return -ECONNREFUSED;
   2b194:	2e09      	cmp	r6, #9
   2b196:	bf14      	ite	ne
   2b198:	f06f 0004 	mvnne.w	r0, #4
   2b19c:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   2b1a0:	b007      	add	sp, #28
   2b1a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   2b1a4:	b115      	cbz	r5, 2b1ac <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
   2b1a6:	602c      	str	r4, [r5, #0]
	return 0;
   2b1a8:	2000      	movs	r0, #0
   2b1aa:	e7f9      	b.n	2b1a0 <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
   2b1ac:	4620      	mov	r0, r4
   2b1ae:	f011 ff7b 	bl	3d0a8 <net_buf_unref>
   2b1b2:	e7f9      	b.n	2b1a8 <bt_hci_cmd_send_sync+0x98>
			return -ENOBUFS;
   2b1b4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2b1b8:	e7f2      	b.n	2b1a0 <bt_hci_cmd_send_sync+0x90>
   2b1ba:	bf00      	nop
   2b1bc:	20001bf4 	.word	0x20001bf4
   2b1c0:	2000013c 	.word	0x2000013c
   2b1c4:	0004af11 	.word	0x0004af11
   2b1c8:	0004af45 	.word	0x0004af45
   2b1cc:	0004af4e 	.word	0x0004af4e
   2b1d0:	0004af6f 	.word	0x0004af6f

0002b1d4 <bt_get_phy>:
	switch (hci_phy) {
   2b1d4:	3801      	subs	r0, #1
   2b1d6:	b2c0      	uxtb	r0, r0
   2b1d8:	2802      	cmp	r0, #2
   2b1da:	bf9a      	itte	ls
   2b1dc:	4b01      	ldrls	r3, [pc, #4]	; (2b1e4 <bt_get_phy+0x10>)
   2b1de:	5c18      	ldrbls	r0, [r3, r0]
{
   2b1e0:	2000      	movhi	r0, #0
}
   2b1e2:	4770      	bx	lr
   2b1e4:	0004b042 	.word	0x0004b042

0002b1e8 <conn_auto_initiate>:
{
   2b1e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2b1ea:	7b43      	ldrb	r3, [r0, #13]
   2b1ec:	2b07      	cmp	r3, #7
{
   2b1ee:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   2b1f0:	d15a      	bne.n	2b2a8 <conn_auto_initiate+0xc0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b1f2:	f3bf 8f5b 	dmb	ish
   2b1f6:	6843      	ldr	r3, [r0, #4]
   2b1f8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   2b1fc:	049b      	lsls	r3, r3, #18
   2b1fe:	f100 0604 	add.w	r6, r0, #4
   2b202:	d41b      	bmi.n	2b23c <conn_auto_initiate+0x54>
   2b204:	78c3      	ldrb	r3, [r0, #3]
   2b206:	b123      	cbz	r3, 2b212 <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   2b208:	4b28      	ldr	r3, [pc, #160]	; (2b2ac <conn_auto_initiate+0xc4>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   2b20a:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   2b20e:	071d      	lsls	r5, r3, #28
   2b210:	d514      	bpl.n	2b23c <conn_auto_initiate+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   2b212:	2102      	movs	r1, #2
   2b214:	f242 0016 	movw	r0, #8214	; 0x2016
   2b218:	f7ff ff1e 	bl	2b058 <bt_hci_cmd_create>
	if (!buf) {
   2b21c:	4605      	mov	r5, r0
   2b21e:	b168      	cbz	r0, 2b23c <conn_auto_initiate+0x54>
   2b220:	2102      	movs	r1, #2
   2b222:	3008      	adds	r0, #8
   2b224:	f01c fb80 	bl	47928 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2b228:	8823      	ldrh	r3, [r4, #0]
   2b22a:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   2b22c:	4629      	mov	r1, r5
   2b22e:	f242 0016 	movw	r0, #8214	; 0x2016
}
   2b232:	b004      	add	sp, #16
   2b234:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   2b238:	f7ff bf48 	b.w	2b0cc <bt_hci_cmd_send>
   2b23c:	f3bf 8f5b 	dmb	ish
   2b240:	6863      	ldr	r3, [r4, #4]
   2b242:	4d1a      	ldr	r5, [pc, #104]	; (2b2ac <conn_auto_initiate+0xc4>)
   2b244:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   2b248:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   2b24c:	f3c3 3100 	ubfx	r1, r3, #12, #1
   2b250:	d111      	bne.n	2b276 <conn_auto_initiate+0x8e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   2b252:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   2b256:	07d8      	lsls	r0, r3, #31
   2b258:	d50d      	bpl.n	2b276 <conn_auto_initiate+0x8e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   2b25a:	2302      	movs	r3, #2
   2b25c:	9100      	str	r1, [sp, #0]
   2b25e:	461a      	mov	r2, r3
   2b260:	4620      	mov	r0, r4
   2b262:	f019 ff89 	bl	45178 <bt_le_set_phy>
		if (!err) {
   2b266:	b930      	cbnz	r0, 2b276 <conn_auto_initiate+0x8e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2b268:	2180      	movs	r1, #128	; 0x80
   2b26a:	4630      	mov	r0, r6
}
   2b26c:	b004      	add	sp, #16
   2b26e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2b272:	f019 bda0 	b.w	44db6 <atomic_or>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   2b276:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   2b27a:	069a      	lsls	r2, r3, #26
   2b27c:	d514      	bpl.n	2b2a8 <conn_auto_initiate+0xc0>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   2b27e:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   2b282:	689b      	ldr	r3, [r3, #8]
   2b284:	079b      	lsls	r3, r3, #30
   2b286:	d50f      	bpl.n	2b2a8 <conn_auto_initiate+0xc0>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   2b288:	f10d 010e 	add.w	r1, sp, #14
   2b28c:	a803      	add	r0, sp, #12
   2b28e:	f019 ff23 	bl	450d8 <hci_le_read_max_data_len>
			if (!err) {
   2b292:	b948      	cbnz	r0, 2b2a8 <conn_auto_initiate+0xc0>
				err = bt_le_set_data_len(conn,
   2b294:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   2b298:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   2b29c:	4620      	mov	r0, r4
}
   2b29e:	b004      	add	sp, #16
   2b2a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				err = bt_le_set_data_len(conn,
   2b2a4:	f019 bf4b 	b.w	4513e <bt_le_set_data_len>
}
   2b2a8:	b004      	add	sp, #16
   2b2aa:	bd70      	pop	{r4, r5, r6, pc}
   2b2ac:	20000000 	.word	0x20000000

0002b2b0 <bt_hci_le_enh_conn_complete>:
{
   2b2b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2b2b4:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
   2b2b8:	4a6b      	ldr	r2, [pc, #428]	; (2b468 <bt_hci_le_enh_conn_complete+0x1b8>)
	handle |= ~BT_ACL_HANDLE_MASK;
   2b2ba:	ea6f 5307 	mvn.w	r3, r7, lsl #20
		if (disconnected_handles[i] == handle) {
   2b2be:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   2b2c0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   2b2c4:	b29b      	uxth	r3, r3
   2b2c6:	4299      	cmp	r1, r3
{
   2b2c8:	4605      	mov	r5, r0
   2b2ca:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   2b2ce:	bf08      	it	eq
   2b2d0:	8016      	strheq	r6, [r2, #0]
{
   2b2d2:	b085      	sub	sp, #20
			return true;
   2b2d4:	bf08      	it	eq
   2b2d6:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
   2b2d8:	f000 fac4 	bl	2b864 <bt_id_pending_keys_update>
	if (evt->status) {
   2b2dc:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2b2de:	fa1f f887 	uxth.w	r8, r7
	if (evt->status) {
   2b2e2:	b1fc      	cbz	r4, 2b324 <bt_hci_le_enh_conn_complete+0x74>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2b2e4:	2c3c      	cmp	r4, #60	; 0x3c
   2b2e6:	d13e      	bne.n	2b366 <bt_hci_le_enh_conn_complete+0xb6>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   2b2e8:	f000 fdba 	bl	2be60 <bt_le_adv_lookup_legacy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2b2ec:	f3bf 8f5b 	dmb	ish
   2b2f0:	3010      	adds	r0, #16
   2b2f2:	e850 3f00 	ldrex	r3, [r0]
   2b2f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   2b2fa:	e840 3200 	strex	r2, r3, [r0]
   2b2fe:	2a00      	cmp	r2, #0
   2b300:	d1f7      	bne.n	2b2f2 <bt_hci_le_enh_conn_complete+0x42>
   2b302:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   2b306:	2000      	movs	r0, #0
   2b308:	f7ff fd48 	bl	2ad9c <find_pending_connect.part.0>
		if (!conn) {
   2b30c:	4605      	mov	r5, r0
   2b30e:	b350      	cbz	r0, 2b366 <bt_hci_le_enh_conn_complete+0xb6>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   2b310:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2b312:	2100      	movs	r1, #0
   2b314:	f001 fa14 	bl	2c740 <bt_conn_set_state>
		bt_conn_unref(conn);
   2b318:	4628      	mov	r0, r5
}
   2b31a:	b005      	add	sp, #20
   2b31c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
   2b320:	f01a bb6f 	b.w	45a02 <bt_conn_unref>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   2b324:	792b      	ldrb	r3, [r5, #4]
   2b326:	3b02      	subs	r3, #2
   2b328:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   2b32a:	f105 0904 	add.w	r9, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   2b32e:	d81d      	bhi.n	2b36c <bt_hci_le_enh_conn_complete+0xbc>
	memcpy(dst, src, sizeof(*dst));
   2b330:	2207      	movs	r2, #7
   2b332:	4649      	mov	r1, r9
   2b334:	a802      	add	r0, sp, #8
   2b336:	f019 fbc4 	bl	44ac2 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   2b33a:	f89d 3008 	ldrb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
   2b33e:	2206      	movs	r2, #6
   2b340:	3b02      	subs	r3, #2
   2b342:	f105 0111 	add.w	r1, r5, #17
   2b346:	f10d 0001 	add.w	r0, sp, #1
   2b34a:	f88d 3008 	strb.w	r3, [sp, #8]
   2b34e:	f019 fbb8 	bl	44ac2 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   2b352:	2301      	movs	r3, #1
   2b354:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   2b358:	78eb      	ldrb	r3, [r5, #3]
   2b35a:	2b01      	cmp	r3, #1
   2b35c:	d01b      	beq.n	2b396 <bt_hci_le_enh_conn_complete+0xe6>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   2b35e:	211f      	movs	r1, #31
   2b360:	4640      	mov	r0, r8
   2b362:	f019 fed1 	bl	45108 <bt_hci_disconnect>
}
   2b366:	b005      	add	sp, #20
   2b368:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   2b36c:	78eb      	ldrb	r3, [r5, #3]
   2b36e:	2b01      	cmp	r3, #1
   2b370:	bf04      	itt	eq
   2b372:	4b3e      	ldreq	r3, [pc, #248]	; (2b46c <bt_hci_le_enh_conn_complete+0x1bc>)
   2b374:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   2b378:	4649      	mov	r1, r9
   2b37a:	4620      	mov	r0, r4
   2b37c:	f01a f8fc 	bl	45578 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   2b380:	2207      	movs	r2, #7
   2b382:	4601      	mov	r1, r0
   2b384:	a802      	add	r0, sp, #8
   2b386:	f019 fb9c 	bl	44ac2 <memcpy>
   2b38a:	2207      	movs	r2, #7
   2b38c:	4649      	mov	r1, r9
   2b38e:	4668      	mov	r0, sp
   2b390:	f019 fb97 	bl	44ac2 <memcpy>
}
   2b394:	e7e0      	b.n	2b358 <bt_hci_le_enh_conn_complete+0xa8>
   2b396:	a802      	add	r0, sp, #8
   2b398:	f7ff fd00 	bl	2ad9c <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2b39c:	78eb      	ldrb	r3, [r5, #3]
   2b39e:	2b01      	cmp	r3, #1
   2b3a0:	4604      	mov	r4, r0
   2b3a2:	d111      	bne.n	2b3c8 <bt_hci_le_enh_conn_complete+0x118>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   2b3a4:	f000 fd5c 	bl	2be60 <bt_le_adv_lookup_legacy>
   2b3a8:	f3bf 8f5b 	dmb	ish
   2b3ac:	f100 0310 	add.w	r3, r0, #16
   2b3b0:	e853 1f00 	ldrex	r1, [r3]
   2b3b4:	f021 0140 	bic.w	r1, r1, #64	; 0x40
   2b3b8:	e843 1200 	strex	r2, r1, [r3]
   2b3bc:	2a00      	cmp	r2, #0
   2b3be:	d1f7      	bne.n	2b3b0 <bt_hci_le_enh_conn_complete+0x100>
   2b3c0:	f3bf 8f5b 	dmb	ish
		(void)bt_le_lim_adv_cancel_timeout(adv);
   2b3c4:	f01a fa4e 	bl	45864 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   2b3c8:	2c00      	cmp	r4, #0
   2b3ca:	d0c8      	beq.n	2b35e <bt_hci_le_enh_conn_complete+0xae>
	conn->handle = handle;
   2b3cc:	4620      	mov	r0, r4
	memcpy(dst, src, sizeof(*dst));
   2b3ce:	2207      	movs	r2, #7
   2b3d0:	f820 7b88 	strh.w	r7, [r0], #136
   2b3d4:	a902      	add	r1, sp, #8
   2b3d6:	f019 fb74 	bl	44ac2 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   2b3da:	7e2a      	ldrb	r2, [r5, #24]
   2b3dc:	7deb      	ldrb	r3, [r5, #23]
   2b3de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2b3e2:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   2b3e6:	7eaa      	ldrb	r2, [r5, #26]
   2b3e8:	7e6b      	ldrb	r3, [r5, #25]
   2b3ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2b3ee:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   2b3f2:	7f2a      	ldrb	r2, [r5, #28]
   2b3f4:	7eeb      	ldrb	r3, [r5, #27]
   2b3f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2b3fa:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   2b3fe:	78eb      	ldrb	r3, [r5, #3]
   2b400:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   2b402:	2200      	movs	r2, #0
   2b404:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2b406:	2b01      	cmp	r3, #1
	conn->le.phy.tx_phy = BT_GAP_LE_PHY_1M;
   2b408:	f240 1201 	movw	r2, #257	; 0x101
   2b40c:	f8a4 20b8 	strh.w	r2, [r4, #184]	; 0xb8
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2b410:	d117      	bne.n	2b442 <bt_hci_le_enh_conn_complete+0x192>
   2b412:	2207      	movs	r2, #7
   2b414:	4669      	mov	r1, sp
   2b416:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   2b41a:	f019 fb52 	bl	44ac2 <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   2b41e:	f000 fd1f 	bl	2be60 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   2b422:	7a21      	ldrb	r1, [r4, #8]
   2b424:	4d11      	ldr	r5, [pc, #68]	; (2b46c <bt_hci_le_enh_conn_complete+0x1bc>)
   2b426:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   2b42a:	2207      	movs	r2, #7
   2b42c:	4429      	add	r1, r5
   2b42e:	f104 0096 	add.w	r0, r4, #150	; 0x96
   2b432:	f019 fb46 	bl	44ac2 <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   2b436:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
   2b43a:	065b      	lsls	r3, r3, #25
   2b43c:	d501      	bpl.n	2b442 <bt_hci_le_enh_conn_complete+0x192>
			bt_le_adv_resume();
   2b43e:	f000 febb 	bl	2c1b8 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   2b442:	2107      	movs	r1, #7
   2b444:	4620      	mov	r0, r4
   2b446:	f001 f97b 	bl	2c740 <bt_conn_set_state>
	if (is_disconnected) {
   2b44a:	b11e      	cbz	r6, 2b454 <bt_hci_le_enh_conn_complete+0x1a4>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   2b44c:	2101      	movs	r1, #1
   2b44e:	4620      	mov	r0, r4
   2b450:	f001 f976 	bl	2c740 <bt_conn_set_state>
	bt_conn_connected(conn);
   2b454:	4620      	mov	r0, r4
   2b456:	f01a fb0f 	bl	45a78 <bt_conn_connected>
	conn_auto_initiate(conn);
   2b45a:	4620      	mov	r0, r4
   2b45c:	f7ff fec4 	bl	2b1e8 <conn_auto_initiate>
	bt_conn_unref(conn);
   2b460:	4620      	mov	r0, r4
   2b462:	f01a face 	bl	45a02 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2b466:	e77e      	b.n	2b366 <bt_hci_le_enh_conn_complete+0xb6>
   2b468:	20003aec 	.word	0x20003aec
   2b46c:	20000000 	.word	0x20000000

0002b470 <bt_security_err_get>:
	switch (hci_err) {
   2b470:	2829      	cmp	r0, #41	; 0x29
   2b472:	bf9a      	itte	ls
   2b474:	4b01      	ldrls	r3, [pc, #4]	; (2b47c <bt_security_err_get+0xc>)
   2b476:	5c18      	ldrbls	r0, [r3, r0]
{
   2b478:	2009      	movhi	r0, #9
}
   2b47a:	4770      	bx	lr
   2b47c:	0004b018 	.word	0x0004b018

0002b480 <hci_event_prio>:
{
   2b480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b484:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   2b486:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   2b48a:	4630      	mov	r0, r6
   2b48c:	f01c fa83 	bl	47996 <net_buf_simple_headroom>
	state->len = buf->len;
   2b490:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   2b494:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   2b498:	4605      	mov	r5, r0
   2b49a:	d80c      	bhi.n	2b4b6 <hci_event_prio+0x36>
   2b49c:	4a1c      	ldr	r2, [pc, #112]	; (2b510 <hci_event_prio+0x90>)
   2b49e:	491d      	ldr	r1, [pc, #116]	; (2b514 <hci_event_prio+0x94>)
   2b4a0:	481d      	ldr	r0, [pc, #116]	; (2b518 <hci_event_prio+0x98>)
   2b4a2:	f640 532f 	movw	r3, #3375	; 0xd2f
   2b4a6:	f017 fa0d 	bl	428c4 <printk>
   2b4aa:	4040      	eors	r0, r0
   2b4ac:	f380 8811 	msr	BASEPRI, r0
   2b4b0:	f04f 0003 	mov.w	r0, #3
   2b4b4:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   2b4b6:	4630      	mov	r0, r6
   2b4b8:	2102      	movs	r1, #2
   2b4ba:	f01c fa5c 	bl	47976 <net_buf_simple_pull_mem>
   2b4be:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   2b4c0:	7800      	ldrb	r0, [r0, #0]
   2b4c2:	f019 fc36 	bl	44d32 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   2b4c6:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   2b4c8:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   2b4ca:	d40c      	bmi.n	2b4e6 <hci_event_prio+0x66>
   2b4cc:	4a10      	ldr	r2, [pc, #64]	; (2b510 <hci_event_prio+0x90>)
   2b4ce:	4913      	ldr	r1, [pc, #76]	; (2b51c <hci_event_prio+0x9c>)
   2b4d0:	4811      	ldr	r0, [pc, #68]	; (2b518 <hci_event_prio+0x98>)
   2b4d2:	f640 5333 	movw	r3, #3379	; 0xd33
   2b4d6:	f017 f9f5 	bl	428c4 <printk>
   2b4da:	4040      	eors	r0, r0
   2b4dc:	f380 8811 	msr	BASEPRI, r0
   2b4e0:	f04f 0003 	mov.w	r0, #3
   2b4e4:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   2b4e6:	2305      	movs	r3, #5
   2b4e8:	4a0d      	ldr	r2, [pc, #52]	; (2b520 <hci_event_prio+0xa0>)
   2b4ea:	7838      	ldrb	r0, [r7, #0]
   2b4ec:	4621      	mov	r1, r4
   2b4ee:	f019 fc32 	bl	44d56 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   2b4f2:	07b3      	lsls	r3, r6, #30
   2b4f4:	d507      	bpl.n	2b506 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   2b4f6:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   2b4f8:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   2b4fc:	fa13 f585 	uxtah	r5, r3, r5
   2b500:	60a5      	str	r5, [r4, #8]
}
   2b502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   2b506:	4620      	mov	r0, r4
}
   2b508:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   2b50c:	f011 bdcc 	b.w	3d0a8 <net_buf_unref>
   2b510:	0004af11 	.word	0x0004af11
   2b514:	0004af8f 	.word	0x0004af8f
   2b518:	0004af4e 	.word	0x0004af4e
   2b51c:	0004afa8 	.word	0x0004afa8
   2b520:	000498e8 	.word	0x000498e8

0002b524 <bt_recv>:
{
   2b524:	b570      	push	{r4, r5, r6, lr}
	if (bt_recv_thread_id == NULL) {
   2b526:	4d3b      	ldr	r5, [pc, #236]	; (2b614 <bt_recv+0xf0>)
   2b528:	682b      	ldr	r3, [r5, #0]
{
   2b52a:	4604      	mov	r4, r0
	if (bt_recv_thread_id == NULL) {
   2b52c:	b913      	cbnz	r3, 2b534 <bt_recv+0x10>
	return z_impl_z_current_get();
   2b52e:	f016 fd23 	bl	41f78 <z_impl_z_current_get>
		bt_recv_thread_id = k_current_get();
   2b532:	6028      	str	r0, [r5, #0]
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2b534:	7d23      	ldrb	r3, [r4, #20]
	switch (bt_buf_get_type(buf)) {
   2b536:	2b01      	cmp	r3, #1
   2b538:	d036      	beq.n	2b5a8 <bt_recv+0x84>
   2b53a:	2b03      	cmp	r3, #3
   2b53c:	d163      	bne.n	2b606 <bt_recv+0xe2>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   2b53e:	89a3      	ldrh	r3, [r4, #12]
   2b540:	2b03      	cmp	r3, #3
   2b542:	d80c      	bhi.n	2b55e <bt_recv+0x3a>
   2b544:	4a34      	ldr	r2, [pc, #208]	; (2b618 <bt_recv+0xf4>)
   2b546:	4935      	ldr	r1, [pc, #212]	; (2b61c <bt_recv+0xf8>)
   2b548:	4835      	ldr	r0, [pc, #212]	; (2b620 <bt_recv+0xfc>)
   2b54a:	f240 13b5 	movw	r3, #437	; 0x1b5
   2b54e:	f017 f9b9 	bl	428c4 <printk>
   2b552:	4040      	eors	r0, r0
   2b554:	f380 8811 	msr	BASEPRI, r0
   2b558:	f04f 0003 	mov.w	r0, #3
   2b55c:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   2b55e:	2104      	movs	r1, #4
   2b560:	f104 0008 	add.w	r0, r4, #8
   2b564:	f01c fa07 	bl	47976 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   2b568:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   2b56a:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   2b56c:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   2b56e:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   2b570:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   2b572:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   2b576:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   2b578:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   2b57a:	d003      	beq.n	2b584 <bt_recv+0x60>
	net_buf_unref(buf);
   2b57c:	4620      	mov	r0, r4
   2b57e:	f011 fd93 	bl	3d0a8 <net_buf_unref>
}
   2b582:	e00f      	b.n	2b5a4 <bt_recv+0x80>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   2b584:	f001 f8d4 	bl	2c730 <bt_conn_lookup_handle>
	if (!conn) {
   2b588:	4605      	mov	r5, r0
   2b58a:	2800      	cmp	r0, #0
   2b58c:	d0f6      	beq.n	2b57c <bt_recv+0x58>
	acl(buf)->index = bt_conn_index(conn);
   2b58e:	f001 f983 	bl	2c898 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   2b592:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   2b594:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   2b596:	4621      	mov	r1, r4
   2b598:	4628      	mov	r0, r5
   2b59a:	f01a f9ca 	bl	45932 <bt_conn_recv>
	bt_conn_unref(conn);
   2b59e:	4628      	mov	r0, r5
   2b5a0:	f01a fa2f 	bl	45a02 <bt_conn_unref>
		return 0;
   2b5a4:	2000      	movs	r0, #0
}
   2b5a6:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   2b5a8:	89a3      	ldrh	r3, [r4, #12]
   2b5aa:	2b01      	cmp	r3, #1
   2b5ac:	d80c      	bhi.n	2b5c8 <bt_recv+0xa4>
   2b5ae:	4a1a      	ldr	r2, [pc, #104]	; (2b618 <bt_recv+0xf4>)
   2b5b0:	491a      	ldr	r1, [pc, #104]	; (2b61c <bt_recv+0xf8>)
   2b5b2:	481b      	ldr	r0, [pc, #108]	; (2b620 <bt_recv+0xfc>)
   2b5b4:	f640 1317 	movw	r3, #2327	; 0x917
   2b5b8:	f017 f984 	bl	428c4 <printk>
   2b5bc:	4040      	eors	r0, r0
   2b5be:	f380 8811 	msr	BASEPRI, r0
   2b5c2:	f04f 0003 	mov.w	r0, #3
   2b5c6:	df02      	svc	2
   2b5c8:	2102      	movs	r1, #2
   2b5ca:	f104 0008 	add.w	r0, r4, #8
   2b5ce:	f01c f9d2 	bl	47976 <net_buf_simple_pull_mem>
   2b5d2:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   2b5d4:	7800      	ldrb	r0, [r0, #0]
   2b5d6:	f019 fbac 	bl	44d32 <bt_hci_evt_get_flags>
   2b5da:	0783      	lsls	r3, r0, #30
   2b5dc:	d40c      	bmi.n	2b5f8 <bt_recv+0xd4>
   2b5de:	4a0e      	ldr	r2, [pc, #56]	; (2b618 <bt_recv+0xf4>)
   2b5e0:	4910      	ldr	r1, [pc, #64]	; (2b624 <bt_recv+0x100>)
   2b5e2:	480f      	ldr	r0, [pc, #60]	; (2b620 <bt_recv+0xfc>)
   2b5e4:	f640 131b 	movw	r3, #2331	; 0x91b
   2b5e8:	f017 f96c 	bl	428c4 <printk>
   2b5ec:	4040      	eors	r0, r0
   2b5ee:	f380 8811 	msr	BASEPRI, r0
   2b5f2:	f04f 0003 	mov.w	r0, #3
   2b5f6:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   2b5f8:	4a0b      	ldr	r2, [pc, #44]	; (2b628 <bt_recv+0x104>)
   2b5fa:	7828      	ldrb	r0, [r5, #0]
   2b5fc:	2306      	movs	r3, #6
   2b5fe:	4621      	mov	r1, r4
   2b600:	f019 fba9 	bl	44d56 <handle_event>
   2b604:	e7ba      	b.n	2b57c <bt_recv+0x58>
		net_buf_unref(buf);
   2b606:	4620      	mov	r0, r4
   2b608:	f011 fd4e 	bl	3d0a8 <net_buf_unref>
		return -EINVAL;
   2b60c:	f06f 0015 	mvn.w	r0, #21
   2b610:	e7c9      	b.n	2b5a6 <bt_recv+0x82>
   2b612:	bf00      	nop
   2b614:	20001bf0 	.word	0x20001bf0
   2b618:	0004af11 	.word	0x0004af11
   2b61c:	0004af8f 	.word	0x0004af8f
   2b620:	0004af4e 	.word	0x0004af4e
   2b624:	0004afc1 	.word	0x0004afc1
   2b628:	00049910 	.word	0x00049910

0002b62c <bt_recv_prio>:
{
   2b62c:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   2b62e:	7d03      	ldrb	r3, [r0, #20]
   2b630:	2b01      	cmp	r3, #1
{
   2b632:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   2b634:	d00c      	beq.n	2b650 <bt_recv_prio+0x24>
   2b636:	4a09      	ldr	r2, [pc, #36]	; (2b65c <bt_recv_prio+0x30>)
   2b638:	4909      	ldr	r1, [pc, #36]	; (2b660 <bt_recv_prio+0x34>)
   2b63a:	480a      	ldr	r0, [pc, #40]	; (2b664 <bt_recv_prio+0x38>)
   2b63c:	f640 537c 	movw	r3, #3452	; 0xd7c
   2b640:	f017 f940 	bl	428c4 <printk>
   2b644:	4040      	eors	r0, r0
   2b646:	f380 8811 	msr	BASEPRI, r0
   2b64a:	f04f 0003 	mov.w	r0, #3
   2b64e:	df02      	svc	2
	hci_event_prio(buf);
   2b650:	4620      	mov	r0, r4
   2b652:	f7ff ff15 	bl	2b480 <hci_event_prio>
}
   2b656:	2000      	movs	r0, #0
   2b658:	bd10      	pop	{r4, pc}
   2b65a:	bf00      	nop
   2b65c:	0004af11 	.word	0x0004af11
   2b660:	0004afef 	.word	0x0004afef
   2b664:	0004af4e 	.word	0x0004af4e

0002b668 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   2b668:	4a08      	ldr	r2, [pc, #32]	; (2b68c <bt_hci_driver_register+0x24>)
{
   2b66a:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   2b66c:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
   2b670:	b930      	cbnz	r0, 2b680 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   2b672:	68d9      	ldr	r1, [r3, #12]
   2b674:	b139      	cbz	r1, 2b686 <bt_hci_driver_register+0x1e>
   2b676:	6919      	ldr	r1, [r3, #16]
   2b678:	b129      	cbz	r1, 2b686 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   2b67a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
	return 0;
   2b67e:	4770      	bx	lr
		return -EALREADY;
   2b680:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2b684:	4770      	bx	lr
		return -EINVAL;
   2b686:	f06f 0015 	mvn.w	r0, #21
}
   2b68a:	4770      	bx	lr
   2b68c:	20000000 	.word	0x20000000

0002b690 <bt_finalize_init>:
   2b690:	4801      	ldr	r0, [pc, #4]	; (2b698 <bt_finalize_init+0x8>)
   2b692:	2102      	movs	r1, #2
   2b694:	f019 bb8f 	b.w	44db6 <atomic_or>
   2b698:	200000cc 	.word	0x200000cc

0002b69c <init_work>:

static void init_work(struct k_work *work)
{
   2b69c:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
   2b69e:	f7fa fe9b 	bl	263d8 <bt_init>
	if (ready_cb) {
   2b6a2:	4b03      	ldr	r3, [pc, #12]	; (2b6b0 <init_work+0x14>)
   2b6a4:	681b      	ldr	r3, [r3, #0]
   2b6a6:	b113      	cbz	r3, 2b6ae <init_work+0x12>
		ready_cb(err);
	}
}
   2b6a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   2b6ac:	4718      	bx	r3
}
   2b6ae:	bd10      	pop	{r4, pc}
   2b6b0:	20001c0c 	.word	0x20001c0c

0002b6b4 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   2b6b4:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
   2b6b6:	4d22      	ldr	r5, [pc, #136]	; (2b740 <bt_enable+0x8c>)
   2b6b8:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
{
   2b6bc:	b088      	sub	sp, #32
   2b6be:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   2b6c0:	2b00      	cmp	r3, #0
   2b6c2:	d037      	beq.n	2b734 <bt_enable+0x80>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2b6c4:	2101      	movs	r1, #1
   2b6c6:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   2b6ca:	f019 fb74 	bl	44db6 <atomic_or>
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   2b6ce:	07c3      	lsls	r3, r0, #31
   2b6d0:	d433      	bmi.n	2b73a <bt_enable+0x86>
		return -EALREADY;
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		err = bt_settings_init();
   2b6d2:	f019 fad5 	bl	44c80 <bt_settings_init>
		if (err) {
   2b6d6:	4604      	mov	r4, r0
   2b6d8:	bb48      	cbnz	r0, 2b72e <bt_enable+0x7a>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   2b6da:	4b1a      	ldr	r3, [pc, #104]	; (2b744 <bt_enable+0x90>)
   2b6dc:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2b6de:	2200      	movs	r2, #0
   2b6e0:	2300      	movs	r3, #0
   2b6e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2b6e6:	f06f 0308 	mvn.w	r3, #8
   2b6ea:	e9cd 0302 	strd	r0, r3, [sp, #8]
   2b6ee:	e9cd 0000 	strd	r0, r0, [sp]
   2b6f2:	9004      	str	r0, [sp, #16]
   2b6f4:	4b14      	ldr	r3, [pc, #80]	; (2b748 <bt_enable+0x94>)
   2b6f6:	4915      	ldr	r1, [pc, #84]	; (2b74c <bt_enable+0x98>)
   2b6f8:	4815      	ldr	r0, [pc, #84]	; (2b750 <bt_enable+0x9c>)
   2b6fa:	f44f 7220 	mov.w	r2, #640	; 0x280
   2b6fe:	f015 fcef 	bl	410e0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   2b702:	4914      	ldr	r1, [pc, #80]	; (2b754 <bt_enable+0xa0>)
   2b704:	4812      	ldr	r0, [pc, #72]	; (2b750 <bt_enable+0x9c>)
   2b706:	f01c ff35 	bl	48574 <z_impl_k_thread_name_set>
			0, K_NO_WAIT);
	k_thread_name_set(&rx_thread_data, "BT RX");
#endif

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
   2b70a:	f7ff f9c3 	bl	2aa94 <bt_hci_ecc_init>
	}

	err = bt_dev.drv->open();
   2b70e:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   2b712:	68db      	ldr	r3, [r3, #12]
   2b714:	4798      	blx	r3
	if (err) {
   2b716:	4604      	mov	r4, r0
   2b718:	b948      	cbnz	r0, 2b72e <bt_enable+0x7a>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   2b71a:	b926      	cbnz	r6, 2b726 <bt_enable+0x72>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   2b71c:	b008      	add	sp, #32
   2b71e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
   2b722:	f7fa be59 	b.w	263d8 <bt_init>
	k_work_submit(&bt_dev.init);
   2b726:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   2b72a:	f016 f89f 	bl	4186c <k_work_submit>
}
   2b72e:	4620      	mov	r0, r4
   2b730:	b008      	add	sp, #32
   2b732:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   2b734:	f06f 0412 	mvn.w	r4, #18
   2b738:	e7f9      	b.n	2b72e <bt_enable+0x7a>
		return -EALREADY;
   2b73a:	f06f 0477 	mvn.w	r4, #119	; 0x77
   2b73e:	e7f6      	b.n	2b72e <bt_enable+0x7a>
   2b740:	20000000 	.word	0x20000000
   2b744:	20001c0c 	.word	0x20001c0c
   2b748:	0002af05 	.word	0x0002af05
   2b74c:	20004338 	.word	0x20004338
   2b750:	20000ea8 	.word	0x20000ea8
   2b754:	0004b012 	.word	0x0004b012

0002b758 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   2b758:	4800      	ldr	r0, [pc, #0]	; (2b75c <bt_get_name+0x4>)
   2b75a:	4770      	bx	lr
   2b75c:	0004ad31 	.word	0x0004ad31

0002b760 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   2b760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   2b762:	4f0b      	ldr	r7, [pc, #44]	; (2b790 <id_find+0x30>)
{
   2b764:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   2b766:	2500      	movs	r5, #0
   2b768:	79fb      	ldrb	r3, [r7, #7]
   2b76a:	b2ec      	uxtb	r4, r5
   2b76c:	42a3      	cmp	r3, r4
   2b76e:	d802      	bhi.n	2b776 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   2b770:	f06f 0001 	mvn.w	r0, #1
   2b774:	e00a      	b.n	2b78c <id_find+0x2c>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   2b776:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   2b77a:	2207      	movs	r2, #7
   2b77c:	4439      	add	r1, r7
   2b77e:	4630      	mov	r0, r6
   2b780:	f019 f98f 	bl	44aa2 <memcmp>
   2b784:	3501      	adds	r5, #1
   2b786:	2800      	cmp	r0, #0
   2b788:	d1ee      	bne.n	2b768 <id_find+0x8>
   2b78a:	4620      	mov	r0, r4
}
   2b78c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b78e:	bf00      	nop
   2b790:	20000000 	.word	0x20000000

0002b794 <set_random_address>:
{
   2b794:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   2b796:	4913      	ldr	r1, [pc, #76]	; (2b7e4 <set_random_address+0x50>)
   2b798:	2206      	movs	r2, #6
   2b79a:	4605      	mov	r5, r0
   2b79c:	f019 f981 	bl	44aa2 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   2b7a0:	b1d8      	cbz	r0, 2b7da <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   2b7a2:	2106      	movs	r1, #6
   2b7a4:	f242 0005 	movw	r0, #8197	; 0x2005
   2b7a8:	f7ff fc56 	bl	2b058 <bt_hci_cmd_create>
	if (!buf) {
   2b7ac:	4604      	mov	r4, r0
   2b7ae:	b1b0      	cbz	r0, 2b7de <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2b7b0:	2206      	movs	r2, #6
   2b7b2:	4629      	mov	r1, r5
   2b7b4:	3008      	adds	r0, #8
   2b7b6:	f01c f8bd 	bl	47934 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   2b7ba:	2200      	movs	r2, #0
   2b7bc:	4621      	mov	r1, r4
   2b7be:	f242 0005 	movw	r0, #8197	; 0x2005
   2b7c2:	f7ff fca5 	bl	2b110 <bt_hci_cmd_send_sync>
	if (err) {
   2b7c6:	b948      	cbnz	r0, 2b7dc <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
   2b7c8:	2206      	movs	r2, #6
   2b7ca:	4806      	ldr	r0, [pc, #24]	; (2b7e4 <set_random_address+0x50>)
   2b7cc:	4629      	mov	r1, r5
   2b7ce:	f019 f978 	bl	44ac2 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   2b7d2:	4b05      	ldr	r3, [pc, #20]	; (2b7e8 <set_random_address+0x54>)
   2b7d4:	2201      	movs	r2, #1
   2b7d6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		return 0;
   2b7da:	2000      	movs	r0, #0
}
   2b7dc:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   2b7de:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2b7e2:	e7fb      	b.n	2b7dc <set_random_address+0x48>
   2b7e4:	20000061 	.word	0x20000061
   2b7e8:	20000000 	.word	0x20000000

0002b7ec <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   2b7ec:	b530      	push	{r4, r5, lr}
   2b7ee:	4604      	mov	r4, r0
   2b7f0:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   2b7f2:	460d      	mov	r5, r1
   2b7f4:	b1d1      	cbz	r1, 2b82c <id_create.constprop.0+0x40>
   2b7f6:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   2b7f8:	2207      	movs	r2, #7
   2b7fa:	a902      	add	r1, sp, #8
   2b7fc:	4628      	mov	r0, r5
   2b7fe:	9302      	str	r3, [sp, #8]
   2b800:	f8cd 300b 	str.w	r3, [sp, #11]
   2b804:	f019 f94d 	bl	44aa2 <memcmp>
   2b808:	b180      	cbz	r0, 2b82c <id_create.constprop.0+0x40>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   2b80a:	4814      	ldr	r0, [pc, #80]	; (2b85c <id_create.constprop.0+0x70>)
   2b80c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   2b810:	4629      	mov	r1, r5
   2b812:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   2b814:	f019 fe2b 	bl	4546e <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2b818:	4811      	ldr	r0, [pc, #68]	; (2b860 <id_create.constprop.0+0x74>)
   2b81a:	f019 fe2b 	bl	45474 <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   2b81e:	0783      	lsls	r3, r0, #30
   2b820:	d501      	bpl.n	2b826 <id_create.constprop.0+0x3a>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   2b822:	f7ff f9cb 	bl	2abbc <bt_settings_save_id>
	}

	return 0;
   2b826:	2000      	movs	r0, #0
}
   2b828:	b005      	add	sp, #20
   2b82a:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   2b82c:	4668      	mov	r0, sp
   2b82e:	f019 fa72 	bl	44d16 <bt_addr_le_create_static>
			if (err) {
   2b832:	2800      	cmp	r0, #0
   2b834:	d1f8      	bne.n	2b828 <id_create.constprop.0+0x3c>
		} while (id_find(&new_addr) >= 0);
   2b836:	4668      	mov	r0, sp
   2b838:	f7ff ff92 	bl	2b760 <id_find>
   2b83c:	2800      	cmp	r0, #0
   2b83e:	daf5      	bge.n	2b82c <id_create.constprop.0+0x40>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   2b840:	4b06      	ldr	r3, [pc, #24]	; (2b85c <id_create.constprop.0+0x70>)
   2b842:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   2b846:	441c      	add	r4, r3
   2b848:	4669      	mov	r1, sp
   2b84a:	4620      	mov	r0, r4
   2b84c:	f019 fe0f 	bl	4546e <bt_addr_le_copy>
		if (addr) {
   2b850:	2d00      	cmp	r5, #0
   2b852:	d0e1      	beq.n	2b818 <id_create.constprop.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   2b854:	4621      	mov	r1, r4
   2b856:	4628      	mov	r0, r5
   2b858:	e7dc      	b.n	2b814 <id_create.constprop.0+0x28>
   2b85a:	bf00      	nop
   2b85c:	20000000 	.word	0x20000000
   2b860:	200000cc 	.word	0x200000cc

0002b864 <bt_id_pending_keys_update>:
   2b864:	4b0a      	ldr	r3, [pc, #40]	; (2b890 <bt_id_pending_keys_update+0x2c>)
   2b866:	f3bf 8f5b 	dmb	ish
   2b86a:	e853 2f00 	ldrex	r2, [r3]
   2b86e:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   2b872:	e843 1000 	strex	r0, r1, [r3]
   2b876:	2800      	cmp	r0, #0
   2b878:	d1f7      	bne.n	2b86a <bt_id_pending_keys_update+0x6>
   2b87a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   2b87e:	0493      	lsls	r3, r2, #18
   2b880:	d504      	bpl.n	2b88c <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   2b882:	4904      	ldr	r1, [pc, #16]	; (2b894 <bt_id_pending_keys_update+0x30>)
   2b884:	2200      	movs	r2, #0
   2b886:	2002      	movs	r0, #2
   2b888:	f003 bfa0 	b.w	2f7cc <bt_keys_foreach>
}
   2b88c:	4770      	bx	lr
   2b88e:	bf00      	nop
   2b890:	200000cc 	.word	0x200000cc
   2b894:	000455b1 	.word	0x000455b1

0002b898 <bt_id_add>:
{
   2b898:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   2b89a:	4c46      	ldr	r4, [pc, #280]	; (2b9b4 <bt_id_add+0x11c>)
   2b89c:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   2b8a0:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
{
   2b8a4:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   2b8a6:	b10a      	cbz	r2, 2b8ac <bt_id_add+0x14>
   2b8a8:	429a      	cmp	r2, r3
   2b8aa:	d208      	bcs.n	2b8be <bt_id_add+0x26>
		bt_dev.le.rl_entries++;
   2b8ac:	3301      	adds	r3, #1
   2b8ae:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   2b8b2:	7a2b      	ldrb	r3, [r5, #8]
   2b8b4:	f043 0304 	orr.w	r3, r3, #4
   2b8b8:	722b      	strb	r3, [r5, #8]
}
   2b8ba:	b003      	add	sp, #12
   2b8bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   2b8be:	2100      	movs	r1, #0
   2b8c0:	2206      	movs	r2, #6
   2b8c2:	4608      	mov	r0, r1
   2b8c4:	f001 f936 	bl	2cb34 <bt_conn_lookup_state_le>
	if (conn) {
   2b8c8:	4606      	mov	r6, r0
   2b8ca:	b1a8      	cbz	r0, 2b8f8 <bt_id_add+0x60>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b8cc:	f3bf 8f5b 	dmb	ish
   2b8d0:	34cc      	adds	r4, #204	; 0xcc
   2b8d2:	e854 3f00 	ldrex	r3, [r4]
   2b8d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   2b8da:	e844 3200 	strex	r2, r3, [r4]
   2b8de:	2a00      	cmp	r2, #0
   2b8e0:	d1f7      	bne.n	2b8d2 <bt_id_add+0x3a>
   2b8e2:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   2b8e6:	7a2b      	ldrb	r3, [r5, #8]
   2b8e8:	f043 0301 	orr.w	r3, r3, #1
   2b8ec:	722b      	strb	r3, [r5, #8]
}
   2b8ee:	b003      	add	sp, #12
   2b8f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   2b8f4:	f01a b885 	b.w	45a02 <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   2b8f8:	4601      	mov	r1, r0
   2b8fa:	482f      	ldr	r0, [pc, #188]	; (2b9b8 <bt_id_add+0x120>)
   2b8fc:	f000 faaa 	bl	2be54 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   2b900:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2b904:	b9b3      	cbnz	r3, 2b934 <bt_id_add+0x9c>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   2b906:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
   2b90a:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   2b90e:	429a      	cmp	r2, r3
   2b910:	d11f      	bne.n	2b952 <bt_id_add+0xba>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   2b912:	2200      	movs	r2, #0
   2b914:	4611      	mov	r1, r2
   2b916:	f242 0029 	movw	r0, #8233	; 0x2029
   2b91a:	f7ff fbf9 	bl	2b110 <bt_hci_cmd_send_sync>
		if (err) {
   2b91e:	b970      	cbnz	r0, 2b93e <bt_id_add+0xa6>
		bt_dev.le.rl_entries++;
   2b920:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2b924:	3301      	adds	r3, #1
   2b926:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   2b92a:	7a2b      	ldrb	r3, [r5, #8]
   2b92c:	f043 0304 	orr.w	r3, r3, #4
   2b930:	722b      	strb	r3, [r5, #8]
		goto done;
   2b932:	e004      	b.n	2b93e <bt_id_add+0xa6>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   2b934:	4630      	mov	r0, r6
   2b936:	f019 fdeb 	bl	45510 <addr_res_enable>
		if (err) {
   2b93a:	2800      	cmp	r0, #0
   2b93c:	d0e3      	beq.n	2b906 <bt_id_add+0x6e>
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   2b93e:	2001      	movs	r0, #1
   2b940:	f019 fde6 	bl	45510 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   2b944:	481d      	ldr	r0, [pc, #116]	; (2b9bc <bt_id_add+0x124>)
   2b946:	2100      	movs	r1, #0
}
   2b948:	b003      	add	sp, #12
   2b94a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   2b94e:	f000 ba81 	b.w	2be54 <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2b952:	1c6f      	adds	r7, r5, #1
   2b954:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   2b958:	4638      	mov	r0, r7
   2b95a:	f019 fda8 	bl	454ae <hci_id_add.constprop.0>
	if (err) {
   2b95e:	4606      	mov	r6, r0
   2b960:	2800      	cmp	r0, #0
   2b962:	d1ec      	bne.n	2b93e <bt_id_add+0xa6>
	bt_dev.le.rl_entries++;
   2b964:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2b968:	3301      	adds	r3, #1
   2b96a:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   2b96e:	7a2b      	ldrb	r3, [r5, #8]
   2b970:	f043 0304 	orr.w	r3, r3, #4
   2b974:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   2b976:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
   2b97a:	075b      	lsls	r3, r3, #29
   2b97c:	d5df      	bpl.n	2b93e <bt_id_add+0xa6>
	bt_addr_le_copy(&cp.id_addr, addr);
   2b97e:	4639      	mov	r1, r7
   2b980:	4668      	mov	r0, sp
   2b982:	f019 fd74 	bl	4546e <bt_addr_le_copy>
	cp.mode = mode;
   2b986:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   2b988:	2108      	movs	r1, #8
   2b98a:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   2b98e:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   2b992:	f7ff fb61 	bl	2b058 <bt_hci_cmd_create>
	if (!buf) {
   2b996:	4604      	mov	r4, r0
   2b998:	2800      	cmp	r0, #0
   2b99a:	d0d0      	beq.n	2b93e <bt_id_add+0xa6>
   2b99c:	2208      	movs	r2, #8
   2b99e:	4669      	mov	r1, sp
   2b9a0:	4410      	add	r0, r2
   2b9a2:	f01b ffc7 	bl	47934 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   2b9a6:	4632      	mov	r2, r6
   2b9a8:	4621      	mov	r1, r4
   2b9aa:	f242 004e 	movw	r0, #8270	; 0x204e
   2b9ae:	f7ff fbaf 	bl	2b110 <bt_hci_cmd_send_sync>
	if (err) {
   2b9b2:	e7c4      	b.n	2b93e <bt_id_add+0xa6>
   2b9b4:	20000000 	.word	0x20000000
   2b9b8:	00045541 	.word	0x00045541
   2b9bc:	00045481 	.word	0x00045481

0002b9c0 <bt_id_del>:
{
   2b9c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
   2b9c4:	4c3c      	ldr	r4, [pc, #240]	; (2bab8 <bt_id_del+0xf8>)
   2b9c6:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   2b9ca:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
{
   2b9ce:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size ||
   2b9d0:	b112      	cbz	r2, 2b9d8 <bt_id_del+0x18>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   2b9d2:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   2b9d4:	4293      	cmp	r3, r2
   2b9d6:	dd08      	ble.n	2b9ea <bt_id_del+0x2a>
		bt_dev.le.rl_entries--;
   2b9d8:	3b01      	subs	r3, #1
   2b9da:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   2b9de:	7a2b      	ldrb	r3, [r5, #8]
   2b9e0:	f023 0304 	bic.w	r3, r3, #4
   2b9e4:	722b      	strb	r3, [r5, #8]
}
   2b9e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   2b9ea:	2100      	movs	r1, #0
   2b9ec:	2206      	movs	r2, #6
   2b9ee:	4608      	mov	r0, r1
   2b9f0:	f001 f8a0 	bl	2cb34 <bt_conn_lookup_state_le>
	if (conn) {
   2b9f4:	4606      	mov	r6, r0
   2b9f6:	b1a0      	cbz	r0, 2ba22 <bt_id_del+0x62>
   2b9f8:	f3bf 8f5b 	dmb	ish
   2b9fc:	34cc      	adds	r4, #204	; 0xcc
   2b9fe:	e854 3f00 	ldrex	r3, [r4]
   2ba02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   2ba06:	e844 3200 	strex	r2, r3, [r4]
   2ba0a:	2a00      	cmp	r2, #0
   2ba0c:	d1f7      	bne.n	2b9fe <bt_id_del+0x3e>
   2ba0e:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   2ba12:	7a2b      	ldrb	r3, [r5, #8]
   2ba14:	f043 0302 	orr.w	r3, r3, #2
   2ba18:	722b      	strb	r3, [r5, #8]
}
   2ba1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   2ba1e:	f019 bff0 	b.w	45a02 <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   2ba22:	4601      	mov	r1, r0
   2ba24:	4825      	ldr	r0, [pc, #148]	; (2babc <bt_id_del+0xfc>)
   2ba26:	f000 fa15 	bl	2be54 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   2ba2a:	4630      	mov	r0, r6
   2ba2c:	f019 fd70 	bl	45510 <addr_res_enable>
	if (err) {
   2ba30:	4607      	mov	r7, r0
   2ba32:	b988      	cbnz	r0, 2ba58 <bt_id_del+0x98>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   2ba34:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2ba38:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   2ba3c:	429a      	cmp	r2, r3
   2ba3e:	d217      	bcs.n	2ba70 <bt_id_del+0xb0>
		bt_dev.le.rl_entries--;
   2ba40:	3b01      	subs	r3, #1
   2ba42:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   2ba46:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   2ba48:	491d      	ldr	r1, [pc, #116]	; (2bac0 <bt_id_del+0x100>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   2ba4a:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   2ba4e:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   2ba50:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   2ba52:	2002      	movs	r0, #2
   2ba54:	f003 feba 	bl	2f7cc <bt_keys_foreach>
	if (bt_dev.le.rl_entries) {
   2ba58:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2ba5c:	b113      	cbz	r3, 2ba64 <bt_id_del+0xa4>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   2ba5e:	2001      	movs	r0, #1
   2ba60:	f019 fd56 	bl	45510 <addr_res_enable>
}
   2ba64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   2ba68:	4816      	ldr	r0, [pc, #88]	; (2bac4 <bt_id_del+0x104>)
   2ba6a:	2100      	movs	r1, #0
   2ba6c:	f000 b9f2 	b.w	2be54 <bt_le_ext_adv_foreach>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   2ba70:	2107      	movs	r1, #7
   2ba72:	f242 0028 	movw	r0, #8232	; 0x2028
   2ba76:	f7ff faef 	bl	2b058 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   2ba7a:	f105 0801 	add.w	r8, r5, #1
	if (!buf) {
   2ba7e:	4606      	mov	r6, r0
   2ba80:	2800      	cmp	r0, #0
   2ba82:	d0e9      	beq.n	2ba58 <bt_id_del+0x98>
	return net_buf_simple_add(&buf->b, len);
   2ba84:	2107      	movs	r1, #7
   2ba86:	3008      	adds	r0, #8
   2ba88:	f01b ff4e 	bl	47928 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   2ba8c:	4641      	mov	r1, r8
   2ba8e:	f019 fcee 	bl	4546e <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   2ba92:	463a      	mov	r2, r7
   2ba94:	4631      	mov	r1, r6
   2ba96:	f242 0028 	movw	r0, #8232	; 0x2028
   2ba9a:	f7ff fb39 	bl	2b110 <bt_hci_cmd_send_sync>
	if (err) {
   2ba9e:	2800      	cmp	r0, #0
   2baa0:	d1da      	bne.n	2ba58 <bt_id_del+0x98>
	bt_dev.le.rl_entries--;
   2baa2:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2baa6:	3b01      	subs	r3, #1
   2baa8:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   2baac:	7a2b      	ldrb	r3, [r5, #8]
   2baae:	f023 0304 	bic.w	r3, r3, #4
   2bab2:	722b      	strb	r3, [r5, #8]
   2bab4:	e7d0      	b.n	2ba58 <bt_id_del+0x98>
   2bab6:	bf00      	nop
   2bab8:	20000000 	.word	0x20000000
   2babc:	00045541 	.word	0x00045541
   2bac0:	000454ff 	.word	0x000454ff
   2bac4:	00045481 	.word	0x00045481

0002bac8 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   2bac8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2baca:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   2bacc:	4605      	mov	r5, r0
   2bace:	b918      	cbnz	r0, 2bad8 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   2bad0:	b1ec      	cbz	r4, 2bb0e <bt_id_create+0x46>
		return -EINVAL;
   2bad2:	f06f 0015 	mvn.w	r0, #21
   2bad6:	e018      	b.n	2bb0a <bt_id_create+0x42>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   2bad8:	2300      	movs	r3, #0
   2bada:	2207      	movs	r2, #7
   2badc:	4669      	mov	r1, sp
   2bade:	9300      	str	r3, [sp, #0]
   2bae0:	f8cd 3003 	str.w	r3, [sp, #3]
   2bae4:	f018 ffdd 	bl	44aa2 <memcmp>
   2bae8:	2800      	cmp	r0, #0
   2baea:	d0f1      	beq.n	2bad0 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   2baec:	782b      	ldrb	r3, [r5, #0]
   2baee:	2b01      	cmp	r3, #1
   2baf0:	d1ef      	bne.n	2bad2 <bt_id_create+0xa>
   2baf2:	79ab      	ldrb	r3, [r5, #6]
   2baf4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2baf8:	2bc0      	cmp	r3, #192	; 0xc0
   2bafa:	d1ea      	bne.n	2bad2 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   2bafc:	4628      	mov	r0, r5
   2bafe:	f7ff fe2f 	bl	2b760 <id_find>
   2bb02:	2800      	cmp	r0, #0
   2bb04:	dbe4      	blt.n	2bad0 <bt_id_create+0x8>
			return -EALREADY;
   2bb06:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   2bb0a:	b002      	add	sp, #8
   2bb0c:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   2bb0e:	4e12      	ldr	r6, [pc, #72]	; (2bb58 <bt_id_create+0x90>)
   2bb10:	79f3      	ldrb	r3, [r6, #7]
   2bb12:	2b01      	cmp	r3, #1
   2bb14:	d01c      	beq.n	2bb50 <bt_id_create+0x88>
   2bb16:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
   2bb1a:	f019 fcab 	bl	45474 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   2bb1e:	07c3      	lsls	r3, r0, #31
   2bb20:	d40b      	bmi.n	2bb3a <bt_id_create+0x72>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   2bb22:	2d00      	cmp	r5, #0
   2bb24:	d0d5      	beq.n	2bad2 <bt_id_create+0xa>
   2bb26:	2207      	movs	r2, #7
   2bb28:	4669      	mov	r1, sp
   2bb2a:	4628      	mov	r0, r5
   2bb2c:	9400      	str	r4, [sp, #0]
   2bb2e:	f8cd 4003 	str.w	r4, [sp, #3]
   2bb32:	f018 ffb6 	bl	44aa2 <memcmp>
   2bb36:	2800      	cmp	r0, #0
   2bb38:	d0cb      	beq.n	2bad2 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   2bb3a:	79f4      	ldrb	r4, [r6, #7]
	err = id_create(new_id, addr, irk);
   2bb3c:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
   2bb3e:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
   2bb40:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   2bb42:	71f3      	strb	r3, [r6, #7]
	err = id_create(new_id, addr, irk);
   2bb44:	f7ff fe52 	bl	2b7ec <id_create.constprop.0>
	new_id = bt_dev.id_count++;
   2bb48:	2800      	cmp	r0, #0
   2bb4a:	bf08      	it	eq
   2bb4c:	4620      	moveq	r0, r4
   2bb4e:	e7dc      	b.n	2bb0a <bt_id_create+0x42>
		return -ENOMEM;
   2bb50:	f06f 000b 	mvn.w	r0, #11
   2bb54:	e7d9      	b.n	2bb0a <bt_id_create+0x42>
   2bb56:	bf00      	nop
   2bb58:	20000000 	.word	0x20000000

0002bb5c <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   2bb5c:	b570      	push	{r4, r5, r6, lr}
   2bb5e:	b086      	sub	sp, #24
   2bb60:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   2bb62:	aa01      	add	r2, sp, #4
   2bb64:	2100      	movs	r1, #0
   2bb66:	f241 0009 	movw	r0, #4105	; 0x1009
   2bb6a:	f7ff fad1 	bl	2b110 <bt_hci_cmd_send_sync>
	if (err) {
   2bb6e:	4604      	mov	r4, r0
   2bb70:	b970      	cbnz	r0, 2bb90 <bt_id_read_public_addr+0x34>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   2bb72:	9b01      	ldr	r3, [sp, #4]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   2bb74:	9002      	str	r0, [sp, #8]
   2bb76:	689d      	ldr	r5, [r3, #8]
   2bb78:	f8ad 000c 	strh.w	r0, [sp, #12]
   2bb7c:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   2bb7e:	2206      	movs	r2, #6
   2bb80:	a902      	add	r1, sp, #8
   2bb82:	4628      	mov	r0, r5
   2bb84:	f018 ff8d 	bl	44aa2 <memcmp>
   2bb88:	b928      	cbnz	r0, 2bb96 <bt_id_read_public_addr+0x3a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   2bb8a:	9801      	ldr	r0, [sp, #4]
   2bb8c:	f011 fa8c 	bl	3d0a8 <net_buf_unref>
		return 0U;
   2bb90:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   2bb92:	b006      	add	sp, #24
   2bb94:	bd70      	pop	{r4, r5, r6, pc}
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   2bb96:	4b0c      	ldr	r3, [pc, #48]	; (2bbc8 <bt_id_read_public_addr+0x6c>)
   2bb98:	6818      	ldr	r0, [r3, #0]
   2bb9a:	9004      	str	r0, [sp, #16]
   2bb9c:	889b      	ldrh	r3, [r3, #4]
   2bb9e:	f8ad 3014 	strh.w	r3, [sp, #20]
   2bba2:	2206      	movs	r2, #6
   2bba4:	a904      	add	r1, sp, #16
   2bba6:	4628      	mov	r0, r5
   2bba8:	f018 ff7b 	bl	44aa2 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   2bbac:	2800      	cmp	r0, #0
   2bbae:	d0ec      	beq.n	2bb8a <bt_id_read_public_addr+0x2e>
	memcpy(dst, src, sizeof(*dst));
   2bbb0:	2206      	movs	r2, #6
   2bbb2:	4629      	mov	r1, r5
   2bbb4:	1c70      	adds	r0, r6, #1
   2bbb6:	f018 ff84 	bl	44ac2 <memcpy>
	net_buf_unref(rsp);
   2bbba:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   2bbbc:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   2bbbe:	f011 fa73 	bl	3d0a8 <net_buf_unref>
	return 1U;
   2bbc2:	2001      	movs	r0, #1
   2bbc4:	e7e5      	b.n	2bb92 <bt_id_read_public_addr+0x36>
   2bbc6:	bf00      	nop
   2bbc8:	00049425 	.word	0x00049425

0002bbcc <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   2bbcc:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   2bbce:	4668      	mov	r0, sp
   2bbd0:	f7ff ffc4 	bl	2bb5c <bt_id_read_public_addr>
   2bbd4:	4b04      	ldr	r3, [pc, #16]	; (2bbe8 <bt_setup_public_id_addr+0x1c>)
   2bbd6:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   2bbd8:	b118      	cbz	r0, 2bbe2 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   2bbda:	4669      	mov	r1, sp
   2bbdc:	2000      	movs	r0, #0
   2bbde:	f7ff fe05 	bl	2b7ec <id_create.constprop.0>
}
   2bbe2:	b003      	add	sp, #12
   2bbe4:	f85d fb04 	ldr.w	pc, [sp], #4
   2bbe8:	20000000 	.word	0x20000000

0002bbec <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   2bbec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   2bbf0:	4b15      	ldr	r3, [pc, #84]	; (2bc48 <bt_read_static_addr+0x5c>)
   2bbf2:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
   2bbf6:	07db      	lsls	r3, r3, #31
{
   2bbf8:	4607      	mov	r7, r0
   2bbfa:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   2bbfc:	d404      	bmi.n	2bc08 <bt_read_static_addr+0x1c>
		BT_WARN("Read Static Addresses command not available");
		return 0;
   2bbfe:	2500      	movs	r5, #0
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   2bc00:	4628      	mov	r0, r5
   2bc02:	b002      	add	sp, #8
   2bc04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   2bc08:	aa01      	add	r2, sp, #4
   2bc0a:	2100      	movs	r1, #0
   2bc0c:	f64f 4009 	movw	r0, #64521	; 0xfc09
   2bc10:	f7ff fa7e 	bl	2b110 <bt_hci_cmd_send_sync>
	if (err) {
   2bc14:	4604      	mov	r4, r0
   2bc16:	2800      	cmp	r0, #0
   2bc18:	d1f1      	bne.n	2bbfe <bt_read_static_addr+0x12>
	rp = (void *)rsp->data;
   2bc1a:	9b01      	ldr	r3, [sp, #4]
   2bc1c:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   2bc1e:	785d      	ldrb	r5, [r3, #1]
   2bc20:	42b5      	cmp	r5, r6
   2bc22:	bf28      	it	cs
   2bc24:	4635      	movcs	r5, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   2bc26:	f04f 0816 	mov.w	r8, #22
   2bc2a:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   2bc2c:	42a5      	cmp	r5, r4
   2bc2e:	dc03      	bgt.n	2bc38 <bt_read_static_addr+0x4c>
	net_buf_unref(rsp);
   2bc30:	9801      	ldr	r0, [sp, #4]
   2bc32:	f011 fa39 	bl	3d0a8 <net_buf_unref>
	if (!cnt) {
   2bc36:	e7e3      	b.n	2bc00 <bt_read_static_addr+0x14>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   2bc38:	fb08 7004 	mla	r0, r8, r4, r7
   2bc3c:	2216      	movs	r2, #22
   2bc3e:	4631      	mov	r1, r6
   2bc40:	f018 ff3f 	bl	44ac2 <memcpy>
	for (i = 0; i < cnt; i++) {
   2bc44:	3401      	adds	r4, #1
   2bc46:	e7f1      	b.n	2bc2c <bt_read_static_addr+0x40>
   2bc48:	20000000 	.word	0x20000000

0002bc4c <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   2bc4c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   2bc4e:	4e15      	ldr	r6, [pc, #84]	; (2bca4 <bt_setup_random_id_addr+0x58>)
   2bc50:	79f4      	ldrb	r4, [r6, #7]
{
   2bc52:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   2bc54:	b92c      	cbnz	r4, 2bc62 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   2bc56:	2101      	movs	r1, #1
   2bc58:	a802      	add	r0, sp, #8
   2bc5a:	f7ff ffc7 	bl	2bbec <bt_read_static_addr>
   2bc5e:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   2bc60:	b9c8      	cbnz	r0, 2bc96 <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   2bc62:	2100      	movs	r1, #0
   2bc64:	4608      	mov	r0, r1
}
   2bc66:	b009      	add	sp, #36	; 0x24
   2bc68:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   2bc6c:	f7ff bf2c 	b.w	2bac8 <bt_id_create>
   2bc70:	ab02      	add	r3, sp, #8
   2bc72:	fb07 3105 	mla	r1, r7, r5, r3
   2bc76:	2206      	movs	r2, #6
   2bc78:	f10d 0001 	add.w	r0, sp, #1
   2bc7c:	f018 ff21 	bl	44ac2 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   2bc80:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   2bc82:	4669      	mov	r1, sp
   2bc84:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   2bc86:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   2bc8a:	f7ff fdaf 	bl	2b7ec <id_create.constprop.0>
				if (err) {
   2bc8e:	3401      	adds	r4, #1
   2bc90:	b110      	cbz	r0, 2bc98 <bt_setup_random_id_addr+0x4c>
}
   2bc92:	b009      	add	sp, #36	; 0x24
   2bc94:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   2bc96:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   2bc98:	79f3      	ldrb	r3, [r6, #7]
   2bc9a:	b2e5      	uxtb	r5, r4
   2bc9c:	42ab      	cmp	r3, r5
   2bc9e:	d8e7      	bhi.n	2bc70 <bt_setup_random_id_addr+0x24>
			return 0;
   2bca0:	2000      	movs	r0, #0
   2bca2:	e7f6      	b.n	2bc92 <bt_setup_random_id_addr+0x46>
   2bca4:	20000000 	.word	0x20000000

0002bca8 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   2bca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   2bcac:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   2bcae:	7804      	ldrb	r4, [r0, #0]
{
   2bcb0:	460e      	mov	r6, r1
   2bcb2:	4690      	mov	r8, r2
   2bcb4:	461d      	mov	r5, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   2bcb6:	d52e      	bpl.n	2bd16 <bt_id_set_adv_own_addr+0x6e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   2bcb8:	4f21      	ldr	r7, [pc, #132]	; (2bd40 <bt_id_set_adv_own_addr+0x98>)
   2bcba:	b1a2      	cbz	r2, 2bce6 <bt_id_set_adv_own_addr+0x3e>
   2bcbc:	0688      	lsls	r0, r1, #26
   2bcbe:	d40b      	bmi.n	2bcd8 <bt_id_set_adv_own_addr+0x30>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   2bcc0:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   2bcc4:	5cf8      	ldrb	r0, [r7, r3]
   2bcc6:	2801      	cmp	r0, #1
   2bcc8:	d014      	beq.n	2bcf4 <bt_id_set_adv_own_addr+0x4c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   2bcca:	7028      	strb	r0, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   2bccc:	06b2      	lsls	r2, r6, #26
   2bcce:	d51f      	bpl.n	2bd10 <bt_id_set_adv_own_addr+0x68>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   2bcd0:	f040 0002 	orr.w	r0, r0, #2
   2bcd4:	7028      	strb	r0, [r5, #0]
   2bcd6:	e01b      	b.n	2bd10 <bt_id_set_adv_own_addr+0x68>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   2bcd8:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
   2bcdc:	0659      	lsls	r1, r3, #25
   2bcde:	d4ef      	bmi.n	2bcc0 <bt_id_set_adv_own_addr+0x18>
			return -ENOTSUP;
   2bce0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2bce4:	e015      	b.n	2bd12 <bt_id_set_adv_own_addr+0x6a>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   2bce6:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   2bcea:	5cfb      	ldrb	r3, [r7, r3]
   2bcec:	2b01      	cmp	r3, #1
   2bcee:	d001      	beq.n	2bcf4 <bt_id_set_adv_own_addr+0x4c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
			}

			*own_addr_type = id_addr->type;
   2bcf0:	702b      	strb	r3, [r5, #0]
		} else {
			err = bt_id_set_adv_private_addr(adv);
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}

		if (err) {
   2bcf2:	e00d      	b.n	2bd10 <bt_id_set_adv_own_addr+0x68>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   2bcf4:	2007      	movs	r0, #7
   2bcf6:	fb00 7004 	mla	r0, r0, r4, r7
		return set_random_address(addr);
   2bcfa:	3001      	adds	r0, #1
   2bcfc:	f7ff fd4a 	bl	2b794 <set_random_address>
				if (err) {
   2bd00:	b938      	cbnz	r0, 2bd12 <bt_id_set_adv_own_addr+0x6a>
			*own_addr_type = id_addr->type;
   2bd02:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   2bd06:	5d38      	ldrb	r0, [r7, r4]
   2bd08:	7028      	strb	r0, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   2bd0a:	f1b8 0f00 	cmp.w	r8, #0
   2bd0e:	d1dd      	bne.n	2bccc <bt_id_set_adv_own_addr+0x24>
			return err;
		}
	}

	return 0;
   2bd10:	2000      	movs	r0, #0
}
   2bd12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   2bd16:	074b      	lsls	r3, r1, #29
   2bd18:	d50e      	bpl.n	2bd38 <bt_id_set_adv_own_addr+0x90>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   2bd1a:	4e09      	ldr	r6, [pc, #36]	; (2bd40 <bt_id_set_adv_own_addr+0x98>)
   2bd1c:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   2bd20:	5df3      	ldrb	r3, [r6, r7]
   2bd22:	2b01      	cmp	r3, #1
   2bd24:	d1e4      	bne.n	2bcf0 <bt_id_set_adv_own_addr+0x48>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   2bd26:	2007      	movs	r0, #7
   2bd28:	fb10 3004 	smlabb	r0, r0, r4, r3
		return set_random_address(addr);
   2bd2c:	4430      	add	r0, r6
   2bd2e:	f7ff fd31 	bl	2b794 <set_random_address>
			*own_addr_type = id_addr->type;
   2bd32:	5df3      	ldrb	r3, [r6, r7]
   2bd34:	702b      	strb	r3, [r5, #0]
		if (err) {
   2bd36:	e7ec      	b.n	2bd12 <bt_id_set_adv_own_addr+0x6a>
			err = bt_id_set_adv_private_addr(adv);
   2bd38:	f019 fc26 	bl	45588 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   2bd3c:	2301      	movs	r3, #1
   2bd3e:	e7f9      	b.n	2bd34 <bt_id_set_adv_own_addr+0x8c>
   2bd40:	20000000 	.word	0x20000000

0002bd44 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   2bd44:	6843      	ldr	r3, [r0, #4]
{
   2bd46:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2bd48:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   2bd4a:	0558      	lsls	r0, r3, #21
   2bd4c:	d408      	bmi.n	2bd60 <valid_adv_param+0x1c>
		return false;
	}

	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2bd4e:	6922      	ldr	r2, [r4, #16]
   2bd50:	b10a      	cbz	r2, 2bd56 <valid_adv_param+0x12>
   2bd52:	07d9      	lsls	r1, r3, #31
   2bd54:	d504      	bpl.n	2bd60 <valid_adv_param+0x1c>
	if (param->id >= bt_dev.id_count ||
   2bd56:	4d1c      	ldr	r5, [pc, #112]	; (2bdc8 <valid_adv_param+0x84>)
   2bd58:	7820      	ldrb	r0, [r4, #0]
   2bd5a:	79eb      	ldrb	r3, [r5, #7]
   2bd5c:	4283      	cmp	r3, r0
   2bd5e:	d802      	bhi.n	2bd66 <valid_adv_param+0x22>
		return false;
   2bd60:	2000      	movs	r0, #0
		return false;
	}

	return valid_adv_ext_param(param);
}
   2bd62:	b003      	add	sp, #12
   2bd64:	bd30      	pop	{r4, r5, pc}
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   2bd66:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   2bd6a:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   2bd6c:	2207      	movs	r2, #7
   2bd6e:	4669      	mov	r1, sp
   2bd70:	4428      	add	r0, r5
   2bd72:	9300      	str	r3, [sp, #0]
   2bd74:	f8cd 3003 	str.w	r3, [sp, #3]
   2bd78:	f018 fe93 	bl	44aa2 <memcmp>
	if (param->id >= bt_dev.id_count ||
   2bd7c:	2800      	cmp	r0, #0
   2bd7e:	d0ef      	beq.n	2bd60 <valid_adv_param+0x1c>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2bd80:	6860      	ldr	r0, [r4, #4]
   2bd82:	07c2      	lsls	r2, r0, #31
   2bd84:	d406      	bmi.n	2bd94 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   2bd86:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   2bd8a:	2b08      	cmp	r3, #8
   2bd8c:	d802      	bhi.n	2bd94 <valid_adv_param+0x50>
   2bd8e:	68a3      	ldr	r3, [r4, #8]
   2bd90:	2b9f      	cmp	r3, #159	; 0x9f
   2bd92:	d9e5      	bls.n	2bd60 <valid_adv_param+0x1c>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   2bd94:	f010 0f30 	tst.w	r0, #48	; 0x30
   2bd98:	d002      	beq.n	2bda0 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   2bd9a:	6923      	ldr	r3, [r4, #16]
   2bd9c:	2b00      	cmp	r3, #0
   2bd9e:	d0df      	beq.n	2bd60 <valid_adv_param+0x1c>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   2bda0:	06c3      	lsls	r3, r0, #27
   2bda2:	d401      	bmi.n	2bda8 <valid_adv_param+0x64>
   2bda4:	6923      	ldr	r3, [r4, #16]
   2bda6:	b943      	cbnz	r3, 2bdba <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
   2bda8:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   2bdac:	429a      	cmp	r2, r3
   2bdae:	d8d7      	bhi.n	2bd60 <valid_adv_param+0x1c>
   2bdb0:	2a1f      	cmp	r2, #31
   2bdb2:	d9d5      	bls.n	2bd60 <valid_adv_param+0x1c>
		    param->interval_min < 0x0020 ||
   2bdb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   2bdb8:	d8d2      	bhi.n	2bd60 <valid_adv_param+0x1c>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   2bdba:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   2bdbe:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   2bdc2:	bf18      	it	ne
   2bdc4:	2001      	movne	r0, #1
   2bdc6:	e7cc      	b.n	2bd62 <valid_adv_param+0x1e>
   2bdc8:	20000000 	.word	0x20000000

0002bdcc <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   2bdcc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   2bdce:	4606      	mov	r6, r0
   2bdd0:	4b1e      	ldr	r3, [pc, #120]	; (2be4c <le_adv_start_add_conn+0x80>)
   2bdd2:	f816 2b09 	ldrb.w	r2, [r6], #9
   2bdd6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   2bdda:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   2bddc:	2300      	movs	r3, #0
{
   2bdde:	4605      	mov	r5, r0
   2bde0:	2207      	movs	r2, #7
   2bde2:	460f      	mov	r7, r1
   2bde4:	4630      	mov	r0, r6
   2bde6:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   2bde8:	9300      	str	r3, [sp, #0]
   2bdea:	f8cd 3003 	str.w	r3, [sp, #3]
   2bdee:	f018 fe58 	bl	44aa2 <memcmp>
   2bdf2:	782a      	ldrb	r2, [r5, #0]
   2bdf4:	4604      	mov	r4, r0
   2bdf6:	b9a8      	cbnz	r0, 2be24 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   2bdf8:	4b15      	ldr	r3, [pc, #84]	; (2be50 <le_adv_start_add_conn+0x84>)
   2bdfa:	6818      	ldr	r0, [r3, #0]
   2bdfc:	8899      	ldrh	r1, [r3, #4]
   2bdfe:	9002      	str	r0, [sp, #8]
   2be00:	799b      	ldrb	r3, [r3, #6]
   2be02:	f8ad 100c 	strh.w	r1, [sp, #12]
   2be06:	4610      	mov	r0, r2
   2be08:	a902      	add	r1, sp, #8
   2be0a:	f88d 300e 	strb.w	r3, [sp, #14]
   2be0e:	f000 fe5b 	bl	2cac8 <bt_conn_add_le>
		if (!conn) {
   2be12:	4605      	mov	r5, r0
   2be14:	b1b8      	cbz	r0, 2be46 <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   2be16:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   2be18:	f000 fc92 	bl	2c740 <bt_conn_set_state>
	*out_conn = conn;
   2be1c:	603d      	str	r5, [r7, #0]
	return 0;
}
   2be1e:	4620      	mov	r0, r4
   2be20:	b005      	add	sp, #20
   2be22:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   2be24:	4631      	mov	r1, r6
   2be26:	4610      	mov	r0, r2
   2be28:	f019 fea1 	bl	45b6e <bt_conn_exists_le>
   2be2c:	4604      	mov	r4, r0
   2be2e:	b938      	cbnz	r0, 2be40 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   2be30:	7828      	ldrb	r0, [r5, #0]
   2be32:	4631      	mov	r1, r6
   2be34:	f000 fe48 	bl	2cac8 <bt_conn_add_le>
	if (!conn) {
   2be38:	4605      	mov	r5, r0
   2be3a:	b120      	cbz	r0, 2be46 <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   2be3c:	2105      	movs	r1, #5
   2be3e:	e7eb      	b.n	2be18 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   2be40:	f06f 0415 	mvn.w	r4, #21
   2be44:	e7eb      	b.n	2be1e <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   2be46:	f06f 040b 	mvn.w	r4, #11
   2be4a:	e7e8      	b.n	2be1e <le_adv_start_add_conn+0x52>
   2be4c:	20000000 	.word	0x20000000
   2be50:	0004942b 	.word	0x0004942b

0002be54 <bt_le_ext_adv_foreach>:
{
   2be54:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   2be56:	4801      	ldr	r0, [pc, #4]	; (2be5c <bt_le_ext_adv_foreach+0x8>)
   2be58:	4718      	bx	r3
   2be5a:	bf00      	nop
   2be5c:	20000018 	.word	0x20000018

0002be60 <bt_le_adv_lookup_legacy>:
}
   2be60:	4800      	ldr	r0, [pc, #0]	; (2be64 <bt_le_adv_lookup_legacy+0x4>)
   2be62:	4770      	bx	lr
   2be64:	20000018 	.word	0x20000018

0002be68 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   2be68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   2be6c:	690f      	ldr	r7, [r1, #16]
{
   2be6e:	b08f      	sub	sp, #60	; 0x3c
   2be70:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   2be72:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   2be74:	1afe      	subs	r6, r7, r3
{
   2be76:	4605      	mov	r5, r0
   2be78:	488c      	ldr	r0, [pc, #560]	; (2c0ac <bt_le_adv_start_legacy+0x244>)
   2be7a:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
   2be7c:	bf18      	it	ne
   2be7e:	2601      	movne	r6, #1
	struct bt_conn *conn = NULL;
   2be80:	9307      	str	r3, [sp, #28]
   2be82:	f019 fbb6 	bl	455f2 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2be86:	0782      	lsls	r2, r0, #30
{
   2be88:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2be8a:	f140 8104 	bpl.w	2c096 <bt_le_adv_start_legacy+0x22e>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   2be8e:	4608      	mov	r0, r1
   2be90:	f7ff ff58 	bl	2bd44 <valid_adv_param>
   2be94:	b928      	cbnz	r0, 2bea2 <bt_le_adv_start_legacy+0x3a>
		return -EINVAL;
   2be96:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   2be9a:	4658      	mov	r0, fp
   2be9c:	b00f      	add	sp, #60	; 0x3c
   2be9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   2bea2:	4620      	mov	r0, r4
   2bea4:	f019 fb82 	bl	455ac <bt_id_adv_random_addr_check>
   2bea8:	4681      	mov	r9, r0
   2beaa:	2800      	cmp	r0, #0
   2beac:	d0f3      	beq.n	2be96 <bt_le_adv_start_legacy+0x2e>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2beae:	f105 0810 	add.w	r8, r5, #16
   2beb2:	4640      	mov	r0, r8
   2beb4:	f019 fb9d 	bl	455f2 <atomic_get>
   2beb8:	0643      	lsls	r3, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2beba:	f3c0 1b80 	ubfx	fp, r0, #6, #1
   2bebe:	f100 80ed 	bmi.w	2c09c <bt_le_adv_start_legacy+0x234>
	(void)memset(&set_param, 0, sizeof(set_param));
   2bec2:	220f      	movs	r2, #15
   2bec4:	4659      	mov	r1, fp
   2bec6:	a80a      	add	r0, sp, #40	; 0x28
   2bec8:	f018 fe06 	bl	44ad8 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   2becc:	68a3      	ldr	r3, [r4, #8]
   2bece:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
   2bed2:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   2bed4:	68e3      	ldr	r3, [r4, #12]
   2bed6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   2beda:	f019 fb7b 	bl	455d4 <get_adv_channel_map>
	if (adv->id != param->id) {
   2bede:	782a      	ldrb	r2, [r5, #0]
   2bee0:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   2bee2:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   2bee6:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   2bee8:	f88d b036 	strb.w	fp, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   2beec:	d004      	beq.n	2bef8 <bt_le_adv_start_legacy+0x90>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2beee:	486f      	ldr	r0, [pc, #444]	; (2c0ac <bt_le_adv_start_legacy+0x244>)
   2bef0:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   2bef4:	f019 fb83 	bl	455fe <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   2bef8:	4a6d      	ldr	r2, [pc, #436]	; (2c0b0 <bt_le_adv_start_legacy+0x248>)
	adv->id = param->id;
   2befa:	7823      	ldrb	r3, [r4, #0]
   2befc:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   2befe:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   2bf02:	6861      	ldr	r1, [r4, #4]
   2bf04:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   2bf08:	4632      	mov	r2, r6
   2bf0a:	4628      	mov	r0, r5
   2bf0c:	f7ff fecc 	bl	2bca8 <bt_id_set_adv_own_addr>
	if (err) {
   2bf10:	4683      	mov	fp, r0
   2bf12:	2800      	cmp	r0, #0
   2bf14:	d1c1      	bne.n	2be9a <bt_le_adv_start_legacy+0x32>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   2bf16:	f105 0009 	add.w	r0, r5, #9
	if (dir_adv) {
   2bf1a:	b1a7      	cbz	r7, 2bf46 <bt_le_adv_start_legacy+0xde>
	memcpy(dst, src, sizeof(*dst));
   2bf1c:	2207      	movs	r2, #7
   2bf1e:	6921      	ldr	r1, [r4, #16]
   2bf20:	f018 fdcf 	bl	44ac2 <memcpy>
	name_type = get_adv_name_type_param(param);
   2bf24:	4620      	mov	r0, r4
   2bf26:	f019 fc66 	bl	457f6 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   2bf2a:	6862      	ldr	r2, [r4, #4]
	name_type = get_adv_name_type_param(param);
   2bf2c:	4606      	mov	r6, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   2bf2e:	07d0      	lsls	r0, r2, #31
   2bf30:	d41a      	bmi.n	2bf68 <bt_le_adv_start_legacy+0x100>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   2bf32:	0592      	lsls	r2, r2, #22
   2bf34:	d403      	bmi.n	2bf3e <bt_le_adv_start_legacy+0xd6>
   2bf36:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2bf38:	b90b      	cbnz	r3, 2bf3e <bt_le_adv_start_legacy+0xd6>
   2bf3a:	2e02      	cmp	r6, #2
   2bf3c:	d14f      	bne.n	2bfde <bt_le_adv_start_legacy+0x176>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   2bf3e:	2302      	movs	r3, #2
   2bf40:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   2bf44:	e01e      	b.n	2bf84 <bt_le_adv_start_legacy+0x11c>
   2bf46:	2207      	movs	r2, #7
   2bf48:	a908      	add	r1, sp, #32
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   2bf4a:	9708      	str	r7, [sp, #32]
   2bf4c:	f8cd 7023 	str.w	r7, [sp, #35]	; 0x23
   2bf50:	f018 fdb7 	bl	44ac2 <memcpy>
	name_type = get_adv_name_type_param(param);
   2bf54:	4620      	mov	r0, r4
   2bf56:	f019 fc4e 	bl	457f6 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   2bf5a:	6862      	ldr	r2, [r4, #4]
   2bf5c:	07d1      	lsls	r1, r2, #31
	name_type = get_adv_name_type_param(param);
   2bf5e:	4606      	mov	r6, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   2bf60:	d5e7      	bpl.n	2bf32 <bt_le_adv_start_legacy+0xca>
			set_param.type = BT_HCI_ADV_IND;
   2bf62:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
   2bf66:	e00d      	b.n	2bf84 <bt_le_adv_start_legacy+0x11c>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   2bf68:	f012 0f10 	tst.w	r2, #16
   2bf6c:	bf0c      	ite	eq
   2bf6e:	2201      	moveq	r2, #1
   2bf70:	2204      	movne	r2, #4
   2bf72:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
   2bf76:	6921      	ldr	r1, [r4, #16]
   2bf78:	2207      	movs	r2, #7
   2bf7a:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   2bf7e:	f018 fda0 	bl	44ac2 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   2bf82:	46d9      	mov	r9, fp
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   2bf84:	210f      	movs	r1, #15
   2bf86:	f242 0006 	movw	r0, #8198	; 0x2006
   2bf8a:	f7ff f865 	bl	2b058 <bt_hci_cmd_create>
	if (!buf) {
   2bf8e:	4683      	mov	fp, r0
   2bf90:	2800      	cmp	r0, #0
   2bf92:	f000 8086 	beq.w	2c0a2 <bt_le_adv_start_legacy+0x23a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2bf96:	220f      	movs	r2, #15
   2bf98:	a90a      	add	r1, sp, #40	; 0x28
   2bf9a:	3008      	adds	r0, #8
   2bf9c:	f01b fcca 	bl	47934 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   2bfa0:	2200      	movs	r2, #0
   2bfa2:	4659      	mov	r1, fp
   2bfa4:	f242 0006 	movw	r0, #8198	; 0x2006
   2bfa8:	f7ff f8b2 	bl	2b110 <bt_hci_cmd_send_sync>
	if (err) {
   2bfac:	2800      	cmp	r0, #0
   2bfae:	d17b      	bne.n	2c0a8 <bt_le_adv_start_legacy+0x240>
	if (!dir_adv) {
   2bfb0:	b1df      	cbz	r7, 2bfea <bt_le_adv_start_legacy+0x182>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2bfb2:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2bfb4:	07db      	lsls	r3, r3, #31
   2bfb6:	d426      	bmi.n	2c006 <bt_le_adv_start_legacy+0x19e>
	return bt_le_adv_set_enable_legacy(adv, enable);
   2bfb8:	4628      	mov	r0, r5
   2bfba:	2101      	movs	r1, #1
   2bfbc:	f019 fc2b 	bl	45816 <bt_le_adv_set_enable_legacy>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   2bfc0:	9d07      	ldr	r5, [sp, #28]
	if (err) {
   2bfc2:	4683      	mov	fp, r0
   2bfc4:	2800      	cmp	r0, #0
   2bfc6:	d05f      	beq.n	2c088 <bt_le_adv_start_legacy+0x220>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   2bfc8:	2d00      	cmp	r5, #0
   2bfca:	f43f af66 	beq.w	2be9a <bt_le_adv_start_legacy+0x32>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2bfce:	4628      	mov	r0, r5
   2bfd0:	2100      	movs	r1, #0
   2bfd2:	f000 fbb5 	bl	2c740 <bt_conn_set_state>
			bt_conn_unref(conn);
   2bfd6:	4628      	mov	r0, r5
   2bfd8:	f019 fd13 	bl	45a02 <bt_conn_unref>
   2bfdc:	e75d      	b.n	2be9a <bt_le_adv_start_legacy+0x32>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   2bfde:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   2bfe0:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   2bfe4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   2bfe8:	e7cc      	b.n	2bf84 <bt_le_adv_start_legacy+0x11c>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   2bfea:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2bfec:	9300      	str	r3, [sp, #0]
   2bfee:	e9cd 9601 	strd	r9, r6, [sp, #4]
   2bff2:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2bff4:	9905      	ldr	r1, [sp, #20]
   2bff6:	4652      	mov	r2, sl
   2bff8:	4628      	mov	r0, r5
   2bffa:	f019 fb85 	bl	45708 <le_adv_update.constprop.0>
		if (err) {
   2bffe:	4683      	mov	fp, r0
   2c000:	2800      	cmp	r0, #0
   2c002:	d0d6      	beq.n	2bfb2 <bt_le_adv_start_legacy+0x14a>
   2c004:	e749      	b.n	2be9a <bt_le_adv_start_legacy+0x32>
		err = le_adv_start_add_conn(adv, &conn);
   2c006:	a907      	add	r1, sp, #28
   2c008:	4628      	mov	r0, r5
   2c00a:	f7ff fedf 	bl	2bdcc <le_adv_start_add_conn>
		if (err) {
   2c00e:	4683      	mov	fp, r0
   2c010:	2800      	cmp	r0, #0
   2c012:	d0d1      	beq.n	2bfb8 <bt_le_adv_start_legacy+0x150>
			if (err == -ENOMEM && !dir_adv &&
   2c014:	f110 0f0c 	cmn.w	r0, #12
   2c018:	f47f af3f 	bne.w	2be9a <bt_le_adv_start_legacy+0x32>
   2c01c:	2f00      	cmp	r7, #0
   2c01e:	f47f af3c 	bne.w	2be9a <bt_le_adv_start_legacy+0x32>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   2c022:	6862      	ldr	r2, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   2c024:	0790      	lsls	r0, r2, #30
   2c026:	f53f af38 	bmi.w	2be9a <bt_le_adv_start_legacy+0x32>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   2c02a:	6863      	ldr	r3, [r4, #4]
   2c02c:	f083 0302 	eor.w	r3, r3, #2
   2c030:	f3c3 0b40 	ubfx	fp, r3, #1, #1
   2c034:	f00b 0201 	and.w	r2, fp, #1
   2c038:	210d      	movs	r1, #13
   2c03a:	4640      	mov	r0, r8
   2c03c:	f019 fb4d 	bl	456da <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   2c040:	1e73      	subs	r3, r6, #1
   2c042:	425a      	negs	r2, r3
   2c044:	415a      	adcs	r2, r3
   2c046:	2107      	movs	r1, #7
   2c048:	4640      	mov	r0, r8
   2c04a:	f019 fb46 	bl	456da <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   2c04e:	1eb1      	subs	r1, r6, #2
   2c050:	424a      	negs	r2, r1
   2c052:	414a      	adcs	r2, r1
   2c054:	4640      	mov	r0, r8
   2c056:	2108      	movs	r1, #8
   2c058:	f019 fb3f 	bl	456da <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   2c05c:	6862      	ldr	r2, [r4, #4]
   2c05e:	2109      	movs	r1, #9
   2c060:	f002 0201 	and.w	r2, r2, #1
   2c064:	4640      	mov	r0, r8
   2c066:	f019 fb38 	bl	456da <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   2c06a:	464a      	mov	r2, r9
   2c06c:	210a      	movs	r1, #10
   2c06e:	4640      	mov	r0, r8
   2c070:	f019 fb33 	bl	456da <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   2c074:	6862      	ldr	r2, [r4, #4]
   2c076:	210c      	movs	r1, #12
   2c078:	f3c2 0280 	ubfx	r2, r2, #2, #1
   2c07c:	4640      	mov	r0, r8
   2c07e:	f019 fb2c 	bl	456da <atomic_set_bit_to>
	return 0;
   2c082:	f04f 0b00 	mov.w	fp, #0
   2c086:	e708      	b.n	2be9a <bt_le_adv_start_legacy+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   2c088:	b115      	cbz	r5, 2c090 <bt_le_adv_start_legacy+0x228>
		bt_conn_unref(conn);
   2c08a:	4628      	mov	r0, r5
   2c08c:	f019 fcb9 	bl	45a02 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   2c090:	2f00      	cmp	r7, #0
   2c092:	d1cf      	bne.n	2c034 <bt_le_adv_start_legacy+0x1cc>
   2c094:	e7c9      	b.n	2c02a <bt_le_adv_start_legacy+0x1c2>
		return -EAGAIN;
   2c096:	f06f 0b0a 	mvn.w	fp, #10
   2c09a:	e6fe      	b.n	2be9a <bt_le_adv_start_legacy+0x32>
		return -EALREADY;
   2c09c:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   2c0a0:	e6fb      	b.n	2be9a <bt_le_adv_start_legacy+0x32>
		return -ENOBUFS;
   2c0a2:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   2c0a6:	e6f8      	b.n	2be9a <bt_le_adv_start_legacy+0x32>
   2c0a8:	4683      	mov	fp, r0
   2c0aa:	e6f6      	b.n	2be9a <bt_le_adv_start_legacy+0x32>
   2c0ac:	200000cc 	.word	0x200000cc
   2c0b0:	20000000 	.word	0x20000000

0002c0b4 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   2c0b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2c0b6:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   2c0b8:	9a06      	ldr	r2, [sp, #24]
{
   2c0ba:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   2c0bc:	e9cd 3200 	strd	r3, r2, [sp]
   2c0c0:	462b      	mov	r3, r5
   2c0c2:	460a      	mov	r2, r1
   2c0c4:	4601      	mov	r1, r0
   2c0c6:	4811      	ldr	r0, [pc, #68]	; (2c10c <bt_le_adv_start+0x58>)
   2c0c8:	f7ff fece 	bl	2be68 <bt_le_adv_start_legacy>
   2c0cc:	4621      	mov	r1, r4
   2c0ce:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   2c0d0:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   2c0d2:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   2c0d6:	429d      	cmp	r5, r3
   2c0d8:	d102      	bne.n	2c0e0 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   2c0da:	4630      	mov	r0, r6
   2c0dc:	b002      	add	sp, #8
   2c0de:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   2c0e0:	880a      	ldrh	r2, [r1, #0]
   2c0e2:	4282      	cmp	r2, r0
   2c0e4:	d104      	bne.n	2c0f0 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   2c0e6:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   2c0e8:	b112      	cbz	r2, 2c0f0 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   2c0ea:	7812      	ldrb	r2, [r2, #0]
   2c0ec:	07d2      	lsls	r2, r2, #31
   2c0ee:	d402      	bmi.n	2c0f6 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   2c0f0:	3301      	adds	r3, #1
   2c0f2:	3108      	adds	r1, #8
   2c0f4:	e7ef      	b.n	2c0d6 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   2c0f6:	4906      	ldr	r1, [pc, #24]	; (2c110 <bt_le_adv_start+0x5c>)
   2c0f8:	4806      	ldr	r0, [pc, #24]	; (2c114 <bt_le_adv_start+0x60>)
   2c0fa:	f01c fbce 	bl	4889a <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   2c0fe:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2c102:	2300      	movs	r3, #0
   2c104:	4803      	ldr	r0, [pc, #12]	; (2c114 <bt_le_adv_start+0x60>)
   2c106:	f015 fc4d 	bl	419a4 <k_work_reschedule>
   2c10a:	e7e6      	b.n	2c0da <bt_le_adv_start+0x26>
   2c10c:	20000018 	.word	0x20000018
   2c110:	0004586b 	.word	0x0004586b
   2c114:	20000030 	.word	0x20000030

0002c118 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   2c118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
   2c11a:	4822      	ldr	r0, [pc, #136]	; (2c1a4 <bt_le_adv_stop+0x8c>)
   2c11c:	f019 fba2 	bl	45864 <bt_le_lim_adv_cancel_timeout>
   2c120:	4821      	ldr	r0, [pc, #132]	; (2c1a8 <bt_le_adv_stop+0x90>)
   2c122:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   2c126:	f019 fa6a 	bl	455fe <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2c12a:	481f      	ldr	r0, [pc, #124]	; (2c1a8 <bt_le_adv_stop+0x90>)
   2c12c:	f019 fa61 	bl	455f2 <atomic_get>
   2c130:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2c132:	065a      	lsls	r2, r3, #25
   2c134:	f3c0 1080 	ubfx	r0, r0, #6, #1
   2c138:	d531      	bpl.n	2c19e <bt_le_adv_stop+0x86>
   2c13a:	481b      	ldr	r0, [pc, #108]	; (2c1a8 <bt_le_adv_stop+0x90>)
   2c13c:	f019 fa59 	bl	455f2 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2c140:	0583      	lsls	r3, r0, #22
   2c142:	d521      	bpl.n	2c188 <bt_le_adv_stop+0x70>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   2c144:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   2c146:	4819      	ldr	r0, [pc, #100]	; (2c1ac <bt_le_adv_stop+0x94>)
   2c148:	9300      	str	r3, [sp, #0]
   2c14a:	2207      	movs	r2, #7
   2c14c:	4669      	mov	r1, sp
   2c14e:	f8cd 3003 	str.w	r3, [sp, #3]
   2c152:	f018 fca6 	bl	44aa2 <memcmp>
   2c156:	4b16      	ldr	r3, [pc, #88]	; (2c1b0 <bt_le_adv_stop+0x98>)
   2c158:	b9e8      	cbnz	r0, 2c196 <bt_le_adv_stop+0x7e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   2c15a:	4a16      	ldr	r2, [pc, #88]	; (2c1b4 <bt_le_adv_stop+0x9c>)
   2c15c:	8891      	ldrh	r1, [r2, #4]
   2c15e:	6810      	ldr	r0, [r2, #0]
   2c160:	7992      	ldrb	r2, [r2, #6]
   2c162:	f8ad 100c 	strh.w	r1, [sp, #12]
   2c166:	f88d 200e 	strb.w	r2, [sp, #14]
   2c16a:	9002      	str	r0, [sp, #8]
   2c16c:	2204      	movs	r2, #4
   2c16e:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   2c170:	7e18      	ldrb	r0, [r3, #24]
   2c172:	f000 fcdf 	bl	2cb34 <bt_conn_lookup_state_le>
   2c176:	4604      	mov	r4, r0
	if (conn) {
   2c178:	b130      	cbz	r0, 2c188 <bt_le_adv_stop+0x70>
		conn->err = status;
   2c17a:	2100      	movs	r1, #0
   2c17c:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2c17e:	f000 fadf 	bl	2c740 <bt_conn_set_state>
		bt_conn_unref(conn);
   2c182:	4620      	mov	r0, r4
   2c184:	f019 fc3d 	bl	45a02 <bt_conn_unref>
		err = bt_le_adv_set_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = bt_le_adv_set_enable_legacy(adv, false);
   2c188:	4806      	ldr	r0, [pc, #24]	; (2c1a4 <bt_le_adv_stop+0x8c>)
   2c18a:	2100      	movs	r1, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   2c18c:	b004      	add	sp, #16
   2c18e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   2c192:	f019 bb40 	b.w	45816 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   2c196:	2205      	movs	r2, #5
   2c198:	f103 0121 	add.w	r1, r3, #33	; 0x21
   2c19c:	e7e8      	b.n	2c170 <bt_le_adv_stop+0x58>
}
   2c19e:	b004      	add	sp, #16
   2c1a0:	bd10      	pop	{r4, pc}
   2c1a2:	bf00      	nop
   2c1a4:	20000018 	.word	0x20000018
   2c1a8:	20000028 	.word	0x20000028
   2c1ac:	20000021 	.word	0x20000021
   2c1b0:	20000000 	.word	0x20000000
   2c1b4:	0004942b 	.word	0x0004942b

0002c1b8 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   2c1b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2c1ba:	4c20      	ldr	r4, [pc, #128]	; (2c23c <bt_le_adv_resume+0x84>)
   2c1bc:	4620      	mov	r0, r4
   2c1be:	f019 fa18 	bl	455f2 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   2c1c2:	0480      	lsls	r0, r0, #18
   2c1c4:	d538      	bpl.n	2c238 <bt_le_adv_resume+0x80>
   2c1c6:	4620      	mov	r0, r4
   2c1c8:	f019 fa13 	bl	455f2 <atomic_get>
   2c1cc:	0641      	lsls	r1, r0, #25
   2c1ce:	d433      	bmi.n	2c238 <bt_le_adv_resume+0x80>
   2c1d0:	4620      	mov	r0, r4
   2c1d2:	f019 fa0e 	bl	455f2 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   2c1d6:	0582      	lsls	r2, r0, #22
   2c1d8:	d52e      	bpl.n	2c238 <bt_le_adv_resume+0x80>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   2c1da:	a901      	add	r1, sp, #4
   2c1dc:	f1a4 0010 	sub.w	r0, r4, #16
   2c1e0:	f7ff fdf4 	bl	2bdcc <le_adv_start_add_conn>
	if (err) {
   2c1e4:	4605      	mov	r5, r0
   2c1e6:	bb38      	cbnz	r0, 2c238 <bt_le_adv_resume+0x80>
	return bt_le_adv_set_enable_legacy(adv, enable);
   2c1e8:	2101      	movs	r1, #1
   2c1ea:	f1a4 0010 	sub.w	r0, r4, #16
   2c1ee:	f019 fb12 	bl	45816 <bt_le_adv_set_enable_legacy>
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   2c1f2:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   2c1f4:	b928      	cbnz	r0, 2c202 <bt_le_adv_resume+0x4a>
	bt_conn_unref(conn);
   2c1f6:	4630      	mov	r0, r6
	if (persist_paused) {
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   2c1f8:	b002      	add	sp, #8
   2c1fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   2c1fe:	f019 bc00 	b.w	45a02 <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2c202:	4629      	mov	r1, r5
   2c204:	4630      	mov	r0, r6
   2c206:	f000 fa9b 	bl	2c740 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c20a:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   2c20e:	4620      	mov	r0, r4
   2c210:	f019 f9f5 	bl	455fe <atomic_and>
   2c214:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   2c216:	4630      	mov	r0, r6
   2c218:	f019 fbf3 	bl	45a02 <bt_conn_unref>
	if (persist_paused) {
   2c21c:	04ab      	lsls	r3, r5, #18
   2c21e:	d50b      	bpl.n	2c238 <bt_le_adv_resume+0x80>
   2c220:	f3bf 8f5b 	dmb	ish
   2c224:	e854 3f00 	ldrex	r3, [r4]
   2c228:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   2c22c:	e844 3200 	strex	r2, r3, [r4]
   2c230:	2a00      	cmp	r2, #0
   2c232:	d1f7      	bne.n	2c224 <bt_le_adv_resume+0x6c>
   2c234:	f3bf 8f5b 	dmb	ish
}
   2c238:	b002      	add	sp, #8
   2c23a:	bd70      	pop	{r4, r5, r6, pc}
   2c23c:	20000028 	.word	0x20000028

0002c240 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   2c240:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   2c242:	4904      	ldr	r1, [pc, #16]	; (2c254 <bt_pub_key_is_debug+0x14>)
   2c244:	2240      	movs	r2, #64	; 0x40
   2c246:	f018 fc2c 	bl	44aa2 <memcmp>
}
   2c24a:	fab0 f080 	clz	r0, r0
   2c24e:	0940      	lsrs	r0, r0, #5
   2c250:	bd08      	pop	{r3, pc}
   2c252:	bf00      	nop
   2c254:	0004b045 	.word	0x0004b045

0002c258 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   2c258:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   2c25a:	4b31      	ldr	r3, [pc, #196]	; (2c320 <bt_pub_key_gen+0xc8>)
   2c25c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   2c260:	f003 0306 	and.w	r3, r3, #6
   2c264:	2b06      	cmp	r3, #6
   2c266:	d152      	bne.n	2c30e <bt_pub_key_gen+0xb6>
			new_cb->func(debug_public_key);
			return 0;
		}
	}

	if (!new_cb) {
   2c268:	2800      	cmp	r0, #0
   2c26a:	d053      	beq.n	2c314 <bt_pub_key_gen+0xbc>
	return list->head;
   2c26c:	4e2d      	ldr	r6, [pc, #180]	; (2c324 <bt_pub_key_gen+0xcc>)
   2c26e:	6832      	ldr	r2, [r6, #0]
		return -EINVAL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2c270:	b132      	cbz	r2, 2c280 <bt_pub_key_gen+0x28>
   2c272:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   2c274:	4283      	cmp	r3, r0
   2c276:	d050      	beq.n	2c31a <bt_pub_key_gen+0xc2>
	return node->next;
   2c278:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2c27a:	b10b      	cbz	r3, 2c280 <bt_pub_key_gen+0x28>
   2c27c:	3b04      	subs	r3, #4
   2c27e:	e7f9      	b.n	2c274 <bt_pub_key_gen+0x1c>
	parent->next = child;
   2c280:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   2c282:	6872      	ldr	r2, [r6, #4]
			BT_WARN("Callback already registered");
			return -EALREADY;
		}
	}

	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   2c284:	1d03      	adds	r3, r0, #4
	list->head = node;
   2c286:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2c288:	b902      	cbnz	r2, 2c28c <bt_pub_key_gen+0x34>
	list->tail = node;
   2c28a:	6073      	str	r3, [r6, #4]
   2c28c:	4c26      	ldr	r4, [pc, #152]	; (2c328 <bt_pub_key_gen+0xd0>)
   2c28e:	f3bf 8f5b 	dmb	ish
   2c292:	e854 2f00 	ldrex	r2, [r4]
   2c296:	f042 0310 	orr.w	r3, r2, #16
   2c29a:	e844 3100 	strex	r1, r3, [r4]
   2c29e:	2900      	cmp	r1, #0
   2c2a0:	d1f7      	bne.n	2c292 <bt_pub_key_gen+0x3a>
   2c2a2:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   2c2a6:	f012 0210 	ands.w	r2, r2, #16
   2c2aa:	d002      	beq.n	2c2b2 <bt_pub_key_gen+0x5a>

		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
   2c2ac:	2500      	movs	r5, #0
}
   2c2ae:	4628      	mov	r0, r5
   2c2b0:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c2b2:	f3bf 8f5b 	dmb	ish
   2c2b6:	e854 3f00 	ldrex	r3, [r4]
   2c2ba:	f023 0308 	bic.w	r3, r3, #8
   2c2be:	e844 3100 	strex	r1, r3, [r4]
   2c2c2:	2900      	cmp	r1, #0
   2c2c4:	d1f7      	bne.n	2c2b6 <bt_pub_key_gen+0x5e>
   2c2c6:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   2c2ca:	4611      	mov	r1, r2
   2c2cc:	f242 0025 	movw	r0, #8229	; 0x2025
   2c2d0:	f7fe ff1e 	bl	2b110 <bt_hci_cmd_send_sync>
	if (err) {
   2c2d4:	4605      	mov	r5, r0
   2c2d6:	2800      	cmp	r0, #0
   2c2d8:	d0e8      	beq.n	2c2ac <bt_pub_key_gen+0x54>
   2c2da:	f3bf 8f5b 	dmb	ish
   2c2de:	e854 3f00 	ldrex	r3, [r4]
   2c2e2:	f023 0310 	bic.w	r3, r3, #16
   2c2e6:	e844 3200 	strex	r2, r3, [r4]
   2c2ea:	2a00      	cmp	r2, #0
   2c2ec:	d1f7      	bne.n	2c2de <bt_pub_key_gen+0x86>
   2c2ee:	f3bf 8f5b 	dmb	ish
	return list->head;
   2c2f2:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2c2f4:	b13c      	cbz	r4, 2c306 <bt_pub_key_gen+0xae>
			if (cb->func) {
   2c2f6:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2c2fa:	3c04      	subs	r4, #4
			if (cb->func) {
   2c2fc:	b10b      	cbz	r3, 2c302 <bt_pub_key_gen+0xaa>
				cb->func(NULL);
   2c2fe:	2000      	movs	r0, #0
   2c300:	4798      	blx	r3
	return node->next;
   2c302:	6864      	ldr	r4, [r4, #4]
   2c304:	e7f6      	b.n	2c2f4 <bt_pub_key_gen+0x9c>
	list->head = NULL;
   2c306:	2300      	movs	r3, #0
	list->tail = NULL;
   2c308:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   2c30c:	e7cf      	b.n	2c2ae <bt_pub_key_gen+0x56>
		return -ENOTSUP;
   2c30e:	f06f 0585 	mvn.w	r5, #133	; 0x85
   2c312:	e7cc      	b.n	2c2ae <bt_pub_key_gen+0x56>
		return -EINVAL;
   2c314:	f06f 0515 	mvn.w	r5, #21
   2c318:	e7c9      	b.n	2c2ae <bt_pub_key_gen+0x56>
			return -EALREADY;
   2c31a:	f06f 0577 	mvn.w	r5, #119	; 0x77
   2c31e:	e7c6      	b.n	2c2ae <bt_pub_key_gen+0x56>
   2c320:	20000000 	.word	0x20000000
   2c324:	20001c14 	.word	0x20001c14
   2c328:	200000cc 	.word	0x200000cc

0002c32c <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c32c:	4b05      	ldr	r3, [pc, #20]	; (2c344 <bt_pub_key_get+0x18>)
   2c32e:	f3bf 8f5b 	dmb	ish
   2c332:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   2c334:	4804      	ldr	r0, [pc, #16]	; (2c348 <bt_pub_key_get+0x1c>)
   2c336:	f3bf 8f5b 	dmb	ish
	return NULL;
   2c33a:	f013 0f08 	tst.w	r3, #8
}
   2c33e:	bf08      	it	eq
   2c340:	2000      	moveq	r0, #0
   2c342:	4770      	bx	lr
   2c344:	200000cc 	.word	0x200000cc
   2c348:	20003bce 	.word	0x20003bce

0002c34c <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   2c34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   2c34e:	4d1f      	ldr	r5, [pc, #124]	; (2c3cc <bt_dh_key_gen+0x80>)
   2c350:	682b      	ldr	r3, [r5, #0]
   2c352:	428b      	cmp	r3, r1
{
   2c354:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   2c356:	d032      	beq.n	2c3be <bt_dh_key_gen+0x72>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   2c358:	b113      	cbz	r3, 2c360 <bt_dh_key_gen+0x14>
		return -EBUSY;
   2c35a:	f06f 000f 	mvn.w	r0, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   2c35e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c360:	4b1b      	ldr	r3, [pc, #108]	; (2c3d0 <bt_dh_key_gen+0x84>)
   2c362:	f3bf 8f5b 	dmb	ish
   2c366:	681a      	ldr	r2, [r3, #0]
   2c368:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   2c36c:	f3c2 1700 	ubfx	r7, r2, #4, #1
   2c370:	06d2      	lsls	r2, r2, #27
   2c372:	d4f2      	bmi.n	2c35a <bt_dh_key_gen+0xe>
   2c374:	f3bf 8f5b 	dmb	ish
   2c378:	681b      	ldr	r3, [r3, #0]
   2c37a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   2c37e:	071b      	lsls	r3, r3, #28
   2c380:	d520      	bpl.n	2c3c4 <bt_dh_key_gen+0x78>
	dh_key_cb = cb;
   2c382:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   2c384:	f242 0026 	movw	r0, #8230	; 0x2026
   2c388:	2140      	movs	r1, #64	; 0x40
   2c38a:	f7fe fe65 	bl	2b058 <bt_hci_cmd_create>
	if (!buf) {
   2c38e:	4604      	mov	r4, r0
   2c390:	b190      	cbz	r0, 2c3b8 <bt_dh_key_gen+0x6c>
	return net_buf_simple_add(&buf->b, len);
   2c392:	2140      	movs	r1, #64	; 0x40
   2c394:	3008      	adds	r0, #8
   2c396:	f01b fac7 	bl	47928 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   2c39a:	2240      	movs	r2, #64	; 0x40
   2c39c:	4631      	mov	r1, r6
   2c39e:	f018 fb90 	bl	44ac2 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   2c3a2:	463a      	mov	r2, r7
   2c3a4:	4621      	mov	r1, r4
   2c3a6:	f242 0026 	movw	r0, #8230	; 0x2026
   2c3aa:	f7fe feb1 	bl	2b110 <bt_hci_cmd_send_sync>
	if (err) {
   2c3ae:	2800      	cmp	r0, #0
   2c3b0:	d0d5      	beq.n	2c35e <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   2c3b2:	2300      	movs	r3, #0
   2c3b4:	602b      	str	r3, [r5, #0]
		return err;
   2c3b6:	e7d2      	b.n	2c35e <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   2c3b8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c3bc:	e7f9      	b.n	2c3b2 <bt_dh_key_gen+0x66>
		return -EALREADY;
   2c3be:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2c3c2:	e7cc      	b.n	2c35e <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   2c3c4:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   2c3c8:	e7c9      	b.n	2c35e <bt_dh_key_gen+0x12>
   2c3ca:	bf00      	nop
   2c3cc:	20001c10 	.word	0x20001c10
   2c3d0:	200000cc 	.word	0x200000cc

0002c3d4 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   2c3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c3d6:	4c1b      	ldr	r4, [pc, #108]	; (2c444 <bt_hci_evt_le_pkey_complete+0x70>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   2c3d8:	6886      	ldr	r6, [r0, #8]
   2c3da:	f3bf 8f5b 	dmb	ish
   2c3de:	e854 3f00 	ldrex	r3, [r4]
   2c3e2:	f023 0310 	bic.w	r3, r3, #16
   2c3e6:	e844 3200 	strex	r2, r3, [r4]
   2c3ea:	2a00      	cmp	r2, #0
   2c3ec:	d1f7      	bne.n	2c3de <bt_hci_evt_le_pkey_complete+0xa>
   2c3ee:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   2c3f2:	7833      	ldrb	r3, [r6, #0]
   2c3f4:	b983      	cbnz	r3, 2c418 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   2c3f6:	4814      	ldr	r0, [pc, #80]	; (2c448 <bt_hci_evt_le_pkey_complete+0x74>)
   2c3f8:	2240      	movs	r2, #64	; 0x40
   2c3fa:	1c71      	adds	r1, r6, #1
   2c3fc:	f018 fb61 	bl	44ac2 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c400:	f3bf 8f5b 	dmb	ish
   2c404:	e854 3f00 	ldrex	r3, [r4]
   2c408:	f043 0308 	orr.w	r3, r3, #8
   2c40c:	e844 3200 	strex	r2, r3, [r4]
   2c410:	2a00      	cmp	r2, #0
   2c412:	d1f7      	bne.n	2c404 <bt_hci_evt_le_pkey_complete+0x30>
   2c414:	f3bf 8f5b 	dmb	ish
	return list->head;
   2c418:	4d0c      	ldr	r5, [pc, #48]	; (2c44c <bt_hci_evt_le_pkey_complete+0x78>)
   2c41a:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2c41c:	b16c      	cbz	r4, 2c43a <bt_hci_evt_le_pkey_complete+0x66>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   2c41e:	4f0a      	ldr	r7, [pc, #40]	; (2c448 <bt_hci_evt_le_pkey_complete+0x74>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2c420:	3c04      	subs	r4, #4
		if (cb->func) {
   2c422:	6823      	ldr	r3, [r4, #0]
   2c424:	b12b      	cbz	r3, 2c432 <bt_hci_evt_le_pkey_complete+0x5e>
			cb->func(evt->status ? NULL : pub_key);
   2c426:	7832      	ldrb	r2, [r6, #0]
   2c428:	2a00      	cmp	r2, #0
   2c42a:	bf0c      	ite	eq
   2c42c:	4638      	moveq	r0, r7
   2c42e:	2000      	movne	r0, #0
   2c430:	4798      	blx	r3
	return node->next;
   2c432:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2c434:	b10c      	cbz	r4, 2c43a <bt_hci_evt_le_pkey_complete+0x66>
   2c436:	3c04      	subs	r4, #4
   2c438:	e7f3      	b.n	2c422 <bt_hci_evt_le_pkey_complete+0x4e>
	list->head = NULL;
   2c43a:	2300      	movs	r3, #0
	list->tail = NULL;
   2c43c:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   2c440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c442:	bf00      	nop
   2c444:	200000cc 	.word	0x200000cc
   2c448:	20003bce 	.word	0x20003bce
   2c44c:	20001c14 	.word	0x20001c14

0002c450 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   2c450:	4905      	ldr	r1, [pc, #20]	; (2c468 <bt_hci_evt_le_dhkey_complete+0x18>)
   2c452:	680b      	ldr	r3, [r1, #0]
   2c454:	b133      	cbz	r3, 2c464 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   2c456:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   2c458:	2000      	movs	r0, #0
   2c45a:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   2c45c:	7811      	ldrb	r1, [r2, #0]
   2c45e:	b901      	cbnz	r1, 2c462 <bt_hci_evt_le_dhkey_complete+0x12>
   2c460:	1c50      	adds	r0, r2, #1
   2c462:	4718      	bx	r3
	}
}
   2c464:	4770      	bx	lr
   2c466:	bf00      	nop
   2c468:	20001c10 	.word	0x20001c10

0002c46c <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   2c46c:	2300      	movs	r3, #0
	tx->user_data = NULL;
   2c46e:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   2c472:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   2c474:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   2c476:	4801      	ldr	r0, [pc, #4]	; (2c47c <tx_free+0x10>)
   2c478:	f01c b915 	b.w	486a6 <k_queue_append>
   2c47c:	20000bd4 	.word	0x20000bd4

0002c480 <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   2c480:	4b0e      	ldr	r3, [pc, #56]	; (2c4bc <notify_connected+0x3c>)
{
   2c482:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   2c484:	681d      	ldr	r5, [r3, #0]
{
   2c486:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   2c488:	b955      	cbnz	r5, 2c4a0 <notify_connected+0x20>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2c48a:	4d0d      	ldr	r5, [pc, #52]	; (2c4c0 <notify_connected+0x40>)
   2c48c:	4e0d      	ldr	r6, [pc, #52]	; (2c4c4 <notify_connected+0x44>)
		if (cb->connected) {
			cb->connected(conn, conn->err);
   2c48e:	7b21      	ldrb	r1, [r4, #12]
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2c490:	42b5      	cmp	r5, r6
   2c492:	d30c      	bcc.n	2c4ae <notify_connected+0x2e>
		}
	}

	if (!conn->err) {
   2c494:	b989      	cbnz	r1, 2c4ba <notify_connected+0x3a>
		bt_gatt_connected(conn);
   2c496:	4620      	mov	r0, r4
	}
}
   2c498:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_gatt_connected(conn);
   2c49c:	f002 b956 	b.w	2e74c <bt_gatt_connected>
		if (cb->connected) {
   2c4a0:	682b      	ldr	r3, [r5, #0]
   2c4a2:	b113      	cbz	r3, 2c4aa <notify_connected+0x2a>
			cb->connected(conn, conn->err);
   2c4a4:	7b21      	ldrb	r1, [r4, #12]
   2c4a6:	4620      	mov	r0, r4
   2c4a8:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2c4aa:	69ed      	ldr	r5, [r5, #28]
   2c4ac:	e7ec      	b.n	2c488 <notify_connected+0x8>
		if (cb->connected) {
   2c4ae:	682b      	ldr	r3, [r5, #0]
   2c4b0:	b10b      	cbz	r3, 2c4b6 <notify_connected+0x36>
			cb->connected(conn, conn->err);
   2c4b2:	4620      	mov	r0, r4
   2c4b4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2c4b6:	3520      	adds	r5, #32
   2c4b8:	e7e9      	b.n	2c48e <notify_connected+0xe>
}
   2c4ba:	bd70      	pop	{r4, r5, r6, pc}
   2c4bc:	20001c4c 	.word	0x20001c4c
   2c4c0:	000492e0 	.word	0x000492e0
   2c4c4:	000492e0 	.word	0x000492e0

0002c4c8 <send_frag>:
{
   2c4c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   2c4cc:	694d      	ldr	r5, [r1, #20]
{
   2c4ce:	4604      	mov	r4, r0
   2c4d0:	460e      	mov	r6, r1
   2c4d2:	4617      	mov	r7, r2
   2c4d4:	4699      	mov	r9, r3
	return z_impl_k_sem_take(sem, timeout);
   2c4d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c4da:	4844      	ldr	r0, [pc, #272]	; (2c5ec <send_frag+0x124>)
   2c4dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c4e0:	f015 f866 	bl	415b0 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   2c4e4:	7b63      	ldrb	r3, [r4, #13]
   2c4e6:	2b07      	cmp	r3, #7
   2c4e8:	d174      	bne.n	2c5d4 <send_frag+0x10c>
	__asm__ volatile(
   2c4ea:	f04f 0320 	mov.w	r3, #32
   2c4ee:	f3ef 8111 	mrs	r1, BASEPRI
   2c4f2:	f383 8812 	msr	BASEPRI_MAX, r3
   2c4f6:	f3bf 8f6f 	isb	sy
	if (tx) {
   2c4fa:	69a2      	ldr	r2, [r4, #24]
   2c4fc:	2d00      	cmp	r5, #0
   2c4fe:	d043      	beq.n	2c588 <send_frag+0xc0>
	parent->next = child;
   2c500:	2300      	movs	r3, #0
   2c502:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   2c504:	2a00      	cmp	r2, #0
   2c506:	d13c      	bne.n	2c582 <send_frag+0xba>
	list->head = node;
   2c508:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   2c50c:	f381 8811 	msr	BASEPRI, r1
   2c510:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   2c514:	2104      	movs	r1, #4
   2c516:	f106 0008 	add.w	r0, r6, #8
   2c51a:	f01b fa1c 	bl	47956 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   2c51e:	8823      	ldrh	r3, [r4, #0]
   2c520:	f007 07fd 	and.w	r7, r7, #253	; 0xfd
   2c524:	ea43 3707 	orr.w	r7, r3, r7, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2c528:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   2c52a:	8007      	strh	r7, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2c52c:	3b04      	subs	r3, #4
   2c52e:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2c530:	2302      	movs	r3, #2
   2c532:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   2c534:	4630      	mov	r0, r6
   2c536:	f018 ff58 	bl	453ea <bt_send>
	if (err) {
   2c53a:	2800      	cmp	r0, #0
   2c53c:	d054      	beq.n	2c5e8 <send_frag+0x120>
	__asm__ volatile(
   2c53e:	f04f 0320 	mov.w	r3, #32
   2c542:	f3ef 8111 	mrs	r1, BASEPRI
   2c546:	f383 8812 	msr	BASEPRI_MAX, r3
   2c54a:	f3bf 8f6f 	isb	sy
		if (tx) {
   2c54e:	b37d      	cbz	r5, 2c5b0 <send_frag+0xe8>
	return list->head;
   2c550:	6962      	ldr	r2, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c552:	2300      	movs	r3, #0
   2c554:	b152      	cbz	r2, 2c56c <send_frag+0xa4>
   2c556:	4295      	cmp	r5, r2
   2c558:	d127      	bne.n	2c5aa <send_frag+0xe2>
	return node->next;
   2c55a:	682a      	ldr	r2, [r5, #0]
	return list->tail;
   2c55c:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
   2c55e:	b9fb      	cbnz	r3, 2c5a0 <send_frag+0xd8>
   2c560:	42a8      	cmp	r0, r5
	list->head = node;
   2c562:	6162      	str	r2, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   2c564:	d100      	bne.n	2c568 <send_frag+0xa0>
	list->tail = node;
   2c566:	61a2      	str	r2, [r4, #24]
	parent->next = child;
   2c568:	2300      	movs	r3, #0
   2c56a:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   2c56c:	f381 8811 	msr	BASEPRI, r1
   2c570:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   2c574:	481d      	ldr	r0, [pc, #116]	; (2c5ec <send_frag+0x124>)
   2c576:	f014 fff5 	bl	41564 <z_impl_k_sem_give>
		tx_free(tx);
   2c57a:	4628      	mov	r0, r5
   2c57c:	f7ff ff76 	bl	2c46c <tx_free>
   2c580:	e022      	b.n	2c5c8 <send_frag+0x100>
   2c582:	6015      	str	r5, [r2, #0]
	list->tail = node;
   2c584:	61a5      	str	r5, [r4, #24]
}
   2c586:	e7c1      	b.n	2c50c <send_frag+0x44>
		if (tail_tx) {
   2c588:	b132      	cbz	r2, 2c598 <send_frag+0xd0>
			pending_no_cb = &tail_tx->pending_no_cb;
   2c58a:	68d3      	ldr	r3, [r2, #12]
   2c58c:	f102 080c 	add.w	r8, r2, #12
		(*pending_no_cb)++;
   2c590:	3301      	adds	r3, #1
   2c592:	f8c8 3000 	str.w	r3, [r8]
   2c596:	e7b9      	b.n	2c50c <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   2c598:	69e3      	ldr	r3, [r4, #28]
   2c59a:	f104 081c 	add.w	r8, r4, #28
   2c59e:	e7f7      	b.n	2c590 <send_frag+0xc8>
Z_GENLIST_REMOVE(slist, snode)
   2c5a0:	42a8      	cmp	r0, r5
	parent->next = child;
   2c5a2:	601a      	str	r2, [r3, #0]
	list->tail = node;
   2c5a4:	bf08      	it	eq
   2c5a6:	61a3      	streq	r3, [r4, #24]
}
   2c5a8:	e7de      	b.n	2c568 <send_frag+0xa0>
	return node->next;
   2c5aa:	4613      	mov	r3, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c5ac:	6812      	ldr	r2, [r2, #0]
   2c5ae:	e7d1      	b.n	2c554 <send_frag+0x8c>
			(*pending_no_cb)--;
   2c5b0:	f8d8 3000 	ldr.w	r3, [r8]
   2c5b4:	3b01      	subs	r3, #1
   2c5b6:	f8c8 3000 	str.w	r3, [r8]
   2c5ba:	f381 8811 	msr	BASEPRI, r1
   2c5be:	f3bf 8f6f 	isb	sy
   2c5c2:	480a      	ldr	r0, [pc, #40]	; (2c5ec <send_frag+0x124>)
   2c5c4:	f014 ffce 	bl	41564 <z_impl_k_sem_give>
	if (always_consume) {
   2c5c8:	f1b9 0f00 	cmp.w	r9, #0
   2c5cc:	d108      	bne.n	2c5e0 <send_frag+0x118>
	return false;
   2c5ce:	2000      	movs	r0, #0
}
   2c5d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2c5d4:	4805      	ldr	r0, [pc, #20]	; (2c5ec <send_frag+0x124>)
   2c5d6:	f014 ffc5 	bl	41564 <z_impl_k_sem_give>
	if (tx) {
   2c5da:	2d00      	cmp	r5, #0
   2c5dc:	d1cd      	bne.n	2c57a <send_frag+0xb2>
   2c5de:	e7f3      	b.n	2c5c8 <send_frag+0x100>
		net_buf_unref(buf);
   2c5e0:	4630      	mov	r0, r6
   2c5e2:	f010 fd61 	bl	3d0a8 <net_buf_unref>
   2c5e6:	e7f2      	b.n	2c5ce <send_frag+0x106>
	return true;
   2c5e8:	2001      	movs	r0, #1
   2c5ea:	e7f1      	b.n	2c5d0 <send_frag+0x108>
   2c5ec:	20000100 	.word	0x20000100

0002c5f0 <bt_conn_get_pkts>:
}
   2c5f0:	4800      	ldr	r0, [pc, #0]	; (2c5f4 <bt_conn_get_pkts+0x4>)
   2c5f2:	4770      	bx	lr
   2c5f4:	20000100 	.word	0x20000100

0002c5f8 <bt_conn_new>:
{
   2c5f8:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   2c5fa:	2200      	movs	r2, #0
   2c5fc:	4604      	mov	r4, r0
   2c5fe:	428a      	cmp	r2, r1
   2c600:	d102      	bne.n	2c608 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   2c602:	2400      	movs	r4, #0
}
   2c604:	4620      	mov	r0, r4
   2c606:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2c608:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
   2c60c:	2001      	movs	r0, #1
   2c60e:	f3bf 8f5b 	dmb	ish
   2c612:	e853 5f00 	ldrex	r5, [r3]
   2c616:	2d00      	cmp	r5, #0
   2c618:	d104      	bne.n	2c624 <bt_conn_new+0x2c>
   2c61a:	e843 0c00 	strex	ip, r0, [r3]
   2c61e:	f1bc 0f00 	cmp.w	ip, #0
   2c622:	d1f6      	bne.n	2c612 <bt_conn_new+0x1a>
   2c624:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   2c628:	d002      	beq.n	2c630 <bt_conn_new+0x38>
   2c62a:	34c0      	adds	r4, #192	; 0xc0
	for (i = 0; i < size; i++) {
   2c62c:	4402      	add	r2, r0
   2c62e:	e7e6      	b.n	2c5fe <bt_conn_new+0x6>
	if (!conn) {
   2c630:	2c00      	cmp	r4, #0
   2c632:	d0e6      	beq.n	2c602 <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   2c634:	22bc      	movs	r2, #188	; 0xbc
   2c636:	2100      	movs	r1, #0
   2c638:	4620      	mov	r0, r4
   2c63a:	f018 fa4d 	bl	44ad8 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   2c63e:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2c642:	4904      	ldr	r1, [pc, #16]	; (2c654 <bt_conn_new+0x5c>)
   2c644:	f01c f929 	bl	4889a <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   2c648:	4903      	ldr	r1, [pc, #12]	; (2c658 <bt_conn_new+0x60>)
   2c64a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2c64e:	f01c f8fe 	bl	4884e <k_work_init>
	return conn;
   2c652:	e7d7      	b.n	2c604 <bt_conn_new+0xc>
   2c654:	0002cbe1 	.word	0x0002cbe1
   2c658:	000458df 	.word	0x000458df

0002c65c <bt_conn_send_cb>:
{
   2c65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c65e:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   2c660:	7b43      	ldrb	r3, [r0, #13]
   2c662:	2b07      	cmp	r3, #7
{
   2c664:	4604      	mov	r4, r0
   2c666:	460e      	mov	r6, r1
   2c668:	4615      	mov	r5, r2
	if (conn->state != BT_CONN_CONNECTED) {
   2c66a:	d114      	bne.n	2c696 <bt_conn_send_cb+0x3a>
	if (cb) {
   2c66c:	b312      	cbz	r2, 2c6b4 <bt_conn_send_cb+0x58>
	return z_impl_z_current_get();
   2c66e:	f015 fc83 	bl	41f78 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   2c672:	4b13      	ldr	r3, [pc, #76]	; (2c6c0 <bt_conn_send_cb+0x64>)
   2c674:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   2c676:	4813      	ldr	r0, [pc, #76]	; (2c6c4 <bt_conn_send_cb+0x68>)
   2c678:	bf07      	ittee	eq
   2c67a:	2200      	moveq	r2, #0
   2c67c:	2300      	moveq	r3, #0
   2c67e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   2c682:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   2c686:	f014 ff39 	bl	414fc <z_impl_k_queue_get>
		if (!tx) {
   2c68a:	b1a8      	cbz	r0, 2c6b8 <bt_conn_send_cb+0x5c>
		if (conn->state != BT_CONN_CONNECTED) {
   2c68c:	7b63      	ldrb	r3, [r4, #13]
   2c68e:	2b07      	cmp	r3, #7
   2c690:	d004      	beq.n	2c69c <bt_conn_send_cb+0x40>
			tx_free(tx);
   2c692:	f7ff feeb 	bl	2c46c <tx_free>
		return -ENOTCONN;
   2c696:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   2c69a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx->user_data = user_data;
   2c69c:	e9c0 5701 	strd	r5, r7, [r0, #4]
		tx->pending_no_cb = 0U;
   2c6a0:	2300      	movs	r3, #0
   2c6a2:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   2c6a4:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
   2c6a6:	4631      	mov	r1, r6
   2c6a8:	f104 0038 	add.w	r0, r4, #56	; 0x38
   2c6ac:	f01b f8fd 	bl	478aa <net_buf_put>
	return 0;
   2c6b0:	2000      	movs	r0, #0
   2c6b2:	e7f2      	b.n	2c69a <bt_conn_send_cb+0x3e>
   2c6b4:	4610      	mov	r0, r2
   2c6b6:	e7f5      	b.n	2c6a4 <bt_conn_send_cb+0x48>
			return -ENOBUFS;
   2c6b8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c6bc:	e7ed      	b.n	2c69a <bt_conn_send_cb+0x3e>
   2c6be:	bf00      	nop
   2c6c0:	200018c0 	.word	0x200018c0
   2c6c4:	20000bd4 	.word	0x20000bd4

0002c6c8 <bt_conn_prepare_events>:
	conn_change.signaled = 0U;
   2c6c8:	4b15      	ldr	r3, [pc, #84]	; (2c720 <bt_conn_prepare_events+0x58>)
{
   2c6ca:	b570      	push	{r4, r5, r6, lr}
	conn_change.signaled = 0U;
   2c6cc:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   2c6ce:	2101      	movs	r1, #1
{
   2c6d0:	4604      	mov	r4, r0
	conn_change.signaled = 0U;
   2c6d2:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   2c6d4:	f01c fc03 	bl	48ede <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
   2c6d8:	4812      	ldr	r0, [pc, #72]	; (2c724 <bt_conn_prepare_events+0x5c>)
		if (!conn_prepare_events(conn, &events[ev_count])) {
   2c6da:	f104 0614 	add.w	r6, r4, #20
	if (!atomic_get(&conn->ref)) {
   2c6de:	f019 f8d5 	bl	4588c <atomic_get>
   2c6e2:	b908      	cbnz	r0, 2c6e8 <bt_conn_prepare_events+0x20>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   2c6e4:	2001      	movs	r0, #1
}
   2c6e6:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   2c6e8:	4d0f      	ldr	r5, [pc, #60]	; (2c728 <bt_conn_prepare_events+0x60>)
   2c6ea:	7b6b      	ldrb	r3, [r5, #13]
   2c6ec:	b953      	cbnz	r3, 2c704 <bt_conn_prepare_events+0x3c>
   2c6ee:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2c6f2:	1d28      	adds	r0, r5, #4
   2c6f4:	f019 f8bb 	bl	4586e <atomic_and>
   2c6f8:	0643      	lsls	r3, r0, #25
   2c6fa:	d503      	bpl.n	2c704 <bt_conn_prepare_events+0x3c>
		conn_cleanup(conn);
   2c6fc:	4628      	mov	r0, r5
   2c6fe:	f019 f8fa 	bl	458f6 <conn_cleanup>
		return -ENOTCONN;
   2c702:	e7ef      	b.n	2c6e4 <bt_conn_prepare_events+0x1c>
	if (conn->state != BT_CONN_CONNECTED) {
   2c704:	7b6b      	ldrb	r3, [r5, #13]
   2c706:	2b07      	cmp	r3, #7
   2c708:	d1ec      	bne.n	2c6e4 <bt_conn_prepare_events+0x1c>
	k_poll_event_init(&events[0],
   2c70a:	4b08      	ldr	r3, [pc, #32]	; (2c72c <bt_conn_prepare_events+0x64>)
   2c70c:	4630      	mov	r0, r6
   2c70e:	2200      	movs	r2, #0
   2c710:	2104      	movs	r1, #4
   2c712:	f01c fbe4 	bl	48ede <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   2c716:	2301      	movs	r3, #1
   2c718:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   2c71c:	2002      	movs	r0, #2
	return ev_count;
   2c71e:	e7e2      	b.n	2c6e6 <bt_conn_prepare_events+0x1e>
   2c720:	20000388 	.word	0x20000388
   2c724:	20000fe4 	.word	0x20000fe4
   2c728:	20000f28 	.word	0x20000f28
   2c72c:	20000f60 	.word	0x20000f60

0002c730 <bt_conn_lookup_handle>:
{
   2c730:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   2c732:	2101      	movs	r1, #1
   2c734:	4801      	ldr	r0, [pc, #4]	; (2c73c <bt_conn_lookup_handle+0xc>)
   2c736:	f019 b97d 	b.w	45a34 <conn_lookup_handle>
   2c73a:	bf00      	nop
   2c73c:	20000f28 	.word	0x20000f28

0002c740 <bt_conn_set_state>:
{
   2c740:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   2c742:	7b45      	ldrb	r5, [r0, #13]
   2c744:	428d      	cmp	r5, r1
{
   2c746:	4604      	mov	r4, r0
	if (conn->state == state) {
   2c748:	f000 8084 	beq.w	2c854 <bt_conn_set_state+0x114>
	conn->state = state;
   2c74c:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   2c74e:	b925      	cbnz	r5, 2c75a <bt_conn_set_state+0x1a>
		if (conn->type != BT_CONN_TYPE_ISO) {
   2c750:	7883      	ldrb	r3, [r0, #2]
   2c752:	2b08      	cmp	r3, #8
   2c754:	d001      	beq.n	2c75a <bt_conn_set_state+0x1a>
			bt_conn_ref(conn);
   2c756:	f019 f939 	bl	459cc <bt_conn_ref>
	switch (conn->state) {
   2c75a:	7b63      	ldrb	r3, [r4, #13]
   2c75c:	2b01      	cmp	r3, #1
   2c75e:	d116      	bne.n	2c78e <bt_conn_set_state+0x4e>
	z_impl_k_sem_give(sem);
   2c760:	4d4b      	ldr	r5, [pc, #300]	; (2c890 <bt_conn_set_state+0x150>)
		tx->pending_no_cb = 0U;
   2c762:	2600      	movs	r6, #0
	__asm__ volatile(
   2c764:	f04f 0220 	mov.w	r2, #32
   2c768:	f3ef 8311 	mrs	r3, BASEPRI
   2c76c:	f382 8812 	msr	BASEPRI_MAX, r2
   2c770:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   2c774:	69e2      	ldr	r2, [r4, #28]
   2c776:	2a00      	cmp	r2, #0
   2c778:	d066      	beq.n	2c848 <bt_conn_set_state+0x108>
			conn->pending_no_cb--;
   2c77a:	3a01      	subs	r2, #1
   2c77c:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   2c77e:	f383 8811 	msr	BASEPRI, r3
   2c782:	f3bf 8f6f 	isb	sy
   2c786:	4628      	mov	r0, r5
   2c788:	f014 feec 	bl	41564 <z_impl_k_sem_give>
}
   2c78c:	e7ea      	b.n	2c764 <bt_conn_set_state+0x24>
	switch (conn->state) {
   2c78e:	2b07      	cmp	r3, #7
   2c790:	d009      	beq.n	2c7a6 <bt_conn_set_state+0x66>
   2c792:	2b00      	cmp	r3, #0
   2c794:	d15e      	bne.n	2c854 <bt_conn_set_state+0x114>
		if (conn->type == BT_CONN_TYPE_SCO) {
   2c796:	78a3      	ldrb	r3, [r4, #2]
   2c798:	2b04      	cmp	r3, #4
   2c79a:	d11e      	bne.n	2c7da <bt_conn_set_state+0x9a>
			bt_conn_unref(conn);
   2c79c:	4620      	mov	r0, r4
}
   2c79e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   2c7a2:	f019 b92e 	b.w	45a02 <bt_conn_unref>
		if (conn->type == BT_CONN_TYPE_SCO) {
   2c7a6:	78a3      	ldrb	r3, [r4, #2]
   2c7a8:	2b04      	cmp	r3, #4
   2c7aa:	d053      	beq.n	2c854 <bt_conn_set_state+0x114>
	z_impl_k_queue_init(queue);
   2c7ac:	f104 0038 	add.w	r0, r4, #56	; 0x38
   2c7b0:	f01b ff6d 	bl	4868e <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   2c7b4:	4837      	ldr	r0, [pc, #220]	; (2c894 <bt_conn_set_state+0x154>)
   2c7b6:	2100      	movs	r1, #0
   2c7b8:	f015 fe9e 	bl	424f8 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   2c7bc:	2300      	movs	r3, #0
	list->tail = NULL;
   2c7be:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2c7c2:	78e3      	ldrb	r3, [r4, #3]
   2c7c4:	2b01      	cmp	r3, #1
   2c7c6:	d145      	bne.n	2c854 <bt_conn_set_state+0x114>
			k_work_schedule(&conn->deferred_work,
   2c7c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2c7cc:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
   2c7d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   2c7d4:	2300      	movs	r3, #0
   2c7d6:	f015 b8b1 	b.w	4193c <k_work_schedule>
		switch (old_state) {
   2c7da:	3d01      	subs	r5, #1
   2c7dc:	2d05      	cmp	r5, #5
   2c7de:	d839      	bhi.n	2c854 <bt_conn_set_state+0x114>
   2c7e0:	a301      	add	r3, pc, #4	; (adr r3, 2c7e8 <bt_conn_set_state+0xa8>)
   2c7e2:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   2c7e6:	bf00      	nop
   2c7e8:	0002c801 	.word	0x0002c801
   2c7ec:	0002c83b 	.word	0x0002c83b
   2c7f0:	0002c79d 	.word	0x0002c79d
   2c7f4:	0002c79d 	.word	0x0002c79d
   2c7f8:	0002c83b 	.word	0x0002c83b
   2c7fc:	0002c83b 	.word	0x0002c83b
			tx_notify(conn);
   2c800:	4620      	mov	r0, r4
   2c802:	f019 f849 	bl	45898 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   2c806:	78a3      	ldrb	r3, [r4, #2]
   2c808:	2b01      	cmp	r3, #1
   2c80a:	d103      	bne.n	2c814 <bt_conn_set_state+0xd4>
				k_work_cancel_delayable(&conn->deferred_work);
   2c80c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2c810:	f01c f84f 	bl	488b2 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c814:	f3bf 8f5b 	dmb	ish
   2c818:	3404      	adds	r4, #4
   2c81a:	e854 3f00 	ldrex	r3, [r4]
   2c81e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2c822:	e844 3200 	strex	r2, r3, [r4]
   2c826:	2a00      	cmp	r2, #0
   2c828:	d1f7      	bne.n	2c81a <bt_conn_set_state+0xda>
   2c82a:	f3bf 8f5b 	dmb	ish
   2c82e:	4819      	ldr	r0, [pc, #100]	; (2c894 <bt_conn_set_state+0x154>)
}
   2c830:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2c834:	2100      	movs	r1, #0
   2c836:	f015 be5f 	b.w	424f8 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   2c83a:	7b23      	ldrb	r3, [r4, #12]
   2c83c:	2b00      	cmp	r3, #0
   2c83e:	d0ad      	beq.n	2c79c <bt_conn_set_state+0x5c>
				notify_connected(conn);
   2c840:	4620      	mov	r0, r4
   2c842:	f7ff fe1d 	bl	2c480 <notify_connected>
   2c846:	e7a9      	b.n	2c79c <bt_conn_set_state+0x5c>
	return list->head;
   2c848:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   2c84a:	b920      	cbnz	r0, 2c856 <bt_conn_set_state+0x116>
   2c84c:	f383 8811 	msr	BASEPRI, r3
   2c850:	f3bf 8f6f 	isb	sy
}
   2c854:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2c856:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   2c858:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2c85a:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2c85c:	4288      	cmp	r0, r1
	list->tail = node;
   2c85e:	bf08      	it	eq
   2c860:	61a2      	streq	r2, [r4, #24]
   2c862:	f383 8811 	msr	BASEPRI, r3
   2c866:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2c86a:	f04f 0220 	mov.w	r2, #32
   2c86e:	f3ef 8311 	mrs	r3, BASEPRI
   2c872:	f382 8812 	msr	BASEPRI_MAX, r2
   2c876:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   2c87a:	68c2      	ldr	r2, [r0, #12]
   2c87c:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   2c87e:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   2c880:	f383 8811 	msr	BASEPRI, r3
   2c884:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   2c888:	f7ff fdf0 	bl	2c46c <tx_free>
   2c88c:	e77b      	b.n	2c786 <bt_conn_set_state+0x46>
   2c88e:	bf00      	nop
   2c890:	20000100 	.word	0x20000100
   2c894:	20000388 	.word	0x20000388

0002c898 <bt_conn_index>:
		index = conn - acl_conns;
   2c898:	4b03      	ldr	r3, [pc, #12]	; (2c8a8 <bt_conn_index+0x10>)
   2c89a:	1ac0      	subs	r0, r0, r3
   2c89c:	4b03      	ldr	r3, [pc, #12]	; (2c8ac <bt_conn_index+0x14>)
   2c89e:	1180      	asrs	r0, r0, #6
   2c8a0:	4358      	muls	r0, r3
}
   2c8a2:	b2c0      	uxtb	r0, r0
   2c8a4:	4770      	bx	lr
   2c8a6:	bf00      	nop
   2c8a8:	20000f28 	.word	0x20000f28
   2c8ac:	aaaaaaab 	.word	0xaaaaaaab

0002c8b0 <bt_conn_create_pdu_timeout>:
{
   2c8b0:	b538      	push	{r3, r4, r5, lr}
   2c8b2:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   2c8b4:	4906      	ldr	r1, [pc, #24]	; (2c8d0 <bt_conn_create_pdu_timeout+0x20>)
   2c8b6:	2800      	cmp	r0, #0
   2c8b8:	bf08      	it	eq
   2c8ba:	4608      	moveq	r0, r1
   2c8bc:	f01a ffd2 	bl	47864 <net_buf_alloc_fixed>
	if (!buf) {
   2c8c0:	4604      	mov	r4, r0
   2c8c2:	b118      	cbz	r0, 2c8cc <bt_conn_create_pdu_timeout+0x1c>
	net_buf_simple_reserve(&buf->b, reserve);
   2c8c4:	1d29      	adds	r1, r5, #4
   2c8c6:	3008      	adds	r0, #8
   2c8c8:	f01a ffeb 	bl	478a2 <net_buf_simple_reserve>
}
   2c8cc:	4620      	mov	r0, r4
   2c8ce:	bd38      	pop	{r3, r4, r5, pc}
   2c8d0:	20000c1c 	.word	0x20000c1c

0002c8d4 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   2c8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   2c8d6:	1d03      	adds	r3, r0, #4
{
   2c8d8:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2c8da:	4618      	mov	r0, r3
   2c8dc:	f018 ffd6 	bl	4588c <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   2c8e0:	0582      	lsls	r2, r0, #22
   2c8e2:	d512      	bpl.n	2c90a <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
   2c8e4:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   2c8e8:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
   2c8ec:	4291      	cmp	r1, r2
   2c8ee:	d80c      	bhi.n	2c90a <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
   2c8f0:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   2c8f4:	4291      	cmp	r1, r2
   2c8f6:	d308      	bcc.n	2c90a <notify_le_param_updated+0x36>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   2c8f8:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
   2c8fc:	4291      	cmp	r1, r2
   2c8fe:	d104      	bne.n	2c90a <notify_le_param_updated+0x36>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c900:	f46f 7100 	mvn.w	r1, #512	; 0x200
   2c904:	4618      	mov	r0, r3
   2c906:	f018 ffb2 	bl	4586e <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   2c90a:	4b10      	ldr	r3, [pc, #64]	; (2c94c <notify_le_param_updated+0x78>)
   2c90c:	681d      	ldr	r5, [r3, #0]
   2c90e:	b925      	cbnz	r5, 2c91a <notify_le_param_updated+0x46>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2c910:	4d0f      	ldr	r5, [pc, #60]	; (2c950 <notify_le_param_updated+0x7c>)
   2c912:	4f10      	ldr	r7, [pc, #64]	; (2c954 <notify_le_param_updated+0x80>)
   2c914:	42bd      	cmp	r5, r7
   2c916:	d30c      	bcc.n	2c932 <notify_le_param_updated+0x5e>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   2c918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   2c91a:	68ee      	ldr	r6, [r5, #12]
   2c91c:	b13e      	cbz	r6, 2c92e <notify_le_param_updated+0x5a>
			cb->le_param_updated(conn, conn->le.interval,
   2c91e:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   2c922:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   2c926:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   2c92a:	4620      	mov	r0, r4
   2c92c:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   2c92e:	69ed      	ldr	r5, [r5, #28]
   2c930:	e7ed      	b.n	2c90e <notify_le_param_updated+0x3a>
		if (cb->le_param_updated) {
   2c932:	68ee      	ldr	r6, [r5, #12]
   2c934:	b13e      	cbz	r6, 2c946 <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
   2c936:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   2c93a:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   2c93e:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   2c942:	4620      	mov	r0, r4
   2c944:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2c946:	3520      	adds	r5, #32
   2c948:	e7e4      	b.n	2c914 <notify_le_param_updated+0x40>
   2c94a:	bf00      	nop
   2c94c:	20001c4c 	.word	0x20001c4c
   2c950:	000492e0 	.word	0x000492e0
   2c954:	000492e0 	.word	0x000492e0

0002c958 <notify_le_phy_updated>:
}
#endif

#if defined(CONFIG_BT_USER_PHY_UPDATE)
void notify_le_phy_updated(struct bt_conn *conn)
{
   2c958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   2c95a:	4b0d      	ldr	r3, [pc, #52]	; (2c990 <notify_le_phy_updated+0x38>)
   2c95c:	681d      	ldr	r5, [r3, #0]
{
   2c95e:	4604      	mov	r4, r0
		if (cb->le_phy_updated) {
			cb->le_phy_updated(conn, &conn->le.phy);
   2c960:	f100 06b8 	add.w	r6, r0, #184	; 0xb8
	for (cb = callback_list; cb; cb = cb->_next) {
   2c964:	b935      	cbnz	r5, 2c974 <notify_le_phy_updated+0x1c>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2c966:	4d0b      	ldr	r5, [pc, #44]	; (2c994 <notify_le_phy_updated+0x3c>)
   2c968:	4e0b      	ldr	r6, [pc, #44]	; (2c998 <notify_le_phy_updated+0x40>)
		if (cb->le_phy_updated) {
			cb->le_phy_updated(conn, &conn->le.phy);
   2c96a:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2c96e:	42b5      	cmp	r5, r6
   2c970:	d307      	bcc.n	2c982 <notify_le_phy_updated+0x2a>
		}
	}
}
   2c972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_phy_updated) {
   2c974:	69ab      	ldr	r3, [r5, #24]
   2c976:	b113      	cbz	r3, 2c97e <notify_le_phy_updated+0x26>
			cb->le_phy_updated(conn, &conn->le.phy);
   2c978:	4631      	mov	r1, r6
   2c97a:	4620      	mov	r0, r4
   2c97c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2c97e:	69ed      	ldr	r5, [r5, #28]
   2c980:	e7f0      	b.n	2c964 <notify_le_phy_updated+0xc>
		if (cb->le_phy_updated) {
   2c982:	69ab      	ldr	r3, [r5, #24]
   2c984:	b113      	cbz	r3, 2c98c <notify_le_phy_updated+0x34>
			cb->le_phy_updated(conn, &conn->le.phy);
   2c986:	4639      	mov	r1, r7
   2c988:	4620      	mov	r0, r4
   2c98a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2c98c:	3520      	adds	r5, #32
   2c98e:	e7ee      	b.n	2c96e <notify_le_phy_updated+0x16>
   2c990:	20001c4c 	.word	0x20001c4c
   2c994:	000492e0 	.word	0x000492e0
   2c998:	000492e0 	.word	0x000492e0

0002c99c <le_param_req>:
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   2c99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c9a0:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   2c9a2:	4608      	mov	r0, r1
{
   2c9a4:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   2c9a6:	f018 fc98 	bl	452da <bt_le_conn_params_valid>
   2c9aa:	4605      	mov	r5, r0
   2c9ac:	b918      	cbnz	r0, 2c9b6 <le_param_req+0x1a>
		return false;
   2c9ae:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   2c9b0:	4628      	mov	r0, r5
   2c9b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   2c9b6:	4b13      	ldr	r3, [pc, #76]	; (2ca04 <le_param_req+0x68>)
   2c9b8:	681e      	ldr	r6, [r3, #0]
   2c9ba:	b946      	cbnz	r6, 2c9ce <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2c9bc:	4e12      	ldr	r6, [pc, #72]	; (2ca08 <le_param_req+0x6c>)
   2c9be:	f8df 804c 	ldr.w	r8, [pc, #76]	; 2ca0c <le_param_req+0x70>
   2c9c2:	4546      	cmp	r6, r8
   2c9c4:	d2f4      	bcs.n	2c9b0 <le_param_req+0x14>
		if (!cb->le_param_req) {
   2c9c6:	68b3      	ldr	r3, [r6, #8]
   2c9c8:	b983      	cbnz	r3, 2c9ec <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2c9ca:	3620      	adds	r6, #32
   2c9cc:	e7f9      	b.n	2c9c2 <le_param_req+0x26>
		if (!cb->le_param_req) {
   2c9ce:	68b3      	ldr	r3, [r6, #8]
   2c9d0:	b90b      	cbnz	r3, 2c9d6 <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   2c9d2:	69f6      	ldr	r6, [r6, #28]
   2c9d4:	e7f1      	b.n	2c9ba <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   2c9d6:	4621      	mov	r1, r4
   2c9d8:	4638      	mov	r0, r7
   2c9da:	4798      	blx	r3
   2c9dc:	2800      	cmp	r0, #0
   2c9de:	d0e6      	beq.n	2c9ae <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   2c9e0:	4620      	mov	r0, r4
   2c9e2:	f018 fc7a 	bl	452da <bt_le_conn_params_valid>
   2c9e6:	2800      	cmp	r0, #0
   2c9e8:	d1f3      	bne.n	2c9d2 <le_param_req+0x36>
   2c9ea:	e7e0      	b.n	2c9ae <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   2c9ec:	4621      	mov	r1, r4
   2c9ee:	4638      	mov	r0, r7
   2c9f0:	4798      	blx	r3
   2c9f2:	2800      	cmp	r0, #0
   2c9f4:	d0db      	beq.n	2c9ae <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   2c9f6:	4620      	mov	r0, r4
   2c9f8:	f018 fc6f 	bl	452da <bt_le_conn_params_valid>
   2c9fc:	2800      	cmp	r0, #0
   2c9fe:	d1e4      	bne.n	2c9ca <le_param_req+0x2e>
   2ca00:	e7d5      	b.n	2c9ae <le_param_req+0x12>
   2ca02:	bf00      	nop
   2ca04:	20001c4c 	.word	0x20001c4c
   2ca08:	000492e0 	.word	0x000492e0
   2ca0c:	000492e0 	.word	0x000492e0

0002ca10 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   2ca10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2ca14:	78c3      	ldrb	r3, [r0, #3]
{
   2ca16:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2ca18:	b973      	cbnz	r3, 2ca38 <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
   2ca1a:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   2ca1e:	4b10      	ldr	r3, [pc, #64]	; (2ca60 <bt_conn_identity_resolved+0x50>)
   2ca20:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   2ca22:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   2ca26:	b955      	cbnz	r5, 2ca3e <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2ca28:	4d0e      	ldr	r5, [pc, #56]	; (2ca64 <bt_conn_identity_resolved+0x54>)
   2ca2a:	4f0f      	ldr	r7, [pc, #60]	; (2ca68 <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   2ca2c:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2ca30:	42bd      	cmp	r5, r7
   2ca32:	d30c      	bcc.n	2ca4e <bt_conn_identity_resolved+0x3e>
		}
	}
}
   2ca34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
   2ca38:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   2ca3c:	e7ef      	b.n	2ca1e <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   2ca3e:	692b      	ldr	r3, [r5, #16]
   2ca40:	b11b      	cbz	r3, 2ca4a <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   2ca42:	463a      	mov	r2, r7
   2ca44:	4631      	mov	r1, r6
   2ca46:	4620      	mov	r0, r4
   2ca48:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2ca4a:	69ed      	ldr	r5, [r5, #28]
   2ca4c:	e7eb      	b.n	2ca26 <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   2ca4e:	692b      	ldr	r3, [r5, #16]
   2ca50:	b11b      	cbz	r3, 2ca5a <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   2ca52:	4642      	mov	r2, r8
   2ca54:	4631      	mov	r1, r6
   2ca56:	4620      	mov	r0, r4
   2ca58:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2ca5a:	3520      	adds	r5, #32
   2ca5c:	e7e8      	b.n	2ca30 <bt_conn_identity_resolved+0x20>
   2ca5e:	bf00      	nop
   2ca60:	20001c4c 	.word	0x20001c4c
   2ca64:	000492e0 	.word	0x000492e0
   2ca68:	000492e0 	.word	0x000492e0

0002ca6c <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   2ca6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   2ca6e:	7a43      	ldrb	r3, [r0, #9]
   2ca70:	7283      	strb	r3, [r0, #10]
{
   2ca72:	4604      	mov	r4, r0
   2ca74:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   2ca76:	f019 f91e 	bl	45cb6 <bt_l2cap_security_changed>

	for (cb = callback_list; cb; cb = cb->_next) {
   2ca7a:	4b0c      	ldr	r3, [pc, #48]	; (2caac <bt_conn_security_changed+0x40>)
   2ca7c:	681d      	ldr	r5, [r3, #0]
   2ca7e:	b925      	cbnz	r5, 2ca8a <bt_conn_security_changed+0x1e>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2ca80:	4d0b      	ldr	r5, [pc, #44]	; (2cab0 <bt_conn_security_changed+0x44>)
   2ca82:	4f0c      	ldr	r7, [pc, #48]	; (2cab4 <bt_conn_security_changed+0x48>)
   2ca84:	42bd      	cmp	r5, r7
   2ca86:	d308      	bcc.n	2ca9a <bt_conn_security_changed+0x2e>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   2ca88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->security_changed) {
   2ca8a:	696b      	ldr	r3, [r5, #20]
   2ca8c:	b11b      	cbz	r3, 2ca96 <bt_conn_security_changed+0x2a>
			cb->security_changed(conn, conn->sec_level, err);
   2ca8e:	7a61      	ldrb	r1, [r4, #9]
   2ca90:	4632      	mov	r2, r6
   2ca92:	4620      	mov	r0, r4
   2ca94:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2ca96:	69ed      	ldr	r5, [r5, #28]
   2ca98:	e7f1      	b.n	2ca7e <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   2ca9a:	696b      	ldr	r3, [r5, #20]
   2ca9c:	b11b      	cbz	r3, 2caa6 <bt_conn_security_changed+0x3a>
			cb->security_changed(conn, conn->sec_level, err);
   2ca9e:	7a61      	ldrb	r1, [r4, #9]
   2caa0:	4632      	mov	r2, r6
   2caa2:	4620      	mov	r0, r4
   2caa4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2caa6:	3520      	adds	r5, #32
   2caa8:	e7ec      	b.n	2ca84 <bt_conn_security_changed+0x18>
   2caaa:	bf00      	nop
   2caac:	20001c4c 	.word	0x20001c4c
   2cab0:	000492e0 	.word	0x000492e0
   2cab4:	000492e0 	.word	0x000492e0

0002cab8 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   2cab8:	4b02      	ldr	r3, [pc, #8]	; (2cac4 <bt_conn_cb_register+0xc>)
   2caba:	681a      	ldr	r2, [r3, #0]
   2cabc:	61c2      	str	r2, [r0, #28]
	callback_list = cb;
   2cabe:	6018      	str	r0, [r3, #0]
}
   2cac0:	4770      	bx	lr
   2cac2:	bf00      	nop
   2cac4:	20001c4c 	.word	0x20001c4c

0002cac8 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   2cac8:	b570      	push	{r4, r5, r6, lr}
   2caca:	4606      	mov	r6, r0
   2cacc:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   2cace:	480a      	ldr	r0, [pc, #40]	; (2caf8 <bt_conn_add_le+0x30>)
   2cad0:	2101      	movs	r1, #1
   2cad2:	f7ff fd91 	bl	2c5f8 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   2cad6:	4604      	mov	r4, r0
   2cad8:	b160      	cbz	r0, 2caf4 <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
   2cada:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   2cadc:	2207      	movs	r2, #7
   2cade:	4629      	mov	r1, r5
   2cae0:	3088      	adds	r0, #136	; 0x88
   2cae2:	f017 ffee 	bl	44ac2 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   2cae6:	2301      	movs	r3, #1
   2cae8:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   2caea:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   2caec:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   2caee:	4b03      	ldr	r3, [pc, #12]	; (2cafc <bt_conn_add_le+0x34>)
   2caf0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   2caf4:	4620      	mov	r0, r4
   2caf6:	bd70      	pop	{r4, r5, r6, pc}
   2caf8:	20000f28 	.word	0x20000f28
   2cafc:	00280018 	.word	0x00280018

0002cb00 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   2cb00:	b570      	push	{r4, r5, r6, lr}
   2cb02:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   2cb04:	480a      	ldr	r0, [pc, #40]	; (2cb30 <bt_conn_lookup_addr_le+0x30>)
{
   2cb06:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   2cb08:	f018 ff60 	bl	459cc <bt_conn_ref>
   2cb0c:	4604      	mov	r4, r0

		if (!conn) {
   2cb0e:	b120      	cbz	r0, 2cb1a <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   2cb10:	7883      	ldrb	r3, [r0, #2]
   2cb12:	2b01      	cmp	r3, #1
   2cb14:	d004      	beq.n	2cb20 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   2cb16:	f018 ff74 	bl	45a02 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   2cb1a:	2400      	movs	r4, #0
}
   2cb1c:	4620      	mov	r0, r4
   2cb1e:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   2cb20:	4632      	mov	r2, r6
   2cb22:	4629      	mov	r1, r5
   2cb24:	f019 f803 	bl	45b2e <bt_conn_is_peer_addr_le>
   2cb28:	2800      	cmp	r0, #0
   2cb2a:	d1f7      	bne.n	2cb1c <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   2cb2c:	4620      	mov	r0, r4
   2cb2e:	e7f2      	b.n	2cb16 <bt_conn_lookup_addr_le+0x16>
   2cb30:	20000f28 	.word	0x20000f28

0002cb34 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   2cb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cb36:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   2cb38:	480e      	ldr	r0, [pc, #56]	; (2cb74 <bt_conn_lookup_state_le+0x40>)
{
   2cb3a:	460e      	mov	r6, r1
   2cb3c:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   2cb3e:	f018 ff45 	bl	459cc <bt_conn_ref>

		if (!conn) {
   2cb42:	4604      	mov	r4, r0
   2cb44:	b120      	cbz	r0, 2cb50 <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   2cb46:	7883      	ldrb	r3, [r0, #2]
   2cb48:	2b01      	cmp	r3, #1
   2cb4a:	d003      	beq.n	2cb54 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   2cb4c:	f018 ff59 	bl	45a02 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   2cb50:	2400      	movs	r4, #0
   2cb52:	e00d      	b.n	2cb70 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   2cb54:	b136      	cbz	r6, 2cb64 <bt_conn_lookup_state_le+0x30>
   2cb56:	4632      	mov	r2, r6
   2cb58:	4629      	mov	r1, r5
   2cb5a:	f018 ffe8 	bl	45b2e <bt_conn_is_peer_addr_le>
   2cb5e:	b908      	cbnz	r0, 2cb64 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   2cb60:	4620      	mov	r0, r4
   2cb62:	e7f3      	b.n	2cb4c <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   2cb64:	7b63      	ldrb	r3, [r4, #13]
   2cb66:	42bb      	cmp	r3, r7
   2cb68:	d1fa      	bne.n	2cb60 <bt_conn_lookup_state_le+0x2c>
   2cb6a:	7a23      	ldrb	r3, [r4, #8]
   2cb6c:	42ab      	cmp	r3, r5
   2cb6e:	d1f7      	bne.n	2cb60 <bt_conn_lookup_state_le+0x2c>
}
   2cb70:	4620      	mov	r0, r4
   2cb72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2cb74:	20000f28 	.word	0x20000f28

0002cb78 <send_conn_le_param_update>:
{
   2cb78:	b538      	push	{r3, r4, r5, lr}
   2cb7a:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   2cb7c:	4608      	mov	r0, r1
{
   2cb7e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   2cb80:	f018 fbab 	bl	452da <bt_le_conn_params_valid>
   2cb84:	b338      	cbz	r0, 2cbd6 <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   2cb86:	4b15      	ldr	r3, [pc, #84]	; (2cbdc <send_conn_le_param_update+0x64>)
   2cb88:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   2cb8c:	0799      	lsls	r1, r3, #30
   2cb8e:	d407      	bmi.n	2cba0 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   2cb90:	78e3      	ldrb	r3, [r4, #3]
   2cb92:	b173      	cbz	r3, 2cbb2 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   2cb94:	4629      	mov	r1, r5
   2cb96:	4620      	mov	r0, r4
}
   2cb98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   2cb9c:	f000 b99e 	b.w	2cedc <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   2cba0:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   2cba4:	079a      	lsls	r2, r3, #30
   2cba6:	d5f3      	bpl.n	2cb90 <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2cba8:	1d20      	adds	r0, r4, #4
   2cbaa:	f018 fe6f 	bl	4588c <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   2cbae:	0543      	lsls	r3, r0, #21
   2cbb0:	d4ee      	bmi.n	2cb90 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   2cbb2:	4629      	mov	r1, r5
   2cbb4:	4620      	mov	r0, r4
   2cbb6:	f018 ffe4 	bl	45b82 <bt_conn_le_conn_update>
		if (rc == 0) {
   2cbba:	b958      	cbnz	r0, 2cbd4 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   2cbbc:	882b      	ldrh	r3, [r5, #0]
   2cbbe:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   2cbc2:	886b      	ldrh	r3, [r5, #2]
   2cbc4:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   2cbc8:	88ab      	ldrh	r3, [r5, #4]
   2cbca:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   2cbce:	88eb      	ldrh	r3, [r5, #6]
   2cbd0:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   2cbd4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2cbd6:	f06f 0015 	mvn.w	r0, #21
   2cbda:	e7fb      	b.n	2cbd4 <send_conn_le_param_update+0x5c>
   2cbdc:	20000000 	.word	0x20000000

0002cbe0 <deferred_work>:
{
   2cbe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   2cbe2:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   2cbe6:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   2cbe8:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   2cbec:	b9fb      	cbnz	r3, 2cc2e <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
   2cbee:	4628      	mov	r0, r5
   2cbf0:	f019 f849 	bl	45c86 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   2cbf4:	4b22      	ldr	r3, [pc, #136]	; (2cc80 <deferred_work+0xa0>)
   2cbf6:	681e      	ldr	r6, [r3, #0]
   2cbf8:	b94e      	cbnz	r6, 2cc0e <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2cbfa:	4e22      	ldr	r6, [pc, #136]	; (2cc84 <deferred_work+0xa4>)
   2cbfc:	4f22      	ldr	r7, [pc, #136]	; (2cc88 <deferred_work+0xa8>)
   2cbfe:	42be      	cmp	r6, r7
   2cc00:	d30d      	bcc.n	2cc1e <deferred_work+0x3e>
		bt_conn_unref(conn);
   2cc02:	4628      	mov	r0, r5
}
   2cc04:	b003      	add	sp, #12
   2cc06:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   2cc0a:	f018 befa 	b.w	45a02 <bt_conn_unref>
		if (cb->disconnected) {
   2cc0e:	6873      	ldr	r3, [r6, #4]
   2cc10:	b11b      	cbz	r3, 2cc1a <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
   2cc12:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   2cc16:	4628      	mov	r0, r5
   2cc18:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2cc1a:	69f6      	ldr	r6, [r6, #28]
   2cc1c:	e7ec      	b.n	2cbf8 <deferred_work+0x18>
		if (cb->disconnected) {
   2cc1e:	6873      	ldr	r3, [r6, #4]
   2cc20:	b11b      	cbz	r3, 2cc2a <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
   2cc22:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   2cc26:	4628      	mov	r0, r5
   2cc28:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2cc2a:	3620      	adds	r6, #32
   2cc2c:	e7e7      	b.n	2cbfe <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
   2cc2e:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   2cc32:	2b01      	cmp	r3, #1
   2cc34:	d11c      	bne.n	2cc70 <deferred_work+0x90>
	if (atomic_test_and_clear_bit(conn->flags,
   2cc36:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2cc3a:	f46f 7100 	mvn.w	r1, #512	; 0x200
   2cc3e:	4630      	mov	r0, r6
   2cc40:	f018 fe15 	bl	4586e <atomic_and>
   2cc44:	0583      	lsls	r3, r0, #22
   2cc46:	d515      	bpl.n	2cc74 <deferred_work+0x94>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   2cc48:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   2cc4a:	9300      	str	r3, [sp, #0]
   2cc4c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   2cc4e:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   2cc50:	4669      	mov	r1, sp
   2cc52:	4628      	mov	r0, r5
   2cc54:	f7ff ff90 	bl	2cb78 <send_conn_le_param_update>
   2cc58:	f3bf 8f5b 	dmb	ish
   2cc5c:	e856 3f00 	ldrex	r3, [r6]
   2cc60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2cc64:	e846 3200 	strex	r2, r3, [r6]
   2cc68:	2a00      	cmp	r2, #0
   2cc6a:	d1f7      	bne.n	2cc5c <deferred_work+0x7c>
   2cc6c:	f3bf 8f5b 	dmb	ish
}
   2cc70:	b003      	add	sp, #12
   2cc72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
   2cc74:	4a05      	ldr	r2, [pc, #20]	; (2cc8c <deferred_work+0xac>)
   2cc76:	6810      	ldr	r0, [r2, #0]
   2cc78:	6851      	ldr	r1, [r2, #4]
   2cc7a:	466b      	mov	r3, sp
   2cc7c:	c303      	stmia	r3!, {r0, r1}
   2cc7e:	e7e7      	b.n	2cc50 <deferred_work+0x70>
   2cc80:	20001c4c 	.word	0x20001c4c
   2cc84:	000492e0 	.word	0x000492e0
   2cc88:	000492e0 	.word	0x000492e0
   2cc8c:	00049416 	.word	0x00049416

0002cc90 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   2cc90:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   2cc92:	4801      	ldr	r0, [pc, #4]	; (2cc98 <bt_conn_create_frag_timeout+0x8>)
   2cc94:	f7ff be0c 	b.w	2c8b0 <bt_conn_create_pdu_timeout>
   2cc98:	20000c74 	.word	0x20000c74

0002cc9c <create_frag>:
{
   2cc9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cca0:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   2cca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2cca6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2ccaa:	2000      	movs	r0, #0
{
   2ccac:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   2ccae:	f7ff ffef 	bl	2cc90 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   2ccb2:	7b73      	ldrb	r3, [r6, #13]
   2ccb4:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   2ccb6:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   2ccb8:	f04f 0600 	mov.w	r6, #0
   2ccbc:	d005      	beq.n	2ccca <create_frag+0x2e>
		net_buf_unref(frag);
   2ccbe:	f010 f9f3 	bl	3d0a8 <net_buf_unref>
		return NULL;
   2ccc2:	4635      	mov	r5, r6
}
   2ccc4:	4628      	mov	r0, r5
   2ccc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   2ccca:	6146      	str	r6, [r0, #20]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   2cccc:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   2ccd0:	4e0c      	ldr	r6, [pc, #48]	; (2cd04 <create_frag+0x68>)
   2ccd2:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   2ccd4:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   2ccd8:	f01a fe61 	bl	4799e <net_buf_simple_tailroom>
   2ccdc:	4580      	cmp	r8, r0
   2ccde:	d20c      	bcs.n	2ccfa <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   2cce0:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2cce4:	f854 1f08 	ldr.w	r1, [r4, #8]!
   2cce8:	4632      	mov	r2, r6
   2ccea:	4638      	mov	r0, r7
   2ccec:	f01a fe22 	bl	47934 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   2ccf0:	4631      	mov	r1, r6
   2ccf2:	4620      	mov	r0, r4
   2ccf4:	f01a fe37 	bl	47966 <net_buf_simple_pull>
   2ccf8:	e7e4      	b.n	2ccc4 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   2ccfa:	4638      	mov	r0, r7
   2ccfc:	f01a fe4f 	bl	4799e <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   2cd00:	b286      	uxth	r6, r0
   2cd02:	e7ef      	b.n	2cce4 <create_frag+0x48>
   2cd04:	20000000 	.word	0x20000000

0002cd08 <bt_conn_process_tx>:
{
   2cd08:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   2cd0a:	7b43      	ldrb	r3, [r0, #13]
{
   2cd0c:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   2cd0e:	b95b      	cbnz	r3, 2cd28 <bt_conn_process_tx+0x20>
   2cd10:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2cd14:	3004      	adds	r0, #4
   2cd16:	f018 fdaa 	bl	4586e <atomic_and>
   2cd1a:	0643      	lsls	r3, r0, #25
   2cd1c:	d504      	bpl.n	2cd28 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   2cd1e:	4620      	mov	r0, r4
}
   2cd20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   2cd24:	f018 bde7 	b.w	458f6 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   2cd28:	2200      	movs	r2, #0
   2cd2a:	2300      	movs	r3, #0
   2cd2c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   2cd30:	f01a fd9d 	bl	4786e <net_buf_get>
	BT_ASSERT(buf);
   2cd34:	4605      	mov	r5, r0
   2cd36:	b960      	cbnz	r0, 2cd52 <bt_conn_process_tx+0x4a>
   2cd38:	4a1f      	ldr	r2, [pc, #124]	; (2cdb8 <bt_conn_process_tx+0xb0>)
   2cd3a:	4920      	ldr	r1, [pc, #128]	; (2cdbc <bt_conn_process_tx+0xb4>)
   2cd3c:	4820      	ldr	r0, [pc, #128]	; (2cdc0 <bt_conn_process_tx+0xb8>)
   2cd3e:	f240 23e7 	movw	r3, #743	; 0x2e7
   2cd42:	f015 fdbf 	bl	428c4 <printk>
   2cd46:	4040      	eors	r0, r0
   2cd48:	f380 8811 	msr	BASEPRI, r0
   2cd4c:	f04f 0003 	mov.w	r0, #3
   2cd50:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   2cd52:	4e1c      	ldr	r6, [pc, #112]	; (2cdc4 <bt_conn_process_tx+0xbc>)
	if (buf->len <= conn_mtu(conn)) {
   2cd54:	89aa      	ldrh	r2, [r5, #12]
   2cd56:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   2cd5a:	429a      	cmp	r2, r3
   2cd5c:	d807      	bhi.n	2cd6e <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   2cd5e:	2300      	movs	r3, #0
   2cd60:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   2cd62:	4629      	mov	r1, r5
   2cd64:	4620      	mov	r0, r4
   2cd66:	f7ff fbaf 	bl	2c4c8 <send_frag>
	if (!send_buf(conn, buf)) {
   2cd6a:	b130      	cbz	r0, 2cd7a <bt_conn_process_tx+0x72>
}
   2cd6c:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
   2cd6e:	4629      	mov	r1, r5
   2cd70:	4620      	mov	r0, r4
   2cd72:	f7ff ff93 	bl	2cc9c <create_frag>
	if (!frag) {
   2cd76:	4601      	mov	r1, r0
   2cd78:	b920      	cbnz	r0, 2cd84 <bt_conn_process_tx+0x7c>
		net_buf_unref(buf);
   2cd7a:	4628      	mov	r0, r5
}
   2cd7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   2cd80:	f010 b992 	b.w	3d0a8 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   2cd84:	2301      	movs	r3, #1
   2cd86:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   2cd88:	4620      	mov	r0, r4
   2cd8a:	f7ff fb9d 	bl	2c4c8 <send_frag>
   2cd8e:	2800      	cmp	r0, #0
   2cd90:	d0f3      	beq.n	2cd7a <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
   2cd92:	89aa      	ldrh	r2, [r5, #12]
   2cd94:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   2cd98:	429a      	cmp	r2, r3
   2cd9a:	d802      	bhi.n	2cda2 <bt_conn_process_tx+0x9a>
	return send_frag(conn, buf, FRAG_END, false);
   2cd9c:	2300      	movs	r3, #0
   2cd9e:	2203      	movs	r2, #3
   2cda0:	e7df      	b.n	2cd62 <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
   2cda2:	4629      	mov	r1, r5
   2cda4:	4620      	mov	r0, r4
   2cda6:	f7ff ff79 	bl	2cc9c <create_frag>
		if (!frag) {
   2cdaa:	4601      	mov	r1, r0
   2cdac:	2800      	cmp	r0, #0
   2cdae:	d0e4      	beq.n	2cd7a <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   2cdb0:	2301      	movs	r3, #1
   2cdb2:	461a      	mov	r2, r3
   2cdb4:	e7e8      	b.n	2cd88 <bt_conn_process_tx+0x80>
   2cdb6:	bf00      	nop
   2cdb8:	0004b085 	.word	0x0004b085
   2cdbc:	0004af6b 	.word	0x0004af6b
   2cdc0:	0004af4e 	.word	0x0004af4e
   2cdc4:	20000000 	.word	0x20000000

0002cdc8 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   2cdc8:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   2cdca:	490b      	ldr	r1, [pc, #44]	; (2cdf8 <bt_conn_init+0x30>)
   2cdcc:	480b      	ldr	r0, [pc, #44]	; (2cdfc <bt_conn_init+0x34>)
   2cdce:	f01b fc6a 	bl	486a6 <k_queue_append>
   2cdd2:	490b      	ldr	r1, [pc, #44]	; (2ce00 <bt_conn_init+0x38>)
   2cdd4:	4809      	ldr	r0, [pc, #36]	; (2cdfc <bt_conn_init+0x34>)
   2cdd6:	f01b fc66 	bl	486a6 <k_queue_append>
   2cdda:	490a      	ldr	r1, [pc, #40]	; (2ce04 <bt_conn_init+0x3c>)
   2cddc:	4807      	ldr	r0, [pc, #28]	; (2cdfc <bt_conn_init+0x34>)
   2cdde:	f01b fc62 	bl	486a6 <k_queue_append>
	}

	bt_att_init();
   2cde2:	f019 fc39 	bl	46658 <bt_att_init>

	err = bt_smp_init();
   2cde6:	f002 fcab 	bl	2f740 <bt_smp_init>
	if (err) {
   2cdea:	4604      	mov	r4, r0
   2cdec:	b908      	cbnz	r0, 2cdf2 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   2cdee:	f018 fffd 	bl	45dec <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   2cdf2:	4620      	mov	r0, r4
   2cdf4:	bd10      	pop	{r4, pc}
   2cdf6:	bf00      	nop
   2cdf8:	20001c1c 	.word	0x20001c1c
   2cdfc:	20000bd4 	.word	0x20000bd4
   2ce00:	20001c2c 	.word	0x20001c2c
   2ce04:	20001c3c 	.word	0x20001c3c

0002ce08 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   2ce08:	4b04      	ldr	r3, [pc, #16]	; (2ce1c <l2cap_accept+0x14>)
   2ce0a:	6818      	ldr	r0, [r3, #0]
   2ce0c:	b918      	cbnz	r0, 2ce16 <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   2ce0e:	4a04      	ldr	r2, [pc, #16]	; (2ce20 <l2cap_accept+0x18>)
   2ce10:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   2ce12:	600b      	str	r3, [r1, #0]

		return 0;
   2ce14:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
   2ce16:	f06f 000b 	mvn.w	r0, #11
}
   2ce1a:	4770      	bx	lr
   2ce1c:	20000fe8 	.word	0x20000fe8
   2ce20:	000499c0 	.word	0x000499c0

0002ce24 <bt_l2cap_connected>:
{
   2ce24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   2ce28:	4e29      	ldr	r6, [pc, #164]	; (2ced0 <bt_l2cap_connected+0xac>)
   2ce2a:	4f2a      	ldr	r7, [pc, #168]	; (2ced4 <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   2ce2c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 2ced8 <bt_l2cap_connected+0xb4>
{
   2ce30:	4604      	mov	r4, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   2ce32:	42be      	cmp	r6, r7
   2ce34:	d302      	bcc.n	2ce3c <bt_l2cap_connected+0x18>
}
   2ce36:	b003      	add	sp, #12
   2ce38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   2ce3c:	6873      	ldr	r3, [r6, #4]
   2ce3e:	a901      	add	r1, sp, #4
   2ce40:	4620      	mov	r0, r4
   2ce42:	4798      	blx	r3
   2ce44:	2800      	cmp	r0, #0
   2ce46:	db3d      	blt.n	2cec4 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
   2ce48:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   2ce4a:	8833      	ldrh	r3, [r6, #0]
   2ce4c:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   2ce50:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   2ce54:	4641      	mov	r1, r8
   2ce56:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   2ce5a:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   2ce5e:	f01b fd1c 	bl	4889a <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2ce62:	f3bf 8f5b 	dmb	ish
   2ce66:	f105 0368 	add.w	r3, r5, #104	; 0x68
   2ce6a:	2200      	movs	r2, #0
   2ce6c:	e853 1f00 	ldrex	r1, [r3]
   2ce70:	e843 2000 	strex	r0, r2, [r3]
   2ce74:	2800      	cmp	r0, #0
   2ce76:	d1f9      	bne.n	2ce6c <bt_l2cap_connected+0x48>
   2ce78:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   2ce7c:	60aa      	str	r2, [r5, #8]
	return list->tail;
   2ce7e:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   2ce80:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode)
   2ce84:	bb02      	cbnz	r2, 2cec8 <bt_l2cap_connected+0xa4>
	list->head = node;
   2ce86:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
   2ce8a:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   2ce8c:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   2ce8e:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   2ce90:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
   2ce94:	681b      	ldr	r3, [r3, #0]
   2ce96:	b103      	cbz	r3, 2ce9a <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
   2ce98:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2ce9a:	9b01      	ldr	r3, [sp, #4]
   2ce9c:	f3bf 8f5b 	dmb	ish
   2cea0:	3368      	adds	r3, #104	; 0x68
   2cea2:	e853 1f00 	ldrex	r1, [r3]
   2cea6:	f041 0101 	orr.w	r1, r1, #1
   2ceaa:	e843 1200 	strex	r2, r1, [r3]
   2ceae:	2a00      	cmp	r2, #0
   2ceb0:	d1f7      	bne.n	2cea2 <bt_l2cap_connected+0x7e>
   2ceb2:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   2ceb6:	9801      	ldr	r0, [sp, #4]
   2ceb8:	6843      	ldr	r3, [r0, #4]
   2ceba:	699b      	ldr	r3, [r3, #24]
   2cebc:	b113      	cbz	r3, 2cec4 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
   2cebe:	f100 0168 	add.w	r1, r0, #104	; 0x68
   2cec2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   2cec4:	360c      	adds	r6, #12
   2cec6:	e7b4      	b.n	2ce32 <bt_l2cap_connected+0xe>
	parent->next = child;
   2cec8:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2ceca:	6563      	str	r3, [r4, #84]	; 0x54
}
   2cecc:	e7dd      	b.n	2ce8a <bt_l2cap_connected+0x66>
   2cece:	bf00      	nop
   2ced0:	000492bc 	.word	0x000492bc
   2ced4:	000492e0 	.word	0x000492e0
   2ced8:	00045c6d 	.word	0x00045c6d

0002cedc <bt_l2cap_update_conn_param>:
{
   2cedc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   2cede:	4b17      	ldr	r3, [pc, #92]	; (2cf3c <bt_l2cap_update_conn_param+0x60>)
{
   2cee0:	460e      	mov	r6, r1
	ident++;
   2cee2:	7819      	ldrb	r1, [r3, #0]
   2cee4:	3101      	adds	r1, #1
   2cee6:	b2c9      	uxtb	r1, r1
   2cee8:	2901      	cmp	r1, #1
   2ceea:	bf38      	it	cc
   2ceec:	2101      	movcc	r1, #1
{
   2ceee:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   2cef0:	2208      	movs	r2, #8
   2cef2:	2012      	movs	r0, #18
	ident++;
   2cef4:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   2cef6:	f018 fe70 	bl	45bda <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   2cefa:	4604      	mov	r4, r0
   2cefc:	b1d0      	cbz	r0, 2cf34 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   2cefe:	2108      	movs	r1, #8
   2cf00:	4408      	add	r0, r1
   2cf02:	f01a fd11 	bl	47928 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   2cf06:	8833      	ldrh	r3, [r6, #0]
   2cf08:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   2cf0a:	8873      	ldrh	r3, [r6, #2]
   2cf0c:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   2cf0e:	88b3      	ldrh	r3, [r6, #4]
   2cf10:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   2cf12:	88f3      	ldrh	r3, [r6, #6]
   2cf14:	80c3      	strh	r3, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   2cf16:	2300      	movs	r3, #0
   2cf18:	4628      	mov	r0, r5
   2cf1a:	9300      	str	r3, [sp, #0]
   2cf1c:	4622      	mov	r2, r4
   2cf1e:	2105      	movs	r1, #5
   2cf20:	f018 fee9 	bl	45cf6 <bt_l2cap_send_cb>
	if (err) {
   2cf24:	4605      	mov	r5, r0
   2cf26:	b110      	cbz	r0, 2cf2e <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   2cf28:	4620      	mov	r0, r4
   2cf2a:	f010 f8bd 	bl	3d0a8 <net_buf_unref>
}
   2cf2e:	4628      	mov	r0, r5
   2cf30:	b002      	add	sp, #8
   2cf32:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   2cf34:	f06f 050b 	mvn.w	r5, #11
   2cf38:	e7f9      	b.n	2cf2e <bt_l2cap_update_conn_param+0x52>
   2cf3a:	bf00      	nop
   2cf3c:	20003c0e 	.word	0x20003c0e

0002cf40 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   2cf40:	4b02      	ldr	r3, [pc, #8]	; (2cf4c <att_cfm_sent+0xc>)
   2cf42:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   2cf46:	f018 bf64 	b.w	45e12 <att_sent>
   2cf4a:	bf00      	nop
   2cf4c:	0004631f 	.word	0x0004631f

0002cf50 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   2cf50:	4b02      	ldr	r3, [pc, #8]	; (2cf5c <att_rsp_sent+0xc>)
   2cf52:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   2cf56:	f018 bf5c 	b.w	45e12 <att_sent>
   2cf5a:	bf00      	nop
   2cf5c:	00046303 	.word	0x00046303

0002cf60 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   2cf60:	4b02      	ldr	r3, [pc, #8]	; (2cf6c <att_req_sent+0xc>)
   2cf62:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   2cf66:	f018 bf54 	b.w	45e12 <att_sent>
   2cf6a:	bf00      	nop
   2cf6c:	00046137 	.word	0x00046137

0002cf70 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   2cf70:	281d      	cmp	r0, #29
   2cf72:	d020      	beq.n	2cfb6 <att_op_get_type+0x46>
   2cf74:	d813      	bhi.n	2cf9e <att_op_get_type+0x2e>
   2cf76:	2819      	cmp	r0, #25
   2cf78:	d904      	bls.n	2cf84 <att_op_get_type+0x14>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   2cf7a:	281b      	cmp	r0, #27
   2cf7c:	bf0c      	ite	eq
   2cf7e:	2003      	moveq	r0, #3
   2cf80:	2006      	movne	r0, #6
   2cf82:	4770      	bx	lr
	switch (op) {
   2cf84:	b1c8      	cbz	r0, 2cfba <att_op_get_type+0x4a>
   2cf86:	4a11      	ldr	r2, [pc, #68]	; (2cfcc <att_op_get_type+0x5c>)
   2cf88:	2301      	movs	r3, #1
   2cf8a:	4083      	lsls	r3, r0
   2cf8c:	401a      	ands	r2, r3
   2cf8e:	b9b2      	cbnz	r2, 2cfbe <att_op_get_type+0x4e>
   2cf90:	4a0f      	ldr	r2, [pc, #60]	; (2cfd0 <att_op_get_type+0x60>)
   2cf92:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   2cf94:	2a00      	cmp	r2, #0
   2cf96:	bf14      	ite	ne
   2cf98:	2001      	movne	r0, #1
   2cf9a:	2006      	moveq	r0, #6
   2cf9c:	4770      	bx	lr
	switch (op) {
   2cf9e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   2cfa2:	2b52      	cmp	r3, #82	; 0x52
   2cfa4:	d00d      	beq.n	2cfc2 <att_op_get_type+0x52>
   2cfa6:	281e      	cmp	r0, #30
   2cfa8:	d00d      	beq.n	2cfc6 <att_op_get_type+0x56>
		return ATT_COMMAND;
   2cfaa:	f010 0f40 	tst.w	r0, #64	; 0x40
   2cfae:	bf0c      	ite	eq
   2cfb0:	2006      	moveq	r0, #6
   2cfb2:	2000      	movne	r0, #0
   2cfb4:	4770      	bx	lr
		return ATT_INDICATION;
   2cfb6:	2005      	movs	r0, #5
   2cfb8:	4770      	bx	lr
	return ATT_UNKNOWN;
   2cfba:	2006      	movs	r0, #6
   2cfbc:	4770      	bx	lr
		return ATT_RESPONSE;
   2cfbe:	2002      	movs	r0, #2
   2cfc0:	4770      	bx	lr
		return ATT_COMMAND;
   2cfc2:	2000      	movs	r0, #0
   2cfc4:	4770      	bx	lr
	switch (op) {
   2cfc6:	2004      	movs	r0, #4
}
   2cfc8:	4770      	bx	lr
   2cfca:	bf00      	nop
   2cfcc:	028aaaaa 	.word	0x028aaaaa
   2cfd0:	01455554 	.word	0x01455554

0002cfd4 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   2cfd4:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2cfd6:	3808      	subs	r0, #8
   2cfd8:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   2cfda:	a901      	add	r1, sp, #4
   2cfdc:	4802      	ldr	r0, [pc, #8]	; (2cfe8 <bt_att_released+0x14>)
   2cfde:	f01b fa9a 	bl	48516 <k_mem_slab_free>
}
   2cfe2:	b003      	add	sp, #12
   2cfe4:	f85d fb04 	ldr.w	pc, [sp], #4
   2cfe8:	20000a9c 	.word	0x20000a9c

0002cfec <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   2cfec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   2cfee:	2300      	movs	r3, #0
{
   2cff0:	4607      	mov	r7, r0
   2cff2:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   2cff4:	481e      	ldr	r0, [pc, #120]	; (2d070 <bt_att_accept+0x84>)
   2cff6:	2200      	movs	r2, #0
   2cff8:	4669      	mov	r1, sp
   2cffa:	f014 f813 	bl	41024 <k_mem_slab_alloc>
   2cffe:	4604      	mov	r4, r0
   2d000:	b998      	cbnz	r0, 2d02a <bt_att_accept+0x3e>
		BT_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	(void)memset(att, 0, sizeof(*att));
   2d002:	4601      	mov	r1, r0
   2d004:	222c      	movs	r2, #44	; 0x2c
   2d006:	9800      	ldr	r0, [sp, #0]
   2d008:	f017 fd66 	bl	44ad8 <memset>
	att->conn = conn;
   2d00c:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   2d00e:	4819      	ldr	r0, [pc, #100]	; (2d074 <bt_att_accept+0x88>)
	list->tail = NULL;
   2d010:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   2d012:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
   2d016:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
   2d01a:	2200      	movs	r2, #0
   2d01c:	2300      	movs	r3, #0
   2d01e:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2d020:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   2d022:	f013 ffff 	bl	41024 <k_mem_slab_alloc>
   2d026:	4604      	mov	r4, r0
   2d028:	b120      	cbz	r0, 2d034 <bt_att_accept+0x48>
		return -ENOMEM;
   2d02a:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   2d02e:	4620      	mov	r0, r4
   2d030:	b003      	add	sp, #12
   2d032:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(chan, 0, sizeof(*chan));
   2d034:	4601      	mov	r1, r0
   2d036:	f44f 72a4 	mov.w	r2, #328	; 0x148
   2d03a:	9801      	ldr	r0, [sp, #4]
   2d03c:	f017 fd4c 	bl	44ad8 <memset>
	chan->chan.chan.ops = &ops;
   2d040:	9801      	ldr	r0, [sp, #4]
   2d042:	4b0d      	ldr	r3, [pc, #52]	; (2d078 <bt_att_accept+0x8c>)
   2d044:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   2d046:	30f8      	adds	r0, #248	; 0xf8
   2d048:	f01b fb21 	bl	4868e <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2d04c:	9b01      	ldr	r3, [sp, #4]
   2d04e:	f3bf 8f5b 	dmb	ish
   2d052:	33f0      	adds	r3, #240	; 0xf0
   2d054:	e853 2f00 	ldrex	r2, [r3]
   2d058:	e843 4100 	strex	r1, r4, [r3]
   2d05c:	2900      	cmp	r1, #0
   2d05e:	d1f9      	bne.n	2d054 <bt_att_accept+0x68>
   2d060:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   2d064:	9b01      	ldr	r3, [sp, #4]
   2d066:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   2d06a:	6033      	str	r3, [r6, #0]
	return 0;
   2d06c:	e7df      	b.n	2d02e <bt_att_accept+0x42>
   2d06e:	bf00      	nop
   2d070:	20000a80 	.word	0x20000a80
   2d074:	20000a9c 	.word	0x20000a9c
   2d078:	20000398 	.word	0x20000398

0002d07c <read_group_cb>:
{
   2d07c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2d080:	4605      	mov	r5, r0
   2d082:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2d084:	f04f 0800 	mov.w	r8, #0
   2d088:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2d08c:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   2d08e:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2d090:	f88d 8008 	strb.w	r8, [sp, #8]
   2d094:	a902      	add	r1, sp, #8
{
   2d096:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2d098:	f8ad 300a 	strh.w	r3, [sp, #10]
   2d09c:	f017 fdf2 	bl	44c84 <bt_uuid_cmp>
   2d0a0:	b1a0      	cbz	r0, 2d0cc <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2d0a2:	f642 0301 	movw	r3, #10241	; 0x2801
   2d0a6:	6828      	ldr	r0, [r5, #0]
   2d0a8:	f88d 800c 	strb.w	r8, [sp, #12]
   2d0ac:	a903      	add	r1, sp, #12
   2d0ae:	f8ad 300e 	strh.w	r3, [sp, #14]
   2d0b2:	f017 fde7 	bl	44c84 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2d0b6:	b148      	cbz	r0, 2d0cc <read_group_cb+0x50>
		if (data->group &&
   2d0b8:	6923      	ldr	r3, [r4, #16]
   2d0ba:	b11b      	cbz	r3, 2d0c4 <read_group_cb+0x48>
   2d0bc:	885a      	ldrh	r2, [r3, #2]
   2d0be:	42b2      	cmp	r2, r6
   2d0c0:	d200      	bcs.n	2d0c4 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   2d0c2:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   2d0c4:	2001      	movs	r0, #1
}
   2d0c6:	b004      	add	sp, #16
   2d0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   2d0cc:	6861      	ldr	r1, [r4, #4]
   2d0ce:	6828      	ldr	r0, [r5, #0]
   2d0d0:	f017 fdd8 	bl	44c84 <bt_uuid_cmp>
   2d0d4:	b110      	cbz	r0, 2d0dc <read_group_cb+0x60>
		data->group = NULL;
   2d0d6:	2300      	movs	r3, #0
   2d0d8:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   2d0da:	e7f3      	b.n	2d0c4 <read_group_cb+0x48>
	if (data->rsp->len &&
   2d0dc:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   2d0de:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   2d0e0:	781a      	ldrb	r2, [r3, #0]
   2d0e2:	b13a      	cbz	r2, 2d0f4 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   2d0e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   2d0e8:	8981      	ldrh	r1, [r0, #12]
   2d0ea:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   2d0ec:	4293      	cmp	r3, r2
   2d0ee:	da01      	bge.n	2d0f4 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   2d0f0:	2000      	movs	r0, #0
   2d0f2:	e7e8      	b.n	2d0c6 <read_group_cb+0x4a>
   2d0f4:	2104      	movs	r1, #4
   2d0f6:	3008      	adds	r0, #8
   2d0f8:	f01a fc16 	bl	47928 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   2d0fc:	4b09      	ldr	r3, [pc, #36]	; (2d124 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   2d0fe:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   2d100:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   2d102:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   2d104:	9300      	str	r3, [sp, #0]
   2d106:	9401      	str	r4, [sp, #4]
   2d108:	68a2      	ldr	r2, [r4, #8]
   2d10a:	2300      	movs	r3, #0
   2d10c:	4629      	mov	r1, r5
   2d10e:	4638      	mov	r0, r7
   2d110:	f019 f81c 	bl	4614c <att_chan_read>
	if (read < 0) {
   2d114:	2800      	cmp	r0, #0
   2d116:	dbeb      	blt.n	2d0f0 <read_group_cb+0x74>
	if (!data->group) {
   2d118:	6920      	ldr	r0, [r4, #16]
   2d11a:	3800      	subs	r0, #0
   2d11c:	bf18      	it	ne
   2d11e:	2001      	movne	r0, #1
   2d120:	e7d1      	b.n	2d0c6 <read_group_cb+0x4a>
   2d122:	bf00      	nop
   2d124:	00046117 	.word	0x00046117

0002d128 <chan_send>:
{
   2d128:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   2d12c:	688b      	ldr	r3, [r1, #8]
   2d12e:	781b      	ldrb	r3, [r3, #0]
   2d130:	2bd2      	cmp	r3, #210	; 0xd2
{
   2d132:	4605      	mov	r5, r0
   2d134:	460c      	mov	r4, r1
   2d136:	4616      	mov	r6, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   2d138:	d10c      	bne.n	2d154 <chan_send+0x2c>
		err = bt_smp_sign(chan->att->conn, buf);
   2d13a:	6803      	ldr	r3, [r0, #0]
   2d13c:	6818      	ldr	r0, [r3, #0]
   2d13e:	f01a f992 	bl	47466 <bt_smp_sign>
		if (err) {
   2d142:	4607      	mov	r7, r0
   2d144:	b130      	cbz	r0, 2d154 <chan_send+0x2c>
			net_buf_unref(buf);
   2d146:	4620      	mov	r0, r4
   2d148:	f00f ffae 	bl	3d0a8 <net_buf_unref>
}
   2d14c:	4638      	mov	r0, r7
   2d14e:	b003      	add	sp, #12
   2d150:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   2d154:	f104 0008 	add.w	r0, r4, #8
   2d158:	f01a fc1d 	bl	47996 <net_buf_simple_headroom>
	state->len = buf->len;
   2d15c:	f8b4 900c 	ldrh.w	r9, [r4, #12]
   2d160:	6829      	ldr	r1, [r5, #0]
	state->offset = net_buf_simple_headroom(buf);
   2d162:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   2d164:	b9f6      	cbnz	r6, 2d1a4 <chan_send+0x7c>
	switch (att_op_get_type(buf->data[0])) {
   2d166:	68a3      	ldr	r3, [r4, #8]
   2d168:	7818      	ldrb	r0, [r3, #0]
   2d16a:	f7ff ff01 	bl	2cf70 <att_op_get_type>
   2d16e:	3801      	subs	r0, #1
   2d170:	b2c0      	uxtb	r0, r0
   2d172:	2804      	cmp	r0, #4
   2d174:	d913      	bls.n	2d19e <chan_send+0x76>
		return att_sent;
   2d176:	4b15      	ldr	r3, [pc, #84]	; (2d1cc <chan_send+0xa4>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   2d178:	6808      	ldr	r0, [r1, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   2d17a:	f8c5 6140 	str.w	r6, [r5, #320]	; 0x140
			       &chan->chan.chan);
   2d17e:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   2d180:	9500      	str	r5, [sp, #0]
   2d182:	4622      	mov	r2, r4
   2d184:	2104      	movs	r1, #4
   2d186:	f018 fdb6 	bl	45cf6 <bt_l2cap_send_cb>
	if (err) {
   2d18a:	4607      	mov	r7, r0
   2d18c:	2800      	cmp	r0, #0
   2d18e:	d0dd      	beq.n	2d14c <chan_send+0x24>
	buf->data = buf->__buf + state->offset;
   2d190:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   2d192:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   2d196:	fa13 f388 	uxtah	r3, r3, r8
   2d19a:	60a3      	str	r3, [r4, #8]
}
   2d19c:	e7d6      	b.n	2d14c <chan_send+0x24>
   2d19e:	4b0c      	ldr	r3, [pc, #48]	; (2d1d0 <chan_send+0xa8>)
   2d1a0:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
	if (cb == chan_rsp_sent) {
   2d1a4:	4b0b      	ldr	r3, [pc, #44]	; (2d1d4 <chan_send+0xac>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   2d1a6:	6808      	ldr	r0, [r1, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   2d1a8:	f8c5 6140 	str.w	r6, [r5, #320]	; 0x140
	if (cb == chan_rsp_sent) {
   2d1ac:	429e      	cmp	r6, r3
   2d1ae:	d009      	beq.n	2d1c4 <chan_send+0x9c>
	} else if (cb == chan_cfm_sent) {
   2d1b0:	4b09      	ldr	r3, [pc, #36]	; (2d1d8 <chan_send+0xb0>)
   2d1b2:	429e      	cmp	r6, r3
   2d1b4:	d008      	beq.n	2d1c8 <chan_send+0xa0>
		return att_req_sent;
   2d1b6:	4909      	ldr	r1, [pc, #36]	; (2d1dc <chan_send+0xb4>)
   2d1b8:	4b04      	ldr	r3, [pc, #16]	; (2d1cc <chan_send+0xa4>)
   2d1ba:	4a09      	ldr	r2, [pc, #36]	; (2d1e0 <chan_send+0xb8>)
   2d1bc:	428e      	cmp	r6, r1
   2d1be:	bf08      	it	eq
   2d1c0:	4613      	moveq	r3, r2
   2d1c2:	e7dc      	b.n	2d17e <chan_send+0x56>
		return att_rsp_sent;
   2d1c4:	4b07      	ldr	r3, [pc, #28]	; (2d1e4 <chan_send+0xbc>)
   2d1c6:	e7da      	b.n	2d17e <chan_send+0x56>
		return att_cfm_sent;
   2d1c8:	4b07      	ldr	r3, [pc, #28]	; (2d1e8 <chan_send+0xc0>)
   2d1ca:	e7d8      	b.n	2d17e <chan_send+0x56>
   2d1cc:	00045e13 	.word	0x00045e13
   2d1d0:	000499e4 	.word	0x000499e4
   2d1d4:	00046303 	.word	0x00046303
   2d1d8:	0004631f 	.word	0x0004631f
   2d1dc:	00046137 	.word	0x00046137
   2d1e0:	0002cf61 	.word	0x0002cf61
   2d1e4:	0002cf51 	.word	0x0002cf51
   2d1e8:	0002cf41 	.word	0x0002cf41

0002d1ec <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   2d1ec:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
   2d1ee:	4a07      	ldr	r2, [pc, #28]	; (2d20c <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   2d1f0:	4604      	mov	r4, r0
   2d1f2:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   2d1f4:	f7ff ff98 	bl	2d128 <chan_send>
	if (err) {
   2d1f8:	b130      	cbz	r0, 2d208 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
   2d1fa:	4629      	mov	r1, r5
   2d1fc:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
   2d200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   2d204:	f01a bb51 	b.w	478aa <net_buf_put>
}
   2d208:	bd38      	pop	{r3, r4, r5, pc}
   2d20a:	bf00      	nop
   2d20c:	00046303 	.word	0x00046303

0002d210 <read_type_cb>:
{
   2d210:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   2d214:	6817      	ldr	r7, [r2, #0]
{
   2d216:	4605      	mov	r5, r0
   2d218:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   2d21a:	6800      	ldr	r0, [r0, #0]
   2d21c:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   2d21e:	68be      	ldr	r6, [r7, #8]
{
   2d220:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   2d222:	f017 fd2f 	bl	44c84 <bt_uuid_cmp>
   2d226:	4681      	mov	r9, r0
   2d228:	2800      	cmp	r0, #0
   2d22a:	d13d      	bne.n	2d2a8 <read_type_cb+0x98>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2d22c:	4630      	mov	r0, r6
   2d22e:	2215      	movs	r2, #21
   2d230:	4629      	mov	r1, r5
   2d232:	f019 fe08 	bl	46e46 <bt_gatt_check_perm>
   2d236:	4606      	mov	r6, r0
   2d238:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2d23a:	b140      	cbz	r0, 2d24e <read_type_cb+0x3e>
		if (data->rsp->len) {
   2d23c:	68e3      	ldr	r3, [r4, #12]
   2d23e:	781b      	ldrb	r3, [r3, #0]
   2d240:	b10b      	cbz	r3, 2d246 <read_type_cb+0x36>
			data->err = 0x00;
   2d242:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   2d246:	2000      	movs	r0, #0
}
   2d248:	b003      	add	sp, #12
   2d24a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   2d24e:	68a0      	ldr	r0, [r4, #8]
   2d250:	f01a fb3c 	bl	478cc <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
   2d254:	2102      	movs	r1, #2
   2d256:	3008      	adds	r0, #8
   2d258:	f01a fb66 	bl	47928 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   2d25c:	4b13      	ldr	r3, [pc, #76]	; (2d2ac <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   2d25e:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   2d260:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   2d264:	9300      	str	r3, [sp, #0]
   2d266:	9401      	str	r4, [sp, #4]
   2d268:	68a2      	ldr	r2, [r4, #8]
   2d26a:	4633      	mov	r3, r6
   2d26c:	4629      	mov	r1, r5
   2d26e:	4638      	mov	r0, r7
   2d270:	f018 ff6c 	bl	4614c <att_chan_read>
	if (read < 0) {
   2d274:	2800      	cmp	r0, #0
   2d276:	da07      	bge.n	2d288 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   2d278:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   2d27c:	bf26      	itte	cs
   2d27e:	4240      	negcs	r0, r0
   2d280:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   2d282:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   2d284:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   2d286:	e7de      	b.n	2d246 <read_type_cb+0x36>
	if (!data->item) {
   2d288:	6923      	ldr	r3, [r4, #16]
   2d28a:	2b00      	cmp	r3, #0
   2d28c:	d0db      	beq.n	2d246 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   2d28e:	68a0      	ldr	r0, [r4, #8]
   2d290:	f018 fdb7 	bl	45e02 <net_buf_frags_len>
   2d294:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   2d298:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   2d29a:	68e3      	ldr	r3, [r4, #12]
   2d29c:	781b      	ldrb	r3, [r3, #0]
   2d29e:	4298      	cmp	r0, r3
   2d2a0:	bf94      	ite	ls
   2d2a2:	2000      	movls	r0, #0
   2d2a4:	2001      	movhi	r0, #1
   2d2a6:	e7cf      	b.n	2d248 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   2d2a8:	2001      	movs	r0, #1
   2d2aa:	e7cd      	b.n	2d248 <read_type_cb+0x38>
   2d2ac:	00045e1f 	.word	0x00045e1f

0002d2b0 <bt_att_connected>:
{
   2d2b0:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   2d2b2:	4606      	mov	r6, r0
{
   2d2b4:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   2d2b6:	2104      	movs	r1, #4
   2d2b8:	f856 0908 	ldr.w	r0, [r6], #-8
   2d2bc:	f018 fd65 	bl	45d8a <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
   2d2c0:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   2d2c4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2d2c6:	b91b      	cbnz	r3, 2d2d0 <bt_att_connected+0x20>
   2d2c8:	f105 000c 	add.w	r0, r5, #12
   2d2cc:	f01b f9df 	bl	4868e <z_impl_k_queue_init>
	parent->next = child;
   2d2d0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   2d2d2:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
   2d2d6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   2d2d8:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
   2d2dc:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   2d2de:	b902      	cbnz	r2, 2d2e2 <bt_att_connected+0x32>
	list->tail = node;
   2d2e0:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d2e2:	f3bf 8f5b 	dmb	ish
   2d2e6:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   2d2ea:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   2d2ee:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   2d2f0:	bf58      	it	pl
   2d2f2:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
   2d2f4:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   2d2f6:	bf5c      	itt	pl
   2d2f8:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   2d2fc:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   2d300:	f018 fed0 	bl	460a4 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   2d304:	f504 7084 	add.w	r0, r4, #264	; 0x108
   2d308:	4902      	ldr	r1, [pc, #8]	; (2d314 <bt_att_connected+0x64>)
}
   2d30a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   2d30e:	f01b bac4 	b.w	4889a <k_work_init_delayable>
   2d312:	bf00      	nop
   2d314:	000466e7 	.word	0x000466e7

0002d318 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   2d318:	898b      	ldrh	r3, [r1, #12]
{
   2d31a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d31e:	4604      	mov	r4, r0
   2d320:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
   2d322:	2b00      	cmp	r3, #0
   2d324:	d06d      	beq.n	2d402 <bt_att_recv+0xea>
	return net_buf_simple_pull_mem(&buf->b, len);
   2d326:	2101      	movs	r1, #1
   2d328:	f106 0008 	add.w	r0, r6, #8
   2d32c:	f01a fb23 	bl	47976 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   2d330:	f854 3c08 	ldr.w	r3, [r4, #-8]
   2d334:	4607      	mov	r7, r0
   2d336:	2b00      	cmp	r3, #0
   2d338:	d063      	beq.n	2d402 <bt_att_recv+0xea>
		if (hdr->code == handlers[i].op) {
   2d33a:	7801      	ldrb	r1, [r0, #0]
   2d33c:	4a33      	ldr	r2, [pc, #204]	; (2d40c <bt_att_recv+0xf4>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   2d33e:	f1a4 0508 	sub.w	r5, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   2d342:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   2d344:	f812 e033 	ldrb.w	lr, [r2, r3, lsl #3]
   2d348:	458e      	cmp	lr, r1
   2d34a:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
   2d34e:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
   2d352:	d126      	bne.n	2d3a2 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   2d354:	f890 8002 	ldrb.w	r8, [r0, #2]
   2d358:	f1b8 0f01 	cmp.w	r8, #1
   2d35c:	d131      	bne.n	2d3c2 <bt_att_recv+0xaa>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d35e:	f3bf 8f5b 	dmb	ish
   2d362:	34e8      	adds	r4, #232	; 0xe8
   2d364:	e854 3f00 	ldrex	r3, [r4]
   2d368:	f043 0101 	orr.w	r1, r3, #1
   2d36c:	e844 1e00 	strex	lr, r1, [r4]
   2d370:	f1be 0f00 	cmp.w	lr, #0
   2d374:	d1f6      	bne.n	2d364 <bt_att_recv+0x4c>
   2d376:	f3bf 8f5b 	dmb	ish
   2d37a:	07d9      	lsls	r1, r3, #31
   2d37c:	d441      	bmi.n	2d402 <bt_att_recv+0xea>
	if (buf->len < handler->expect_len) {
   2d37e:	89b1      	ldrh	r1, [r6, #12]
   2d380:	7843      	ldrb	r3, [r0, #1]
   2d382:	4299      	cmp	r1, r3
   2d384:	d340      	bcc.n	2d408 <bt_att_recv+0xf0>
		err = handler->func(att_chan, buf);
   2d386:	eb02 030c 	add.w	r3, r2, ip
   2d38a:	4631      	mov	r1, r6
   2d38c:	685b      	ldr	r3, [r3, #4]
   2d38e:	4628      	mov	r0, r5
   2d390:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   2d392:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
   2d396:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   2d398:	d133      	bne.n	2d402 <bt_att_recv+0xea>
   2d39a:	b390      	cbz	r0, 2d402 <bt_att_recv+0xea>
		send_err_rsp(att_chan, hdr->code, 0, err);
   2d39c:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
   2d39e:	b381      	cbz	r1, 2d402 <bt_att_recv+0xea>
   2d3a0:	e00a      	b.n	2d3b8 <bt_att_recv+0xa0>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   2d3a2:	3301      	adds	r3, #1
   2d3a4:	2b0d      	cmp	r3, #13
   2d3a6:	d1cd      	bne.n	2d344 <bt_att_recv+0x2c>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   2d3a8:	4608      	mov	r0, r1
   2d3aa:	f7ff fde1 	bl	2cf70 <att_op_get_type>
   2d3ae:	b340      	cbz	r0, 2d402 <bt_att_recv+0xea>
   2d3b0:	2805      	cmp	r0, #5
   2d3b2:	d026      	beq.n	2d402 <bt_att_recv+0xea>
	if (!req) {
   2d3b4:	b329      	cbz	r1, 2d402 <bt_att_recv+0xea>
   2d3b6:	2306      	movs	r3, #6
   2d3b8:	2200      	movs	r2, #0
   2d3ba:	4628      	mov	r0, r5
   2d3bc:	f019 f895 	bl	464ea <send_err_rsp.part.0>
   2d3c0:	e01f      	b.n	2d402 <bt_att_recv+0xea>
		} else if (handler->type == ATT_INDICATION &&
   2d3c2:	f1b8 0f05 	cmp.w	r8, #5
   2d3c6:	d008      	beq.n	2d3da <bt_att_recv+0xc2>
	if (buf->len < handler->expect_len) {
   2d3c8:	89b2      	ldrh	r2, [r6, #12]
   2d3ca:	7843      	ldrb	r3, [r0, #1]
   2d3cc:	429a      	cmp	r2, r3
   2d3ce:	d318      	bcc.n	2d402 <bt_att_recv+0xea>
		err = handler->func(att_chan, buf);
   2d3d0:	6843      	ldr	r3, [r0, #4]
   2d3d2:	4631      	mov	r1, r6
   2d3d4:	4628      	mov	r0, r5
   2d3d6:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   2d3d8:	e013      	b.n	2d402 <bt_att_recv+0xea>
   2d3da:	34e8      	adds	r4, #232	; 0xe8
   2d3dc:	f3bf 8f5b 	dmb	ish
   2d3e0:	e854 3f00 	ldrex	r3, [r4]
   2d3e4:	f043 0102 	orr.w	r1, r3, #2
   2d3e8:	e844 1e00 	strex	lr, r1, [r4]
   2d3ec:	f1be 0f00 	cmp.w	lr, #0
   2d3f0:	d1f6      	bne.n	2d3e0 <bt_att_recv+0xc8>
   2d3f2:	f3bf 8f5b 	dmb	ish
		} else if (handler->type == ATT_INDICATION &&
   2d3f6:	079b      	lsls	r3, r3, #30
   2d3f8:	d403      	bmi.n	2d402 <bt_att_recv+0xea>
	if (buf->len < handler->expect_len) {
   2d3fa:	89b1      	ldrh	r1, [r6, #12]
   2d3fc:	7843      	ldrb	r3, [r0, #1]
   2d3fe:	4299      	cmp	r1, r3
   2d400:	d2c1      	bcs.n	2d386 <bt_att_recv+0x6e>
}
   2d402:	2000      	movs	r0, #0
   2d404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = BT_ATT_ERR_INVALID_PDU;
   2d408:	2304      	movs	r3, #4
   2d40a:	e7c7      	b.n	2d39c <bt_att_recv+0x84>
   2d40c:	000499f8 	.word	0x000499f8

0002d410 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   2d410:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d412:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   2d414:	6803      	ldr	r3, [r0, #0]
   2d416:	460d      	mov	r5, r1
   2d418:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   2d41a:	b087      	sub	sp, #28
   2d41c:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   2d41e:	bf18      	it	ne
   2d420:	2101      	movne	r1, #1
   2d422:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   2d424:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   2d426:	f019 fd6c 	bl	46f02 <bt_gatt_change_aware>
   2d42a:	2800      	cmp	r0, #0
   2d42c:	d041      	beq.n	2d4b2 <att_write_rsp.constprop.0+0xa2>
	if (!handle) {
   2d42e:	2e00      	cmp	r6, #0
   2d430:	d041      	beq.n	2d4b6 <att_write_rsp.constprop.0+0xa6>
	(void)memset(&data, 0, sizeof(data));
   2d432:	2218      	movs	r2, #24
   2d434:	2100      	movs	r1, #0
   2d436:	4668      	mov	r0, sp
   2d438:	f017 fb4e 	bl	44ad8 <memset>
	if (rsp) {
   2d43c:	bb47      	cbnz	r7, 2d490 <att_write_rsp.constprop.0+0x80>
	data.conn = chan->att->conn;
   2d43e:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   2d440:	4a1e      	ldr	r2, [pc, #120]	; (2d4bc <att_write_rsp.constprop.0+0xac>)
	data.conn = chan->att->conn;
   2d442:	681b      	ldr	r3, [r3, #0]
   2d444:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   2d446:	2300      	movs	r3, #0
   2d448:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   2d44c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2d44e:	9303      	str	r3, [sp, #12]
	data.len = len;
   2d450:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   2d454:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   2d458:	2301      	movs	r3, #1
   2d45a:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   2d45e:	4631      	mov	r1, r6
   2d460:	466b      	mov	r3, sp
   2d462:	4630      	mov	r0, r6
	data.req = req;
   2d464:	f88d 5008 	strb.w	r5, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   2d468:	f018 fd31 	bl	45ece <bt_gatt_foreach_attr>
	if (data.err) {
   2d46c:	f89d 3014 	ldrb.w	r3, [sp, #20]
   2d470:	b1c3      	cbz	r3, 2d4a4 <att_write_rsp.constprop.0+0x94>
		if (rsp) {
   2d472:	b157      	cbz	r7, 2d48a <att_write_rsp.constprop.0+0x7a>
			net_buf_unref(data.buf);
   2d474:	9801      	ldr	r0, [sp, #4]
   2d476:	f00f fe17 	bl	3d0a8 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   2d47a:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   2d47e:	b125      	cbz	r5, 2d48a <att_write_rsp.constprop.0+0x7a>
   2d480:	4632      	mov	r2, r6
   2d482:	4629      	mov	r1, r5
   2d484:	4620      	mov	r0, r4
   2d486:	f019 f830 	bl	464ea <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   2d48a:	2000      	movs	r0, #0
}
   2d48c:	b007      	add	sp, #28
   2d48e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   2d490:	2200      	movs	r2, #0
   2d492:	4639      	mov	r1, r7
   2d494:	4620      	mov	r0, r4
   2d496:	f019 f803 	bl	464a0 <bt_att_chan_create_pdu>
   2d49a:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   2d49c:	2800      	cmp	r0, #0
   2d49e:	d1ce      	bne.n	2d43e <att_write_rsp.constprop.0+0x2e>
			return BT_ATT_ERR_UNLIKELY;
   2d4a0:	200e      	movs	r0, #14
   2d4a2:	e7f3      	b.n	2d48c <att_write_rsp.constprop.0+0x7c>
	if (data.buf) {
   2d4a4:	9901      	ldr	r1, [sp, #4]
   2d4a6:	2900      	cmp	r1, #0
   2d4a8:	d0ef      	beq.n	2d48a <att_write_rsp.constprop.0+0x7a>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   2d4aa:	4620      	mov	r0, r4
   2d4ac:	f7ff fe9e 	bl	2d1ec <bt_att_chan_send_rsp.constprop.0>
   2d4b0:	e7eb      	b.n	2d48a <att_write_rsp.constprop.0+0x7a>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   2d4b2:	2012      	movs	r0, #18
   2d4b4:	e7ea      	b.n	2d48c <att_write_rsp.constprop.0+0x7c>
		return BT_ATT_ERR_INVALID_HANDLE;
   2d4b6:	2001      	movs	r0, #1
   2d4b8:	e7e8      	b.n	2d48c <att_write_rsp.constprop.0+0x7c>
   2d4ba:	bf00      	nop
   2d4bc:	00045e6f 	.word	0x00045e6f

0002d4c0 <att_read_group_req>:
{
   2d4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   2d4c4:	898e      	ldrh	r6, [r1, #12]
   2d4c6:	3e04      	subs	r6, #4
   2d4c8:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   2d4ca:	2e02      	cmp	r6, #2
{
   2d4cc:	4604      	mov	r4, r0
   2d4ce:	b08c      	sub	sp, #48	; 0x30
   2d4d0:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   2d4d2:	d001      	beq.n	2d4d8 <att_read_group_req+0x18>
   2d4d4:	2e10      	cmp	r6, #16
   2d4d6:	d165      	bne.n	2d5a4 <att_read_group_req+0xe4>
   2d4d8:	2104      	movs	r1, #4
   2d4da:	3008      	adds	r0, #8
   2d4dc:	f01a fa4b 	bl	47976 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2d4e0:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   2d4e4:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2d4e6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2d4e8:	1d01      	adds	r1, r0, #4
   2d4ea:	4632      	mov	r2, r6
   2d4ec:	4640      	mov	r0, r8
   2d4ee:	f017 fbf7 	bl	44ce0 <bt_uuid_create>
   2d4f2:	2800      	cmp	r0, #0
   2d4f4:	d058      	beq.n	2d5a8 <att_read_group_req+0xe8>
	if (!start || !end) {
   2d4f6:	2d00      	cmp	r5, #0
   2d4f8:	d035      	beq.n	2d566 <att_read_group_req+0xa6>
   2d4fa:	2600      	movs	r6, #0
   2d4fc:	b397      	cbz	r7, 2d564 <att_read_group_req+0xa4>
	if (start > end) {
   2d4fe:	42bd      	cmp	r5, r7
   2d500:	d831      	bhi.n	2d566 <att_read_group_req+0xa6>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   2d502:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2d506:	a901      	add	r1, sp, #4
   2d508:	4640      	mov	r0, r8
   2d50a:	f88d 6004 	strb.w	r6, [sp, #4]
   2d50e:	f8ad 3006 	strh.w	r3, [sp, #6]
   2d512:	f017 fbb7 	bl	44c84 <bt_uuid_cmp>
   2d516:	bb50      	cbnz	r0, 2d56e <att_read_group_req+0xae>
	struct bt_conn *conn = chan->chan.chan.conn;
   2d518:	68a6      	ldr	r6, [r4, #8]
	(void)memset(&data, 0, sizeof(data));
   2d51a:	2214      	movs	r2, #20
   2d51c:	2100      	movs	r1, #0
   2d51e:	a807      	add	r0, sp, #28
   2d520:	f017 fada 	bl	44ad8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   2d524:	2201      	movs	r2, #1
   2d526:	2111      	movs	r1, #17
   2d528:	4630      	mov	r0, r6
   2d52a:	f019 f821 	bl	46570 <bt_att_create_pdu>
   2d52e:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   2d530:	2800      	cmp	r0, #0
   2d532:	d039      	beq.n	2d5a8 <att_read_group_req+0xe8>
	return net_buf_simple_add(&buf->b, len);
   2d534:	2101      	movs	r1, #1
   2d536:	3008      	adds	r0, #8
	data.uuid = uuid;
   2d538:	e9cd 4807 	strd	r4, r8, [sp, #28]
   2d53c:	f01a f9f4 	bl	47928 <net_buf_simple_add>
	data.rsp->len = 0U;
   2d540:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   2d542:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   2d544:	4a19      	ldr	r2, [pc, #100]	; (2d5ac <att_read_group_req+0xec>)
	data.rsp->len = 0U;
   2d546:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   2d548:	4639      	mov	r1, r7
	data.group = NULL;
   2d54a:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   2d54c:	4628      	mov	r0, r5
   2d54e:	ab07      	add	r3, sp, #28
   2d550:	f018 fcbd 	bl	45ece <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   2d554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d556:	781b      	ldrb	r3, [r3, #0]
   2d558:	b9fb      	cbnz	r3, 2d59a <att_read_group_req+0xda>
		net_buf_unref(data.buf);
   2d55a:	9809      	ldr	r0, [sp, #36]	; 0x24
   2d55c:	f00f fda4 	bl	3d0a8 <net_buf_unref>
	if (!req) {
   2d560:	230a      	movs	r3, #10
   2d562:	e001      	b.n	2d568 <att_read_group_req+0xa8>
			*err = 0U;
   2d564:	463d      	mov	r5, r7
	if (!req) {
   2d566:	2301      	movs	r3, #1
   2d568:	462a      	mov	r2, r5
   2d56a:	2110      	movs	r1, #16
   2d56c:	e00e      	b.n	2d58c <att_read_group_req+0xcc>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   2d56e:	f642 0301 	movw	r3, #10241	; 0x2801
   2d572:	a907      	add	r1, sp, #28
   2d574:	4640      	mov	r0, r8
   2d576:	f88d 601c 	strb.w	r6, [sp, #28]
   2d57a:	f8ad 301e 	strh.w	r3, [sp, #30]
   2d57e:	f017 fb81 	bl	44c84 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   2d582:	2800      	cmp	r0, #0
   2d584:	d0c8      	beq.n	2d518 <att_read_group_req+0x58>
	if (!req) {
   2d586:	2310      	movs	r3, #16
   2d588:	462a      	mov	r2, r5
   2d58a:	4619      	mov	r1, r3
   2d58c:	4620      	mov	r0, r4
   2d58e:	f018 ffac 	bl	464ea <send_err_rsp.part.0>
		return 0;
   2d592:	2000      	movs	r0, #0
}
   2d594:	b00c      	add	sp, #48	; 0x30
   2d596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   2d59a:	9909      	ldr	r1, [sp, #36]	; 0x24
   2d59c:	4620      	mov	r0, r4
   2d59e:	f7ff fe25 	bl	2d1ec <bt_att_chan_send_rsp.constprop.0>
	return 0;
   2d5a2:	e7f6      	b.n	2d592 <att_read_group_req+0xd2>
		return BT_ATT_ERR_INVALID_PDU;
   2d5a4:	2004      	movs	r0, #4
   2d5a6:	e7f5      	b.n	2d594 <att_read_group_req+0xd4>
		return BT_ATT_ERR_UNLIKELY;
   2d5a8:	200e      	movs	r0, #14
   2d5aa:	e7f3      	b.n	2d594 <att_read_group_req+0xd4>
   2d5ac:	0002d07d 	.word	0x0002d07d

0002d5b0 <att_read_mult_req>:
{
   2d5b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   2d5b4:	6886      	ldr	r6, [r0, #8]
{
   2d5b6:	b085      	sub	sp, #20
   2d5b8:	4604      	mov	r4, r0
   2d5ba:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   2d5bc:	4630      	mov	r0, r6
   2d5be:	2101      	movs	r1, #1
   2d5c0:	f019 fc9f 	bl	46f02 <bt_gatt_change_aware>
   2d5c4:	b3b8      	cbz	r0, 2d636 <att_read_mult_req+0x86>
	(void)memset(&data, 0, sizeof(data));
   2d5c6:	2210      	movs	r2, #16
   2d5c8:	2100      	movs	r1, #0
   2d5ca:	4668      	mov	r0, sp
   2d5cc:	f017 fa84 	bl	44ad8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   2d5d0:	2200      	movs	r2, #0
   2d5d2:	210f      	movs	r1, #15
   2d5d4:	4630      	mov	r0, r6
   2d5d6:	f018 ffcb 	bl	46570 <bt_att_create_pdu>
   2d5da:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   2d5dc:	b368      	cbz	r0, 2d63a <att_read_mult_req+0x8a>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   2d5de:	f8df 9060 	ldr.w	r9, [pc, #96]	; 2d640 <att_read_mult_req+0x90>
	data.chan = chan;
   2d5e2:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   2d5e4:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   2d5e8:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   2d5ec:	89ab      	ldrh	r3, [r5, #12]
   2d5ee:	2b01      	cmp	r3, #1
   2d5f0:	d804      	bhi.n	2d5fc <att_read_mult_req+0x4c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   2d5f2:	9902      	ldr	r1, [sp, #8]
   2d5f4:	4620      	mov	r0, r4
   2d5f6:	f7ff fdf9 	bl	2d1ec <bt_att_chan_send_rsp.constprop.0>
	return 0;
   2d5fa:	e018      	b.n	2d62e <att_read_mult_req+0x7e>
   2d5fc:	4638      	mov	r0, r7
   2d5fe:	f01a f9c2 	bl	47986 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   2d602:	466b      	mov	r3, sp
   2d604:	464a      	mov	r2, r9
   2d606:	4601      	mov	r1, r0
   2d608:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   2d60a:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   2d60e:	f018 fc5e 	bl	45ece <bt_gatt_foreach_attr>
		if (data.err) {
   2d612:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2d616:	2b00      	cmp	r3, #0
   2d618:	d0e8      	beq.n	2d5ec <att_read_mult_req+0x3c>
			net_buf_unref(data.buf);
   2d61a:	9802      	ldr	r0, [sp, #8]
   2d61c:	f00f fd44 	bl	3d0a8 <net_buf_unref>
	if (!req) {
   2d620:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2d624:	4632      	mov	r2, r6
   2d626:	210e      	movs	r1, #14
   2d628:	4620      	mov	r0, r4
   2d62a:	f018 ff5e 	bl	464ea <send_err_rsp.part.0>
			return 0;
   2d62e:	2000      	movs	r0, #0
}
   2d630:	b005      	add	sp, #20
   2d632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   2d636:	2012      	movs	r0, #18
   2d638:	e7fa      	b.n	2d630 <att_read_mult_req+0x80>
		return BT_ATT_ERR_UNLIKELY;
   2d63a:	200e      	movs	r0, #14
   2d63c:	e7f8      	b.n	2d630 <att_read_mult_req+0x80>
   2d63e:	bf00      	nop
   2d640:	0004633b 	.word	0x0004633b

0002d644 <att_read_rsp>:
{
   2d644:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   2d648:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   2d64c:	4604      	mov	r4, r0
   2d64e:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   2d650:	4640      	mov	r0, r8
   2d652:	2101      	movs	r1, #1
{
   2d654:	4617      	mov	r7, r2
   2d656:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   2d658:	f019 fc53 	bl	46f02 <bt_gatt_change_aware>
   2d65c:	b380      	cbz	r0, 2d6c0 <att_read_rsp+0x7c>
	if (!handle) {
   2d65e:	b38d      	cbz	r5, 2d6c4 <att_read_rsp+0x80>
	(void)memset(&data, 0, sizeof(data));
   2d660:	2210      	movs	r2, #16
   2d662:	2100      	movs	r1, #0
   2d664:	4668      	mov	r0, sp
   2d666:	f017 fa37 	bl	44ad8 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   2d66a:	2200      	movs	r2, #0
   2d66c:	4639      	mov	r1, r7
   2d66e:	4640      	mov	r0, r8
   2d670:	f018 ff7e 	bl	46570 <bt_att_create_pdu>
   2d674:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   2d676:	b338      	cbz	r0, 2d6c8 <att_read_rsp+0x84>
	data.offset = offset;
   2d678:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2d67c:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   2d680:	2301      	movs	r3, #1
   2d682:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   2d686:	4a11      	ldr	r2, [pc, #68]	; (2d6cc <att_read_rsp+0x88>)
	data.chan = chan;
   2d688:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   2d68a:	466b      	mov	r3, sp
   2d68c:	4629      	mov	r1, r5
   2d68e:	4628      	mov	r0, r5
   2d690:	f018 fc1d 	bl	45ece <bt_gatt_foreach_attr>
	if (data.err) {
   2d694:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2d698:	b16b      	cbz	r3, 2d6b6 <att_read_rsp+0x72>
		net_buf_unref(data.buf);
   2d69a:	9802      	ldr	r0, [sp, #8]
   2d69c:	f00f fd04 	bl	3d0a8 <net_buf_unref>
	if (!req) {
   2d6a0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2d6a4:	462a      	mov	r2, r5
   2d6a6:	4631      	mov	r1, r6
   2d6a8:	4620      	mov	r0, r4
   2d6aa:	f018 ff1e 	bl	464ea <send_err_rsp.part.0>
		return 0;
   2d6ae:	2000      	movs	r0, #0
}
   2d6b0:	b004      	add	sp, #16
   2d6b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   2d6b6:	9902      	ldr	r1, [sp, #8]
   2d6b8:	4620      	mov	r0, r4
   2d6ba:	f7ff fd97 	bl	2d1ec <bt_att_chan_send_rsp.constprop.0>
	return 0;
   2d6be:	e7f6      	b.n	2d6ae <att_read_rsp+0x6a>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   2d6c0:	2012      	movs	r0, #18
   2d6c2:	e7f5      	b.n	2d6b0 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   2d6c4:	2001      	movs	r0, #1
   2d6c6:	e7f3      	b.n	2d6b0 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   2d6c8:	200e      	movs	r0, #14
   2d6ca:	e7f1      	b.n	2d6b0 <att_read_rsp+0x6c>
   2d6cc:	0004633b 	.word	0x0004633b

0002d6d0 <att_read_type_req>:
{
   2d6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   2d6d4:	898d      	ldrh	r5, [r1, #12]
   2d6d6:	3d04      	subs	r5, #4
   2d6d8:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   2d6da:	2d02      	cmp	r5, #2
{
   2d6dc:	4604      	mov	r4, r0
   2d6de:	b08c      	sub	sp, #48	; 0x30
   2d6e0:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   2d6e2:	d001      	beq.n	2d6e8 <att_read_type_req+0x18>
   2d6e4:	2d10      	cmp	r5, #16
   2d6e6:	d14c      	bne.n	2d782 <att_read_type_req+0xb2>
	return net_buf_simple_pull_mem(&buf->b, len);
   2d6e8:	2104      	movs	r1, #4
   2d6ea:	3008      	adds	r0, #8
   2d6ec:	f01a f943 	bl	47976 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2d6f0:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   2d6f4:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2d6f6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2d6f8:	1d01      	adds	r1, r0, #4
   2d6fa:	462a      	mov	r2, r5
   2d6fc:	4640      	mov	r0, r8
   2d6fe:	f017 faef 	bl	44ce0 <bt_uuid_create>
   2d702:	b188      	cbz	r0, 2d728 <att_read_type_req+0x58>
	if (!start || !end) {
   2d704:	b19e      	cbz	r6, 2d72e <att_read_type_req+0x5e>
   2d706:	b18f      	cbz	r7, 2d72c <att_read_type_req+0x5c>
	if (start > end) {
   2d708:	42b7      	cmp	r7, r6
   2d70a:	d310      	bcc.n	2d72e <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   2d70c:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   2d70e:	68a5      	ldr	r5, [r4, #8]
	(void)memset(&data, 0, sizeof(data));
   2d710:	2100      	movs	r1, #0
   2d712:	eb0d 0002 	add.w	r0, sp, r2
   2d716:	f017 f9df 	bl	44ad8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   2d71a:	2201      	movs	r2, #1
   2d71c:	2109      	movs	r1, #9
   2d71e:	4628      	mov	r0, r5
   2d720:	f018 ff26 	bl	46570 <bt_att_create_pdu>
   2d724:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   2d726:	b960      	cbnz	r0, 2d742 <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   2d728:	200e      	movs	r0, #14
   2d72a:	e007      	b.n	2d73c <att_read_type_req+0x6c>
			*err = 0U;
   2d72c:	463e      	mov	r6, r7
	if (!req) {
   2d72e:	2301      	movs	r3, #1
   2d730:	4632      	mov	r2, r6
   2d732:	2108      	movs	r1, #8
   2d734:	4620      	mov	r0, r4
   2d736:	f018 fed8 	bl	464ea <send_err_rsp.part.0>
		return 0;
   2d73a:	2000      	movs	r0, #0
}
   2d73c:	b00c      	add	sp, #48	; 0x30
   2d73e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   2d742:	2101      	movs	r1, #1
   2d744:	3008      	adds	r0, #8
	data.uuid = uuid;
   2d746:	e9cd 4806 	strd	r4, r8, [sp, #24]
   2d74a:	f01a f8ed 	bl	47928 <net_buf_simple_add>
	data.rsp->len = 0U;
   2d74e:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   2d750:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   2d752:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   2d754:	230a      	movs	r3, #10
   2d756:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   2d75a:	4a0b      	ldr	r2, [pc, #44]	; (2d788 <att_read_type_req+0xb8>)
   2d75c:	ab06      	add	r3, sp, #24
   2d75e:	4639      	mov	r1, r7
   2d760:	4630      	mov	r0, r6
   2d762:	f018 fbb4 	bl	45ece <bt_gatt_foreach_attr>
	if (data.err) {
   2d766:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   2d76a:	b12b      	cbz	r3, 2d778 <att_read_type_req+0xa8>
		net_buf_unref(data.buf);
   2d76c:	9808      	ldr	r0, [sp, #32]
   2d76e:	f00f fc9b 	bl	3d0a8 <net_buf_unref>
	if (!req) {
   2d772:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   2d776:	e7db      	b.n	2d730 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   2d778:	9908      	ldr	r1, [sp, #32]
   2d77a:	4620      	mov	r0, r4
   2d77c:	f7ff fd36 	bl	2d1ec <bt_att_chan_send_rsp.constprop.0>
	return 0;
   2d780:	e7db      	b.n	2d73a <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   2d782:	2004      	movs	r0, #4
   2d784:	e7da      	b.n	2d73c <att_read_type_req+0x6c>
   2d786:	bf00      	nop
   2d788:	0002d211 	.word	0x0002d211

0002d78c <att_find_type_req>:
{
   2d78c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d790:	460f      	mov	r7, r1
   2d792:	b086      	sub	sp, #24
   2d794:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   2d796:	2106      	movs	r1, #6
   2d798:	f107 0008 	add.w	r0, r7, #8
   2d79c:	f01a f8eb 	bl	47976 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2d7a0:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2d7a2:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   2d7a6:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   2d7a8:	f8d7 9008 	ldr.w	r9, [r7, #8]
	if (!start || !end) {
   2d7ac:	b1c5      	cbz	r5, 2d7e0 <att_find_type_req+0x54>
   2d7ae:	2300      	movs	r3, #0
   2d7b0:	f1b8 0f00 	cmp.w	r8, #0
   2d7b4:	d013      	beq.n	2d7de <att_find_type_req+0x52>
	if (start > end) {
   2d7b6:	4545      	cmp	r5, r8
   2d7b8:	d812      	bhi.n	2d7e0 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   2d7ba:	f88d 3000 	strb.w	r3, [sp]
   2d7be:	f88d 3004 	strb.w	r3, [sp, #4]
   2d7c2:	a901      	add	r1, sp, #4
   2d7c4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2d7c8:	4668      	mov	r0, sp
   2d7ca:	f8ad 2002 	strh.w	r2, [sp, #2]
   2d7ce:	f8ad 3006 	strh.w	r3, [sp, #6]
   2d7d2:	f017 fa57 	bl	44c84 <bt_uuid_cmp>
   2d7d6:	4606      	mov	r6, r0
   2d7d8:	b160      	cbz	r0, 2d7f4 <att_find_type_req+0x68>
	if (!req) {
   2d7da:	230a      	movs	r3, #10
   2d7dc:	e001      	b.n	2d7e2 <att_find_type_req+0x56>
			*err = 0U;
   2d7de:	4645      	mov	r5, r8
	if (!req) {
   2d7e0:	2301      	movs	r3, #1
   2d7e2:	462a      	mov	r2, r5
   2d7e4:	2106      	movs	r1, #6
   2d7e6:	4620      	mov	r0, r4
   2d7e8:	f018 fe7f 	bl	464ea <send_err_rsp.part.0>
		return 0;
   2d7ec:	2000      	movs	r0, #0
}
   2d7ee:	b006      	add	sp, #24
   2d7f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   2d7f4:	f8d4 a008 	ldr.w	sl, [r4, #8]
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   2d7f8:	7b3f      	ldrb	r7, [r7, #12]
	(void)memset(&data, 0, sizeof(data));
   2d7fa:	4601      	mov	r1, r0
   2d7fc:	2214      	movs	r2, #20
   2d7fe:	a801      	add	r0, sp, #4
   2d800:	f017 f96a 	bl	44ad8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   2d804:	4632      	mov	r2, r6
   2d806:	2107      	movs	r1, #7
   2d808:	4650      	mov	r0, sl
   2d80a:	f018 feb1 	bl	46570 <bt_att_create_pdu>
   2d80e:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   2d810:	b1d8      	cbz	r0, 2d84a <att_find_type_req+0xbe>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   2d812:	230a      	movs	r3, #10
   2d814:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   2d818:	4a0d      	ldr	r2, [pc, #52]	; (2d850 <att_find_type_req+0xc4>)
	data.chan = chan;
   2d81a:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   2d81c:	ab01      	add	r3, sp, #4
   2d81e:	4641      	mov	r1, r8
   2d820:	4628      	mov	r0, r5
	data.value = value;
   2d822:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.value_len = value_len;
   2d826:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   2d82a:	f018 fb50 	bl	45ece <bt_gatt_foreach_attr>
	if (data.err) {
   2d82e:	f89d 3015 	ldrb.w	r3, [sp, #21]
   2d832:	b12b      	cbz	r3, 2d840 <att_find_type_req+0xb4>
		net_buf_unref(data.buf);
   2d834:	9802      	ldr	r0, [sp, #8]
   2d836:	f00f fc37 	bl	3d0a8 <net_buf_unref>
	if (!req) {
   2d83a:	f89d 3015 	ldrb.w	r3, [sp, #21]
   2d83e:	e7d0      	b.n	2d7e2 <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   2d840:	9902      	ldr	r1, [sp, #8]
   2d842:	4620      	mov	r0, r4
   2d844:	f7ff fcd2 	bl	2d1ec <bt_att_chan_send_rsp.constprop.0>
	return 0;
   2d848:	e7d0      	b.n	2d7ec <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   2d84a:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   2d84c:	e7cf      	b.n	2d7ee <att_find_type_req+0x62>
   2d84e:	bf00      	nop
   2d850:	00045ee5 	.word	0x00045ee5

0002d854 <att_find_info_req>:
{
   2d854:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   2d856:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   2d858:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2d85a:	885e      	ldrh	r6, [r3, #2]
{
   2d85c:	b085      	sub	sp, #20
   2d85e:	4604      	mov	r4, r0
	if (!start || !end) {
   2d860:	b195      	cbz	r5, 2d888 <att_find_info_req+0x34>
   2d862:	b186      	cbz	r6, 2d886 <att_find_info_req+0x32>
	if (start > end) {
   2d864:	42ae      	cmp	r6, r5
   2d866:	d30f      	bcc.n	2d888 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   2d868:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   2d86a:	2210      	movs	r2, #16
   2d86c:	2100      	movs	r1, #0
   2d86e:	4668      	mov	r0, sp
   2d870:	f017 f932 	bl	44ad8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   2d874:	2200      	movs	r2, #0
   2d876:	2105      	movs	r1, #5
   2d878:	4638      	mov	r0, r7
   2d87a:	f018 fe79 	bl	46570 <bt_att_create_pdu>
   2d87e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   2d880:	b958      	cbnz	r0, 2d89a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   2d882:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   2d884:	e007      	b.n	2d896 <att_find_info_req+0x42>
			*err = 0U;
   2d886:	4635      	mov	r5, r6
	if (!req) {
   2d888:	2301      	movs	r3, #1
   2d88a:	462a      	mov	r2, r5
   2d88c:	2104      	movs	r1, #4
   2d88e:	4620      	mov	r0, r4
   2d890:	f018 fe2b 	bl	464ea <send_err_rsp.part.0>
		return 0;
   2d894:	2000      	movs	r0, #0
}
   2d896:	b005      	add	sp, #20
   2d898:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   2d89a:	466b      	mov	r3, sp
   2d89c:	4a08      	ldr	r2, [pc, #32]	; (2d8c0 <att_find_info_req+0x6c>)
	data.chan = chan;
   2d89e:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   2d8a0:	4631      	mov	r1, r6
   2d8a2:	4628      	mov	r0, r5
   2d8a4:	f018 fb13 	bl	45ece <bt_gatt_foreach_attr>
	if (!data.rsp) {
   2d8a8:	9b02      	ldr	r3, [sp, #8]
   2d8aa:	b923      	cbnz	r3, 2d8b6 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   2d8ac:	9801      	ldr	r0, [sp, #4]
   2d8ae:	f00f fbfb 	bl	3d0a8 <net_buf_unref>
	if (!req) {
   2d8b2:	230a      	movs	r3, #10
   2d8b4:	e7e9      	b.n	2d88a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   2d8b6:	9901      	ldr	r1, [sp, #4]
   2d8b8:	4620      	mov	r0, r4
   2d8ba:	f7ff fc97 	bl	2d1ec <bt_att_chan_send_rsp.constprop.0>
	return 0;
   2d8be:	e7e9      	b.n	2d894 <att_find_info_req+0x40>
   2d8c0:	0004600d 	.word	0x0004600d

0002d8c4 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   2d8c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   2d8c6:	2300      	movs	r3, #0
{
   2d8c8:	4605      	mov	r5, r0
   2d8ca:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   2d8cc:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   2d8ce:	f014 fb53 	bl	41f78 <z_impl_z_current_get>

	if (k_current_get() == bt_recv_thread_id) {
   2d8d2:	4b0b      	ldr	r3, [pc, #44]	; (2d900 <bt_att_req_alloc+0x3c>)
   2d8d4:	681b      	ldr	r3, [r3, #0]
   2d8d6:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   2d8d8:	bf04      	itt	eq
   2d8da:	2500      	moveq	r5, #0
   2d8dc:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   2d8de:	a901      	add	r1, sp, #4
   2d8e0:	4808      	ldr	r0, [pc, #32]	; (2d904 <bt_att_req_alloc+0x40>)
   2d8e2:	462a      	mov	r2, r5
   2d8e4:	4623      	mov	r3, r4
   2d8e6:	f013 fb9d 	bl	41024 <k_mem_slab_alloc>
   2d8ea:	4601      	mov	r1, r0
   2d8ec:	b930      	cbnz	r0, 2d8fc <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   2d8ee:	9801      	ldr	r0, [sp, #4]
   2d8f0:	221c      	movs	r2, #28
   2d8f2:	f017 f8f1 	bl	44ad8 <memset>

	return req;
   2d8f6:	9801      	ldr	r0, [sp, #4]
}
   2d8f8:	b003      	add	sp, #12
   2d8fa:	bd30      	pop	{r4, r5, pc}
		return NULL;
   2d8fc:	2000      	movs	r0, #0
   2d8fe:	e7fb      	b.n	2d8f8 <bt_att_req_alloc+0x34>
   2d900:	20001bf0 	.word	0x20001bf0
   2d904:	20000ad4 	.word	0x20000ad4

0002d908 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   2d908:	b507      	push	{r0, r1, r2, lr}
   2d90a:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   2d90c:	6880      	ldr	r0, [r0, #8]
   2d90e:	b120      	cbz	r0, 2d91a <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   2d910:	f00f fbca 	bl	3d0a8 <net_buf_unref>
		req->buf = NULL;
   2d914:	9b01      	ldr	r3, [sp, #4]
   2d916:	2200      	movs	r2, #0
   2d918:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   2d91a:	4803      	ldr	r0, [pc, #12]	; (2d928 <bt_att_req_free+0x20>)
   2d91c:	a901      	add	r1, sp, #4
   2d91e:	f01a fdfa 	bl	48516 <k_mem_slab_free>
}
   2d922:	b003      	add	sp, #12
   2d924:	f85d fb04 	ldr.w	pc, [sp], #4
   2d928:	20000ad4 	.word	0x20000ad4

0002d92c <att_handle_rsp>:
{
   2d92c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2d930:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   2d932:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
   2d936:	460e      	mov	r6, r1
   2d938:	4617      	mov	r7, r2
   2d93a:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   2d93c:	f01a ffb9 	bl	488b2 <k_work_cancel_delayable>
	if (!chan->req) {
   2d940:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   2d944:	b930      	cbnz	r0, 2d954 <att_handle_rsp+0x28>
	att_req_send_process(chan->att);
   2d946:	6820      	ldr	r0, [r4, #0]
   2d948:	f018 fd57 	bl	463fa <att_req_send_process>
}
   2d94c:	2000      	movs	r0, #0
   2d94e:	b002      	add	sp, #8
   2d950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   2d954:	4b10      	ldr	r3, [pc, #64]	; (2d998 <att_handle_rsp+0x6c>)
   2d956:	4298      	cmp	r0, r3
   2d958:	f04f 0800 	mov.w	r8, #0
   2d95c:	d102      	bne.n	2d964 <att_handle_rsp+0x38>
		chan->req = NULL;
   2d95e:	f8c4 80f4 	str.w	r8, [r4, #244]	; 0xf4
   2d962:	e7f0      	b.n	2d946 <att_handle_rsp+0x1a>
	func = chan->req->func;
   2d964:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   2d968:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   2d96c:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   2d970:	f7ff ffca 	bl	2d908 <bt_att_req_free>
	att_req_send_process(chan->att);
   2d974:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   2d976:	f8c4 80f4 	str.w	r8, [r4, #244]	; 0xf4
	att_req_send_process(chan->att);
   2d97a:	f018 fd3e 	bl	463fa <att_req_send_process>
	if (func) {
   2d97e:	f1b9 0f00 	cmp.w	r9, #0
   2d982:	d0e3      	beq.n	2d94c <att_handle_rsp+0x20>
		func(chan->att->conn, err, pdu, len, params);
   2d984:	6820      	ldr	r0, [r4, #0]
   2d986:	f8cd a000 	str.w	sl, [sp]
   2d98a:	6800      	ldr	r0, [r0, #0]
   2d98c:	463b      	mov	r3, r7
   2d98e:	4632      	mov	r2, r6
   2d990:	4629      	mov	r1, r5
   2d992:	47c8      	blx	r9
   2d994:	e7da      	b.n	2d94c <att_handle_rsp+0x20>
   2d996:	bf00      	nop
   2d998:	20001c54 	.word	0x20001c54

0002d99c <bt_att_disconnected>:
{
   2d99c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   2d99e:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   2d9a2:	b085      	sub	sp, #20
   2d9a4:	4604      	mov	r4, r0
	if (!att_chan->att) {
   2d9a6:	2d00      	cmp	r5, #0
   2d9a8:	d04d      	beq.n	2da46 <bt_att_disconnected+0xaa>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   2d9aa:	f500 719e 	add.w	r1, r0, #316	; 0x13c
   2d9ae:	f105 0024 	add.w	r0, r5, #36	; 0x24
   2d9b2:	f018 fc8c 	bl	462ce <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   2d9b6:	f1a4 0608 	sub.w	r6, r4, #8
   2d9ba:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
   2d9be:	2200      	movs	r2, #0
   2d9c0:	2300      	movs	r3, #0
   2d9c2:	4638      	mov	r0, r7
   2d9c4:	f019 ff53 	bl	4786e <net_buf_get>
   2d9c8:	4602      	mov	r2, r0
   2d9ca:	bb18      	cbnz	r0, 2da14 <bt_att_disconnected+0x78>
	if (chan->req) {
   2d9cc:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   2d9d0:	b123      	cbz	r3, 2d9dc <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   2d9d2:	4601      	mov	r1, r0
   2d9d4:	230e      	movs	r3, #14
   2d9d6:	4630      	mov	r0, r6
   2d9d8:	f7ff ffa8 	bl	2d92c <att_handle_rsp>
	chan->att = NULL;
   2d9dc:	2300      	movs	r3, #0
   2d9de:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   2d9e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2d9e4:	2b00      	cmp	r3, #0
   2d9e6:	d12e      	bne.n	2da46 <bt_att_disconnected+0xaa>
	att_reset(att);
   2d9e8:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   2d9ea:	9803      	ldr	r0, [sp, #12]
   2d9ec:	2200      	movs	r2, #0
   2d9ee:	2300      	movs	r3, #0
   2d9f0:	300c      	adds	r0, #12
   2d9f2:	f019 ff3c 	bl	4786e <net_buf_get>
   2d9f6:	b980      	cbnz	r0, 2da1a <bt_att_disconnected+0x7e>
	while (!sys_slist_is_empty(&att->reqs)) {
   2d9f8:	9803      	ldr	r0, [sp, #12]
	return list->head;
   2d9fa:	6845      	ldr	r5, [r0, #4]
   2d9fc:	b985      	cbnz	r5, 2da20 <bt_att_disconnected+0x84>
	att->conn = NULL;
   2d9fe:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   2da00:	a903      	add	r1, sp, #12
   2da02:	4812      	ldr	r0, [pc, #72]	; (2da4c <bt_att_disconnected+0xb0>)
   2da04:	f01a fd87 	bl	48516 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   2da08:	6820      	ldr	r0, [r4, #0]
}
   2da0a:	b005      	add	sp, #20
   2da0c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(ch->chan.conn);
   2da10:	f000 bf5e 	b.w	2e8d0 <bt_gatt_disconnected>
		net_buf_unref(buf);
   2da14:	f00f fb48 	bl	3d0a8 <net_buf_unref>
   2da18:	e7d1      	b.n	2d9be <bt_att_disconnected+0x22>
		net_buf_unref(buf);
   2da1a:	f00f fb45 	bl	3d0a8 <net_buf_unref>
   2da1e:	e7e4      	b.n	2d9ea <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2da20:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
   2da22:	686e      	ldr	r6, [r5, #4]
	return node->next;
   2da24:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   2da26:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2da28:	4295      	cmp	r5, r2
	list->tail = node;
   2da2a:	bf08      	it	eq
   2da2c:	6083      	streq	r3, [r0, #8]
   2da2e:	b136      	cbz	r6, 2da3e <bt_att_disconnected+0xa2>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   2da30:	69ab      	ldr	r3, [r5, #24]
   2da32:	9300      	str	r3, [sp, #0]
   2da34:	2300      	movs	r3, #0
   2da36:	6800      	ldr	r0, [r0, #0]
   2da38:	461a      	mov	r2, r3
   2da3a:	210e      	movs	r1, #14
   2da3c:	47b0      	blx	r6
		bt_att_req_free(req);
   2da3e:	4628      	mov	r0, r5
   2da40:	f7ff ff62 	bl	2d908 <bt_att_req_free>
   2da44:	e7d8      	b.n	2d9f8 <bt_att_disconnected+0x5c>
}
   2da46:	b005      	add	sp, #20
   2da48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2da4a:	bf00      	nop
   2da4c:	20000a80 	.word	0x20000a80

0002da50 <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   2da50:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   2da52:	4904      	ldr	r1, [pc, #16]	; (2da64 <db_hash_set+0x14>)
{
   2da54:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   2da56:	4618      	mov	r0, r3
   2da58:	2210      	movs	r2, #16
   2da5a:	47a0      	blx	r4

	BT_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash),
		       "Stored Hash: ");

	return 0;
}
   2da5c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   2da60:	bd10      	pop	{r4, pc}
   2da62:	bf00      	nop
   2da64:	20001118 	.word	0x20001118

0002da68 <find_cf_cfg>:
{
   2da68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2da6a:	4d0f      	ldr	r5, [pc, #60]	; (2daa8 <find_cf_cfg+0x40>)
   2da6c:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   2da6e:	2700      	movs	r7, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   2da70:	462e      	mov	r6, r5
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2da72:	1c68      	adds	r0, r5, #1
		if (!conn) {
   2da74:	b964      	cbnz	r4, 2da90 <find_cf_cfg+0x28>
	return memcmp(a, b, sizeof(*a));
   2da76:	2207      	movs	r2, #7
   2da78:	4669      	mov	r1, sp
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2da7a:	9400      	str	r4, [sp, #0]
   2da7c:	f8cd 4003 	str.w	r4, [sp, #3]
   2da80:	f017 f80f 	bl	44aa2 <memcmp>
   2da84:	b958      	cbnz	r0, 2da9e <find_cf_cfg+0x36>
}
   2da86:	4630      	mov	r0, r6
   2da88:	b003      	add	sp, #12
   2da8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   2da8c:	2701      	movs	r7, #1
   2da8e:	e7ef      	b.n	2da70 <find_cf_cfg+0x8>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   2da90:	4602      	mov	r2, r0
   2da92:	7829      	ldrb	r1, [r5, #0]
   2da94:	4620      	mov	r0, r4
   2da96:	f018 f84a 	bl	45b2e <bt_conn_is_peer_addr_le>
   2da9a:	2800      	cmp	r0, #0
   2da9c:	d1f3      	bne.n	2da86 <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   2da9e:	3510      	adds	r5, #16
   2daa0:	2f00      	cmp	r7, #0
   2daa2:	d0f3      	beq.n	2da8c <find_cf_cfg+0x24>
	return NULL;
   2daa4:	2600      	movs	r6, #0
   2daa6:	e7ee      	b.n	2da86 <find_cf_cfg+0x1e>
   2daa8:	20001c88 	.word	0x20001c88

0002daac <sc_store>:
{
   2daac:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   2daae:	4605      	mov	r5, r0
{
   2dab0:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   2dab2:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   2dab6:	4604      	mov	r4, r0
	if (cfg->id) {
   2dab8:	b19a      	cbz	r2, 2dae2 <sc_store+0x36>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   2daba:	ae02      	add	r6, sp, #8
   2dabc:	2104      	movs	r1, #4
   2dabe:	4630      	mov	r0, r6
   2dac0:	f014 fe45 	bl	4274e <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   2dac4:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   2dac6:	462b      	mov	r3, r5
   2dac8:	a803      	add	r0, sp, #12
   2daca:	4a07      	ldr	r2, [pc, #28]	; (2dae8 <sc_store+0x3c>)
   2dacc:	2124      	movs	r1, #36	; 0x24
   2dace:	f7fd f845 	bl	2ab5c <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   2dad2:	2204      	movs	r2, #4
   2dad4:	f104 0108 	add.w	r1, r4, #8
   2dad8:	a803      	add	r0, sp, #12
   2dada:	f7fb fea9 	bl	29830 <settings_save_one>
}
   2dade:	b00c      	add	sp, #48	; 0x30
   2dae0:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   2dae2:	9200      	str	r2, [sp, #0]
   2dae4:	e7ef      	b.n	2dac6 <sc_store+0x1a>
   2dae6:	bf00      	nop
   2dae8:	0004b0cd 	.word	0x0004b0cd

0002daec <db_hash_commit>:

static int db_hash_commit(void)
{
   2daec:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2daee:	2108      	movs	r1, #8
   2daf0:	4804      	ldr	r0, [pc, #16]	; (2db04 <db_hash_commit+0x18>)
   2daf2:	f018 fed4 	bl	4689e <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	k_work_reschedule(&db_hash.work, K_NO_WAIT);
   2daf6:	2200      	movs	r2, #0
   2daf8:	2300      	movs	r3, #0
   2dafa:	4803      	ldr	r0, [pc, #12]	; (2db08 <db_hash_commit+0x1c>)
   2dafc:	f013 ff52 	bl	419a4 <k_work_reschedule>

	return 0;
}
   2db00:	2000      	movs	r0, #0
   2db02:	bd08      	pop	{r3, pc}
   2db04:	200011d0 	.word	0x200011d0
   2db08:	20001128 	.word	0x20001128

0002db0c <read_ppcp>:
{
   2db0c:	b513      	push	{r0, r1, r4, lr}
   2db0e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   2db12:	4c0b      	ldr	r4, [pc, #44]	; (2db40 <read_ppcp+0x34>)
{
   2db14:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   2db16:	4a0b      	ldr	r2, [pc, #44]	; (2db44 <read_ppcp+0x38>)
	if (offset > value_len) {
   2db18:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   2db1a:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   2db1e:	d80b      	bhi.n	2db38 <read_ppcp+0x2c>
	len = MIN(buf_len, value_len - offset);
   2db20:	f1c1 0408 	rsb	r4, r1, #8
   2db24:	429c      	cmp	r4, r3
   2db26:	bfa8      	it	ge
   2db28:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2db2a:	4622      	mov	r2, r4
   2db2c:	4469      	add	r1, sp
   2db2e:	f016 ffc8 	bl	44ac2 <memcpy>
}
   2db32:	4620      	mov	r0, r4
   2db34:	b002      	add	sp, #8
   2db36:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2db38:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   2db3c:	e7f9      	b.n	2db32 <read_ppcp+0x26>
   2db3e:	bf00      	nop
   2db40:	000c0006 	.word	0x000c0006
   2db44:	0190001e 	.word	0x0190001e

0002db48 <sc_commit>:
{
   2db48:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2db4a:	4809      	ldr	r0, [pc, #36]	; (2db70 <sc_commit+0x28>)
   2db4c:	f06f 0102 	mvn.w	r1, #2
   2db50:	f018 ff09 	bl	46966 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2db54:	4806      	ldr	r0, [pc, #24]	; (2db70 <sc_commit+0x28>)
   2db56:	f018 fe49 	bl	467ec <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   2db5a:	07c3      	lsls	r3, r0, #31
   2db5c:	d505      	bpl.n	2db6a <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   2db5e:	4805      	ldr	r0, [pc, #20]	; (2db74 <sc_commit+0x2c>)
   2db60:	f44f 72a4 	mov.w	r2, #328	; 0x148
   2db64:	2300      	movs	r3, #0
   2db66:	f013 ff1d 	bl	419a4 <k_work_reschedule>
}
   2db6a:	2000      	movs	r0, #0
   2db6c:	bd08      	pop	{r3, pc}
   2db6e:	bf00      	nop
   2db70:	200011d0 	.word	0x200011d0
   2db74:	200011a0 	.word	0x200011a0

0002db78 <find_cf_cfg_by_addr>:
{
   2db78:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
   2db7a:	4c0e      	ldr	r4, [pc, #56]	; (2dbb4 <find_cf_cfg_by_addr+0x3c>)
   2db7c:	7823      	ldrb	r3, [r4, #0]
   2db7e:	4283      	cmp	r3, r0
{
   2db80:	4606      	mov	r6, r0
   2db82:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   2db84:	d00a      	beq.n	2db9c <find_cf_cfg_by_addr+0x24>
   2db86:	7c23      	ldrb	r3, [r4, #16]
   2db88:	42b3      	cmp	r3, r6
   2db8a:	d111      	bne.n	2dbb0 <find_cf_cfg_by_addr+0x38>
   2db8c:	490a      	ldr	r1, [pc, #40]	; (2dbb8 <find_cf_cfg_by_addr+0x40>)
   2db8e:	2207      	movs	r2, #7
   2db90:	4628      	mov	r0, r5
   2db92:	f016 ff86 	bl	44aa2 <memcmp>
   2db96:	b958      	cbnz	r0, 2dbb0 <find_cf_cfg_by_addr+0x38>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   2db98:	2001      	movs	r0, #1
   2db9a:	e006      	b.n	2dbaa <find_cf_cfg_by_addr+0x32>
   2db9c:	2207      	movs	r2, #7
   2db9e:	1c61      	adds	r1, r4, #1
   2dba0:	4628      	mov	r0, r5
   2dba2:	f016 ff7e 	bl	44aa2 <memcmp>
			if (id == cf_cfg[i].id &&
   2dba6:	2800      	cmp	r0, #0
   2dba8:	d1ed      	bne.n	2db86 <find_cf_cfg_by_addr+0xe>
				return &cf_cfg[i];
   2dbaa:	eb04 1000 	add.w	r0, r4, r0, lsl #4
   2dbae:	e000      	b.n	2dbb2 <find_cf_cfg_by_addr+0x3a>
	return NULL;
   2dbb0:	2000      	movs	r0, #0
}
   2dbb2:	bd70      	pop	{r4, r5, r6, pc}
   2dbb4:	20001c88 	.word	0x20001c88
   2dbb8:	20001c99 	.word	0x20001c99

0002dbbc <ccc_load>:
{
   2dbbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   2dbbe:	4b20      	ldr	r3, [pc, #128]	; (2dc40 <ccc_load+0x84>)
{
   2dbc0:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   2dbc2:	6882      	ldr	r2, [r0, #8]
   2dbc4:	429a      	cmp	r2, r3
   2dbc6:	d10a      	bne.n	2dbde <ccc_load+0x22>
	if (!load->entry) {
   2dbc8:	68a3      	ldr	r3, [r4, #8]
	ccc = attr->user_data;
   2dbca:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
   2dbcc:	b953      	cbnz	r3, 2dbe4 <ccc_load+0x28>
	cfg = ccc_find_cfg(ccc, addr, id);
   2dbce:	7922      	ldrb	r2, [r4, #4]
   2dbd0:	6821      	ldr	r1, [r4, #0]
   2dbd2:	4630      	mov	r0, r6
   2dbd4:	f018 ffbb 	bl	46b4e <ccc_find_cfg>
	if (!cfg) {
   2dbd8:	b108      	cbz	r0, 2dbde <ccc_load+0x22>
	clear_ccc_cfg(cfg);
   2dbda:	f018 feb6 	bl	4694a <clear_ccc_cfg>
		return BT_GATT_ITER_CONTINUE;
   2dbde:	2001      	movs	r0, #1
}
   2dbe0:	b002      	add	sp, #8
   2dbe2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (!load->count) {
   2dbe4:	68e0      	ldr	r0, [r4, #12]
   2dbe6:	2800      	cmp	r0, #0
   2dbe8:	d0fa      	beq.n	2dbe0 <ccc_load+0x24>
	if (load->entry->handle != handle) {
   2dbea:	881b      	ldrh	r3, [r3, #0]
   2dbec:	428b      	cmp	r3, r1
   2dbee:	d00a      	beq.n	2dc06 <ccc_load+0x4a>
		if (load->entry->handle < handle) {
   2dbf0:	d2f5      	bcs.n	2dbde <ccc_load+0x22>
	load->count--;
   2dbf2:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   2dbf4:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   2dbf6:	3801      	subs	r0, #1
	load->entry++;
   2dbf8:	3304      	adds	r3, #4
	load->count--;
   2dbfa:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   2dbfc:	3800      	subs	r0, #0
	load->entry++;
   2dbfe:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   2dc00:	bf18      	it	ne
   2dc02:	2001      	movne	r0, #1
   2dc04:	e7ec      	b.n	2dbe0 <ccc_load+0x24>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   2dc06:	7922      	ldrb	r2, [r4, #4]
   2dc08:	6821      	ldr	r1, [r4, #0]
   2dc0a:	4630      	mov	r0, r6
   2dc0c:	f018 ff9f 	bl	46b4e <ccc_find_cfg>
	if (!cfg) {
   2dc10:	4605      	mov	r5, r0
   2dc12:	b980      	cbnz	r0, 2dc36 <ccc_load+0x7a>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   2dc14:	9000      	str	r0, [sp, #0]
   2dc16:	4602      	mov	r2, r0
   2dc18:	f8cd 0003 	str.w	r0, [sp, #3]
   2dc1c:	4669      	mov	r1, sp
   2dc1e:	4630      	mov	r0, r6
   2dc20:	f018 ff95 	bl	46b4e <ccc_find_cfg>
		if (!cfg) {
   2dc24:	4605      	mov	r5, r0
   2dc26:	2800      	cmp	r0, #0
   2dc28:	d0e3      	beq.n	2dbf2 <ccc_load+0x36>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   2dc2a:	6821      	ldr	r1, [r4, #0]
   2dc2c:	3001      	adds	r0, #1
   2dc2e:	f018 fe45 	bl	468bc <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   2dc32:	7923      	ldrb	r3, [r4, #4]
   2dc34:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   2dc36:	68a3      	ldr	r3, [r4, #8]
   2dc38:	885b      	ldrh	r3, [r3, #2]
   2dc3a:	812b      	strh	r3, [r5, #8]
   2dc3c:	e7d9      	b.n	2dbf2 <ccc_load+0x36>
   2dc3e:	bf00      	nop
   2dc40:	0002dca5 	.word	0x0002dca5

0002dc44 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   2dc44:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   2dc46:	6881      	ldr	r1, [r0, #8]
{
   2dc48:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   2dc4a:	4a07      	ldr	r2, [pc, #28]	; (2dc68 <remove_peer_from_attr+0x24>)
   2dc4c:	4291      	cmp	r1, r2
   2dc4e:	d109      	bne.n	2dc64 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   2dc50:	791a      	ldrb	r2, [r3, #4]
   2dc52:	6819      	ldr	r1, [r3, #0]
   2dc54:	68c0      	ldr	r0, [r0, #12]
   2dc56:	f018 ff7a 	bl	46b4e <ccc_find_cfg>
	if (cfg) {
   2dc5a:	b118      	cbz	r0, 2dc64 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   2dc5c:	220a      	movs	r2, #10
   2dc5e:	2100      	movs	r1, #0
   2dc60:	f016 ff3a 	bl	44ad8 <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   2dc64:	2001      	movs	r0, #1
   2dc66:	bd08      	pop	{r3, pc}
   2dc68:	0002dca5 	.word	0x0002dca5

0002dc6c <ccc_save>:
{
   2dc6c:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   2dc6e:	4b0c      	ldr	r3, [pc, #48]	; (2dca0 <ccc_save+0x34>)
{
   2dc70:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   2dc72:	6882      	ldr	r2, [r0, #8]
   2dc74:	429a      	cmp	r2, r3
{
   2dc76:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   2dc78:	d10f      	bne.n	2dc9a <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   2dc7a:	7922      	ldrb	r2, [r4, #4]
   2dc7c:	6821      	ldr	r1, [r4, #0]
   2dc7e:	68c0      	ldr	r0, [r0, #12]
   2dc80:	f018 ff65 	bl	46b4e <ccc_find_cfg>
	if (!cfg) {
   2dc84:	b148      	cbz	r0, 2dc9a <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   2dc86:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   2dc8a:	8901      	ldrh	r1, [r0, #8]
   2dc8c:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   2dc90:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   2dc92:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   2dc94:	8151      	strh	r1, [r2, #10]
	save->count++;
   2dc96:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   2dc9a:	2001      	movs	r0, #1
   2dc9c:	bd38      	pop	{r3, r4, r5, pc}
   2dc9e:	bf00      	nop
   2dca0:	0002dca5 	.word	0x0002dca5

0002dca4 <bt_gatt_attr_write_ccc>:
{
   2dca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2dca8:	461f      	mov	r7, r3
   2dcaa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   2dcae:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   2dcb2:	4605      	mov	r5, r0
   2dcb4:	4688      	mov	r8, r1
	if (offset) {
   2dcb6:	2b00      	cmp	r3, #0
   2dcb8:	d15d      	bne.n	2dd76 <bt_gatt_attr_write_ccc+0xd2>
	if (!len || len > sizeof(uint16_t)) {
   2dcba:	1e7b      	subs	r3, r7, #1
   2dcbc:	2b01      	cmp	r3, #1
   2dcbe:	d85d      	bhi.n	2dd7c <bt_gatt_attr_write_ccc+0xd8>
	if (len < sizeof(uint16_t)) {
   2dcc0:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   2dcc2:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   2dcc4:	7816      	ldrb	r6, [r2, #0]
   2dcc6:	bf18      	it	ne
   2dcc8:	8816      	ldrhne	r6, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   2dcca:	f018 ff4e 	bl	46b6a <find_ccc_cfg>
	if (!cfg) {
   2dcce:	4604      	mov	r4, r0
   2dcd0:	b980      	cbnz	r0, 2dcf4 <bt_gatt_attr_write_ccc+0x50>
		if (!value) {
   2dcd2:	b916      	cbnz	r6, 2dcda <bt_gatt_attr_write_ccc+0x36>
			return len;
   2dcd4:	4638      	mov	r0, r7
}
   2dcd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   2dcda:	4649      	mov	r1, r9
   2dcdc:	f018 ff45 	bl	46b6a <find_ccc_cfg>
		if (!cfg) {
   2dce0:	4604      	mov	r4, r0
   2dce2:	2800      	cmp	r0, #0
   2dce4:	d04d      	beq.n	2dd82 <bt_gatt_attr_write_ccc+0xde>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   2dce6:	f105 0188 	add.w	r1, r5, #136	; 0x88
   2dcea:	3001      	adds	r0, #1
   2dcec:	f018 fde6 	bl	468bc <bt_addr_le_copy>
		cfg->id = conn->id;
   2dcf0:	7a2b      	ldrb	r3, [r5, #8]
   2dcf2:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   2dcf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   2dcf8:	bb8b      	cbnz	r3, 2dd5e <bt_gatt_attr_write_ccc+0xba>
	if (cfg->value != ccc->value) {
   2dcfa:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	value_changed = cfg->value != value;
   2dcfe:	f8b4 a008 	ldrh.w	sl, [r4, #8]
	cfg->value = value;
   2dd02:	8126      	strh	r6, [r4, #8]
	if (cfg->value != ccc->value) {
   2dd04:	42b3      	cmp	r3, r6
   2dd06:	d003      	beq.n	2dd10 <bt_gatt_attr_write_ccc+0x6c>
		gatt_ccc_changed(attr, ccc);
   2dd08:	4649      	mov	r1, r9
   2dd0a:	4640      	mov	r0, r8
   2dd0c:	f018 fd4b 	bl	467a6 <gatt_ccc_changed>
	if (value_changed) {
   2dd10:	45b2      	cmp	sl, r6
   2dd12:	d01e      	beq.n	2dd52 <bt_gatt_attr_write_ccc+0xae>
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   2dd14:	4628      	mov	r0, r5
   2dd16:	f7fe fdbf 	bl	2c898 <bt_conn_index>
   2dd1a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 2dd88 <bt_gatt_attr_write_ccc+0xe4>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   2dd1e:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
   2dd22:	429d      	cmp	r5, r3
   2dd24:	d015      	beq.n	2dd52 <bt_gatt_attr_write_ccc+0xae>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2dd26:	7a28      	ldrb	r0, [r5, #8]
   2dd28:	f105 0188 	add.w	r1, r5, #136	; 0x88
   2dd2c:	f017 fb5f 	bl	453ee <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   2dd30:	b178      	cbz	r0, 2dd52 <bt_gatt_attr_write_ccc+0xae>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   2dd32:	4628      	mov	r0, r5
   2dd34:	f7fe fdb0 	bl	2c898 <bt_conn_index>
   2dd38:	4681      	mov	r9, r0
			bt_conn_ref(conn);
   2dd3a:	4628      	mov	r0, r5
   2dd3c:	f017 fe46 	bl	459cc <bt_conn_ref>
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   2dd40:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   2dd44:	f848 0029 	str.w	r0, [r8, r9, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   2dd48:	2300      	movs	r3, #0
   2dd4a:	f108 0008 	add.w	r0, r8, #8
   2dd4e:	f013 fe29 	bl	419a4 <k_work_reschedule>
	if (!value) {
   2dd52:	2e00      	cmp	r6, #0
   2dd54:	d1be      	bne.n	2dcd4 <bt_gatt_attr_write_ccc+0x30>
		clear_ccc_cfg(cfg);
   2dd56:	4620      	mov	r0, r4
   2dd58:	f018 fdf7 	bl	4694a <clear_ccc_cfg>
   2dd5c:	e7ba      	b.n	2dcd4 <bt_gatt_attr_write_ccc+0x30>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   2dd5e:	4632      	mov	r2, r6
   2dd60:	4641      	mov	r1, r8
   2dd62:	4628      	mov	r0, r5
   2dd64:	4798      	blx	r3
		if (write < 0) {
   2dd66:	2800      	cmp	r0, #0
   2dd68:	dbb5      	blt.n	2dcd6 <bt_gatt_attr_write_ccc+0x32>
		if (write != sizeof(value) && write != 1) {
   2dd6a:	3801      	subs	r0, #1
   2dd6c:	2801      	cmp	r0, #1
   2dd6e:	d9c4      	bls.n	2dcfa <bt_gatt_attr_write_ccc+0x56>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   2dd70:	f06f 000d 	mvn.w	r0, #13
   2dd74:	e7af      	b.n	2dcd6 <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2dd76:	f06f 0006 	mvn.w	r0, #6
   2dd7a:	e7ac      	b.n	2dcd6 <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   2dd7c:	f06f 000c 	mvn.w	r0, #12
   2dd80:	e7a9      	b.n	2dcd6 <bt_gatt_attr_write_ccc+0x32>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   2dd82:	f06f 0010 	mvn.w	r0, #16
   2dd86:	e7a6      	b.n	2dcd6 <bt_gatt_attr_write_ccc+0x32>
   2dd88:	200010d0 	.word	0x200010d0

0002dd8c <find_sc_cfg>:
{
   2dd8c:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   2dd8e:	4c0e      	ldr	r4, [pc, #56]	; (2ddc8 <find_sc_cfg+0x3c>)
   2dd90:	7823      	ldrb	r3, [r4, #0]
   2dd92:	4283      	cmp	r3, r0
{
   2dd94:	4605      	mov	r5, r0
   2dd96:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   2dd98:	d00a      	beq.n	2ddb0 <find_sc_cfg+0x24>
   2dd9a:	7b23      	ldrb	r3, [r4, #12]
   2dd9c:	42ab      	cmp	r3, r5
   2dd9e:	d111      	bne.n	2ddc4 <find_sc_cfg+0x38>
   2dda0:	480a      	ldr	r0, [pc, #40]	; (2ddcc <find_sc_cfg+0x40>)
   2dda2:	2207      	movs	r2, #7
   2dda4:	4631      	mov	r1, r6
   2dda6:	f016 fe7c 	bl	44aa2 <memcmp>
   2ddaa:	b958      	cbnz	r0, 2ddc4 <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   2ddac:	2001      	movs	r0, #1
   2ddae:	e005      	b.n	2ddbc <find_sc_cfg+0x30>
   2ddb0:	2207      	movs	r2, #7
   2ddb2:	1c60      	adds	r0, r4, #1
   2ddb4:	f016 fe75 	bl	44aa2 <memcmp>
		if (id == sc_cfg[i].id &&
   2ddb8:	2800      	cmp	r0, #0
   2ddba:	d1ee      	bne.n	2dd9a <find_sc_cfg+0xe>
			return &sc_cfg[i];
   2ddbc:	230c      	movs	r3, #12
   2ddbe:	fb03 4000 	mla	r0, r3, r0, r4
   2ddc2:	e000      	b.n	2ddc6 <find_sc_cfg+0x3a>
	return NULL;
   2ddc4:	2000      	movs	r0, #0
}
   2ddc6:	bd70      	pop	{r4, r5, r6, pc}
   2ddc8:	20003aee 	.word	0x20003aee
   2ddcc:	20003afb 	.word	0x20003afb

0002ddd0 <bt_gatt_clear_sc>:
{
   2ddd0:	b570      	push	{r4, r5, r6, lr}
   2ddd2:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   2ddd4:	f7ff ffda 	bl	2dd8c <find_sc_cfg>
	if (!cfg) {
   2ddd8:	4604      	mov	r4, r0
   2ddda:	b1b8      	cbz	r0, 2de0c <bt_gatt_clear_sc+0x3c>
		if (cfg->id) {
   2dddc:	4605      	mov	r5, r0
   2ddde:	f815 2b01 	ldrb.w	r2, [r5], #1
   2dde2:	b1b2      	cbz	r2, 2de12 <bt_gatt_clear_sc+0x42>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   2dde4:	ae02      	add	r6, sp, #8
   2dde6:	2104      	movs	r1, #4
   2dde8:	4630      	mov	r0, r6
   2ddea:	f014 fcb0 	bl	4274e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   2ddee:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   2ddf0:	4a09      	ldr	r2, [pc, #36]	; (2de18 <bt_gatt_clear_sc+0x48>)
   2ddf2:	2124      	movs	r1, #36	; 0x24
   2ddf4:	462b      	mov	r3, r5
   2ddf6:	a803      	add	r0, sp, #12
   2ddf8:	f7fc feb0 	bl	2ab5c <bt_settings_encode_key>
		err = settings_delete(key);
   2ddfc:	a803      	add	r0, sp, #12
   2ddfe:	f015 fb67 	bl	434d0 <settings_delete>
	memset(cfg, 0, sizeof(*cfg));
   2de02:	220c      	movs	r2, #12
   2de04:	2100      	movs	r1, #0
   2de06:	4620      	mov	r0, r4
   2de08:	f016 fe66 	bl	44ad8 <memset>
}
   2de0c:	2000      	movs	r0, #0
   2de0e:	b00c      	add	sp, #48	; 0x30
   2de10:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   2de12:	9200      	str	r2, [sp, #0]
   2de14:	e7ec      	b.n	2ddf0 <bt_gatt_clear_sc+0x20>
   2de16:	bf00      	nop
   2de18:	0004b0cd 	.word	0x0004b0cd

0002de1c <disconnected_cb>:
{
   2de1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   2de20:	4b21      	ldr	r3, [pc, #132]	; (2dea8 <disconnected_cb+0x8c>)
{
   2de22:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   2de24:	6882      	ldr	r2, [r0, #8]
   2de26:	429a      	cmp	r2, r3
{
   2de28:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   2de2a:	d102      	bne.n	2de32 <disconnected_cb+0x16>
	ccc = attr->user_data;
   2de2c:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   2de2e:	8963      	ldrh	r3, [r4, #10]
   2de30:	bb13      	cbnz	r3, 2de78 <disconnected_cb+0x5c>
}
   2de32:	2001      	movs	r0, #1
   2de34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
   2de38:	f017 fde3 	bl	45a02 <bt_conn_unref>
		if (ccc->cfg_changed) {
   2de3c:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   2de3e:	2100      	movs	r1, #0
   2de40:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   2de42:	2b00      	cmp	r3, #0
   2de44:	d0f5      	beq.n	2de32 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   2de46:	4630      	mov	r0, r6
   2de48:	4798      	blx	r3
   2de4a:	e7f2      	b.n	2de32 <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2de4c:	f105 0888 	add.w	r8, r5, #136	; 0x88
   2de50:	7a28      	ldrb	r0, [r5, #8]
   2de52:	4641      	mov	r1, r8
   2de54:	f017 facb 	bl	453ee <bt_addr_le_is_bonded>
   2de58:	b948      	cbnz	r0, 2de6e <disconnected_cb+0x52>
				if (ccc == &sc_ccc) {
   2de5a:	4b14      	ldr	r3, [pc, #80]	; (2deac <disconnected_cb+0x90>)
   2de5c:	429c      	cmp	r4, r3
   2de5e:	d102      	bne.n	2de66 <disconnected_cb+0x4a>
					sc_clear(conn);
   2de60:	4628      	mov	r0, r5
   2de62:	f018 feee 	bl	46c42 <sc_clear>
				clear_ccc_cfg(cfg);
   2de66:	4620      	mov	r0, r4
   2de68:	f018 fd6f 	bl	4694a <clear_ccc_cfg>
   2de6c:	e7e6      	b.n	2de3c <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   2de6e:	4641      	mov	r1, r8
   2de70:	4638      	mov	r0, r7
   2de72:	f018 fd23 	bl	468bc <bt_addr_le_copy>
   2de76:	e7e1      	b.n	2de3c <disconnected_cb+0x20>
		if (!cfg->value) {
   2de78:	8923      	ldrh	r3, [r4, #8]
   2de7a:	2b00      	cmp	r3, #0
   2de7c:	d0de      	beq.n	2de3c <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   2de7e:	4627      	mov	r7, r4
   2de80:	4628      	mov	r0, r5
   2de82:	f817 1b01 	ldrb.w	r1, [r7], #1
   2de86:	463a      	mov	r2, r7
   2de88:	f017 fe51 	bl	45b2e <bt_conn_is_peer_addr_le>
   2de8c:	2800      	cmp	r0, #0
   2de8e:	d1dd      	bne.n	2de4c <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   2de90:	7820      	ldrb	r0, [r4, #0]
   2de92:	4639      	mov	r1, r7
   2de94:	f7fe fe34 	bl	2cb00 <bt_conn_lookup_addr_le>
			if (tmp) {
   2de98:	2800      	cmp	r0, #0
   2de9a:	d0cf      	beq.n	2de3c <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
   2de9c:	7b43      	ldrb	r3, [r0, #13]
   2de9e:	2b07      	cmp	r3, #7
   2dea0:	d1ca      	bne.n	2de38 <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
   2dea2:	f017 fdae 	bl	45a02 <bt_conn_unref>
	if (!value_used) {
   2dea6:	e7c4      	b.n	2de32 <disconnected_cb+0x16>
   2dea8:	0002dca5 	.word	0x0002dca5
   2deac:	200003d4 	.word	0x200003d4

0002deb0 <sc_indicate_rsp>:
{
   2deb0:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2deb2:	f06f 0102 	mvn.w	r1, #2
   2deb6:	4604      	mov	r4, r0
   2deb8:	480d      	ldr	r0, [pc, #52]	; (2def0 <sc_indicate_rsp+0x40>)
   2deba:	f018 fd54 	bl	46966 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2debe:	480c      	ldr	r0, [pc, #48]	; (2def0 <sc_indicate_rsp+0x40>)
   2dec0:	f018 fc94 	bl	467ec <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   2dec4:	07c2      	lsls	r2, r0, #31
   2dec6:	d504      	bpl.n	2ded2 <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   2dec8:	480a      	ldr	r0, [pc, #40]	; (2def4 <sc_indicate_rsp+0x44>)
   2deca:	2200      	movs	r2, #0
   2decc:	2300      	movs	r3, #0
   2dece:	f013 fd69 	bl	419a4 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
   2ded2:	4620      	mov	r0, r4
   2ded4:	f7ff fdc8 	bl	2da68 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   2ded8:	b140      	cbz	r0, 2deec <sc_indicate_rsp+0x3c>
   2deda:	7a03      	ldrb	r3, [r0, #8]
   2dedc:	07db      	lsls	r3, r3, #31
   2dede:	d505      	bpl.n	2deec <sc_indicate_rsp+0x3c>
}
   2dee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2dee4:	2101      	movs	r1, #1
   2dee6:	300c      	adds	r0, #12
   2dee8:	f018 bcd9 	b.w	4689e <atomic_or>
   2deec:	bd10      	pop	{r4, pc}
   2deee:	bf00      	nop
   2def0:	200011d0 	.word	0x200011d0
   2def4:	200011a0 	.word	0x200011a0

0002def8 <bt_gatt_init>:
{
   2def8:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2defa:	4b24      	ldr	r3, [pc, #144]	; (2df8c <bt_gatt_init+0x94>)
   2defc:	f3bf 8f5b 	dmb	ish
   2df00:	2201      	movs	r2, #1
   2df02:	e853 1f00 	ldrex	r1, [r3]
   2df06:	2900      	cmp	r1, #0
   2df08:	d103      	bne.n	2df12 <bt_gatt_init+0x1a>
   2df0a:	e843 2000 	strex	r0, r2, [r3]
   2df0e:	2800      	cmp	r0, #0
   2df10:	d1f7      	bne.n	2df02 <bt_gatt_init+0xa>
   2df12:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   2df16:	d138      	bne.n	2df8a <bt_gatt_init+0x92>
   2df18:	f3bf 8f5b 	dmb	ish
   2df1c:	4b1c      	ldr	r3, [pc, #112]	; (2df90 <bt_gatt_init+0x98>)
   2df1e:	e853 1f00 	ldrex	r1, [r3]
   2df22:	2900      	cmp	r1, #0
   2df24:	d103      	bne.n	2df2e <bt_gatt_init+0x36>
   2df26:	e843 2000 	strex	r0, r2, [r3]
   2df2a:	2800      	cmp	r0, #0
   2df2c:	d1f7      	bne.n	2df1e <bt_gatt_init+0x26>
   2df2e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   2df32:	d108      	bne.n	2df46 <bt_gatt_init+0x4e>
   2df34:	4917      	ldr	r1, [pc, #92]	; (2df94 <bt_gatt_init+0x9c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   2df36:	4a18      	ldr	r2, [pc, #96]	; (2df98 <bt_gatt_init+0xa0>)
   2df38:	880b      	ldrh	r3, [r1, #0]
   2df3a:	4c18      	ldr	r4, [pc, #96]	; (2df9c <bt_gatt_init+0xa4>)
	if (!atomic_cas(&service_init, 0, 1)) {
   2df3c:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   2df3e:	42a2      	cmp	r2, r4
   2df40:	d31d      	bcc.n	2df7e <bt_gatt_init+0x86>
   2df42:	b100      	cbz	r0, 2df46 <bt_gatt_init+0x4e>
   2df44:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   2df46:	4b16      	ldr	r3, [pc, #88]	; (2dfa0 <bt_gatt_init+0xa8>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   2df48:	4916      	ldr	r1, [pc, #88]	; (2dfa4 <bt_gatt_init+0xac>)
   2df4a:	4817      	ldr	r0, [pc, #92]	; (2dfa8 <bt_gatt_init+0xb0>)
   2df4c:	2200      	movs	r2, #0
	list->tail = NULL;
   2df4e:	e9c3 2200 	strd	r2, r2, [r3]
   2df52:	f01a fca2 	bl	4889a <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   2df56:	f44f 72a4 	mov.w	r2, #328	; 0x148
   2df5a:	2300      	movs	r3, #0
   2df5c:	4812      	ldr	r0, [pc, #72]	; (2dfa8 <bt_gatt_init+0xb0>)
   2df5e:	f013 fced 	bl	4193c <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   2df62:	4912      	ldr	r1, [pc, #72]	; (2dfac <bt_gatt_init+0xb4>)
   2df64:	4812      	ldr	r0, [pc, #72]	; (2dfb0 <bt_gatt_init+0xb8>)
   2df66:	f01a fc98 	bl	4889a <k_work_init_delayable>
   2df6a:	2102      	movs	r1, #2
   2df6c:	4811      	ldr	r0, [pc, #68]	; (2dfb4 <bt_gatt_init+0xbc>)
   2df6e:	f018 fc96 	bl	4689e <atomic_or>
}
   2df72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   2df76:	4910      	ldr	r1, [pc, #64]	; (2dfb8 <bt_gatt_init+0xc0>)
   2df78:	4810      	ldr	r0, [pc, #64]	; (2dfbc <bt_gatt_init+0xc4>)
   2df7a:	f01a bc8e 	b.w	4889a <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   2df7e:	6850      	ldr	r0, [r2, #4]
   2df80:	4403      	add	r3, r0
   2df82:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   2df84:	3208      	adds	r2, #8
   2df86:	2001      	movs	r0, #1
   2df88:	e7d9      	b.n	2df3e <bt_gatt_init+0x46>
}
   2df8a:	bd10      	pop	{r4, pc}
   2df8c:	20001cac 	.word	0x20001cac
   2df90:	20001ca8 	.word	0x20001ca8
   2df94:	20003b06 	.word	0x20003b06
   2df98:	000492e0 	.word	0x000492e0
   2df9c:	00049308 	.word	0x00049308
   2dfa0:	20001cb0 	.word	0x20001cb0
   2dfa4:	0002e149 	.word	0x0002e149
   2dfa8:	20001128 	.word	0x20001128
   2dfac:	0002e42d 	.word	0x0002e42d
   2dfb0:	200011a0 	.word	0x200011a0
   2dfb4:	200011d0 	.word	0x200011d0
   2dfb8:	00046f51 	.word	0x00046f51
   2dfbc:	200010d8 	.word	0x200010d8

0002dfc0 <bt_gatt_attr_get_handle>:
{
   2dfc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   2dfc4:	4603      	mov	r3, r0
   2dfc6:	b148      	cbz	r0, 2dfdc <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   2dfc8:	8a00      	ldrh	r0, [r0, #16]
   2dfca:	b938      	cbnz	r0, 2dfdc <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2dfcc:	4912      	ldr	r1, [pc, #72]	; (2e018 <bt_gatt_attr_get_handle+0x58>)
   2dfce:	f8df e04c 	ldr.w	lr, [pc, #76]	; 2e01c <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   2dfd2:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   2dfd4:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2dfd8:	4571      	cmp	r1, lr
   2dfda:	d301      	bcc.n	2dfe0 <bt_gatt_attr_get_handle+0x20>
}
   2dfdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   2dfe0:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   2dfe4:	42bb      	cmp	r3, r7
   2dfe6:	d304      	bcc.n	2dff2 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   2dfe8:	fb0c 7206 	mla	r2, ip, r6, r7
   2dfec:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   2dfee:	4293      	cmp	r3, r2
   2dff0:	d90e      	bls.n	2e010 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   2dff2:	4434      	add	r4, r6
   2dff4:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2dff6:	3108      	adds	r1, #8
   2dff8:	4614      	mov	r4, r2
   2dffa:	e7ed      	b.n	2dfd8 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   2dffc:	fb0c 7805 	mla	r8, ip, r5, r7
   2e000:	4543      	cmp	r3, r8
   2e002:	d007      	beq.n	2e014 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   2e004:	3501      	adds	r5, #1
   2e006:	1962      	adds	r2, r4, r5
   2e008:	42b5      	cmp	r5, r6
   2e00a:	b292      	uxth	r2, r2
   2e00c:	d1f6      	bne.n	2dffc <bt_gatt_attr_get_handle+0x3c>
   2e00e:	e7f2      	b.n	2dff6 <bt_gatt_attr_get_handle+0x36>
   2e010:	2500      	movs	r5, #0
   2e012:	e7f8      	b.n	2e006 <bt_gatt_attr_get_handle+0x46>
   2e014:	4610      	mov	r0, r2
   2e016:	e7e1      	b.n	2dfdc <bt_gatt_attr_get_handle+0x1c>
   2e018:	000492e0 	.word	0x000492e0
   2e01c:	00049308 	.word	0x00049308

0002e020 <bt_gatt_foreach_attr_type>:
{
   2e020:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e024:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   2e028:	9100      	str	r1, [sp, #0]
   2e02a:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   2e02c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2e030:	2d00      	cmp	r5, #0
   2e032:	bf08      	it	eq
   2e034:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   2e036:	4b24      	ldr	r3, [pc, #144]	; (2e0c8 <bt_gatt_foreach_attr_type+0xa8>)
   2e038:	881b      	ldrh	r3, [r3, #0]
   2e03a:	4283      	cmp	r3, r0
{
   2e03c:	4607      	mov	r7, r0
   2e03e:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   2e040:	d23c      	bcs.n	2e0bc <bt_gatt_foreach_attr_type+0x9c>
}
   2e042:	b003      	add	sp, #12
   2e044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   2e048:	6873      	ldr	r3, [r6, #4]
   2e04a:	4423      	add	r3, r4
   2e04c:	42bb      	cmp	r3, r7
   2e04e:	d232      	bcs.n	2e0b6 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   2e050:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2e052:	3608      	adds	r6, #8
   2e054:	4b1d      	ldr	r3, [pc, #116]	; (2e0cc <bt_gatt_foreach_attr_type+0xac>)
   2e056:	429e      	cmp	r6, r3
   2e058:	d3f6      	bcc.n	2e048 <bt_gatt_foreach_attr_type+0x28>
   2e05a:	e7f2      	b.n	2e042 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   2e05c:	5889      	ldr	r1, [r1, r2]
   2e05e:	9301      	str	r3, [sp, #4]
   2e060:	4640      	mov	r0, r8
   2e062:	f016 fe0f 	bl	44c84 <bt_uuid_cmp>
   2e066:	9b01      	ldr	r3, [sp, #4]
   2e068:	b190      	cbz	r0, 2e090 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   2e06a:	3401      	adds	r4, #1
   2e06c:	f10a 0a01 	add.w	sl, sl, #1
   2e070:	b2a4      	uxth	r4, r4
   2e072:	6873      	ldr	r3, [r6, #4]
   2e074:	4553      	cmp	r3, sl
   2e076:	d9ec      	bls.n	2e052 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   2e078:	9b00      	ldr	r3, [sp, #0]
   2e07a:	429c      	cmp	r4, r3
   2e07c:	d8e1      	bhi.n	2e042 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   2e07e:	42bc      	cmp	r4, r7
				if (gatt_foreach_iter(&static_svc->attrs[i],
   2e080:	6831      	ldr	r1, [r6, #0]
	if (handle < start_handle) {
   2e082:	d3f2      	bcc.n	2e06a <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   2e084:	fb0b f20a 	mul.w	r2, fp, sl
   2e088:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   2e08a:	f1b8 0f00 	cmp.w	r8, #0
   2e08e:	d1e5      	bne.n	2e05c <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   2e090:	f1b9 0f00 	cmp.w	r9, #0
   2e094:	d10b      	bne.n	2e0ae <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   2e096:	3d01      	subs	r5, #1
   2e098:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   2e09a:	4618      	mov	r0, r3
   2e09c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2e09e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2e0a0:	4621      	mov	r1, r4
   2e0a2:	4798      	blx	r3
	if (!*num_matches) {
   2e0a4:	2d00      	cmp	r5, #0
   2e0a6:	d0cc      	beq.n	2e042 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   2e0a8:	2800      	cmp	r0, #0
   2e0aa:	d1de      	bne.n	2e06a <bt_gatt_foreach_attr_type+0x4a>
   2e0ac:	e7c9      	b.n	2e042 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   2e0ae:	68da      	ldr	r2, [r3, #12]
   2e0b0:	4591      	cmp	r9, r2
   2e0b2:	d1da      	bne.n	2e06a <bt_gatt_foreach_attr_type+0x4a>
   2e0b4:	e7ef      	b.n	2e096 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   2e0b6:	f04f 0a00 	mov.w	sl, #0
   2e0ba:	e7da      	b.n	2e072 <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2e0bc:	4e04      	ldr	r6, [pc, #16]	; (2e0d0 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   2e0be:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   2e0c0:	f04f 0b14 	mov.w	fp, #20
   2e0c4:	e7c6      	b.n	2e054 <bt_gatt_foreach_attr_type+0x34>
   2e0c6:	bf00      	nop
   2e0c8:	20003b06 	.word	0x20003b06
   2e0cc:	00049308 	.word	0x00049308
   2e0d0:	000492e0 	.word	0x000492e0

0002e0d4 <db_hash_gen>:
{
   2e0d4:	b530      	push	{r4, r5, lr}
   2e0d6:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
   2e0d8:	2400      	movs	r4, #0
{
   2e0da:	4605      	mov	r5, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   2e0dc:	aa1c      	add	r2, sp, #112	; 0x70
   2e0de:	4669      	mov	r1, sp
   2e0e0:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   2e0e2:	e9cd 4400 	strd	r4, r4, [sp]
   2e0e6:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   2e0ea:	f016 fb57 	bl	4479c <tc_cmac_setup>
   2e0ee:	b308      	cbz	r0, 2e134 <db_hash_gen+0x60>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   2e0f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2e0f4:	2001      	movs	r0, #1
   2e0f6:	4a10      	ldr	r2, [pc, #64]	; (2e138 <db_hash_gen+0x64>)
   2e0f8:	ab04      	add	r3, sp, #16
   2e0fa:	f018 fe99 	bl	46e30 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   2e0fe:	480f      	ldr	r0, [pc, #60]	; (2e13c <db_hash_gen+0x68>)
   2e100:	a904      	add	r1, sp, #16
   2e102:	f016 fbe0 	bl	448c6 <tc_cmac_final>
   2e106:	b1a8      	cbz	r0, 2e134 <db_hash_gen+0x60>
   2e108:	4b0c      	ldr	r3, [pc, #48]	; (2e13c <db_hash_gen+0x68>)
   2e10a:	f103 0210 	add.w	r2, r3, #16
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   2e10e:	3401      	adds	r4, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
   2e110:	7819      	ldrb	r1, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2e112:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   2e116:	f803 0b01 	strb.w	r0, [r3], #1
	for (i = 0; i < (length/2); i++) {
   2e11a:	2c08      	cmp	r4, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2e11c:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   2e11e:	d1f6      	bne.n	2e10e <db_hash_gen+0x3a>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   2e120:	b125      	cbz	r5, 2e12c <db_hash_gen+0x58>
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   2e122:	4906      	ldr	r1, [pc, #24]	; (2e13c <db_hash_gen+0x68>)
   2e124:	4806      	ldr	r0, [pc, #24]	; (2e140 <db_hash_gen+0x6c>)
   2e126:	2210      	movs	r2, #16
   2e128:	f7fb fb82 	bl	29830 <settings_save_one>
   2e12c:	4805      	ldr	r0, [pc, #20]	; (2e144 <db_hash_gen+0x70>)
   2e12e:	2104      	movs	r1, #4
   2e130:	f018 fbb5 	bl	4689e <atomic_or>
}
   2e134:	b049      	add	sp, #292	; 0x124
   2e136:	bd30      	pop	{r4, r5, pc}
   2e138:	000467f9 	.word	0x000467f9
   2e13c:	20001108 	.word	0x20001108
   2e140:	0004b0b5 	.word	0x0004b0b5
   2e144:	200011d0 	.word	0x200011d0

0002e148 <db_hash_process>:
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2e148:	f06f 0108 	mvn.w	r1, #8
{
   2e14c:	b508      	push	{r3, lr}
   2e14e:	4828      	ldr	r0, [pc, #160]	; (2e1f0 <db_hash_process+0xa8>)
   2e150:	f018 fc09 	bl	46966 <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   2e154:	0701      	lsls	r1, r0, #28
   2e156:	d545      	bpl.n	2e1e4 <db_hash_process+0x9c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2e158:	4825      	ldr	r0, [pc, #148]	; (2e1f0 <db_hash_process+0xa8>)
   2e15a:	f018 fb47 	bl	467ec <atomic_get>
   2e15e:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   2e160:	075a      	lsls	r2, r3, #29
   2e162:	f3c0 0080 	ubfx	r0, r0, #2, #1
   2e166:	d401      	bmi.n	2e16c <db_hash_process+0x24>
			db_hash_gen(false);
   2e168:	f7ff ffb4 	bl	2e0d4 <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   2e16c:	4921      	ldr	r1, [pc, #132]	; (2e1f4 <db_hash_process+0xac>)
   2e16e:	2210      	movs	r2, #16
   2e170:	1888      	adds	r0, r1, r2
   2e172:	f016 fc96 	bl	44aa2 <memcmp>
   2e176:	b948      	cbnz	r0, 2e18c <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   2e178:	481f      	ldr	r0, [pc, #124]	; (2e1f8 <db_hash_process+0xb0>)
   2e17a:	f01a fb9a 	bl	488b2 <k_work_cancel_delayable>
}
   2e17e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2e182:	481b      	ldr	r0, [pc, #108]	; (2e1f0 <db_hash_process+0xa8>)
   2e184:	f06f 0101 	mvn.w	r1, #1
   2e188:	f018 bbed 	b.w	46966 <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2e18c:	4818      	ldr	r0, [pc, #96]	; (2e1f0 <db_hash_process+0xa8>)
   2e18e:	2101      	movs	r1, #1
   2e190:	f018 fb85 	bl	4689e <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   2e194:	f010 0f01 	tst.w	r0, #1
   2e198:	4b18      	ldr	r3, [pc, #96]	; (2e1fc <db_hash_process+0xb4>)
   2e19a:	d113      	bne.n	2e1c4 <db_hash_process+0x7c>
		gatt_sc.start = start;
   2e19c:	4a18      	ldr	r2, [pc, #96]	; (2e200 <db_hash_process+0xb8>)
   2e19e:	619a      	str	r2, [r3, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2e1a0:	4813      	ldr	r0, [pc, #76]	; (2e1f0 <db_hash_process+0xa8>)
   2e1a2:	f018 fb23 	bl	467ec <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   2e1a6:	0783      	lsls	r3, r0, #30
   2e1a8:	d405      	bmi.n	2e1b6 <db_hash_process+0x6e>
	k_work_reschedule(&gatt_sc.work, timeout);
   2e1aa:	4813      	ldr	r0, [pc, #76]	; (2e1f8 <db_hash_process+0xb0>)
   2e1ac:	f44f 72a4 	mov.w	r2, #328	; 0x148
   2e1b0:	2300      	movs	r3, #0
   2e1b2:	f013 fbf7 	bl	419a4 <k_work_reschedule>
}
   2e1b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   2e1ba:	490e      	ldr	r1, [pc, #56]	; (2e1f4 <db_hash_process+0xac>)
   2e1bc:	4811      	ldr	r0, [pc, #68]	; (2e204 <db_hash_process+0xbc>)
   2e1be:	2210      	movs	r2, #16
   2e1c0:	f7fb bb36 	b.w	29830 <settings_save_one>
	if (new_start >= *start && new_end <= *end) {
   2e1c4:	8b1a      	ldrh	r2, [r3, #24]
   2e1c6:	8b58      	ldrh	r0, [r3, #26]
   2e1c8:	2a01      	cmp	r2, #1
   2e1ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2e1ce:	d805      	bhi.n	2e1dc <db_hash_process+0x94>
   2e1d0:	4290      	cmp	r0, r2
   2e1d2:	d0f0      	beq.n	2e1b6 <db_hash_process+0x6e>
		*end = new_end;
   2e1d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2e1d8:	835a      	strh	r2, [r3, #26]
   2e1da:	e7e1      	b.n	2e1a0 <db_hash_process+0x58>
	if (*end < new_end) {
   2e1dc:	4290      	cmp	r0, r2
		*start = new_start;
   2e1de:	8319      	strh	r1, [r3, #24]
	if (*end < new_end) {
   2e1e0:	d0de      	beq.n	2e1a0 <db_hash_process+0x58>
   2e1e2:	e7f7      	b.n	2e1d4 <db_hash_process+0x8c>
}
   2e1e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	db_hash_gen(true);
   2e1e8:	2001      	movs	r0, #1
   2e1ea:	f7ff bf73 	b.w	2e0d4 <db_hash_gen>
   2e1ee:	bf00      	nop
   2e1f0:	200011d0 	.word	0x200011d0
   2e1f4:	20001108 	.word	0x20001108
   2e1f8:	200011a0 	.word	0x200011a0
   2e1fc:	20001180 	.word	0x20001180
   2e200:	ffff0001 	.word	0xffff0001
   2e204:	0004b0b5 	.word	0x0004b0b5

0002e208 <ccc_set_direct>:
{
   2e208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e20c:	b0b8      	sub	sp, #224	; 0xe0
   2e20e:	460c      	mov	r4, r1
   2e210:	4616      	mov	r6, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   2e212:	4921      	ldr	r1, [pc, #132]	; (2e298 <ccc_set_direct+0x90>)
   2e214:	983e      	ldr	r0, [sp, #248]	; 0xf8
   2e216:	466a      	mov	r2, sp
{
   2e218:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   2e21a:	f015 f95d 	bl	434d8 <settings_name_steq>
   2e21e:	2800      	cmp	r0, #0
   2e220:	d037      	beq.n	2e292 <ccc_set_direct+0x8a>
		return ccc_set(name, len, read_cb, cb_arg);
   2e222:	9d00      	ldr	r5, [sp, #0]
		settings_name_next(name, &next);
   2e224:	a901      	add	r1, sp, #4
   2e226:	4628      	mov	r0, r5
   2e228:	f015 f97a 	bl	43520 <settings_name_next>
		if (!name) {
   2e22c:	b165      	cbz	r5, 2e248 <ccc_set_direct+0x40>
		} else if (!next) {
   2e22e:	9801      	ldr	r0, [sp, #4]
   2e230:	b970      	cbnz	r0, 2e250 <ccc_set_direct+0x48>
		err = bt_settings_decode_key(name, &addr);
   2e232:	f10d 0808 	add.w	r8, sp, #8
			load.addr_with_id.id = BT_ID_DEFAULT;
   2e236:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   2e238:	4628      	mov	r0, r5
   2e23a:	4641      	mov	r1, r8
			load.addr_with_id.id = BT_ID_DEFAULT;
   2e23c:	f88d 3014 	strb.w	r3, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   2e240:	f016 fcfa 	bl	44c38 <bt_settings_decode_key>
		if (err) {
   2e244:	4605      	mov	r5, r0
   2e246:	b150      	cbz	r0, 2e25e <ccc_set_direct+0x56>
			return -EINVAL;
   2e248:	f06f 0415 	mvn.w	r4, #21
   2e24c:	4625      	mov	r5, r4
   2e24e:	e01a      	b.n	2e286 <ccc_set_direct+0x7e>
			unsigned long next_id = strtoul(next, NULL, 10);
   2e250:	220a      	movs	r2, #10
   2e252:	2100      	movs	r1, #0
   2e254:	f016 fb7d 	bl	44952 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   2e258:	2800      	cmp	r0, #0
   2e25a:	d0ea      	beq.n	2e232 <ccc_set_direct+0x2a>
   2e25c:	e7f4      	b.n	2e248 <ccc_set_direct+0x40>
		load.addr_with_id.addr = &addr;
   2e25e:	f8cd 8010 	str.w	r8, [sp, #16]
		if (len_rd) {
   2e262:	b1a4      	cbz	r4, 2e28e <ccc_set_direct+0x86>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   2e264:	22c0      	movs	r2, #192	; 0xc0
   2e266:	a908      	add	r1, sp, #32
   2e268:	4638      	mov	r0, r7
   2e26a:	47b0      	blx	r6
			if (len < 0) {
   2e26c:	1e04      	subs	r4, r0, #0
   2e26e:	dbed      	blt.n	2e24c <ccc_set_direct+0x44>
			load.count = len / sizeof(*ccc_store);
   2e270:	08a4      	lsrs	r4, r4, #2
			for (size_t i = 0; i < load.count; i++) {
   2e272:	ab08      	add	r3, sp, #32
			load.count = len / sizeof(*ccc_store);
   2e274:	e9cd 3406 	strd	r3, r4, [sp, #24]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   2e278:	4a08      	ldr	r2, [pc, #32]	; (2e29c <ccc_set_direct+0x94>)
   2e27a:	ab04      	add	r3, sp, #16
   2e27c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2e280:	2001      	movs	r0, #1
   2e282:	f018 fdd5 	bl	46e30 <bt_gatt_foreach_attr>
}
   2e286:	4628      	mov	r0, r5
   2e288:	b038      	add	sp, #224	; 0xe0
   2e28a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e28e:	4623      	mov	r3, r4
   2e290:	e7f0      	b.n	2e274 <ccc_set_direct+0x6c>
			return -EINVAL;
   2e292:	f06f 0515 	mvn.w	r5, #21
   2e296:	e7f6      	b.n	2e286 <ccc_set_direct+0x7e>
   2e298:	0004b0bd 	.word	0x0004b0bd
   2e29c:	0002dbbd 	.word	0x0002dbbd

0002e2a0 <gatt_indicate>:
{
   2e2a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e2a4:	4615      	mov	r5, r2
   2e2a6:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   2e2a8:	2214      	movs	r2, #20
   2e2aa:	6869      	ldr	r1, [r5, #4]
{
   2e2ac:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   2e2ae:	f018 fdca 	bl	46e46 <bt_gatt_check_perm>
   2e2b2:	4607      	mov	r7, r0
   2e2b4:	2800      	cmp	r0, #0
   2e2b6:	d13b      	bne.n	2e330 <gatt_indicate+0x90>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2e2b8:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   2e2bc:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   2e2be:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2e2c0:	f7ff fb00 	bl	2d8c4 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   2e2c4:	3602      	adds	r6, #2
	if (!req) {
   2e2c6:	4604      	mov	r4, r0
   2e2c8:	b178      	cbz	r0, 2e2ea <gatt_indicate+0x4a>
	req->func = func;
   2e2ca:	4b1b      	ldr	r3, [pc, #108]	; (2e338 <gatt_indicate+0x98>)
	req->len = len;
   2e2cc:	6146      	str	r6, [r0, #20]
	req->att_op = op;
   2e2ce:	211d      	movs	r1, #29
   2e2d0:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   2e2d2:	60c7      	str	r7, [r0, #12]
	req->func = func;
   2e2d4:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   2e2d6:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   2e2d8:	4632      	mov	r2, r6
   2e2da:	4640      	mov	r0, r8
   2e2dc:	f018 f948 	bl	46570 <bt_att_create_pdu>
	if (!buf) {
   2e2e0:	4606      	mov	r6, r0
   2e2e2:	b938      	cbnz	r0, 2e2f4 <gatt_indicate+0x54>
		bt_att_req_free(req);
   2e2e4:	4620      	mov	r0, r4
   2e2e6:	f7ff fb0f 	bl	2d908 <bt_att_req_free>
		return -ENOMEM;
   2e2ea:	f06f 050b 	mvn.w	r5, #11
}
   2e2ee:	4628      	mov	r0, r5
   2e2f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return net_buf_simple_add(&buf->b, len);
   2e2f4:	f100 0a08 	add.w	sl, r0, #8
   2e2f8:	2102      	movs	r1, #2
   2e2fa:	4650      	mov	r0, sl
   2e2fc:	f019 fb14 	bl	47928 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   2e300:	4607      	mov	r7, r0
   2e302:	8aa9      	ldrh	r1, [r5, #20]
   2e304:	f827 9b02 	strh.w	r9, [r7], #2
   2e308:	4650      	mov	r0, sl
   2e30a:	f019 fb0d 	bl	47928 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   2e30e:	8aaa      	ldrh	r2, [r5, #20]
   2e310:	6929      	ldr	r1, [r5, #16]
   2e312:	4638      	mov	r0, r7
   2e314:	f016 fbd5 	bl	44ac2 <memcpy>
	req->buf = buf;
   2e318:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   2e31a:	4621      	mov	r1, r4
   2e31c:	4640      	mov	r0, r8
   2e31e:	f018 fa2d 	bl	4677c <bt_att_req_send>
	if (err) {
   2e322:	4605      	mov	r5, r0
   2e324:	2800      	cmp	r0, #0
   2e326:	d0e2      	beq.n	2e2ee <gatt_indicate+0x4e>
		bt_att_req_free(req);
   2e328:	4620      	mov	r0, r4
   2e32a:	f7ff faed 	bl	2d908 <bt_att_req_free>
   2e32e:	e7de      	b.n	2e2ee <gatt_indicate+0x4e>
		return -EPERM;
   2e330:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2e334:	e7db      	b.n	2e2ee <gatt_indicate+0x4e>
   2e336:	bf00      	nop
   2e338:	000467bb 	.word	0x000467bb

0002e33c <bt_gatt_indicate>:
{
   2e33c:	b530      	push	{r4, r5, lr}
   2e33e:	4604      	mov	r4, r0
   2e340:	b08b      	sub	sp, #44	; 0x2c
   2e342:	4837      	ldr	r0, [pc, #220]	; (2e420 <bt_gatt_indicate+0xe4>)
   2e344:	f018 fa52 	bl	467ec <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2e348:	0782      	lsls	r2, r0, #30
{
   2e34a:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2e34c:	d561      	bpl.n	2e412 <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   2e34e:	b114      	cbz	r4, 2e356 <bt_gatt_indicate+0x1a>
   2e350:	7b63      	ldrb	r3, [r4, #13]
   2e352:	2b07      	cmp	r3, #7
   2e354:	d160      	bne.n	2e418 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   2e356:	6868      	ldr	r0, [r5, #4]
   2e358:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   2e35a:	f7ff fe31 	bl	2dfc0 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   2e35e:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   2e360:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   2e364:	b33a      	cbz	r2, 2e3b6 <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2e366:	a905      	add	r1, sp, #20
   2e368:	9102      	str	r1, [sp, #8]
   2e36a:	492e      	ldr	r1, [pc, #184]	; (2e424 <bt_gatt_indicate+0xe8>)
   2e36c:	9101      	str	r1, [sp, #4]
   2e36e:	2101      	movs	r1, #1
	found->attr = NULL;
   2e370:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2e372:	9100      	str	r1, [sp, #0]
   2e374:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   2e378:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2e37a:	f7ff fe51 	bl	2e020 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   2e37e:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   2e380:	b91b      	cbnz	r3, 2e38a <bt_gatt_indicate+0x4e>
			return -ENOENT;
   2e382:	f06f 0001 	mvn.w	r0, #1
}
   2e386:	b00b      	add	sp, #44	; 0x2c
   2e388:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   2e38a:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   2e38c:	9b05      	ldr	r3, [sp, #20]
   2e38e:	6818      	ldr	r0, [r3, #0]
   2e390:	2300      	movs	r3, #0
   2e392:	f88d 3010 	strb.w	r3, [sp, #16]
   2e396:	a904      	add	r1, sp, #16
   2e398:	f642 0303 	movw	r3, #10243	; 0x2803
   2e39c:	f8ad 3012 	strh.w	r3, [sp, #18]
   2e3a0:	f016 fc70 	bl	44c84 <bt_uuid_cmp>
   2e3a4:	b970      	cbnz	r0, 2e3c4 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   2e3a6:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   2e3a8:	68c3      	ldr	r3, [r0, #12]
   2e3aa:	799b      	ldrb	r3, [r3, #6]
   2e3ac:	069b      	lsls	r3, r3, #26
   2e3ae:	d405      	bmi.n	2e3bc <bt_gatt_indicate+0x80>
			return -EINVAL;
   2e3b0:	f06f 0015 	mvn.w	r0, #21
   2e3b4:	e7e7      	b.n	2e386 <bt_gatt_indicate+0x4a>
		if (!data.handle) {
   2e3b6:	2800      	cmp	r0, #0
   2e3b8:	d1e8      	bne.n	2e38c <bt_gatt_indicate+0x50>
   2e3ba:	e7e2      	b.n	2e382 <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   2e3bc:	f018 fcea 	bl	46d94 <bt_gatt_attr_value_handle>
   2e3c0:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   2e3c4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   2e3c8:	b13c      	cbz	r4, 2e3da <bt_gatt_indicate+0x9e>
		params->_ref = 1;
   2e3ca:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   2e3cc:	4601      	mov	r1, r0
		params->_ref = 1;
   2e3ce:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   2e3d0:	462a      	mov	r2, r5
   2e3d2:	4620      	mov	r0, r4
   2e3d4:	f7ff ff64 	bl	2e2a0 <gatt_indicate>
   2e3d8:	e7d5      	b.n	2e386 <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
   2e3da:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   2e3de:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   2e3e0:	2302      	movs	r3, #2
   2e3e2:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2e3e6:	f642 1302 	movw	r3, #10498	; 0x2902
   2e3ea:	f8ad 3012 	strh.w	r3, [sp, #18]
   2e3ee:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   2e3f0:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2e3f2:	9302      	str	r3, [sp, #8]
   2e3f4:	4b0c      	ldr	r3, [pc, #48]	; (2e428 <bt_gatt_indicate+0xec>)
   2e3f6:	9301      	str	r3, [sp, #4]
   2e3f8:	2301      	movs	r3, #1
   2e3fa:	9300      	str	r3, [sp, #0]
   2e3fc:	aa04      	add	r2, sp, #16
   2e3fe:	4623      	mov	r3, r4
   2e400:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   2e404:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2e406:	f88d 4010 	strb.w	r4, [sp, #16]
   2e40a:	f7ff fe09 	bl	2e020 <bt_gatt_foreach_attr_type>
	return data.err;
   2e40e:	9807      	ldr	r0, [sp, #28]
   2e410:	e7b9      	b.n	2e386 <bt_gatt_indicate+0x4a>
		return -EAGAIN;
   2e412:	f06f 000a 	mvn.w	r0, #10
   2e416:	e7b6      	b.n	2e386 <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
   2e418:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2e41c:	e7b3      	b.n	2e386 <bt_gatt_indicate+0x4a>
   2e41e:	bf00      	nop
   2e420:	200000cc 	.word	0x200000cc
   2e424:	000467e1 	.word	0x000467e1
   2e428:	0002e571 	.word	0x0002e571

0002e42c <sc_process>:
{
   2e42c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   2e42e:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   2e432:	4604      	mov	r4, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
   2e434:	f850 3c08 	ldr.w	r3, [r0, #-8]
   2e438:	9301      	str	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   2e43a:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2e43e:	f06f 0101 	mvn.w	r1, #1
   2e442:	4628      	mov	r0, r5
   2e444:	f018 fa8f 	bl	46966 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   2e448:	4b0d      	ldr	r3, [pc, #52]	; (2e480 <sc_process+0x54>)
   2e44a:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   2e44e:	4b0d      	ldr	r3, [pc, #52]	; (2e484 <sc_process+0x58>)
   2e450:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   2e454:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   2e456:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   2e458:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   2e45c:	2304      	movs	r3, #4
	sc->start = 0U;
   2e45e:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   2e462:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   2e466:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   2e46a:	4631      	mov	r1, r6
   2e46c:	f7ff ff66 	bl	2e33c <bt_gatt_indicate>
   2e470:	b918      	cbnz	r0, 2e47a <sc_process+0x4e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2e472:	2102      	movs	r1, #2
   2e474:	4628      	mov	r0, r5
   2e476:	f018 fa12 	bl	4689e <atomic_or>
}
   2e47a:	b002      	add	sp, #8
   2e47c:	bd70      	pop	{r4, r5, r6, pc}
   2e47e:	bf00      	nop
   2e480:	00049a88 	.word	0x00049a88
   2e484:	0002deb1 	.word	0x0002deb1

0002e488 <bt_gatt_notify_cb>:
{
   2e488:	b530      	push	{r4, r5, lr}
   2e48a:	4604      	mov	r4, r0
   2e48c:	b08b      	sub	sp, #44	; 0x2c
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2e48e:	4835      	ldr	r0, [pc, #212]	; (2e564 <bt_gatt_notify_cb+0xdc>)
   2e490:	f018 f9ac 	bl	467ec <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2e494:	0782      	lsls	r2, r0, #30
{
   2e496:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2e498:	d55d      	bpl.n	2e556 <bt_gatt_notify_cb+0xce>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   2e49a:	b114      	cbz	r4, 2e4a2 <bt_gatt_notify_cb+0x1a>
   2e49c:	7b63      	ldrb	r3, [r4, #13]
   2e49e:	2b07      	cmp	r3, #7
   2e4a0:	d15c      	bne.n	2e55c <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
   2e4a2:	6868      	ldr	r0, [r5, #4]
   2e4a4:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   2e4a6:	f7ff fd8b 	bl	2dfc0 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   2e4aa:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   2e4ac:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   2e4b0:	b33a      	cbz	r2, 2e502 <bt_gatt_notify_cb+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2e4b2:	a905      	add	r1, sp, #20
   2e4b4:	9102      	str	r1, [sp, #8]
   2e4b6:	492c      	ldr	r1, [pc, #176]	; (2e568 <bt_gatt_notify_cb+0xe0>)
   2e4b8:	9101      	str	r1, [sp, #4]
   2e4ba:	2101      	movs	r1, #1
	found->attr = NULL;
   2e4bc:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2e4be:	9100      	str	r1, [sp, #0]
   2e4c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   2e4c4:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2e4c6:	f7ff fdab 	bl	2e020 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   2e4ca:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   2e4cc:	b91b      	cbnz	r3, 2e4d6 <bt_gatt_notify_cb+0x4e>
			return -ENOENT;
   2e4ce:	f06f 0001 	mvn.w	r0, #1
}
   2e4d2:	b00b      	add	sp, #44	; 0x2c
   2e4d4:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   2e4d6:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   2e4d8:	9b05      	ldr	r3, [sp, #20]
   2e4da:	6818      	ldr	r0, [r3, #0]
   2e4dc:	2300      	movs	r3, #0
   2e4de:	f88d 3010 	strb.w	r3, [sp, #16]
   2e4e2:	a904      	add	r1, sp, #16
   2e4e4:	f642 0303 	movw	r3, #10243	; 0x2803
   2e4e8:	f8ad 3012 	strh.w	r3, [sp, #18]
   2e4ec:	f016 fbca 	bl	44c84 <bt_uuid_cmp>
   2e4f0:	b970      	cbnz	r0, 2e510 <bt_gatt_notify_cb+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   2e4f2:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   2e4f4:	68c3      	ldr	r3, [r0, #12]
   2e4f6:	799b      	ldrb	r3, [r3, #6]
   2e4f8:	06db      	lsls	r3, r3, #27
   2e4fa:	d405      	bmi.n	2e508 <bt_gatt_notify_cb+0x80>
			return -EINVAL;
   2e4fc:	f06f 0015 	mvn.w	r0, #21
   2e500:	e7e7      	b.n	2e4d2 <bt_gatt_notify_cb+0x4a>
		if (!data.handle) {
   2e502:	2800      	cmp	r0, #0
   2e504:	d1e8      	bne.n	2e4d8 <bt_gatt_notify_cb+0x50>
   2e506:	e7e2      	b.n	2e4ce <bt_gatt_notify_cb+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   2e508:	f018 fc44 	bl	46d94 <bt_gatt_attr_value_handle>
   2e50c:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   2e510:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   2e514:	b12c      	cbz	r4, 2e522 <bt_gatt_notify_cb+0x9a>
		return gatt_notify(conn, data.handle, params);
   2e516:	4601      	mov	r1, r0
   2e518:	462a      	mov	r2, r5
   2e51a:	4620      	mov	r0, r4
   2e51c:	f018 fcbe 	bl	46e9c <gatt_notify>
   2e520:	e7d7      	b.n	2e4d2 <bt_gatt_notify_cb+0x4a>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2e522:	f642 1202 	movw	r2, #10498	; 0x2902
   2e526:	f8ad 2012 	strh.w	r2, [sp, #18]
   2e52a:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   2e52c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2e530:	9202      	str	r2, [sp, #8]
   2e532:	4a0e      	ldr	r2, [pc, #56]	; (2e56c <bt_gatt_notify_cb+0xe4>)
	data.err = -ENOTCONN;
   2e534:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   2e536:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2e538:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   2e53c:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2e540:	aa04      	add	r2, sp, #16
   2e542:	4623      	mov	r3, r4
   2e544:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   2e548:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2e54a:	f88d 4010 	strb.w	r4, [sp, #16]
   2e54e:	f7ff fd67 	bl	2e020 <bt_gatt_foreach_attr_type>
	return data.err;
   2e552:	9807      	ldr	r0, [sp, #28]
   2e554:	e7bd      	b.n	2e4d2 <bt_gatt_notify_cb+0x4a>
		return -EAGAIN;
   2e556:	f06f 000a 	mvn.w	r0, #10
   2e55a:	e7ba      	b.n	2e4d2 <bt_gatt_notify_cb+0x4a>
		return -ENOTCONN;
   2e55c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2e560:	e7b7      	b.n	2e4d2 <bt_gatt_notify_cb+0x4a>
   2e562:	bf00      	nop
   2e564:	200000cc 	.word	0x200000cc
   2e568:	000467e1 	.word	0x000467e1
   2e56c:	0002e571 	.word	0x0002e571

0002e570 <notify_cb>:
{
   2e570:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   2e574:	4b3a      	ldr	r3, [pc, #232]	; (2e660 <notify_cb+0xf0>)
{
   2e576:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   2e578:	6882      	ldr	r2, [r0, #8]
   2e57a:	429a      	cmp	r2, r3
{
   2e57c:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   2e57e:	d004      	beq.n	2e58a <notify_cb+0x1a>
		return BT_GATT_ITER_CONTINUE;
   2e580:	2701      	movs	r7, #1
}
   2e582:	4638      	mov	r0, r7
   2e584:	b003      	add	sp, #12
   2e586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ccc = attr->user_data;
   2e58a:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   2e58c:	4b35      	ldr	r3, [pc, #212]	; (2e664 <notify_cb+0xf4>)
   2e58e:	429f      	cmp	r7, r3
   2e590:	d011      	beq.n	2e5b6 <notify_cb+0x46>
		if (cfg->value != data->type) {
   2e592:	893a      	ldrh	r2, [r7, #8]
   2e594:	89ab      	ldrh	r3, [r5, #12]
   2e596:	429a      	cmp	r2, r3
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   2e598:	f107 0101 	add.w	r1, r7, #1
		if (cfg->value != data->type) {
   2e59c:	d1f0      	bne.n	2e580 <notify_cb+0x10>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   2e59e:	7838      	ldrb	r0, [r7, #0]
   2e5a0:	f7fe faae 	bl	2cb00 <bt_conn_lookup_addr_le>
		if (!conn) {
   2e5a4:	4604      	mov	r4, r0
   2e5a6:	2800      	cmp	r0, #0
   2e5a8:	d0ea      	beq.n	2e580 <notify_cb+0x10>
		if (conn->state != BT_CONN_CONNECTED) {
   2e5aa:	7b43      	ldrb	r3, [r0, #13]
   2e5ac:	2b07      	cmp	r3, #7
   2e5ae:	d02a      	beq.n	2e606 <notify_cb+0x96>
			bt_conn_unref(conn);
   2e5b0:	f017 fa27 	bl	45a02 <bt_conn_unref>
			continue;
   2e5b4:	e7e4      	b.n	2e580 <notify_cb+0x10>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   2e5b6:	f04f 0800 	mov.w	r8, #0
   2e5ba:	4c2b      	ldr	r4, [pc, #172]	; (2e668 <notify_cb+0xf8>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2e5bc:	46c1      	mov	r9, r8
   2e5be:	2207      	movs	r2, #7
   2e5c0:	4669      	mov	r1, sp
   2e5c2:	4620      	mov	r0, r4
   2e5c4:	f8cd 9000 	str.w	r9, [sp]
   2e5c8:	f8cd 9003 	str.w	r9, [sp, #3]
   2e5cc:	f016 fa69 	bl	44aa2 <memcmp>
   2e5d0:	b178      	cbz	r0, 2e5f2 <notify_cb+0x82>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   2e5d2:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   2e5d6:	2207      	movs	r2, #7
   2e5d8:	4621      	mov	r1, r4
   2e5da:	f7fe faab 	bl	2cb34 <bt_conn_lookup_state_le>
			if (!conn) {
   2e5de:	b978      	cbnz	r0, 2e600 <notify_cb+0x90>
				sc = (struct sc_data *)data->ind_params->data;
   2e5e0:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   2e5e2:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   2e5e6:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   2e5e8:	4621      	mov	r1, r4
   2e5ea:	8853      	ldrh	r3, [r2, #2]
   2e5ec:	8812      	ldrh	r2, [r2, #0]
   2e5ee:	f018 faf4 	bl	46bda <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   2e5f2:	340c      	adds	r4, #12
   2e5f4:	f1b8 0f00 	cmp.w	r8, #0
   2e5f8:	d1cb      	bne.n	2e592 <notify_cb+0x22>
   2e5fa:	f04f 0801 	mov.w	r8, #1
   2e5fe:	e7de      	b.n	2e5be <notify_cb+0x4e>
			bt_conn_unref(conn);
   2e600:	f017 f9ff 	bl	45a02 <bt_conn_unref>
   2e604:	e7f5      	b.n	2e5f2 <notify_cb+0x82>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   2e606:	697b      	ldr	r3, [r7, #20]
   2e608:	b123      	cbz	r3, 2e614 <notify_cb+0xa4>
   2e60a:	4631      	mov	r1, r6
   2e60c:	4798      	blx	r3
   2e60e:	b908      	cbnz	r0, 2e614 <notify_cb+0xa4>
			bt_conn_unref(conn);
   2e610:	4620      	mov	r0, r4
   2e612:	e7cd      	b.n	2e5b0 <notify_cb+0x40>
		if (bt_gatt_check_perm(conn, attr,
   2e614:	2214      	movs	r2, #20
   2e616:	4631      	mov	r1, r6
   2e618:	4620      	mov	r0, r4
   2e61a:	f018 fc14 	bl	46e46 <bt_gatt_check_perm>
   2e61e:	4607      	mov	r7, r0
   2e620:	2800      	cmp	r0, #0
   2e622:	d1ad      	bne.n	2e580 <notify_cb+0x10>
		if (data->type == BT_GATT_CCC_INDICATE) {
   2e624:	89ab      	ldrh	r3, [r5, #12]
			err = gatt_indicate(conn, data->handle,
   2e626:	88a9      	ldrh	r1, [r5, #4]
   2e628:	692a      	ldr	r2, [r5, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
   2e62a:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   2e62c:	4620      	mov	r0, r4
		if (data->type == BT_GATT_CCC_INDICATE) {
   2e62e:	d10d      	bne.n	2e64c <notify_cb+0xdc>
			err = gatt_indicate(conn, data->handle,
   2e630:	f7ff fe36 	bl	2e2a0 <gatt_indicate>
			if (err == 0) {
   2e634:	4606      	mov	r6, r0
   2e636:	b960      	cbnz	r0, 2e652 <notify_cb+0xe2>
				data->ind_params->_ref++;
   2e638:	692a      	ldr	r2, [r5, #16]
   2e63a:	7d93      	ldrb	r3, [r2, #22]
   2e63c:	3301      	adds	r3, #1
   2e63e:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   2e640:	4620      	mov	r0, r4
   2e642:	f017 f9de 	bl	45a02 <bt_conn_unref>
		data->err = 0;
   2e646:	2300      	movs	r3, #0
   2e648:	60ab      	str	r3, [r5, #8]
   2e64a:	e799      	b.n	2e580 <notify_cb+0x10>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   2e64c:	f018 fc26 	bl	46e9c <gatt_notify>
   2e650:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   2e652:	4620      	mov	r0, r4
   2e654:	f017 f9d5 	bl	45a02 <bt_conn_unref>
		if (err < 0) {
   2e658:	2e00      	cmp	r6, #0
   2e65a:	daf4      	bge.n	2e646 <notify_cb+0xd6>
   2e65c:	e791      	b.n	2e582 <notify_cb+0x12>
   2e65e:	bf00      	nop
   2e660:	0002dca5 	.word	0x0002dca5
   2e664:	200003d4 	.word	0x200003d4
   2e668:	20003aef 	.word	0x20003aef

0002e66c <update_ccc>:
{
   2e66c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   2e670:	4b31      	ldr	r3, [pc, #196]	; (2e738 <update_ccc+0xcc>)
	struct bt_conn *conn = data->conn;
   2e672:	6814      	ldr	r4, [r2, #0]
{
   2e674:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   2e676:	6882      	ldr	r2, [r0, #8]
   2e678:	429a      	cmp	r2, r3
{
   2e67a:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   2e67c:	d157      	bne.n	2e72e <update_ccc+0xc2>
	ccc = attr->user_data;
   2e67e:	68c6      	ldr	r6, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2e680:	2300      	movs	r3, #0
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   2e682:	f106 0901 	add.w	r9, r6, #1
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2e686:	2b00      	cmp	r3, #0
   2e688:	d151      	bne.n	2e72e <update_ccc+0xc2>
		if (!cfg->value ||
   2e68a:	8933      	ldrh	r3, [r6, #8]
   2e68c:	2b00      	cmp	r3, #0
   2e68e:	d04e      	beq.n	2e72e <update_ccc+0xc2>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   2e690:	7831      	ldrb	r1, [r6, #0]
   2e692:	464a      	mov	r2, r9
   2e694:	4620      	mov	r0, r4
   2e696:	f017 fa4a 	bl	45b2e <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   2e69a:	2800      	cmp	r0, #0
   2e69c:	d047      	beq.n	2e72e <update_ccc+0xc2>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   2e69e:	222a      	movs	r2, #42	; 0x2a
   2e6a0:	4629      	mov	r1, r5
   2e6a2:	4620      	mov	r0, r4
   2e6a4:	f018 fbcf 	bl	46e46 <bt_gatt_check_perm>
		if (err) {
   2e6a8:	b1a0      	cbz	r0, 2e6d4 <update_ccc+0x68>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   2e6aa:	2803      	cmp	r0, #3
   2e6ac:	d03f      	beq.n	2e72e <update_ccc+0xc2>
			sec = BT_SECURITY_L2;
   2e6ae:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   2e6b0:	4620      	mov	r0, r4
			sec = BT_SECURITY_L2;
   2e6b2:	bf0c      	ite	eq
   2e6b4:	f04f 0803 	moveq.w	r8, #3
   2e6b8:	f04f 0802 	movne.w	r8, #2
			    bt_conn_get_security(conn) < sec) {
   2e6bc:	f017 fa35 	bl	45b2a <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   2e6c0:	4580      	cmp	r8, r0
   2e6c2:	d907      	bls.n	2e6d4 <update_ccc+0x68>
				if (data->sec < sec) {
   2e6c4:	793a      	ldrb	r2, [r7, #4]
   2e6c6:	4542      	cmp	r2, r8
   2e6c8:	f04f 0301 	mov.w	r3, #1
   2e6cc:	d2db      	bcs.n	2e686 <update_ccc+0x1a>
					data->sec = sec;
   2e6ce:	f887 8004 	strb.w	r8, [r7, #4]
   2e6d2:	e7d8      	b.n	2e686 <update_ccc+0x1a>
		gatt_ccc_changed(attr, ccc);
   2e6d4:	4631      	mov	r1, r6
   2e6d6:	4628      	mov	r0, r5
   2e6d8:	f018 f865 	bl	467a6 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   2e6dc:	4b17      	ldr	r3, [pc, #92]	; (2e73c <update_ccc+0xd0>)
   2e6de:	429e      	cmp	r6, r3
   2e6e0:	d125      	bne.n	2e72e <update_ccc+0xc2>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2e6e2:	7a20      	ldrb	r0, [r4, #8]
   2e6e4:	f104 0188 	add.w	r1, r4, #136	; 0x88
   2e6e8:	f7ff fb50 	bl	2dd8c <find_sc_cfg>
	if (!cfg) {
   2e6ec:	b1f8      	cbz	r0, 2e72e <update_ccc+0xc2>
	if (!(cfg->data.start || cfg->data.end)) {
   2e6ee:	8902      	ldrh	r2, [r0, #8]
   2e6f0:	8943      	ldrh	r3, [r0, #10]
   2e6f2:	ea52 0103 	orrs.w	r1, r2, r3
   2e6f6:	d01a      	beq.n	2e72e <update_ccc+0xc2>
	index = bt_conn_index(conn);
   2e6f8:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   2e6fa:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   2e6fe:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   2e702:	f7fe f8c9 	bl	2c898 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   2e706:	490e      	ldr	r1, [pc, #56]	; (2e740 <update_ccc+0xd4>)
   2e708:	4a0e      	ldr	r2, [pc, #56]	; (2e744 <update_ccc+0xd8>)
   2e70a:	2318      	movs	r3, #24
   2e70c:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   2e710:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   2e712:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   2e714:	4a0c      	ldr	r2, [pc, #48]	; (2e748 <update_ccc+0xdc>)
   2e716:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   2e718:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   2e71a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   2e71e:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   2e720:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   2e722:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   2e726:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   2e728:	4620      	mov	r0, r4
   2e72a:	f7ff fe07 	bl	2e33c <bt_gatt_indicate>
}
   2e72e:	2001      	movs	r0, #1
   2e730:	b003      	add	sp, #12
   2e732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2e736:	bf00      	nop
   2e738:	0002dca5 	.word	0x0002dca5
   2e73c:	200003d4 	.word	0x200003d4
   2e740:	20001c70 	.word	0x20001c70
   2e744:	00049a88 	.word	0x00049a88
   2e748:	00046d27 	.word	0x00046d27

0002e74c <bt_gatt_connected>:
{
   2e74c:	b570      	push	{r4, r5, r6, lr}
   2e74e:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2e750:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   2e754:	4604      	mov	r4, r0
	data.conn = conn;
   2e756:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
   2e758:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2e75a:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   2e75c:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2e760:	4629      	mov	r1, r5
   2e762:	f016 fe44 	bl	453ee <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   2e766:	b190      	cbz	r0, 2e78e <bt_gatt_connected+0x42>
		if (conn->id) {
   2e768:	7a22      	ldrb	r2, [r4, #8]
   2e76a:	b32a      	cbz	r2, 2e7b8 <bt_gatt_connected+0x6c>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   2e76c:	ae02      	add	r6, sp, #8
   2e76e:	2104      	movs	r1, #4
   2e770:	4630      	mov	r0, r6
   2e772:	f013 ffec 	bl	4274e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   2e776:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   2e778:	4a10      	ldr	r2, [pc, #64]	; (2e7bc <bt_gatt_connected+0x70>)
   2e77a:	2124      	movs	r1, #36	; 0x24
   2e77c:	a805      	add	r0, sp, #20
   2e77e:	462b      	mov	r3, r5
   2e780:	f7fc f9ec 	bl	2ab5c <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   2e784:	aa05      	add	r2, sp, #20
   2e786:	490e      	ldr	r1, [pc, #56]	; (2e7c0 <bt_gatt_connected+0x74>)
   2e788:	4610      	mov	r0, r2
   2e78a:	f7fb f8b1 	bl	298f0 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   2e78e:	ab03      	add	r3, sp, #12
   2e790:	4a0c      	ldr	r2, [pc, #48]	; (2e7c4 <bt_gatt_connected+0x78>)
   2e792:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2e796:	2001      	movs	r0, #1
   2e798:	f018 fb4a 	bl	46e30 <bt_gatt_foreach_attr>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   2e79c:	78e3      	ldrb	r3, [r4, #3]
   2e79e:	b94b      	cbnz	r3, 2e7b4 <bt_gatt_connected+0x68>
	    bt_conn_get_security(conn) < data.sec) {
   2e7a0:	4620      	mov	r0, r4
   2e7a2:	f017 f9c2 	bl	45b2a <bt_conn_get_security>
   2e7a6:	f89d 1010 	ldrb.w	r1, [sp, #16]
	     IS_ENABLED(CONFIG_BT_GATT_AUTO_SEC_REQ)) &&
   2e7aa:	4288      	cmp	r0, r1
   2e7ac:	d202      	bcs.n	2e7b4 <bt_gatt_connected+0x68>
		int err = bt_conn_set_security(conn, data.sec);
   2e7ae:	4620      	mov	r0, r4
   2e7b0:	f017 f98b 	bl	45aca <bt_conn_set_security>
}
   2e7b4:	b00e      	add	sp, #56	; 0x38
   2e7b6:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   2e7b8:	9200      	str	r2, [sp, #0]
   2e7ba:	e7dd      	b.n	2e778 <bt_gatt_connected+0x2c>
   2e7bc:	0004b0c0 	.word	0x0004b0c0
   2e7c0:	0002e209 	.word	0x0002e209
   2e7c4:	0002e66d 	.word	0x0002e66d

0002e7c8 <bt_gatt_att_max_mtu_changed>:
{
   2e7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   2e7ca:	4b08      	ldr	r3, [pc, #32]	; (2e7ec <bt_gatt_att_max_mtu_changed+0x24>)
   2e7cc:	681c      	ldr	r4, [r3, #0]
   2e7ce:	4605      	mov	r5, r0
   2e7d0:	460e      	mov	r6, r1
   2e7d2:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   2e7d4:	b14c      	cbz	r4, 2e7ea <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   2e7d6:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   2e7da:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   2e7dc:	b11b      	cbz	r3, 2e7e6 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   2e7de:	463a      	mov	r2, r7
   2e7e0:	4631      	mov	r1, r6
   2e7e2:	4628      	mov	r0, r5
   2e7e4:	4798      	blx	r3
	return node->next;
   2e7e6:	6864      	ldr	r4, [r4, #4]
   2e7e8:	e7f4      	b.n	2e7d4 <bt_gatt_att_max_mtu_changed+0xc>
}
   2e7ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e7ec:	20001cb0 	.word	0x20001cb0

0002e7f0 <bt_gatt_encrypt_change>:
{
   2e7f0:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   2e7f2:	4a06      	ldr	r2, [pc, #24]	; (2e80c <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   2e7f4:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   2e7f6:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   2e7f8:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   2e7fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   2e7fe:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   2e802:	f018 fb15 	bl	46e30 <bt_gatt_foreach_attr>
}
   2e806:	b003      	add	sp, #12
   2e808:	f85d fb04 	ldr.w	pc, [sp], #4
   2e80c:	0002e66d 	.word	0x0002e66d

0002e810 <db_hash_read>:
{
   2e810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   2e812:	4914      	ldr	r1, [pc, #80]	; (2e864 <db_hash_read+0x54>)
{
   2e814:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   2e818:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   2e81a:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   2e81e:	461f      	mov	r7, r3
   2e820:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   2e822:	f01a f85a 	bl	488da <k_work_cancel_delayable_sync>
   2e826:	4810      	ldr	r0, [pc, #64]	; (2e868 <db_hash_read+0x58>)
   2e828:	f017 ffe0 	bl	467ec <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   2e82c:	0743      	lsls	r3, r0, #29
   2e82e:	d402      	bmi.n	2e836 <db_hash_read+0x26>
		db_hash_gen(true);
   2e830:	2001      	movs	r0, #1
   2e832:	f7ff fc4f 	bl	2e0d4 <db_hash_gen>
	(void)bt_gatt_change_aware(conn, true);
   2e836:	2101      	movs	r1, #1
   2e838:	4620      	mov	r0, r4
   2e83a:	f018 fb62 	bl	46f02 <bt_gatt_change_aware>
	if (offset > value_len) {
   2e83e:	2e10      	cmp	r6, #16
   2e840:	d80c      	bhi.n	2e85c <db_hash_read+0x4c>
	len = MIN(buf_len, value_len - offset);
   2e842:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   2e846:	4909      	ldr	r1, [pc, #36]	; (2e86c <db_hash_read+0x5c>)
	len = MIN(buf_len, value_len - offset);
   2e848:	42bc      	cmp	r4, r7
   2e84a:	bfa8      	it	ge
   2e84c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2e84e:	4622      	mov	r2, r4
   2e850:	4431      	add	r1, r6
   2e852:	4628      	mov	r0, r5
   2e854:	f016 f935 	bl	44ac2 <memcpy>
}
   2e858:	4620      	mov	r0, r4
   2e85a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2e85c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   2e860:	e7fa      	b.n	2e858 <db_hash_read+0x48>
   2e862:	bf00      	nop
   2e864:	20001158 	.word	0x20001158
   2e868:	200011d0 	.word	0x200011d0
   2e86c:	20001108 	.word	0x20001108

0002e870 <bt_gatt_store_ccc>:
{
   2e870:	b570      	push	{r4, r5, r6, lr}
   2e872:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
   2e874:	2300      	movs	r3, #0
{
   2e876:	4604      	mov	r4, r0
   2e878:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   2e87a:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   2e87c:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   2e880:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   2e882:	4a11      	ldr	r2, [pc, #68]	; (2e8c8 <bt_gatt_store_ccc+0x58>)
   2e884:	ab0d      	add	r3, sp, #52	; 0x34
   2e886:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2e88a:	2001      	movs	r0, #1
   2e88c:	f018 fad0 	bl	46e30 <bt_gatt_foreach_attr>
	if (id) {
   2e890:	b1ac      	cbz	r4, 2e8be <bt_gatt_store_ccc+0x4e>
		u8_to_dec(id_str, sizeof(id_str), id);
   2e892:	ae03      	add	r6, sp, #12
   2e894:	4622      	mov	r2, r4
   2e896:	2104      	movs	r1, #4
   2e898:	4630      	mov	r0, r6
   2e89a:	f013 ff58 	bl	4274e <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   2e89e:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   2e8a0:	4a0a      	ldr	r2, [pc, #40]	; (2e8cc <bt_gatt_store_ccc+0x5c>)
   2e8a2:	462b      	mov	r3, r5
   2e8a4:	2124      	movs	r1, #36	; 0x24
   2e8a6:	a804      	add	r0, sp, #16
   2e8a8:	f7fc f958 	bl	2ab5c <bt_settings_encode_key>
	if (save.count) {
   2e8ac:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   2e8ae:	b142      	cbz	r2, 2e8c2 <bt_gatt_store_ccc+0x52>
		len = save.count * sizeof(*save.store);
   2e8b0:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   2e8b2:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   2e8b4:	a804      	add	r0, sp, #16
   2e8b6:	f7fa ffbb 	bl	29830 <settings_save_one>
}
   2e8ba:	b040      	add	sp, #256	; 0x100
   2e8bc:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   2e8be:	9400      	str	r4, [sp, #0]
   2e8c0:	e7ee      	b.n	2e8a0 <bt_gatt_store_ccc+0x30>
		str = NULL;
   2e8c2:	4611      	mov	r1, r2
   2e8c4:	e7f6      	b.n	2e8b4 <bt_gatt_store_ccc+0x44>
   2e8c6:	bf00      	nop
   2e8c8:	0002dc6d 	.word	0x0002dc6d
   2e8cc:	0004b0c0 	.word	0x0004b0c0

0002e8d0 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   2e8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   2e8d2:	4603      	mov	r3, r0
   2e8d4:	4a3d      	ldr	r2, [pc, #244]	; (2e9cc <bt_gatt_disconnected+0xfc>)
	if (gatt_ccc_store.conn_list[index] != NULL) {
   2e8d6:	4e3e      	ldr	r6, [pc, #248]	; (2e9d0 <bt_gatt_disconnected+0x100>)
{
   2e8d8:	b08d      	sub	sp, #52	; 0x34
   2e8da:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   2e8dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2e8e0:	2001      	movs	r0, #1
   2e8e2:	f018 faa5 	bl	46e30 <bt_gatt_foreach_attr>
	uint8_t index = bt_conn_index(conn);
   2e8e6:	4620      	mov	r0, r4
   2e8e8:	f7fd ffd6 	bl	2c898 <bt_conn_index>
   2e8ec:	4605      	mov	r5, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   2e8ee:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   2e8f2:	b120      	cbz	r0, 2e8fe <bt_gatt_disconnected+0x2e>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   2e8f4:	f017 f885 	bl	45a02 <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   2e8f8:	2300      	movs	r3, #0
   2e8fa:	f846 3025 	str.w	r3, [r6, r5, lsl #2]

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);

	if (gatt_ccc_conn_queue_is_empty()) {
		k_work_cancel_delayable(&gatt_ccc_store.work);
   2e8fe:	4835      	ldr	r0, [pc, #212]	; (2e9d4 <bt_gatt_disconnected+0x104>)
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2e900:	f104 0588 	add.w	r5, r4, #136	; 0x88
		k_work_cancel_delayable(&gatt_ccc_store.work);
   2e904:	f019 ffd5 	bl	488b2 <k_work_cancel_delayable>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2e908:	7a20      	ldrb	r0, [r4, #8]
   2e90a:	4629      	mov	r1, r5
   2e90c:	f016 fd6f 	bl	453ee <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   2e910:	b340      	cbz	r0, 2e964 <bt_gatt_disconnected+0x94>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   2e912:	4629      	mov	r1, r5
   2e914:	7a20      	ldrb	r0, [r4, #8]
   2e916:	f7ff ffab 	bl	2e870 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   2e91a:	4620      	mov	r0, r4
   2e91c:	f7ff f8a4 	bl	2da68 <find_cf_cfg>
	if (!cfg) {
   2e920:	4606      	mov	r6, r0
   2e922:	2800      	cmp	r0, #0
   2e924:	d03e      	beq.n	2e9a4 <bt_gatt_disconnected+0xd4>
		if (conn->id) {
   2e926:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   2e928:	3608      	adds	r6, #8
		if (conn->id) {
   2e92a:	b16a      	cbz	r2, 2e948 <bt_gatt_disconnected+0x78>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   2e92c:	af02      	add	r7, sp, #8
   2e92e:	2104      	movs	r1, #4
   2e930:	4638      	mov	r0, r7
   2e932:	f013 ff0c 	bl	4274e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   2e936:	462b      	mov	r3, r5
   2e938:	4a27      	ldr	r2, [pc, #156]	; (2e9d8 <bt_gatt_disconnected+0x108>)
   2e93a:	9700      	str	r7, [sp, #0]
   2e93c:	2124      	movs	r1, #36	; 0x24
   2e93e:	a803      	add	r0, sp, #12
   2e940:	f7fc f90c 	bl	2ab5c <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   2e944:	7a23      	ldrb	r3, [r4, #8]
   2e946:	bb7b      	cbnz	r3, 2e9a8 <bt_gatt_disconnected+0xd8>
		len = 0;
   2e948:	2701      	movs	r7, #1
		bt_settings_encode_key(key, sizeof(key), "cf",
   2e94a:	2300      	movs	r3, #0
   2e94c:	9300      	str	r3, [sp, #0]
   2e94e:	4a22      	ldr	r2, [pc, #136]	; (2e9d8 <bt_gatt_disconnected+0x108>)
   2e950:	462b      	mov	r3, r5
   2e952:	2124      	movs	r1, #36	; 0x24
   2e954:	a803      	add	r0, sp, #12
   2e956:	f7fc f901 	bl	2ab5c <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   2e95a:	463a      	mov	r2, r7
   2e95c:	4631      	mov	r1, r6
   2e95e:	a803      	add	r0, sp, #12
   2e960:	f7fa ff66 	bl	29830 <settings_save_one>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2e964:	7a20      	ldrb	r0, [r4, #8]
   2e966:	4629      	mov	r1, r5
   2e968:	f016 fd41 	bl	453ee <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   2e96c:	b150      	cbz	r0, 2e984 <bt_gatt_disconnected+0xb4>
		struct addr_with_id addr_with_id = {
   2e96e:	7a23      	ldrb	r3, [r4, #8]
   2e970:	f88d 3010 	strb.w	r3, [sp, #16]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   2e974:	4a19      	ldr	r2, [pc, #100]	; (2e9dc <bt_gatt_disconnected+0x10c>)
		struct addr_with_id addr_with_id = {
   2e976:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   2e978:	ab03      	add	r3, sp, #12
   2e97a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2e97e:	2001      	movs	r0, #1
   2e980:	f018 fa56 	bl	46e30 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   2e984:	4620      	mov	r0, r4
   2e986:	f7ff f86f 	bl	2da68 <find_cf_cfg>
	if (!cfg) {
   2e98a:	4606      	mov	r6, r0
   2e98c:	b1d8      	cbz	r0, 2e9c6 <bt_gatt_disconnected+0xf6>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2e98e:	7a20      	ldrb	r0, [r4, #8]
   2e990:	4629      	mov	r1, r5
   2e992:	f016 fd2c 	bl	453ee <bt_addr_le_is_bonded>
   2e996:	b948      	cbnz	r0, 2e9ac <bt_gatt_disconnected+0xdc>
		clear_cf_cfg(cfg);
   2e998:	4630      	mov	r0, r6
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   2e99a:	b00d      	add	sp, #52	; 0x34
   2e99c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		clear_cf_cfg(cfg);
   2e9a0:	f017 bff0 	b.w	46984 <clear_cf_cfg>
		len = 0;
   2e9a4:	4607      	mov	r7, r0
   2e9a6:	e7d0      	b.n	2e94a <bt_gatt_disconnected+0x7a>
   2e9a8:	2701      	movs	r7, #1
   2e9aa:	e7d6      	b.n	2e95a <bt_gatt_disconnected+0x8a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   2e9ac:	4629      	mov	r1, r5
   2e9ae:	1c70      	adds	r0, r6, #1
   2e9b0:	f017 ff84 	bl	468bc <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2e9b4:	f06f 0102 	mvn.w	r1, #2
   2e9b8:	f106 000c 	add.w	r0, r6, #12
}
   2e9bc:	b00d      	add	sp, #52	; 0x34
   2e9be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2e9c2:	f017 bfd0 	b.w	46966 <atomic_and>
   2e9c6:	b00d      	add	sp, #52	; 0x34
   2e9c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e9ca:	bf00      	nop
   2e9cc:	0002de1d 	.word	0x0002de1d
   2e9d0:	200010d0 	.word	0x200010d0
   2e9d4:	200010d8 	.word	0x200010d8
   2e9d8:	0004b0c7 	.word	0x0004b0c7
   2e9dc:	0002dc45 	.word	0x0002dc45

0002e9e0 <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
   2e9e0:	4b10      	ldr	r3, [pc, #64]	; (2ea24 <get_io_capa+0x44>)
   2e9e2:	681a      	ldr	r2, [r3, #0]
   2e9e4:	b1ca      	cbz	r2, 2ea1a <get_io_capa+0x3a>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   2e9e6:	e9d2 1301 	ldrd	r1, r3, [r2, #4]
   2e9ea:	b921      	cbnz	r1, 2e9f6 <get_io_capa+0x16>
	if (bt_auth->passkey_entry) {
		if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
		    fixed_passkey != BT_PASSKEY_INVALID) {
			return BT_SMP_IO_KEYBOARD_DISPLAY;
		} else {
			return BT_SMP_IO_KEYBOARD_ONLY;
   2e9ec:	2b00      	cmp	r3, #0
   2e9ee:	bf0c      	ite	eq
   2e9f0:	2003      	moveq	r0, #3
   2e9f2:	2002      	movne	r0, #2
   2e9f4:	4770      	bx	lr
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   2e9f6:	b133      	cbz	r3, 2ea06 <get_io_capa+0x26>
   2e9f8:	68d2      	ldr	r2, [r2, #12]
   2e9fa:	b912      	cbnz	r2, 2ea02 <get_io_capa+0x22>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   2e9fc:	4a0a      	ldr	r2, [pc, #40]	; (2ea28 <get_io_capa+0x48>)
   2e9fe:	7812      	ldrb	r2, [r2, #0]
   2ea00:	b932      	cbnz	r2, 2ea10 <get_io_capa+0x30>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   2ea02:	2004      	movs	r0, #4
   2ea04:	4770      	bx	lr
	if (sc_supported && bt_auth->passkey_display &&
   2ea06:	4908      	ldr	r1, [pc, #32]	; (2ea28 <get_io_capa+0x48>)
   2ea08:	7808      	ldrb	r0, [r1, #0]
   2ea0a:	b148      	cbz	r0, 2ea20 <get_io_capa+0x40>
   2ea0c:	68d2      	ldr	r2, [r2, #12]
   2ea0e:	b932      	cbnz	r2, 2ea1e <get_io_capa+0x3e>
	if (bt_auth->passkey_entry) {
   2ea10:	3b00      	subs	r3, #0
   2ea12:	bf18      	it	ne
   2ea14:	2301      	movne	r3, #1
   2ea16:	0058      	lsls	r0, r3, #1
   2ea18:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   2ea1a:	2003      	movs	r0, #3
   2ea1c:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
   2ea1e:	2001      	movs	r0, #1
	}
}
   2ea20:	4770      	bx	lr
   2ea22:	bf00      	nop
   2ea24:	20001c50 	.word	0x20001c50
   2ea28:	20003c0f 	.word	0x20003c0f

0002ea2c <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   2ea2c:	4b06      	ldr	r3, [pc, #24]	; (2ea48 <bt_smp_accept+0x1c>)
   2ea2e:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
   2ea32:	b928      	cbnz	r0, 2ea40 <bt_smp_accept+0x14>
			continue;
		}

		smp->chan.chan.ops = &ops;
   2ea34:	4a05      	ldr	r2, [pc, #20]	; (2ea4c <bt_smp_accept+0x20>)
   2ea36:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

		*chan = &smp->chan.chan;
   2ea3a:	33f0      	adds	r3, #240	; 0xf0
   2ea3c:	600b      	str	r3, [r1, #0]

		return 0;
   2ea3e:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
   2ea40:	f06f 000b 	mvn.w	r0, #11
}
   2ea44:	4770      	bx	lr
   2ea46:	bf00      	nop
   2ea48:	200011d8 	.word	0x200011d8
   2ea4c:	00049b8c 	.word	0x00049b8c

0002ea50 <get_auth.constprop.0>:
	if (sc_supported) {
   2ea50:	4b0c      	ldr	r3, [pc, #48]	; (2ea84 <get_auth.constprop.0+0x34>)
   2ea52:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
   2ea54:	b510      	push	{r4, lr}
	if (sc_supported) {
   2ea56:	b17b      	cbz	r3, 2ea78 <get_auth.constprop.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   2ea58:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   2ea5c:	f7ff ffc0 	bl	2e9e0 <get_io_capa>
	if (bondable) {
   2ea60:	4b09      	ldr	r3, [pc, #36]	; (2ea88 <get_auth.constprop.0+0x38>)
   2ea62:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   2ea64:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   2ea66:	bf0c      	ite	eq
   2ea68:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   2ea6c:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   2ea70:	b12b      	cbz	r3, 2ea7e <get_auth.constprop.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   2ea72:	f044 0001 	orr.w	r0, r4, #1
}
   2ea76:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   2ea78:	f000 0407 	and.w	r4, r0, #7
   2ea7c:	e7ee      	b.n	2ea5c <get_auth.constprop.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   2ea7e:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   2ea82:	e7f8      	b.n	2ea76 <get_auth.constprop.0+0x26>
   2ea84:	20003c0f 	.word	0x20003c0f
   2ea88:	200009e2 	.word	0x200009e2

0002ea8c <smp_init>:
{
   2ea8c:	b538      	push	{r3, r4, r5, lr}
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   2ea8e:	22f0      	movs	r2, #240	; 0xf0
{
   2ea90:	4605      	mov	r5, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   2ea92:	2100      	movs	r1, #0
   2ea94:	f016 f820 	bl	44ad8 <memset>
	if (bt_rand(smp->prnd, 16)) {
   2ea98:	2110      	movs	r1, #16
   2ea9a:	f105 0027 	add.w	r0, r5, #39	; 0x27
   2ea9e:	f003 fddb 	bl	32658 <bt_rand>
   2eaa2:	4604      	mov	r4, r0
   2eaa4:	b948      	cbnz	r0, 2eaba <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   2eaa6:	2105      	movs	r1, #5
   2eaa8:	4628      	mov	r0, r5
   2eaaa:	f018 fb45 	bl	47138 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   2eaae:	f7fd fc3d 	bl	2c32c <bt_pub_key_get>
   2eab2:	4b03      	ldr	r3, [pc, #12]	; (2eac0 <smp_init+0x34>)
   2eab4:	6018      	str	r0, [r3, #0]
}
   2eab6:	4620      	mov	r0, r4
   2eab8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2eaba:	2408      	movs	r4, #8
   2eabc:	e7fb      	b.n	2eab6 <smp_init+0x2a>
   2eabe:	bf00      	nop
   2eac0:	20001cb8 	.word	0x20001cb8

0002eac4 <smp_dhkey_generate>:
{
   2eac4:	b538      	push	{r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2eac6:	1d05      	adds	r5, r0, #4
{
   2eac8:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2eaca:	2108      	movs	r1, #8
   2eacc:	4628      	mov	r0, r5
   2eace:	f018 fb33 	bl	47138 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   2ead2:	4906      	ldr	r1, [pc, #24]	; (2eaec <smp_dhkey_generate+0x28>)
   2ead4:	f104 0057 	add.w	r0, r4, #87	; 0x57
   2ead8:	f7fd fc38 	bl	2c34c <bt_dh_key_gen>
	if (err) {
   2eadc:	b120      	cbz	r0, 2eae8 <smp_dhkey_generate+0x24>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2eade:	4628      	mov	r0, r5
   2eae0:	2108      	movs	r1, #8
   2eae2:	f018 fa5f 	bl	46fa4 <atomic_clear_bit>
		return BT_SMP_ERR_UNSPECIFIED;
   2eae6:	2008      	movs	r0, #8
}
   2eae8:	bd38      	pop	{r3, r4, r5, pc}
   2eaea:	bf00      	nop
   2eaec:	000474dd 	.word	0x000474dd

0002eaf0 <smp_find>:
{
   2eaf0:	b508      	push	{r3, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   2eaf2:	4b05      	ldr	r3, [pc, #20]	; (2eb08 <smp_find+0x18>)
{
   2eaf4:	4601      	mov	r1, r0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   2eaf6:	4618      	mov	r0, r3
   2eaf8:	f018 fb38 	bl	4716c <atomic_test_bit>
	return NULL;
   2eafc:	3b04      	subs	r3, #4
   2eafe:	2800      	cmp	r0, #0
}
   2eb00:	bf14      	ite	ne
   2eb02:	4618      	movne	r0, r3
   2eb04:	2000      	moveq	r0, #0
   2eb06:	bd08      	pop	{r3, pc}
   2eb08:	200011dc 	.word	0x200011dc

0002eb0c <smp_pairing_random>:
{
   2eb0c:	b570      	push	{r4, r5, r6, lr}
   2eb0e:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   2eb10:	f100 0537 	add.w	r5, r0, #55	; 0x37
   2eb14:	6889      	ldr	r1, [r1, #8]
{
   2eb16:	b09c      	sub	sp, #112	; 0x70
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   2eb18:	2210      	movs	r2, #16
   2eb1a:	4628      	mov	r0, r5
   2eb1c:	f015 ffd1 	bl	44ac2 <memcpy>
	switch (smp->method) {
   2eb20:	7a23      	ldrb	r3, [r4, #8]
   2eb22:	2b05      	cmp	r3, #5
   2eb24:	d825      	bhi.n	2eb72 <smp_pairing_random+0x66>
   2eb26:	e8df f003 	tbb	[pc, r3]
   2eb2a:	4b3f      	.short	0x4b3f
   2eb2c:	8c24034b 	.word	0x8c24034b
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   2eb30:	4b5b      	ldr	r3, [pc, #364]	; (2eca0 <smp_pairing_random+0x194>)
	sys_memcpy_swap(m, u, 32);
   2eb32:	2220      	movs	r2, #32
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   2eb34:	681e      	ldr	r6, [r3, #0]
	sys_memcpy_swap(m, u, 32);
   2eb36:	eb0d 0002 	add.w	r0, sp, r2
   2eb3a:	f104 0157 	add.w	r1, r4, #87	; 0x57
   2eb3e:	f018 fa1e 	bl	46f7e <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2eb42:	2220      	movs	r2, #32
   2eb44:	4631      	mov	r1, r6
   2eb46:	a810      	add	r0, sp, #64	; 0x40
   2eb48:	f018 fa19 	bl	46f7e <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   2eb4c:	2210      	movs	r2, #16
   2eb4e:	f104 0127 	add.w	r1, r4, #39	; 0x27
   2eb52:	a818      	add	r0, sp, #96	; 0x60
   2eb54:	f018 fa13 	bl	46f7e <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   2eb58:	2210      	movs	r2, #16
   2eb5a:	eb0d 0002 	add.w	r0, sp, r2
   2eb5e:	4629      	mov	r1, r5
   2eb60:	f018 fa0d 	bl	46f7e <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   2eb64:	ab04      	add	r3, sp, #16
   2eb66:	2250      	movs	r2, #80	; 0x50
   2eb68:	a908      	add	r1, sp, #32
   2eb6a:	4618      	mov	r0, r3
   2eb6c:	f018 fa29 	bl	46fc2 <bt_smp_aes_cmac>
	if (err) {
   2eb70:	b110      	cbz	r0, 2eb78 <smp_pairing_random+0x6c>
			return BT_SMP_ERR_UNSPECIFIED;
   2eb72:	2008      	movs	r0, #8
}
   2eb74:	b01c      	add	sp, #112	; 0x70
   2eb76:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(passkey, xs + 12, 4);
   2eb78:	2204      	movs	r2, #4
   2eb7a:	a907      	add	r1, sp, #28
   2eb7c:	a803      	add	r0, sp, #12
   2eb7e:	f015 ffa0 	bl	44ac2 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   2eb82:	9b03      	ldr	r3, [sp, #12]
   2eb84:	4a47      	ldr	r2, [pc, #284]	; (2eca4 <smp_pairing_random+0x198>)
   2eb86:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   2eb88:	1d20      	adds	r0, r4, #4
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   2eb8a:	fbb3 f1f2 	udiv	r1, r3, r2
   2eb8e:	fb02 3311 	mls	r3, r2, r1, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   2eb92:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   2eb94:	9303      	str	r3, [sp, #12]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   2eb96:	f018 facf 	bl	47138 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   2eb9a:	4b43      	ldr	r3, [pc, #268]	; (2eca8 <smp_pairing_random+0x19c>)
   2eb9c:	9903      	ldr	r1, [sp, #12]
   2eb9e:	681b      	ldr	r3, [r3, #0]
   2eba0:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   2eba4:	68db      	ldr	r3, [r3, #12]
   2eba6:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   2eba8:	4620      	mov	r0, r4
   2ebaa:	210d      	movs	r1, #13
   2ebac:	f018 fac4 	bl	47138 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2ebb0:	1d20      	adds	r0, r4, #4
   2ebb2:	2110      	movs	r1, #16
   2ebb4:	f018 fac0 	bl	47138 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   2ebb8:	4620      	mov	r0, r4
   2ebba:	f018 fb3f 	bl	4723c <smp_send_pairing_random>
   2ebbe:	e7d9      	b.n	2eb74 <smp_pairing_random+0x68>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   2ebc0:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   2ebc4:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   2ebc8:	4935      	ldr	r1, [pc, #212]	; (2eca0 <smp_pairing_random+0x194>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   2ebca:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   2ebcc:	ae08      	add	r6, sp, #32
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   2ebce:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   2ebd2:	9600      	str	r6, [sp, #0]
   2ebd4:	6809      	ldr	r1, [r1, #0]
   2ebd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2ebda:	462a      	mov	r2, r5
   2ebdc:	f104 0057 	add.w	r0, r4, #87	; 0x57
   2ebe0:	f018 fa85 	bl	470ee <smp_f4>
   2ebe4:	2800      	cmp	r0, #0
   2ebe6:	d1c4      	bne.n	2eb72 <smp_pairing_random+0x66>
	if (memcmp(smp->pcnf, cfm, 16)) {
   2ebe8:	2210      	movs	r2, #16
   2ebea:	4631      	mov	r1, r6
   2ebec:	f104 0017 	add.w	r0, r4, #23
   2ebf0:	f015 ff57 	bl	44aa2 <memcmp>
   2ebf4:	b108      	cbz	r0, 2ebfa <smp_pairing_random+0xee>
		return BT_SMP_ERR_CONFIRM_FAILED;
   2ebf6:	2004      	movs	r0, #4
   2ebf8:	e7bc      	b.n	2eb74 <smp_pairing_random+0x68>
		atomic_set_bit(smp->allowed_cmds,
   2ebfa:	2103      	movs	r1, #3
   2ebfc:	4620      	mov	r0, r4
   2ebfe:	f018 fa9b 	bl	47138 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   2ec02:	f018 fb1b 	bl	4723c <smp_send_pairing_random>
		if (err) {
   2ec06:	2800      	cmp	r0, #0
   2ec08:	d1b4      	bne.n	2eb74 <smp_pairing_random+0x68>
		smp->passkey_round++;
   2ec0a:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   2ec0e:	3301      	adds	r3, #1
   2ec10:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   2ec12:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   2ec14:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   2ec18:	d109      	bne.n	2ec2e <smp_pairing_random+0x122>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   2ec1a:	210d      	movs	r1, #13
   2ec1c:	4620      	mov	r0, r4
   2ec1e:	f018 fa8b 	bl	47138 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2ec22:	2110      	movs	r1, #16
   2ec24:	1d20      	adds	r0, r4, #4
   2ec26:	f018 fa87 	bl	47138 <atomic_set_bit>
			return 0;
   2ec2a:	2000      	movs	r0, #0
   2ec2c:	e7a2      	b.n	2eb74 <smp_pairing_random+0x68>
		if (bt_rand(smp->prnd, 16)) {
   2ec2e:	2110      	movs	r1, #16
   2ec30:	f104 0027 	add.w	r0, r4, #39	; 0x27
   2ec34:	f003 fd10 	bl	32658 <bt_rand>
   2ec38:	3800      	subs	r0, #0
   2ec3a:	bf18      	it	ne
   2ec3c:	2001      	movne	r0, #1
   2ec3e:	00c0      	lsls	r0, r0, #3
   2ec40:	e798      	b.n	2eb74 <smp_pairing_random+0x68>
		if (bt_rand(smp->prnd, 16)) {
   2ec42:	2110      	movs	r1, #16
   2ec44:	f104 0027 	add.w	r0, r4, #39	; 0x27
   2ec48:	f003 fd06 	bl	32658 <bt_rand>
   2ec4c:	2800      	cmp	r0, #0
   2ec4e:	d190      	bne.n	2eb72 <smp_pairing_random+0x66>
		if (bt_auth && bt_auth->oob_data_request) {
   2ec50:	4d15      	ldr	r5, [pc, #84]	; (2eca8 <smp_pairing_random+0x19c>)
   2ec52:	682b      	ldr	r3, [r5, #0]
   2ec54:	b30b      	cbz	r3, 2ec9a <smp_pairing_random+0x18e>
   2ec56:	691b      	ldr	r3, [r3, #16]
   2ec58:	b1fb      	cbz	r3, 2ec9a <smp_pairing_random+0x18e>
			struct bt_conn_oob_info info = {
   2ec5a:	4b14      	ldr	r3, [pc, #80]	; (2ecac <smp_pairing_random+0x1a0>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   2ec5c:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   2ec5e:	881b      	ldrh	r3, [r3, #0]
   2ec60:	f8ad 3020 	strh.w	r3, [sp, #32]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   2ec64:	7ca3      	ldrb	r3, [r4, #18]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   2ec66:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   2ec68:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   2ec6c:	d413      	bmi.n	2ec96 <smp_pairing_random+0x18a>
   2ec6e:	2b00      	cmp	r3, #0
   2ec70:	bf14      	ite	ne
   2ec72:	2301      	movne	r3, #1
   2ec74:	2303      	moveq	r3, #3
	info->lesc.oob_config = oob_config;
   2ec76:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			smp->oobd_local = NULL;
   2ec7a:	2300      	movs	r3, #0
			smp->oobd_remote = NULL;
   2ec7c:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   2ec80:	1d20      	adds	r0, r4, #4
   2ec82:	210c      	movs	r1, #12
   2ec84:	f018 fa58 	bl	47138 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   2ec88:	682b      	ldr	r3, [r5, #0]
   2ec8a:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   2ec8e:	691b      	ldr	r3, [r3, #16]
   2ec90:	a908      	add	r1, sp, #32
   2ec92:	4798      	blx	r3
			return 0;
   2ec94:	e7c9      	b.n	2ec2a <smp_pairing_random+0x11e>
		if (rsp_oob_present) {
   2ec96:	005b      	lsls	r3, r3, #1
   2ec98:	e7ed      	b.n	2ec76 <smp_pairing_random+0x16a>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   2ec9a:	2002      	movs	r0, #2
   2ec9c:	e76a      	b.n	2eb74 <smp_pairing_random+0x68>
   2ec9e:	bf00      	nop
   2eca0:	20001cb8 	.word	0x20001cb8
   2eca4:	000f4240 	.word	0x000f4240
   2eca8:	20001c50 	.word	0x20001c50
   2ecac:	00049432 	.word	0x00049432

0002ecb0 <compute_and_check_and_send_periph_dhcheck>:
{
   2ecb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)memset(r, 0, sizeof(r));
   2ecb4:	2210      	movs	r2, #16
{
   2ecb6:	b0a3      	sub	sp, #140	; 0x8c
   2ecb8:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
   2ecba:	2100      	movs	r1, #0
   2ecbc:	eb0d 0002 	add.w	r0, sp, r2
   2ecc0:	f015 ff0a 	bl	44ad8 <memset>
	switch (smp->method) {
   2ecc4:	7a23      	ldrb	r3, [r4, #8]
   2ecc6:	2b05      	cmp	r3, #5
   2ecc8:	d82a      	bhi.n	2ed20 <compute_and_check_and_send_periph_dhcheck+0x70>
   2ecca:	e8df f003 	tbb	[pc, r3]
   2ecce:	0309      	.short	0x0309
   2ecd0:	2d290903 	.word	0x2d290903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   2ecd4:	2204      	movs	r2, #4
   2ecd6:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
   2ecda:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   2ecdc:	f015 fef1 	bl	44ac2 <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
   2ece0:	4b64      	ldr	r3, [pc, #400]	; (2ee74 <compute_and_check_and_send_periph_dhcheck+0x1c4>)
		   &smp->chan.chan.conn->le.init_addr,
   2ece2:	f8d4 90f0 	ldr.w	r9, [r4, #240]	; 0xf0
	uint8_t m[53] = { 0x00, /* counter */
   2ece6:	aa14      	add	r2, sp, #80	; 0x50
   2ece8:	f103 0630 	add.w	r6, r3, #48	; 0x30
   2ecec:	6818      	ldr	r0, [r3, #0]
   2ecee:	6859      	ldr	r1, [r3, #4]
   2ecf0:	4615      	mov	r5, r2
   2ecf2:	c503      	stmia	r5!, {r0, r1}
   2ecf4:	3308      	adds	r3, #8
   2ecf6:	42b3      	cmp	r3, r6
   2ecf8:	462a      	mov	r2, r5
   2ecfa:	d1f7      	bne.n	2ecec <compute_and_check_and_send_periph_dhcheck+0x3c>
   2ecfc:	6818      	ldr	r0, [r3, #0]
   2ecfe:	791b      	ldrb	r3, [r3, #4]
   2ed00:	6028      	str	r0, [r5, #0]
   2ed02:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
   2ed04:	ad0c      	add	r5, sp, #48	; 0x30
   2ed06:	2220      	movs	r2, #32
   2ed08:	f104 0197 	add.w	r1, r4, #151	; 0x97
   2ed0c:	4628      	mov	r0, r5
   2ed0e:	f018 f936 	bl	46f7e <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   2ed12:	4859      	ldr	r0, [pc, #356]	; (2ee78 <compute_and_check_and_send_periph_dhcheck+0x1c8>)
   2ed14:	ab08      	add	r3, sp, #32
   2ed16:	2220      	movs	r2, #32
   2ed18:	4629      	mov	r1, r5
   2ed1a:	f018 f952 	bl	46fc2 <bt_smp_aes_cmac>
	if (err) {
   2ed1e:	b158      	cbz	r0, 2ed38 <compute_and_check_and_send_periph_dhcheck+0x88>
		return BT_SMP_ERR_UNSPECIFIED;
   2ed20:	2008      	movs	r0, #8
}
   2ed22:	b023      	add	sp, #140	; 0x8c
   2ed24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (smp->oobd_remote) {
   2ed28:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   2ed2c:	2900      	cmp	r1, #0
   2ed2e:	d0d7      	beq.n	2ece0 <compute_and_check_and_send_periph_dhcheck+0x30>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   2ed30:	2210      	movs	r2, #16
   2ed32:	eb0d 0002 	add.w	r0, sp, r2
   2ed36:	e7d1      	b.n	2ecdc <compute_and_check_and_send_periph_dhcheck+0x2c>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   2ed38:	f104 0737 	add.w	r7, r4, #55	; 0x37
	sys_memcpy_swap(m + 5, n1, 16);
   2ed3c:	2210      	movs	r2, #16
   2ed3e:	4639      	mov	r1, r7
   2ed40:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   2ed44:	f104 0827 	add.w	r8, r4, #39	; 0x27
	sys_memcpy_swap(m + 5, n1, 16);
   2ed48:	f018 f919 	bl	46f7e <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   2ed4c:	2210      	movs	r2, #16
   2ed4e:	4641      	mov	r1, r8
   2ed50:	f10d 0065 	add.w	r0, sp, #101	; 0x65
   2ed54:	f018 f913 	bl	46f7e <sys_memcpy_swap>
	m[37] = a1->type;
   2ed58:	f899 308f 	ldrb.w	r3, [r9, #143]	; 0x8f
   2ed5c:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   2ed60:	2206      	movs	r2, #6
   2ed62:	f109 0190 	add.w	r1, r9, #144	; 0x90
   2ed66:	f10d 0076 	add.w	r0, sp, #118	; 0x76
   2ed6a:	f018 f908 	bl	46f7e <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   2ed6e:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	m[44] = a2->type;
   2ed72:	f899 3096 	ldrb.w	r3, [r9, #150]	; 0x96
   2ed76:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   2ed7a:	2206      	movs	r2, #6
   2ed7c:	f109 0197 	add.w	r1, r9, #151	; 0x97
   2ed80:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
   2ed84:	f018 f8fb 	bl	46f7e <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   2ed88:	4633      	mov	r3, r6
   2ed8a:	2235      	movs	r2, #53	; 0x35
   2ed8c:	a914      	add	r1, sp, #80	; 0x50
   2ed8e:	a808      	add	r0, sp, #32
   2ed90:	f018 f917 	bl	46fc2 <bt_smp_aes_cmac>
	if (err) {
   2ed94:	2800      	cmp	r0, #0
   2ed96:	d1c3      	bne.n	2ed20 <compute_and_check_and_send_periph_dhcheck+0x70>
	sys_mem_swap(mackey, 16);
   2ed98:	4630      	mov	r0, r6
   2ed9a:	f018 f94e 	bl	4703a <sys_mem_swap.constprop.0>
		   smp->tk)) {
   2ed9e:	f104 0947 	add.w	r9, r4, #71	; 0x47
	m[0] = 0x01;
   2eda2:	2301      	movs	r3, #1
   2eda4:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   2eda8:	2235      	movs	r2, #53	; 0x35
   2edaa:	464b      	mov	r3, r9
   2edac:	a914      	add	r1, sp, #80	; 0x50
   2edae:	a808      	add	r0, sp, #32
   2edb0:	f018 f907 	bl	46fc2 <bt_smp_aes_cmac>
	if (err) {
   2edb4:	2800      	cmp	r0, #0
   2edb6:	d1b3      	bne.n	2ed20 <compute_and_check_and_send_periph_dhcheck+0x70>
	sys_mem_swap(ltk, 16);
   2edb8:	4648      	mov	r0, r9
   2edba:	f018 f93e 	bl	4703a <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.resp_addr,
   2edbe:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   2edc2:	aa14      	add	r2, sp, #80	; 0x50
   2edc4:	9203      	str	r2, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
   2edc6:	f103 028f 	add.w	r2, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
   2edca:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   2edcc:	9301      	str	r3, [sp, #4]
   2edce:	f104 0311 	add.w	r3, r4, #17
   2edd2:	9202      	str	r2, [sp, #8]
   2edd4:	9300      	str	r3, [sp, #0]
   2edd6:	463a      	mov	r2, r7
   2edd8:	ab04      	add	r3, sp, #16
   2edda:	4641      	mov	r1, r8
   2eddc:	4630      	mov	r0, r6
   2edde:	f018 f93a 	bl	47056 <smp_f6>
   2ede2:	2800      	cmp	r0, #0
   2ede4:	d19c      	bne.n	2ed20 <compute_and_check_and_send_periph_dhcheck+0x70>
	if (smp->method == LE_SC_OOB) {
   2ede6:	7a23      	ldrb	r3, [r4, #8]
   2ede8:	2b05      	cmp	r3, #5
   2edea:	d107      	bne.n	2edfc <compute_and_check_and_send_periph_dhcheck+0x14c>
		if (smp->oobd_local) {
   2edec:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   2edf0:	2210      	movs	r2, #16
   2edf2:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
   2edf6:	b3b9      	cbz	r1, 2ee68 <compute_and_check_and_send_periph_dhcheck+0x1b8>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   2edf8:	f015 fe63 	bl	44ac2 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   2edfc:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   2ee00:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   2ee02:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   2ee06:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   2ee08:	9301      	str	r3, [sp, #4]
   2ee0a:	f104 030a 	add.w	r3, r4, #10
   2ee0e:	9202      	str	r2, [sp, #8]
   2ee10:	9300      	str	r3, [sp, #0]
   2ee12:	4642      	mov	r2, r8
   2ee14:	ab04      	add	r3, sp, #16
   2ee16:	4639      	mov	r1, r7
   2ee18:	4630      	mov	r0, r6
   2ee1a:	f018 f91c 	bl	47056 <smp_f6>
   2ee1e:	2800      	cmp	r0, #0
   2ee20:	f47f af7e 	bne.w	2ed20 <compute_and_check_and_send_periph_dhcheck+0x70>
	if (memcmp(smp->e, re, 16)) {
   2ee24:	4629      	mov	r1, r5
   2ee26:	2210      	movs	r2, #16
   2ee28:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   2ee2c:	f015 fe39 	bl	44aa2 <memcmp>
   2ee30:	4605      	mov	r5, r0
   2ee32:	b9e0      	cbnz	r0, 2ee6e <compute_and_check_and_send_periph_dhcheck+0x1be>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   2ee34:	210d      	movs	r1, #13
   2ee36:	4620      	mov	r0, r4
   2ee38:	f018 f9e1 	bl	471fe <smp_create_pdu.constprop.0>
	if (!buf) {
   2ee3c:	4606      	mov	r6, r0
   2ee3e:	2800      	cmp	r0, #0
   2ee40:	f43f af6e 	beq.w	2ed20 <compute_and_check_and_send_periph_dhcheck+0x70>
   2ee44:	2110      	movs	r1, #16
   2ee46:	3008      	adds	r0, #8
   2ee48:	f018 fd6e 	bl	47928 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   2ee4c:	2210      	movs	r2, #16
   2ee4e:	a914      	add	r1, sp, #80	; 0x50
   2ee50:	f015 fe37 	bl	44ac2 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   2ee54:	4631      	mov	r1, r6
   2ee56:	4620      	mov	r0, r4
   2ee58:	f018 f8d3 	bl	47002 <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2ee5c:	1d20      	adds	r0, r4, #4
   2ee5e:	2101      	movs	r1, #1
   2ee60:	f018 f96a 	bl	47138 <atomic_set_bit>
	return 0;
   2ee64:	4628      	mov	r0, r5
   2ee66:	e75c      	b.n	2ed22 <compute_and_check_and_send_periph_dhcheck+0x72>
			memset(r, 0, sizeof(r));
   2ee68:	f015 fe36 	bl	44ad8 <memset>
   2ee6c:	e7c6      	b.n	2edfc <compute_and_check_and_send_periph_dhcheck+0x14c>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2ee6e:	200b      	movs	r0, #11
   2ee70:	e757      	b.n	2ed22 <compute_and_check_and_send_periph_dhcheck+0x72>
   2ee72:	bf00      	nop
   2ee74:	00049434 	.word	0x00049434
   2ee78:	0004b0f0 	.word	0x0004b0f0

0002ee7c <smp_send_pairing_confirm>:
{
   2ee7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   2ee7e:	7a04      	ldrb	r4, [r0, #8]
   2ee80:	2c02      	cmp	r4, #2
{
   2ee82:	4605      	mov	r5, r0
	switch (smp->method) {
   2ee84:	d823      	bhi.n	2eece <smp_send_pairing_confirm+0x52>
   2ee86:	b144      	cbz	r4, 2ee9a <smp_send_pairing_confirm+0x1e>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   2ee88:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   2ee8c:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   2ee90:	40dc      	lsrs	r4, r3
   2ee92:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   2ee96:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2ee9a:	2103      	movs	r1, #3
   2ee9c:	4628      	mov	r0, r5
   2ee9e:	f018 f9ae 	bl	471fe <smp_create_pdu.constprop.0>
	if (!buf) {
   2eea2:	4606      	mov	r6, r0
   2eea4:	b1a8      	cbz	r0, 2eed2 <smp_send_pairing_confirm+0x56>
   2eea6:	2110      	movs	r1, #16
   2eea8:	3008      	adds	r0, #8
   2eeaa:	f018 fd3d 	bl	47928 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   2eeae:	9000      	str	r0, [sp, #0]
   2eeb0:	480f      	ldr	r0, [pc, #60]	; (2eef0 <smp_send_pairing_confirm+0x74>)
   2eeb2:	4623      	mov	r3, r4
   2eeb4:	6800      	ldr	r0, [r0, #0]
   2eeb6:	f105 0227 	add.w	r2, r5, #39	; 0x27
   2eeba:	f105 0157 	add.w	r1, r5, #87	; 0x57
   2eebe:	f018 f916 	bl	470ee <smp_f4>
   2eec2:	4604      	mov	r4, r0
   2eec4:	b150      	cbz	r0, 2eedc <smp_send_pairing_confirm+0x60>
		net_buf_unref(buf);
   2eec6:	4630      	mov	r0, r6
   2eec8:	f00e f8ee 	bl	3d0a8 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2eecc:	e001      	b.n	2eed2 <smp_send_pairing_confirm+0x56>
	switch (smp->method) {
   2eece:	2c03      	cmp	r4, #3
   2eed0:	d002      	beq.n	2eed8 <smp_send_pairing_confirm+0x5c>
		return BT_SMP_ERR_UNSPECIFIED;
   2eed2:	2008      	movs	r0, #8
}
   2eed4:	b002      	add	sp, #8
   2eed6:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   2eed8:	2400      	movs	r4, #0
   2eeda:	e7de      	b.n	2ee9a <smp_send_pairing_confirm+0x1e>
	smp_send(smp, buf, NULL, NULL);
   2eedc:	4631      	mov	r1, r6
   2eede:	4628      	mov	r0, r5
   2eee0:	f018 f88f 	bl	47002 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2eee4:	1d28      	adds	r0, r5, #4
   2eee6:	4621      	mov	r1, r4
   2eee8:	f018 f85c 	bl	46fa4 <atomic_clear_bit>
	return 0;
   2eeec:	4620      	mov	r0, r4
   2eeee:	e7f1      	b.n	2eed4 <smp_send_pairing_confirm+0x58>
   2eef0:	20001cb8 	.word	0x20001cb8

0002eef4 <smp_public_key_periph>:
{
   2eef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   2eef8:	1d06      	adds	r6, r0, #4
{
   2eefa:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   2eefc:	210e      	movs	r1, #14
   2eefe:	4630      	mov	r0, r6
   2ef00:	f018 f934 	bl	4716c <atomic_test_bit>
   2ef04:	b140      	cbz	r0, 2ef18 <smp_public_key_periph+0x24>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   2ef06:	210c      	movs	r1, #12
   2ef08:	4620      	mov	r0, r4
   2ef0a:	f018 f978 	bl	471fe <smp_create_pdu.constprop.0>
	if (!req_buf) {
   2ef0e:	4605      	mov	r5, r0
   2ef10:	b960      	cbnz	r0, 2ef2c <smp_public_key_periph+0x38>
{
   2ef12:	2008      	movs	r0, #8
}
   2ef14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   2ef18:	4b45      	ldr	r3, [pc, #276]	; (2f030 <smp_public_key_periph+0x13c>)
   2ef1a:	2220      	movs	r2, #32
   2ef1c:	6819      	ldr	r1, [r3, #0]
   2ef1e:	f104 0057 	add.w	r0, r4, #87	; 0x57
   2ef22:	f015 fdbe 	bl	44aa2 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   2ef26:	2800      	cmp	r0, #0
   2ef28:	d1ed      	bne.n	2ef06 <smp_public_key_periph+0x12>
   2ef2a:	e7f2      	b.n	2ef12 <smp_public_key_periph+0x1e>
   2ef2c:	2140      	movs	r1, #64	; 0x40
   2ef2e:	3008      	adds	r0, #8
   2ef30:	f018 fcfa 	bl	47928 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   2ef34:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 2f030 <smp_public_key_periph+0x13c>
   2ef38:	2220      	movs	r2, #32
   2ef3a:	f8d8 1000 	ldr.w	r1, [r8]
   2ef3e:	4607      	mov	r7, r0
   2ef40:	f015 fdbf 	bl	44ac2 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   2ef44:	f8d8 1000 	ldr.w	r1, [r8]
   2ef48:	2220      	movs	r2, #32
   2ef4a:	4411      	add	r1, r2
   2ef4c:	18b8      	adds	r0, r7, r2
   2ef4e:	f015 fdb8 	bl	44ac2 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   2ef52:	4629      	mov	r1, r5
   2ef54:	4620      	mov	r0, r4
   2ef56:	f018 f854 	bl	47002 <smp_send.constprop.0>
	switch (smp->method) {
   2ef5a:	7a23      	ldrb	r3, [r4, #8]
   2ef5c:	2b05      	cmp	r3, #5
   2ef5e:	d8d8      	bhi.n	2ef12 <smp_public_key_periph+0x1e>
   2ef60:	a201      	add	r2, pc, #4	; (adr r2, 2ef68 <smp_public_key_periph+0x74>)
   2ef62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2ef66:	bf00      	nop
   2ef68:	0002ef81 	.word	0x0002ef81
   2ef6c:	0002f001 	.word	0x0002f001
   2ef70:	0002efad 	.word	0x0002efad
   2ef74:	0002ef81 	.word	0x0002ef81
   2ef78:	0002ef13 	.word	0x0002ef13
   2ef7c:	0002f025 	.word	0x0002f025
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   2ef80:	2104      	movs	r1, #4
   2ef82:	4620      	mov	r0, r4
   2ef84:	f018 f8d8 	bl	47138 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   2ef88:	f7ff ff78 	bl	2ee7c <smp_send_pairing_confirm>
		if (err) {
   2ef8c:	2800      	cmp	r0, #0
   2ef8e:	d1c1      	bne.n	2ef14 <smp_public_key_periph+0x20>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2ef90:	4630      	mov	r0, r6
   2ef92:	2107      	movs	r1, #7
   2ef94:	f018 f8d0 	bl	47138 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   2ef98:	2008      	movs	r0, #8
   2ef9a:	f7ff fda9 	bl	2eaf0 <smp_find>
   2ef9e:	2800      	cmp	r0, #0
   2efa0:	d143      	bne.n	2f02a <smp_public_key_periph+0x136>
		return smp_dhkey_generate(smp);
   2efa2:	4620      	mov	r0, r4
}
   2efa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return smp_dhkey_generate(smp);
   2efa8:	f7ff bd8c 	b.w	2eac4 <smp_dhkey_generate>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   2efac:	2104      	movs	r1, #4
   2efae:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   2efb2:	f003 fb51 	bl	32658 <bt_rand>
   2efb6:	2800      	cmp	r0, #0
   2efb8:	d1ab      	bne.n	2ef12 <smp_public_key_periph+0x1e>
		smp->passkey %= 1000000;
   2efba:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   2efbe:	4a1d      	ldr	r2, [pc, #116]	; (2f034 <smp_public_key_periph+0x140>)
	if (bt_auth && bt_auth->passkey_display) {
   2efc0:	4d1d      	ldr	r5, [pc, #116]	; (2f038 <smp_public_key_periph+0x144>)
		smp->passkey %= 1000000;
   2efc2:	fbb3 f1f2 	udiv	r1, r3, r2
   2efc6:	fb02 3311 	mls	r3, r2, r1, r3
   2efca:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (bt_auth && bt_auth->passkey_display) {
   2efce:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
   2efd0:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (bt_auth && bt_auth->passkey_display) {
   2efd4:	b163      	cbz	r3, 2eff0 <smp_public_key_periph+0xfc>
   2efd6:	685b      	ldr	r3, [r3, #4]
   2efd8:	b153      	cbz	r3, 2eff0 <smp_public_key_periph+0xfc>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   2efda:	210b      	movs	r1, #11
   2efdc:	4630      	mov	r0, r6
   2efde:	f018 f8ab 	bl	47138 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
   2efe2:	682b      	ldr	r3, [r5, #0]
   2efe4:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   2efe8:	685b      	ldr	r3, [r3, #4]
   2efea:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   2efee:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   2eff0:	2103      	movs	r1, #3
   2eff2:	4620      	mov	r0, r4
   2eff4:	f018 f8a0 	bl	47138 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2eff8:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   2effa:	f018 f89d 	bl	47138 <atomic_set_bit>
		break;
   2effe:	e7c7      	b.n	2ef90 <smp_public_key_periph+0x9c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   2f000:	4620      	mov	r0, r4
   2f002:	2103      	movs	r1, #3
   2f004:	f018 f898 	bl	47138 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2f008:	210e      	movs	r1, #14
   2f00a:	f018 f895 	bl	47138 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   2f00e:	4630      	mov	r0, r6
   2f010:	210a      	movs	r1, #10
   2f012:	f018 f891 	bl	47138 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
   2f016:	4b08      	ldr	r3, [pc, #32]	; (2f038 <smp_public_key_periph+0x144>)
   2f018:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   2f01c:	681b      	ldr	r3, [r3, #0]
   2f01e:	689b      	ldr	r3, [r3, #8]
   2f020:	4798      	blx	r3
		break;
   2f022:	e7b5      	b.n	2ef90 <smp_public_key_periph+0x9c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   2f024:	2104      	movs	r1, #4
   2f026:	4620      	mov	r0, r4
   2f028:	e7e7      	b.n	2effa <smp_public_key_periph+0x106>
	return 0;
   2f02a:	2000      	movs	r0, #0
   2f02c:	e772      	b.n	2ef14 <smp_public_key_periph+0x20>
   2f02e:	bf00      	nop
   2f030:	20001cb8 	.word	0x20001cb8
   2f034:	000f4240 	.word	0x000f4240
   2f038:	20001c50 	.word	0x20001c50

0002f03c <smp_public_key>:
{
   2f03c:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
   2f03e:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   2f040:	f100 0557 	add.w	r5, r0, #87	; 0x57
{
   2f044:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   2f046:	2220      	movs	r2, #32
   2f048:	4631      	mov	r1, r6
   2f04a:	4628      	mov	r0, r5
   2f04c:	f015 fd39 	bl	44ac2 <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   2f050:	2220      	movs	r2, #32
   2f052:	18b1      	adds	r1, r6, r2
   2f054:	f104 0077 	add.w	r0, r4, #119	; 0x77
   2f058:	f015 fd33 	bl	44ac2 <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   2f05c:	4628      	mov	r0, r5
   2f05e:	f7fd f8ef 	bl	2c240 <bt_pub_key_is_debug>
   2f062:	b940      	cbnz	r0, 2f076 <smp_public_key+0x3a>
	if (!sc_public_key) {
   2f064:	4b15      	ldr	r3, [pc, #84]	; (2f0bc <smp_public_key+0x80>)
   2f066:	681d      	ldr	r5, [r3, #0]
   2f068:	bb1d      	cbnz	r5, 2f0b2 <smp_public_key+0x76>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   2f06a:	1d20      	adds	r0, r4, #4
   2f06c:	2106      	movs	r1, #6
   2f06e:	f018 f863 	bl	47138 <atomic_set_bit>
	return 0;
   2f072:	4628      	mov	r0, r5
		return 0;
   2f074:	e01c      	b.n	2f0b0 <smp_public_key+0x74>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   2f076:	210e      	movs	r1, #14
   2f078:	1d20      	adds	r0, r4, #4
   2f07a:	f018 f85d 	bl	47138 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   2f07e:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (!conn->le.keys) {
   2f082:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   2f086:	b933      	cbnz	r3, 2f096 <smp_public_key+0x5a>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   2f088:	7a28      	ldrb	r0, [r5, #8]
   2f08a:	f105 0188 	add.w	r1, r5, #136	; 0x88
   2f08e:	f000 fb73 	bl	2f778 <bt_keys_get_addr>
   2f092:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   2f096:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   2f09a:	2b00      	cmp	r3, #0
   2f09c:	d0e2      	beq.n	2f064 <smp_public_key+0x28>
   2f09e:	89da      	ldrh	r2, [r3, #14]
   2f0a0:	f002 0224 	and.w	r2, r2, #36	; 0x24
   2f0a4:	2a00      	cmp	r2, #0
   2f0a6:	d0dd      	beq.n	2f064 <smp_public_key+0x28>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   2f0a8:	7b5b      	ldrb	r3, [r3, #13]
   2f0aa:	079b      	lsls	r3, r3, #30
   2f0ac:	d4da      	bmi.n	2f064 <smp_public_key+0x28>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   2f0ae:	2003      	movs	r0, #3
}
   2f0b0:	bd70      	pop	{r4, r5, r6, pc}
	err = smp_public_key_periph(smp);
   2f0b2:	4620      	mov	r0, r4
}
   2f0b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = smp_public_key_periph(smp);
   2f0b8:	f7ff bf1c 	b.w	2eef4 <smp_public_key_periph>
   2f0bc:	20001cb8 	.word	0x20001cb8

0002f0c0 <bt_smp_connected>:
{
   2f0c0:	b510      	push	{r4, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   2f0c2:	4905      	ldr	r1, [pc, #20]	; (2f0d8 <bt_smp_connected+0x18>)
   2f0c4:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
   2f0c8:	30e8      	adds	r0, #232	; 0xe8
   2f0ca:	f019 fbe6 	bl	4889a <k_work_init_delayable>
	smp_reset(smp);
   2f0ce:	4620      	mov	r0, r4
}
   2f0d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
   2f0d4:	f018 b932 	b.w	4733c <smp_reset>
   2f0d8:	000476b3 	.word	0x000476b3

0002f0dc <smp_pairing_req>:
{
   2f0dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
   2f0e0:	688d      	ldr	r5, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   2f0e2:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   2f0e6:	78eb      	ldrb	r3, [r5, #3]
   2f0e8:	3b07      	subs	r3, #7
   2f0ea:	2b09      	cmp	r3, #9
{
   2f0ec:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   2f0ee:	d903      	bls.n	2f0f8 <smp_pairing_req+0x1c>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   2f0f0:	2006      	movs	r0, #6
}
   2f0f2:	b002      	add	sp, #8
   2f0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   2f0f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   2f0fc:	b15b      	cbz	r3, 2f116 <smp_pairing_req+0x3a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2f0fe:	1d26      	adds	r6, r4, #4
   2f100:	210f      	movs	r1, #15
   2f102:	4630      	mov	r0, r6
   2f104:	f018 f832 	bl	4716c <atomic_test_bit>
   2f108:	b980      	cbnz	r0, 2f12c <smp_pairing_req+0x50>
		int ret = smp_init(smp);
   2f10a:	4620      	mov	r0, r4
   2f10c:	f7ff fcbe 	bl	2ea8c <smp_init>
		if (ret) {
   2f110:	b160      	cbz	r0, 2f12c <smp_pairing_req+0x50>
			return ret;
   2f112:	b2c0      	uxtb	r0, r0
   2f114:	e7ed      	b.n	2f0f2 <smp_pairing_req+0x16>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   2f116:	7a38      	ldrb	r0, [r7, #8]
   2f118:	f107 0188 	add.w	r1, r7, #136	; 0x88
   2f11c:	f000 fb2c 	bl	2f778 <bt_keys_get_addr>
   2f120:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		if (!conn->le.keys) {
   2f124:	2800      	cmp	r0, #0
   2f126:	d1ea      	bne.n	2f0fe <smp_pairing_req+0x22>
			return BT_SMP_ERR_UNSPECIFIED;
   2f128:	2008      	movs	r0, #8
   2f12a:	e7e2      	b.n	2f0f2 <smp_pairing_req+0x16>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   2f12c:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   2f12e:	2206      	movs	r2, #6
   2f130:	4629      	mov	r1, r5
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   2f132:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   2f134:	f104 000a 	add.w	r0, r4, #10
   2f138:	f015 fcc3 	bl	44ac2 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   2f13c:	2302      	movs	r3, #2
   2f13e:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(conn, req->auth_req);
   2f140:	78a8      	ldrb	r0, [r5, #2]
   2f142:	f7ff fc85 	bl	2ea50 <get_auth.constprop.0>
   2f146:	74e0      	strb	r0, [r4, #19]
   2f148:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
   2f14a:	f7ff fc49 	bl	2e9e0 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   2f14e:	4b6f      	ldr	r3, [pc, #444]	; (2f30c <smp_pairing_req+0x230>)
	rsp->io_capability = get_io_capa();
   2f150:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   2f152:	781b      	ldrb	r3, [r3, #0]
   2f154:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   2f156:	2310      	movs	r3, #16
   2f158:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   2f15a:	792b      	ldrb	r3, [r5, #4]
   2f15c:	f003 0303 	and.w	r3, r3, #3
   2f160:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   2f162:	796b      	ldrb	r3, [r5, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   2f164:	f018 0f08 	tst.w	r8, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   2f168:	f003 0301 	and.w	r3, r3, #1
   2f16c:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   2f16e:	d00c      	beq.n	2f18a <smp_pairing_req+0xae>
   2f170:	78ab      	ldrb	r3, [r5, #2]
   2f172:	071b      	lsls	r3, r3, #28
   2f174:	d509      	bpl.n	2f18a <smp_pairing_req+0xae>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   2f176:	2105      	movs	r1, #5
   2f178:	4630      	mov	r0, r6
   2f17a:	f017 ffdd 	bl	47138 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   2f17e:	7d63      	ldrb	r3, [r4, #21]
   2f180:	f003 0302 	and.w	r3, r3, #2
   2f184:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   2f186:	2300      	movs	r3, #0
   2f188:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   2f18a:	7ce3      	ldrb	r3, [r4, #19]
   2f18c:	0698      	lsls	r0, r3, #26
   2f18e:	d506      	bpl.n	2f19e <smp_pairing_req+0xc2>
   2f190:	78ab      	ldrb	r3, [r5, #2]
   2f192:	0699      	lsls	r1, r3, #26
   2f194:	d503      	bpl.n	2f19e <smp_pairing_req+0xc2>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   2f196:	2114      	movs	r1, #20
   2f198:	4630      	mov	r0, r6
   2f19a:	f017 ffcd 	bl	47138 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   2f19e:	7da3      	ldrb	r3, [r4, #22]
   2f1a0:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   2f1a4:	7d63      	ldrb	r3, [r4, #21]
   2f1a6:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   2f1aa:	7ce3      	ldrb	r3, [r4, #19]
   2f1ac:	07da      	lsls	r2, r3, #31
   2f1ae:	d506      	bpl.n	2f1be <smp_pairing_req+0xe2>
   2f1b0:	78ab      	ldrb	r3, [r5, #2]
   2f1b2:	07db      	lsls	r3, r3, #31
   2f1b4:	d503      	bpl.n	2f1be <smp_pairing_req+0xe2>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   2f1b6:	210d      	movs	r1, #13
   2f1b8:	4630      	mov	r0, r6
   2f1ba:	f017 ffbd 	bl	47138 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   2f1be:	2103      	movs	r1, #3
   2f1c0:	4630      	mov	r0, r6
   2f1c2:	f017 ffb9 	bl	47138 <atomic_set_bit>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   2f1c6:	7b23      	ldrb	r3, [r4, #12]
   2f1c8:	7ce1      	ldrb	r1, [r4, #19]
	smp->method = get_pair_method(smp, req->io_capability);
   2f1ca:	f895 8000 	ldrb.w	r8, [r5]
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   2f1ce:	ea03 0201 	and.w	r2, r3, r1
   2f1d2:	0710      	lsls	r0, r2, #28
   2f1d4:	d504      	bpl.n	2f1e0 <smp_pairing_req+0x104>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   2f1d6:	7ae2      	ldrb	r2, [r4, #11]
   2f1d8:	7ca0      	ldrb	r0, [r4, #18]
   2f1da:	4302      	orrs	r2, r0
   2f1dc:	07d2      	lsls	r2, r2, #31
   2f1de:	d416      	bmi.n	2f20e <smp_pairing_req+0x132>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   2f1e0:	f1b8 0f04 	cmp.w	r8, #4
   2f1e4:	d815      	bhi.n	2f212 <smp_pairing_req+0x136>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   2f1e6:	430b      	orrs	r3, r1
   2f1e8:	f013 0304 	ands.w	r3, r3, #4
   2f1ec:	d006      	beq.n	2f1fc <smp_pairing_req+0x120>
	return gen_method_sc[remote_io][get_io_capa()];
   2f1ee:	f7ff fbf7 	bl	2e9e0 <get_io_capa>
   2f1f2:	4b47      	ldr	r3, [pc, #284]	; (2f310 <smp_pairing_req+0x234>)
   2f1f4:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   2f1f8:	4443      	add	r3, r8
   2f1fa:	5c1b      	ldrb	r3, [r3, r0]
	smp->method = get_pair_method(smp, req->io_capability);
   2f1fc:	7223      	strb	r3, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   2f1fe:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
   2f202:	4620      	mov	r0, r4
   2f204:	f017 ffbb 	bl	4717e <update_keys_check>
   2f208:	b928      	cbnz	r0, 2f216 <smp_pairing_req+0x13a>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   2f20a:	2003      	movs	r0, #3
   2f20c:	e771      	b.n	2f0f2 <smp_pairing_req+0x16>
			return LE_SC_OOB;
   2f20e:	2305      	movs	r3, #5
   2f210:	e7f4      	b.n	2f1fc <smp_pairing_req+0x120>
		return JUST_WORKS;
   2f212:	2300      	movs	r3, #0
   2f214:	e7f2      	b.n	2f1fc <smp_pairing_req+0x120>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   2f216:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   2f21a:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   2f21c:	2b03      	cmp	r3, #3
   2f21e:	d057      	beq.n	2f2d0 <smp_pairing_req+0x1f4>
   2f220:	d845      	bhi.n	2f2ae <smp_pairing_req+0x1d2>
   2f222:	3b01      	subs	r3, #1
   2f224:	2b01      	cmp	r3, #1
   2f226:	f63f af7f 	bhi.w	2f128 <smp_pairing_req+0x4c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2f22a:	2105      	movs	r1, #5
   2f22c:	4630      	mov	r0, r6
   2f22e:	f017 ff9d 	bl	4716c <atomic_test_bit>
   2f232:	2800      	cmp	r0, #0
   2f234:	d0e9      	beq.n	2f20a <smp_pairing_req+0x12e>
	if (bt_auth && bt_auth->pairing_accept) {
   2f236:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 2f314 <smp_pairing_req+0x238>
   2f23a:	f8d8 3000 	ldr.w	r3, [r8]
   2f23e:	b1fb      	cbz	r3, 2f280 <smp_pairing_req+0x1a4>
   2f240:	681b      	ldr	r3, [r3, #0]
   2f242:	b1eb      	cbz	r3, 2f280 <smp_pairing_req+0x1a4>
		const struct bt_conn_pairing_feat feat = {
   2f244:	782a      	ldrb	r2, [r5, #0]
   2f246:	f88d 2000 	strb.w	r2, [sp]
   2f24a:	786a      	ldrb	r2, [r5, #1]
   2f24c:	f88d 2001 	strb.w	r2, [sp, #1]
   2f250:	78aa      	ldrb	r2, [r5, #2]
   2f252:	f88d 2002 	strb.w	r2, [sp, #2]
   2f256:	78ea      	ldrb	r2, [r5, #3]
   2f258:	f88d 2003 	strb.w	r2, [sp, #3]
   2f25c:	792a      	ldrb	r2, [r5, #4]
   2f25e:	f88d 2004 	strb.w	r2, [sp, #4]
   2f262:	796a      	ldrb	r2, [r5, #5]
   2f264:	f88d 2005 	strb.w	r2, [sp, #5]
		return smp_err_get(bt_auth->pairing_accept(conn, &feat));
   2f268:	4669      	mov	r1, sp
   2f26a:	4638      	mov	r0, r7
   2f26c:	4798      	blx	r3
	switch (auth_err) {
   2f26e:	3801      	subs	r0, #1
   2f270:	b2c0      	uxtb	r0, r0
   2f272:	2808      	cmp	r0, #8
   2f274:	d804      	bhi.n	2f280 <smp_pairing_req+0x1a4>
   2f276:	4b28      	ldr	r3, [pc, #160]	; (2f318 <smp_pairing_req+0x23c>)
   2f278:	5c18      	ldrb	r0, [r3, r0]
		if (err) {
   2f27a:	2800      	cmp	r0, #0
   2f27c:	f47f af39 	bne.w	2f0f2 <smp_pairing_req+0x16>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   2f280:	7a23      	ldrb	r3, [r4, #8]
   2f282:	bb4b      	cbnz	r3, 2f2d8 <smp_pairing_req+0x1fc>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   2f284:	210f      	movs	r1, #15
   2f286:	4630      	mov	r0, r6
   2f288:	f017 ff70 	bl	4716c <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   2f28c:	bb20      	cbnz	r0, 2f2d8 <smp_pairing_req+0x1fc>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   2f28e:	f8d8 3000 	ldr.w	r3, [r8]
   2f292:	b30b      	cbz	r3, 2f2d8 <smp_pairing_req+0x1fc>
	    bt_auth && bt_auth->pairing_confirm) {
   2f294:	699b      	ldr	r3, [r3, #24]
   2f296:	b1fb      	cbz	r3, 2f2d8 <smp_pairing_req+0x1fc>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   2f298:	4630      	mov	r0, r6
   2f29a:	210a      	movs	r1, #10
   2f29c:	f017 ff4c 	bl	47138 <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
   2f2a0:	f8d8 3000 	ldr.w	r3, [r8]
   2f2a4:	4638      	mov	r0, r7
   2f2a6:	699b      	ldr	r3, [r3, #24]
   2f2a8:	4798      	blx	r3
	return 0;
   2f2aa:	2000      	movs	r0, #0
   2f2ac:	e721      	b.n	2f0f2 <smp_pairing_req+0x16>
	switch (sec) {
   2f2ae:	2b04      	cmp	r3, #4
   2f2b0:	f47f af3a 	bne.w	2f128 <smp_pairing_req+0x4c>
	return MIN(req->max_key_size, rsp->max_key_size);
   2f2b4:	7d23      	ldrb	r3, [r4, #20]
   2f2b6:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   2f2b8:	4293      	cmp	r3, r2
   2f2ba:	bf28      	it	cs
   2f2bc:	4613      	movcs	r3, r2
   2f2be:	2b10      	cmp	r3, #16
   2f2c0:	f47f af16 	bne.w	2f0f0 <smp_pairing_req+0x14>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2f2c4:	2105      	movs	r1, #5
   2f2c6:	4630      	mov	r0, r6
   2f2c8:	f017 ff50 	bl	4716c <atomic_test_bit>
   2f2cc:	2800      	cmp	r0, #0
   2f2ce:	d09c      	beq.n	2f20a <smp_pairing_req+0x12e>
		if (smp->method == JUST_WORKS) {
   2f2d0:	7a23      	ldrb	r3, [r4, #8]
   2f2d2:	2b00      	cmp	r3, #0
   2f2d4:	d1a9      	bne.n	2f22a <smp_pairing_req+0x14e>
   2f2d6:	e798      	b.n	2f20a <smp_pairing_req+0x12e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   2f2d8:	210c      	movs	r1, #12
   2f2da:	4620      	mov	r0, r4
   2f2dc:	f017 ff2c 	bl	47138 <atomic_set_bit>
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2f2e0:	2102      	movs	r1, #2
   2f2e2:	f017 ff8c 	bl	471fe <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2f2e6:	4605      	mov	r5, r0
   2f2e8:	2800      	cmp	r0, #0
   2f2ea:	f43f af1d 	beq.w	2f128 <smp_pairing_req+0x4c>
   2f2ee:	2106      	movs	r1, #6
   2f2f0:	3008      	adds	r0, #8
   2f2f2:	f018 fb19 	bl	47928 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   2f2f6:	f104 0111 	add.w	r1, r4, #17
   2f2fa:	2206      	movs	r2, #6
   2f2fc:	f015 fbe1 	bl	44ac2 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2f300:	4629      	mov	r1, r5
   2f302:	4620      	mov	r0, r4
   2f304:	f017 fe7d 	bl	47002 <smp_send.constprop.0>
	return 0;
   2f308:	e7cf      	b.n	2f2aa <smp_pairing_req+0x1ce>
   2f30a:	bf00      	nop
   2f30c:	20003c10 	.word	0x20003c10
   2f310:	0004b100 	.word	0x0004b100
   2f314:	20001c50 	.word	0x20001c50
   2f318:	0004b0d8 	.word	0x0004b0d8

0002f31c <bt_smp_start_security>:
{
   2f31c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   2f320:	78c6      	ldrb	r6, [r0, #3]
   2f322:	2e01      	cmp	r6, #1
{
   2f324:	4604      	mov	r4, r0
	switch (conn->role) {
   2f326:	d005      	beq.n	2f334 <bt_smp_start_security+0x18>
		return -EINVAL;
   2f328:	f06f 0415 	mvn.w	r4, #21
}
   2f32c:	4620      	mov	r0, r4
   2f32e:	b003      	add	sp, #12
   2f330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   2f334:	f017 fe2f 	bl	46f96 <smp_chan_get>
	if (!smp) {
   2f338:	4605      	mov	r5, r0
   2f33a:	2800      	cmp	r0, #0
   2f33c:	f000 80a1 	beq.w	2f482 <bt_smp_start_security+0x166>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2f340:	f100 0804 	add.w	r8, r0, #4
   2f344:	2104      	movs	r1, #4
   2f346:	4640      	mov	r0, r8
   2f348:	f017 ff10 	bl	4716c <atomic_test_bit>
   2f34c:	2800      	cmp	r0, #0
   2f34e:	f040 809b 	bne.w	2f488 <bt_smp_start_security+0x16c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2f352:	2103      	movs	r1, #3
   2f354:	4640      	mov	r0, r8
   2f356:	f017 ff09 	bl	4716c <atomic_test_bit>
   2f35a:	b110      	cbz	r0, 2f362 <bt_smp_start_security+0x46>
		return -EBUSY;
   2f35c:	f06f 040f 	mvn.w	r4, #15
   2f360:	e7e4      	b.n	2f32c <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2f362:	4631      	mov	r1, r6
   2f364:	4640      	mov	r0, r8
   2f366:	f017 ff01 	bl	4716c <atomic_test_bit>
   2f36a:	2800      	cmp	r0, #0
   2f36c:	d1f6      	bne.n	2f35c <bt_smp_start_security+0x40>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   2f36e:	7aa3      	ldrb	r3, [r4, #10]
	switch (conn->required_sec_level) {
   2f370:	2b03      	cmp	r3, #3
   2f372:	d03d      	beq.n	2f3f0 <bt_smp_start_security+0xd4>
   2f374:	d82c      	bhi.n	2f3d0 <bt_smp_start_security+0xb4>
   2f376:	3b01      	subs	r3, #1
   2f378:	2b01      	cmp	r3, #1
   2f37a:	d944      	bls.n	2f406 <bt_smp_start_security+0xea>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   2f37c:	210b      	movs	r1, #11
   2f37e:	1d20      	adds	r0, r4, #4
   2f380:	f017 fef4 	bl	4716c <atomic_test_bit>
   2f384:	2800      	cmp	r0, #0
   2f386:	d1cf      	bne.n	2f328 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   2f388:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   2f38c:	b983      	cbnz	r3, 2f3b0 <bt_smp_start_security+0x94>
						     conn->id, &conn->le.dst);
   2f38e:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   2f392:	7a21      	ldrb	r1, [r4, #8]
   2f394:	4632      	mov	r2, r6
   2f396:	2020      	movs	r0, #32
   2f398:	f000 fa30 	bl	2f7fc <bt_keys_find>
   2f39c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   2f3a0:	b930      	cbnz	r0, 2f3b0 <bt_smp_start_security+0x94>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   2f3a2:	7a21      	ldrb	r1, [r4, #8]
   2f3a4:	4632      	mov	r2, r6
   2f3a6:	2004      	movs	r0, #4
   2f3a8:	f000 fa28 	bl	2f7fc <bt_keys_find>
   2f3ac:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys ||
   2f3b0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   2f3b4:	2b00      	cmp	r3, #0
   2f3b6:	d0b7      	beq.n	2f328 <bt_smp_start_security+0xc>
   2f3b8:	89da      	ldrh	r2, [r3, #14]
   2f3ba:	f002 0224 	and.w	r2, r2, #36	; 0x24
   2f3be:	2a00      	cmp	r2, #0
   2f3c0:	d0b2      	beq.n	2f328 <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   2f3c2:	7aa2      	ldrb	r2, [r4, #10]
   2f3c4:	2a02      	cmp	r2, #2
   2f3c6:	d91e      	bls.n	2f406 <bt_smp_start_security+0xea>
   2f3c8:	7b5b      	ldrb	r3, [r3, #13]
   2f3ca:	07db      	lsls	r3, r3, #31
   2f3cc:	d5ac      	bpl.n	2f328 <bt_smp_start_security+0xc>
   2f3ce:	e01a      	b.n	2f406 <bt_smp_start_security+0xea>
	switch (conn->required_sec_level) {
   2f3d0:	2b04      	cmp	r3, #4
   2f3d2:	d1d3      	bne.n	2f37c <bt_smp_start_security+0x60>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   2f3d4:	f7ff fb04 	bl	2e9e0 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   2f3d8:	2803      	cmp	r0, #3
   2f3da:	d106      	bne.n	2f3ea <bt_smp_start_security+0xce>
   2f3dc:	4b2c      	ldr	r3, [pc, #176]	; (2f490 <bt_smp_start_security+0x174>)
   2f3de:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   2f3e0:	2b00      	cmp	r3, #0
   2f3e2:	d0cb      	beq.n	2f37c <bt_smp_start_security+0x60>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   2f3e4:	691b      	ldr	r3, [r3, #16]
   2f3e6:	2b00      	cmp	r3, #0
   2f3e8:	d0c8      	beq.n	2f37c <bt_smp_start_security+0x60>
   2f3ea:	4b2a      	ldr	r3, [pc, #168]	; (2f494 <bt_smp_start_security+0x178>)
   2f3ec:	781b      	ldrb	r3, [r3, #0]
   2f3ee:	e008      	b.n	2f402 <bt_smp_start_security+0xe6>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   2f3f0:	f7ff faf6 	bl	2e9e0 <get_io_capa>
   2f3f4:	2803      	cmp	r0, #3
   2f3f6:	d106      	bne.n	2f406 <bt_smp_start_security+0xea>
		       (bt_auth && bt_auth->oob_data_request);
   2f3f8:	4b25      	ldr	r3, [pc, #148]	; (2f490 <bt_smp_start_security+0x174>)
   2f3fa:	681b      	ldr	r3, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   2f3fc:	2b00      	cmp	r3, #0
   2f3fe:	d0bd      	beq.n	2f37c <bt_smp_start_security+0x60>
		       (bt_auth && bt_auth->oob_data_request);
   2f400:	691b      	ldr	r3, [r3, #16]
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   2f402:	2b00      	cmp	r3, #0
   2f404:	d0ba      	beq.n	2f37c <bt_smp_start_security+0x60>
	if (!conn->le.keys) {
   2f406:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   2f40a:	b13b      	cbz	r3, 2f41c <bt_smp_start_security+0x100>
	if (smp_init(smp) != 0) {
   2f40c:	4628      	mov	r0, r5
   2f40e:	f7ff fb3d 	bl	2ea8c <smp_init>
   2f412:	4607      	mov	r7, r0
   2f414:	b170      	cbz	r0, 2f434 <bt_smp_start_security+0x118>
		return -ENOBUFS;
   2f416:	f06f 0468 	mvn.w	r4, #104	; 0x68
   2f41a:	e787      	b.n	2f32c <bt_smp_start_security+0x10>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   2f41c:	7a20      	ldrb	r0, [r4, #8]
   2f41e:	f104 0188 	add.w	r1, r4, #136	; 0x88
   2f422:	f000 f9a9 	bl	2f778 <bt_keys_get_addr>
   2f426:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   2f42a:	2800      	cmp	r0, #0
   2f42c:	d1ee      	bne.n	2f40c <bt_smp_start_security+0xf0>
			return -ENOMEM;
   2f42e:	f06f 040b 	mvn.w	r4, #11
   2f432:	e77b      	b.n	2f32c <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   2f434:	210b      	movs	r1, #11
   2f436:	4628      	mov	r0, r5
   2f438:	f017 fee1 	bl	471fe <smp_create_pdu.constprop.0>
	if (!req_buf) {
   2f43c:	4606      	mov	r6, r0
   2f43e:	2800      	cmp	r0, #0
   2f440:	d0e9      	beq.n	2f416 <bt_smp_start_security+0xfa>
   2f442:	2101      	movs	r1, #1
   2f444:	3008      	adds	r0, #8
   2f446:	f018 fa6f 	bl	47928 <net_buf_simple_add>
   2f44a:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   2f44c:	2009      	movs	r0, #9
   2f44e:	f7ff faff 	bl	2ea50 <get_auth.constprop.0>
   2f452:	463b      	mov	r3, r7
   2f454:	f889 0000 	strb.w	r0, [r9]
   2f458:	4632      	mov	r2, r6
   2f45a:	4620      	mov	r0, r4
   2f45c:	9700      	str	r7, [sp, #0]
   2f45e:	2106      	movs	r1, #6
   2f460:	f016 fc49 	bl	45cf6 <bt_l2cap_send_cb>
	if (err) {
   2f464:	4604      	mov	r4, r0
   2f466:	b118      	cbz	r0, 2f470 <bt_smp_start_security+0x154>
		net_buf_unref(req_buf);
   2f468:	4630      	mov	r0, r6
   2f46a:	f00d fe1d 	bl	3d0a8 <net_buf_unref>
		return err;
   2f46e:	e75d      	b.n	2f32c <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   2f470:	4640      	mov	r0, r8
   2f472:	210f      	movs	r1, #15
   2f474:	f017 fe60 	bl	47138 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2f478:	2101      	movs	r1, #1
   2f47a:	4628      	mov	r0, r5
   2f47c:	f017 fe5c 	bl	47138 <atomic_set_bit>
	return 0;
   2f480:	e754      	b.n	2f32c <bt_smp_start_security+0x10>
		return -ENOTCONN;
   2f482:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   2f486:	e751      	b.n	2f32c <bt_smp_start_security+0x10>
		return -EIO;
   2f488:	f06f 0404 	mvn.w	r4, #4
   2f48c:	e74e      	b.n	2f32c <bt_smp_start_security+0x10>
   2f48e:	bf00      	nop
   2f490:	20001c50 	.word	0x20001c50
   2f494:	20003c0f 	.word	0x20003c0f

0002f498 <smp_pairing_complete>:
{
   2f498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   2f49a:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
{
   2f49e:	4605      	mov	r5, r0
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   2f4a0:	1d07      	adds	r7, r0, #4
	if (!status) {
   2f4a2:	b9e9      	cbnz	r1, 2f4e0 <smp_pairing_complete+0x48>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   2f4a4:	210d      	movs	r1, #13
   2f4a6:	4638      	mov	r0, r7
   2f4a8:	f017 fe60 	bl	4716c <atomic_test_bit>
		if (bond_flag) {
   2f4ac:	4606      	mov	r6, r0
   2f4ae:	b118      	cbz	r0, 2f4b8 <smp_pairing_complete+0x20>
			bt_keys_store(conn->le.keys);
   2f4b0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   2f4b4:	f000 fa42 	bl	2f93c <bt_keys_store>
		if (bt_auth && bt_auth->pairing_complete) {
   2f4b8:	4b24      	ldr	r3, [pc, #144]	; (2f54c <smp_pairing_complete+0xb4>)
   2f4ba:	681b      	ldr	r3, [r3, #0]
   2f4bc:	b123      	cbz	r3, 2f4c8 <smp_pairing_complete+0x30>
   2f4be:	69db      	ldr	r3, [r3, #28]
		    bt_auth && bt_auth->pairing_failed) {
   2f4c0:	b113      	cbz	r3, 2f4c8 <smp_pairing_complete+0x30>
			bt_auth->pairing_failed(conn, security_err);
   2f4c2:	4631      	mov	r1, r6
   2f4c4:	4620      	mov	r0, r4
   2f4c6:	4798      	blx	r3
	smp_reset(smp);
   2f4c8:	4628      	mov	r0, r5
   2f4ca:	f017 ff37 	bl	4733c <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   2f4ce:	7a62      	ldrb	r2, [r4, #9]
   2f4d0:	7aa3      	ldrb	r3, [r4, #10]
   2f4d2:	429a      	cmp	r2, r3
   2f4d4:	d039      	beq.n	2f54a <smp_pairing_complete+0xb2>
		bt_smp_start_security(conn);
   2f4d6:	4620      	mov	r0, r4
}
   2f4d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   2f4dc:	f7ff bf1e 	b.w	2f31c <bt_smp_start_security>
	switch (smp_err) {
   2f4e0:	3901      	subs	r1, #1
   2f4e2:	b2c9      	uxtb	r1, r1
   2f4e4:	290e      	cmp	r1, #14
   2f4e6:	bf9c      	itt	ls
   2f4e8:	4b19      	ldrls	r3, [pc, #100]	; (2f550 <smp_pairing_complete+0xb8>)
   2f4ea:	5c5e      	ldrbls	r6, [r3, r1]
		if (conn->le.keys &&
   2f4ec:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
   2f4f0:	bf88      	it	hi
   2f4f2:	2609      	movhi	r6, #9
		if (conn->le.keys &&
   2f4f4:	b143      	cbz	r3, 2f508 <smp_pairing_complete+0x70>
   2f4f6:	7b1b      	ldrb	r3, [r3, #12]
   2f4f8:	bb03      	cbnz	r3, 2f53c <smp_pairing_complete+0xa4>
			bt_keys_clear(conn->le.keys);
   2f4fa:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   2f4fe:	f000 f9f5 	bl	2f8ec <bt_keys_clear>
			conn->le.keys = NULL;
   2f502:	2300      	movs	r3, #0
   2f504:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   2f508:	2102      	movs	r1, #2
   2f50a:	4638      	mov	r0, r7
   2f50c:	f017 fe2e 	bl	4716c <atomic_test_bit>
   2f510:	b940      	cbnz	r0, 2f524 <smp_pairing_complete+0x8c>
	switch (err) {
   2f512:	2e07      	cmp	r6, #7
   2f514:	bf96      	itet	ls
   2f516:	4b0f      	ldrls	r3, [pc, #60]	; (2f554 <smp_pairing_complete+0xbc>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   2f518:	211f      	movhi	r1, #31
   2f51a:	5d99      	ldrbls	r1, [r3, r6]
			bt_conn_security_changed(conn,
   2f51c:	4632      	mov	r2, r6
   2f51e:	4620      	mov	r0, r4
   2f520:	f7fd faa4 	bl	2ca6c <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2f524:	2103      	movs	r1, #3
   2f526:	4638      	mov	r0, r7
   2f528:	f017 fe20 	bl	4716c <atomic_test_bit>
   2f52c:	2800      	cmp	r0, #0
   2f52e:	d0cb      	beq.n	2f4c8 <smp_pairing_complete+0x30>
   2f530:	4b06      	ldr	r3, [pc, #24]	; (2f54c <smp_pairing_complete+0xb4>)
   2f532:	681b      	ldr	r3, [r3, #0]
   2f534:	2b00      	cmp	r3, #0
   2f536:	d0c7      	beq.n	2f4c8 <smp_pairing_complete+0x30>
		    bt_auth && bt_auth->pairing_failed) {
   2f538:	6a1b      	ldr	r3, [r3, #32]
   2f53a:	e7c1      	b.n	2f4c0 <smp_pairing_complete+0x28>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   2f53c:	2102      	movs	r1, #2
   2f53e:	4638      	mov	r0, r7
   2f540:	f017 fe14 	bl	4716c <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   2f544:	2800      	cmp	r0, #0
   2f546:	d1d8      	bne.n	2f4fa <smp_pairing_complete+0x62>
   2f548:	e7de      	b.n	2f508 <smp_pairing_complete+0x70>
}
   2f54a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2f54c:	20001c50 	.word	0x20001c50
   2f550:	0004b0e1 	.word	0x0004b0e1
   2f554:	0004b0d0 	.word	0x0004b0d0

0002f558 <bt_smp_recv>:
{
   2f558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   2f55a:	898b      	ldrh	r3, [r1, #12]
{
   2f55c:	4607      	mov	r7, r0
   2f55e:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   2f560:	b393      	cbz	r3, 2f5c8 <bt_smp_recv+0x70>
	return net_buf_simple_pull_mem(&buf->b, len);
   2f562:	2101      	movs	r1, #1
   2f564:	f105 0008 	add.w	r0, r5, #8
   2f568:	f018 fa05 	bl	47976 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2f56c:	2104      	movs	r1, #4
   2f56e:	4606      	mov	r6, r0
   2f570:	f1a7 00ec 	sub.w	r0, r7, #236	; 0xec
   2f574:	f1a7 04f0 	sub.w	r4, r7, #240	; 0xf0
   2f578:	f017 fdf8 	bl	4716c <atomic_test_bit>
   2f57c:	bb20      	cbnz	r0, 2f5c8 <bt_smp_recv+0x70>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   2f57e:	7831      	ldrb	r1, [r6, #0]
   2f580:	290e      	cmp	r1, #14
   2f582:	d821      	bhi.n	2f5c8 <bt_smp_recv+0x70>
	if (!handlers[hdr->code].func) {
   2f584:	4f11      	ldr	r7, [pc, #68]	; (2f5cc <bt_smp_recv+0x74>)
   2f586:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
   2f58a:	b923      	cbnz	r3, 2f596 <bt_smp_recv+0x3e>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   2f58c:	2107      	movs	r1, #7
		smp_error(smp, err);
   2f58e:	4620      	mov	r0, r4
   2f590:	f017 ff6c 	bl	4746c <smp_error>
   2f594:	e018      	b.n	2f5c8 <bt_smp_recv+0x70>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   2f596:	4620      	mov	r0, r4
   2f598:	f017 feba 	bl	47310 <atomic_test_and_clear_bit>
   2f59c:	7833      	ldrb	r3, [r6, #0]
   2f59e:	b918      	cbnz	r0, 2f5a8 <bt_smp_recv+0x50>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   2f5a0:	2b05      	cmp	r3, #5
   2f5a2:	d011      	beq.n	2f5c8 <bt_smp_recv+0x70>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   2f5a4:	2108      	movs	r1, #8
   2f5a6:	e7f2      	b.n	2f58e <bt_smp_recv+0x36>
	if (buf->len != handlers[hdr->code].expect_len) {
   2f5a8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   2f5ac:	89a9      	ldrh	r1, [r5, #12]
   2f5ae:	7912      	ldrb	r2, [r2, #4]
   2f5b0:	4291      	cmp	r1, r2
   2f5b2:	d001      	beq.n	2f5b8 <bt_smp_recv+0x60>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   2f5b4:	210a      	movs	r1, #10
   2f5b6:	e7ea      	b.n	2f58e <bt_smp_recv+0x36>
	err = handlers[hdr->code].func(smp, buf);
   2f5b8:	4629      	mov	r1, r5
   2f5ba:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
   2f5be:	4620      	mov	r0, r4
   2f5c0:	4798      	blx	r3
	if (err) {
   2f5c2:	4601      	mov	r1, r0
   2f5c4:	2800      	cmp	r0, #0
   2f5c6:	d1e2      	bne.n	2f58e <bt_smp_recv+0x36>
}
   2f5c8:	2000      	movs	r0, #0
   2f5ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2f5cc:	00049bb0 	.word	0x00049bb0

0002f5d0 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   2f5d0:	4b0b      	ldr	r3, [pc, #44]	; (2f600 <bt_smp_pkey_ready+0x30>)
{
   2f5d2:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   2f5d4:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   2f5d6:	b190      	cbz	r0, 2f5fe <bt_smp_pkey_ready+0x2e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2f5d8:	4c0a      	ldr	r4, [pc, #40]	; (2f604 <bt_smp_pkey_ready+0x34>)
	z_impl_k_sem_give(sem);
   2f5da:	480b      	ldr	r0, [pc, #44]	; (2f608 <bt_smp_pkey_ready+0x38>)
   2f5dc:	f011 ffc2 	bl	41564 <z_impl_k_sem_give>
   2f5e0:	f3bf 8f5b 	dmb	ish
   2f5e4:	6823      	ldr	r3, [r4, #0]
   2f5e6:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   2f5ea:	065b      	lsls	r3, r3, #25
   2f5ec:	d507      	bpl.n	2f5fe <bt_smp_pkey_ready+0x2e>
		err = smp_public_key_periph(smp);
   2f5ee:	1f20      	subs	r0, r4, #4
   2f5f0:	f7ff fc80 	bl	2eef4 <smp_public_key_periph>
		if (err) {
   2f5f4:	4601      	mov	r1, r0
   2f5f6:	b110      	cbz	r0, 2f5fe <bt_smp_pkey_ready+0x2e>
			smp_error(smp, err);
   2f5f8:	1f20      	subs	r0, r4, #4
   2f5fa:	f017 ff37 	bl	4746c <smp_error>
}
   2f5fe:	bd10      	pop	{r4, pc}
   2f600:	20001cb8 	.word	0x20001cb8
   2f604:	200011dc 	.word	0x200011dc
   2f608:	20000ba4 	.word	0x20000ba4

0002f60c <smp_pairing_failed>:
{
   2f60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   2f60e:	1d05      	adds	r5, r0, #4
	struct bt_conn *conn = smp->chan.chan.conn;
   2f610:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   2f614:	688e      	ldr	r6, [r1, #8]
{
   2f616:	4604      	mov	r4, r0
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   2f618:	210a      	movs	r1, #10
   2f61a:	4628      	mov	r0, r5
   2f61c:	f017 fe78 	bl	47310 <atomic_test_and_clear_bit>
   2f620:	b140      	cbz	r0, 2f634 <smp_pairing_failed+0x28>
		if (bt_auth && bt_auth->cancel) {
   2f622:	4b0b      	ldr	r3, [pc, #44]	; (2f650 <smp_pairing_failed+0x44>)
   2f624:	681b      	ldr	r3, [r3, #0]
   2f626:	b963      	cbnz	r3, 2f642 <smp_pairing_failed+0x36>
	smp_pairing_complete(smp, req->reason);
   2f628:	4620      	mov	r0, r4
   2f62a:	7831      	ldrb	r1, [r6, #0]
   2f62c:	f7ff ff34 	bl	2f498 <smp_pairing_complete>
}
   2f630:	2000      	movs	r0, #0
   2f632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   2f634:	210b      	movs	r1, #11
   2f636:	4628      	mov	r0, r5
   2f638:	f017 fe6a 	bl	47310 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   2f63c:	2800      	cmp	r0, #0
   2f63e:	d1f0      	bne.n	2f622 <smp_pairing_failed+0x16>
   2f640:	e7f2      	b.n	2f628 <smp_pairing_failed+0x1c>
		if (bt_auth && bt_auth->cancel) {
   2f642:	695b      	ldr	r3, [r3, #20]
   2f644:	2b00      	cmp	r3, #0
   2f646:	d0ef      	beq.n	2f628 <smp_pairing_failed+0x1c>
			bt_auth->cancel(conn);
   2f648:	4638      	mov	r0, r7
   2f64a:	4798      	blx	r3
   2f64c:	e7ec      	b.n	2f628 <smp_pairing_failed+0x1c>
   2f64e:	bf00      	nop
   2f650:	20001c50 	.word	0x20001c50

0002f654 <bt_smp_encrypt_change>:
{
   2f654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
   2f658:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2f65a:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
{
   2f65e:	4604      	mov	r4, r0
   2f660:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2f662:	4630      	mov	r0, r6
   2f664:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   2f666:	f855 89f0 	ldr.w	r8, [r5], #-240
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2f66a:	f017 fe51 	bl	47310 <atomic_test_and_clear_bit>
   2f66e:	2800      	cmp	r0, #0
   2f670:	d059      	beq.n	2f726 <bt_smp_encrypt_change+0xd2>
	if (hci_status) {
   2f672:	b1cf      	cbz	r7, 2f6a8 <bt_smp_encrypt_change+0x54>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2f674:	2103      	movs	r1, #3
   2f676:	4630      	mov	r0, r6
   2f678:	f017 fd78 	bl	4716c <atomic_test_bit>
   2f67c:	2800      	cmp	r0, #0
   2f67e:	d052      	beq.n	2f726 <bt_smp_encrypt_change+0xd2>
			uint8_t smp_err = smp_err_get(
   2f680:	4638      	mov	r0, r7
   2f682:	f7fb fef5 	bl	2b470 <bt_security_err_get>
	switch (auth_err) {
   2f686:	3801      	subs	r0, #1
   2f688:	b2c0      	uxtb	r0, r0
   2f68a:	2808      	cmp	r0, #8
   2f68c:	bf9a      	itte	ls
   2f68e:	4b2b      	ldrls	r3, [pc, #172]	; (2f73c <bt_smp_encrypt_change+0xe8>)
   2f690:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
   2f692:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   2f694:	2102      	movs	r1, #2
   2f696:	4630      	mov	r0, r6
   2f698:	f017 fd4e 	bl	47138 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   2f69c:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   2f69e:	4628      	mov	r0, r5
}
   2f6a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_pairing_complete(smp, 0);
   2f6a4:	f7ff bef8 	b.w	2f498 <smp_pairing_complete>
	if (!conn->encrypt) {
   2f6a8:	f898 300b 	ldrb.w	r3, [r8, #11]
   2f6ac:	2b00      	cmp	r3, #0
   2f6ae:	d03a      	beq.n	2f726 <bt_smp_encrypt_change+0xd2>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2f6b0:	2103      	movs	r1, #3
   2f6b2:	4630      	mov	r0, r6
   2f6b4:	f017 fd5a 	bl	4716c <atomic_test_bit>
   2f6b8:	b920      	cbnz	r0, 2f6c4 <bt_smp_encrypt_change+0x70>
		smp_reset(smp);
   2f6ba:	4628      	mov	r0, r5
}
   2f6bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_reset(smp);
   2f6c0:	f017 be3c 	b.w	4733c <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2f6c4:	2105      	movs	r1, #5
   2f6c6:	4630      	mov	r0, r6
   2f6c8:	f017 fd50 	bl	4716c <atomic_test_bit>
   2f6cc:	b1b8      	cbz	r0, 2f6fe <bt_smp_encrypt_change+0xaa>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   2f6ce:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   2f6d2:	071f      	lsls	r7, r3, #28
   2f6d4:	d507      	bpl.n	2f6e6 <bt_smp_encrypt_change+0x92>
   2f6d6:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   2f6da:	0718      	lsls	r0, r3, #28
   2f6dc:	d503      	bpl.n	2f6e6 <bt_smp_encrypt_change+0x92>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   2f6de:	2111      	movs	r1, #17
   2f6e0:	4630      	mov	r0, r6
   2f6e2:	f017 fd29 	bl	47138 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   2f6e6:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   2f6ea:	f023 0308 	bic.w	r3, r3, #8
   2f6ee:	f804 3c08 	strb.w	r3, [r4, #-8]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   2f6f2:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   2f6f6:	f023 0308 	bic.w	r3, r3, #8
   2f6fa:	f804 3c07 	strb.w	r3, [r4, #-7]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   2f6fe:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   2f702:	07d9      	lsls	r1, r3, #31
   2f704:	d511      	bpl.n	2f72a <bt_smp_encrypt_change+0xd6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   2f706:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   2f708:	4628      	mov	r0, r5
   2f70a:	f017 fd15 	bl	47138 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   2f70e:	2102      	movs	r1, #2
   2f710:	4630      	mov	r0, r6
   2f712:	f017 fd11 	bl	47138 <atomic_set_bit>
	struct bt_keys *keys = conn->le.keys;
   2f716:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   2f718:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   2f71c:	b11b      	cbz	r3, 2f726 <bt_smp_encrypt_change+0xd2>
	if (!smp->local_dist && !smp->remote_dist) {
   2f71e:	f834 1c08 	ldrh.w	r1, [r4, #-8]
   2f722:	2900      	cmp	r1, #0
   2f724:	d0bb      	beq.n	2f69e <bt_smp_encrypt_change+0x4a>
}
   2f726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   2f72a:	079a      	lsls	r2, r3, #30
   2f72c:	d501      	bpl.n	2f732 <bt_smp_encrypt_change+0xde>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   2f72e:	2108      	movs	r1, #8
   2f730:	e7ea      	b.n	2f708 <bt_smp_encrypt_change+0xb4>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   2f732:	075b      	lsls	r3, r3, #29
   2f734:	d5eb      	bpl.n	2f70e <bt_smp_encrypt_change+0xba>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   2f736:	210a      	movs	r1, #10
   2f738:	e7e6      	b.n	2f708 <bt_smp_encrypt_change+0xb4>
   2f73a:	bf00      	nop
   2f73c:	0004b0d8 	.word	0x0004b0d8

0002f740 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   2f740:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   2f742:	4b0a      	ldr	r3, [pc, #40]	; (2f76c <bt_smp_init+0x2c>)
   2f744:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   2f748:	f003 0306 	and.w	r3, r3, #6
   2f74c:	2b06      	cmp	r3, #6
   2f74e:	4b08      	ldr	r3, [pc, #32]	; (2f770 <bt_smp_init+0x30>)
   2f750:	bf0c      	ite	eq
   2f752:	2201      	moveq	r2, #1
   2f754:	2200      	movne	r2, #0
   2f756:	701a      	strb	r2, [r3, #0]
	static struct bt_pub_key_cb pub_key_cb = {
		.func           = bt_smp_pkey_ready,
	};

	sc_supported = le_sc_supported();
	if (IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) && !sc_supported) {
   2f758:	d104      	bne.n	2f764 <bt_smp_init+0x24>
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   2f75a:	4806      	ldr	r0, [pc, #24]	; (2f774 <bt_smp_init+0x34>)
   2f75c:	f7fc fd7c 	bl	2c258 <bt_pub_key_gen>
	}

	return smp_self_test();
   2f760:	2000      	movs	r0, #0
}
   2f762:	bd08      	pop	{r3, pc}
		return -ENOENT;
   2f764:	f06f 0001 	mvn.w	r0, #1
   2f768:	e7fb      	b.n	2f762 <bt_smp_init+0x22>
   2f76a:	bf00      	nop
   2f76c:	20000000 	.word	0x20000000
   2f770:	20003c0f 	.word	0x20003c0f
   2f774:	20000404 	.word	0x20000404

0002f778 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   2f778:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   2f77a:	4d12      	ldr	r5, [pc, #72]	; (2f7c4 <bt_keys_get_addr+0x4c>)
   2f77c:	f815 3b01 	ldrb.w	r3, [r5], #1
   2f780:	4283      	cmp	r3, r0
{
   2f782:	4606      	mov	r6, r0
   2f784:	460f      	mov	r7, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   2f786:	d00c      	beq.n	2f7a2 <bt_keys_get_addr+0x2a>
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   2f788:	2400      	movs	r4, #0
   2f78a:	480f      	ldr	r0, [pc, #60]	; (2f7c8 <bt_keys_get_addr+0x50>)
   2f78c:	9400      	str	r4, [sp, #0]
   2f78e:	2207      	movs	r2, #7
   2f790:	4669      	mov	r1, sp
   2f792:	f8cd 4003 	str.w	r4, [sp, #3]
   2f796:	f015 f984 	bl	44aa2 <memcmp>
			first_free_slot = oldest - &key_pool[0];
		}
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   2f79a:	b150      	cbz	r0, 2f7b2 <bt_keys_get_addr+0x3a>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   2f79c:	4620      	mov	r0, r4
}
   2f79e:	b003      	add	sp, #12
   2f7a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f7a2:	2207      	movs	r2, #7
   2f7a4:	4628      	mov	r0, r5
   2f7a6:	f015 f97c 	bl	44aa2 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   2f7aa:	2800      	cmp	r0, #0
   2f7ac:	d1ec      	bne.n	2f788 <bt_keys_get_addr+0x10>
		keys = &key_pool[i];
   2f7ae:	4805      	ldr	r0, [pc, #20]	; (2f7c4 <bt_keys_get_addr+0x4c>)
   2f7b0:	e7f5      	b.n	2f79e <bt_keys_get_addr+0x26>
		keys->id = id;
   2f7b2:	f805 6c01 	strb.w	r6, [r5, #-1]
	memcpy(dst, src, sizeof(*dst));
   2f7b6:	2207      	movs	r2, #7
   2f7b8:	4639      	mov	r1, r7
   2f7ba:	4803      	ldr	r0, [pc, #12]	; (2f7c8 <bt_keys_get_addr+0x50>)
   2f7bc:	f015 f981 	bl	44ac2 <memcpy>
}
   2f7c0:	e7f5      	b.n	2f7ae <bt_keys_get_addr+0x36>
   2f7c2:	bf00      	nop
   2f7c4:	20001cbc 	.word	0x20001cbc
   2f7c8:	20001cbd 	.word	0x20001cbd

0002f7cc <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   2f7cc:	460b      	mov	r3, r1
   2f7ce:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   2f7d0:	4a04      	ldr	r2, [pc, #16]	; (2f7e4 <bt_keys_foreach+0x18>)
{
   2f7d2:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   2f7d4:	89d4      	ldrh	r4, [r2, #14]
   2f7d6:	4204      	tst	r4, r0
   2f7d8:	d002      	beq.n	2f7e0 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
   2f7da:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   2f7dc:	4610      	mov	r0, r2
   2f7de:	4718      	bx	r3
}
   2f7e0:	bc10      	pop	{r4}
   2f7e2:	4770      	bx	lr
   2f7e4:	20001cbc 	.word	0x20001cbc

0002f7e8 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   2f7e8:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   2f7ea:	4903      	ldr	r1, [pc, #12]	; (2f7f8 <keys_commit+0x10>)
   2f7ec:	2200      	movs	r2, #0
   2f7ee:	2002      	movs	r0, #2
   2f7f0:	f7ff ffec 	bl	2f7cc <bt_keys_foreach>
	}

	return 0;
}
   2f7f4:	2000      	movs	r0, #0
   2f7f6:	bd08      	pop	{r3, pc}
   2f7f8:	000477b5 	.word	0x000477b5

0002f7fc <bt_keys_find>:
{
   2f7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   2f800:	f8df 8038 	ldr.w	r8, [pc, #56]	; 2f83c <bt_keys_find+0x40>
{
   2f804:	4605      	mov	r5, r0
   2f806:	460e      	mov	r6, r1
   2f808:	4617      	mov	r7, r2
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2f80a:	2300      	movs	r3, #0
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   2f80c:	f8b8 400e 	ldrh.w	r4, [r8, #14]
   2f810:	f898 2000 	ldrb.w	r2, [r8]
   2f814:	402c      	ands	r4, r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2f816:	b113      	cbz	r3, 2f81e <bt_keys_find+0x22>
	return NULL;
   2f818:	2000      	movs	r0, #0
}
   2f81a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   2f81e:	2c00      	cmp	r4, #0
   2f820:	d0fa      	beq.n	2f818 <bt_keys_find+0x1c>
   2f822:	4296      	cmp	r6, r2
   2f824:	d1f8      	bne.n	2f818 <bt_keys_find+0x1c>
	return memcmp(a, b, sizeof(*a));
   2f826:	4806      	ldr	r0, [pc, #24]	; (2f840 <bt_keys_find+0x44>)
   2f828:	2207      	movs	r2, #7
   2f82a:	4639      	mov	r1, r7
   2f82c:	f015 f939 	bl	44aa2 <memcmp>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2f830:	2301      	movs	r3, #1
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   2f832:	2800      	cmp	r0, #0
   2f834:	d1ea      	bne.n	2f80c <bt_keys_find+0x10>
			return &key_pool[i];
   2f836:	4801      	ldr	r0, [pc, #4]	; (2f83c <bt_keys_find+0x40>)
   2f838:	e7ef      	b.n	2f81a <bt_keys_find+0x1e>
   2f83a:	bf00      	nop
   2f83c:	20001cbc 	.word	0x20001cbc
   2f840:	20001cbd 	.word	0x20001cbd

0002f844 <bt_keys_find_irk>:
{
   2f844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   2f846:	780b      	ldrb	r3, [r1, #0]
   2f848:	2b01      	cmp	r3, #1
   2f84a:	4606      	mov	r6, r0
   2f84c:	460c      	mov	r4, r1
   2f84e:	d001      	beq.n	2f854 <bt_keys_find_irk+0x10>
		return NULL;
   2f850:	2000      	movs	r0, #0
}
   2f852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   2f854:	798b      	ldrb	r3, [r1, #6]
   2f856:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2f85a:	2b40      	cmp	r3, #64	; 0x40
   2f85c:	d1f8      	bne.n	2f850 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   2f85e:	4d18      	ldr	r5, [pc, #96]	; (2f8c0 <bt_keys_find_irk+0x7c>)
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2f860:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   2f862:	f105 073a 	add.w	r7, r5, #58	; 0x3a
   2f866:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id == id &&
   2f868:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2f86a:	f002 0202 	and.w	r2, r2, #2
   2f86e:	b1c3      	cbz	r3, 2f8a2 <bt_keys_find_irk+0x5e>
   2f870:	2300      	movs	r3, #0
   2f872:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id != id) {
   2f874:	7829      	ldrb	r1, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2f876:	f002 0202 	and.w	r2, r2, #2
   2f87a:	2b00      	cmp	r3, #0
   2f87c:	d1e8      	bne.n	2f850 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   2f87e:	2a00      	cmp	r2, #0
   2f880:	d0e6      	beq.n	2f850 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   2f882:	42b1      	cmp	r1, r6
   2f884:	d1e4      	bne.n	2f850 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   2f886:	1c67      	adds	r7, r4, #1
   2f888:	480e      	ldr	r0, [pc, #56]	; (2f8c4 <bt_keys_find_irk+0x80>)
   2f88a:	4639      	mov	r1, r7
   2f88c:	f015 f968 	bl	44b60 <bt_rpa_irk_matches>
   2f890:	2301      	movs	r3, #1
   2f892:	2800      	cmp	r0, #0
   2f894:	d0ed      	beq.n	2f872 <bt_keys_find_irk+0x2e>
	memcpy(dst, src, sizeof(*dst));
   2f896:	2206      	movs	r2, #6
   2f898:	4639      	mov	r1, r7
   2f89a:	480b      	ldr	r0, [pc, #44]	; (2f8c8 <bt_keys_find_irk+0x84>)
   2f89c:	f015 f911 	bl	44ac2 <memcpy>
}
   2f8a0:	e00b      	b.n	2f8ba <bt_keys_find_irk+0x76>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   2f8a2:	2a00      	cmp	r2, #0
   2f8a4:	d0e5      	beq.n	2f872 <bt_keys_find_irk+0x2e>
		if (key_pool[i].id == id &&
   2f8a6:	42b0      	cmp	r0, r6
   2f8a8:	d1e3      	bne.n	2f872 <bt_keys_find_irk+0x2e>
	return memcmp(a, b, sizeof(*a));
   2f8aa:	2206      	movs	r2, #6
   2f8ac:	4639      	mov	r1, r7
   2f8ae:	1c60      	adds	r0, r4, #1
   2f8b0:	f015 f8f7 	bl	44aa2 <memcmp>
   2f8b4:	2301      	movs	r3, #1
   2f8b6:	2800      	cmp	r0, #0
   2f8b8:	d1d5      	bne.n	2f866 <bt_keys_find_irk+0x22>
			return &key_pool[i];
   2f8ba:	4801      	ldr	r0, [pc, #4]	; (2f8c0 <bt_keys_find_irk+0x7c>)
   2f8bc:	e7c9      	b.n	2f852 <bt_keys_find_irk+0xe>
   2f8be:	bf00      	nop
   2f8c0:	20001cbc 	.word	0x20001cbc
   2f8c4:	20001ce6 	.word	0x20001ce6
   2f8c8:	20001cf6 	.word	0x20001cf6

0002f8cc <bt_keys_find_addr>:
{
   2f8cc:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
   2f8ce:	4c06      	ldr	r4, [pc, #24]	; (2f8e8 <bt_keys_find_addr+0x1c>)
   2f8d0:	7823      	ldrb	r3, [r4, #0]
   2f8d2:	4283      	cmp	r3, r0
   2f8d4:	d104      	bne.n	2f8e0 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   2f8d6:	2207      	movs	r2, #7
   2f8d8:	1c60      	adds	r0, r4, #1
   2f8da:	f015 f8e2 	bl	44aa2 <memcmp>
   2f8de:	b108      	cbz	r0, 2f8e4 <bt_keys_find_addr+0x18>
	return NULL;
   2f8e0:	2000      	movs	r0, #0
}
   2f8e2:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   2f8e4:	4620      	mov	r0, r4
   2f8e6:	e7fc      	b.n	2f8e2 <bt_keys_find_addr+0x16>
   2f8e8:	20001cbc 	.word	0x20001cbc

0002f8ec <bt_keys_clear>:
{
   2f8ec:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   2f8ee:	7a03      	ldrb	r3, [r0, #8]
   2f8f0:	075b      	lsls	r3, r3, #29
{
   2f8f2:	b08c      	sub	sp, #48	; 0x30
   2f8f4:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   2f8f6:	d501      	bpl.n	2f8fc <bt_keys_clear+0x10>
		bt_id_del(keys);
   2f8f8:	f7fc f862 	bl	2b9c0 <bt_id_del>
		if (keys->id) {
   2f8fc:	4625      	mov	r5, r4
   2f8fe:	f815 2b01 	ldrb.w	r2, [r5], #1
   2f902:	b1b2      	cbz	r2, 2f932 <bt_keys_clear+0x46>
			u8_to_dec(id, sizeof(id), keys->id);
   2f904:	ae02      	add	r6, sp, #8
   2f906:	2104      	movs	r1, #4
   2f908:	4630      	mov	r0, r6
   2f90a:	f012 ff20 	bl	4274e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   2f90e:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   2f910:	4a09      	ldr	r2, [pc, #36]	; (2f938 <bt_keys_clear+0x4c>)
   2f912:	462b      	mov	r3, r5
   2f914:	2124      	movs	r1, #36	; 0x24
   2f916:	a803      	add	r0, sp, #12
   2f918:	f7fb f920 	bl	2ab5c <bt_settings_encode_key>
		settings_delete(key);
   2f91c:	a803      	add	r0, sp, #12
   2f91e:	f013 fdd7 	bl	434d0 <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   2f922:	2240      	movs	r2, #64	; 0x40
   2f924:	2100      	movs	r1, #0
   2f926:	4620      	mov	r0, r4
}
   2f928:	b00c      	add	sp, #48	; 0x30
   2f92a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(keys, 0, sizeof(*keys));
   2f92e:	f015 b8d3 	b.w	44ad8 <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   2f932:	9200      	str	r2, [sp, #0]
   2f934:	e7ec      	b.n	2f910 <bt_keys_clear+0x24>
   2f936:	bf00      	nop
   2f938:	0004b11c 	.word	0x0004b11c

0002f93c <bt_keys_store>:
{
   2f93c:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
   2f93e:	4605      	mov	r5, r0
{
   2f940:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   2f942:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   2f946:	4604      	mov	r4, r0
	if (keys->id) {
   2f948:	b19a      	cbz	r2, 2f972 <bt_keys_store+0x36>
		u8_to_dec(id, sizeof(id), keys->id);
   2f94a:	ae02      	add	r6, sp, #8
   2f94c:	2104      	movs	r1, #4
   2f94e:	4630      	mov	r0, r6
   2f950:	f012 fefd 	bl	4274e <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   2f954:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   2f956:	462b      	mov	r3, r5
   2f958:	a803      	add	r0, sp, #12
   2f95a:	4a07      	ldr	r2, [pc, #28]	; (2f978 <bt_keys_store+0x3c>)
   2f95c:	2124      	movs	r1, #36	; 0x24
   2f95e:	f7fb f8fd 	bl	2ab5c <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   2f962:	2234      	movs	r2, #52	; 0x34
   2f964:	f104 010c 	add.w	r1, r4, #12
   2f968:	a803      	add	r0, sp, #12
   2f96a:	f7f9 ff61 	bl	29830 <settings_save_one>
}
   2f96e:	b00c      	add	sp, #48	; 0x30
   2f970:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   2f972:	9200      	str	r2, [sp, #0]
   2f974:	e7ef      	b.n	2f956 <bt_keys_store+0x1a>
   2f976:	bf00      	nop
   2f978:	0004b11c 	.word	0x0004b11c

0002f97c <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
   2f97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f980:	4616      	mov	r6, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   2f982:	1dc2      	adds	r2, r0, #7
   2f984:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   2f988:	1e75      	subs	r5, r6, #1
{
   2f98a:	460f      	mov	r7, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   2f98c:	b2ad      	uxth	r5, r5
	*mem_head = mem_pool;
   2f98e:	6018      	str	r0, [r3, #0]
{
   2f990:	b082      	sub	sp, #8
   2f992:	4604      	mov	r4, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   2f994:	8016      	strh	r6, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   2f996:	2100      	movs	r1, #0
   2f998:	2204      	movs	r2, #4
   2f99a:	fb07 0005 	mla	r0, r7, r5, r0
   2f99e:	f015 f89b 	bl	44ad8 <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   2f9a2:	b1bd      	cbz	r5, 2f9d4 <mem_init+0x58>
   2f9a4:	3e02      	subs	r6, #2
   2f9a6:	b2b6      	uxth	r6, r6
   2f9a8:	fb06 7307 	mla	r3, r6, r7, r7
   2f9ac:	fb06 f807 	mul.w	r8, r6, r7
   2f9b0:	441c      	add	r4, r3
   2f9b2:	eba8 0803 	sub.w	r8, r8, r3
   2f9b6:	2500      	movs	r5, #0
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   2f9b8:	2204      	movs	r2, #4
   2f9ba:	eb04 0008 	add.w	r0, r4, r8
   2f9be:	eb0d 0102 	add.w	r1, sp, r2
		next = (uint32_t)((uint8_t *) mem_pool +
   2f9c2:	9401      	str	r4, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   2f9c4:	f015 f87d 	bl	44ac2 <memcpy>
	while (mem_count--) {
   2f9c8:	42b5      	cmp	r5, r6
   2f9ca:	eba4 0407 	sub.w	r4, r4, r7
   2f9ce:	f105 0501 	add.w	r5, r5, #1
   2f9d2:	d1f1      	bne.n	2f9b8 <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
   2f9d4:	b002      	add	sp, #8
   2f9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2f9da:	bf00      	nop

0002f9dc <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   2f9dc:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
   2f9de:	6805      	ldr	r5, [r0, #0]
{
   2f9e0:	b082      	sub	sp, #8
	if (*mem_head) {
   2f9e2:	b195      	cbz	r5, 2fa0a <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   2f9e4:	1deb      	adds	r3, r5, #7
   2f9e6:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   2f9ea:	2204      	movs	r2, #4
   2f9ec:	4604      	mov	r4, r0
   2f9ee:	4629      	mov	r1, r5
   2f9f0:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   2f9f4:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   2f9f6:	f015 f864 	bl	44ac2 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   2f9fa:	9b01      	ldr	r3, [sp, #4]
   2f9fc:	b123      	cbz	r3, 2fa08 <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   2f9fe:	1dda      	adds	r2, r3, #7
   2fa00:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   2fa04:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   2fa06:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
   2fa08:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
   2fa0a:	4628      	mov	r0, r5
   2fa0c:	b002      	add	sp, #8
   2fa0e:	bd70      	pop	{r4, r5, r6, pc}

0002fa10 <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   2fa10:	680b      	ldr	r3, [r1, #0]
{
   2fa12:	b570      	push	{r4, r5, r6, lr}
   2fa14:	460c      	mov	r4, r1
   2fa16:	4605      	mov	r5, r0
	if (*mem_head) {
   2fa18:	b183      	cbz	r3, 2fa3c <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   2fa1a:	3307      	adds	r3, #7
   2fa1c:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
   2fa20:	881e      	ldrh	r6, [r3, #0]
   2fa22:	3601      	adds	r6, #1
   2fa24:	b2b6      	uxth	r6, r6

	memcpy(mem, mem_head, sizeof(mem));
   2fa26:	2204      	movs	r2, #4
   2fa28:	4621      	mov	r1, r4
   2fa2a:	4628      	mov	r0, r5
   2fa2c:	f015 f849 	bl	44ac2 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   2fa30:	1deb      	adds	r3, r5, #7
   2fa32:	f023 0303 	bic.w	r3, r3, #3
   2fa36:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
   2fa38:	6025      	str	r5, [r4, #0]
}
   2fa3a:	bd70      	pop	{r4, r5, r6, pc}
   2fa3c:	2601      	movs	r6, #1
   2fa3e:	e7f2      	b.n	2fa26 <mem_release+0x16>

0002fa40 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   2fa40:	fb02 0001 	mla	r0, r2, r1, r0
   2fa44:	4770      	bx	lr
   2fa46:	bf00      	nop

0002fa48 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
   2fa48:	1a40      	subs	r0, r0, r1
   2fa4a:	b280      	uxth	r0, r0
}
   2fa4c:	fbb0 f0f2 	udiv	r0, r0, r2
   2fa50:	4770      	bx	lr
   2fa52:	bf00      	nop

0002fa54 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
   2fa54:	1e53      	subs	r3, r2, #1
	src += len;
   2fa56:	4411      	add	r1, r2
	while (len--) {
   2fa58:	b29b      	uxth	r3, r3
   2fa5a:	b142      	cbz	r2, 2fa6e <mem_rcopy+0x1a>
   2fa5c:	43db      	mvns	r3, r3
   2fa5e:	3801      	subs	r0, #1
   2fa60:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
   2fa62:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   2fa66:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
   2fa6a:	4291      	cmp	r1, r2
   2fa6c:	d1f9      	bne.n	2fa62 <mem_rcopy+0xe>
	}
}
   2fa6e:	4770      	bx	lr

0002fa70 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   2fa70:	4401      	add	r1, r0
   2fa72:	e002      	b.n	2fa7a <mem_nz+0xa>
		if (*src++) {
   2fa74:	f810 3b01 	ldrb.w	r3, [r0], #1
   2fa78:	b91b      	cbnz	r3, 2fa82 <mem_nz+0x12>
	while (len--) {
   2fa7a:	4288      	cmp	r0, r1
   2fa7c:	d1fa      	bne.n	2fa74 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
   2fa7e:	2000      	movs	r0, #0
   2fa80:	4770      	bx	lr
			return 1;
   2fa82:	2001      	movs	r0, #1
}
   2fa84:	4770      	bx	lr
   2fa86:	bf00      	nop

0002fa88 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   2fa88:	6010      	str	r0, [r2, #0]
   2fa8a:	6008      	str	r0, [r1, #0]

	return link;
}
   2fa8c:	4770      	bx	lr
   2fa8e:	bf00      	nop

0002fa90 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   2fa90:	680a      	ldr	r2, [r1, #0]
{
   2fa92:	4603      	mov	r3, r0
	if (*head != *tail) {
   2fa94:	6800      	ldr	r0, [r0, #0]
   2fa96:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
   2fa98:	bf05      	ittet	eq
   2fa9a:	2200      	moveq	r2, #0
   2fa9c:	600a      	streq	r2, [r1, #0]
		return NULL;
   2fa9e:	2000      	movne	r0, #0
	*head = *tail = NULL;
   2faa0:	601a      	streq	r2, [r3, #0]

	return old_head;
}
   2faa2:	4770      	bx	lr

0002faa4 <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   2faa4:	f8d2 c000 	ldr.w	ip, [r2]
   2faa8:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   2faac:	f8d2 c000 	ldr.w	ip, [r2]
   2fab0:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
   2fab4:	6010      	str	r0, [r2, #0]

	return link;
}
   2fab6:	4770      	bx	lr

0002fab8 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   2fab8:	4288      	cmp	r0, r1
   2faba:	d003      	beq.n	2fac4 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   2fabc:	b11a      	cbz	r2, 2fac6 <memq_peek+0xe>
		*mem = head->mem;
   2fabe:	6843      	ldr	r3, [r0, #4]
   2fac0:	6013      	str	r3, [r2, #0]
   2fac2:	4770      	bx	lr
		return NULL;
   2fac4:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   2fac6:	4770      	bx	lr

0002fac8 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   2fac8:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   2faca:	4283      	cmp	r3, r0
   2facc:	d009      	beq.n	2fae2 <memq_dequeue+0x1a>
	if (mem) {
   2face:	b12a      	cbz	r2, 2fadc <memq_dequeue+0x14>
		*mem = head->mem;
   2fad0:	6858      	ldr	r0, [r3, #4]
   2fad2:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   2fad4:	681a      	ldr	r2, [r3, #0]
   2fad6:	600a      	str	r2, [r1, #0]

	return old_head;
}
   2fad8:	4618      	mov	r0, r3
   2fada:	4770      	bx	lr
	if (old_head == NULL) {
   2fadc:	2b00      	cmp	r3, #0
   2fade:	d1f9      	bne.n	2fad4 <memq_dequeue+0xc>
   2fae0:	e7fa      	b.n	2fad8 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
   2fae2:	2300      	movs	r3, #0
   2fae4:	e7f8      	b.n	2fad8 <memq_dequeue+0x10>
   2fae6:	bf00      	nop

0002fae8 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   2fae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2faec:	f8df 8030 	ldr.w	r8, [pc, #48]	; 2fb20 <mayfly_init+0x38>
   2faf0:	4e0c      	ldr	r6, [pc, #48]	; (2fb24 <mayfly_init+0x3c>)
   2faf2:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
   2faf4:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
   2faf8:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
   2fafa:	1d22      	adds	r2, r4, #4
   2fafc:	4621      	mov	r1, r4
   2fafe:	4628      	mov	r0, r5
		while (caller_id--) {
   2fb00:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
   2fb02:	f7ff ffc1 	bl	2fa88 <memq_init>
		while (caller_id--) {
   2fb06:	42a6      	cmp	r6, r4
   2fb08:	f1a5 0508 	sub.w	r5, r5, #8
   2fb0c:	d1f5      	bne.n	2fafa <mayfly_init+0x12>
	while (callee_id--) {
   2fb0e:	3f04      	subs	r7, #4
   2fb10:	1d3b      	adds	r3, r7, #4
   2fb12:	f1a8 0820 	sub.w	r8, r8, #32
   2fb16:	f1a6 0630 	sub.w	r6, r6, #48	; 0x30
   2fb1a:	d1eb      	bne.n	2faf4 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   2fb1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2fb20:	20001d78 	.word	0x20001d78
   2fb24:	20001e04 	.word	0x20001e04

0002fb28 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
   2fb28:	b410      	push	{r4}
   2fb2a:	4603      	mov	r3, r0
   2fb2c:	468c      	mov	ip, r1
	if (enable) {
   2fb2e:	b19a      	cbz	r2, 2fb58 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
   2fb30:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   2fb34:	4814      	ldr	r0, [pc, #80]	; (2fb88 <mayfly_enable+0x60>)
   2fb36:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   2fb3a:	0109      	lsls	r1, r1, #4
   2fb3c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   2fb40:	4401      	add	r1, r0
   2fb42:	7a48      	ldrb	r0, [r1, #9]
   2fb44:	7a0c      	ldrb	r4, [r1, #8]
   2fb46:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   2fb48:	bf04      	itt	eq
   2fb4a:	3001      	addeq	r0, #1
   2fb4c:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
   2fb4e:	bc10      	pop	{r4}
		mayfly_enable_cb(caller_id, callee_id, enable);
   2fb50:	4661      	mov	r1, ip
   2fb52:	4618      	mov	r0, r3
   2fb54:	f00d b80e 	b.w	3cb74 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   2fb58:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   2fb5c:	4c0a      	ldr	r4, [pc, #40]	; (2fb88 <mayfly_enable+0x60>)
   2fb5e:	0112      	lsls	r2, r2, #4
   2fb60:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   2fb64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2fb68:	4423      	add	r3, r4
   2fb6a:	7a9c      	ldrb	r4, [r3, #10]
   2fb6c:	7ada      	ldrb	r2, [r3, #11]
   2fb6e:	42a2      	cmp	r2, r4
   2fb70:	d001      	beq.n	2fb76 <mayfly_enable+0x4e>
}
   2fb72:	bc10      	pop	{r4}
   2fb74:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
   2fb76:	3201      	adds	r2, #1
   2fb78:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
   2fb7a:	4b04      	ldr	r3, [pc, #16]	; (2fb8c <mayfly_enable+0x64>)
   2fb7c:	2201      	movs	r2, #1
   2fb7e:	545a      	strb	r2, [r3, r1]
}
   2fb80:	bc10      	pop	{r4}
			mayfly_pend(caller_id, callee_id);
   2fb82:	f00d b84d 	b.w	3cc20 <mayfly_pend>
   2fb86:	bf00      	nop
   2fb88:	20001d80 	.word	0x20001d80
   2fb8c:	20001cfc 	.word	0x20001cfc

0002fb90 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
   2fb90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fb92:	4606      	mov	r6, r0
   2fb94:	461c      	mov	r4, r3
   2fb96:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   2fb98:	b302      	cbz	r2, 2fbdc <mayfly_enqueue+0x4c>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   2fb9a:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   2fb9c:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   2fb9e:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   2fba0:	f012 0203 	ands.w	r2, r2, #3
   2fba4:	d13a      	bne.n	2fc1c <mayfly_enqueue+0x8c>
   2fba6:	4f27      	ldr	r7, [pc, #156]	; (2fc44 <mayfly_enqueue+0xb4>)
   2fba8:	0071      	lsls	r1, r6, #1
   2fbaa:	ea4f 0c45 	mov.w	ip, r5, lsl #1
		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   2fbae:	4431      	add	r1, r6
   2fbb0:	44ac      	add	ip, r5
   2fbb2:	0089      	lsls	r1, r1, #2
   2fbb4:	eb01 110c 	add.w	r1, r1, ip, lsl #4
	m->_req = ack + 1;
   2fbb8:	3301      	adds	r3, #1
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   2fbba:	3104      	adds	r1, #4
	m->_req = ack + 1;
   2fbbc:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   2fbbe:	187a      	adds	r2, r7, r1
   2fbc0:	6860      	ldr	r0, [r4, #4]
	m->_req = ack + 1;
   2fbc2:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   2fbc4:	4621      	mov	r1, r4
   2fbc6:	f7ff ff6d 	bl	2faa4 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
   2fbca:	4b1f      	ldr	r3, [pc, #124]	; (2fc48 <mayfly_enqueue+0xb8>)
   2fbcc:	2201      	movs	r2, #1
   2fbce:	555a      	strb	r2, [r3, r5]

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   2fbd0:	4629      	mov	r1, r5
   2fbd2:	4630      	mov	r0, r6
   2fbd4:	f00d f824 	bl	3cc20 <mayfly_pend>
		return 0;
   2fbd8:	2000      	movs	r0, #0

	return 0;
}
   2fbda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   2fbdc:	f00d f80a 	bl	3cbf4 <mayfly_prio_is_equal>
   2fbe0:	2800      	cmp	r0, #0
   2fbe2:	d0da      	beq.n	2fb9a <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
   2fbe4:	4629      	mov	r1, r5
   2fbe6:	4630      	mov	r0, r6
   2fbe8:	f00c ffe4 	bl	3cbb4 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   2fbec:	2800      	cmp	r0, #0
   2fbee:	d0d4      	beq.n	2fb9a <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
   2fbf0:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   2fbf4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
   2fbf8:	4f12      	ldr	r7, [pc, #72]	; (2fc44 <mayfly_enqueue+0xb4>)
	ack = m->_ack;
   2fbfa:	7863      	ldrb	r3, [r4, #1]
		(mft[callee_id][caller_id].disable_req !=
   2fbfc:	0112      	lsls	r2, r2, #4
   2fbfe:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   2fc02:	443a      	add	r2, r7
   2fc04:	0071      	lsls	r1, r6, #1
		!mayfly_is_enabled(caller_id, callee_id) ||
   2fc06:	7a90      	ldrb	r0, [r2, #10]
   2fc08:	7ad2      	ldrb	r2, [r2, #11]
   2fc0a:	4290      	cmp	r0, r2
		(mft[callee_id][caller_id].disable_req !=
   2fc0c:	ea4f 0c45 	mov.w	ip, r5, lsl #1
		!mayfly_is_enabled(caller_id, callee_id) ||
   2fc10:	d00c      	beq.n	2fc2c <mayfly_enqueue+0x9c>
	state = (m->_req - ack) & 0x03;
   2fc12:	7820      	ldrb	r0, [r4, #0]
   2fc14:	1ac0      	subs	r0, r0, r3
	if (state != 0U) {
   2fc16:	f010 0203 	ands.w	r2, r0, #3
   2fc1a:	d0c8      	beq.n	2fbae <mayfly_enqueue+0x1e>
			if (state != 1U) {
   2fc1c:	2a01      	cmp	r2, #1
   2fc1e:	d003      	beq.n	2fc28 <mayfly_enqueue+0x98>
				m->_req = ack + 1;
   2fc20:	3301      	adds	r3, #1
   2fc22:	b2db      	uxtb	r3, r3
   2fc24:	7023      	strb	r3, [r4, #0]
				goto mayfly_enqueue_pend;
   2fc26:	e7d0      	b.n	2fbca <mayfly_enqueue+0x3a>
			return 1;
   2fc28:	4610      	mov	r0, r2
}
   2fc2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	state = (m->_req - ack) & 0x03;
   2fc2c:	7822      	ldrb	r2, [r4, #0]
   2fc2e:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   2fc30:	0792      	lsls	r2, r2, #30
   2fc32:	d002      	beq.n	2fc3a <mayfly_enqueue+0xaa>
		m->_req = ack + 2;
   2fc34:	3302      	adds	r3, #2
   2fc36:	b2db      	uxtb	r3, r3
   2fc38:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
   2fc3a:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   2fc3e:	4798      	blx	r3
		return 0;
   2fc40:	e7ca      	b.n	2fbd8 <mayfly_enqueue+0x48>
   2fc42:	bf00      	nop
   2fc44:	20001d80 	.word	0x20001d80
   2fc48:	20001cfc 	.word	0x20001cfc

0002fc4c <mayfly_run>:
		}
	}
}

void mayfly_run(uint8_t callee_id)
{
   2fc4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
   2fc50:	f8df 8140 	ldr.w	r8, [pc, #320]	; 2fd94 <mayfly_run+0x148>
   2fc54:	f818 3000 	ldrb.w	r3, [r8, r0]
{
   2fc58:	b089      	sub	sp, #36	; 0x24
	if (!mfp[callee_id]) {
   2fc5a:	2b00      	cmp	r3, #0
   2fc5c:	d060      	beq.n	2fd20 <mayfly_run+0xd4>
		return;
	}
	mfp[callee_id] = 0U;
   2fc5e:	f04f 0b00 	mov.w	fp, #0
   2fc62:	f8df 9134 	ldr.w	r9, [pc, #308]	; 2fd98 <mayfly_run+0x14c>
   2fc66:	f808 b000 	strb.w	fp, [r8, r0]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   2fc6a:	223c      	movs	r2, #60	; 0x3c
   2fc6c:	2304      	movs	r3, #4
   2fc6e:	e9cd bb04 	strd	fp, fp, [sp, #16]
   2fc72:	eb00 0a40 	add.w	sl, r0, r0, lsl #1
   2fc76:	fb12 3300 	smlabb	r3, r2, r0, r3

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
   2fc7a:	2403      	movs	r4, #3
   2fc7c:	eb09 1a0a 	add.w	sl, r9, sl, lsl #4
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   2fc80:	9302      	str	r3, [sp, #8]
   2fc82:	4625      	mov	r5, r4
   2fc84:	9003      	str	r0, [sp, #12]
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
   2fc86:	4654      	mov	r4, sl
		struct mayfly *m = 0;
   2fc88:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
   2fc8a:	f8da 1028 	ldr.w	r1, [sl, #40]	; 0x28
   2fc8e:	f854 0f24 	ldr.w	r0, [r4, #36]!
		struct mayfly *m = 0;
   2fc92:	9307      	str	r3, [sp, #28]
		link = memq_peek(mft[callee_id][caller_id].head,
   2fc94:	aa07      	add	r2, sp, #28
   2fc96:	f7ff ff0f 	bl	2fab8 <memq_peek>
   2fc9a:	9501      	str	r5, [sp, #4]
   2fc9c:	4607      	mov	r7, r0
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
   2fc9e:	2f00      	cmp	r7, #0
   2fca0:	d04a      	beq.n	2fd38 <mayfly_run+0xec>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
   2fca2:	9d07      	ldr	r5, [sp, #28]
   2fca4:	7868      	ldrb	r0, [r5, #1]
   2fca6:	782e      	ldrb	r6, [r5, #0]
   2fca8:	1a36      	subs	r6, r6, r0
   2fcaa:	f006 0603 	and.w	r6, r6, #3
			if (state == 1U) {
   2fcae:	2e01      	cmp	r6, #1
   2fcb0:	d106      	bne.n	2fcc0 <mayfly_run+0x74>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
   2fcb2:	1e42      	subs	r2, r0, #1
   2fcb4:	706a      	strb	r2, [r5, #1]

				/* call the mayfly function */
				m->fp(m->param);
   2fcb6:	e9d5 0302 	ldrd	r0, r3, [r5, #8]
   2fcba:	4798      	blx	r3
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
   2fcbc:	9d07      	ldr	r5, [sp, #28]
	if (((req - m->_ack) & 0x03) != 1U) {
   2fcbe:	7868      	ldrb	r0, [r5, #1]
	req = m->_req;
   2fcc0:	782b      	ldrb	r3, [r5, #0]
		memq_dequeue(mft[callee_id][caller_id].tail,
   2fcc2:	f8da c028 	ldr.w	ip, [sl, #40]	; 0x28
	if (((req - m->_ack) & 0x03) != 1U) {
   2fcc6:	1a18      	subs	r0, r3, r0
   2fcc8:	f000 0003 	and.w	r0, r0, #3
   2fccc:	2801      	cmp	r0, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
   2fcce:	f04f 0200 	mov.w	r2, #0
   2fcd2:	4621      	mov	r1, r4
	req = m->_req;
   2fcd4:	fa5f fb83 	uxtb.w	fp, r3
		memq_dequeue(mft[callee_id][caller_id].tail,
   2fcd8:	4660      	mov	r0, ip
	if (((req - m->_ack) & 0x03) != 1U) {
   2fcda:	d00d      	beq.n	2fcf8 <mayfly_run+0xac>
		memq_dequeue(mft[callee_id][caller_id].tail,
   2fcdc:	f7ff fef4 	bl	2fac8 <memq_dequeue>
		ack = m->_ack;
   2fce0:	7869      	ldrb	r1, [r5, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   2fce2:	782a      	ldrb	r2, [r5, #0]
		m->_link = link;
   2fce4:	606f      	str	r7, [r5, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
   2fce6:	1a52      	subs	r2, r2, r1
   2fce8:	f002 0203 	and.w	r2, r2, #3
   2fcec:	2a01      	cmp	r2, #1
		m->_ack = req;
   2fcee:	f885 b001 	strb.w	fp, [r5, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   2fcf2:	d018      	beq.n	2fd26 <mayfly_run+0xda>
   2fcf4:	f8da c028 	ldr.w	ip, [sl, #40]	; 0x28

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
   2fcf8:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
   2fcfc:	aa07      	add	r2, sp, #28
   2fcfe:	4661      	mov	r1, ip
   2fd00:	f7ff feda 	bl	2fab8 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
   2fd04:	2e01      	cmp	r6, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   2fd06:	4607      	mov	r7, r0
			if (state == 1U) {
   2fd08:	d1c9      	bne.n	2fc9e <mayfly_run+0x52>
				/* pend callee (tailchain) if mayfly queue is
				 * not empty or all caller queues are not
				 * processed.
				 */
				if (caller_id || link) {
   2fd0a:	9d01      	ldr	r5, [sp, #4]
   2fd0c:	2d00      	cmp	r5, #0
   2fd0e:	d03e      	beq.n	2fd8e <mayfly_run+0x142>
					/* set mayfly callee pending */
					mfp[callee_id] = 1U;
   2fd10:	9f03      	ldr	r7, [sp, #12]
   2fd12:	2301      	movs	r3, #1
   2fd14:	f808 3007 	strb.w	r3, [r8, r7]

					/* pend the callee for execution */
					mayfly_pend(callee_id, callee_id);
   2fd18:	4639      	mov	r1, r7
   2fd1a:	4638      	mov	r0, r7
   2fd1c:	f00c ff80 	bl	3cc20 <mayfly_pend>
	}

	if (disable && !enable) {
		mayfly_enable_cb(callee_id, callee_id, 0);
	}
}
   2fd20:	b009      	add	sp, #36	; 0x24
   2fd22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   2fd26:	9b02      	ldr	r3, [sp, #8]
			m->_ack = ack;
   2fd28:	7069      	strb	r1, [r5, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   2fd2a:	4638      	mov	r0, r7
   2fd2c:	4629      	mov	r1, r5
   2fd2e:	eb09 0203 	add.w	r2, r9, r3
   2fd32:	f7ff feb7 	bl	2faa4 <memq_enqueue>
   2fd36:	e7dd      	b.n	2fcf4 <mayfly_run+0xa8>
   2fd38:	9d01      	ldr	r5, [sp, #4]
		if (mft[callee_id][caller_id].disable_req !=
   2fd3a:	f89a 302e 	ldrb.w	r3, [sl, #46]	; 0x2e
   2fd3e:	f89a 202f 	ldrb.w	r2, [sl, #47]	; 0x2f
   2fd42:	429a      	cmp	r2, r3
   2fd44:	d003      	beq.n	2fd4e <mayfly_run+0x102>
			mft[callee_id][caller_id].disable_ack =
   2fd46:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
			disable = 1U;
   2fd4a:	2301      	movs	r3, #1
   2fd4c:	9304      	str	r3, [sp, #16]
		if (mft[callee_id][caller_id].enable_req !=
   2fd4e:	f89a 302c 	ldrb.w	r3, [sl, #44]	; 0x2c
   2fd52:	f89a 202d 	ldrb.w	r2, [sl, #45]	; 0x2d
   2fd56:	429a      	cmp	r2, r3
   2fd58:	d003      	beq.n	2fd62 <mayfly_run+0x116>
			mft[callee_id][caller_id].enable_ack =
   2fd5a:	f88a 302d 	strb.w	r3, [sl, #45]	; 0x2d
			enable = 1U;
   2fd5e:	2301      	movs	r3, #1
   2fd60:	9305      	str	r3, [sp, #20]
	while (caller_id--) {
   2fd62:	3d01      	subs	r5, #1
   2fd64:	b2ed      	uxtb	r5, r5
   2fd66:	2dff      	cmp	r5, #255	; 0xff
   2fd68:	f1aa 0a0c 	sub.w	sl, sl, #12
   2fd6c:	d18b      	bne.n	2fc86 <mayfly_run+0x3a>
	if (disable && !enable) {
   2fd6e:	e9dd 5b04 	ldrd	r5, fp, [sp, #16]
   2fd72:	9f03      	ldr	r7, [sp, #12]
   2fd74:	2d00      	cmp	r5, #0
   2fd76:	d0d3      	beq.n	2fd20 <mayfly_run+0xd4>
   2fd78:	f1bb 0f00 	cmp.w	fp, #0
   2fd7c:	d1d0      	bne.n	2fd20 <mayfly_run+0xd4>
		mayfly_enable_cb(callee_id, callee_id, 0);
   2fd7e:	465a      	mov	r2, fp
   2fd80:	4639      	mov	r1, r7
   2fd82:	4638      	mov	r0, r7
}
   2fd84:	b009      	add	sp, #36	; 0x24
   2fd86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
   2fd8a:	f00c bef3 	b.w	3cb74 <mayfly_enable_cb>
				if (caller_id || link) {
   2fd8e:	2800      	cmp	r0, #0
   2fd90:	d0d3      	beq.n	2fd3a <mayfly_run+0xee>
   2fd92:	e7bd      	b.n	2fd10 <mayfly_run+0xc4>
   2fd94:	20001cfc 	.word	0x20001cfc
   2fd98:	20001d80 	.word	0x20001d80

0002fd9c <util_ones_count_get>:
 */
uint8_t util_ones_count_get(const uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
   2fd9c:	1e4b      	subs	r3, r1, #1
   2fd9e:	b2db      	uxtb	r3, r3
   2fda0:	b171      	cbz	r1, 2fdc0 <util_ones_count_get+0x24>
   2fda2:	1e41      	subs	r1, r0, #1
   2fda4:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
   2fda8:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
   2fdaa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
   2fdae:	b123      	cbz	r3, 2fdba <util_ones_count_get+0x1e>
			bite &= (bite - 1);
   2fdb0:	1e5a      	subs	r2, r3, #1
			one_count++;
   2fdb2:	3001      	adds	r0, #1
		while (bite) {
   2fdb4:	4013      	ands	r3, r2
			one_count++;
   2fdb6:	b2c0      	uxtb	r0, r0
		while (bite) {
   2fdb8:	d1fa      	bne.n	2fdb0 <util_ones_count_get+0x14>
	while (octets_len--) {
   2fdba:	4561      	cmp	r1, ip
   2fdbc:	d1f5      	bne.n	2fdaa <util_ones_count_get+0xe>
   2fdbe:	4770      	bx	lr
	uint8_t one_count = 0U;
   2fdc0:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
   2fdc2:	4770      	bx	lr

0002fdc4 <ticker_dequeue>:
 * @return Total ticks until expiration for dequeued ticker node, or 0 if
 * node was not found
 * @internal
 */
static uint32_t ticker_dequeue(struct ticker_instance *instance, uint8_t id)
{
   2fdc4:	b530      	push	{r4, r5, lr}

	/* Find the ticker's position in ticker node list while accumulating
	 * ticks_to_expire
	 */
	node = &instance->nodes[0];
	previous = instance->ticker_id_head;
   2fdc6:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->nodes[0];
   2fdc8:	6805      	ldr	r5, [r0, #0]
	current = previous;
	total = 0U;
	ticker_current = 0;
	while (current != TICKER_NULL) {
   2fdca:	2bff      	cmp	r3, #255	; 0xff
   2fdcc:	d016      	beq.n	2fdfc <ticker_dequeue+0x38>
		ticker_current = &node[current];
   2fdce:	eb03 0243 	add.w	r2, r3, r3, lsl #1

		if (current == id) {
   2fdd2:	428b      	cmp	r3, r1
		ticker_current = &node[current];
   2fdd4:	eb05 1202 	add.w	r2, r5, r2, lsl #4
		if (current == id) {
   2fdd8:	d029      	beq.n	2fe2e <ticker_dequeue+0x6a>
	total = 0U;
   2fdda:	f04f 0c00 	mov.w	ip, #0
   2fdde:	e001      	b.n	2fde4 <ticker_dequeue+0x20>
		if (current == id) {
   2fde0:	4299      	cmp	r1, r3
   2fde2:	d00d      	beq.n	2fe00 <ticker_dequeue+0x3c>
			break;
		}

		total += ticker_current->ticks_to_expire;
   2fde4:	469e      	mov	lr, r3
		previous = current;
		current = ticker_current->next;
   2fde6:	7813      	ldrb	r3, [r2, #0]
		total += ticker_current->ticks_to_expire;
   2fde8:	6894      	ldr	r4, [r2, #8]
	while (current != TICKER_NULL) {
   2fdea:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
   2fdec:	eb03 0243 	add.w	r2, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
   2fdf0:	44a4      	add	ip, r4
		ticker_current = &node[current];
   2fdf2:	ea4f 1402 	mov.w	r4, r2, lsl #4
   2fdf6:	eb05 1202 	add.w	r2, r5, r2, lsl #4
	while (current != TICKER_NULL) {
   2fdfa:	d1f1      	bne.n	2fde0 <ticker_dequeue+0x1c>
	}

	if (current == TICKER_NULL) {
		/* Ticker not in active list */
		return 0;
   2fdfc:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
   2fdfe:	bd30      	pop	{r4, r5, pc}
	if (previous == current) {
   2fe00:	4571      	cmp	r1, lr
   2fe02:	d017      	beq.n	2fe34 <ticker_dequeue+0x70>
		instance->ticker_id_head = ticker_current->next;
   2fe04:	5d2b      	ldrb	r3, [r5, r4]
	timeout = ticker_current->ticks_to_expire;
   2fe06:	6890      	ldr	r0, [r2, #8]
	node[previous].next = ticker_current->next;
   2fe08:	fa0f fe8e 	sxth.w	lr, lr
   2fe0c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   2fe10:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
	if (ticker_current->next != TICKER_NULL) {
   2fe14:	2bff      	cmp	r3, #255	; 0xff
	node[previous].next = ticker_current->next;
   2fe16:	f805 300e 	strb.w	r3, [r5, lr]
	if (ticker_current->next != TICKER_NULL) {
   2fe1a:	d006      	beq.n	2fe2a <ticker_dequeue+0x66>
		node[ticker_current->next].ticks_to_expire += timeout;
   2fe1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2fe20:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   2fe24:	689a      	ldr	r2, [r3, #8]
   2fe26:	4402      	add	r2, r0
   2fe28:	609a      	str	r2, [r3, #8]
	return (total + timeout);
   2fe2a:	4460      	add	r0, ip
}
   2fe2c:	bd30      	pop	{r4, r5, pc}
	previous = instance->ticker_id_head;
   2fe2e:	469e      	mov	lr, r3
	total = 0U;
   2fe30:	f04f 0c00 	mov.w	ip, #0
		instance->ticker_id_head = ticker_current->next;
   2fe34:	7813      	ldrb	r3, [r2, #0]
   2fe36:	7743      	strb	r3, [r0, #29]
   2fe38:	e7e5      	b.n	2fe06 <ticker_dequeue+0x42>
   2fe3a:	bf00      	nop

0002fe3c <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   2fe3c:	eba2 0c01 	sub.w	ip, r2, r1
   2fe40:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
   2fe44:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
   2fe46:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   2fe48:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   2fe4a:	d10a      	bne.n	2fe62 <ticks_to_expire_prep+0x26>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   2fe4c:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   2fe50:	4463      	add	r3, ip
	if (ticks_to_expire > ticks_to_expire_minus) {
   2fe52:	42a3      	cmp	r3, r4
   2fe54:	d80d      	bhi.n	2fe72 <ticks_to_expire_prep+0x36>
		ticks_to_expire_minus -= ticks_to_expire;
   2fe56:	1ae4      	subs	r4, r4, r3
		ticks_to_expire = 0U;
   2fe58:	2300      	movs	r3, #0
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   2fe5a:	6144      	str	r4, [r0, #20]
	ticker->ticks_to_expire = ticks_to_expire;
   2fe5c:	6083      	str	r3, [r0, #8]
}
   2fe5e:	bc10      	pop	{r4}
   2fe60:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   2fe62:	1a89      	subs	r1, r1, r2
   2fe64:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   2fe68:	428b      	cmp	r3, r1
   2fe6a:	d908      	bls.n	2fe7e <ticks_to_expire_prep+0x42>
			ticks_to_expire -= delta_current_start;
   2fe6c:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   2fe6e:	42a3      	cmp	r3, r4
   2fe70:	d9f1      	bls.n	2fe56 <ticks_to_expire_prep+0x1a>
		ticks_to_expire -= ticks_to_expire_minus;
   2fe72:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
   2fe74:	2400      	movs	r4, #0
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   2fe76:	6144      	str	r4, [r0, #20]
	ticker->ticks_to_expire = ticks_to_expire;
   2fe78:	6083      	str	r3, [r0, #8]
}
   2fe7a:	bc10      	pop	{r4}
   2fe7c:	4770      	bx	lr
			ticks_to_expire_minus +=
   2fe7e:	440c      	add	r4, r1
   2fe80:	1ae4      	subs	r4, r4, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
   2fe82:	e7e9      	b.n	2fe58 <ticks_to_expire_prep+0x1c>

0002fe84 <ticker_job_list_insert>:
{
   2fe84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fe88:	b087      	sub	sp, #28
   2fe8a:	4603      	mov	r3, r0
	count_user = instance->count_user;
   2fe8c:	7a42      	ldrb	r2, [r0, #9]
{
   2fe8e:	9000      	str	r0, [sp, #0]
	node = &instance->nodes[0];
   2fe90:	6800      	ldr	r0, [r0, #0]
	users = &instance->users[0];
   2fe92:	685d      	ldr	r5, [r3, #4]
	node = &instance->nodes[0];
   2fe94:	9001      	str	r0, [sp, #4]
	while (count_user--) {
   2fe96:	2a00      	cmp	r2, #0
   2fe98:	f000 80ea 	beq.w	30070 <ticker_job_list_insert+0x1ec>
   2fe9c:	1e53      	subs	r3, r2, #1
   2fe9e:	b2db      	uxtb	r3, r3
   2fea0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   2fea4:	4688      	mov	r8, r1
   2fea6:	9302      	str	r3, [sp, #8]
   2fea8:	9505      	str	r5, [sp, #20]
		user_ops = (void *)&user->user_op[0];
   2feaa:	9b02      	ldr	r3, [sp, #8]
   2feac:	685a      	ldr	r2, [r3, #4]
		user_ops_first = user->first;
   2feae:	785b      	ldrb	r3, [r3, #1]
		user_ops = (void *)&user->user_op[0];
   2feb0:	9204      	str	r2, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
   2feb2:	9303      	str	r3, [sp, #12]
   2feb4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   2feb8:	d063      	beq.n	2ff82 <ticker_job_list_insert+0xfe>
				ticker = &node[id_insert];
   2feba:	9b01      	ldr	r3, [sp, #4]
   2febc:	eb08 0548 	add.w	r5, r8, r8, lsl #1
   2fec0:	012c      	lsls	r4, r5, #4
   2fec2:	eb03 1505 	add.w	r5, r3, r5, lsl #4
				user_op = NULL;
   2fec6:	46c1      	mov	r9, r8
	ticker->req = ticker->ack + 1;
   2fec8:	f895 b002 	ldrb.w	fp, [r5, #2]
				insert_head = ticker->next;
   2fecc:	f813 8004 	ldrb.w	r8, [r3, r4]
				user_op = NULL;
   2fed0:	2600      	movs	r6, #0
	node = &instance->nodes[0];
   2fed2:	9b00      	ldr	r3, [sp, #0]
	ticker->next = TICKER_NULL;
   2fed4:	f04f 0eff 	mov.w	lr, #255	; 0xff
   2fed8:	f885 e000 	strb.w	lr, [r5]
	node = &instance->nodes[0];
   2fedc:	f8d3 c000 	ldr.w	ip, [r3]
	current = instance->ticker_id_head;
   2fee0:	7f59      	ldrb	r1, [r3, #29]
	ticker_new = &node[id];
   2fee2:	eb0c 0a04 	add.w	sl, ip, r4
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   2fee6:	4571      	cmp	r1, lr
	ticks_to_expire = ticker_new->ticks_to_expire;
   2fee8:	f8da 0008 	ldr.w	r0, [sl, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   2feec:	d10d      	bne.n	2ff0a <ticker_job_list_insert+0x86>
   2feee:	e0b5      	b.n	3005c <ticker_job_list_insert+0x1d8>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   2fef0:	1b00      	subs	r0, r0, r4
   2fef2:	d104      	bne.n	2fefe <ticker_job_list_insert+0x7a>
   2fef4:	f8ba 701e 	ldrh.w	r7, [sl, #30]
   2fef8:	8bd2      	ldrh	r2, [r2, #30]
   2fefa:	4297      	cmp	r7, r2
   2fefc:	d876      	bhi.n	2ffec <ticker_job_list_insert+0x168>
		current = ticker_current->next;
   2fefe:	f81c 3003 	ldrb.w	r3, [ip, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   2ff02:	2bff      	cmp	r3, #255	; 0xff
   2ff04:	468e      	mov	lr, r1
		current = ticker_current->next;
   2ff06:	4619      	mov	r1, r3
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   2ff08:	d007      	beq.n	2ff1a <ticker_job_list_insert+0x96>
		(ticker_current = &node[current])->ticks_to_expire))) {
   2ff0a:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   2ff0e:	eb0c 1203 	add.w	r2, ip, r3, lsl #4
   2ff12:	011b      	lsls	r3, r3, #4
		(ticks_to_expire_current =
   2ff14:	6894      	ldr	r4, [r2, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   2ff16:	4284      	cmp	r4, r0
   2ff18:	d9ea      	bls.n	2fef0 <ticker_job_list_insert+0x6c>
	if (previous == TICKER_NULL) {
   2ff1a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
	ticker_new->ticks_to_expire = ticks_to_expire;
   2ff1e:	f8ca 0008 	str.w	r0, [sl, #8]
	ticker_new->next = current;
   2ff22:	f88a 1000 	strb.w	r1, [sl]
	if (previous == TICKER_NULL) {
   2ff26:	d05d      	beq.n	2ffe4 <ticker_job_list_insert+0x160>
		node[previous].next = id;
   2ff28:	fa0f fe8e 	sxth.w	lr, lr
   2ff2c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   2ff30:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   2ff34:	f80c 900e 	strb.w	r9, [ip, lr]
	if (current != TICKER_NULL) {
   2ff38:	29ff      	cmp	r1, #255	; 0xff
   2ff3a:	d008      	beq.n	2ff4e <ticker_job_list_insert+0xca>
		node[current].ticks_to_expire -= ticks_to_expire;
   2ff3c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   2ff40:	eb0c 1c01 	add.w	ip, ip, r1, lsl #4
   2ff44:	f8dc 3008 	ldr.w	r3, [ip, #8]
   2ff48:	1a1b      	subs	r3, r3, r0
   2ff4a:	f8cc 3008 	str.w	r3, [ip, #8]
	ticker->req = ticker->ack + 1;
   2ff4e:	f10b 0b01 	add.w	fp, fp, #1
   2ff52:	f885 b001 	strb.w	fp, [r5, #1]
			if (user_op) {
   2ff56:	2e00      	cmp	r6, #0
   2ff58:	d0ac      	beq.n	2feb4 <ticker_job_list_insert+0x30>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   2ff5a:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
   2ff5e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   2ff60:	7032      	strb	r2, [r6, #0]
	user_op->status = status;
   2ff62:	2200      	movs	r2, #0
   2ff64:	62b2      	str	r2, [r6, #40]	; 0x28
	if (user_op->fp_op_func) {
   2ff66:	b113      	cbz	r3, 2ff6e <ticker_job_list_insert+0xea>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   2ff68:	6b31      	ldr	r1, [r6, #48]	; 0x30
   2ff6a:	4610      	mov	r0, r2
   2ff6c:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   2ff6e:	686b      	ldr	r3, [r5, #4]
   2ff70:	2b00      	cmp	r3, #0
   2ff72:	d19f      	bne.n	2feb4 <ticker_job_list_insert+0x30>
					ticker->op_context =
   2ff74:	e9d6 230b 	ldrd	r2, r3, [r6, #44]	; 0x2c
		while ((insert_head != TICKER_NULL) ||
   2ff78:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
					ticker->op_context =
   2ff7c:	e9c5 2308 	strd	r2, r3, [r5, #32]
		while ((insert_head != TICKER_NULL) ||
   2ff80:	d19b      	bne.n	2feba <ticker_job_list_insert+0x36>
   2ff82:	9b02      	ldr	r3, [sp, #8]
   2ff84:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
   2ff88:	789a      	ldrb	r2, [r3, #2]
				user_op = &user_ops[user_ops_first];
   2ff8a:	eb07 0347 	add.w	r3, r7, r7, lsl #1
   2ff8e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
				first = user_ops_first + 1;
   2ff92:	1c79      	adds	r1, r7, #1
		while ((insert_head != TICKER_NULL) ||
   2ff94:	42ba      	cmp	r2, r7
				user_op = &user_ops[user_ops_first];
   2ff96:	eb0a 0683 	add.w	r6, sl, r3, lsl #2
				first = user_ops_first + 1;
   2ff9a:	b2cf      	uxtb	r7, r1
		while ((insert_head != TICKER_NULL) ||
   2ff9c:	d056      	beq.n	3004c <ticker_job_list_insert+0x1c8>
				if (first == user->count_user_op) {
   2ff9e:	9902      	ldr	r1, [sp, #8]
   2ffa0:	7808      	ldrb	r0, [r1, #0]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   2ffa2:	f81a 1023 	ldrb.w	r1, [sl, r3, lsl #2]
					first = 0U;
   2ffa6:	42b8      	cmp	r0, r7
   2ffa8:	bf08      	it	eq
   2ffaa:	2700      	moveq	r7, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   2ffac:	2904      	cmp	r1, #4
   2ffae:	d1ec      	bne.n	2ff8a <ticker_job_list_insert+0x106>
				id_insert = user_op->id;
   2ffb0:	f896 9001 	ldrb.w	r9, [r6, #1]
				ticker = &node[id_insert];
   2ffb4:	9901      	ldr	r1, [sp, #4]
   2ffb6:	eb09 0249 	add.w	r2, r9, r9, lsl #1
   2ffba:	eb01 1502 	add.w	r5, r1, r2, lsl #4
   2ffbe:	0114      	lsls	r4, r2, #4
				      ticker->ack) & 0xff) != 0U) {
   2ffc0:	f895 b002 	ldrb.w	fp, [r5, #2]
				if (((ticker->req -
   2ffc4:	786a      	ldrb	r2, [r5, #1]
   2ffc6:	455a      	cmp	r2, fp
   2ffc8:	d012      	beq.n	2fff0 <ticker_job_list_insert+0x16c>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   2ffca:	f04f 0200 	mov.w	r2, #0
   2ffce:	f80a 2023 	strb.w	r2, [sl, r3, lsl #2]
	if (user_op->fp_op_func) {
   2ffd2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
		user_op->fp_op_func(user_op->status, user_op->op_context);
   2ffd4:	2001      	movs	r0, #1
	user_op->status = status;
   2ffd6:	62b0      	str	r0, [r6, #40]	; 0x28
	if (user_op->fp_op_func) {
   2ffd8:	b10b      	cbz	r3, 2ffde <ticker_job_list_insert+0x15a>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   2ffda:	6b31      	ldr	r1, [r6, #48]	; 0x30
   2ffdc:	4798      	blx	r3
   2ffde:	9b02      	ldr	r3, [sp, #8]
   2ffe0:	789a      	ldrb	r2, [r3, #2]
		while ((insert_head != TICKER_NULL) ||
   2ffe2:	e7d2      	b.n	2ff8a <ticker_job_list_insert+0x106>
		instance->ticker_id_head = id;
   2ffe4:	9b00      	ldr	r3, [sp, #0]
   2ffe6:	f883 901d 	strb.w	r9, [r3, #29]
   2ffea:	e7a5      	b.n	2ff38 <ticker_job_list_insert+0xb4>
   2ffec:	4620      	mov	r0, r4
   2ffee:	e794      	b.n	2ff1a <ticker_job_list_insert+0x96>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   2fff0:	8ab3      	ldrh	r3, [r6, #20]
				ticker_job_op_start(ticker, user_op,
   2fff2:	9a00      	ldr	r2, [sp, #0]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   2fff4:	9703      	str	r7, [sp, #12]
   2fff6:	f64f 77fe 	movw	r7, #65534	; 0xfffe
   2fffa:	42bb      	cmp	r3, r7
				ticker_job_op_start(ticker, user_op,
   2fffc:	6951      	ldr	r1, [r2, #20]
	ticker->ext_data = start->ext_data;
   2fffe:	f8d6 c024 	ldr.w	ip, [r6, #36]	; 0x24
	ticker->ticks_periodic = start->ticks_periodic;
   30002:	e9d6 0203 	ldrd	r0, r2, [r6, #12]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   30006:	d031      	beq.n	3006c <ticker_job_list_insert+0x1e8>
		ticker->must_expire =
   30008:	f64f 7eff 	movw	lr, #65535	; 0xffff
   3000c:	4573      	cmp	r3, lr
   3000e:	d02a      	beq.n	30066 <ticker_job_list_insert+0x1e2>
   30010:	f04f 0700 	mov.w	r7, #0
   30014:	f885 702c 	strb.w	r7, [r5, #44]	; 0x2c
	ticker->lazy_periodic =
   30018:	83ab      	strh	r3, [r5, #28]
	ticker->ticks_slot = start->ticks_slot;
   3001a:	69b3      	ldr	r3, [r6, #24]
   3001c:	61ab      	str	r3, [r5, #24]
	ticker->timeout_func = start->fp_timeout_func;
   3001e:	69f3      	ldr	r3, [r6, #28]
   30020:	60eb      	str	r3, [r5, #12]
	ticker->context = start->context;
   30022:	6a33      	ldr	r3, [r6, #32]
   30024:	612b      	str	r3, [r5, #16]
	ticker->ticks_to_expire = start->ticks_first;
   30026:	68b3      	ldr	r3, [r6, #8]
   30028:	60ab      	str	r3, [r5, #8]
	ticker->ticks_to_expire_minus = 0U;
   3002a:	2300      	movs	r3, #0
	ticker->ticks_periodic = start->ticks_periodic;
   3002c:	6068      	str	r0, [r5, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   3002e:	622a      	str	r2, [r5, #32]
	ticker->ticks_to_expire_minus = 0U;
   30030:	616b      	str	r3, [r5, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   30032:	6872      	ldr	r2, [r6, #4]
	ticker->ext_data = start->ext_data;
   30034:	f8c5 c028 	str.w	ip, [r5, #40]	; 0x28
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   30038:	4628      	mov	r0, r5
	ticker->ticks_to_expire_minus = 0U;
   3003a:	461f      	mov	r7, r3
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   3003c:	f7ff fefe 	bl	2fe3c <ticks_to_expire_prep>
	ticker->force = 1U;
   30040:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
   30044:	626f      	str	r7, [r5, #36]	; 0x24
	ticker->lazy_current = 0U;
   30046:	83ef      	strh	r7, [r5, #30]
	ticker->force = 1U;
   30048:	70eb      	strb	r3, [r5, #3]
}
   3004a:	e742      	b.n	2fed2 <ticker_job_list_insert+0x4e>
	while (count_user--) {
   3004c:	9a02      	ldr	r2, [sp, #8]
   3004e:	9905      	ldr	r1, [sp, #20]
   30050:	428a      	cmp	r2, r1
   30052:	f1a2 0308 	sub.w	r3, r2, #8
   30056:	d00b      	beq.n	30070 <ticker_job_list_insert+0x1ec>
   30058:	9302      	str	r3, [sp, #8]
   3005a:	e726      	b.n	2feaa <ticker_job_list_insert+0x26>
	ticker_new->next = current;
   3005c:	f80c 1004 	strb.w	r1, [ip, r4]
		instance->ticker_id_head = id;
   30060:	f883 901d 	strb.w	r9, [r3, #29]
	if (current != TICKER_NULL) {
   30064:	e773      	b.n	2ff4e <ticker_job_list_insert+0xca>
		ticker->must_expire =
   30066:	2301      	movs	r3, #1
   30068:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	ticker->lazy_periodic =
   3006c:	2300      	movs	r3, #0
   3006e:	e7d3      	b.n	30018 <ticker_job_list_insert+0x194>
}
   30070:	b007      	add	sp, #28
   30072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30076:	bf00      	nop

00030078 <ticker_worker>:
{
   30078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   3007c:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1U;
   3007e:	2301      	movs	r3, #1
{
   30080:	b08f      	sub	sp, #60	; 0x3c
	instance->worker_trigger = 1U;
   30082:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   30084:	2d00      	cmp	r5, #0
   30086:	d15a      	bne.n	3013e <ticker_worker+0xc6>
	if (instance->ticker_id_head == TICKER_NULL) {
   30088:	7f43      	ldrb	r3, [r0, #29]
   3008a:	2bff      	cmp	r3, #255	; 0xff
   3008c:	4683      	mov	fp, r0
   3008e:	d055      	beq.n	3013c <ticker_worker+0xc4>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   30090:	f00c f8c0 	bl	3c214 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   30094:	f8db 2014 	ldr.w	r2, [fp, #20]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   30098:	f89b 301c 	ldrb.w	r3, [fp, #28]
	ticker_id_head = instance->ticker_id_head;
   3009c:	f89b 601d 	ldrb.w	r6, [fp, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   300a0:	1a80      	subs	r0, r0, r2
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   300a2:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   300a4:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   300a8:	f000 8131 	beq.w	3030e <ticker_worker+0x296>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   300ac:	f8db 3018 	ldr.w	r3, [fp, #24]
   300b0:	42bb      	cmp	r3, r7
   300b2:	bf94      	ite	ls
   300b4:	2300      	movls	r3, #0
   300b6:	2301      	movhi	r3, #1
   300b8:	9302      	str	r3, [sp, #8]
	while (ticker_id_head != TICKER_NULL) {
   300ba:	2eff      	cmp	r6, #255	; 0xff
	node = &instance->nodes[0];
   300bc:	f8db 8000 	ldr.w	r8, [fp]
	ticks_expired = 0U;
   300c0:	f04f 0a00 	mov.w	sl, #0
	while (ticker_id_head != TICKER_NULL) {
   300c4:	d045      	beq.n	30152 <ticker_worker+0xda>
				ticker->lazy_current = 0U;
   300c6:	46d1      	mov	r9, sl
   300c8:	9505      	str	r5, [sp, #20]
   300ca:	f8cd b00c 	str.w	fp, [sp, #12]
		ticker = &node[ticker_id_head];
   300ce:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   300d2:	eb08 1406 	add.w	r4, r8, r6, lsl #4
   300d6:	0136      	lsls	r6, r6, #4
		ticks_to_expire = ticker->ticks_to_expire;
   300d8:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   300da:	42bb      	cmp	r3, r7
   300dc:	d836      	bhi.n	3014c <ticker_worker+0xd4>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   300de:	78a2      	ldrb	r2, [r4, #2]
		ticker_id_head = ticker->next;
   300e0:	f818 6006 	ldrb.w	r6, [r8, r6]
		ticks_elapsed -= ticks_to_expire;
   300e4:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
   300e6:	449a      	add	sl, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   300e8:	7863      	ldrb	r3, [r4, #1]
   300ea:	1a9b      	subs	r3, r3, r2
   300ec:	b2db      	uxtb	r3, r3
   300ee:	2b01      	cmp	r3, #1
   300f0:	d12a      	bne.n	30148 <ticker_worker+0xd0>
		if (ticker->ticks_slot != 0U &&
   300f2:	f8d4 b018 	ldr.w	fp, [r4, #24]
   300f6:	f1bb 0f00 	cmp.w	fp, #0
   300fa:	d050      	beq.n	3019e <ticker_worker+0x126>
   300fc:	9b02      	ldr	r3, [sp, #8]
   300fe:	2b00      	cmp	r3, #0
   30100:	d048      	beq.n	30194 <ticker_worker+0x11c>
		int32_t lazy_current = ticker->lazy_current;
   30102:	8be0      	ldrh	r0, [r4, #30]
			struct ticker_ext *ext_data = ticker->ext_data;
   30104:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
   30106:	b13b      	cbz	r3, 30118 <ticker_worker+0xa0>
   30108:	6819      	ldr	r1, [r3, #0]
   3010a:	b119      	cbz	r1, 30114 <ticker_worker+0x9c>
			    ext_data->ticks_slot_window != 0U &&
   3010c:	7a19      	ldrb	r1, [r3, #8]
   3010e:	2900      	cmp	r1, #0
   30110:	f000 80e6 	beq.w	302e0 <ticker_worker+0x268>
				ext_data->reschedule_state =
   30114:	f883 9008 	strb.w	r9, [r3, #8]
			ticker->lazy_current++;
   30118:	3001      	adds	r0, #1
			if ((ticker->must_expire == 0U) ||
   3011a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
   3011e:	b280      	uxth	r0, r0
   30120:	83e0      	strh	r0, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   30122:	b179      	cbz	r1, 30144 <ticker_worker+0xcc>
   30124:	8ba1      	ldrh	r1, [r4, #28]
   30126:	4281      	cmp	r1, r0
   30128:	d20c      	bcs.n	30144 <ticker_worker+0xcc>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   3012a:	2b00      	cmp	r3, #0
   3012c:	f000 80f1 	beq.w	30312 <ticker_worker+0x29a>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   30130:	7a19      	ldrb	r1, [r3, #8]
   30132:	2901      	cmp	r1, #1
   30134:	d006      	beq.n	30144 <ticker_worker+0xcc>
			must_expire_skip = 1U;
   30136:	f04f 0e01 	mov.w	lr, #1
   3013a:	e034      	b.n	301a6 <ticker_worker+0x12e>
		instance->worker_trigger = 0U;
   3013c:	77c5      	strb	r5, [r0, #31]
}
   3013e:	b00f      	add	sp, #60	; 0x3c
   30140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
   30144:	3a01      	subs	r2, #1
   30146:	70a2      	strb	r2, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
   30148:	2eff      	cmp	r6, #255	; 0xff
   3014a:	d1c0      	bne.n	300ce <ticker_worker+0x56>
   3014c:	9d05      	ldr	r5, [sp, #20]
   3014e:	f8dd b00c 	ldr.w	fp, [sp, #12]
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   30152:	f89b 300b 	ldrb.w	r3, [fp, #11]
   30156:	f89b 200a 	ldrb.w	r2, [fp, #10]
   3015a:	429a      	cmp	r2, r3
   3015c:	d108      	bne.n	30170 <ticker_worker+0xf8>
	uint8_t idx = *ticks_elapsed_index + 1;
   3015e:	3201      	adds	r2, #1
   30160:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
   30162:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   30164:	bf1a      	itte	ne
   30166:	4615      	movne	r5, r2
   30168:	462b      	movne	r3, r5
   3016a:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
   3016c:	f88b 500b 	strb.w	r5, [fp, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   30170:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   30174:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   30178:	f8c3 a00c 	str.w	sl, [r3, #12]
	instance->worker_trigger = 0U;
   3017c:	2200      	movs	r2, #0
   3017e:	f88b 201f 	strb.w	r2, [fp, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   30182:	465b      	mov	r3, fp
   30184:	2201      	movs	r2, #1
   30186:	2104      	movs	r1, #4
   30188:	2003      	movs	r0, #3
   3018a:	46a4      	mov	ip, r4
}
   3018c:	b00f      	add	sp, #60	; 0x3c
   3018e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   30192:	4760      	bx	ip
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   30194:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   30198:	9304      	str	r3, [sp, #16]
   3019a:	3380      	adds	r3, #128	; 0x80
   3019c:	d145      	bne.n	3022a <ticker_worker+0x1b2>
		if (ticker->ext_data) {
   3019e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   301a0:	b303      	cbz	r3, 301e4 <ticker_worker+0x16c>
   301a2:	f04f 0e00 	mov.w	lr, #0
			ticker->ext_data->reschedule_state =
   301a6:	f883 9008 	strb.w	r9, [r3, #8]
		if (ticker->timeout_func) {
   301aa:	68e5      	ldr	r5, [r4, #12]
			ticks_drift = ticker->ext_data->ticks_drift;
   301ac:	6859      	ldr	r1, [r3, #4]
			ticker->ext_data->ticks_drift = 0U;
   301ae:	f8c3 9004 	str.w	r9, [r3, #4]
		ticker->ack--;
   301b2:	3a01      	subs	r2, #1
   301b4:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
   301b6:	2d00      	cmp	r5, #0
   301b8:	d0c6      	beq.n	30148 <ticker_worker+0xd0>
					   ticks_expired -
   301ba:	9b03      	ldr	r3, [sp, #12]
   301bc:	6960      	ldr	r0, [r4, #20]
   301be:	695b      	ldr	r3, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
   301c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
			uint8_t next_force = (ticker_next->force > ticker->force);
   301c2:	f894 c003 	ldrb.w	ip, [r4, #3]
					   ticks_expired -
   301c6:	ebaa 0000 	sub.w	r0, sl, r0
   301ca:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   301cc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   301d0:	6923      	ldr	r3, [r4, #16]
   301d2:	f1be 0f00 	cmp.w	lr, #0
   301d6:	d017      	beq.n	30208 <ticker_worker+0x190>
   301d8:	e9cd c300 	strd	ip, r3, [sp]
   301dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   301e0:	47a8      	blx	r5
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   301e2:	e7b1      	b.n	30148 <ticker_worker+0xd0>
		if (ticker->timeout_func) {
   301e4:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   301e6:	3a01      	subs	r2, #1
   301e8:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
   301ea:	2d00      	cmp	r5, #0
   301ec:	d0ac      	beq.n	30148 <ticker_worker+0xd0>
			ticks_drift = 0U;
   301ee:	4619      	mov	r1, r3
					   ticks_expired -
   301f0:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   301f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
			uint8_t next_force = (ticker_next->force > ticker->force);
   301f4:	f894 c003 	ldrb.w	ip, [r4, #3]
					   ticks_expired -
   301f8:	ebaa 0003 	sub.w	r0, sl, r3
   301fc:	9b03      	ldr	r3, [sp, #12]
   301fe:	695b      	ldr	r3, [r3, #20]
   30200:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
   30202:	6923      	ldr	r3, [r4, #16]
			ticks_at_expire = (instance->ticks_current +
   30204:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   30208:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
   3020c:	e9cd c300 	strd	ip, r3, [sp]
   30210:	4673      	mov	r3, lr
   30212:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
   30214:	69a3      	ldr	r3, [r4, #24]
				ticker->lazy_current = 0U;
   30216:	f8a4 901e 	strh.w	r9, [r4, #30]
					slot_reserved = 1U;
   3021a:	2b00      	cmp	r3, #0
   3021c:	9b02      	ldr	r3, [sp, #8]
				ticker->force = 0U;
   3021e:	f884 9003 	strb.w	r9, [r4, #3]
					slot_reserved = 1U;
   30222:	bf18      	it	ne
   30224:	2301      	movne	r3, #1
   30226:	9302      	str	r3, [sp, #8]
   30228:	e78e      	b.n	30148 <ticker_worker+0xd0>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   3022a:	2eff      	cmp	r6, #255	; 0xff
   3022c:	d0b7      	beq.n	3019e <ticker_worker+0x126>
		int32_t lazy_current = ticker->lazy_current;
   3022e:	8be0      	ldrh	r0, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   30230:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
   30232:	f8d4 e004 	ldr.w	lr, [r4, #4]
		if (lazy_current >= ticker->lazy_periodic) {
   30236:	4298      	cmp	r0, r3
		int32_t lazy_current = ticker->lazy_current;
   30238:	4605      	mov	r5, r0
			lazy_current -= ticker->lazy_periodic;
   3023a:	bf28      	it	cs
   3023c:	1ac5      	subcs	r5, r0, r3
			struct ticker_node *ticker_next = &nodes[id_head];
   3023e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   30242:	eb08 1303 	add.w	r3, r8, r3, lsl #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   30246:	9307      	str	r3, [sp, #28]
   30248:	6899      	ldr	r1, [r3, #8]
		uint32_t current_age = ticker->ticks_periodic +
   3024a:	fb05 e30e 	mla	r3, r5, lr, lr
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   3024e:	458b      	cmp	fp, r1
		uint32_t current_age = ticker->ticks_periodic +
   30250:	9306      	str	r3, [sp, #24]
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   30252:	d3a4      	bcc.n	3019e <ticker_worker+0x126>
				(lazy_current - ticker->priority);
   30254:	9b04      	ldr	r3, [sp, #16]
   30256:	960c      	str	r6, [sp, #48]	; 0x30
   30258:	1aed      	subs	r5, r5, r3
   3025a:	9508      	str	r5, [sp, #32]
   3025c:	e9cd 7a0a 	strd	r7, sl, [sp, #40]	; 0x28
   30260:	e9dd a306 	ldrd	sl, r3, [sp, #24]
   30264:	9e08      	ldr	r6, [sp, #32]
   30266:	9209      	str	r2, [sp, #36]	; 0x24
   30268:	46a4      	mov	ip, r4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   3026a:	460d      	mov	r5, r1
   3026c:	900d      	str	r0, [sp, #52]	; 0x34
   3026e:	4674      	mov	r4, lr
			if (ticker_next->ticks_slot == 0U) {
   30270:	699a      	ldr	r2, [r3, #24]
   30272:	b322      	cbz	r2, 302be <ticker_worker+0x246>
			int32_t lazy_next = ticker_next->lazy_current;
   30274:	8bda      	ldrh	r2, [r3, #30]
				ticker_next->lazy_periodic > lazy_next;
   30276:	8b98      	ldrh	r0, [r3, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   30278:	685f      	ldr	r7, [r3, #4]
			if (!lazy_next_periodic_skip) {
   3027a:	4282      	cmp	r2, r0
			int32_t lazy_next = ticker_next->lazy_current;
   3027c:	4696      	mov	lr, r2
				lazy_next -= ticker_next->lazy_periodic;
   3027e:	bf28      	it	cs
   30280:	eba2 0e00 	subcs.w	lr, r2, r0
					  0U :
   30284:	b39f      	cbz	r7, 302ee <ticker_worker+0x276>
   30286:	1a79      	subs	r1, r7, r1
				(ticker->ticks_periodic == 0U) ||
   30288:	b11c      	cbz	r4, 30292 <ticker_worker+0x21a>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   3028a:	fb07 110e 	mla	r1, r7, lr, r1
				(ticker->ticks_periodic == 0U) ||
   3028e:	458a      	cmp	sl, r1
   30290:	d92f      	bls.n	302f2 <ticker_worker+0x27a>
   30292:	2101      	movs	r1, #1
					(ticker->ticks_periodic != 0U) &&
   30294:	2700      	movs	r7, #0
			if (!lazy_next_periodic_skip &&
   30296:	4282      	cmp	r2, r0
   30298:	d311      	bcc.n	302be <ticker_worker+0x246>
   3029a:	78d8      	ldrb	r0, [r3, #3]
   3029c:	f89c 2003 	ldrb.w	r2, [ip, #3]
   302a0:	4290      	cmp	r0, r2
   302a2:	d82d      	bhi.n	30300 <ticker_worker+0x288>
				ticker_next->priority;
   302a4:	f993 202d 	ldrsb.w	r2, [r3, #45]	; 0x2d
			    (next_force ||
   302a8:	f112 0f80 	cmn.w	r2, #128	; 0x80
   302ac:	d028      	beq.n	30300 <ticker_worker+0x288>
				(lazy_next - ticker_next->priority) >
   302ae:	ebae 0e02 	sub.w	lr, lr, r2
			     next_is_critical ||
   302b2:	45b6      	cmp	lr, r6
   302b4:	dd00      	ble.n	302b8 <ticker_worker+0x240>
			     (next_has_priority && !current_is_older) ||
   302b6:	b319      	cbz	r1, 30300 <ticker_worker+0x288>
   302b8:	9904      	ldr	r1, [sp, #16]
   302ba:	4291      	cmp	r1, r2
   302bc:	d01e      	beq.n	302fc <ticker_worker+0x284>
			id_head = ticker_next->next;
   302be:	781b      	ldrb	r3, [r3, #0]
		while (id_head != TICKER_NULL) {
   302c0:	2bff      	cmp	r3, #255	; 0xff
   302c2:	d007      	beq.n	302d4 <ticker_worker+0x25c>
			struct ticker_node *ticker_next = &nodes[id_head];
   302c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   302c8:	eb08 1303 	add.w	r3, r8, r3, lsl #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   302cc:	6899      	ldr	r1, [r3, #8]
   302ce:	440d      	add	r5, r1
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   302d0:	45ab      	cmp	fp, r5
   302d2:	d2cd      	bcs.n	30270 <ticker_worker+0x1f8>
   302d4:	e9dd 7a0a 	ldrd	r7, sl, [sp, #40]	; 0x28
   302d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   302da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   302dc:	4664      	mov	r4, ip
   302de:	e75e      	b.n	3019e <ticker_worker+0x126>
			    TICKER_RESCHEDULE_STATE_NONE &&
   302e0:	8ba1      	ldrh	r1, [r4, #28]
   302e2:	4281      	cmp	r1, r0
   302e4:	f63f af16 	bhi.w	30114 <ticker_worker+0x9c>
				ext_data->reschedule_state =
   302e8:	2101      	movs	r1, #1
   302ea:	7219      	strb	r1, [r3, #8]
   302ec:	e714      	b.n	30118 <ticker_worker+0xa0>
					  0U :
   302ee:	4639      	mov	r1, r7
   302f0:	e7ca      	b.n	30288 <ticker_worker+0x210>
					(ticker->ticks_periodic != 0U) &&
   302f2:	bf34      	ite	cc
   302f4:	2701      	movcc	r7, #1
   302f6:	2700      	movcs	r7, #0
				(ticker->ticks_periodic == 0U) ||
   302f8:	2100      	movs	r1, #0
   302fa:	e7cc      	b.n	30296 <ticker_worker+0x21e>
			     (equal_priority && next_is_older))) {
   302fc:	2f00      	cmp	r7, #0
   302fe:	d0de      	beq.n	302be <ticker_worker+0x246>
   30300:	e9dd 7a0a 	ldrd	r7, sl, [sp, #40]	; 0x28
   30304:	9a09      	ldr	r2, [sp, #36]	; 0x24
   30306:	980d      	ldr	r0, [sp, #52]	; 0x34
   30308:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   3030a:	4664      	mov	r4, ip
   3030c:	e6fa      	b.n	30104 <ticker_worker+0x8c>
	uint8_t slot_reserved = 0;
   3030e:	9502      	str	r5, [sp, #8]
   30310:	e6d3      	b.n	300ba <ticker_worker+0x42>
		if (ticker->timeout_func) {
   30312:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   30314:	3a01      	subs	r2, #1
   30316:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
   30318:	2d00      	cmp	r5, #0
   3031a:	f43f af15 	beq.w	30148 <ticker_worker+0xd0>
			ticks_drift = 0U;
   3031e:	4619      	mov	r1, r3
					   ticks_expired -
   30320:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   30322:	6a62      	ldr	r2, [r4, #36]	; 0x24
			uint8_t next_force = (ticker_next->force > ticker->force);
   30324:	f894 c003 	ldrb.w	ip, [r4, #3]
					   ticks_expired -
   30328:	ebaa 0003 	sub.w	r0, sl, r3
   3032c:	9b03      	ldr	r3, [sp, #12]
   3032e:	695b      	ldr	r3, [r3, #20]
   30330:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   30332:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   30336:	6923      	ldr	r3, [r4, #16]
   30338:	e74e      	b.n	301d8 <ticker_worker+0x160>
   3033a:	bf00      	nop

0003033c <ticker_job>:
	if (instance->worker_trigger) {
   3033c:	7fc3      	ldrb	r3, [r0, #31]
   3033e:	2b00      	cmp	r3, #0
   30340:	f040 847a 	bne.w	30c38 <ticker_job+0x8fc>
{
   30344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   30348:	7f84      	ldrb	r4, [r0, #30]
{
   3034a:	b08f      	sub	sp, #60	; 0x3c
   3034c:	4606      	mov	r6, r0
	if (instance->job_guard) {
   3034e:	2c00      	cmp	r4, #0
   30350:	f040 8089 	bne.w	30466 <ticker_job+0x12a>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   30354:	7a83      	ldrb	r3, [r0, #10]
   30356:	7ac2      	ldrb	r2, [r0, #11]
	instance->job_guard = 1U;
   30358:	2101      	movs	r1, #1
   3035a:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   3035c:	429a      	cmp	r2, r3
	ticks_previous = instance->ticks_current;
   3035e:	6941      	ldr	r1, [r0, #20]
   30360:	9108      	str	r1, [sp, #32]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   30362:	f000 846a 	beq.w	30c3a <ticker_job+0x8fe>
	uint8_t idx = *ticks_elapsed_index + 1;
   30366:	3301      	adds	r3, #1
   30368:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
   3036a:	2b02      	cmp	r3, #2
		idx = 0U;
   3036c:	bf08      	it	eq
   3036e:	4623      	moveq	r3, r4
		ticks_elapsed =
   30370:	eb00 0283 	add.w	r2, r0, r3, lsl #2
	*ticks_elapsed_index = idx;
   30374:	7283      	strb	r3, [r0, #10]
	ticker_id_old_head = instance->ticker_id_head;
   30376:	7f43      	ldrb	r3, [r0, #29]
		ticks_elapsed =
   30378:	68d2      	ldr	r2, [r2, #12]
	ticker_id_old_head = instance->ticker_id_head;
   3037a:	930a      	str	r3, [sp, #40]	; 0x28
		instance->ticks_current += ticks_elapsed;
   3037c:	9b08      	ldr	r3, [sp, #32]
	count_user = instance->count_user;
   3037e:	f890 9009 	ldrb.w	r9, [r0, #9]
	users = &instance->users[0];
   30382:	6845      	ldr	r5, [r0, #4]
		ticks_elapsed =
   30384:	9204      	str	r2, [sp, #16]
		instance->ticks_current += ticks_elapsed;
   30386:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   30388:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   3038c:	6143      	str	r3, [r0, #20]
	node = &instance->nodes[0];
   3038e:	6803      	ldr	r3, [r0, #0]
   30390:	9301      	str	r3, [sp, #4]
	while (count_user--) {
   30392:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   30396:	b2db      	uxtb	r3, r3
   30398:	f1b9 0f00 	cmp.w	r9, #0
   3039c:	f000 81e0 	beq.w	30760 <ticker_job+0x424>
		flag_elapsed = 1U;
   303a0:	2401      	movs	r4, #1
   303a2:	eb05 09c3 	add.w	r9, r5, r3, lsl #3
	pending = 0U;
   303a6:	2300      	movs	r3, #0
   303a8:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
   303aa:	23ff      	movs	r3, #255	; 0xff
   303ac:	9303      	str	r3, [sp, #12]
   303ae:	9507      	str	r5, [sp, #28]
   303b0:	46ca      	mov	sl, r9
   303b2:	940d      	str	r4, [sp, #52]	; 0x34
   303b4:	9602      	str	r6, [sp, #8]
		user_ops = &user->user_op[0];
   303b6:	f8da b004 	ldr.w	fp, [sl, #4]
		while (user->middle != user->last) {
   303ba:	f89a c003 	ldrb.w	ip, [sl, #3]
   303be:	f89a 7002 	ldrb.w	r7, [sl, #2]
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   303c2:	f04f 0900 	mov.w	r9, #0
		while (user->middle != user->last) {
   303c6:	4567      	cmp	r7, ip
   303c8:	d045      	beq.n	30456 <ticker_job+0x11a>
			if (middle == user->count_user_op) {
   303ca:	f89a 1000 	ldrb.w	r1, [sl]
			middle = user->middle + 1;
   303ce:	1c7b      	adds	r3, r7, #1
			user_op = &user_ops[user->middle];
   303d0:	b23a      	sxth	r2, r7
			middle = user->middle + 1;
   303d2:	b2db      	uxtb	r3, r3
				middle = 0U;
   303d4:	4299      	cmp	r1, r3
   303d6:	bf08      	it	eq
   303d8:	2300      	moveq	r3, #0
			user_op = &user_ops[user->middle];
   303da:	eb02 0142 	add.w	r1, r2, r2, lsl #1
   303de:	eb02 0881 	add.w	r8, r2, r1, lsl #2
			user->middle = middle;
   303e2:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   303e6:	f81b 6028 	ldrb.w	r6, [fp, r8, lsl #2]
			user_op = &user_ops[user->middle];
   303ea:	eb0b 0288 	add.w	r2, fp, r8, lsl #2
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   303ee:	2e04      	cmp	r6, #4
			ticker = &node[user_op->id];
   303f0:	7851      	ldrb	r1, [r2, #1]
			user_op = &user_ops[user->middle];
   303f2:	9200      	str	r2, [sp, #0]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   303f4:	d941      	bls.n	3047a <ticker_job+0x13e>
			ticker = &node[user_op->id];
   303f6:	9a01      	ldr	r2, [sp, #4]
   303f8:	eb01 0441 	add.w	r4, r1, r1, lsl #1
   303fc:	eb02 1404 	add.w	r4, r2, r4, lsl #4
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   30400:	2e08      	cmp	r6, #8
			state = (ticker->req - ticker->ack) & 0xff;
   30402:	7862      	ldrb	r2, [r4, #1]
   30404:	78a0      	ldrb	r0, [r4, #2]
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   30406:	d83a      	bhi.n	3047e <ticker_job+0x142>
			state = (ticker->req - ticker->ack) & 0xff;
   30408:	1a12      	subs	r2, r2, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   3040a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   3040e:	d036      	beq.n	3047e <ticker_job+0x142>
			    (state == 0U) ||
   30410:	2e05      	cmp	r6, #5
   30412:	d05d      	beq.n	304d0 <ticker_job+0x194>
			if (state == 1U) {
   30414:	2a01      	cmp	r2, #1
   30416:	f040 8125 	bne.w	30664 <ticker_job+0x328>
		if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
   3041a:	2e06      	cmp	r6, #6
   3041c:	d03f      	beq.n	3049e <ticker_job+0x162>
			ticker->ticks_to_expire = ticker_dequeue(instance,
   3041e:	9d02      	ldr	r5, [sp, #8]
   30420:	4628      	mov	r0, r5
   30422:	f7ff fccf 	bl	2fdc4 <ticker_dequeue>
			ticker->req = ticker->ack;
   30426:	78a3      	ldrb	r3, [r4, #2]
			ticker->ticks_to_expire = ticker_dequeue(instance,
   30428:	60a0      	str	r0, [r4, #8]
			ticker->req = ticker->ack;
   3042a:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   3042c:	7f2b      	ldrb	r3, [r5, #28]
   3042e:	428b      	cmp	r3, r1
   30430:	f000 80ff 	beq.w	30632 <ticker_job+0x2f6>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   30434:	f80b 9028 	strb.w	r9, [fp, r8, lsl #2]
	user_op->status = status;
   30438:	9b00      	ldr	r3, [sp, #0]
   3043a:	f8c3 9028 	str.w	r9, [r3, #40]	; 0x28
	if (user_op->fp_op_func) {
   3043e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   30440:	b11b      	cbz	r3, 3044a <ticker_job+0x10e>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   30442:	9a00      	ldr	r2, [sp, #0]
   30444:	2000      	movs	r0, #0
   30446:	6b11      	ldr	r1, [r2, #48]	; 0x30
   30448:	4798      	blx	r3
		while (user->middle != user->last) {
   3044a:	f89a c003 	ldrb.w	ip, [sl, #3]
   3044e:	f89a 7002 	ldrb.w	r7, [sl, #2]
   30452:	4567      	cmp	r7, ip
   30454:	d1b9      	bne.n	303ca <ticker_job+0x8e>
	while (count_user--) {
   30456:	9a07      	ldr	r2, [sp, #28]
   30458:	4552      	cmp	r2, sl
   3045a:	f1aa 0308 	sub.w	r3, sl, #8
   3045e:	f000 8111 	beq.w	30684 <ticker_job+0x348>
   30462:	469a      	mov	sl, r3
   30464:	e7a7      	b.n	303b6 <ticker_job+0x7a>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
   30466:	6a44      	ldr	r4, [r0, #36]	; 0x24
   30468:	2104      	movs	r1, #4
   3046a:	4603      	mov	r3, r0
   3046c:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   3046e:	2004      	movs	r0, #4
   30470:	46a4      	mov	ip, r4
}
   30472:	b00f      	add	sp, #60	; 0x3c
   30474:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   30478:	4760      	bx	ip
   3047a:	461f      	mov	r7, r3
   3047c:	e7a3      	b.n	303c6 <ticker_job+0x8a>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   3047e:	f80b 9028 	strb.w	r9, [fp, r8, lsl #2]
	user_op->status = status;
   30482:	9900      	ldr	r1, [sp, #0]
   30484:	2201      	movs	r2, #1
   30486:	628a      	str	r2, [r1, #40]	; 0x28
	if (user_op->fp_op_func) {
   30488:	6aca      	ldr	r2, [r1, #44]	; 0x2c
   3048a:	2a00      	cmp	r2, #0
   3048c:	d0f5      	beq.n	3047a <ticker_job+0x13e>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   3048e:	6b09      	ldr	r1, [r1, #48]	; 0x30
   30490:	2001      	movs	r0, #1
   30492:	4790      	blx	r2
		while (user->middle != user->last) {
   30494:	f89a c003 	ldrb.w	ip, [sl, #3]
   30498:	f89a 7002 	ldrb.w	r7, [sl, #2]
   3049c:	e793      	b.n	303c6 <ticker_job+0x8a>
		if (instance->ticker_id_slot_previous == user_op->id) {
   3049e:	9b02      	ldr	r3, [sp, #8]
   304a0:	7f1b      	ldrb	r3, [r3, #28]
   304a2:	428b      	cmp	r3, r1
   304a4:	d1c6      	bne.n	30434 <ticker_job+0xf8>
			instance->ticker_id_slot_previous = TICKER_NULL;
   304a6:	9a02      	ldr	r2, [sp, #8]
   304a8:	23ff      	movs	r3, #255	; 0xff
   304aa:	7713      	strb	r3, [r2, #28]
				ticks_at_yield =
   304ac:	9b00      	ldr	r3, [sp, #0]
   304ae:	6858      	ldr	r0, [r3, #4]
			ticks_current = instance->ticks_current;
   304b0:	9b02      	ldr	r3, [sp, #8]
   304b2:	695a      	ldr	r2, [r3, #20]
			if (!((ticks_at_yield - ticks_current) &
   304b4:	1a83      	subs	r3, r0, r2
   304b6:	021d      	lsls	r5, r3, #8
   304b8:	f100 80c4 	bmi.w	30644 <ticker_job+0x308>
				ticks_used = ticks_elapsed +
   304bc:	9a04      	ldr	r2, [sp, #16]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   304be:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   304c2:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
   304c4:	9902      	ldr	r1, [sp, #8]
   304c6:	698a      	ldr	r2, [r1, #24]
   304c8:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
   304ca:	bf88      	it	hi
   304cc:	618b      	strhi	r3, [r1, #24]
   304ce:	e7b1      	b.n	30434 <ticker_job+0xf8>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   304d0:	9d00      	ldr	r5, [sp, #0]
   304d2:	6868      	ldr	r0, [r5, #4]
   304d4:	b948      	cbnz	r0, 304ea <ticker_job+0x1ae>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   304d6:	68a8      	ldr	r0, [r5, #8]
   304d8:	b938      	cbnz	r0, 304ea <ticker_job+0x1ae>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   304da:	68e8      	ldr	r0, [r5, #12]
   304dc:	b928      	cbnz	r0, 304ea <ticker_job+0x1ae>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   304de:	6928      	ldr	r0, [r5, #16]
   304e0:	b918      	cbnz	r0, 304ea <ticker_job+0x1ae>
			     (user_op->params.update.lazy == 0U) &&
   304e2:	6968      	ldr	r0, [r5, #20]
   304e4:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
   304e8:	d0c9      	beq.n	3047e <ticker_job+0x142>
			if (state == 1U) {
   304ea:	2a01      	cmp	r2, #1
   304ec:	f040 80ba 	bne.w	30664 <ticker_job+0x328>
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   304f0:	9d02      	ldr	r5, [sp, #8]
   304f2:	4628      	mov	r0, r5
   304f4:	f7ff fc66 	bl	2fdc4 <ticker_dequeue>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   304f8:	696d      	ldr	r5, [r5, #20]
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   304fa:	60a0      	str	r0, [r4, #8]
   304fc:	4606      	mov	r6, r0
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   304fe:	9505      	str	r5, [sp, #20]
	ticks_now = cntr_cnt_get();
   30500:	f00b fe88 	bl	3c214 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   30504:	9b04      	ldr	r3, [sp, #16]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   30506:	1b42      	subs	r2, r0, r5
   30508:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   3050c:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_elapsed) {
   3050e:	4296      	cmp	r6, r2
	ticks_now = cntr_cnt_get();
   30510:	4601      	mov	r1, r0
	if (ticks_to_expire > ticks_elapsed) {
   30512:	f240 80a0 	bls.w	30656 <ticker_job+0x31a>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   30516:	6963      	ldr	r3, [r4, #20]
   30518:	9306      	str	r3, [sp, #24]
		ticks_to_expire -= ticks_elapsed;
   3051a:	1ab0      	subs	r0, r6, r2
	if ((ticker->ticks_periodic != 0U) &&
   3051c:	6867      	ldr	r7, [r4, #4]
   3051e:	2f00      	cmp	r7, #0
   30520:	d057      	beq.n	305d2 <ticker_job+0x296>
	    (user_op->params.update.lazy != 0U)) {
   30522:	9a00      	ldr	r2, [sp, #0]
   30524:	8a96      	ldrh	r6, [r2, #20]
	if ((ticker->ticks_periodic != 0U) &&
   30526:	2e00      	cmp	r6, #0
   30528:	d053      	beq.n	305d2 <ticker_job+0x296>
		user_op->params.update.lazy--;
   3052a:	1e73      	subs	r3, r6, #1
   3052c:	fa1f fe83 	uxth.w	lr, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   30530:	4287      	cmp	r7, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   30532:	8be3      	ldrh	r3, [r4, #30]
		user_op->params.update.lazy--;
   30534:	f8a2 e014 	strh.w	lr, [r2, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   30538:	d221      	bcs.n	3057e <ticker_job+0x242>
   3053a:	e9cd b10b 	strd	fp, r1, [sp, #44]	; 0x2c
			ticks_to_expire += ticker->ticks_periodic +
   3053e:	f107 0c01 	add.w	ip, r7, #1
   30542:	e018      	b.n	30576 <ticker_job+0x23a>
	if ((ticker->remainder_current >= BIT(31)) ||
   30544:	6a62      	ldr	r2, [r4, #36]	; 0x24
   30546:	f8df b204 	ldr.w	fp, [pc, #516]	; 3074c <ticker_job+0x410>
   3054a:	4981      	ldr	r1, [pc, #516]	; (30750 <ticker_job+0x414>)
   3054c:	4493      	add	fp, r2
   3054e:	458b      	cmp	fp, r1
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   30550:	bf84      	itt	hi
   30552:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
   30556:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
			ticks_to_expire += ticker->ticks_periodic +
   3055a:	4665      	mov	r5, ip
	ticker->remainder_current -= ticker->remainder_periodic;
   3055c:	6a21      	ldr	r1, [r4, #32]
   3055e:	bf94      	ite	ls
   30560:	463d      	movls	r5, r7
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   30562:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
			ticker->lazy_current--;
   30566:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
   30568:	1b40      	subs	r0, r0, r5
	ticker->remainder_current -= ticker->remainder_periodic;
   3056a:	1a52      	subs	r2, r2, r1
			ticker->lazy_current--;
   3056c:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   3056e:	4287      	cmp	r7, r0
	ticker->remainder_current -= ticker->remainder_periodic;
   30570:	6262      	str	r2, [r4, #36]	; 0x24
			ticker->lazy_current--;
   30572:	83e3      	strh	r3, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   30574:	d201      	bcs.n	3057a <ticker_job+0x23e>
   30576:	459e      	cmp	lr, r3
   30578:	d3e4      	bcc.n	30544 <ticker_job+0x208>
   3057a:	e9dd b10b 	ldrd	fp, r1, [sp, #44]	; 0x2c
		while (ticker->lazy_current < user_op->params.update.lazy) {
   3057e:	459e      	cmp	lr, r3
   30580:	d925      	bls.n	305ce <ticker_job+0x292>
   30582:	3301      	adds	r3, #1
	ticker->remainder_current += ticker->remainder_periodic;
   30584:	e9d4 c208 	ldrd	ip, r2, [r4, #32]
			ticks_to_expire += ticker->ticks_periodic +
   30588:	e9cd b10b 	strd	fp, r1, [sp, #44]	; 0x2c
   3058c:	b29b      	uxth	r3, r3
   3058e:	1c7d      	adds	r5, r7, #1
   30590:	e005      	b.n	3059e <ticker_job+0x262>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   30592:	3301      	adds	r3, #1
   30594:	b29b      	uxth	r3, r3
	if ((ticker->remainder_current < BIT(31)) &&
   30596:	46bb      	mov	fp, r7
		while (ticker->lazy_current < user_op->params.update.lazy) {
   30598:	429e      	cmp	r6, r3
			ticks_to_expire += ticker->ticks_periodic +
   3059a:	4458      	add	r0, fp
		while (ticker->lazy_current < user_op->params.update.lazy) {
   3059c:	d012      	beq.n	305c4 <ticker_job+0x288>
	if ((ticker->remainder_current < BIT(31)) &&
   3059e:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 3074c <ticker_job+0x410>
   305a2:	496b      	ldr	r1, [pc, #428]	; (30750 <ticker_job+0x414>)
	ticker->remainder_current += ticker->remainder_periodic;
   305a4:	4462      	add	r2, ip
	if ((ticker->remainder_current < BIT(31)) &&
   305a6:	4493      	add	fp, r2
   305a8:	458b      	cmp	fp, r1
   305aa:	d8f2      	bhi.n	30592 <ticker_job+0x256>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   305ac:	3301      	adds	r3, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   305ae:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
		while (ticker->lazy_current < user_op->params.update.lazy) {
   305b2:	b29b      	uxth	r3, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   305b4:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
			ticks_to_expire += ticker->ticks_periodic +
   305b8:	46ab      	mov	fp, r5
		while (ticker->lazy_current < user_op->params.update.lazy) {
   305ba:	429e      	cmp	r6, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   305bc:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
			ticks_to_expire += ticker->ticks_periodic +
   305c0:	4458      	add	r0, fp
		while (ticker->lazy_current < user_op->params.update.lazy) {
   305c2:	d1ec      	bne.n	3059e <ticker_job+0x262>
   305c4:	e9dd b10b 	ldrd	fp, r1, [sp, #44]	; 0x2c
   305c8:	6262      	str	r2, [r4, #36]	; 0x24
   305ca:	f8a4 e01e 	strh.w	lr, [r4, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
   305ce:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
   305d2:	9a00      	ldr	r2, [sp, #0]
	struct ticker_ext *ext_data = ticker->ext_data;
   305d4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
				  user_op->params.update.ticks_drift_plus;
   305d6:	6853      	ldr	r3, [r2, #4]
	ticker->ticks_to_expire = ticks_to_expire +
   305d8:	4418      	add	r0, r3
   305da:	60a0      	str	r0, [r4, #8]
				user_op->params.update.ticks_drift_minus;
   305dc:	6890      	ldr	r0, [r2, #8]
	ticker->ticks_to_expire_minus +=
   305de:	9a06      	ldr	r2, [sp, #24]
   305e0:	4402      	add	r2, r0
   305e2:	6162      	str	r2, [r4, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   305e4:	b11e      	cbz	r6, 305ee <ticker_job+0x2b2>
   305e6:	6832      	ldr	r2, [r6, #0]
   305e8:	b10a      	cbz	r2, 305ee <ticker_job+0x2b2>
			user_op->params.update.ticks_drift_plus -
   305ea:	1a1b      	subs	r3, r3, r0
		ext_data->ticks_drift =
   305ec:	6073      	str	r3, [r6, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   305ee:	460a      	mov	r2, r1
   305f0:	4620      	mov	r0, r4
   305f2:	9905      	ldr	r1, [sp, #20]
   305f4:	f7ff fc22 	bl	2fe3c <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   305f8:	9900      	ldr	r1, [sp, #0]
   305fa:	69a3      	ldr	r3, [r4, #24]
   305fc:	68ca      	ldr	r2, [r1, #12]
   305fe:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   30600:	690a      	ldr	r2, [r1, #16]
   30602:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   30604:	bf8c      	ite	hi
   30606:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
   30608:	2300      	movls	r3, #0
   3060a:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0U) {
   3060c:	9b00      	ldr	r3, [sp, #0]
   3060e:	7d9b      	ldrb	r3, [r3, #22]
   30610:	b103      	cbz	r3, 30614 <ticker_job+0x2d8>
		ticker->force = user_op->params.update.force;
   30612:	70e3      	strb	r3, [r4, #3]
	if (user_op->params.update.must_expire) {
   30614:	9b00      	ldr	r3, [sp, #0]
   30616:	7ddb      	ldrb	r3, [r3, #23]
   30618:	b113      	cbz	r3, 30620 <ticker_job+0x2e4>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
   3061a:	3b01      	subs	r3, #1
   3061c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->next = *insert_head;
   30620:	9b03      	ldr	r3, [sp, #12]
   30622:	7023      	strb	r3, [r4, #0]
	*insert_head = user_op->id;
   30624:	9a00      	ldr	r2, [sp, #0]
		ticker->req++;
   30626:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
   30628:	7852      	ldrb	r2, [r2, #1]
   3062a:	9203      	str	r2, [sp, #12]
		ticker->req++;
   3062c:	3301      	adds	r3, #1
   3062e:	7063      	strb	r3, [r4, #1]
   30630:	e700      	b.n	30434 <ticker_job+0xf8>
			instance->ticker_id_slot_previous = TICKER_NULL;
   30632:	9a02      	ldr	r2, [sp, #8]
   30634:	23ff      	movs	r3, #255	; 0xff
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
   30636:	2e08      	cmp	r6, #8
			instance->ticker_id_slot_previous = TICKER_NULL;
   30638:	7713      	strb	r3, [r2, #28]
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
   3063a:	f43f af37 	beq.w	304ac <ticker_job+0x170>
				ticks_at_yield = cntr_cnt_get();
   3063e:	f00b fde9 	bl	3c214 <cntr_cnt_get>
   30642:	e735      	b.n	304b0 <ticker_job+0x174>
				if (ticks_elapsed > ticks_used) {
   30644:	9b04      	ldr	r3, [sp, #16]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   30646:	1a12      	subs	r2, r2, r0
   30648:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   3064c:	429a      	cmp	r2, r3
					ticks_used = ticks_elapsed -
   3064e:	bf34      	ite	cc
   30650:	1a9b      	subcc	r3, r3, r2
					ticks_used = 0;
   30652:	2300      	movcs	r3, #0
   30654:	e736      	b.n	304c4 <ticker_job+0x188>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   30656:	6963      	ldr	r3, [r4, #20]
   30658:	1b9b      	subs	r3, r3, r6
   3065a:	4413      	add	r3, r2
   3065c:	9306      	str	r3, [sp, #24]
   3065e:	6163      	str	r3, [r4, #20]
		ticks_to_expire = 0U;
   30660:	2000      	movs	r0, #0
   30662:	e75b      	b.n	3051c <ticker_job+0x1e0>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   30664:	9b02      	ldr	r3, [sp, #8]
   30666:	2104      	movs	r1, #4
   30668:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   3066a:	2201      	movs	r2, #1
   3066c:	4608      	mov	r0, r1
   3066e:	47a0      	blx	r4
	while (count_user--) {
   30670:	9a07      	ldr	r2, [sp, #28]
				user->middle = prev;
   30672:	f88a 7002 	strb.w	r7, [sl, #2]
				pending = 1U;
   30676:	2301      	movs	r3, #1
	while (count_user--) {
   30678:	4552      	cmp	r2, sl
				pending = 1U;
   3067a:	9309      	str	r3, [sp, #36]	; 0x24
	while (count_user--) {
   3067c:	f1aa 0308 	sub.w	r3, sl, #8
   30680:	f47f aeef 	bne.w	30462 <ticker_job+0x126>
	if (instance->ticker_id_head != ticker_id_old_head) {
   30684:	9e02      	ldr	r6, [sp, #8]
   30686:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   30688:	7f73      	ldrb	r3, [r6, #29]
   3068a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   3068c:	ebb3 0902 	subs.w	r9, r3, r2
   30690:	bf18      	it	ne
   30692:	f04f 0901 	movne.w	r9, #1
	if (flag_elapsed) {
   30696:	2c00      	cmp	r4, #0
   30698:	d166      	bne.n	30768 <ticker_job+0x42c>
		ticker_job_list_insert(instance, insert_head);
   3069a:	9903      	ldr	r1, [sp, #12]
   3069c:	4630      	mov	r0, r6
   3069e:	f7ff fbf1 	bl	2fe84 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
   306a2:	7f73      	ldrb	r3, [r6, #29]
   306a4:	9300      	str	r3, [sp, #0]
   306a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   306a8:	9a00      	ldr	r2, [sp, #0]
   306aa:	4293      	cmp	r3, r2
   306ac:	f000 8305 	beq.w	30cba <ticker_job+0x97e>
	if (!pending) {
   306b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   306b2:	2b00      	cmp	r3, #0
   306b4:	f000 8232 	beq.w	30b1c <ticker_job+0x7e0>
	if (instance->ticker_id_head == TICKER_NULL) {
   306b8:	7f73      	ldrb	r3, [r6, #29]
   306ba:	9300      	str	r3, [sp, #0]
   306bc:	9b00      	ldr	r3, [sp, #0]
   306be:	2bff      	cmp	r3, #255	; 0xff
   306c0:	f000 81d6 	beq.w	30a70 <ticker_job+0x734>
	if (ticker_id_old_head == TICKER_NULL) {
   306c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   306c6:	2bff      	cmp	r3, #255	; 0xff
   306c8:	f000 8330 	beq.w	30d2c <ticker_job+0x9f0>
	ticker = &instance->nodes[instance->ticker_id_head];
   306cc:	9a00      	ldr	r2, [sp, #0]
	ticks_to_expire = ticker->ticks_to_expire;
   306ce:	6833      	ldr	r3, [r6, #0]
		LL_ASSERT(i);
   306d0:	f8df 9080 	ldr.w	r9, [pc, #128]	; 30754 <ticker_job+0x418>
   306d4:	f8df 8080 	ldr.w	r8, [pc, #128]	; 30758 <ticker_job+0x41c>
   306d8:	4f20      	ldr	r7, [pc, #128]	; (3075c <ticker_job+0x420>)
	ticker = &instance->nodes[instance->ticker_id_head];
   306da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   306de:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	i = 10U;
   306e2:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
   306e4:	f8d3 b008 	ldr.w	fp, [r3, #8]
		ctr = cntr_cnt_get();
   306e8:	f00b fd94 	bl	3c214 <cntr_cnt_get>
		cc = instance->ticks_current;
   306ec:	6974      	ldr	r4, [r6, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   306ee:	1b03      	subs	r3, r0, r4
   306f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   306f4:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   306f6:	455b      	cmp	r3, fp
   306f8:	bf2c      	ite	cs
   306fa:	18e4      	addcs	r4, r4, r3
   306fc:	445c      	addcc	r4, fp
		cc &= HAL_TICKER_CNTR_MASK;
   306fe:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
   30702:	6ab3      	ldr	r3, [r6, #40]	; 0x28
		ctr = cntr_cnt_get();
   30704:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
   30706:	4620      	mov	r0, r4
   30708:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   3070a:	f00b fd83 	bl	3c214 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   3070e:	eba0 030a 	sub.w	r3, r0, sl
   30712:	eba4 040a 	sub.w	r4, r4, sl
   30716:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   3071a:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   3071c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  HAL_TICKER_CNTR_CMP_OFFSET_MIN) >
   30720:	42a3      	cmp	r3, r4
		i--;
   30722:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  HAL_TICKER_CNTR_CMP_OFFSET_MIN) >
   30726:	f240 81aa 	bls.w	30a7e <ticker_job+0x742>
		LL_ASSERT(i);
   3072a:	2d00      	cmp	r5, #0
   3072c:	d1dc      	bne.n	306e8 <ticker_job+0x3ac>
   3072e:	f640 133e 	movw	r3, #2366	; 0x93e
   30732:	464a      	mov	r2, r9
   30734:	4641      	mov	r1, r8
   30736:	4638      	mov	r0, r7
   30738:	f012 f8c4 	bl	428c4 <printk>
   3073c:	4040      	eors	r0, r0
   3073e:	f380 8811 	msr	BASEPRI, r0
   30742:	f04f 0003 	mov.w	r0, #3
   30746:	df02      	svc	2
   30748:	e7ce      	b.n	306e8 <ticker_job+0x3ac>
   3074a:	bf00      	nop
   3074c:	ff172b5a 	.word	0xff172b5a
   30750:	7f172b59 	.word	0x7f172b59
   30754:	00049c28 	.word	0x00049c28
   30758:	00049cd4 	.word	0x00049cd4
   3075c:	00049c68 	.word	0x00049c68
	insert_head = TICKER_NULL;
   30760:	23ff      	movs	r3, #255	; 0xff
	pending = 0U;
   30762:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
   30766:	9303      	str	r3, [sp, #12]
	ticks_now = cntr_cnt_get();
   30768:	f00b fd54 	bl	3c214 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   3076c:	9b08      	ldr	r3, [sp, #32]
	while (instance->ticker_id_head != TICKER_NULL) {
   3076e:	f896 b01d 	ldrb.w	fp, [r6, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   30772:	1ac3      	subs	r3, r0, r3
   30774:	f023 477f 	bic.w	r7, r3, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
   30778:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
	node = &instance->nodes[0];
   3077c:	6833      	ldr	r3, [r6, #0]
   3077e:	9300      	str	r3, [sp, #0]
	while (instance->ticker_id_head != TICKER_NULL) {
   30780:	d04c      	beq.n	3081c <ticker_job+0x4e0>
   30782:	f8dd a010 	ldr.w	sl, [sp, #16]
			instance->ticks_slot_previous = 0U;
   30786:	f8cd 9014 	str.w	r9, [sp, #20]
   3078a:	463b      	mov	r3, r7
	ticks_expired = 0U;
   3078c:	f04f 0800 	mov.w	r8, #0
			instance->ticks_slot_previous = 0U;
   30790:	4657      	mov	r7, sl
   30792:	469a      	mov	sl, r3
		ticker = &node[id_expired];
   30794:	9b00      	ldr	r3, [sp, #0]
   30796:	eb0b 054b 	add.w	r5, fp, fp, lsl #1
   3079a:	eb03 1405 	add.w	r4, r3, r5, lsl #4
   3079e:	012d      	lsls	r5, r5, #4
		ticks_to_expire = ticker->ticks_to_expire;
   307a0:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   307a2:	42bb      	cmp	r3, r7
   307a4:	f200 8298 	bhi.w	30cd8 <ticker_job+0x99c>
		if (instance->ticks_slot_previous > ticks_to_expire) {
   307a8:	69b2      	ldr	r2, [r6, #24]
		skip_collision = (ticker->lazy_current != 0U);
   307aa:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
		instance->ticker_id_head = ticker->next;
   307ae:	f8dd 9000 	ldr.w	r9, [sp]
		if (instance->ticks_slot_previous > ticks_to_expire) {
   307b2:	4293      	cmp	r3, r2
			instance->ticks_slot_previous -= ticks_to_expire;
   307b4:	bf38      	it	cc
   307b6:	1ad2      	subcc	r2, r2, r3
		ticks_elapsed -= ticks_to_expire;
   307b8:	eba7 0703 	sub.w	r7, r7, r3
		ticks_expired += ticks_to_expire;
   307bc:	4498      	add	r8, r3
		ticks_latency -= ticks_to_expire;
   307be:	ebaa 0a03 	sub.w	sl, sl, r3
			instance->ticks_slot_previous = 0U;
   307c2:	bf22      	ittt	cs
   307c4:	2200      	movcs	r2, #0
			instance->ticker_id_slot_previous = TICKER_NULL;
   307c6:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
   307ca:	7733      	strbcs	r3, [r6, #28]
			instance->ticks_slot_previous = 0U;
   307cc:	61b2      	str	r2, [r6, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   307ce:	78a3      	ldrb	r3, [r4, #2]
   307d0:	7862      	ldrb	r2, [r4, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   307d2:	f8d4 c018 	ldr.w	ip, [r4, #24]
		if ((ticker->ticks_periodic != 0U) ||
   307d6:	6861      	ldr	r1, [r4, #4]
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   307d8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		instance->ticker_id_head = ticker->next;
   307da:	f819 9005 	ldrb.w	r9, [r9, r5]
		state = (ticker->req - ticker->ack) & 0xff;
   307de:	1ad2      	subs	r2, r2, r3
   307e0:	b2d2      	uxtb	r2, r2
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   307e2:	f1bc 0f00 	cmp.w	ip, #0
   307e6:	d002      	beq.n	307ee <ticker_job+0x4b2>
   307e8:	2a02      	cmp	r2, #2
   307ea:	f000 809d 	beq.w	30928 <ticker_job+0x5ec>
		ticker->ticks_to_expire = 0U;
   307ee:	f04f 0c00 	mov.w	ip, #0
   307f2:	f8c4 c008 	str.w	ip, [r4, #8]
		instance->ticker_id_head = ticker->next;
   307f6:	f886 901d 	strb.w	r9, [r6, #29]
		if ((ticker->ticks_periodic != 0U) ||
   307fa:	2900      	cmp	r1, #0
   307fc:	d14d      	bne.n	3089a <ticker_job+0x55e>
   307fe:	b110      	cbz	r0, 30806 <ticker_job+0x4ca>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   30800:	7a01      	ldrb	r1, [r0, #8]
   30802:	2901      	cmp	r1, #1
   30804:	d04d      	beq.n	308a2 <ticker_job+0x566>
			if (state && ((state == 1U) || skip_collision) &&
   30806:	2a00      	cmp	r2, #0
   30808:	f040 80af 	bne.w	3096a <ticker_job+0x62e>
			ticker->req = ticker->ack;
   3080c:	7063      	strb	r3, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   3080e:	f896 b01d 	ldrb.w	fp, [r6, #29]
   30812:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   30816:	d1bd      	bne.n	30794 <ticker_job+0x458>
   30818:	f8dd 9014 	ldr.w	r9, [sp, #20]
			flag_compare_update = 1U;
   3081c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		ticker_job_list_insert(instance, insert_head);
   3081e:	9903      	ldr	r1, [sp, #12]
   30820:	4630      	mov	r0, r6
			flag_compare_update = 1U;
   30822:	459b      	cmp	fp, r3
   30824:	bf18      	it	ne
   30826:	f04f 0901 	movne.w	r9, #1
		ticker_job_list_insert(instance, insert_head);
   3082a:	f7ff fb2b 	bl	2fe84 <ticker_job_list_insert>
		ticker_id_head = instance->ticker_id_head;
   3082e:	7f73      	ldrb	r3, [r6, #29]
   30830:	9300      	str	r3, [sp, #0]
		while (ticker_id_head != TICKER_NULL) {
   30832:	9a00      	ldr	r2, [sp, #0]
	nodes = &instance->nodes[0];
   30834:	f8d6 b000 	ldr.w	fp, [r6]
	while (rescheduling) {
   30838:	f8cd 9014 	str.w	r9, [sp, #20]
		while (ticker_id_head != TICKER_NULL) {
   3083c:	2aff      	cmp	r2, #255	; 0xff
	uint8_t  rescheduled = 0U;
   3083e:	f04f 0300 	mov.w	r3, #0
   30842:	46b0      	mov	r8, r6
		while (ticker_id_head != TICKER_NULL) {
   30844:	f000 8101 	beq.w	30a4a <ticker_job+0x70e>
   30848:	4646      	mov	r6, r8
		rescheduled  = 1U;
   3084a:	9800      	ldr	r0, [sp, #0]
			ticker = &nodes[ticker_id_head];
   3084c:	b202      	sxth	r2, r0
   3084e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   30852:	eb0b 1102 	add.w	r1, fp, r2, lsl #4
   30856:	0112      	lsls	r2, r2, #4
			ext_data = ticker->ext_data;
   30858:	6a8d      	ldr	r5, [r1, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   3085a:	b11d      	cbz	r5, 30864 <ticker_job+0x528>
   3085c:	7a2c      	ldrb	r4, [r5, #8]
   3085e:	2c01      	cmp	r4, #1
   30860:	f000 8092 	beq.w	30988 <ticker_job+0x64c>
			ticker_id_head = ticker->next;
   30864:	f81b 0002 	ldrb.w	r0, [fp, r2]
		while (ticker_id_head != TICKER_NULL) {
   30868:	28ff      	cmp	r0, #255	; 0xff
   3086a:	d1ef      	bne.n	3084c <ticker_job+0x510>
	return rescheduled;
   3086c:	f8dd 9014 	ldr.w	r9, [sp, #20]
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   30870:	2b00      	cmp	r3, #0
   30872:	f43f af18 	beq.w	306a6 <ticker_job+0x36a>
	if (instance->ticker_id_head != ticker_id_old_head) {
   30876:	9a00      	ldr	r2, [sp, #0]
   30878:	990a      	ldr	r1, [sp, #40]	; 0x28
   3087a:	428a      	cmp	r2, r1
   3087c:	f47f af18 	bne.w	306b0 <ticker_job+0x374>
	if (!pending) {
   30880:	9a09      	ldr	r2, [sp, #36]	; 0x24
   30882:	2a00      	cmp	r2, #0
   30884:	f47f af22 	bne.w	306cc <ticker_job+0x390>
	count_user = instance->count_user;
   30888:	7a72      	ldrb	r2, [r6, #9]
	users = &instance->users[0];
   3088a:	6874      	ldr	r4, [r6, #4]
	while (count_user--) {
   3088c:	1e57      	subs	r7, r2, #1
   3088e:	b2ff      	uxtb	r7, r7
   30890:	2a00      	cmp	r2, #0
   30892:	f43f af1b 	beq.w	306cc <ticker_job+0x390>
			flag_compare_update = 1U;
   30896:	4699      	mov	r9, r3
   30898:	e149      	b.n	30b2e <ticker_job+0x7f2>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   3089a:	b1a0      	cbz	r0, 308c6 <ticker_job+0x58a>
   3089c:	7a02      	ldrb	r2, [r0, #8]
   3089e:	2a01      	cmp	r2, #1
   308a0:	d111      	bne.n	308c6 <ticker_job+0x58a>
				ticker->req = ticker->ack;
   308a2:	7063      	strb	r3, [r4, #1]
				ticker->ticks_to_expire = ticks_elapsed;
   308a4:	60a7      	str	r7, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   308a6:	9b08      	ldr	r3, [sp, #32]
   308a8:	6971      	ldr	r1, [r6, #20]
   308aa:	eb03 0208 	add.w	r2, r3, r8
   308ae:	4620      	mov	r0, r4
   308b0:	f7ff fac4 	bl	2fe3c <ticks_to_expire_prep>
			ticker->next = *insert_head;
   308b4:	9a00      	ldr	r2, [sp, #0]
   308b6:	9b03      	ldr	r3, [sp, #12]
   308b8:	5553      	strb	r3, [r2, r5]
			ticker->req++;
   308ba:	7863      	ldrb	r3, [r4, #1]
   308bc:	f8cd b00c 	str.w	fp, [sp, #12]
   308c0:	3301      	adds	r3, #1
   308c2:	b2db      	uxtb	r3, r3
   308c4:	e7a2      	b.n	3080c <ticker_job+0x4d0>
				if (!ticker->lazy_current) {
   308c6:	f1be 0f00 	cmp.w	lr, #0
   308ca:	d14b      	bne.n	30964 <ticker_job+0x628>
					lazy_periodic = ticker->lazy_periodic;
   308cc:	f8b4 e01c 	ldrh.w	lr, [r4, #28]
				while (count--) {
   308d0:	4670      	mov	r0, lr
	ticker->remainder_current += ticker->remainder_periodic;
   308d2:	e9d4 c308 	ldrd	ip, r3, [r4, #32]
   308d6:	e9cd b401 	strd	fp, r4, [sp, #4]
				ticks_to_expire = 0U;
   308da:	2200      	movs	r2, #0
   308dc:	f101 0901 	add.w	r9, r1, #1
   308e0:	e004      	b.n	308ec <ticker_job+0x5b0>
				while (count--) {
   308e2:	3801      	subs	r0, #1
	if ((ticker->remainder_current < BIT(31)) &&
   308e4:	468b      	mov	fp, r1
				while (count--) {
   308e6:	1c44      	adds	r4, r0, #1
					ticks_to_expire +=
   308e8:	445a      	add	r2, fp
				while (count--) {
   308ea:	d011      	beq.n	30910 <ticker_job+0x5d4>
	if ((ticker->remainder_current < BIT(31)) &&
   308ec:	f8df b2b8 	ldr.w	fp, [pc, #696]	; 30ba8 <ticker_job+0x86c>
   308f0:	4cae      	ldr	r4, [pc, #696]	; (30bac <ticker_job+0x870>)
	ticker->remainder_current += ticker->remainder_periodic;
   308f2:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   308f4:	449b      	add	fp, r3
   308f6:	45a3      	cmp	fp, r4
   308f8:	d8f3      	bhi.n	308e2 <ticker_job+0x5a6>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   308fa:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
   308fe:	3801      	subs	r0, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   30900:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
   30904:	46cb      	mov	fp, r9
				while (count--) {
   30906:	1c44      	adds	r4, r0, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   30908:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
					ticks_to_expire +=
   3090c:	445a      	add	r2, fp
				while (count--) {
   3090e:	d1ed      	bne.n	308ec <ticker_job+0x5b0>
   30910:	e9dd b401 	ldrd	fp, r4, [sp, #4]
				} else if (!ticker->must_expire) {
   30914:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
   30918:	6263      	str	r3, [r4, #36]	; 0x24
   3091a:	2800      	cmp	r0, #0
   3091c:	f000 819b 	beq.w	30c56 <ticker_job+0x91a>
				ticker->ticks_to_expire = ticks_to_expire;
   30920:	60a2      	str	r2, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
   30922:	f8a4 e01e 	strh.w	lr, [r4, #30]
   30926:	e7be      	b.n	308a6 <ticker_job+0x56a>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   30928:	f1be 0f00 	cmp.w	lr, #0
   3092c:	d10f      	bne.n	3094e <ticker_job+0x612>
   3092e:	b118      	cbz	r0, 30938 <ticker_job+0x5fc>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   30930:	7a02      	ldrb	r2, [r0, #8]
   30932:	2a01      	cmp	r2, #1
   30934:	f000 81f5 	beq.w	30d22 <ticker_job+0x9e6>
			instance->ticks_slot_previous = ticker->ticks_slot;
   30938:	f8c6 c018 	str.w	ip, [r6, #24]
			instance->ticker_id_slot_previous = id_expired;
   3093c:	f886 b01c 	strb.w	fp, [r6, #28]
		ticker->ticks_to_expire = 0U;
   30940:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
   30944:	f886 901d 	strb.w	r9, [r6, #29]
		if ((ticker->ticks_periodic != 0U) ||
   30948:	2900      	cmp	r1, #0
   3094a:	d1bf      	bne.n	308cc <ticker_job+0x590>
   3094c:	e75e      	b.n	3080c <ticker_job+0x4d0>
		ticker->ticks_to_expire = 0U;
   3094e:	2200      	movs	r2, #0
   30950:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
   30952:	f886 901d 	strb.w	r9, [r6, #29]
		if ((ticker->ticks_periodic != 0U) ||
   30956:	2900      	cmp	r1, #0
   30958:	f000 81c3 	beq.w	30ce2 <ticker_job+0x9a6>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   3095c:	b110      	cbz	r0, 30964 <ticker_job+0x628>
   3095e:	7a02      	ldrb	r2, [r0, #8]
   30960:	2a01      	cmp	r2, #1
   30962:	d09e      	beq.n	308a2 <ticker_job+0x566>
					ticker->req = ticker->ack;
   30964:	7063      	strb	r3, [r4, #1]
				while (count--) {
   30966:	2000      	movs	r0, #0
   30968:	e7b3      	b.n	308d2 <ticker_job+0x596>
			if (state && ((state == 1U) || skip_collision) &&
   3096a:	2a01      	cmp	r2, #1
   3096c:	d003      	beq.n	30976 <ticker_job+0x63a>
   3096e:	f1be 0f00 	cmp.w	lr, #0
   30972:	f43f af4b 	beq.w	3080c <ticker_job+0x4d0>
			    ticker->fp_op_func) {
   30976:	6a22      	ldr	r2, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
   30978:	2a00      	cmp	r2, #0
   3097a:	f43f af47 	beq.w	3080c <ticker_job+0x4d0>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   3097e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   30980:	2001      	movs	r0, #1
   30982:	4790      	blx	r2
			ticker->req = ticker->ack;
   30984:	78a3      	ldrb	r3, [r4, #2]
   30986:	e741      	b.n	3080c <ticker_job+0x4d0>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   30988:	7f33      	ldrb	r3, [r6, #28]
   3098a:	2bff      	cmp	r3, #255	; 0xff
   3098c:	4691      	mov	r9, r2
   3098e:	f000 8081 	beq.w	30a94 <ticker_job+0x758>
			instance->ticks_slot_previous > ticks_elapsed) {
   30992:	69b3      	ldr	r3, [r6, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   30994:	9a04      	ldr	r2, [sp, #16]
   30996:	4293      	cmp	r3, r2
   30998:	d97c      	bls.n	30a94 <ticker_job+0x758>
			window_start_ticks = instance->ticks_slot_previous -
   3099a:	eba3 0c02 	sub.w	ip, r3, r2
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   3099e:	686a      	ldr	r2, [r5, #4]
		ticker->ext_data->ticks_drift += ticks_to_expire -
   309a0:	688b      	ldr	r3, [r1, #8]
		ticker_id_iter = nodes[ticker_id_head].next;
   309a2:	f81b 4009 	ldrb.w	r4, [fp, r9]
		ticker->ext_data->ticks_drift += ticks_to_expire -
   309a6:	1ad3      	subs	r3, r2, r3
   309a8:	9301      	str	r3, [sp, #4]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   309aa:	682b      	ldr	r3, [r5, #0]
   309ac:	429a      	cmp	r2, r3
   309ae:	d374      	bcc.n	30a9a <ticker_job+0x75e>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   309b0:	9b01      	ldr	r3, [sp, #4]
   309b2:	606b      	str	r3, [r5, #4]
		while (ticker_id_iter != TICKER_NULL) {
   309b4:	2cff      	cmp	r4, #255	; 0xff
		ticker->ticks_to_expire = ticks_to_expire;
   309b6:	f04f 0300 	mov.w	r3, #0
   309ba:	608b      	str	r3, [r1, #8]
		while (ticker_id_iter != TICKER_NULL) {
   309bc:	d10d      	bne.n	309da <ticker_job+0x69e>
		ticker->lazy_current--;
   309be:	8bcb      	ldrh	r3, [r1, #30]
   309c0:	3b01      	subs	r3, #1
   309c2:	83cb      	strh	r3, [r1, #30]
		ext_data->reschedule_state =
   309c4:	f04f 0302 	mov.w	r3, #2
   309c8:	722b      	strb	r3, [r5, #8]
		rescheduled  = 1U;
   309ca:	2301      	movs	r3, #1
   309cc:	e73d      	b.n	3084a <ticker_job+0x50e>
   309ce:	e9dd 1502 	ldrd	r1, r5, [sp, #8]
		ticker->ext_data->ticks_drift += ticks_to_expire -
   309d2:	9a01      	ldr	r2, [sp, #4]
   309d4:	441a      	add	r2, r3
   309d6:	606a      	str	r2, [r5, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   309d8:	608b      	str	r3, [r1, #8]
		ticker_id_prev = TICKER_NULL;
   309da:	f04f 0cff 	mov.w	ip, #255	; 0xff
   309de:	46a0      	mov	r8, r4
   309e0:	e008      	b.n	309f4 <ticker_job+0x6b8>
				ticker->ticks_to_expire -=
   309e2:	1bdb      	subs	r3, r3, r7
   309e4:	608b      	str	r3, [r1, #8]
			ticker_id_iter = node->next;
   309e6:	f81b 2002 	ldrb.w	r2, [fp, r2]
		while (ticker_id_iter != TICKER_NULL) {
   309ea:	2aff      	cmp	r2, #255	; 0xff
   309ec:	46c4      	mov	ip, r8
   309ee:	f000 8093 	beq.w	30b18 <ticker_job+0x7dc>
			ticker_id_iter = node->next;
   309f2:	4690      	mov	r8, r2
			node = &nodes[ticker_id_iter];
   309f4:	fa0f f288 	sxth.w	r2, r8
   309f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   309fc:	eb0b 1e02 	add.w	lr, fp, r2, lsl #4
   30a00:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   30a02:	f8de 7008 	ldr.w	r7, [lr, #8]
   30a06:	429f      	cmp	r7, r3
   30a08:	d3eb      	bcc.n	309e2 <ticker_job+0x6a6>
				node->ticks_to_expire -=
   30a0a:	1afb      	subs	r3, r7, r3
   30a0c:	f8ce 3008 	str.w	r3, [lr, #8]
				break;
   30a10:	4667      	mov	r7, ip
		if (ticker_id_prev != TICKER_NULL) {
   30a12:	2fff      	cmp	r7, #255	; 0xff
   30a14:	d0d3      	beq.n	309be <ticker_job+0x682>
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   30a16:	46b0      	mov	r8, r6
   30a18:	b23e      	sxth	r6, r7
   30a1a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   30a1e:	0133      	lsls	r3, r6, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
   30a20:	f888 401d 	strb.w	r4, [r8, #29]
		ticker_id_iter = nodes[ticker_id_head].next;
   30a24:	9400      	str	r4, [sp, #0]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   30a26:	f81b 4003 	ldrb.w	r4, [fp, r3]
   30a2a:	f80b 4009 	strb.w	r4, [fp, r9]
			nodes[ticker_id_prev].next = ticker_id_head;
   30a2e:	f80b 0003 	strb.w	r0, [fp, r3]
		ticker->lazy_current--;
   30a32:	8bc8      	ldrh	r0, [r1, #30]
		ext_data->reschedule_state =
   30a34:	f04f 0202 	mov.w	r2, #2
		ticker->lazy_current--;
   30a38:	3801      	subs	r0, #1
   30a3a:	83c8      	strh	r0, [r1, #30]
		ext_data->reschedule_state =
   30a3c:	722a      	strb	r2, [r5, #8]
		while (ticker_id_head != TICKER_NULL) {
   30a3e:	9a00      	ldr	r2, [sp, #0]
   30a40:	2aff      	cmp	r2, #255	; 0xff
		rescheduled  = 1U;
   30a42:	f04f 0301 	mov.w	r3, #1
		while (ticker_id_head != TICKER_NULL) {
   30a46:	f47f aeff 	bne.w	30848 <ticker_job+0x50c>
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   30a4a:	f8dd 9014 	ldr.w	r9, [sp, #20]
   30a4e:	4646      	mov	r6, r8
   30a50:	2b00      	cmp	r3, #0
   30a52:	f43f ae28 	beq.w	306a6 <ticker_job+0x36a>
	if (instance->ticker_id_head != ticker_id_old_head) {
   30a56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   30a58:	2aff      	cmp	r2, #255	; 0xff
   30a5a:	f000 814e 	beq.w	30cfa <ticker_job+0x9be>
	if (!pending) {
   30a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   30a60:	2b00      	cmp	r3, #0
   30a62:	d05b      	beq.n	30b1c <ticker_job+0x7e0>
	if (instance->ticker_id_head == TICKER_NULL) {
   30a64:	f898 301d 	ldrb.w	r3, [r8, #29]
   30a68:	9300      	str	r3, [sp, #0]
   30a6a:	2bff      	cmp	r3, #255	; 0xff
   30a6c:	f47f ae2e 	bne.w	306cc <ticker_job+0x390>
		if (cntr_stop() == 0) {
   30a70:	f00b fbaa 	bl	3c1c8 <cntr_stop>
   30a74:	b918      	cbnz	r0, 30a7e <ticker_job+0x742>
			instance->ticks_slot_previous = 0U;
   30a76:	61b0      	str	r0, [r6, #24]
			instance->ticks_current = cntr_cnt_get();
   30a78:	f00b fbcc 	bl	3c214 <cntr_cnt_get>
   30a7c:	6170      	str	r0, [r6, #20]
	if (instance->worker_trigger) {
   30a7e:	7ff3      	ldrb	r3, [r6, #31]
	instance->job_guard = 0U;
   30a80:	2200      	movs	r2, #0
   30a82:	77b2      	strb	r2, [r6, #30]
	if (instance->worker_trigger) {
   30a84:	2b00      	cmp	r3, #0
   30a86:	f000 80d4 	beq.w	30c32 <ticker_job+0x8f6>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   30a8a:	6a74      	ldr	r4, [r6, #36]	; 0x24
   30a8c:	4633      	mov	r3, r6
   30a8e:	2201      	movs	r2, #1
   30a90:	2103      	movs	r1, #3
   30a92:	e4ec      	b.n	3046e <ticker_job+0x132>
		window_start_ticks = 0U;
   30a94:	f04f 0c00 	mov.w	ip, #0
   30a98:	e781      	b.n	3099e <ticker_job+0x662>
		while (ticker_id_iter != TICKER_NULL &&
   30a9a:	2cff      	cmp	r4, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
   30a9c:	eba3 0802 	sub.w	r8, r3, r2
		while (ticker_id_iter != TICKER_NULL &&
   30aa0:	f000 813a 	beq.w	30d18 <ticker_job+0x9dc>
		       ticks_start_offset + ticker->ticks_slot <=
   30aa4:	f8d1 e018 	ldr.w	lr, [r1, #24]
		while (ticker_id_iter != TICKER_NULL &&
   30aa8:	45f0      	cmp	r8, lr
   30aaa:	f0c0 8135 	bcc.w	30d18 <ticker_job+0x9dc>
   30aae:	2300      	movs	r3, #0
   30ab0:	e9cd 1502 	strd	r1, r5, [sp, #8]
		       ticks_start_offset + ticker->ticks_slot <=
   30ab4:	46f2      	mov	sl, lr
		ticker_id_iter = nodes[ticker_id_head].next;
   30ab6:	4622      	mov	r2, r4
		while (ticker_id_iter != TICKER_NULL &&
   30ab8:	461f      	mov	r7, r3
   30aba:	e01f      	b.n	30afc <ticker_job+0x7c0>
			if (node->ticks_to_expire >
   30abc:	68a9      	ldr	r1, [r5, #8]
					MIN(ticks_slot_window,
   30abe:	1f0b      	subs	r3, r1, #4
			if (node->ticks_to_expire >
   30ac0:	2904      	cmp	r1, #4
					MIN(ticks_slot_window,
   30ac2:	443b      	add	r3, r7
			if (node->ticks_to_expire >
   30ac4:	d90a      	bls.n	30adc <ticker_job+0x7a0>
				window_end_ticks =
   30ac6:	4543      	cmp	r3, r8
   30ac8:	bf28      	it	cs
   30aca:	4643      	movcs	r3, r8
			if (window_end_ticks > ticks_start_offset +
   30acc:	4553      	cmp	r3, sl
   30ace:	d905      	bls.n	30adc <ticker_job+0x7a0>
			if (ticks_to_expire != 0U &&
   30ad0:	ebb3 030e 	subs.w	r3, r3, lr
   30ad4:	d002      	beq.n	30adc <ticker_job+0x7a0>
   30ad6:	4563      	cmp	r3, ip
   30ad8:	f4bf af79 	bcs.w	309ce <ticker_job+0x692>
			window_start_ticks  = node->ticks_to_expire +
   30adc:	69ab      	ldr	r3, [r5, #24]
			ticker_id_iter = node->next;
   30ade:	f81b 2002 	ldrb.w	r2, [fp, r2]
			window_start_ticks  = node->ticks_to_expire +
   30ae2:	eb01 0c03 	add.w	ip, r1, r3
			ticks_start_offset += node->ticks_to_expire;
   30ae6:	440f      	add	r7, r1
			ticks_to_expire     = ticks_slot_window -
   30ae8:	eba8 030e 	sub.w	r3, r8, lr
		while (ticker_id_iter != TICKER_NULL &&
   30aec:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
   30aee:	eb07 0a0e 	add.w	sl, r7, lr
		while (ticker_id_iter != TICKER_NULL &&
   30af2:	f43f af6c 	beq.w	309ce <ticker_job+0x692>
   30af6:	45d0      	cmp	r8, sl
   30af8:	f4ff af69 	bcc.w	309ce <ticker_job+0x692>
			node = &nodes[ticker_id_iter];
   30afc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   30b00:	eb0b 1502 	add.w	r5, fp, r2, lsl #4
   30b04:	0112      	lsls	r2, r2, #4
			if (node->ext_data &&
   30b06:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   30b08:	2900      	cmp	r1, #0
   30b0a:	d0d7      	beq.n	30abc <ticker_job+0x780>
   30b0c:	7a09      	ldrb	r1, [r1, #8]
   30b0e:	2901      	cmp	r1, #1
   30b10:	d1d4      	bne.n	30abc <ticker_job+0x780>
				ticker_id_iter = node->next;
   30b12:	f81b 2002 	ldrb.w	r2, [fp, r2]
				continue;
   30b16:	e7e9      	b.n	30aec <ticker_job+0x7b0>
   30b18:	4647      	mov	r7, r8
   30b1a:	e77a      	b.n	30a12 <ticker_job+0x6d6>
	count_user = instance->count_user;
   30b1c:	7a73      	ldrb	r3, [r6, #9]
	users = &instance->users[0];
   30b1e:	6874      	ldr	r4, [r6, #4]
	while (count_user--) {
   30b20:	1e5f      	subs	r7, r3, #1
   30b22:	b2ff      	uxtb	r7, r7
		flag_compare_update = 1U;
   30b24:	f04f 0901 	mov.w	r9, #1
	while (count_user--) {
   30b28:	2b00      	cmp	r3, #0
   30b2a:	f43f adc5 	beq.w	306b8 <ticker_job+0x37c>
   30b2e:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
		uop->status = TICKER_STATUS_SUCCESS;
   30b32:	f04f 0a00 	mov.w	sl, #0
   30b36:	9400      	str	r4, [sp, #0]
   30b38:	46b0      	mov	r8, r6
		while (user->first != user->last) {
   30b3a:	787b      	ldrb	r3, [r7, #1]
   30b3c:	78fa      	ldrb	r2, [r7, #3]
		user_op = &user->user_op[0];
   30b3e:	687e      	ldr	r6, [r7, #4]
		while (user->first != user->last) {
   30b40:	429a      	cmp	r2, r3
   30b42:	d10c      	bne.n	30b5e <ticker_job+0x822>
   30b44:	e069      	b.n	30c1a <ticker_job+0x8de>
	switch (uop->op) {
   30b46:	2b01      	cmp	r3, #1
   30b48:	d061      	beq.n	30c0e <ticker_job+0x8d2>
			first = user->first + 1;
   30b4a:	787b      	ldrb	r3, [r7, #1]
			if (first == user->count_user_op) {
   30b4c:	7839      	ldrb	r1, [r7, #0]
			first = user->first + 1;
   30b4e:	3301      	adds	r3, #1
   30b50:	b2db      	uxtb	r3, r3
				first = 0U;
   30b52:	4299      	cmp	r1, r3
   30b54:	bf08      	it	eq
   30b56:	2300      	moveq	r3, #0
		while (user->first != user->last) {
   30b58:	429a      	cmp	r2, r3
			user->first = first;
   30b5a:	707b      	strb	r3, [r7, #1]
		while (user->first != user->last) {
   30b5c:	d05d      	beq.n	30c1a <ticker_job+0x8de>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   30b5e:	b21b      	sxth	r3, r3
   30b60:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   30b64:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   30b68:	eb06 0083 	add.w	r0, r6, r3, lsl #2
	switch (uop->op) {
   30b6c:	f816 3023 	ldrb.w	r3, [r6, r3, lsl #2]
   30b70:	2b02      	cmp	r3, #2
   30b72:	d01d      	beq.n	30bb0 <ticker_job+0x874>
   30b74:	2b03      	cmp	r3, #3
   30b76:	d1e6      	bne.n	30b46 <ticker_job+0x80a>
		if (uop->id < instance->count_node) {
   30b78:	7843      	ldrb	r3, [r0, #1]
   30b7a:	f898 2008 	ldrb.w	r2, [r8, #8]
   30b7e:	429a      	cmp	r2, r3
   30b80:	d949      	bls.n	30c16 <ticker_job+0x8da>
			node[uop->id].priority =
   30b82:	f8d8 2000 	ldr.w	r2, [r8]
   30b86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   30b8a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   30b8e:	7903      	ldrb	r3, [r0, #4]
   30b90:	f882 302d 	strb.w	r3, [r2, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
   30b94:	2200      	movs	r2, #0
		fp_op_func = uop->fp_op_func;
   30b96:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
			uop->status = TICKER_STATUS_SUCCESS;
   30b98:	6282      	str	r2, [r0, #40]	; 0x28
	if (fp_op_func) {
   30b9a:	b113      	cbz	r3, 30ba2 <ticker_job+0x866>
		fp_op_func(uop->status, uop->op_context);
   30b9c:	6b01      	ldr	r1, [r0, #48]	; 0x30
   30b9e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   30ba0:	4798      	blx	r3
   30ba2:	78fa      	ldrb	r2, [r7, #3]
   30ba4:	e7d1      	b.n	30b4a <ticker_job+0x80e>
   30ba6:	bf00      	nop
   30ba8:	ff172b5a 	.word	0xff172b5a
   30bac:	7f172b59 	.word	0x7f172b59
		ticker_by_next_slot_get(instance,
   30bb0:	e9d0 e401 	ldrd	lr, r4, [r0, #4]
	_ticker_id_head = *ticker_id_head;
   30bb4:	f89e 2000 	ldrb.w	r2, [lr]
		ticker_by_next_slot_get(instance,
   30bb8:	f8d0 c00c 	ldr.w	ip, [r0, #12]
	node = instance->nodes;
   30bbc:	f8d8 5000 	ldr.w	r5, [r8]
	_ticks_to_expire = *ticks_to_expire;
   30bc0:	f8dc 1000 	ldr.w	r1, [ip]
	    (*ticks_current != instance->ticks_current)) {
   30bc4:	f8d8 3014 	ldr.w	r3, [r8, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
   30bc8:	2aff      	cmp	r2, #255	; 0xff
   30bca:	d003      	beq.n	30bd4 <ticker_job+0x898>
   30bcc:	f8d4 b000 	ldr.w	fp, [r4]
   30bd0:	459b      	cmp	fp, r3
   30bd2:	d029      	beq.n	30c28 <ticker_job+0x8ec>
		_ticker_id_head = instance->ticker_id_head;
   30bd4:	f898 201d 	ldrb.w	r2, [r8, #29]
		*ticks_current = instance->ticks_current;
   30bd8:	6023      	str	r3, [r4, #0]
		_ticks_to_expire = 0U;
   30bda:	2100      	movs	r1, #0
	while (_ticker_id_head != TICKER_NULL) {
   30bdc:	2aff      	cmp	r2, #255	; 0xff
   30bde:	d106      	bne.n	30bee <ticker_job+0x8b2>
   30be0:	e011      	b.n	30c06 <ticker_job+0x8ca>
		_ticker_id_head = ticker->next;
   30be2:	5cea      	ldrb	r2, [r5, r3]
		_ticks_to_expire += ticker->ticks_to_expire;
   30be4:	f8db 4008 	ldr.w	r4, [fp, #8]
	while (_ticker_id_head != TICKER_NULL) {
   30be8:	2aff      	cmp	r2, #255	; 0xff
		_ticks_to_expire += ticker->ticks_to_expire;
   30bea:	4421      	add	r1, r4
	while (_ticker_id_head != TICKER_NULL) {
   30bec:	d00b      	beq.n	30c06 <ticker_job+0x8ca>
		ticker = &node[_ticker_id_head];
   30bee:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   30bf2:	eb05 1b03 	add.w	fp, r5, r3, lsl #4
   30bf6:	011b      	lsls	r3, r3, #4
			if (ticker->ticks_slot) {
   30bf8:	f8db 4018 	ldr.w	r4, [fp, #24]
   30bfc:	2c00      	cmp	r4, #0
   30bfe:	d0f0      	beq.n	30be2 <ticker_job+0x8a6>
		_ticks_to_expire += ticker->ticks_to_expire;
   30c00:	f8db 3008 	ldr.w	r3, [fp, #8]
   30c04:	4419      	add	r1, r3
	*ticker_id_head = _ticker_id_head;
   30c06:	f88e 2000 	strb.w	r2, [lr]
	*ticks_to_expire = _ticks_to_expire;
   30c0a:	f8cc 1000 	str.w	r1, [ip]
		fp_op_func = uop->fp_op_func;
   30c0e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
   30c10:	f8c0 a028 	str.w	sl, [r0, #40]	; 0x28
		break;
   30c14:	e7c1      	b.n	30b9a <ticker_job+0x85e>
   30c16:	2201      	movs	r2, #1
   30c18:	e7bd      	b.n	30b96 <ticker_job+0x85a>
	while (count_user--) {
   30c1a:	9a00      	ldr	r2, [sp, #0]
   30c1c:	4297      	cmp	r7, r2
   30c1e:	f1a7 0308 	sub.w	r3, r7, #8
   30c22:	d044      	beq.n	30cae <ticker_job+0x972>
   30c24:	461f      	mov	r7, r3
   30c26:	e788      	b.n	30b3a <ticker_job+0x7fe>
		ticker = &node[_ticker_id_head];
   30c28:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   30c2c:	0113      	lsls	r3, r2, #4
		_ticker_id_head = ticker->next;
   30c2e:	5cea      	ldrb	r2, [r5, r3]
   30c30:	e7d4      	b.n	30bdc <ticker_job+0x8a0>
}
   30c32:	b00f      	add	sp, #60	; 0x3c
   30c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30c38:	4770      	bx	lr
	ticker_id_old_head = instance->ticker_id_head;
   30c3a:	7f43      	ldrb	r3, [r0, #29]
	count_user = instance->count_user;
   30c3c:	7a42      	ldrb	r2, [r0, #9]
	ticker_id_old_head = instance->ticker_id_head;
   30c3e:	930a      	str	r3, [sp, #40]	; 0x28
	node = &instance->nodes[0];
   30c40:	6803      	ldr	r3, [r0, #0]
   30c42:	9301      	str	r3, [sp, #4]
	while (count_user--) {
   30c44:	1e53      	subs	r3, r2, #1
	users = &instance->users[0];
   30c46:	6845      	ldr	r5, [r0, #4]
	count_user = instance->count_user;
   30c48:	9209      	str	r2, [sp, #36]	; 0x24
	while (count_user--) {
   30c4a:	b2db      	uxtb	r3, r3
   30c4c:	2a00      	cmp	r2, #0
   30c4e:	d079      	beq.n	30d44 <ticker_job+0xa08>
		ticks_elapsed = 0U;
   30c50:	9404      	str	r4, [sp, #16]
   30c52:	f7ff bba6 	b.w	303a2 <ticker_job+0x66>
					while (ticks_to_expire <
   30c56:	4592      	cmp	sl, r2
   30c58:	f67f ae62 	bls.w	30920 <ticker_job+0x5e4>
				lazy = 0U;
   30c5c:	9001      	str	r0, [sp, #4]
   30c5e:	1c48      	adds	r0, r1, #1
   30c60:	9002      	str	r0, [sp, #8]
   30c62:	e9cd b406 	strd	fp, r4, [sp, #24]
	if ((ticker->remainder_current < BIT(31)) &&
   30c66:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 30d4c <ticker_job+0xa10>
   30c6a:	e9dd 0401 	ldrd	r0, r4, [sp, #4]
   30c6e:	e005      	b.n	30c7c <ticker_job+0x940>
   30c70:	468b      	mov	fp, r1
						ticks_to_expire +=
   30c72:	445a      	add	r2, fp
						lazy++;
   30c74:	3001      	adds	r0, #1
					while (ticks_to_expire <
   30c76:	4592      	cmp	sl, r2
						lazy++;
   30c78:	b280      	uxth	r0, r0
					while (ticks_to_expire <
   30c7a:	d911      	bls.n	30ca0 <ticker_job+0x964>
	if ((ticker->remainder_current < BIT(31)) &&
   30c7c:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 30d50 <ticker_job+0xa14>
	ticker->remainder_current += ticker->remainder_periodic;
   30c80:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   30c82:	449b      	add	fp, r3
   30c84:	45cb      	cmp	fp, r9
   30c86:	d8f3      	bhi.n	30c70 <ticker_job+0x934>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   30c88:	46a3      	mov	fp, r4
   30c8a:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
   30c8e:	445a      	add	r2, fp
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   30c90:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
   30c94:	3001      	adds	r0, #1
					while (ticks_to_expire <
   30c96:	4592      	cmp	sl, r2
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   30c98:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
   30c9c:	b280      	uxth	r0, r0
					while (ticks_to_expire <
   30c9e:	d8ed      	bhi.n	30c7c <ticker_job+0x940>
				ticker->lazy_current += (lazy_periodic + lazy);
   30ca0:	e9dd b406 	ldrd	fp, r4, [sp, #24]
   30ca4:	4470      	add	r0, lr
   30ca6:	6263      	str	r3, [r4, #36]	; 0x24
   30ca8:	fa1f fe80 	uxth.w	lr, r0
   30cac:	e638      	b.n	30920 <ticker_job+0x5e4>
   30cae:	4646      	mov	r6, r8
	if (flag_compare_update) {
   30cb0:	f1b9 0f00 	cmp.w	r9, #0
   30cb4:	f43f aee3 	beq.w	30a7e <ticker_job+0x742>
   30cb8:	e4fe      	b.n	306b8 <ticker_job+0x37c>
	if (!pending) {
   30cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
   30cbc:	2b00      	cmp	r3, #0
   30cbe:	d1f7      	bne.n	30cb0 <ticker_job+0x974>
	count_user = instance->count_user;
   30cc0:	7a73      	ldrb	r3, [r6, #9]
	users = &instance->users[0];
   30cc2:	6874      	ldr	r4, [r6, #4]
	while (count_user--) {
   30cc4:	1e5f      	subs	r7, r3, #1
   30cc6:	b2ff      	uxtb	r7, r7
   30cc8:	2b00      	cmp	r3, #0
   30cca:	f47f af30 	bne.w	30b2e <ticker_job+0x7f2>
	if (flag_compare_update) {
   30cce:	f1b9 0f00 	cmp.w	r9, #0
   30cd2:	f43f aed4 	beq.w	30a7e <ticker_job+0x742>
   30cd6:	e4ef      	b.n	306b8 <ticker_job+0x37c>
			ticker->ticks_to_expire -= ticks_elapsed;
   30cd8:	1bdb      	subs	r3, r3, r7
   30cda:	f8dd 9014 	ldr.w	r9, [sp, #20]
   30cde:	60a3      	str	r3, [r4, #8]
			break;
   30ce0:	e59c      	b.n	3081c <ticker_job+0x4e0>
		if ((ticker->ticks_periodic != 0U) ||
   30ce2:	2800      	cmp	r0, #0
   30ce4:	f43f ae47 	beq.w	30976 <ticker_job+0x63a>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   30ce8:	7a02      	ldrb	r2, [r0, #8]
   30cea:	2a01      	cmp	r2, #1
   30cec:	f43f add9 	beq.w	308a2 <ticker_job+0x566>
			if (state && ((state == 1U) || skip_collision) &&
   30cf0:	f1be 0f00 	cmp.w	lr, #0
   30cf4:	f47f ae3f 	bne.w	30976 <ticker_job+0x63a>
   30cf8:	e588      	b.n	3080c <ticker_job+0x4d0>
	if (!pending) {
   30cfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   30cfc:	2a00      	cmp	r2, #0
   30cfe:	f47f aeb7 	bne.w	30a70 <ticker_job+0x734>
	count_user = instance->count_user;
   30d02:	f898 2009 	ldrb.w	r2, [r8, #9]
	users = &instance->users[0];
   30d06:	f8d8 4004 	ldr.w	r4, [r8, #4]
	while (count_user--) {
   30d0a:	1e57      	subs	r7, r2, #1
   30d0c:	b2ff      	uxtb	r7, r7
   30d0e:	2a00      	cmp	r2, #0
   30d10:	f43f aeae 	beq.w	30a70 <ticker_job+0x734>
			flag_compare_update = 1U;
   30d14:	4699      	mov	r9, r3
   30d16:	e70a      	b.n	30b2e <ticker_job+0x7f2>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   30d18:	9b01      	ldr	r3, [sp, #4]
   30d1a:	606b      	str	r3, [r5, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   30d1c:	2300      	movs	r3, #0
   30d1e:	608b      	str	r3, [r1, #8]
		while (ticker_id_iter != TICKER_NULL) {
   30d20:	e64d      	b.n	309be <ticker_job+0x682>
		ticker->ticks_to_expire = 0U;
   30d22:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
   30d26:	f886 901d 	strb.w	r9, [r6, #29]
		if ((ticker->ticks_periodic != 0U) ||
   30d2a:	e5ba      	b.n	308a2 <ticker_job+0x566>
		ticks_current = cntr_cnt_get();
   30d2c:	f00b fa72 	bl	3c214 <cntr_cnt_get>
   30d30:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   30d32:	f00b fa39 	bl	3c1a8 <cntr_start>
	ticker = &instance->nodes[instance->ticker_id_head];
   30d36:	7f73      	ldrb	r3, [r6, #29]
   30d38:	9300      	str	r3, [sp, #0]
		if (cntr_start() == 0) {
   30d3a:	2800      	cmp	r0, #0
   30d3c:	f47f acc6 	bne.w	306cc <ticker_job+0x390>
			instance->ticks_current = ticks_current;
   30d40:	6174      	str	r4, [r6, #20]
   30d42:	e4c3      	b.n	306cc <ticker_job+0x390>
	insert_head = TICKER_NULL;
   30d44:	23ff      	movs	r3, #255	; 0xff
	while (count_user--) {
   30d46:	4691      	mov	r9, r2
	insert_head = TICKER_NULL;
   30d48:	9303      	str	r3, [sp, #12]
   30d4a:	e4a6      	b.n	3069a <ticker_job+0x35e>
   30d4c:	7f172b59 	.word	0x7f172b59
   30d50:	ff172b5a 	.word	0xff172b5a

00030d54 <ticker_init>:
{
   30d54:	b4f0      	push	{r4, r5, r6, r7}
   30d56:	9d04      	ldr	r5, [sp, #16]
   30d58:	f89d 7014 	ldrb.w	r7, [sp, #20]
   30d5c:	9c06      	ldr	r4, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   30d5e:	2800      	cmp	r0, #0
   30d60:	d137      	bne.n	30dd2 <ticker_init+0x7e>
	instance->count_node = count_node;
   30d62:	4e1d      	ldr	r6, [pc, #116]	; (30dd8 <ticker_init+0x84>)
	while (count_node--) {
   30d64:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
	instance->count_node = count_node;
   30d68:	7231      	strb	r1, [r6, #8]
	instance->nodes = node;
   30d6a:	6032      	str	r2, [r6, #0]
	while (count_node--) {
   30d6c:	fa5f fc8c 	uxtb.w	ip, ip
   30d70:	b149      	cbz	r1, 30d86 <ticker_init+0x32>
   30d72:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   30d76:	eb02 110c 	add.w	r1, r2, ip, lsl #4
   30d7a:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
   30d7c:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
   30d80:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
   30d84:	d1f9      	bne.n	30d7a <ticker_init+0x26>
	while (count_user--) {
   30d86:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
   30d88:	7273      	strb	r3, [r6, #9]
	instance->users = user;
   30d8a:	6075      	str	r5, [r6, #4]
	while (count_user--) {
   30d8c:	b2d2      	uxtb	r2, r2
   30d8e:	b183      	cbz	r3, 30db2 <ticker_init+0x5e>
   30d90:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
		users[count_user].user_op = user_op_;
   30d94:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
   30d96:	4610      	mov	r0, r2
   30d98:	f812 3908 	ldrb.w	r3, [r2], #-8
   30d9c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   30da0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	while (count_user--) {
   30da4:	42a8      	cmp	r0, r5
		count_op -= users[count_user].count_user_op;
   30da6:	eba7 0303 	sub.w	r3, r7, r3
		user_op_ += users[count_user].count_user_op;
   30daa:	eb04 0481 	add.w	r4, r4, r1, lsl #2
		count_op -= users[count_user].count_user_op;
   30dae:	b2df      	uxtb	r7, r3
	while (count_user--) {
   30db0:	d1f0      	bne.n	30d94 <ticker_init+0x40>
	if (count_op) {
   30db2:	b977      	cbnz	r7, 30dd2 <ticker_init+0x7e>
	instance->caller_id_get_cb = caller_id_get_cb;
   30db4:	9a07      	ldr	r2, [sp, #28]
   30db6:	6232      	str	r2, [r6, #32]
	instance->sched_cb = sched_cb;
   30db8:	9a08      	ldr	r2, [sp, #32]
   30dba:	6272      	str	r2, [r6, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
   30dbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
   30dc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   30dc2:	62b2      	str	r2, [r6, #40]	; 0x28
	return TICKER_STATUS_SUCCESS;
   30dc4:	4638      	mov	r0, r7
	instance->ticks_current = 0U;
   30dc6:	e9c6 7705 	strd	r7, r7, [r6, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
   30dca:	83b3      	strh	r3, [r6, #28]
	instance->ticks_elapsed_first = 0U;
   30dcc:	8177      	strh	r7, [r6, #10]
}
   30dce:	bcf0      	pop	{r4, r5, r6, r7}
   30dd0:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
   30dd2:	2001      	movs	r0, #1
}
   30dd4:	bcf0      	pop	{r4, r5, r6, r7}
   30dd6:	4770      	bx	lr
   30dd8:	20001e40 	.word	0x20001e40

00030ddc <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
   30ddc:	4b04      	ldr	r3, [pc, #16]	; (30df0 <ticker_is_initialized+0x14>)
   30dde:	222c      	movs	r2, #44	; 0x2c
   30de0:	fb02 3300 	mla	r3, r2, r0, r3
   30de4:	7a18      	ldrb	r0, [r3, #8]
}
   30de6:	3800      	subs	r0, #0
   30de8:	bf18      	it	ne
   30dea:	2001      	movne	r0, #1
   30dec:	4770      	bx	lr
   30dee:	bf00      	nop
   30df0:	20001e40 	.word	0x20001e40

00030df4 <ticker_trigger>:
	if (instance->sched_cb) {
   30df4:	4b0a      	ldr	r3, [pc, #40]	; (30e20 <ticker_trigger+0x2c>)
   30df6:	222c      	movs	r2, #44	; 0x2c
   30df8:	fb02 3200 	mla	r2, r2, r0, r3
{
   30dfc:	b410      	push	{r4}
	if (instance->sched_cb) {
   30dfe:	6a54      	ldr	r4, [r2, #36]	; 0x24
   30e00:	b15c      	cbz	r4, 30e1a <ticker_trigger+0x26>
	instance = &_instance[instance_index];
   30e02:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   30e06:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   30e0a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   30e0e:	46a4      	mov	ip, r4
   30e10:	2201      	movs	r2, #1
}
   30e12:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   30e14:	2103      	movs	r1, #3
   30e16:	2002      	movs	r0, #2
   30e18:	4760      	bx	ip
}
   30e1a:	bc10      	pop	{r4}
   30e1c:	4770      	bx	lr
   30e1e:	bf00      	nop
   30e20:	20001e40 	.word	0x20001e40

00030e24 <ticker_start_ext>:
{
   30e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   30e28:	4e28      	ldr	r6, [pc, #160]	; (30ecc <ticker_start_ext+0xa8>)
{
   30e2a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   30e2e:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   30e30:	252c      	movs	r5, #44	; 0x2c
   30e32:	fb05 6504 	mla	r5, r5, r4, r6
{
   30e36:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   30e38:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   30e3c:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
   30e40:	6869      	ldr	r1, [r5, #4]
   30e42:	eb01 07c0 	add.w	r7, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
   30e46:	eb06 0684 	add.w	r6, r6, r4, lsl #2
	last = user->last + 1;
   30e4a:	78fc      	ldrb	r4, [r7, #3]
	if (last >= user->count_user_op) {
   30e4c:	f811 e030 	ldrb.w	lr, [r1, r0, lsl #3]
	if (last == user->first) {
   30e50:	7879      	ldrb	r1, [r7, #1]
	last = user->last + 1;
   30e52:	f104 0c01 	add.w	ip, r4, #1
   30e56:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   30e5a:	45e6      	cmp	lr, ip
   30e5c:	bf98      	it	ls
   30e5e:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   30e62:	4561      	cmp	r1, ip
   30e64:	d02e      	beq.n	30ec4 <ticker_start_ext+0xa0>
	user_op = &user->user_op[user->last];
   30e66:	6879      	ldr	r1, [r7, #4]
   30e68:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
   30e6c:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
   30e70:	eb01 048e 	add.w	r4, r1, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
   30e74:	f04f 0904 	mov.w	r9, #4
   30e78:	f801 902e 	strb.w	r9, [r1, lr, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
   30e7c:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   30e7e:	9b08      	ldr	r3, [sp, #32]
   30e80:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   30e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
   30e84:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   30e86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   30e88:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   30e8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   30e8c:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
   30e8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   30e90:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   30e92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   30e94:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   30e96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   30e98:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   30e9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   30e9c:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   30e9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   30ea0:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   30ea2:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   30ea4:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   30ea6:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.start.lazy = lazy;
   30ea8:	f8a4 8014 	strh.w	r8, [r4, #20]
	user->last = last;
   30eac:	f887 c003 	strb.w	ip, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   30eb0:	e9d5 3508 	ldrd	r3, r5, [r5, #32]
   30eb4:	4798      	blx	r3
   30eb6:	4633      	mov	r3, r6
   30eb8:	4649      	mov	r1, r9
   30eba:	2200      	movs	r2, #0
   30ebc:	47a8      	blx	r5
	return user_op->status;
   30ebe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   30ec0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   30ec4:	2001      	movs	r0, #1
}
   30ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   30eca:	bf00      	nop
   30ecc:	20001e40 	.word	0x20001e40

00030ed0 <ticker_start>:
{
   30ed0:	b510      	push	{r4, lr}
   30ed2:	b08a      	sub	sp, #40	; 0x28
   30ed4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_start_ext(instance_index, user_id, ticker_id,
   30ed6:	9400      	str	r4, [sp, #0]
{
   30ed8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_start_ext(instance_index, user_id, ticker_id,
   30eda:	9401      	str	r4, [sp, #4]
{
   30edc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
   30ede:	9402      	str	r4, [sp, #8]
{
   30ee0:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   30ee4:	9403      	str	r4, [sp, #12]
{
   30ee6:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
   30ee8:	9404      	str	r4, [sp, #16]
{
   30eea:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return ticker_start_ext(instance_index, user_id, ticker_id,
   30eec:	9405      	str	r4, [sp, #20]
{
   30eee:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
   30ef0:	9406      	str	r4, [sp, #24]
{
   30ef2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   30ef4:	9407      	str	r4, [sp, #28]
{
   30ef6:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
   30ef8:	9408      	str	r4, [sp, #32]
   30efa:	2400      	movs	r4, #0
   30efc:	9409      	str	r4, [sp, #36]	; 0x24
   30efe:	f7ff ff91 	bl	30e24 <ticker_start_ext>
}
   30f02:	b00a      	add	sp, #40	; 0x28
   30f04:	bd10      	pop	{r4, pc}
   30f06:	bf00      	nop

00030f08 <ticker_update_ext>:
{
   30f08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   30f0c:	4d29      	ldr	r5, [pc, #164]	; (30fb4 <ticker_update_ext+0xac>)
{
   30f0e:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
   30f12:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   30f16:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   30f18:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
   30f1c:	fb0e 5e04 	mla	lr, lr, r4, r5
{
   30f20:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   30f22:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   30f26:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
   30f2a:	f8de 1004 	ldr.w	r1, [lr, #4]
   30f2e:	eb01 06c0 	add.w	r6, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
   30f32:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	last = user->last + 1;
   30f36:	78f4      	ldrb	r4, [r6, #3]
	if (last >= user->count_user_op) {
   30f38:	f811 9030 	ldrb.w	r9, [r1, r0, lsl #3]
	if (last == user->first) {
   30f3c:	7871      	ldrb	r1, [r6, #1]
	last = user->last + 1;
   30f3e:	f104 0c01 	add.w	ip, r4, #1
   30f42:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   30f46:	45e1      	cmp	r9, ip
   30f48:	bf98      	it	ls
   30f4a:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   30f4e:	4561      	cmp	r1, ip
{
   30f50:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
	if (last == user->first) {
   30f54:	d02a      	beq.n	30fac <ticker_update_ext+0xa4>
	user_op = &user->user_op[user->last];
   30f56:	f8d6 a004 	ldr.w	sl, [r6, #4]
   30f5a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   30f5e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   30f62:	eb0a 0481 	add.w	r4, sl, r1, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   30f66:	f04f 0b05 	mov.w	fp, #5
   30f6a:	f80a b021 	strb.w	fp, [sl, r1, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   30f6e:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   30f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   30f72:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   30f74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   30f76:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   30f78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   30f7a:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
   30f7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   30f7e:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   30f80:	9b10      	ldr	r3, [sp, #64]	; 0x40
   30f82:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   30f84:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   30f86:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   30f88:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.update.lazy = lazy;
   30f8a:	82a7      	strh	r7, [r4, #20]
	user_op->params.update.force = force;
   30f8c:	f884 8016 	strb.w	r8, [r4, #22]
	user_op->params.update.must_expire = must_expire;
   30f90:	f884 9017 	strb.w	r9, [r4, #23]
	user->last = last;
   30f94:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   30f98:	e9de 3608 	ldrd	r3, r6, [lr, #32]
   30f9c:	4798      	blx	r3
   30f9e:	462b      	mov	r3, r5
   30fa0:	2200      	movs	r2, #0
   30fa2:	2104      	movs	r1, #4
   30fa4:	47b0      	blx	r6
	return user_op->status;
   30fa6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   30fa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
   30fac:	2001      	movs	r0, #1
}
   30fae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30fb2:	bf00      	nop
   30fb4:	20001e40 	.word	0x20001e40

00030fb8 <ticker_update>:
{
   30fb8:	b510      	push	{r4, lr}
   30fba:	b088      	sub	sp, #32
   30fbc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	return ticker_update_ext(instance_index, user_id, ticker_id,
   30fbe:	9400      	str	r4, [sp, #0]
{
   30fc0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   30fc2:	9401      	str	r4, [sp, #4]
{
   30fc4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
   30fc6:	9402      	str	r4, [sp, #8]
{
   30fc8:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
	return ticker_update_ext(instance_index, user_id, ticker_id,
   30fcc:	9403      	str	r4, [sp, #12]
{
   30fce:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
   30fd2:	9404      	str	r4, [sp, #16]
{
   30fd4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   30fd6:	9405      	str	r4, [sp, #20]
{
   30fd8:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
   30fda:	9406      	str	r4, [sp, #24]
   30fdc:	2400      	movs	r4, #0
   30fde:	9407      	str	r4, [sp, #28]
   30fe0:	f7ff ff92 	bl	30f08 <ticker_update_ext>
}
   30fe4:	b008      	add	sp, #32
   30fe6:	bd10      	pop	{r4, pc}

00030fe8 <ticker_stop>:
{
   30fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30fec:	4607      	mov	r7, r0
	struct ticker_instance *instance = &_instance[instance_index];
   30fee:	4d1e      	ldr	r5, [pc, #120]	; (31068 <ticker_stop+0x80>)
   30ff0:	eb07 0487 	add.w	r4, r7, r7, lsl #2
{
   30ff4:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   30ff6:	eb07 0444 	add.w	r4, r7, r4, lsl #1
	user = &instance->users[user_id];
   30ffa:	212c      	movs	r1, #44	; 0x2c
	struct ticker_instance *instance = &_instance[instance_index];
   30ffc:	eb05 0684 	add.w	r6, r5, r4, lsl #2
	user = &instance->users[user_id];
   31000:	fb01 5407 	mla	r4, r1, r7, r5
   31004:	6865      	ldr	r5, [r4, #4]
   31006:	eb05 01c0 	add.w	r1, r5, r0, lsl #3
	if (last >= user->count_user_op) {
   3100a:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
   3100e:	f891 e003 	ldrb.w	lr, [r1, #3]
	if (last == user->first) {
   31012:	784d      	ldrb	r5, [r1, #1]
	last = user->last + 1;
   31014:	f10e 0c01 	add.w	ip, lr, #1
   31018:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   3101c:	4567      	cmp	r7, ip
   3101e:	bf98      	it	ls
   31020:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   31024:	4565      	cmp	r5, ip
   31026:	d01c      	beq.n	31062 <ticker_stop+0x7a>
	user_op = &user->user_op[user->last];
   31028:	684f      	ldr	r7, [r1, #4]
   3102a:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
   3102e:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
   31032:	eb07 058e 	add.w	r5, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   31036:	f04f 0807 	mov.w	r8, #7
   3103a:	f807 802e 	strb.w	r8, [r7, lr, lsl #2]
	user_op->fp_op_func = fp_op_func;
   3103e:	62eb      	str	r3, [r5, #44]	; 0x2c
	user_op->op_context = op_context;
   31040:	9b06      	ldr	r3, [sp, #24]
   31042:	632b      	str	r3, [r5, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   31044:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   31046:	706a      	strb	r2, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
   31048:	62ab      	str	r3, [r5, #40]	; 0x28
	user->last = last;
   3104a:	f881 c003 	strb.w	ip, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   3104e:	e9d4 3708 	ldrd	r3, r7, [r4, #32]
   31052:	4798      	blx	r3
   31054:	4633      	mov	r3, r6
   31056:	2200      	movs	r2, #0
   31058:	2104      	movs	r1, #4
   3105a:	47b8      	blx	r7
	return user_op->status;
   3105c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
   3105e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   31062:	2001      	movs	r0, #1
}
   31064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   31068:	20001e40 	.word	0x20001e40

0003106c <ticker_ticks_now_get>:
	return cntr_cnt_get();
   3106c:	f00b b8d2 	b.w	3c214 <cntr_cnt_get>

00031070 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   31070:	1a40      	subs	r0, r0, r1
}
   31072:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   31076:	4770      	bx	lr

00031078 <ll_addr_set>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   31078:	b538      	push	{r3, r4, r5, lr}
   3107a:	4605      	mov	r5, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
   3107c:	2000      	movs	r0, #0
{
   3107e:	460c      	mov	r4, r1
		if (ull_adv_is_enabled(0)) {
   31080:	f003 f942 	bl	34308 <ull_adv_is_enabled>
   31084:	b968      	cbnz	r0, 310a2 <ll_addr_set+0x2a>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
   31086:	b935      	cbnz	r5, 31096 <ll_addr_set+0x1e>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   31088:	4807      	ldr	r0, [pc, #28]	; (310a8 <ll_addr_set+0x30>)
   3108a:	2206      	movs	r2, #6
   3108c:	4621      	mov	r1, r4
   3108e:	f013 fd18 	bl	44ac2 <memcpy>
	}

	return 0;
   31092:	2000      	movs	r0, #0
}
   31094:	bd38      	pop	{r3, r4, r5, pc}
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   31096:	2206      	movs	r2, #6
   31098:	4621      	mov	r1, r4
   3109a:	4804      	ldr	r0, [pc, #16]	; (310ac <ll_addr_set+0x34>)
   3109c:	f013 fd11 	bl	44ac2 <memcpy>
   310a0:	e7f7      	b.n	31092 <ll_addr_set+0x1a>
			return BT_HCI_ERR_CMD_DISALLOWED;
   310a2:	200c      	movs	r0, #12
}
   310a4:	bd38      	pop	{r3, r4, r5, pc}
   310a6:	bf00      	nop
   310a8:	20001e74 	.word	0x20001e74
   310ac:	20001e6c 	.word	0x20001e6c

000310b0 <ll_addr_get>:

uint8_t *ll_addr_get(uint8_t addr_type)
{
	if (addr_type > BT_ADDR_LE_RANDOM) {
   310b0:	2801      	cmp	r0, #1
{
   310b2:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
   310b4:	d805      	bhi.n	310c2 <ll_addr_get+0x12>

	if (addr_type) {
		return rnd_addr;
	}

	return pub_addr;
   310b6:	4a04      	ldr	r2, [pc, #16]	; (310c8 <ll_addr_get+0x18>)
   310b8:	4804      	ldr	r0, [pc, #16]	; (310cc <ll_addr_get+0x1c>)
   310ba:	2b00      	cmp	r3, #0
   310bc:	bf08      	it	eq
   310be:	4610      	moveq	r0, r2
   310c0:	4770      	bx	lr
		return NULL;
   310c2:	2000      	movs	r0, #0
}
   310c4:	4770      	bx	lr
   310c6:	bf00      	nop
   310c8:	20001e74 	.word	0x20001e74
   310cc:	20001e6c 	.word	0x20001e6c

000310d0 <ll_addr_read>:
	if (addr_type > BT_ADDR_LE_RANDOM) {
   310d0:	2801      	cmp	r0, #1

uint8_t *ll_addr_read(uint8_t addr_type, uint8_t *const bdaddr)
{
   310d2:	b510      	push	{r4, lr}
   310d4:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
   310d6:	d80b      	bhi.n	310f0 <ll_addr_read+0x20>
	if (addr_type) {
   310d8:	4608      	mov	r0, r1
		return rnd_addr;
   310da:	4c07      	ldr	r4, [pc, #28]	; (310f8 <ll_addr_read+0x28>)
   310dc:	4907      	ldr	r1, [pc, #28]	; (310fc <ll_addr_read+0x2c>)
   310de:	2b00      	cmp	r3, #0
   310e0:	bf18      	it	ne
   310e2:	460c      	movne	r4, r1
	uint8_t *addr;

	addr = ll_addr_get(addr_type);
	if (addr) {
		memcpy(bdaddr, addr, BDADDR_SIZE);
   310e4:	2206      	movs	r2, #6
   310e6:	4621      	mov	r1, r4
   310e8:	f013 fceb 	bl	44ac2 <memcpy>
	}

	return addr;
}
   310ec:	4620      	mov	r0, r4
   310ee:	bd10      	pop	{r4, pc}
		return NULL;
   310f0:	2400      	movs	r4, #0
}
   310f2:	4620      	mov	r0, r4
   310f4:	bd10      	pop	{r4, pc}
   310f6:	bf00      	nop
   310f8:	20001e74 	.word	0x20001e74
   310fc:	20001e6c 	.word	0x20001e6c

00031100 <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   31100:	2802      	cmp	r0, #2
   31102:	d001      	beq.n	31108 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
   31104:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   31106:	4770      	bx	lr
{
   31108:	b538      	push	{r3, r4, r5, lr}
   3110a:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
   3110c:	4608      	mov	r0, r1
   3110e:	461d      	mov	r5, r3
   31110:	f004 f86a 	bl	351e8 <ll_connected_get>
			if (!conn) {
   31114:	b110      	cbz	r0, 3111c <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   31116:	2000      	movs	r0, #0
   31118:	7028      	strb	r0, [r5, #0]
}
   3111a:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3111c:	4620      	mov	r0, r4
}
   3111e:	bd38      	pop	{r3, r4, r5, pc}

00031120 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   31120:	2300      	movs	r3, #0
   31122:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   31124:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   31126:	4770      	bx	lr

00031128 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
   31128:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   3112a:	4802      	ldr	r0, [pc, #8]	; (31134 <hci_driver_init+0xc>)
   3112c:	f7fa fa9c 	bl	2b668 <bt_hci_driver_register>

	return 0;
}
   31130:	2000      	movs	r0, #0
   31132:	bd08      	pop	{r3, pc}
   31134:	00049cec 	.word	0x00049cec

00031138 <hci_driver_send>:
{
   31138:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
   3113a:	8983      	ldrh	r3, [r0, #12]
{
   3113c:	b083      	sub	sp, #12
	if (!buf->len) {
   3113e:	b123      	cbz	r3, 3114a <hci_driver_send+0x12>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   31140:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   31142:	4604      	mov	r4, r0
   31144:	b1c3      	cbz	r3, 31178 <hci_driver_send+0x40>
   31146:	2b02      	cmp	r3, #2
   31148:	d004      	beq.n	31154 <hci_driver_send+0x1c>
   3114a:	f06f 0515 	mvn.w	r5, #21
}
   3114e:	4628      	mov	r0, r5
   31150:	b003      	add	sp, #12
   31152:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
   31154:	a901      	add	r1, sp, #4
   31156:	f000 fea3 	bl	31ea0 <hci_acl_handle>
	if (evt) {
   3115a:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
   3115c:	4605      	mov	r5, r0
	if (evt) {
   3115e:	b113      	cbz	r3, 31166 <hci_driver_send+0x2e>
		bt_recv_prio(evt);
   31160:	4618      	mov	r0, r3
   31162:	f7fa fa63 	bl	2b62c <bt_recv_prio>
	if (!err) {
   31166:	2d00      	cmp	r5, #0
   31168:	d1f1      	bne.n	3114e <hci_driver_send+0x16>
		net_buf_unref(buf);
   3116a:	4620      	mov	r0, r4
   3116c:	f00b ff9c 	bl	3d0a8 <net_buf_unref>
   31170:	2500      	movs	r5, #0
}
   31172:	4628      	mov	r0, r5
   31174:	b003      	add	sp, #12
   31176:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   31178:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
   3117a:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   3117c:	f000 fa34 	bl	315e8 <hci_cmd_handle>
	if (evt) {
   31180:	2800      	cmp	r0, #0
   31182:	d0f2      	beq.n	3116a <hci_driver_send+0x32>
		bt_recv_prio(evt);
   31184:	f7fa fa52 	bl	2b62c <bt_recv_prio>
		if (node_rx) {
   31188:	9d01      	ldr	r5, [sp, #4]
   3118a:	2d00      	cmp	r5, #0
   3118c:	d0ed      	beq.n	3116a <hci_driver_send+0x32>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   3118e:	4628      	mov	r0, r5
   31190:	f001 fa2c 	bl	325ec <hci_get_class>
   31194:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
   31196:	9901      	ldr	r1, [sp, #4]
   31198:	4801      	ldr	r0, [pc, #4]	; (311a0 <hci_driver_send+0x68>)
   3119a:	f017 fa84 	bl	486a6 <k_queue_append>
	if (!err) {
   3119e:	e7e4      	b.n	3116a <hci_driver_send+0x32>
   311a0:	20000bec 	.word	0x20000bec

000311a4 <recv_thread>:
{
   311a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_queue_get(queue, timeout);
   311a8:	4e42      	ldr	r6, [pc, #264]	; (312b4 <recv_thread+0x110>)
		LL_ASSERT(0);
   311aa:	f8df 810c 	ldr.w	r8, [pc, #268]	; 312b8 <recv_thread+0x114>
   311ae:	4f43      	ldr	r7, [pc, #268]	; (312bc <recv_thread+0x118>)
{
   311b0:	b082      	sub	sp, #8
   311b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   311b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   311ba:	4630      	mov	r0, r6
   311bc:	f010 f99e 	bl	414fc <z_impl_k_queue_get>
		if (node_rx && !buf) {
   311c0:	2800      	cmp	r0, #0
   311c2:	d0f6      	beq.n	311b2 <recv_thread+0xe>
	uint8_t class = node_rx->hdr.user_meta;
   311c4:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   311c6:	9001      	str	r0, [sp, #4]
	switch (class) {
   311c8:	2b04      	cmp	r3, #4
   311ca:	d821      	bhi.n	31210 <recv_thread+0x6c>
   311cc:	2b00      	cmp	r3, #0
   311ce:	d14b      	bne.n	31268 <recv_thread+0xc4>
		LL_ASSERT(0);
   311d0:	483b      	ldr	r0, [pc, #236]	; (312c0 <recv_thread+0x11c>)
   311d2:	f44f 73cd 	mov.w	r3, #410	; 0x19a
   311d6:	4642      	mov	r2, r8
   311d8:	4639      	mov	r1, r7
   311da:	f011 fb73 	bl	428c4 <printk>
   311de:	4040      	eors	r0, r0
   311e0:	f380 8811 	msr	BASEPRI, r0
   311e4:	f04f 0003 	mov.w	r0, #3
   311e8:	df02      	svc	2
	node_rx->hdr.next = NULL;
   311ea:	9b01      	ldr	r3, [sp, #4]
   311ec:	2200      	movs	r2, #0
   311ee:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   311f0:	a801      	add	r0, sp, #4
   311f2:	f001 fea1 	bl	32f38 <ll_rx_mem_release>
   311f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   311fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   311fe:	4630      	mov	r0, r6
   31200:	f010 f97c 	bl	414fc <z_impl_k_queue_get>
		if (node_rx && !buf) {
   31204:	2800      	cmp	r0, #0
   31206:	d0d4      	beq.n	311b2 <recv_thread+0xe>
	uint8_t class = node_rx->hdr.user_meta;
   31208:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   3120a:	9001      	str	r0, [sp, #4]
	switch (class) {
   3120c:	2b04      	cmp	r3, #4
   3120e:	d9dd      	bls.n	311cc <recv_thread+0x28>
   31210:	2b05      	cmp	r3, #5
   31212:	d1dd      	bne.n	311d0 <recv_thread+0x2c>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   31214:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   31218:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3121c:	2003      	movs	r0, #3
   3121e:	f7f9 fd39 	bl	2ac94 <bt_buf_get_rx>
   31222:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   31224:	4621      	mov	r1, r4
   31226:	9801      	ldr	r0, [sp, #4]
   31228:	f000 fec0 	bl	31fac <hci_acl_encode>
	node_rx->hdr.next = NULL;
   3122c:	9b01      	ldr	r3, [sp, #4]
   3122e:	2200      	movs	r2, #0
   31230:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   31232:	a801      	add	r0, sp, #4
   31234:	f001 fe80 	bl	32f38 <ll_rx_mem_release>
		while (buf) {
   31238:	2c00      	cmp	r4, #0
   3123a:	d0ba      	beq.n	311b2 <recv_thread+0xe>
			frag = net_buf_ref(buf);
   3123c:	4620      	mov	r0, r4
   3123e:	f016 fb41 	bl	478c4 <net_buf_ref>
			buf = net_buf_frag_del(NULL, buf);
   31242:	4621      	mov	r1, r4
			frag = net_buf_ref(buf);
   31244:	4605      	mov	r5, r0
			buf = net_buf_frag_del(NULL, buf);
   31246:	2000      	movs	r0, #0
   31248:	f016 fb62 	bl	47910 <net_buf_frag_del>
			if (frag->len) {
   3124c:	89ab      	ldrh	r3, [r5, #12]
			buf = net_buf_frag_del(NULL, buf);
   3124e:	4604      	mov	r4, r0
				bt_recv(frag);
   31250:	4628      	mov	r0, r5
			if (frag->len) {
   31252:	b133      	cbz	r3, 31262 <recv_thread+0xbe>
				bt_recv(frag);
   31254:	f7fa f966 	bl	2b524 <bt_recv>
	z_impl_k_yield();
   31258:	f010 fdf2 	bl	41e40 <z_impl_k_yield>
		while (buf) {
   3125c:	2c00      	cmp	r4, #0
   3125e:	d1ed      	bne.n	3123c <recv_thread+0x98>
   31260:	e7a7      	b.n	311b2 <recv_thread+0xe>
				net_buf_unref(frag);
   31262:	f00b ff21 	bl	3d0a8 <net_buf_unref>
   31266:	e7f7      	b.n	31258 <recv_thread+0xb4>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   31268:	2b02      	cmp	r3, #2
   3126a:	d013      	beq.n	31294 <recv_thread+0xf0>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   3126c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   31270:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   31274:	2001      	movs	r0, #1
   31276:	f7f9 fd0d 	bl	2ac94 <bt_buf_get_rx>
   3127a:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
   3127c:	9801      	ldr	r0, [sp, #4]
		if (buf) {
   3127e:	b19c      	cbz	r4, 312a8 <recv_thread+0x104>
			hci_evt_encode(node_rx, buf);
   31280:	4621      	mov	r1, r4
   31282:	f000 fecd 	bl	32020 <hci_evt_encode>
	node_rx->hdr.next = NULL;
   31286:	9b01      	ldr	r3, [sp, #4]
   31288:	2200      	movs	r2, #0
   3128a:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   3128c:	a801      	add	r0, sp, #4
   3128e:	f001 fe53 	bl	32f38 <ll_rx_mem_release>
		while (buf) {
   31292:	e7d3      	b.n	3123c <recv_thread+0x98>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   31294:	2200      	movs	r2, #0
   31296:	2300      	movs	r3, #0
   31298:	2101      	movs	r1, #1
   3129a:	2000      	movs	r0, #0
   3129c:	f7f9 fd24 	bl	2ace8 <bt_buf_get_evt>
   312a0:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
   312a2:	9801      	ldr	r0, [sp, #4]
		if (buf) {
   312a4:	2c00      	cmp	r4, #0
   312a6:	d1eb      	bne.n	31280 <recv_thread+0xdc>
	node_rx->hdr.next = NULL;
   312a8:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
   312aa:	a801      	add	r0, sp, #4
   312ac:	f001 fe44 	bl	32f38 <ll_rx_mem_release>
		while (buf) {
   312b0:	e77f      	b.n	311b2 <recv_thread+0xe>
   312b2:	bf00      	nop
   312b4:	20000bec 	.word	0x20000bec
   312b8:	00049c88 	.word	0x00049c88
   312bc:	00049cc8 	.word	0x00049cc8
   312c0:	00049c68 	.word	0x00049c68

000312c4 <prio_recv_thread>:
{
   312c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   312c8:	4f2e      	ldr	r7, [pc, #184]	; (31384 <prio_recv_thread+0xc0>)
				k_fifo_put(&recv_fifo, node_rx);
   312ca:	4e2f      	ldr	r6, [pc, #188]	; (31388 <prio_recv_thread+0xc4>)
{
   312cc:	b082      	sub	sp, #8
   312ce:	e00c      	b.n	312ea <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   312d0:	f7f9 fd0a 	bl	2ace8 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   312d4:	4622      	mov	r2, r4
   312d6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   312da:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   312dc:	f001 f96e 	bl	325bc <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   312e0:	4620      	mov	r0, r4
   312e2:	f7fa f9a3 	bl	2b62c <bt_recv_prio>
	z_impl_k_yield();
   312e6:	f010 fdab 	bl	41e40 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   312ea:	f10d 0102 	add.w	r1, sp, #2
   312ee:	a801      	add	r0, sp, #4
   312f0:	f001 fc66 	bl	32bc0 <ll_rx_get>
   312f4:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   312f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   312fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   312fe:	2100      	movs	r1, #0
   31300:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   31302:	2c00      	cmp	r4, #0
   31304:	d1e4      	bne.n	312d0 <prio_recv_thread+0xc>
		if (node_rx) {
   31306:	9b01      	ldr	r3, [sp, #4]
   31308:	b1b3      	cbz	r3, 31338 <prio_recv_thread+0x74>
			ll_rx_dequeue();
   3130a:	f001 fd45 	bl	32d98 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   3130e:	f8dd 8004 	ldr.w	r8, [sp, #4]
   31312:	4640      	mov	r0, r8
   31314:	f001 f96a 	bl	325ec <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
   31318:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   3131a:	f888 0005 	strb.w	r0, [r8, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   3131e:	796b      	ldrb	r3, [r5, #5]
   31320:	2b03      	cmp	r3, #3
   31322:	d102      	bne.n	3132a <prio_recv_thread+0x66>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   31324:	792b      	ldrb	r3, [r5, #4]
   31326:	2b17      	cmp	r3, #23
   31328:	d00e      	beq.n	31348 <prio_recv_thread+0x84>
				k_fifo_put(&recv_fifo, node_rx);
   3132a:	4629      	mov	r1, r5
   3132c:	4630      	mov	r0, r6
   3132e:	f017 f9ba 	bl	486a6 <k_queue_append>
		if (iso_received || node_rx) {
   31332:	9b01      	ldr	r3, [sp, #4]
   31334:	2b00      	cmp	r3, #0
   31336:	d1d8      	bne.n	312ea <prio_recv_thread+0x26>
	return z_impl_k_sem_take(sem, timeout);
   31338:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3133c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   31340:	4638      	mov	r0, r7
   31342:	f010 f935 	bl	415b0 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   31346:	e7d0      	b.n	312ea <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   31348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3134c:	4621      	mov	r1, r4
   3134e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   31352:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   31354:	f8b5 8006 	ldrh.w	r8, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   31358:	f7f9 fcc6 	bl	2ace8 <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
   3135c:	4641      	mov	r1, r8
   3135e:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   31360:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   31362:	f105 001c 	add.w	r0, r5, #28
   31366:	f000 fdf9 	bl	31f5c <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   3136a:	4640      	mov	r0, r8
   3136c:	f000 fe16 	bl	31f9c <hci_disconn_complete_process>
				bt_recv_prio(buf);
   31370:	4620      	mov	r0, r4
			if (buf) {
   31372:	b124      	cbz	r4, 3137e <prio_recv_thread+0xba>
				bt_recv_prio(buf);
   31374:	f7fa f95a 	bl	2b62c <bt_recv_prio>
					net_buf_unref(buf);
   31378:	4620      	mov	r0, r4
   3137a:	f00b fe95 	bl	3d0a8 <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
   3137e:	9d01      	ldr	r5, [sp, #4]
   31380:	e7d3      	b.n	3132a <prio_recv_thread+0x66>
   31382:	bf00      	nop
   31384:	20000bbc 	.word	0x20000bbc
   31388:	20000bec 	.word	0x20000bec

0003138c <hci_driver_open>:
{
   3138c:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
   3138e:	481a      	ldr	r0, [pc, #104]	; (313f8 <hci_driver_open+0x6c>)
{
   31390:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
   31392:	f002 fa4d 	bl	33830 <ll_init>
	if (err) {
   31396:	4604      	mov	r4, r0
   31398:	bb58      	cbnz	r0, 313f2 <hci_driver_open+0x66>
	hci_init(NULL);
   3139a:	f001 f93d 	bl	32618 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   3139e:	2600      	movs	r6, #0
   313a0:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   313a2:	f06f 0209 	mvn.w	r2, #9
   313a6:	e9cd 2403 	strd	r2, r4, [sp, #12]
   313aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
   313ae:	e9cd 4401 	strd	r4, r4, [sp, #4]
   313b2:	4b12      	ldr	r3, [pc, #72]	; (313fc <hci_driver_open+0x70>)
   313b4:	4912      	ldr	r1, [pc, #72]	; (31400 <hci_driver_open+0x74>)
   313b6:	9400      	str	r4, [sp, #0]
   313b8:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   313bc:	4811      	ldr	r0, [pc, #68]	; (31404 <hci_driver_open+0x78>)
   313be:	f00f fe8f 	bl	410e0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   313c2:	4911      	ldr	r1, [pc, #68]	; (31408 <hci_driver_open+0x7c>)
   313c4:	480f      	ldr	r0, [pc, #60]	; (31404 <hci_driver_open+0x78>)
   313c6:	f017 f8d5 	bl	48574 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   313ca:	f06f 0207 	mvn.w	r2, #7
   313ce:	e9cd 2403 	strd	r2, r4, [sp, #12]
   313d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
   313d6:	e9cd 4401 	strd	r4, r4, [sp, #4]
   313da:	4b0c      	ldr	r3, [pc, #48]	; (3140c <hci_driver_open+0x80>)
   313dc:	490c      	ldr	r1, [pc, #48]	; (31410 <hci_driver_open+0x84>)
   313de:	9400      	str	r4, [sp, #0]
   313e0:	f640 0298 	movw	r2, #2200	; 0x898
   313e4:	480b      	ldr	r0, [pc, #44]	; (31414 <hci_driver_open+0x88>)
   313e6:	f00f fe7b 	bl	410e0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   313ea:	490b      	ldr	r1, [pc, #44]	; (31418 <hci_driver_open+0x8c>)
   313ec:	4809      	ldr	r0, [pc, #36]	; (31414 <hci_driver_open+0x88>)
   313ee:	f017 f8c1 	bl	48574 <z_impl_k_thread_name_set>
}
   313f2:	4620      	mov	r0, r4
   313f4:	b008      	add	sp, #32
   313f6:	bdd0      	pop	{r4, r6, r7, pc}
   313f8:	20000bbc 	.word	0x20000bbc
   313fc:	000312c5 	.word	0x000312c5
   31400:	20004f98 	.word	0x20004f98
   31404:	20001460 	.word	0x20001460
   31408:	00049ccc 	.word	0x00049ccc
   3140c:	000311a5 	.word	0x000311a5
   31410:	20004700 	.word	0x20004700
   31414:	200013e0 	.word	0x200013e0
   31418:	00049cd8 	.word	0x00049cd8

0003141c <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   3141c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   3141e:	4c18      	ldr	r4, [pc, #96]	; (31480 <le_remote_feat_complete+0x64>)
   31420:	6864      	ldr	r4, [r4, #4]
   31422:	00a4      	lsls	r4, r4, #2
   31424:	d504      	bpl.n	31430 <le_remote_feat_complete+0x14>
   31426:	4615      	mov	r5, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   31428:	4a16      	ldr	r2, [pc, #88]	; (31484 <le_remote_feat_complete+0x68>)
   3142a:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   3142c:	0712      	lsls	r2, r2, #28
   3142e:	d400      	bmi.n	31432 <le_remote_feat_complete+0x16>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   31430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   31432:	f103 0408 	add.w	r4, r3, #8
   31436:	4607      	mov	r7, r0
   31438:	460e      	mov	r6, r1
   3143a:	4620      	mov	r0, r4
   3143c:	2102      	movs	r1, #2
   3143e:	f016 fa73 	bl	47928 <net_buf_simple_add>
	hdr->evt = evt;
   31442:	f640 433e 	movw	r3, #3134	; 0xc3e
   31446:	8003      	strh	r3, [r0, #0]
   31448:	2101      	movs	r1, #1
   3144a:	4620      	mov	r0, r4
   3144c:	f016 fa6c 	bl	47928 <net_buf_simple_add>
   31450:	4603      	mov	r3, r0
	me->subevent = subevt;
   31452:	2204      	movs	r2, #4
   31454:	701a      	strb	r2, [r3, #0]
   31456:	4620      	mov	r0, r4
   31458:	210b      	movs	r1, #11
   3145a:	f016 fa65 	bl	47928 <net_buf_simple_add>
		memcpy(&sep->features[0],
   3145e:	2208      	movs	r2, #8
	sep->status = status;
   31460:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   31462:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
   31466:	b92f      	cbnz	r7, 31474 <le_remote_feat_complete+0x58>
		memcpy(&sep->features[0],
   31468:	1d31      	adds	r1, r6, #4
   3146a:	3003      	adds	r0, #3
}
   3146c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
   31470:	f013 bb27 	b.w	44ac2 <memcpy>
}
   31474:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   31478:	2100      	movs	r1, #0
   3147a:	3003      	adds	r0, #3
   3147c:	f013 bb2c 	b.w	44ad8 <memset>
   31480:	20000160 	.word	0x20000160
   31484:	20000158 	.word	0x20000158

00031488 <hci_vendor_cmd_handle_common>:
{
   31488:	b570      	push	{r4, r5, r6, lr}
	switch (ocf) {
   3148a:	3801      	subs	r0, #1
{
   3148c:	b086      	sub	sp, #24
   3148e:	4614      	mov	r4, r2
	switch (ocf) {
   31490:	2809      	cmp	r0, #9
   31492:	d806      	bhi.n	314a2 <hci_vendor_cmd_handle_common+0x1a>
   31494:	e8df f000 	tbb	[pc, r0]
   31498:	05402609 	.word	0x05402609
   3149c:	63055105 	.word	0x63055105
   314a0:	917e      	.short	0x917e
   314a2:	f06f 0015 	mvn.w	r0, #21
}
   314a6:	b006      	add	sp, #24
   314a8:	bd70      	pop	{r4, r5, r6, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   314aa:	4b4d      	ldr	r3, [pc, #308]	; (315e0 <hci_vendor_cmd_handle_common+0x158>)
   314ac:	210d      	movs	r1, #13
   314ae:	8818      	ldrh	r0, [r3, #0]
   314b0:	f013 ffb9 	bl	45426 <bt_hci_cmd_complete_create>
   314b4:	210d      	movs	r1, #13
   314b6:	6020      	str	r0, [r4, #0]
   314b8:	3008      	adds	r0, #8
   314ba:	f016 fa35 	bl	47928 <net_buf_simple_add>
	rp->status = 0x00;
   314be:	2300      	movs	r3, #0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   314c0:	f04f 1102 	mov.w	r1, #131074	; 0x20002
	rp->fw_variant = 0U;
   314c4:	f44f 7240 	mov.w	r2, #768	; 0x300
	rp->status = 0x00;
   314c8:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   314ca:	f8c0 1001 	str.w	r1, [r0, #1]
	rp->fw_variant = 0U;
   314ce:	f8a0 2005 	strh.w	r2, [r0, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   314d2:	71c3      	strb	r3, [r0, #7]
   314d4:	7203      	strb	r3, [r0, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   314d6:	7243      	strb	r3, [r0, #9]
   314d8:	7283      	strb	r3, [r0, #10]
   314da:	72c3      	strb	r3, [r0, #11]
   314dc:	7303      	strb	r3, [r0, #12]
	return 0;
   314de:	2000      	movs	r0, #0
}
   314e0:	b006      	add	sp, #24
   314e2:	bd70      	pop	{r4, r5, r6, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   314e4:	4b3e      	ldr	r3, [pc, #248]	; (315e0 <hci_vendor_cmd_handle_common+0x158>)
   314e6:	2141      	movs	r1, #65	; 0x41
   314e8:	8818      	ldrh	r0, [r3, #0]
   314ea:	f013 ff9c 	bl	45426 <bt_hci_cmd_complete_create>
   314ee:	2141      	movs	r1, #65	; 0x41
   314f0:	6020      	str	r0, [r4, #0]
   314f2:	3008      	adds	r0, #8
   314f4:	f016 fa18 	bl	47928 <net_buf_simple_add>
	rp->status = 0x00;
   314f8:	2100      	movs	r1, #0
   314fa:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   314fc:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   314fe:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   31502:	f013 fae9 	bl	44ad8 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   31506:	7862      	ldrb	r2, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   31508:	78a3      	ldrb	r3, [r4, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
   3150a:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
   3150e:	f043 0303 	orr.w	r3, r3, #3
	rp->commands[0] |= BIT(5) | BIT(7);
   31512:	7062      	strb	r2, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   31514:	70a3      	strb	r3, [r4, #2]
}
   31516:	e7e2      	b.n	314de <hci_vendor_cmd_handle_common+0x56>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31518:	4b31      	ldr	r3, [pc, #196]	; (315e0 <hci_vendor_cmd_handle_common+0x158>)
   3151a:	2109      	movs	r1, #9
   3151c:	8818      	ldrh	r0, [r3, #0]
   3151e:	f013 ff82 	bl	45426 <bt_hci_cmd_complete_create>
   31522:	2109      	movs	r1, #9
   31524:	6020      	str	r0, [r4, #0]
   31526:	3008      	adds	r0, #8
   31528:	f016 f9fe 	bl	47928 <net_buf_simple_add>
	rp->status = 0x00;
   3152c:	2100      	movs	r1, #0
   3152e:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   31532:	2208      	movs	r2, #8
   31534:	f013 fad0 	bl	44ad8 <memset>
}
   31538:	e7d1      	b.n	314de <hci_vendor_cmd_handle_common+0x56>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   3153a:	6889      	ldr	r1, [r1, #8]
   3153c:	2000      	movs	r0, #0
   3153e:	f7ff fd9b 	bl	31078 <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   31542:	4b27      	ldr	r3, [pc, #156]	; (315e0 <hci_vendor_cmd_handle_common+0x158>)
   31544:	2101      	movs	r1, #1
   31546:	8818      	ldrh	r0, [r3, #0]
   31548:	f013 ff6d 	bl	45426 <bt_hci_cmd_complete_create>
   3154c:	2101      	movs	r1, #1
   3154e:	4605      	mov	r5, r0
   31550:	3008      	adds	r0, #8
   31552:	f016 f9e9 	bl	47928 <net_buf_simple_add>
	ccst->status = status;
   31556:	2300      	movs	r3, #0
   31558:	7003      	strb	r3, [r0, #0]
	*evt = cmd_complete_status(0x00);
   3155a:	6025      	str	r5, [r4, #0]
}
   3155c:	e7bf      	b.n	314de <hci_vendor_cmd_handle_common+0x56>
	const char build_info[] = HCI_VS_BUILD_INFO;
   3155e:	4d21      	ldr	r5, [pc, #132]	; (315e4 <hci_vendor_cmd_handle_common+0x15c>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31560:	4e1f      	ldr	r6, [pc, #124]	; (315e0 <hci_vendor_cmd_handle_common+0x158>)
	const char build_info[] = HCI_VS_BUILD_INFO;
   31562:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   31564:	f10d 0c04 	add.w	ip, sp, #4
   31568:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   3156c:	682b      	ldr	r3, [r5, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3156e:	8830      	ldrh	r0, [r6, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
   31570:	f88c 3000 	strb.w	r3, [ip]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31574:	2112      	movs	r1, #18
   31576:	f013 ff56 	bl	45426 <bt_hci_cmd_complete_create>
   3157a:	2112      	movs	r1, #18
   3157c:	6020      	str	r0, [r4, #0]
   3157e:	3008      	adds	r0, #8
   31580:	f016 f9d2 	bl	47928 <net_buf_simple_add>
	rp->status = 0x00;
   31584:	2300      	movs	r3, #0
   31586:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   3158a:	2211      	movs	r2, #17
   3158c:	a901      	add	r1, sp, #4
   3158e:	f013 fa98 	bl	44ac2 <memcpy>
}
   31592:	e7a4      	b.n	314de <hci_vendor_cmd_handle_common+0x56>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31594:	4b12      	ldr	r3, [pc, #72]	; (315e0 <hci_vendor_cmd_handle_common+0x158>)
   31596:	2118      	movs	r1, #24
   31598:	8818      	ldrh	r0, [r3, #0]
   3159a:	f013 ff44 	bl	45426 <bt_hci_cmd_complete_create>
   3159e:	2118      	movs	r1, #24
   315a0:	6020      	str	r0, [r4, #0]
   315a2:	3008      	adds	r0, #8
   315a4:	f016 f9c0 	bl	47928 <net_buf_simple_add>
	rp->status = 0x00;
   315a8:	2300      	movs	r3, #0
   315aa:	4604      	mov	r4, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   315ac:	2101      	movs	r1, #1
	rp->status = 0x00;
   315ae:	f800 3b02 	strb.w	r3, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   315b2:	f00b fc3b 	bl	3ce2c <hci_vendor_read_static_addr>
   315b6:	7060      	strb	r0, [r4, #1]
}
   315b8:	e791      	b.n	314de <hci_vendor_cmd_handle_common+0x56>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   315ba:	4b09      	ldr	r3, [pc, #36]	; (315e0 <hci_vendor_cmd_handle_common+0x158>)
   315bc:	2121      	movs	r1, #33	; 0x21
   315be:	8818      	ldrh	r0, [r3, #0]
   315c0:	f013 ff31 	bl	45426 <bt_hci_cmd_complete_create>
   315c4:	2121      	movs	r1, #33	; 0x21
   315c6:	6020      	str	r0, [r4, #0]
   315c8:	3008      	adds	r0, #8
   315ca:	f016 f9ad 	bl	47928 <net_buf_simple_add>
	rp->status = 0x00;
   315ce:	4601      	mov	r1, r0
   315d0:	2300      	movs	r3, #0
   315d2:	f801 3b11 	strb.w	r3, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   315d6:	3001      	adds	r0, #1
   315d8:	f00b fc78 	bl	3cecc <hci_vendor_read_key_hierarchy_roots>
}
   315dc:	e77f      	b.n	314de <hci_vendor_cmd_handle_common+0x56>
   315de:	bf00      	nop
   315e0:	20003b08 	.word	0x20003b08
   315e4:	00049d00 	.word	0x00049d00

000315e8 <hci_cmd_handle>:
{
   315e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (cmd->len < sizeof(*chdr)) {
   315ec:	8983      	ldrh	r3, [r0, #12]
{
   315ee:	b08c      	sub	sp, #48	; 0x30
	struct net_buf *evt = NULL;
   315f0:	2200      	movs	r2, #0
	if (cmd->len < sizeof(*chdr)) {
   315f2:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
   315f4:	9207      	str	r2, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
   315f6:	d92d      	bls.n	31654 <hci_cmd_handle+0x6c>
	return net_buf_simple_pull_mem(&buf->b, len);
   315f8:	4604      	mov	r4, r0
   315fa:	2103      	movs	r1, #3
   315fc:	3008      	adds	r0, #8
   315fe:	f016 f9ba 	bl	47976 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   31602:	89a2      	ldrh	r2, [r4, #12]
   31604:	7883      	ldrb	r3, [r0, #2]
   31606:	429a      	cmp	r2, r3
   31608:	d324      	bcc.n	31654 <hci_cmd_handle+0x6c>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   3160a:	8802      	ldrh	r2, [r0, #0]
   3160c:	4ed0      	ldr	r6, [pc, #832]	; (31950 <hci_cmd_handle+0x368>)
	switch (BT_OGF(_opcode)) {
   3160e:	f3c2 2385 	ubfx	r3, r2, #10, #6
   31612:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
   31614:	8032      	strh	r2, [r6, #0]
   31616:	b290      	uxth	r0, r2
	ocf = BT_OCF(_opcode);
   31618:	f3c2 0509 	ubfx	r5, r2, #0, #10
	switch (BT_OGF(_opcode)) {
   3161c:	d809      	bhi.n	31632 <hci_cmd_handle+0x4a>
   3161e:	b19b      	cbz	r3, 31648 <hci_cmd_handle+0x60>
   31620:	3b01      	subs	r3, #1
   31622:	2b07      	cmp	r3, #7
   31624:	d810      	bhi.n	31648 <hci_cmd_handle+0x60>
   31626:	e8df f003 	tbb	[pc, r3]
   3162a:	0f1a      	.short	0x0f1a
   3162c:	0f0f4926 	.word	0x0f0f4926
   31630:	610f      	.short	0x610f
   31632:	2b3f      	cmp	r3, #63	; 0x3f
   31634:	d108      	bne.n	31648 <hci_cmd_handle+0x60>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   31636:	aa07      	add	r2, sp, #28
   31638:	4621      	mov	r1, r4
   3163a:	4628      	mov	r0, r5
   3163c:	f7ff ff24 	bl	31488 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   31640:	3016      	adds	r0, #22
   31642:	f040 841c 	bne.w	31e7e <hci_cmd_handle+0x896>
	return bt_hci_cmd_status_create(_opcode, status);
   31646:	8830      	ldrh	r0, [r6, #0]
   31648:	2101      	movs	r1, #1
}
   3164a:	b00c      	add	sp, #48	; 0x30
   3164c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_status_create(_opcode, status);
   31650:	f013 befb 	b.w	4544a <bt_hci_cmd_status_create>
		return NULL;
   31654:	2400      	movs	r4, #0
}
   31656:	4620      	mov	r0, r4
   31658:	b00c      	add	sp, #48	; 0x30
   3165a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (ocf) {
   3165e:	2d06      	cmp	r5, #6
   31660:	f000 83c8 	beq.w	31df4 <hci_cmd_handle+0x80c>
   31664:	2d1d      	cmp	r5, #29
   31666:	d1ef      	bne.n	31648 <hci_cmd_handle+0x60>
	handle = sys_le16_to_cpu(cmd->handle);
   31668:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   3166a:	8818      	ldrh	r0, [r3, #0]
   3166c:	f003 ff36 	bl	354dc <ll_version_ind_send>
   31670:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   31672:	8830      	ldrh	r0, [r6, #0]
   31674:	e7e9      	b.n	3164a <hci_cmd_handle+0x62>
	switch (ocf) {
   31676:	2d63      	cmp	r5, #99	; 0x63
   31678:	f000 83fe 	beq.w	31e78 <hci_cmd_handle+0x890>
   3167c:	f200 80ec 	bhi.w	31858 <hci_cmd_handle+0x270>
   31680:	2d03      	cmp	r5, #3
   31682:	f000 83d7 	beq.w	31e34 <hci_cmd_handle+0x84c>
   31686:	2d2d      	cmp	r5, #45	; 0x2d
   31688:	f040 80d2 	bne.w	31830 <hci_cmd_handle+0x248>
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
   3168c:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3168e:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
   31690:	881e      	ldrh	r6, [r3, #0]
	type = cmd->type;
   31692:	f893 8002 	ldrb.w	r8, [r3, #2]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31696:	f013 fec6 	bl	45426 <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
   3169a:	2104      	movs	r1, #4
   3169c:	4604      	mov	r4, r0
   3169e:	3008      	adds	r0, #8
   316a0:	f016 f942 	bl	47928 <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
   316a4:	b2b7      	uxth	r7, r6
   316a6:	4605      	mov	r5, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   316a8:	1cc3      	adds	r3, r0, #3
   316aa:	4642      	mov	r2, r8
   316ac:	4639      	mov	r1, r7
   316ae:	2002      	movs	r0, #2
   316b0:	f7ff fd26 	bl	31100 <ll_tx_pwr_lvl_get>
	rp->handle = sys_cpu_to_le16(handle);
   316b4:	f8a5 6001 	strh.w	r6, [r5, #1]
	rp->status = status;
   316b8:	7028      	strb	r0, [r5, #0]
	if (err == -EINVAL) {
   316ba:	e7cc      	b.n	31656 <hci_cmd_handle+0x6e>
	switch (ocf) {
   316bc:	1e6a      	subs	r2, r5, #1
   316be:	2a08      	cmp	r2, #8
   316c0:	d8c2      	bhi.n	31648 <hci_cmd_handle+0x60>
   316c2:	a301      	add	r3, pc, #4	; (adr r3, 316c8 <hci_cmd_handle+0xe0>)
   316c4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   316c8:	00031961 	.word	0x00031961
   316cc:	000318cf 	.word	0x000318cf
   316d0:	000318ab 	.word	0x000318ab
   316d4:	00031649 	.word	0x00031649
   316d8:	00031649 	.word	0x00031649
   316dc:	00031649 	.word	0x00031649
   316e0:	00031649 	.word	0x00031649
   316e4:	00031649 	.word	0x00031649
   316e8:	0003188d 	.word	0x0003188d
	switch (ocf) {
   316ec:	1e6a      	subs	r2, r5, #1
   316ee:	2a4d      	cmp	r2, #77	; 0x4d
   316f0:	d8aa      	bhi.n	31648 <hci_cmd_handle+0x60>
   316f2:	a301      	add	r3, pc, #4	; (adr r3, 316f8 <hci_cmd_handle+0x110>)
   316f4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   316f8:	000319a9 	.word	0x000319a9
   316fc:	00031989 	.word	0x00031989
   31700:	00031a49 	.word	0x00031a49
   31704:	00031649 	.word	0x00031649
   31708:	00031a3f 	.word	0x00031a3f
   3170c:	00031a23 	.word	0x00031a23
   31710:	00031a0b 	.word	0x00031a0b
   31714:	000319ff 	.word	0x000319ff
   31718:	000319f3 	.word	0x000319f3
   3171c:	000319d3 	.word	0x000319d3
   31720:	00031649 	.word	0x00031649
   31724:	00031649 	.word	0x00031649
   31728:	00031649 	.word	0x00031649
   3172c:	00031649 	.word	0x00031649
   31730:	000319b5 	.word	0x000319b5
   31734:	00031cad 	.word	0x00031cad
   31738:	00031ca5 	.word	0x00031ca5
   3173c:	00031c8b 	.word	0x00031c8b
   31740:	00031c6b 	.word	0x00031c6b
   31744:	00031649 	.word	0x00031649
   31748:	00031c45 	.word	0x00031c45
   3174c:	00031c37 	.word	0x00031c37
   31750:	00031c07 	.word	0x00031c07
   31754:	00031be9 	.word	0x00031be9
   31758:	00031649 	.word	0x00031649
   3175c:	00031bdf 	.word	0x00031bdf
   31760:	00031bcf 	.word	0x00031bcf
   31764:	00031bb1 	.word	0x00031bb1
   31768:	00031649 	.word	0x00031649
   3176c:	00031649 	.word	0x00031649
   31770:	00031649 	.word	0x00031649
   31774:	00031b93 	.word	0x00031b93
   31778:	00031b7b 	.word	0x00031b7b
   3177c:	00031b6b 	.word	0x00031b6b
   31780:	00031b39 	.word	0x00031b39
   31784:	00031b2d 	.word	0x00031b2d
   31788:	00031649 	.word	0x00031649
   3178c:	00031649 	.word	0x00031649
   31790:	00031d4b 	.word	0x00031d4b
   31794:	00031d43 	.word	0x00031d43
   31798:	00031d3d 	.word	0x00031d3d
   3179c:	00031d1f 	.word	0x00031d1f
   317a0:	00031cf5 	.word	0x00031cf5
   317a4:	00031ccb 	.word	0x00031ccb
   317a8:	00031cc1 	.word	0x00031cc1
   317ac:	00031cb3 	.word	0x00031cb3
   317b0:	00031dad 	.word	0x00031dad
   317b4:	00031d59 	.word	0x00031d59
   317b8:	00031b0f 	.word	0x00031b0f
   317bc:	00031abb 	.word	0x00031abb
   317c0:	00031649 	.word	0x00031649
   317c4:	00031649 	.word	0x00031649
   317c8:	00031649 	.word	0x00031649
   317cc:	00031649 	.word	0x00031649
   317d0:	00031649 	.word	0x00031649
   317d4:	00031649 	.word	0x00031649
   317d8:	00031649 	.word	0x00031649
   317dc:	00031649 	.word	0x00031649
   317e0:	00031649 	.word	0x00031649
   317e4:	00031649 	.word	0x00031649
   317e8:	00031649 	.word	0x00031649
   317ec:	00031649 	.word	0x00031649
   317f0:	00031649 	.word	0x00031649
   317f4:	00031649 	.word	0x00031649
   317f8:	00031649 	.word	0x00031649
   317fc:	00031649 	.word	0x00031649
   31800:	00031649 	.word	0x00031649
   31804:	00031649 	.word	0x00031649
   31808:	00031649 	.word	0x00031649
   3180c:	00031649 	.word	0x00031649
   31810:	00031649 	.word	0x00031649
   31814:	00031649 	.word	0x00031649
   31818:	00031649 	.word	0x00031649
   3181c:	00031649 	.word	0x00031649
   31820:	00031a9b 	.word	0x00031a9b
   31824:	00031649 	.word	0x00031649
   31828:	00031649 	.word	0x00031649
   3182c:	00031a91 	.word	0x00031a91
	switch (ocf) {
   31830:	2d01      	cmp	r5, #1
   31832:	f47f af09 	bne.w	31648 <hci_cmd_handle+0x60>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   31836:	68a2      	ldr	r2, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
   31838:	4b46      	ldr	r3, [pc, #280]	; (31954 <hci_cmd_handle+0x36c>)
   3183a:	6811      	ldr	r1, [r2, #0]
   3183c:	6852      	ldr	r2, [r2, #4]
   3183e:	6019      	str	r1, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   31840:	2101      	movs	r1, #1
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   31842:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   31844:	f013 fdef 	bl	45426 <bt_hci_cmd_complete_create>
   31848:	2101      	movs	r1, #1
   3184a:	4604      	mov	r4, r0
   3184c:	3008      	adds	r0, #8
   3184e:	f016 f86b 	bl	47928 <net_buf_simple_add>
	ccst->status = status;
   31852:	2300      	movs	r3, #0
   31854:	7003      	strb	r3, [r0, #0]
	if (err == -EINVAL) {
   31856:	e6fe      	b.n	31656 <hci_cmd_handle+0x6e>
	switch (ocf) {
   31858:	2d7b      	cmp	r5, #123	; 0x7b
   3185a:	f000 82d3 	beq.w	31e04 <hci_cmd_handle+0x81c>
   3185e:	2d7c      	cmp	r5, #124	; 0x7c
   31860:	f47f aef2 	bne.w	31648 <hci_cmd_handle+0x60>
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
   31864:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   31866:	881f      	ldrh	r7, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   31868:	8859      	ldrh	r1, [r3, #2]
   3186a:	b2b8      	uxth	r0, r7
   3186c:	f003 ff6c 	bl	35748 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   31870:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31872:	2103      	movs	r1, #3
   31874:	8830      	ldrh	r0, [r6, #0]
   31876:	f013 fdd6 	bl	45426 <bt_hci_cmd_complete_create>
   3187a:	2103      	movs	r1, #3
   3187c:	4604      	mov	r4, r0
   3187e:	3008      	adds	r0, #8
   31880:	f016 f852 	bl	47928 <net_buf_simple_add>
	rp->status = status;
   31884:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   31886:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (err == -EINVAL) {
   3188a:	e6e4      	b.n	31656 <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3188c:	2107      	movs	r1, #7
   3188e:	f013 fdca 	bl	45426 <bt_hci_cmd_complete_create>
   31892:	2107      	movs	r1, #7
   31894:	4604      	mov	r4, r0
   31896:	3008      	adds	r0, #8
   31898:	f016 f846 	bl	47928 <net_buf_simple_add>
	rp->status = 0x00;
   3189c:	4601      	mov	r1, r0
   3189e:	2000      	movs	r0, #0
   318a0:	f801 0b01 	strb.w	r0, [r1], #1
	(void)ll_addr_read(0, &rp->bdaddr.val[0]);
   318a4:	f7ff fc14 	bl	310d0 <ll_addr_read>
	if (err == -EINVAL) {
   318a8:	e6d5      	b.n	31656 <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   318aa:	2109      	movs	r1, #9
   318ac:	f013 fdbb 	bl	45426 <bt_hci_cmd_complete_create>
   318b0:	2109      	movs	r1, #9
   318b2:	4604      	mov	r4, r0
   318b4:	3008      	adds	r0, #8
   318b6:	f016 f837 	bl	47928 <net_buf_simple_add>
	rp->status = 0x00;
   318ba:	2100      	movs	r1, #0
   318bc:	4605      	mov	r5, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   318be:	2208      	movs	r2, #8
	rp->status = 0x00;
   318c0:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   318c4:	f013 f908 	bl	44ad8 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   318c8:	2360      	movs	r3, #96	; 0x60
   318ca:	716b      	strb	r3, [r5, #5]
	if (err == -EINVAL) {
   318cc:	e6c3      	b.n	31656 <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   318ce:	2141      	movs	r1, #65	; 0x41
   318d0:	f013 fda9 	bl	45426 <bt_hci_cmd_complete_create>
   318d4:	2141      	movs	r1, #65	; 0x41
   318d6:	4604      	mov	r4, r0
   318d8:	3008      	adds	r0, #8
   318da:	f016 f825 	bl	47928 <net_buf_simple_add>
	rp->status = 0x00;
   318de:	2100      	movs	r1, #0
   318e0:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   318e2:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   318e4:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   318e8:	f013 f8f6 	bl	44ad8 <memset>
	rp->commands[10] |= BIT(2);
   318ec:	7aeb      	ldrb	r3, [r5, #11]
	rp->commands[5] |= BIT(6) | BIT(7);
   318ee:	79a9      	ldrb	r1, [r5, #6]
	rp->commands[14] |= BIT(3) | BIT(5);
   318f0:	7bea      	ldrb	r2, [r5, #15]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
   318f2:	f8d5 001a 	ldr.w	r0, [r5, #26]
	rp->commands[10] |= BIT(2);
   318f6:	f043 0304 	orr.w	r3, r3, #4
	rp->commands[5] |= BIT(6) | BIT(7);
   318fa:	f061 013f 	orn	r1, r1, #63	; 0x3f
	rp->commands[14] |= BIT(3) | BIT(5);
   318fe:	f042 0228 	orr.w	r2, r2, #40	; 0x28
	rp->commands[10] |= BIT(2);
   31902:	72eb      	strb	r3, [r5, #11]
	rp->commands[15] |= BIT(1);
   31904:	7c2b      	ldrb	r3, [r5, #16]
	rp->commands[5] |= BIT(6) | BIT(7);
   31906:	71a9      	strb	r1, [r5, #6]
	rp->commands[14] |= BIT(3) | BIT(5);
   31908:	73ea      	strb	r2, [r5, #15]
	rp->commands[22] |= BIT(2);
   3190a:	7de9      	ldrb	r1, [r5, #23]
	rp->commands[0] |= BIT(5);
   3190c:	786a      	ldrb	r2, [r5, #1]
	rp->commands[15] |= BIT(1);
   3190e:	f043 0302 	orr.w	r3, r3, #2
	rp->commands[22] |= BIT(2);
   31912:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[0] |= BIT(5);
   31916:	f042 0220 	orr.w	r2, r2, #32
	rp->commands[15] |= BIT(1);
   3191a:	742b      	strb	r3, [r5, #16]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   3191c:	4b0e      	ldr	r3, [pc, #56]	; (31958 <hci_cmd_handle+0x370>)
	rp->commands[22] |= BIT(2);
   3191e:	75e9      	strb	r1, [r5, #23]
	rp->commands[0] |= BIT(5);
   31920:	706a      	strb	r2, [r5, #1]
	rp->commands[32] |= BIT(4) | BIT(5);
   31922:	490e      	ldr	r1, [pc, #56]	; (3195c <hci_cmd_handle+0x374>)
   31924:	f8d5 2021 	ldr.w	r2, [r5, #33]	; 0x21
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   31928:	4303      	orrs	r3, r0
	rp->commands[32] |= BIT(4) | BIT(5);
   3192a:	4311      	orrs	r1, r2
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   3192c:	f8c5 301a 	str.w	r3, [r5, #26]
	rp->commands[39] |= BIT(2);
   31930:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   31934:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
	rp->commands[32] |= BIT(4) | BIT(5);
   31938:	f8c5 1021 	str.w	r1, [r5, #33]	; 0x21
	rp->commands[39] |= BIT(2);
   3193c:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[38] |= BIT(7);
   31940:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[39] |= BIT(2);
   31944:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   31948:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
	if (err == -EINVAL) {
   3194c:	e683      	b.n	31656 <hci_cmd_handle+0x6e>
   3194e:	bf00      	nop
   31950:	20003b08 	.word	0x20003b08
   31954:	20000160 	.word	0x20000160
   31958:	0ef7c3f7 	.word	0x0ef7c3f7
   3195c:	7ff9f030 	.word	0x7ff9f030
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31960:	2109      	movs	r1, #9
   31962:	f013 fd60 	bl	45426 <bt_hci_cmd_complete_create>
   31966:	2109      	movs	r1, #9
   31968:	4604      	mov	r4, r0
   3196a:	3008      	adds	r0, #8
   3196c:	f015 ffdc 	bl	47928 <net_buf_simple_add>
	rp->status = 0x00;
   31970:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	rp->hci_revision = sys_cpu_to_le16(0);
   31974:	2300      	movs	r3, #0
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   31976:	4ac7      	ldr	r2, [pc, #796]	; (31c94 <hci_cmd_handle+0x6ac>)
	rp->status = 0x00;
   31978:	8001      	strh	r1, [r0, #0]
	rp->lmp_version = LL_VERSION_NUMBER;
   3197a:	210c      	movs	r1, #12
	rp->hci_revision = sys_cpu_to_le16(0);
   3197c:	7083      	strb	r3, [r0, #2]
   3197e:	70c3      	strb	r3, [r0, #3]
	rp->lmp_version = LL_VERSION_NUMBER;
   31980:	7101      	strb	r1, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   31982:	f8c0 2005 	str.w	r2, [r0, #5]
	if (err == -EINVAL) {
   31986:	e666      	b.n	31656 <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31988:	2104      	movs	r1, #4
   3198a:	f013 fd4c 	bl	45426 <bt_hci_cmd_complete_create>
   3198e:	2104      	movs	r1, #4
   31990:	4604      	mov	r4, r0
   31992:	3008      	adds	r0, #8
   31994:	f015 ffc8 	bl	47928 <net_buf_simple_add>
	rp->status = 0x00;
   31998:	2300      	movs	r3, #0
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   3199a:	211b      	movs	r1, #27
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   3199c:	2203      	movs	r2, #3
	rp->status = 0x00;
   3199e:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   319a0:	7041      	strb	r1, [r0, #1]
   319a2:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   319a4:	70c2      	strb	r2, [r0, #3]
	if (err == -EINVAL) {
   319a6:	e656      	b.n	31656 <hci_cmd_handle+0x6e>
   319a8:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
   319aa:	4bbb      	ldr	r3, [pc, #748]	; (31c98 <hci_cmd_handle+0x6b0>)
   319ac:	6811      	ldr	r1, [r2, #0]
   319ae:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   319b0:	6019      	str	r1, [r3, #0]
   319b2:	e745      	b.n	31840 <hci_cmd_handle+0x258>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   319b4:	2102      	movs	r1, #2
   319b6:	f013 fd36 	bl	45426 <bt_hci_cmd_complete_create>
   319ba:	2102      	movs	r1, #2
   319bc:	4604      	mov	r4, r0
   319be:	3008      	adds	r0, #8
   319c0:	f015 ffb2 	bl	47928 <net_buf_simple_add>
	rp->status = 0x00;
   319c4:	2300      	movs	r3, #0
   319c6:	7003      	strb	r3, [r0, #0]
   319c8:	4605      	mov	r5, r0
	rp->fal_size = ll_fal_size_get();
   319ca:	f007 fc81 	bl	392d0 <ll_fal_size_get>
   319ce:	7068      	strb	r0, [r5, #1]
	if (err == -EINVAL) {
   319d0:	e641      	b.n	31656 <hci_cmd_handle+0x6e>
	status = ll_adv_enable(cmd->enable);
   319d2:	68a3      	ldr	r3, [r4, #8]
   319d4:	7818      	ldrb	r0, [r3, #0]
   319d6:	f7f4 ff57 	bl	26888 <ll_adv_enable>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   319da:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   319dc:	2101      	movs	r1, #1
   319de:	8830      	ldrh	r0, [r6, #0]
   319e0:	f013 fd21 	bl	45426 <bt_hci_cmd_complete_create>
   319e4:	2101      	movs	r1, #1
   319e6:	4604      	mov	r4, r0
   319e8:	3008      	adds	r0, #8
   319ea:	f015 ff9d 	bl	47928 <net_buf_simple_add>
	ccst->status = status;
   319ee:	7005      	strb	r5, [r0, #0]
	if (err == -EINVAL) {
   319f0:	e631      	b.n	31656 <hci_cmd_handle+0x6e>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   319f2:	68a1      	ldr	r1, [r4, #8]
   319f4:	f811 0b01 	ldrb.w	r0, [r1], #1
   319f8:	f002 fd76 	bl	344e8 <ll_adv_scan_rsp_set>
   319fc:	e7ed      	b.n	319da <hci_cmd_handle+0x3f2>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   319fe:	68a1      	ldr	r1, [r4, #8]
   31a00:	f811 0b01 	ldrb.w	r0, [r1], #1
   31a04:	f002 fd24 	bl	34450 <ll_adv_data_set>
   31a08:	e7e7      	b.n	319da <hci_cmd_handle+0x3f2>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31a0a:	2102      	movs	r1, #2
   31a0c:	f013 fd0b 	bl	45426 <bt_hci_cmd_complete_create>
   31a10:	2102      	movs	r1, #2
   31a12:	4604      	mov	r4, r0
   31a14:	3008      	adds	r0, #8
   31a16:	f015 ff87 	bl	47928 <net_buf_simple_add>
	rp->status = 0x00;
   31a1a:	2300      	movs	r3, #0
   31a1c:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
   31a1e:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
   31a20:	e619      	b.n	31656 <hci_cmd_handle+0x6e>
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
   31a22:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   31a24:	7ba5      	ldrb	r5, [r4, #14]
   31a26:	79a3      	ldrb	r3, [r4, #6]
   31a28:	7962      	ldrb	r2, [r4, #5]
   31a2a:	7921      	ldrb	r1, [r4, #4]
   31a2c:	8820      	ldrh	r0, [r4, #0]
   31a2e:	9502      	str	r5, [sp, #8]
   31a30:	7b65      	ldrb	r5, [r4, #13]
   31a32:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   31a34:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   31a36:	9400      	str	r4, [sp, #0]
   31a38:	f002 fb24 	bl	34084 <ll_adv_params_set>
   31a3c:	e7cd      	b.n	319da <hci_cmd_handle+0x3f2>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   31a3e:	68a1      	ldr	r1, [r4, #8]
   31a40:	2001      	movs	r0, #1
   31a42:	f7ff fb19 	bl	31078 <ll_addr_set>
   31a46:	e7c8      	b.n	319da <hci_cmd_handle+0x3f2>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31a48:	2109      	movs	r1, #9
   31a4a:	f013 fcec 	bl	45426 <bt_hci_cmd_complete_create>
   31a4e:	2109      	movs	r1, #9
   31a50:	4604      	mov	r4, r0
   31a52:	3008      	adds	r0, #8
   31a54:	f015 ff68 	bl	47928 <net_buf_simple_add>
	rp->status = 0x00;
   31a58:	2500      	movs	r5, #0
   31a5a:	4606      	mov	r6, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   31a5c:	2208      	movs	r2, #8
   31a5e:	4629      	mov	r1, r5
	rp->status = 0x00;
   31a60:	f800 5b01 	strb.w	r5, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   31a64:	f013 f838 	bl	44ad8 <memset>
	sys_put_le64(ll_feat_get(), rp->features);
   31a68:	f000 fdfe 	bl	32668 <ll_feat_get>
	dst[0] = val;
   31a6c:	462b      	mov	r3, r5
   31a6e:	f361 0307 	bfi	r3, r1, #0, #8
	dst[1] = val >> 8;
   31a72:	f3c1 2207 	ubfx	r2, r1, #8, #8
	dst[0] = val;
   31a76:	f362 230f 	bfi	r3, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   31a7a:	0c09      	lsrs	r1, r1, #16
	dst[0] = val;
   31a7c:	f361 4317 	bfi	r3, r1, #16, #8
	dst[1] = val >> 8;
   31a80:	0a09      	lsrs	r1, r1, #8
	dst[0] = val;
   31a82:	f361 631f 	bfi	r3, r1, #24, #8
   31a86:	f8c6 0001 	str.w	r0, [r6, #1]
   31a8a:	f8c6 3005 	str.w	r3, [r6, #5]
	if (err == -EINVAL) {
   31a8e:	e5e2      	b.n	31656 <hci_cmd_handle+0x6e>
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
   31a90:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   31a92:	79c1      	ldrb	r1, [r0, #7]
   31a94:	f007 ff20 	bl	398d8 <ll_priv_mode_set>
   31a98:	e79f      	b.n	319da <hci_cmd_handle+0x3f2>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31a9a:	2103      	movs	r1, #3
   31a9c:	f013 fcc3 	bl	45426 <bt_hci_cmd_complete_create>
   31aa0:	2103      	movs	r1, #3
   31aa2:	4604      	mov	r4, r0
   31aa4:	3008      	adds	r0, #8
   31aa6:	f015 ff3f 	bl	47928 <net_buf_simple_add>
	rp->status = 0x00;
   31aaa:	4601      	mov	r1, r0
   31aac:	2300      	movs	r3, #0
   31aae:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   31ab2:	3001      	adds	r0, #1
   31ab4:	f7ff fb34 	bl	31120 <ll_tx_pwr_get>
	if (err == -EINVAL) {
   31ab8:	e5cd      	b.n	31656 <hci_cmd_handle+0x6e>
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
   31aba:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   31abc:	7895      	ldrb	r5, [r2, #2]
	return ((uint16_t)src[1] << 8) | src[0];
   31abe:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
   31ac0:	8817      	ldrh	r7, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   31ac2:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   31ac6:	07eb      	lsls	r3, r5, #31
		cmd->tx_phys |= mask_phys;
   31ac8:	bf48      	it	mi
   31aca:	f041 0103 	orrmi.w	r1, r1, #3
		cmd->rx_phys |= mask_phys;
   31ace:	7913      	ldrb	r3, [r2, #4]
		cmd->tx_phys |= mask_phys;
   31ad0:	bf48      	it	mi
   31ad2:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   31ad4:	07ad      	lsls	r5, r5, #30
		cmd->rx_phys |= mask_phys;
   31ad6:	bf44      	itt	mi
   31ad8:	f043 0303 	orrmi.w	r3, r3, #3
   31adc:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   31ade:	ea43 0201 	orr.w	r2, r3, r1
   31ae2:	2a03      	cmp	r2, #3
   31ae4:	f200 81d1 	bhi.w	31e8a <hci_cmd_handle+0x8a2>
	if (!(cmd->tx_phys & 0x07) ||
   31ae8:	074d      	lsls	r5, r1, #29
   31aea:	f000 81cb 	beq.w	31e84 <hci_cmd_handle+0x89c>
   31aee:	075a      	lsls	r2, r3, #29
   31af0:	f000 81c8 	beq.w	31e84 <hci_cmd_handle+0x89c>
	if (phy_opts & 0x03) {
   31af4:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
   31af8:	bf1c      	itt	ne
   31afa:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
   31afe:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   31b02:	4638      	mov	r0, r7
   31b04:	f003 fdaa 	bl	3565c <ll_phy_req_send>
   31b08:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   31b0a:	8830      	ldrh	r0, [r6, #0]
   31b0c:	e59d      	b.n	3164a <hci_cmd_handle+0x62>
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
   31b0e:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   31b10:	781a      	ldrb	r2, [r3, #0]
   31b12:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   31b14:	bf4a      	itet	mi
   31b16:	2007      	movmi	r0, #7
   31b18:	7858      	ldrbpl	r0, [r3, #1]
   31b1a:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   31b1c:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   31b1e:	bf4a      	itet	mi
   31b20:	2107      	movmi	r1, #7
	status = ll_terminate_ind_send(handle, cmd->reason);
   31b22:	7899      	ldrbpl	r1, [r3, #2]
		cmd->rx_phys = 0x07;
   31b24:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   31b26:	f003 fd8f 	bl	35648 <ll_phy_default_set>
   31b2a:	e756      	b.n	319da <hci_cmd_handle+0x3f2>
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
   31b2c:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   31b2e:	8859      	ldrh	r1, [r3, #2]
   31b30:	8818      	ldrh	r0, [r3, #0]
   31b32:	f003 fd55 	bl	355e0 <ll_length_default_set>
   31b36:	e750      	b.n	319da <hci_cmd_handle+0x3f2>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31b38:	2105      	movs	r1, #5
   31b3a:	f013 fc74 	bl	45426 <bt_hci_cmd_complete_create>
   31b3e:	2105      	movs	r1, #5
   31b40:	4604      	mov	r4, r0
   31b42:	3008      	adds	r0, #8
   31b44:	f015 fef0 	bl	47928 <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   31b48:	a908      	add	r1, sp, #32
   31b4a:	4605      	mov	r5, r0
   31b4c:	f10d 001a 	add.w	r0, sp, #26
   31b50:	f003 fd3a 	bl	355c8 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   31b54:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   31b58:	f8a5 3001 	strh.w	r3, [r5, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   31b5c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   31b60:	f8a5 2003 	strh.w	r2, [r5, #3]
	rp->status = 0x00;
   31b64:	2300      	movs	r3, #0
   31b66:	702b      	strb	r3, [r5, #0]
	if (err == -EINVAL) {
   31b68:	e575      	b.n	31656 <hci_cmd_handle+0x6e>
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
   31b6a:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   31b6c:	881f      	ldrh	r7, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   31b6e:	889a      	ldrh	r2, [r3, #4]
   31b70:	8859      	ldrh	r1, [r3, #2]
   31b72:	b2b8      	uxth	r0, r7
   31b74:	f003 fcd8 	bl	35528 <ll_length_req_send>
   31b78:	e67a      	b.n	31870 <hci_cmd_handle+0x288>
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
   31b7a:	68a2      	ldr	r2, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   31b7c:	8817      	ldrh	r7, [r2, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   31b7e:	7892      	ldrb	r2, [r2, #2]
   31b80:	2300      	movs	r3, #0
   31b82:	e9cd 3301 	strd	r3, r3, [sp, #4]
   31b86:	9300      	str	r3, [sp, #0]
   31b88:	2102      	movs	r1, #2
   31b8a:	b2b8      	uxth	r0, r7
   31b8c:	f003 fb94 	bl	352b8 <ll_conn_update>
   31b90:	e66e      	b.n	31870 <hci_cmd_handle+0x288>
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
   31b92:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   31b94:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   31b96:	8817      	ldrh	r7, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   31b98:	8853      	ldrh	r3, [r2, #2]
   31b9a:	9102      	str	r1, [sp, #8]
   31b9c:	88d1      	ldrh	r1, [r2, #6]
   31b9e:	9101      	str	r1, [sp, #4]
   31ba0:	8891      	ldrh	r1, [r2, #4]
   31ba2:	9100      	str	r1, [sp, #0]
   31ba4:	2200      	movs	r2, #0
   31ba6:	2102      	movs	r1, #2
   31ba8:	b2b8      	uxth	r0, r7
   31baa:	f003 fb85 	bl	352b8 <ll_conn_update>
   31bae:	e65f      	b.n	31870 <hci_cmd_handle+0x288>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31bb0:	2109      	movs	r1, #9
   31bb2:	f013 fc38 	bl	45426 <bt_hci_cmd_complete_create>
   31bb6:	2109      	movs	r1, #9
   31bb8:	4604      	mov	r4, r0
   31bba:	3008      	adds	r0, #8
   31bbc:	f015 feb4 	bl	47928 <net_buf_simple_add>
	rp->status = 0x00;
   31bc0:	4936      	ldr	r1, [pc, #216]	; (31c9c <hci_cmd_handle+0x6b4>)
   31bc2:	4a37      	ldr	r2, [pc, #220]	; (31ca0 <hci_cmd_handle+0x6b8>)
   31bc4:	6001      	str	r1, [r0, #0]
	dst[1] = val >> 8;
   31bc6:	2300      	movs	r3, #0
   31bc8:	6042      	str	r2, [r0, #4]
   31bca:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   31bcc:	e543      	b.n	31656 <hci_cmd_handle+0x6e>
	handle = sys_le16_to_cpu(cmd->handle);
   31bce:	68a3      	ldr	r3, [r4, #8]
   31bd0:	881f      	ldrh	r7, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   31bd2:	2200      	movs	r2, #0
   31bd4:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   31bd6:	b2b8      	uxth	r0, r7
   31bd8:	f007 f9f0 	bl	38fbc <ll_start_enc_req_send>
   31bdc:	e648      	b.n	31870 <hci_cmd_handle+0x288>
	handle = sys_le16_to_cpu(cmd->handle);
   31bde:	68a2      	ldr	r2, [r4, #8]
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   31be0:	2100      	movs	r1, #0
	handle = sys_le16_to_cpu(cmd->handle);
   31be2:	f832 7b02 	ldrh.w	r7, [r2], #2
   31be6:	e7f6      	b.n	31bd6 <hci_cmd_handle+0x5ee>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31be8:	2109      	movs	r1, #9
   31bea:	f013 fc1c 	bl	45426 <bt_hci_cmd_complete_create>
   31bee:	2109      	movs	r1, #9
   31bf0:	4604      	mov	r4, r0
   31bf2:	3008      	adds	r0, #8
   31bf4:	f015 fe98 	bl	47928 <net_buf_simple_add>
	rp->status = 0x00;
   31bf8:	2300      	movs	r3, #0
   31bfa:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   31bfe:	2108      	movs	r1, #8
   31c00:	f008 fd1c 	bl	3a63c <lll_csrand_get>
	if (err == -EINVAL) {
   31c04:	e527      	b.n	31656 <hci_cmd_handle+0x6e>
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
   31c06:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   31c08:	aa08      	add	r2, sp, #32
   31c0a:	2300      	movs	r3, #0
   31c0c:	f100 0110 	add.w	r1, r0, #16
   31c10:	f00a fb36 	bl	3c280 <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31c14:	8830      	ldrh	r0, [r6, #0]
   31c16:	2111      	movs	r1, #17
   31c18:	f013 fc05 	bl	45426 <bt_hci_cmd_complete_create>
   31c1c:	2111      	movs	r1, #17
   31c1e:	4604      	mov	r4, r0
   31c20:	3008      	adds	r0, #8
   31c22:	f015 fe81 	bl	47928 <net_buf_simple_add>
	rp->status = 0x00;
   31c26:	2300      	movs	r3, #0
   31c28:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   31c2c:	2210      	movs	r2, #16
   31c2e:	a908      	add	r1, sp, #32
   31c30:	f012 ff47 	bl	44ac2 <memcpy>
	if (err == -EINVAL) {
   31c34:	e50f      	b.n	31656 <hci_cmd_handle+0x6e>
	handle = sys_le16_to_cpu(cmd->handle);
   31c36:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   31c38:	8818      	ldrh	r0, [r3, #0]
   31c3a:	f003 fc29 	bl	35490 <ll_feature_req_send>
   31c3e:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   31c40:	8830      	ldrh	r0, [r6, #0]
   31c42:	e502      	b.n	3164a <hci_cmd_handle+0x62>
	handle = sys_le16_to_cpu(cmd->handle);
   31c44:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31c46:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
   31c48:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31c4a:	f013 fbec 	bl	45426 <bt_hci_cmd_complete_create>
   31c4e:	2108      	movs	r1, #8
   31c50:	4604      	mov	r4, r0
   31c52:	4408      	add	r0, r1
   31c54:	f015 fe68 	bl	47928 <net_buf_simple_add>
   31c58:	4605      	mov	r5, r0
	status = ll_chm_get(handle, rp->ch_map);
   31c5a:	1ce9      	adds	r1, r5, #3
	handle = sys_le16_to_cpu(cmd->handle);
   31c5c:	b2b0      	uxth	r0, r6
	status = ll_chm_get(handle, rp->ch_map);
   31c5e:	f003 fbbd 	bl	353dc <ll_chm_get>
	rp->handle = sys_le16_to_cpu(handle);
   31c62:	f8a5 6001 	strh.w	r6, [r5, #1]
	rp->status = status;
   31c66:	7028      	strb	r0, [r5, #0]
	if (err == -EINVAL) {
   31c68:	e4f5      	b.n	31656 <hci_cmd_handle+0x6e>
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
   31c6a:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   31c6c:	8911      	ldrh	r1, [r2, #8]
   31c6e:	8853      	ldrh	r3, [r2, #2]
   31c70:	8810      	ldrh	r0, [r2, #0]
   31c72:	9102      	str	r1, [sp, #8]
   31c74:	88d1      	ldrh	r1, [r2, #6]
   31c76:	9101      	str	r1, [sp, #4]
   31c78:	8891      	ldrh	r1, [r2, #4]
   31c7a:	9100      	str	r1, [sp, #0]
   31c7c:	2200      	movs	r2, #0
   31c7e:	4611      	mov	r1, r2
   31c80:	f003 fb1a 	bl	352b8 <ll_conn_update>
   31c84:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   31c86:	8830      	ldrh	r0, [r6, #0]
   31c88:	e4df      	b.n	3164a <hci_cmd_handle+0x62>
	status = ll_fal_remove(&cmd->addr);
   31c8a:	68a0      	ldr	r0, [r4, #8]
   31c8c:	f007 fbd2 	bl	39434 <ll_fal_remove>
   31c90:	e6a3      	b.n	319da <hci_cmd_handle+0x3f2>
   31c92:	bf00      	nop
   31c94:	ffff05f1 	.word	0xffff05f1
   31c98:	20000158 	.word	0x20000158
   31c9c:	30cc8f00 	.word	0x30cc8f00
   31ca0:	0001c0ec 	.word	0x0001c0ec
	status = ll_fal_add(&cmd->addr);
   31ca4:	68a0      	ldr	r0, [r4, #8]
   31ca6:	f007 fb3b 	bl	39320 <ll_fal_add>
   31caa:	e696      	b.n	319da <hci_cmd_handle+0x3f2>
	status = ll_fal_clear();
   31cac:	f007 fb12 	bl	392d4 <ll_fal_clear>
   31cb0:	e693      	b.n	319da <hci_cmd_handle+0x3f2>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   31cb2:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
   31cb4:	8818      	ldrh	r0, [r3, #0]
   31cb6:	f007 fe05 	bl	398c4 <ll_rl_timeout_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   31cba:	8830      	ldrh	r0, [r6, #0]
   31cbc:	2101      	movs	r1, #1
   31cbe:	e5c1      	b.n	31844 <hci_cmd_handle+0x25c>
	status = ll_rl_enable(cmd->enable);
   31cc0:	68a3      	ldr	r3, [r4, #8]
   31cc2:	7818      	ldrb	r0, [r3, #0]
   31cc4:	f007 fdea 	bl	3989c <ll_rl_enable>
   31cc8:	e687      	b.n	319da <hci_cmd_handle+0x3f2>
	memcpy(dst, src, sizeof(*dst));
   31cca:	2207      	movs	r2, #7
   31ccc:	68a1      	ldr	r1, [r4, #8]
   31cce:	a808      	add	r0, sp, #32
   31cd0:	f012 fef7 	bl	44ac2 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31cd4:	2107      	movs	r1, #7
   31cd6:	8830      	ldrh	r0, [r6, #0]
   31cd8:	f013 fba5 	bl	45426 <bt_hci_cmd_complete_create>
   31cdc:	2107      	movs	r1, #7
   31cde:	4604      	mov	r4, r0
   31ce0:	3008      	adds	r0, #8
   31ce2:	f015 fe21 	bl	47928 <net_buf_simple_add>
   31ce6:	4605      	mov	r5, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   31ce8:	1c41      	adds	r1, r0, #1
   31cea:	a808      	add	r0, sp, #32
   31cec:	f007 fda4 	bl	39838 <ll_rl_lrpa_get>
   31cf0:	7028      	strb	r0, [r5, #0]
	if (err == -EINVAL) {
   31cf2:	e4b0      	b.n	31656 <hci_cmd_handle+0x6e>
   31cf4:	2207      	movs	r2, #7
   31cf6:	68a1      	ldr	r1, [r4, #8]
   31cf8:	a808      	add	r0, sp, #32
   31cfa:	f012 fee2 	bl	44ac2 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31cfe:	2107      	movs	r1, #7
   31d00:	8830      	ldrh	r0, [r6, #0]
   31d02:	f013 fb90 	bl	45426 <bt_hci_cmd_complete_create>
   31d06:	2107      	movs	r1, #7
   31d08:	4604      	mov	r4, r0
   31d0a:	3008      	adds	r0, #8
   31d0c:	f015 fe0c 	bl	47928 <net_buf_simple_add>
   31d10:	4605      	mov	r5, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   31d12:	1c41      	adds	r1, r0, #1
   31d14:	a808      	add	r0, sp, #32
   31d16:	f007 fd55 	bl	397c4 <ll_rl_crpa_get>
   31d1a:	7028      	strb	r0, [r5, #0]
	if (err == -EINVAL) {
   31d1c:	e49b      	b.n	31656 <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31d1e:	2102      	movs	r1, #2
   31d20:	f013 fb81 	bl	45426 <bt_hci_cmd_complete_create>
   31d24:	2102      	movs	r1, #2
   31d26:	4604      	mov	r4, r0
   31d28:	3008      	adds	r0, #8
   31d2a:	f015 fdfd 	bl	47928 <net_buf_simple_add>
   31d2e:	4605      	mov	r5, r0
	rp->rl_size = ll_rl_size_get();
   31d30:	f007 fc0c 	bl	3954c <ll_rl_size_get>
	rp->status = 0x00;
   31d34:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
   31d36:	7068      	strb	r0, [r5, #1]
	rp->status = 0x00;
   31d38:	702b      	strb	r3, [r5, #0]
	if (err == -EINVAL) {
   31d3a:	e48c      	b.n	31656 <hci_cmd_handle+0x6e>
	status = ll_rl_clear();
   31d3c:	f007 fc08 	bl	39550 <ll_rl_clear>
   31d40:	e64b      	b.n	319da <hci_cmd_handle+0x3f2>
	status = ll_rl_remove(&cmd->peer_id_addr);
   31d42:	68a0      	ldr	r0, [r4, #8]
   31d44:	f007 fc42 	bl	395cc <ll_rl_remove>
   31d48:	e647      	b.n	319da <hci_cmd_handle+0x3f2>
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
   31d4a:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   31d4c:	f100 0217 	add.w	r2, r0, #23
   31d50:	1dc1      	adds	r1, r0, #7
   31d52:	f008 f851 	bl	39df8 <ll_rl_add>
   31d56:	e640      	b.n	319da <hci_cmd_handle+0x3f2>
	handle = sys_le16_to_cpu(cmd->handle);
   31d58:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31d5a:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
   31d5c:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31d5e:	f013 fb62 	bl	45426 <bt_hci_cmd_complete_create>
   31d62:	2105      	movs	r1, #5
   31d64:	4604      	mov	r4, r0
   31d66:	3008      	adds	r0, #8
   31d68:	f015 fdde 	bl	47928 <net_buf_simple_add>
   31d6c:	4605      	mov	r5, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   31d6e:	1d2a      	adds	r2, r5, #4
	handle = sys_le16_to_cpu(cmd->handle);
   31d70:	b2b0      	uxth	r0, r6
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   31d72:	1ce9      	adds	r1, r5, #3
   31d74:	f003 fc4a 	bl	3560c <ll_phy_get>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
   31d78:	78eb      	ldrb	r3, [r5, #3]
   31d7a:	792a      	ldrb	r2, [r5, #4]
	rp->status = status;
   31d7c:	7028      	strb	r0, [r5, #0]
   31d7e:	2b00      	cmp	r3, #0
   31d80:	fa93 f3a3 	rbit	r3, r3
   31d84:	fab3 f383 	clz	r3, r3
   31d88:	bf08      	it	eq
   31d8a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   31d8e:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   31d90:	70eb      	strb	r3, [r5, #3]
   31d92:	2a00      	cmp	r2, #0
   31d94:	fa92 f3a2 	rbit	r3, r2
   31d98:	fab3 f383 	clz	r3, r3
   31d9c:	bf08      	it	eq
   31d9e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   31da2:	3301      	adds	r3, #1
	rp->handle = sys_cpu_to_le16(handle);
   31da4:	f8a5 6001 	strh.w	r6, [r5, #1]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   31da8:	712b      	strb	r3, [r5, #4]
	if (err == -EINVAL) {
   31daa:	e454      	b.n	31656 <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31dac:	2109      	movs	r1, #9
   31dae:	f013 fb3a 	bl	45426 <bt_hci_cmd_complete_create>
   31db2:	2109      	movs	r1, #9
   31db4:	4604      	mov	r4, r0
   31db6:	3008      	adds	r0, #8
   31db8:	f015 fdb6 	bl	47928 <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   31dbc:	ab08      	add	r3, sp, #32
   31dbe:	4605      	mov	r5, r0
   31dc0:	f10d 021a 	add.w	r2, sp, #26
   31dc4:	a906      	add	r1, sp, #24
   31dc6:	f10d 0016 	add.w	r0, sp, #22
   31dca:	f003 fc13 	bl	355f4 <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   31dce:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   31dd2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   31dd6:	f8a5 2001 	strh.w	r2, [r5, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   31dda:	f8a5 3003 	strh.w	r3, [r5, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   31dde:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   31de2:	f8a5 3005 	strh.w	r3, [r5, #5]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   31de6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   31dea:	f8a5 2007 	strh.w	r2, [r5, #7]
	rp->status = 0x00;
   31dee:	2300      	movs	r3, #0
   31df0:	702b      	strb	r3, [r5, #0]
	if (err == -EINVAL) {
   31df2:	e430      	b.n	31656 <hci_cmd_handle+0x6e>
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
   31df4:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   31df6:	7899      	ldrb	r1, [r3, #2]
   31df8:	8818      	ldrh	r0, [r3, #0]
   31dfa:	f003 fb0f 	bl	3541c <ll_terminate_ind_send>
   31dfe:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   31e00:	8830      	ldrh	r0, [r6, #0]
   31e02:	e422      	b.n	3164a <hci_cmd_handle+0x62>
	handle = sys_le16_to_cpu(cmd->handle);
   31e04:	68a3      	ldr	r3, [r4, #8]
   31e06:	881f      	ldrh	r7, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   31e08:	a908      	add	r1, sp, #32
   31e0a:	b2b8      	uxth	r0, r7
   31e0c:	f003 fc78 	bl	35700 <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31e10:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   31e12:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31e14:	8830      	ldrh	r0, [r6, #0]
   31e16:	f013 fb06 	bl	45426 <bt_hci_cmd_complete_create>
   31e1a:	2105      	movs	r1, #5
   31e1c:	4604      	mov	r4, r0
   31e1e:	3008      	adds	r0, #8
   31e20:	f015 fd82 	bl	47928 <net_buf_simple_add>
	rp->status = status;
   31e24:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   31e26:	f8a0 7001 	strh.w	r7, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   31e2a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   31e2e:	f8a0 3003 	strh.w	r3, [r0, #3]
	if (err == -EINVAL) {
   31e32:	e410      	b.n	31656 <hci_cmd_handle+0x6e>
	event_mask = DEFAULT_EVENT_MASK;
   31e34:	4b16      	ldr	r3, [pc, #88]	; (31e90 <hci_cmd_handle+0x8a8>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   31e36:	4a17      	ldr	r2, [pc, #92]	; (31e94 <hci_cmd_handle+0x8ac>)
	event_mask = DEFAULT_EVENT_MASK;
   31e38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   31e3c:	f641 71ff 	movw	r1, #8191	; 0x1fff
   31e40:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   31e44:	4b14      	ldr	r3, [pc, #80]	; (31e98 <hci_cmd_handle+0x8b0>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   31e46:	2000      	movs	r0, #0
   31e48:	2100      	movs	r1, #0
   31e4a:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   31e4e:	201f      	movs	r0, #31
   31e50:	2100      	movs	r1, #0
   31e52:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   31e56:	f001 fd5b 	bl	33910 <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   31e5a:	2101      	movs	r1, #1
   31e5c:	8830      	ldrh	r0, [r6, #0]
   31e5e:	f013 fae2 	bl	45426 <bt_hci_cmd_complete_create>
   31e62:	2101      	movs	r1, #1
   31e64:	4604      	mov	r4, r0
   31e66:	3008      	adds	r0, #8
   31e68:	f015 fd5e 	bl	47928 <net_buf_simple_add>
	conn_count = 0U;
   31e6c:	4a0b      	ldr	r2, [pc, #44]	; (31e9c <hci_cmd_handle+0x8b4>)
	ccst->status = status;
   31e6e:	2300      	movs	r3, #0
   31e70:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
   31e72:	6013      	str	r3, [r2, #0]
	if (err == -EINVAL) {
   31e74:	f7ff bbef 	b.w	31656 <hci_cmd_handle+0x6e>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   31e78:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   31e7a:	4b06      	ldr	r3, [pc, #24]	; (31e94 <hci_cmd_handle+0x8ac>)
   31e7c:	e596      	b.n	319ac <hci_cmd_handle+0x3c4>
	return evt;
   31e7e:	9c07      	ldr	r4, [sp, #28]
   31e80:	f7ff bbe9 	b.w	31656 <hci_cmd_handle+0x6e>
	return bt_hci_cmd_status_create(_opcode, status);
   31e84:	2112      	movs	r1, #18
   31e86:	f7ff bbe0 	b.w	3164a <hci_cmd_handle+0x62>
   31e8a:	2111      	movs	r1, #17
   31e8c:	f7ff bbdd 	b.w	3164a <hci_cmd_handle+0x62>
   31e90:	20000160 	.word	0x20000160
   31e94:	200014e0 	.word	0x200014e0
   31e98:	20000158 	.word	0x20000158
   31e9c:	20001e7c 	.word	0x20001e7c

00031ea0 <hci_acl_handle>:
{
   31ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*acl)) {
   31ea4:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
   31ea6:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
   31ea8:	2b03      	cmp	r3, #3
	*evt = NULL;
   31eaa:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   31eac:	d92e      	bls.n	31f0c <hci_acl_handle+0x6c>
	return net_buf_simple_pull_mem(&buf->b, len);
   31eae:	4605      	mov	r5, r0
   31eb0:	4688      	mov	r8, r1
   31eb2:	3008      	adds	r0, #8
   31eb4:	2104      	movs	r1, #4
   31eb6:	f015 fd5e 	bl	47976 <net_buf_simple_pull_mem>
	if (buf->len < len) {
   31eba:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   31ebc:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   31ebe:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
   31ec2:	42bb      	cmp	r3, r7
   31ec4:	d322      	bcc.n	31f0c <hci_acl_handle+0x6c>
	if (len > LL_LENGTH_OCTETS_TX_MAX) {
   31ec6:	2f1b      	cmp	r7, #27
   31ec8:	d820      	bhi.n	31f0c <hci_acl_handle+0x6c>
	node_tx = ll_tx_mem_acquire();
   31eca:	f003 f99f 	bl	3520c <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   31ece:	ea4f 3619 	mov.w	r6, r9, lsr #12
   31ed2:	4633      	mov	r3, r6
	if (!node_tx) {
   31ed4:	4604      	mov	r4, r0
   31ed6:	b1f8      	cbz	r0, 31f18 <hci_acl_handle+0x78>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   31ed8:	089b      	lsrs	r3, r3, #2
   31eda:	d117      	bne.n	31f0c <hci_acl_handle+0x6c>
	switch (bt_acl_flags_pb(flags)) {
   31edc:	b1d6      	cbz	r6, 31f14 <hci_acl_handle+0x74>
   31ede:	2e01      	cmp	r6, #1
   31ee0:	d114      	bne.n	31f0c <hci_acl_handle+0x6c>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   31ee2:	7923      	ldrb	r3, [r4, #4]
	pdu_data->len = len;
   31ee4:	7167      	strb	r7, [r4, #5]
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   31ee6:	f366 0301 	bfi	r3, r6, #0, #2
	memcpy(&pdu_data->lldata[0], buf->data, len);
   31eea:	68a9      	ldr	r1, [r5, #8]
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   31eec:	7123      	strb	r3, [r4, #4]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   31eee:	463a      	mov	r2, r7
   31ef0:	1de0      	adds	r0, r4, #7
   31ef2:	f012 fde6 	bl	44ac2 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   31ef6:	4621      	mov	r1, r4
   31ef8:	f3c9 000b 	ubfx	r0, r9, #0, #12
   31efc:	f003 f992 	bl	35224 <ll_tx_mem_enqueue>
   31f00:	b908      	cbnz	r0, 31f06 <hci_acl_handle+0x66>
}
   31f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		ll_tx_mem_release(node_tx);
   31f06:	4620      	mov	r0, r4
   31f08:	f003 f986 	bl	35218 <ll_tx_mem_release>
	switch (bt_acl_flags_pb(flags)) {
   31f0c:	f06f 0015 	mvn.w	r0, #21
}
   31f10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	switch (bt_acl_flags_pb(flags)) {
   31f14:	2602      	movs	r6, #2
   31f16:	e7e4      	b.n	31ee2 <hci_acl_handle+0x42>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   31f18:	4b0f      	ldr	r3, [pc, #60]	; (31f58 <hci_acl_handle+0xb8>)
   31f1a:	681b      	ldr	r3, [r3, #0]
   31f1c:	019b      	lsls	r3, r3, #6
   31f1e:	d517      	bpl.n	31f50 <hci_acl_handle+0xb0>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   31f20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   31f24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   31f28:	2001      	movs	r0, #1
   31f2a:	f7f8 feb3 	bl	2ac94 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   31f2e:	2102      	movs	r1, #2
   31f30:	f8c8 0000 	str.w	r0, [r8]
   31f34:	3008      	adds	r0, #8
   31f36:	f015 fcf7 	bl	47928 <net_buf_simple_add>
	hdr->evt = evt;
   31f3a:	f44f 738d 	mov.w	r3, #282	; 0x11a
   31f3e:	8003      	strh	r3, [r0, #0]
   31f40:	f8d8 0000 	ldr.w	r0, [r8]
   31f44:	2101      	movs	r1, #1
   31f46:	3008      	adds	r0, #8
   31f48:	f015 fcee 	bl	47928 <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   31f4c:	2301      	movs	r3, #1
   31f4e:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
   31f50:	f06f 0068 	mvn.w	r0, #104	; 0x68
   31f54:	e7d5      	b.n	31f02 <hci_acl_handle+0x62>
   31f56:	bf00      	nop
   31f58:	20000160 	.word	0x20000160

00031f5c <hci_disconn_complete_encode>:
{
   31f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   31f5e:	4b0e      	ldr	r3, [pc, #56]	; (31f98 <hci_disconn_complete_encode+0x3c>)
   31f60:	681b      	ldr	r3, [r3, #0]
   31f62:	06db      	lsls	r3, r3, #27
   31f64:	d400      	bmi.n	31f68 <hci_disconn_complete_encode+0xc>
}
   31f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   31f68:	f102 0408 	add.w	r4, r2, #8
   31f6c:	4606      	mov	r6, r0
   31f6e:	460d      	mov	r5, r1
   31f70:	4620      	mov	r0, r4
   31f72:	2102      	movs	r1, #2
   31f74:	f015 fcd8 	bl	47928 <net_buf_simple_add>
   31f78:	4603      	mov	r3, r0
	hdr->evt = evt;
   31f7a:	f240 4205 	movw	r2, #1029	; 0x405
   31f7e:	801a      	strh	r2, [r3, #0]
   31f80:	4620      	mov	r0, r4
   31f82:	2104      	movs	r1, #4
   31f84:	f015 fcd0 	bl	47928 <net_buf_simple_add>
	ep->status = 0x00;
   31f88:	2700      	movs	r7, #0
   31f8a:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   31f8c:	f8a0 5001 	strh.w	r5, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
   31f90:	7832      	ldrb	r2, [r6, #0]
   31f92:	70c2      	strb	r2, [r0, #3]
}
   31f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   31f96:	bf00      	nop
   31f98:	20000160 	.word	0x20000160

00031f9c <hci_disconn_complete_process>:
	conn_count--;
   31f9c:	4a02      	ldr	r2, [pc, #8]	; (31fa8 <hci_disconn_complete_process+0xc>)
   31f9e:	6813      	ldr	r3, [r2, #0]
   31fa0:	3b01      	subs	r3, #1
   31fa2:	6013      	str	r3, [r2, #0]
}
   31fa4:	4770      	bx	lr
   31fa6:	bf00      	nop
   31fa8:	20001e7c 	.word	0x20001e7c

00031fac <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   31fac:	7f03      	ldrb	r3, [r0, #28]
   31fae:	f003 0303 	and.w	r3, r3, #3
   31fb2:	3b01      	subs	r3, #1
   31fb4:	2b01      	cmp	r3, #1
{
   31fb6:	b570      	push	{r4, r5, r6, lr}
	handle = node_rx->hdr.handle;
   31fb8:	88c6      	ldrh	r6, [r0, #6]
	switch (pdu_data->ll_id) {
   31fba:	d90d      	bls.n	31fd8 <hci_acl_encode+0x2c>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
   31fbc:	4a15      	ldr	r2, [pc, #84]	; (32014 <hci_acl_encode+0x68>)
   31fbe:	4916      	ldr	r1, [pc, #88]	; (32018 <hci_acl_encode+0x6c>)
   31fc0:	4816      	ldr	r0, [pc, #88]	; (3201c <hci_acl_encode+0x70>)
   31fc2:	f641 53bb 	movw	r3, #7611	; 0x1dbb
   31fc6:	f010 fc7d 	bl	428c4 <printk>
   31fca:	4040      	eors	r0, r0
   31fcc:	f380 8811 	msr	BASEPRI, r0
   31fd0:	f04f 0003 	mov.w	r0, #3
   31fd4:	df02      	svc	2
		break;
	}
}
   31fd6:	bd70      	pop	{r4, r5, r6, pc}
   31fd8:	4604      	mov	r4, r0
   31fda:	f101 0508 	add.w	r5, r1, #8
   31fde:	4628      	mov	r0, r5
   31fe0:	2104      	movs	r1, #4
   31fe2:	f015 fca1 	bl	47928 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   31fe6:	7f23      	ldrb	r3, [r4, #28]
   31fe8:	f003 0303 	and.w	r3, r3, #3
   31fec:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   31fee:	bf0c      	ite	eq
   31ff0:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   31ff4:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   31ff8:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   31ffa:	7f61      	ldrb	r1, [r4, #29]
   31ffc:	8041      	strh	r1, [r0, #2]
   31ffe:	4628      	mov	r0, r5
   32000:	f015 fc92 	bl	47928 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   32004:	7f62      	ldrb	r2, [r4, #29]
   32006:	f104 011f 	add.w	r1, r4, #31
}
   3200a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   3200e:	f012 bd58 	b.w	44ac2 <memcpy>
   32012:	bf00      	nop
   32014:	00049d14 	.word	0x00049d14
   32018:	00049cc8 	.word	0x00049cc8
   3201c:	00049c68 	.word	0x00049c68

00032020 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   32020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   32024:	f890 c004 	ldrb.w	ip, [r0, #4]
   32028:	88c6      	ldrh	r6, [r0, #6]
   3202a:	f1bc 0f03 	cmp.w	ip, #3
{
   3202e:	b084      	sub	sp, #16
   32030:	4604      	mov	r4, r0
   32032:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   32034:	f100 071c 	add.w	r7, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   32038:	d00e      	beq.n	32058 <hci_evt_encode+0x38>
	switch (node_rx->hdr.type) {
   3203a:	f1ac 0c16 	sub.w	ip, ip, #22
   3203e:	f1bc 0f06 	cmp.w	ip, #6
   32042:	f200 829e 	bhi.w	32582 <hci_evt_encode+0x562>
   32046:	e8df f01c 	tbh	[pc, ip, lsl #1]
   3204a:	002b      	.short	0x002b
   3204c:	008b0083 	.word	0x008b0083
   32050:	00b80021 	.word	0x00b80021
   32054:	00eb00cb 	.word	0x00eb00cb
	switch (pdu_data->llctrl.opcode) {
   32058:	7fc3      	ldrb	r3, [r0, #31]
   3205a:	3b03      	subs	r3, #3
   3205c:	2b12      	cmp	r3, #18
   3205e:	f200 8116 	bhi.w	3228e <hci_evt_encode+0x26e>
   32062:	e8df f013 	tbh	[pc, r3, lsl #1]
   32066:	0158      	.short	0x0158
   32068:	01140114 	.word	0x01140114
   3206c:	01ad0186 	.word	0x01ad0186
   32070:	01df0114 	.word	0x01df0114
   32074:	01140114 	.word	0x01140114
   32078:	01e40114 	.word	0x01e40114
   3207c:	01bb0114 	.word	0x01bb0114
   32080:	001a0114 	.word	0x001a0114
   32084:	01140114 	.word	0x01140114
   32088:	01220122 	.word	0x01220122
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   3208c:	4bc5      	ldr	r3, [pc, #788]	; (323a4 <hci_evt_encode+0x384>)
   3208e:	685b      	ldr	r3, [r3, #4]
   32090:	0418      	lsls	r0, r3, #16
   32092:	f04f 0400 	mov.w	r4, #0
   32096:	f100 812e 	bmi.w	322f6 <hci_evt_encode+0x2d6>
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   3209a:	b004      	add	sp, #16
   3209c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   320a0:	07f8      	lsls	r0, r7, #31
   320a2:	f100 81e8 	bmi.w	32476 <hci_evt_encode+0x456>
	status = cc->status;
   320a6:	7f27      	ldrb	r7, [r4, #28]
	if (!status) {
   320a8:	2f00      	cmp	r7, #0
   320aa:	f000 81db 	beq.w	32464 <hci_evt_encode+0x444>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   320ae:	4bbd      	ldr	r3, [pc, #756]	; (323a4 <hci_evt_encode+0x384>)
   320b0:	685b      	ldr	r3, [r3, #4]
   320b2:	0099      	lsls	r1, r3, #2
   320b4:	d5f1      	bpl.n	3209a <hci_evt_encode+0x7a>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   320b6:	4bbc      	ldr	r3, [pc, #752]	; (323a8 <hci_evt_encode+0x388>)
   320b8:	681b      	ldr	r3, [r3, #0]
   320ba:	f240 2201 	movw	r2, #513	; 0x201
   320be:	4213      	tst	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   320c0:	f403 7800 	and.w	r8, r3, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   320c4:	d0e9      	beq.n	3209a <hci_evt_encode+0x7a>
   320c6:	3508      	adds	r5, #8
	if (!status) {
   320c8:	2f00      	cmp	r7, #0
   320ca:	f040 81ec 	bne.w	324a6 <hci_evt_encode+0x486>
		conn_count++;
   320ce:	4ab7      	ldr	r2, [pc, #732]	; (323ac <hci_evt_encode+0x38c>)
   320d0:	6813      	ldr	r3, [r2, #0]
   320d2:	3301      	adds	r3, #1
   320d4:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   320d6:	f1b8 0f00 	cmp.w	r8, #0
   320da:	f000 81ff 	beq.w	324dc <hci_evt_encode+0x4bc>
   320de:	2102      	movs	r1, #2
   320e0:	4628      	mov	r0, r5
   320e2:	f015 fc21 	bl	47928 <net_buf_simple_add>
	hdr->evt = evt;
   320e6:	f641 733e 	movw	r3, #7998	; 0x1f3e
   320ea:	8003      	strh	r3, [r0, #0]
   320ec:	2101      	movs	r1, #1
   320ee:	4628      	mov	r0, r5
   320f0:	f015 fc1a 	bl	47928 <net_buf_simple_add>
   320f4:	4603      	mov	r3, r0
	me->subevent = subevt;
   320f6:	220a      	movs	r2, #10
   320f8:	701a      	strb	r2, [r3, #0]
   320fa:	4628      	mov	r0, r5
   320fc:	211e      	movs	r1, #30
   320fe:	f015 fc13 	bl	47928 <net_buf_simple_add>
		leecc->status = 0x00;
   32102:	7007      	strb	r7, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
   32104:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = cc->role;
   32108:	f8b4 301d 	ldrh.w	r3, [r4, #29]
   3210c:	f8a0 3003 	strh.w	r3, [r0, #3]
   32110:	4605      	mov	r5, r0
		memcpy(&leecc->peer_addr.a.val[0], &cc->peer_addr[0],
   32112:	2206      	movs	r2, #6
   32114:	f104 011f 	add.w	r1, r4, #31
   32118:	3005      	adds	r0, #5
   3211a:	f012 fcd2 	bl	44ac2 <memcpy>
		memcpy(&leecc->local_rpa.val[0], &cc->local_rpa[0],
   3211e:	2206      	movs	r2, #6
   32120:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   32124:	f105 000b 	add.w	r0, r5, #11
   32128:	f012 fccb 	bl	44ac2 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &cc->peer_rpa[0],
   3212c:	2206      	movs	r2, #6
   3212e:	f104 0125 	add.w	r1, r4, #37	; 0x25
   32132:	f105 0011 	add.w	r0, r5, #17
   32136:	f012 fcc4 	bl	44ac2 <memcpy>
		leecc->interval = sys_cpu_to_le16(cc->interval);
   3213a:	f8d4 3032 	ldr.w	r3, [r4, #50]	; 0x32
   3213e:	f8c5 3017 	str.w	r3, [r5, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   32142:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   32144:	f8a5 301b 	strh.w	r3, [r5, #27]
		leecc->clock_accuracy = cc->sca;
   32148:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   3214c:	776b      	strb	r3, [r5, #29]
		return;
   3214e:	e7a4      	b.n	3209a <hci_evt_encode+0x7a>
		hci_disconn_complete_encode(pdu_data, handle, buf);
   32150:	460a      	mov	r2, r1
   32152:	4638      	mov	r0, r7
   32154:	4631      	mov	r1, r6
}
   32156:	b004      	add	sp, #16
   32158:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
   3215c:	f7ff befe 	b.w	31f5c <hci_disconn_complete_encode>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   32160:	4b90      	ldr	r3, [pc, #576]	; (323a4 <hci_evt_encode+0x384>)
   32162:	685b      	ldr	r3, [r3, #4]
   32164:	009a      	lsls	r2, r3, #2
   32166:	d598      	bpl.n	3209a <hci_evt_encode+0x7a>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   32168:	4b8f      	ldr	r3, [pc, #572]	; (323a8 <hci_evt_encode+0x388>)
   3216a:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   3216c:	075b      	lsls	r3, r3, #29
   3216e:	d594      	bpl.n	3209a <hci_evt_encode+0x7a>
   32170:	3508      	adds	r5, #8
   32172:	2102      	movs	r1, #2
   32174:	4628      	mov	r0, r5
   32176:	f015 fbd7 	bl	47928 <net_buf_simple_add>
	hdr->evt = evt;
   3217a:	f640 233e 	movw	r3, #2622	; 0xa3e
   3217e:	8003      	strh	r3, [r0, #0]
   32180:	2101      	movs	r1, #1
   32182:	4628      	mov	r0, r5
   32184:	f015 fbd0 	bl	47928 <net_buf_simple_add>
   32188:	4603      	mov	r3, r0
	me->subevent = subevt;
   3218a:	2203      	movs	r2, #3
   3218c:	4628      	mov	r0, r5
   3218e:	701a      	strb	r2, [r3, #0]
   32190:	2109      	movs	r1, #9
   32192:	f015 fbc9 	bl	47928 <net_buf_simple_add>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   32196:	07ff      	lsls	r7, r7, #31
   32198:	4605      	mov	r5, r0
   3219a:	f100 81e4 	bmi.w	32566 <hci_evt_encode+0x546>
	sep->status = cu->status;
   3219e:	7f23      	ldrb	r3, [r4, #28]
   321a0:	702b      	strb	r3, [r5, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   321a2:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
   321a4:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   321a6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   321a8:	f8a5 3007 	strh.w	r3, [r5, #7]
	sep->handle = sys_cpu_to_le16(handle);
   321ac:	f8a5 6001 	strh.w	r6, [r5, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   321b0:	f8a5 1003 	strh.w	r1, [r5, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   321b4:	f8a5 2005 	strh.w	r2, [r5, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   321b8:	e76f      	b.n	3209a <hci_evt_encode+0x7a>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   321ba:	4b7d      	ldr	r3, [pc, #500]	; (323b0 <hci_evt_encode+0x390>)
   321bc:	681b      	ldr	r3, [r3, #0]
   321be:	0219      	lsls	r1, r3, #8
   321c0:	f57f af6b 	bpl.w	3209a <hci_evt_encode+0x7a>
   321c4:	3508      	adds	r5, #8
   321c6:	2102      	movs	r1, #2
   321c8:	4628      	mov	r0, r5
   321ca:	f015 fbad 	bl	47928 <net_buf_simple_add>
	hdr->evt = evt;
   321ce:	f240 2357 	movw	r3, #599	; 0x257
   321d2:	8003      	strh	r3, [r0, #0]
   321d4:	2102      	movs	r1, #2
   321d6:	4628      	mov	r0, r5
   321d8:	f015 fba6 	bl	47928 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   321dc:	8006      	strh	r6, [r0, #0]
   321de:	e75c      	b.n	3209a <hci_evt_encode+0x7a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   321e0:	4b70      	ldr	r3, [pc, #448]	; (323a4 <hci_evt_encode+0x384>)
   321e2:	685b      	ldr	r3, [r3, #4]
   321e4:	009a      	lsls	r2, r3, #2
   321e6:	f57f af58 	bpl.w	3209a <hci_evt_encode+0x7a>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   321ea:	4b6f      	ldr	r3, [pc, #444]	; (323a8 <hci_evt_encode+0x388>)
   321ec:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   321ee:	031b      	lsls	r3, r3, #12
   321f0:	f57f af53 	bpl.w	3209a <hci_evt_encode+0x7a>
   321f4:	3508      	adds	r5, #8
   321f6:	2102      	movs	r1, #2
   321f8:	4628      	mov	r0, r5
   321fa:	f015 fb95 	bl	47928 <net_buf_simple_add>
	hdr->evt = evt;
   321fe:	f240 433e 	movw	r3, #1086	; 0x43e
   32202:	8003      	strh	r3, [r0, #0]
   32204:	2101      	movs	r1, #1
   32206:	4628      	mov	r0, r5
   32208:	f015 fb8e 	bl	47928 <net_buf_simple_add>
	me->subevent = subevt;
   3220c:	2314      	movs	r3, #20
   3220e:	7003      	strb	r3, [r0, #0]
   32210:	2103      	movs	r1, #3
   32212:	4628      	mov	r0, r5
   32214:	f015 fb88 	bl	47928 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   32218:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
   3221a:	7f23      	ldrb	r3, [r4, #28]
   3221c:	7083      	strb	r3, [r0, #2]
   3221e:	e73c      	b.n	3209a <hci_evt_encode+0x7a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   32220:	4b60      	ldr	r3, [pc, #384]	; (323a4 <hci_evt_encode+0x384>)
   32222:	685b      	ldr	r3, [r3, #4]
   32224:	009f      	lsls	r7, r3, #2
   32226:	f57f af38 	bpl.w	3209a <hci_evt_encode+0x7a>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   3222a:	4b5f      	ldr	r3, [pc, #380]	; (323a8 <hci_evt_encode+0x388>)
   3222c:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   3222e:	0518      	lsls	r0, r3, #20
   32230:	f57f af33 	bpl.w	3209a <hci_evt_encode+0x7a>
   32234:	3508      	adds	r5, #8
   32236:	2102      	movs	r1, #2
   32238:	4628      	mov	r0, r5
   3223a:	f015 fb75 	bl	47928 <net_buf_simple_add>
	hdr->evt = evt;
   3223e:	f240 633e 	movw	r3, #1598	; 0x63e
   32242:	8003      	strh	r3, [r0, #0]
   32244:	2101      	movs	r1, #1
   32246:	4628      	mov	r0, r5
   32248:	f015 fb6e 	bl	47928 <net_buf_simple_add>
	me->subevent = subevt;
   3224c:	230c      	movs	r3, #12
   3224e:	7003      	strb	r3, [r0, #0]
   32250:	2105      	movs	r1, #5
   32252:	4628      	mov	r0, r5
   32254:	f015 fb68 	bl	47928 <net_buf_simple_add>
	sep->status = pu->status;
   32258:	7f23      	ldrb	r3, [r4, #28]
   3225a:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   3225c:	f8a0 6001 	strh.w	r6, [r0, #1]
   32260:	7f62      	ldrb	r2, [r4, #29]
   32262:	2a00      	cmp	r2, #0
   32264:	fa92 f3a2 	rbit	r3, r2
   32268:	fab3 f383 	clz	r3, r3
   3226c:	bf08      	it	eq
   3226e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   32272:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   32274:	70c3      	strb	r3, [r0, #3]
   32276:	7fa2      	ldrb	r2, [r4, #30]
   32278:	fa92 f3a2 	rbit	r3, r2
   3227c:	2a00      	cmp	r2, #0
   3227e:	fab3 f383 	clz	r3, r3
   32282:	bf08      	it	eq
   32284:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   32288:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   3228a:	7103      	strb	r3, [r0, #4]
   3228c:	e705      	b.n	3209a <hci_evt_encode+0x7a>
		LL_ASSERT(0);
   3228e:	4a49      	ldr	r2, [pc, #292]	; (323b4 <hci_evt_encode+0x394>)
   32290:	4949      	ldr	r1, [pc, #292]	; (323b8 <hci_evt_encode+0x398>)
   32292:	484a      	ldr	r0, [pc, #296]	; (323bc <hci_evt_encode+0x39c>)
   32294:	f641 538f 	movw	r3, #7567	; 0x1d8f
   32298:	f010 fb14 	bl	428c4 <printk>
   3229c:	4040      	eors	r0, r0
   3229e:	f380 8811 	msr	BASEPRI, r0
   322a2:	f04f 0003 	mov.w	r0, #3
   322a6:	df02      	svc	2
}
   322a8:	e6f7      	b.n	3209a <hci_evt_encode+0x7a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   322aa:	4b3e      	ldr	r3, [pc, #248]	; (323a4 <hci_evt_encode+0x384>)
   322ac:	685b      	ldr	r3, [r3, #4]
   322ae:	009a      	lsls	r2, r3, #2
   322b0:	f57f aef3 	bpl.w	3209a <hci_evt_encode+0x7a>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   322b4:	4b3c      	ldr	r3, [pc, #240]	; (323a8 <hci_evt_encode+0x388>)
   322b6:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   322b8:	065b      	lsls	r3, r3, #25
   322ba:	f57f aeee 	bpl.w	3209a <hci_evt_encode+0x7a>
   322be:	3508      	adds	r5, #8
   322c0:	2102      	movs	r1, #2
   322c2:	4628      	mov	r0, r5
   322c4:	f015 fb30 	bl	47928 <net_buf_simple_add>
	hdr->evt = evt;
   322c8:	f640 333e 	movw	r3, #2878	; 0xb3e
   322cc:	8003      	strh	r3, [r0, #0]
   322ce:	2101      	movs	r1, #1
   322d0:	4628      	mov	r0, r5
   322d2:	f015 fb29 	bl	47928 <net_buf_simple_add>
	me->subevent = subevt;
   322d6:	2307      	movs	r3, #7
   322d8:	7003      	strb	r3, [r0, #0]
   322da:	210a      	movs	r1, #10
   322dc:	4628      	mov	r0, r5
   322de:	f015 fb23 	bl	47928 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   322e2:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   322e4:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   322e6:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   322e8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   322ea:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   322ec:	8c23      	ldrh	r3, [r4, #32]
   322ee:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   322f0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   322f2:	8103      	strh	r3, [r0, #8]
   322f4:	e6d1      	b.n	3209a <hci_evt_encode+0x7a>
   322f6:	3508      	adds	r5, #8
   322f8:	2102      	movs	r1, #2
   322fa:	4628      	mov	r0, r5
   322fc:	f015 fb14 	bl	47928 <net_buf_simple_add>
	hdr->evt = evt;
   32300:	f44f 734c 	mov.w	r3, #816	; 0x330
   32304:	8003      	strh	r3, [r0, #0]
   32306:	2103      	movs	r1, #3
   32308:	4628      	mov	r0, r5
   3230a:	f015 fb0d 	bl	47928 <net_buf_simple_add>
	ep->status = 0x00;
   3230e:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   32310:	f8a0 6001 	strh.w	r6, [r0, #1]
   32314:	e6c1      	b.n	3209a <hci_evt_encode+0x7a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   32316:	4b23      	ldr	r3, [pc, #140]	; (323a4 <hci_evt_encode+0x384>)
   32318:	685b      	ldr	r3, [r3, #4]
   3231a:	0099      	lsls	r1, r3, #2
   3231c:	f57f aebd 	bpl.w	3209a <hci_evt_encode+0x7a>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   32320:	4b21      	ldr	r3, [pc, #132]	; (323a8 <hci_evt_encode+0x388>)
   32322:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   32324:	06da      	lsls	r2, r3, #27
   32326:	f57f aeb8 	bpl.w	3209a <hci_evt_encode+0x7a>
   3232a:	3508      	adds	r5, #8
   3232c:	2102      	movs	r1, #2
   3232e:	4628      	mov	r0, r5
   32330:	f015 fafa 	bl	47928 <net_buf_simple_add>
	hdr->evt = evt;
   32334:	f640 533e 	movw	r3, #3390	; 0xd3e
   32338:	8003      	strh	r3, [r0, #0]
   3233a:	2101      	movs	r1, #1
   3233c:	4628      	mov	r0, r5
   3233e:	f015 faf3 	bl	47928 <net_buf_simple_add>
	me->subevent = subevt;
   32342:	2305      	movs	r3, #5
   32344:	7003      	strb	r3, [r0, #0]
   32346:	210c      	movs	r1, #12
   32348:	4628      	mov	r0, r5
   3234a:	f015 faed 	bl	47928 <net_buf_simple_add>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   3234e:	f104 0120 	add.w	r1, r4, #32
   32352:	4605      	mov	r5, r0
   32354:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
   32356:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   3235a:	f012 fbb2 	bl	44ac2 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   3235e:	2202      	movs	r2, #2
   32360:	f104 0128 	add.w	r1, r4, #40	; 0x28
   32364:	f105 000a 	add.w	r0, r5, #10
}
   32368:	b004      	add	sp, #16
   3236a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   3236e:	f012 bba8 	b.w	44ac2 <memcpy>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   32372:	4b0c      	ldr	r3, [pc, #48]	; (323a4 <hci_evt_encode+0x384>)
   32374:	681b      	ldr	r3, [r3, #0]
   32376:	061b      	lsls	r3, r3, #24
   32378:	f04f 0400 	mov.w	r4, #0
   3237c:	f57f ae8d 	bpl.w	3209a <hci_evt_encode+0x7a>
   32380:	3508      	adds	r5, #8
   32382:	2102      	movs	r1, #2
   32384:	4628      	mov	r0, r5
   32386:	f015 facf 	bl	47928 <net_buf_simple_add>
	hdr->evt = evt;
   3238a:	f44f 6381 	mov.w	r3, #1032	; 0x408
   3238e:	8003      	strh	r3, [r0, #0]
   32390:	2104      	movs	r1, #4
   32392:	4628      	mov	r0, r5
   32394:	f015 fac8 	bl	47928 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   32398:	2301      	movs	r3, #1
	ep->status = err;
   3239a:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   3239c:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   323a0:	70c3      	strb	r3, [r0, #3]
   323a2:	e67a      	b.n	3209a <hci_evt_encode+0x7a>
   323a4:	20000160 	.word	0x20000160
   323a8:	20000158 	.word	0x20000158
   323ac:	20001e7c 	.word	0x20001e7c
   323b0:	200014e0 	.word	0x200014e0
   323b4:	00049d14 	.word	0x00049d14
   323b8:	00049cc8 	.word	0x00049cc8
   323bc:	00049c68 	.word	0x00049c68
	switch (pdu_data->llctrl.unknown_rsp.type) {
   323c0:	f890 3020 	ldrb.w	r3, [r0, #32]
   323c4:	2b0e      	cmp	r3, #14
   323c6:	f47f ae68 	bne.w	3209a <hci_evt_encode+0x7a>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   323ca:	460b      	mov	r3, r1
   323cc:	4632      	mov	r2, r6
   323ce:	2100      	movs	r1, #0
   323d0:	201a      	movs	r0, #26
}
   323d2:	b004      	add	sp, #16
   323d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   323d8:	f7ff b820 	b.w	3141c <le_remote_feat_complete>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   323dc:	4b70      	ldr	r3, [pc, #448]	; (325a0 <hci_evt_encode+0x580>)
   323de:	685b      	ldr	r3, [r3, #4]
   323e0:	0098      	lsls	r0, r3, #2
   323e2:	d556      	bpl.n	32492 <hci_evt_encode+0x472>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   323e4:	4b6f      	ldr	r3, [pc, #444]	; (325a4 <hci_evt_encode+0x584>)
   323e6:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   323e8:	0699      	lsls	r1, r3, #26
   323ea:	d552      	bpl.n	32492 <hci_evt_encode+0x472>
   323ec:	3508      	adds	r5, #8
   323ee:	2102      	movs	r1, #2
   323f0:	4628      	mov	r0, r5
   323f2:	f015 fa99 	bl	47928 <net_buf_simple_add>
	hdr->evt = evt;
   323f6:	f640 333e 	movw	r3, #2878	; 0xb3e
   323fa:	8003      	strh	r3, [r0, #0]
   323fc:	2101      	movs	r1, #1
   323fe:	4628      	mov	r0, r5
   32400:	f015 fa92 	bl	47928 <net_buf_simple_add>
	me->subevent = subevt;
   32404:	2306      	movs	r3, #6
   32406:	7003      	strb	r3, [r0, #0]
   32408:	210a      	movs	r1, #10
   3240a:	4628      	mov	r0, r5
   3240c:	f015 fa8c 	bl	47928 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   32410:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   32412:	8c23      	ldrh	r3, [r4, #32]
   32414:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   32416:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   32418:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   3241a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   3241c:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   3241e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   32420:	8103      	strh	r3, [r0, #8]
   32422:	e63a      	b.n	3209a <hci_evt_encode+0x7a>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   32424:	460b      	mov	r3, r1
   32426:	4632      	mov	r2, r6
   32428:	4639      	mov	r1, r7
   3242a:	2000      	movs	r0, #0
   3242c:	e7d1      	b.n	323d2 <hci_evt_encode+0x3b2>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   3242e:	4b5c      	ldr	r3, [pc, #368]	; (325a0 <hci_evt_encode+0x580>)
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
   32430:	f890 4020 	ldrb.w	r4, [r0, #32]
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   32434:	681b      	ldr	r3, [r3, #0]
   32436:	061f      	lsls	r7, r3, #24
   32438:	f57f ae2f 	bpl.w	3209a <hci_evt_encode+0x7a>
   3243c:	3508      	adds	r5, #8
   3243e:	2102      	movs	r1, #2
   32440:	4628      	mov	r0, r5
   32442:	f015 fa71 	bl	47928 <net_buf_simple_add>
	hdr->evt = evt;
   32446:	f44f 6381 	mov.w	r3, #1032	; 0x408
   3244a:	8003      	strh	r3, [r0, #0]
   3244c:	2104      	movs	r1, #4
   3244e:	4628      	mov	r0, r5
   32450:	f015 fa6a 	bl	47928 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   32454:	fab4 f384 	clz	r3, r4
   32458:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   3245a:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   3245c:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   32460:	70c3      	strb	r3, [r0, #3]
   32462:	e61a      	b.n	3209a <hci_evt_encode+0x7a>
		ll_rl_crpa_set(cc->peer_addr_type,
   32464:	7fa0      	ldrb	r0, [r4, #30]
   32466:	f104 0325 	add.w	r3, r4, #37	; 0x25
   3246a:	22ff      	movs	r2, #255	; 0xff
   3246c:	f104 011f 	add.w	r1, r4, #31
   32470:	f007 f966 	bl	39740 <ll_rl_crpa_set>
   32474:	e61b      	b.n	320ae <hci_evt_encode+0x8e>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   32476:	4a4c      	ldr	r2, [pc, #304]	; (325a8 <hci_evt_encode+0x588>)
   32478:	494c      	ldr	r1, [pc, #304]	; (325ac <hci_evt_encode+0x58c>)
   3247a:	484d      	ldr	r0, [pc, #308]	; (325b0 <hci_evt_encode+0x590>)
   3247c:	f641 23f5 	movw	r3, #6901	; 0x1af5
   32480:	f010 fa20 	bl	428c4 <printk>
   32484:	4040      	eors	r0, r0
   32486:	f380 8811 	msr	BASEPRI, r0
   3248a:	f04f 0003 	mov.w	r0, #3
   3248e:	df02      	svc	2
   32490:	e609      	b.n	320a6 <hci_evt_encode+0x86>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   32492:	2300      	movs	r3, #0
   32494:	e9cd 3301 	strd	r3, r3, [sp, #4]
   32498:	9300      	str	r3, [sp, #0]
   3249a:	221a      	movs	r2, #26
   3249c:	2102      	movs	r1, #2
   3249e:	4630      	mov	r0, r6
   324a0:	f002 ff0a 	bl	352b8 <ll_conn_update>
		return;
   324a4:	e5f9      	b.n	3209a <hci_evt_encode+0x7a>
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   324a6:	f1b8 0f00 	cmp.w	r8, #0
   324aa:	d144      	bne.n	32536 <hci_evt_encode+0x516>
   324ac:	2102      	movs	r1, #2
   324ae:	4628      	mov	r0, r5
   324b0:	f015 fa3a 	bl	47928 <net_buf_simple_add>
	hdr->evt = evt;
   324b4:	f241 333e 	movw	r3, #4926	; 0x133e
   324b8:	8003      	strh	r3, [r0, #0]
   324ba:	2101      	movs	r1, #1
   324bc:	4628      	mov	r0, r5
   324be:	f015 fa33 	bl	47928 <net_buf_simple_add>
	me->subevent = subevt;
   324c2:	2301      	movs	r3, #1
   324c4:	7003      	strb	r3, [r0, #0]
   324c6:	2112      	movs	r1, #18
   324c8:	4628      	mov	r0, r5
   324ca:	f015 fa2d 	bl	47928 <net_buf_simple_add>
   324ce:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
   324d0:	2212      	movs	r2, #18
   324d2:	4641      	mov	r1, r8
   324d4:	f012 fb00 	bl	44ad8 <memset>
		lecc->status = status;
   324d8:	7027      	strb	r7, [r4, #0]
		return;
   324da:	e5de      	b.n	3209a <hci_evt_encode+0x7a>
   324dc:	2102      	movs	r1, #2
   324de:	4628      	mov	r0, r5
   324e0:	f015 fa22 	bl	47928 <net_buf_simple_add>
	hdr->evt = evt;
   324e4:	f241 333e 	movw	r3, #4926	; 0x133e
   324e8:	8003      	strh	r3, [r0, #0]
   324ea:	2101      	movs	r1, #1
   324ec:	4628      	mov	r0, r5
   324ee:	f015 fa1b 	bl	47928 <net_buf_simple_add>
   324f2:	4603      	mov	r3, r0
	me->subevent = subevt;
   324f4:	2201      	movs	r2, #1
   324f6:	701a      	strb	r2, [r3, #0]
   324f8:	4628      	mov	r0, r5
   324fa:	2112      	movs	r1, #18
   324fc:	f015 fa14 	bl	47928 <net_buf_simple_add>
	lecc->status = 0x00;
   32500:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   32502:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = cc->role;
   32506:	7f63      	ldrb	r3, [r4, #29]
   32508:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   3250a:	7fa3      	ldrb	r3, [r4, #30]
   3250c:	f003 0301 	and.w	r3, r3, #1
   32510:	4605      	mov	r5, r0
   32512:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
   32514:	2206      	movs	r2, #6
   32516:	f104 011f 	add.w	r1, r4, #31
   3251a:	3005      	adds	r0, #5
   3251c:	f012 fad1 	bl	44ac2 <memcpy>
	lecc->interval = sys_cpu_to_le16(cc->interval);
   32520:	f8d4 3032 	ldr.w	r3, [r4, #50]	; 0x32
   32524:	f8c5 300b 	str.w	r3, [r5, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   32528:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   3252a:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
   3252e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   32532:	746b      	strb	r3, [r5, #17]
   32534:	e5b1      	b.n	3209a <hci_evt_encode+0x7a>
   32536:	2102      	movs	r1, #2
   32538:	4628      	mov	r0, r5
   3253a:	f015 f9f5 	bl	47928 <net_buf_simple_add>
	hdr->evt = evt;
   3253e:	f641 733e 	movw	r3, #7998	; 0x1f3e
   32542:	8003      	strh	r3, [r0, #0]
   32544:	2101      	movs	r1, #1
   32546:	4628      	mov	r0, r5
   32548:	f015 f9ee 	bl	47928 <net_buf_simple_add>
	me->subevent = subevt;
   3254c:	230a      	movs	r3, #10
   3254e:	7003      	strb	r3, [r0, #0]
   32550:	211e      	movs	r1, #30
   32552:	4628      	mov	r0, r5
   32554:	f015 f9e8 	bl	47928 <net_buf_simple_add>
   32558:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
   3255a:	221e      	movs	r2, #30
   3255c:	2100      	movs	r1, #0
   3255e:	f012 fabb 	bl	44ad8 <memset>
			leecc->status = status;
   32562:	7027      	strb	r7, [r4, #0]
			return;
   32564:	e599      	b.n	3209a <hci_evt_encode+0x7a>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   32566:	4a10      	ldr	r2, [pc, #64]	; (325a8 <hci_evt_encode+0x588>)
   32568:	4912      	ldr	r1, [pc, #72]	; (325b4 <hci_evt_encode+0x594>)
   3256a:	4811      	ldr	r0, [pc, #68]	; (325b0 <hci_evt_encode+0x590>)
   3256c:	f641 337a 	movw	r3, #7034	; 0x1b7a
   32570:	f010 f9a8 	bl	428c4 <printk>
   32574:	4040      	eors	r0, r0
   32576:	f380 8811 	msr	BASEPRI, r0
   3257a:	f04f 0003 	mov.w	r0, #3
   3257e:	df02      	svc	2
   32580:	e60d      	b.n	3219e <hci_evt_encode+0x17e>
		LL_ASSERT(0);
   32582:	4a09      	ldr	r2, [pc, #36]	; (325a8 <hci_evt_encode+0x588>)
   32584:	490c      	ldr	r1, [pc, #48]	; (325b8 <hci_evt_encode+0x598>)
   32586:	480a      	ldr	r0, [pc, #40]	; (325b0 <hci_evt_encode+0x590>)
   32588:	f641 43af 	movw	r3, #7343	; 0x1caf
   3258c:	f010 f99a 	bl	428c4 <printk>
   32590:	4040      	eors	r0, r0
   32592:	f380 8811 	msr	BASEPRI, r0
   32596:	f04f 0003 	mov.w	r0, #3
   3259a:	df02      	svc	2
		return;
   3259c:	e57d      	b.n	3209a <hci_evt_encode+0x7a>
   3259e:	bf00      	nop
   325a0:	20000160 	.word	0x20000160
   325a4:	20000158 	.word	0x20000158
   325a8:	00049d14 	.word	0x00049d14
   325ac:	00049d50 	.word	0x00049d50
   325b0:	00049c68 	.word	0x00049c68
   325b4:	00049d8c 	.word	0x00049d8c
   325b8:	00049cc8 	.word	0x00049cc8

000325bc <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
   325bc:	b570      	push	{r4, r5, r6, lr}
   325be:	f100 0408 	add.w	r4, r0, #8
   325c2:	460e      	mov	r6, r1
   325c4:	4620      	mov	r0, r4
   325c6:	2102      	movs	r1, #2
   325c8:	4615      	mov	r5, r2
   325ca:	f015 f9ad 	bl	47928 <net_buf_simple_add>
	hdr->evt = evt;
   325ce:	f240 5313 	movw	r3, #1299	; 0x513
   325d2:	8003      	strh	r3, [r0, #0]
   325d4:	2105      	movs	r1, #5
   325d6:	4620      	mov	r0, r4
   325d8:	f015 f9a6 	bl	47928 <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
   325dc:	2301      	movs	r3, #1
   325de:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   325e0:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   325e4:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   325e8:	bd70      	pop	{r4, r5, r6, pc}
   325ea:	bf00      	nop

000325ec <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   325ec:	7903      	ldrb	r3, [r0, #4]
   325ee:	2b03      	cmp	r3, #3
   325f0:	d009      	beq.n	32606 <hci_get_class+0x1a>

		switch (node_rx->hdr.type) {
   325f2:	2b16      	cmp	r3, #22
   325f4:	d005      	beq.n	32602 <hci_get_class+0x16>
   325f6:	3b17      	subs	r3, #23
   325f8:	2b05      	cmp	r3, #5
   325fa:	bf8c      	ite	hi
   325fc:	2000      	movhi	r0, #0
   325fe:	2003      	movls	r0, #3
   32600:	4770      	bx	lr

#if defined(CONFIG_BT_CTLR_DF_CONN_CTE_RX)
		case NODE_RX_TYPE_CONN_IQ_SAMPLE_REPORT:
#endif /* CONFIG_BT_CTLR_DF_CONN_CTE_RX */

			return HCI_CLASS_EVT_REQUIRED;
   32602:	2001      	movs	r0, #1
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   32604:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   32606:	7f03      	ldrb	r3, [r0, #28]
   32608:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_EVT_LLCP;
   3260c:	2b03      	cmp	r3, #3
   3260e:	bf14      	ite	ne
   32610:	2005      	movne	r0, #5
   32612:	2004      	moveq	r0, #4
   32614:	4770      	bx	lr
   32616:	bf00      	nop

00032618 <hci_init>:

void hci_init(struct k_poll_signal *signal_host_buf)
{
   32618:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
   3261a:	4b0b      	ldr	r3, [pc, #44]	; (32648 <hci_init+0x30>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   3261c:	490b      	ldr	r1, [pc, #44]	; (3264c <hci_init+0x34>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   3261e:	4a0c      	ldr	r2, [pc, #48]	; (32650 <hci_init+0x38>)
	event_mask = DEFAULT_EVENT_MASK;
   32620:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   32624:	f641 75ff 	movw	r5, #8191	; 0x1fff
   32628:	e9c3 4500 	strd	r4, r5, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   3262c:	2400      	movs	r4, #0
   3262e:	2500      	movs	r5, #0
   32630:	e9c1 4500 	strd	r4, r5, [r1]
	conn_count = 0U;
   32634:	4b07      	ldr	r3, [pc, #28]	; (32654 <hci_init+0x3c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   32636:	201f      	movs	r0, #31
   32638:	2100      	movs	r1, #0
   3263a:	e9c2 0100 	strd	r0, r1, [r2]
	conn_count = 0U;
   3263e:	2200      	movs	r2, #0
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   32640:	bc30      	pop	{r4, r5}
	conn_count = 0U;
   32642:	601a      	str	r2, [r3, #0]
}
   32644:	4770      	bx	lr
   32646:	bf00      	nop
   32648:	20000160 	.word	0x20000160
   3264c:	200014e0 	.word	0x200014e0
   32650:	20000158 	.word	0x20000158
   32654:	20001e7c 	.word	0x20001e7c

00032658 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   32658:	f007 bff0 	b.w	3a63c <lll_csrand_get>

0003265c <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   3265c:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   3265e:	2300      	movs	r3, #0
   32660:	f009 fe0e 	bl	3c280 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   32664:	2000      	movs	r0, #0
   32666:	bd08      	pop	{r3, pc}

00032668 <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
   32668:	4801      	ldr	r0, [pc, #4]	; (32670 <ll_feat_get+0x8>)
   3266a:	2100      	movs	r1, #0
   3266c:	4770      	bx	lr
   3266e:	bf00      	nop
   32670:	0001417f 	.word	0x0001417f

00032674 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   32674:	b510      	push	{r4, lr}
   32676:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   32678:	f008 f816 	bl	3a6a8 <lll_reset>
	LL_ASSERT(!err);
   3267c:	b950      	cbnz	r0, 32694 <perform_lll_reset+0x20>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   3267e:	f008 fc17 	bl	3aeb0 <lll_adv_reset>
	LL_ASSERT(!err);
   32682:	b9c0      	cbnz	r0, 326b6 <perform_lll_reset+0x42>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   32684:	f009 f8d2 	bl	3b82c <lll_conn_reset>
	LL_ASSERT(!err);
   32688:	bb30      	cbnz	r0, 326d8 <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
   3268a:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   3268c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   32690:	f00e bf68 	b.w	41564 <z_impl_k_sem_give>
	LL_ASSERT(!err);
   32694:	4a19      	ldr	r2, [pc, #100]	; (326fc <perform_lll_reset+0x88>)
   32696:	491a      	ldr	r1, [pc, #104]	; (32700 <perform_lll_reset+0x8c>)
   32698:	481a      	ldr	r0, [pc, #104]	; (32704 <perform_lll_reset+0x90>)
   3269a:	f640 0324 	movw	r3, #2084	; 0x824
   3269e:	f010 f911 	bl	428c4 <printk>
   326a2:	4040      	eors	r0, r0
   326a4:	f380 8811 	msr	BASEPRI, r0
   326a8:	f04f 0003 	mov.w	r0, #3
   326ac:	df02      	svc	2
	err = lll_adv_reset();
   326ae:	f008 fbff 	bl	3aeb0 <lll_adv_reset>
	LL_ASSERT(!err);
   326b2:	2800      	cmp	r0, #0
   326b4:	d0e6      	beq.n	32684 <perform_lll_reset+0x10>
   326b6:	4a11      	ldr	r2, [pc, #68]	; (326fc <perform_lll_reset+0x88>)
   326b8:	4911      	ldr	r1, [pc, #68]	; (32700 <perform_lll_reset+0x8c>)
   326ba:	4812      	ldr	r0, [pc, #72]	; (32704 <perform_lll_reset+0x90>)
   326bc:	f640 0329 	movw	r3, #2089	; 0x829
   326c0:	f010 f900 	bl	428c4 <printk>
   326c4:	4040      	eors	r0, r0
   326c6:	f380 8811 	msr	BASEPRI, r0
   326ca:	f04f 0003 	mov.w	r0, #3
   326ce:	df02      	svc	2
	err = lll_conn_reset();
   326d0:	f009 f8ac 	bl	3b82c <lll_conn_reset>
	LL_ASSERT(!err);
   326d4:	2800      	cmp	r0, #0
   326d6:	d0d8      	beq.n	3268a <perform_lll_reset+0x16>
   326d8:	4a08      	ldr	r2, [pc, #32]	; (326fc <perform_lll_reset+0x88>)
   326da:	4909      	ldr	r1, [pc, #36]	; (32700 <perform_lll_reset+0x8c>)
   326dc:	4809      	ldr	r0, [pc, #36]	; (32704 <perform_lll_reset+0x90>)
   326de:	f640 0335 	movw	r3, #2101	; 0x835
   326e2:	f010 f8ef 	bl	428c4 <printk>
   326e6:	4040      	eors	r0, r0
   326e8:	f380 8811 	msr	BASEPRI, r0
   326ec:	f04f 0003 	mov.w	r0, #3
   326f0:	df02      	svc	2
   326f2:	4620      	mov	r0, r4
}
   326f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   326f8:	f00e bf34 	b.w	41564 <z_impl_k_sem_give>
   326fc:	00049dc8 	.word	0x00049dc8
   32700:	00049e04 	.word	0x00049e04
   32704:	00049c68 	.word	0x00049c68

00032708 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   32708:	6008      	str	r0, [r1, #0]
   3270a:	4801      	ldr	r0, [pc, #4]	; (32710 <ull_ticker_status_give+0x8>)
   3270c:	f00e bf2a 	b.w	41564 <z_impl_k_sem_give>
   32710:	20002130 	.word	0x20002130

00032714 <disabled_cb>:
   32714:	f00e bf26 	b.w	41564 <z_impl_k_sem_give>

00032718 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   32718:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   3271c:	4d2a      	ldr	r5, [pc, #168]	; (327c8 <tx_cmplt_get+0xb0>)
{
   3271e:	460c      	mov	r4, r1
   32720:	4692      	mov	sl, r2
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
   32722:	7869      	ldrb	r1, [r5, #1]
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   32724:	7822      	ldrb	r2, [r4, #0]
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   32726:	782b      	ldrb	r3, [r5, #0]
   32728:	4291      	cmp	r1, r2
   3272a:	bf9c      	itt	ls
   3272c:	78aa      	ldrbls	r2, [r5, #2]
		*idx = first;
   3272e:	7022      	strbls	r2, [r4, #0]
	}

	if (*idx == last) {
   32730:	4592      	cmp	sl, r2
{
   32732:	4683      	mov	fp, r0
   32734:	d040      	beq.n	327b8 <tx_cmplt_get+0xa0>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   32736:	fb12 f303 	smulbb	r3, r2, r3
	i = *idx + 1;
   3273a:	3201      	adds	r2, #1
   3273c:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
   3273e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 327cc <tx_cmplt_get+0xb4>
		i = 0U;
   32742:	4291      	cmp	r1, r2
   32744:	bf08      	it	eq
   32746:	2200      	moveq	r2, #0

	*idx = i;
   32748:	7022      	strb	r2, [r4, #0]
				    first);
	if (!tx) {
		return 0;
	}

	*handle = tx->handle;
   3274a:	f839 2003 	ldrh.w	r2, [r9, r3]
   3274e:	8002      	strh	r2, [r0, #0]
	cmplt = 0U;
   32750:	2600      	movs	r6, #0
	p = (void *)(fifo + (*idx) * size);
   32752:	444b      	add	r3, r9
   32754:	f04f 0802 	mov.w	r8, #2
		if (!node_tx || (node_tx == (void *)1) ||
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
		      p->ll_id == PDU_DATA_LLID_DATA_CONTINUE))) {
			/* data packet, hence count num cmplt */
			tx->node = (void *)1;
   32758:	2701      	movs	r7, #1
   3275a:	e01a      	b.n	32792 <tx_cmplt_get+0x7a>
			cmplt++;
   3275c:	3601      	adds	r6, #1
			tx->node = (void *)1;
   3275e:	605f      	str	r7, [r3, #4]
			cmplt++;
   32760:	b2f6      	uxtb	r6, r6
	if (*idx >= count) {
   32762:	7823      	ldrb	r3, [r4, #0]
		if (((uint32_t)node_tx & ~3)) {
			ll_tx_mem_release(node_tx);
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
   32764:	7869      	ldrb	r1, [r5, #1]
		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   32766:	7828      	ldrb	r0, [r5, #0]
   32768:	4299      	cmp	r1, r3
   3276a:	bf9c      	itt	ls
   3276c:	78ab      	ldrbls	r3, [r5, #2]
		*idx = first;
   3276e:	7023      	strbls	r3, [r4, #0]
	if (*idx == last) {
   32770:	459a      	cmp	sl, r3
   32772:	d022      	beq.n	327ba <tx_cmplt_get+0xa2>
	i = *idx + 1;
   32774:	1c5a      	adds	r2, r3, #1
   32776:	b2d2      	uxtb	r2, r2
		i = 0U;
   32778:	4291      	cmp	r1, r2
   3277a:	bf08      	it	eq
   3277c:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
   3277e:	fb13 f300 	smulbb	r3, r3, r0
	*idx = i;
   32782:	7022      	strb	r2, [r4, #0]
					    last, first);
	} while (tx && tx->handle == *handle);
   32784:	f839 1003 	ldrh.w	r1, [r9, r3]
   32788:	f8bb 2000 	ldrh.w	r2, [fp]
   3278c:	4291      	cmp	r1, r2
	p = (void *)(fifo + (*idx) * size);
   3278e:	444b      	add	r3, r9
   32790:	d113      	bne.n	327ba <tx_cmplt_get+0xa2>
		node_tx = tx->node;
   32792:	6858      	ldr	r0, [r3, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   32794:	2801      	cmp	r0, #1
   32796:	d9e1      	bls.n	3275c <tx_cmplt_get+0x44>
   32798:	2803      	cmp	r0, #3
   3279a:	d802      	bhi.n	327a2 <tx_cmplt_get+0x8a>
   3279c:	f8c3 8004 	str.w	r8, [r3, #4]
		if (((uint32_t)node_tx & ~3)) {
   327a0:	e7df      	b.n	32762 <tx_cmplt_get+0x4a>
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   327a2:	7902      	ldrb	r2, [r0, #4]
   327a4:	f002 0203 	and.w	r2, r2, #3
		    (((uint32_t)node_tx & ~3) &&
   327a8:	3a01      	subs	r2, #1
   327aa:	2a01      	cmp	r2, #1
   327ac:	d908      	bls.n	327c0 <tx_cmplt_get+0xa8>
			tx->node = (void *)2;
   327ae:	2202      	movs	r2, #2
   327b0:	605a      	str	r2, [r3, #4]
			ll_tx_mem_release(node_tx);
   327b2:	f002 fd31 	bl	35218 <ll_tx_mem_release>
   327b6:	e7d4      	b.n	32762 <tx_cmplt_get+0x4a>
		return 0;
   327b8:	2600      	movs	r6, #0

	return cmplt;
}
   327ba:	4630      	mov	r0, r6
   327bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
   327c0:	3601      	adds	r6, #1
   327c2:	b2f6      	uxtb	r6, r6
			tx->node = (void *)1;
   327c4:	2201      	movs	r2, #1
			cmplt++;
   327c6:	e7f3      	b.n	327b0 <tx_cmplt_get+0x98>
   327c8:	2000046c 	.word	0x2000046c
   327cc:	20000470 	.word	0x20000470

000327d0 <ull_done>:
}
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
   327d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   327d4:	4e3c      	ldr	r6, [pc, #240]	; (328c8 <ull_done+0xf8>)
	void *release;

	/* Decrement prepare reference if ULL will not resume */
	ull_hdr = done->param;
	if (ull_hdr) {
		LL_ASSERT(ull_ref_get(ull_hdr));
   327d6:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 328cc <ull_done+0xfc>
   327da:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 328d0 <ull_done+0x100>
{
   327de:	b083      	sub	sp, #12
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   327e0:	e9d6 0100 	ldrd	r0, r1, [r6]
   327e4:	aa01      	add	r2, sp, #4
   327e6:	f7fd f967 	bl	2fab8 <memq_peek>
		if (link) {
   327ea:	4604      	mov	r4, r0
   327ec:	2800      	cmp	r0, #0
   327ee:	d03e      	beq.n	3286e <ull_done+0x9e>
			(void)memq_dequeue(memq_ull_done.tail,
   327f0:	6870      	ldr	r0, [r6, #4]
   327f2:	2200      	movs	r2, #0
   327f4:	4631      	mov	r1, r6
   327f6:	f7fd f967 	bl	2fac8 <memq_dequeue>
			rx_demux_event_done(link, done);
   327fa:	9f01      	ldr	r7, [sp, #4]
	ull_hdr = done->param;
   327fc:	69fd      	ldr	r5, [r7, #28]
	if (ull_hdr) {
   327fe:	b135      	cbz	r5, 3280e <ull_done+0x3e>
	return hdr->ref;
   32800:	782b      	ldrb	r3, [r5, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
   32802:	2b00      	cmp	r3, #0
   32804:	d052      	beq.n	328ac <ull_done+0xdc>
	return hdr->ref--;
   32806:	782b      	ldrb	r3, [r5, #0]
   32808:	3b01      	subs	r3, #1
   3280a:	b2db      	uxtb	r3, r3
   3280c:	702b      	strb	r3, [r5, #0]
		ull_ref_dec(ull_hdr);
	}

	/* Process role dependent event done */
	switch (done->extra.type) {
   3280e:	f897 3020 	ldrb.w	r3, [r7, #32]
   32812:	b123      	cbz	r3, 3281e <ull_done+0x4e>
   32814:	2b01      	cmp	r3, #1
   32816:	d13b      	bne.n	32890 <ull_done+0xc0>
#if defined(CONFIG_BT_CONN)
	case EVENT_DONE_EXTRA_TYPE_CONN:
		ull_conn_done(done);
   32818:	4638      	mov	r0, r7
   3281a:	f005 fe89 	bl	38530 <ull_conn_done>
		break;
	}

	/* Release done */
	done->extra.type = 0U;
	release = RXFIFO_RELEASE(done, link, done);
   3281e:	4a2d      	ldr	r2, [pc, #180]	; (328d4 <ull_done+0x104>)
	last = last + 1;
   32820:	78d3      	ldrb	r3, [r2, #3]
	if (last == count) {
   32822:	f892 c001 	ldrb.w	ip, [r2, #1]
   32826:	7890      	ldrb	r0, [r2, #2]
	last = last + 1;
   32828:	3301      	adds	r3, #1
	done->extra.type = 0U;
   3282a:	2100      	movs	r1, #0
   3282c:	b2db      	uxtb	r3, r3
		last = 0U;
   3282e:	459c      	cmp	ip, r3
   32830:	bf08      	it	eq
   32832:	460b      	moveq	r3, r1
	if (last == first) {
   32834:	4298      	cmp	r0, r3
   32836:	f887 1020 	strb.w	r1, [r7, #32]
	release = RXFIFO_RELEASE(done, link, done);
   3283a:	7811      	ldrb	r1, [r2, #0]
   3283c:	d01a      	beq.n	32874 <ull_done+0xa4>

	if (!mfifo_enqueue_idx_get(n, f, *l, &idx)) {
		return NULL;
	}

	rx->link = link;
   3283e:	603c      	str	r4, [r7, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   32840:	78d0      	ldrb	r0, [r2, #3]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   32842:	fb00 2101 	mla	r1, r0, r1, r2
   32846:	604f      	str	r7, [r1, #4]
	*last = idx; /* Commit: Update write index */
   32848:	70d3      	strb	r3, [r2, #3]
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   3284a:	2d00      	cmp	r5, #0
   3284c:	d0c8      	beq.n	327e0 <ull_done+0x10>
	return hdr->ref;
   3284e:	782b      	ldrb	r3, [r5, #0]
   32850:	2b00      	cmp	r3, #0
   32852:	d1c5      	bne.n	327e0 <ull_done+0x10>
   32854:	696b      	ldr	r3, [r5, #20]
   32856:	2b00      	cmp	r3, #0
   32858:	d0c2      	beq.n	327e0 <ull_done+0x10>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   3285a:	69a8      	ldr	r0, [r5, #24]
   3285c:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   3285e:	e9d6 0100 	ldrd	r0, r1, [r6]
   32862:	aa01      	add	r2, sp, #4
   32864:	f7fd f928 	bl	2fab8 <memq_peek>
		if (link) {
   32868:	4604      	mov	r4, r0
   3286a:	2800      	cmp	r0, #0
   3286c:	d1c0      	bne.n	327f0 <ull_done+0x20>
}
   3286e:	b003      	add	sp, #12
   32870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(release == done);
   32874:	4918      	ldr	r1, [pc, #96]	; (328d8 <ull_done+0x108>)
   32876:	4819      	ldr	r0, [pc, #100]	; (328dc <ull_done+0x10c>)
   32878:	f44f 6327 	mov.w	r3, #2672	; 0xa70
   3287c:	4642      	mov	r2, r8
   3287e:	f010 f821 	bl	428c4 <printk>
   32882:	4040      	eors	r0, r0
   32884:	f380 8811 	msr	BASEPRI, r0
   32888:	f04f 0003 	mov.w	r0, #3
   3288c:	df02      	svc	2
   3288e:	e7dc      	b.n	3284a <ull_done+0x7a>
		LL_ASSERT(0);
   32890:	4913      	ldr	r1, [pc, #76]	; (328e0 <ull_done+0x110>)
   32892:	4812      	ldr	r0, [pc, #72]	; (328dc <ull_done+0x10c>)
   32894:	f640 2369 	movw	r3, #2665	; 0xa69
   32898:	4642      	mov	r2, r8
   3289a:	f010 f813 	bl	428c4 <printk>
   3289e:	4040      	eors	r0, r0
   328a0:	f380 8811 	msr	BASEPRI, r0
   328a4:	f04f 0003 	mov.w	r0, #3
   328a8:	df02      	svc	2
		break;
   328aa:	e7b8      	b.n	3281e <ull_done+0x4e>
		LL_ASSERT(ull_ref_get(ull_hdr));
   328ac:	480b      	ldr	r0, [pc, #44]	; (328dc <ull_done+0x10c>)
   328ae:	f640 2312 	movw	r3, #2578	; 0xa12
   328b2:	4642      	mov	r2, r8
   328b4:	4649      	mov	r1, r9
   328b6:	f010 f805 	bl	428c4 <printk>
   328ba:	4040      	eors	r0, r0
   328bc:	f380 8811 	msr	BASEPRI, r0
   328c0:	f04f 0003 	mov.w	r0, #3
   328c4:	df02      	svc	2
   328c6:	e79e      	b.n	32806 <ull_done+0x36>
   328c8:	20001eb8 	.word	0x20001eb8
   328cc:	00049dc8 	.word	0x00049dc8
   328d0:	00049e0c 	.word	0x00049e0c
   328d4:	2000058c 	.word	0x2000058c
   328d8:	00049e24 	.word	0x00049e24
   328dc:	00049c68 	.word	0x00049c68
   328e0:	00049cc8 	.word	0x00049cc8

000328e4 <rx_alloc>:
{
   328e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (max > mem_link_rx.quota_pdu) {
   328e8:	4f3b      	ldr	r7, [pc, #236]	; (329d8 <rx_alloc+0xf4>)
   328ea:	783e      	ldrb	r6, [r7, #0]
   328ec:	4286      	cmp	r6, r0
   328ee:	bf28      	it	cs
   328f0:	4606      	movcs	r6, r0
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   328f2:	b366      	cbz	r6, 3294e <rx_alloc+0x6a>
   328f4:	4d39      	ldr	r5, [pc, #228]	; (329dc <rx_alloc+0xf8>)
		rx = mem_acquire(&mem_pdu_rx.free);
   328f6:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 329e0 <rx_alloc+0xfc>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   328fa:	78ec      	ldrb	r4, [r5, #3]
		link = mem_acquire(&mem_link_rx.free);
   328fc:	f107 0804 	add.w	r8, r7, #4
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   32900:	f105 0a04 	add.w	sl, r5, #4
	if (last == count) {
   32904:	786a      	ldrb	r2, [r5, #1]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   32906:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   32908:	3401      	adds	r4, #1
   3290a:	b2e4      	uxtb	r4, r4
		last = 0U;
   3290c:	42a2      	cmp	r2, r4
   3290e:	bf08      	it	eq
   32910:	2400      	moveq	r4, #0
	if (last == first) {
   32912:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
   32914:	4640      	mov	r0, r8
   32916:	d01c      	beq.n	32952 <rx_alloc+0x6e>
   32918:	f7fd f860 	bl	2f9dc <mem_acquire>
   3291c:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   3291e:	4648      	mov	r0, r9
		if (!link) {
   32920:	f1bb 0f00 	cmp.w	fp, #0
   32924:	d013      	beq.n	3294e <rx_alloc+0x6a>
		rx = mem_acquire(&mem_pdu_rx.free);
   32926:	f7fd f859 	bl	2f9dc <mem_acquire>
		if (!rx) {
   3292a:	2800      	cmp	r0, #0
   3292c:	d048      	beq.n	329c0 <rx_alloc+0xdc>
		rx->link = link;
   3292e:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   32932:	78eb      	ldrb	r3, [r5, #3]
   32934:	782a      	ldrb	r2, [r5, #0]
   32936:	fb13 f302 	smulbb	r3, r3, r2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   3293a:	f84a 0003 	str.w	r0, [sl, r3]
	mem_link_rx.quota_pdu += delta;
   3293e:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   32940:	70ec      	strb	r4, [r5, #3]
		max--;
   32942:	3e01      	subs	r6, #1
	mem_link_rx.quota_pdu += delta;
   32944:	3b01      	subs	r3, #1
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   32946:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   3294a:	703b      	strb	r3, [r7, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   3294c:	d1da      	bne.n	32904 <rx_alloc+0x20>
}
   3294e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (mem_link_rx.quota_pdu &&
   32952:	783b      	ldrb	r3, [r7, #0]
   32954:	2b00      	cmp	r3, #0
   32956:	d0fa      	beq.n	3294e <rx_alloc+0x6a>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   32958:	f8df 9088 	ldr.w	r9, [pc, #136]	; 329e4 <rx_alloc+0x100>
		link = mem_acquire(&mem_link_rx.free);
   3295c:	4d22      	ldr	r5, [pc, #136]	; (329e8 <rx_alloc+0x104>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   3295e:	f899 4003 	ldrb.w	r4, [r9, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   32962:	4e1f      	ldr	r6, [pc, #124]	; (329e0 <rx_alloc+0xfc>)
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   32964:	f109 0804 	add.w	r8, r9, #4
	if (last == count) {
   32968:	f899 2001 	ldrb.w	r2, [r9, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   3296c:	f899 3002 	ldrb.w	r3, [r9, #2]
	last = last + 1;
   32970:	3401      	adds	r4, #1
   32972:	b2e4      	uxtb	r4, r4
		last = 0U;
   32974:	42a2      	cmp	r2, r4
   32976:	bf08      	it	eq
   32978:	2400      	moveq	r4, #0
	if (last == first) {
   3297a:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   3297c:	4628      	mov	r0, r5
   3297e:	d0e6      	beq.n	3294e <rx_alloc+0x6a>
   32980:	f7fd f82c 	bl	2f9dc <mem_acquire>
   32984:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   32986:	4630      	mov	r0, r6
		if (!link) {
   32988:	f1ba 0f00 	cmp.w	sl, #0
   3298c:	d0df      	beq.n	3294e <rx_alloc+0x6a>
		rx = mem_acquire(&mem_pdu_rx.free);
   3298e:	f7fd f825 	bl	2f9dc <mem_acquire>
		link->mem = NULL;
   32992:	2300      	movs	r3, #0
		if (!rx) {
   32994:	b1d0      	cbz	r0, 329cc <rx_alloc+0xe8>
		link->mem = NULL;
   32996:	f8ca 3004 	str.w	r3, [sl, #4]
		rx->link = link;
   3299a:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   3299e:	f899 3003 	ldrb.w	r3, [r9, #3]
   329a2:	f899 2000 	ldrb.w	r2, [r9]
   329a6:	fb13 f302 	smulbb	r3, r3, r2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   329aa:	f848 0003 	str.w	r0, [r8, r3]
	mem_link_rx.quota_pdu += delta;
   329ae:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   329b0:	f889 4003 	strb.w	r4, [r9, #3]
   329b4:	3b01      	subs	r3, #1
   329b6:	b2db      	uxtb	r3, r3
   329b8:	703b      	strb	r3, [r7, #0]
	while (mem_link_rx.quota_pdu &&
   329ba:	2b00      	cmp	r3, #0
   329bc:	d1d4      	bne.n	32968 <rx_alloc+0x84>
   329be:	e7c6      	b.n	3294e <rx_alloc+0x6a>
			mem_release(link, &mem_link_rx.free);
   329c0:	4658      	mov	r0, fp
   329c2:	4909      	ldr	r1, [pc, #36]	; (329e8 <rx_alloc+0x104>)
}
   329c4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, &mem_link_rx.free);
   329c8:	f7fd b822 	b.w	2fa10 <mem_release>
			mem_release(link, &mem_link_rx.free);
   329cc:	4650      	mov	r0, sl
   329ce:	4906      	ldr	r1, [pc, #24]	; (329e8 <rx_alloc+0x104>)
}
   329d0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, &mem_link_rx.free);
   329d4:	f7fd b81c 	b.w	2fa10 <mem_release>
   329d8:	20001ed0 	.word	0x20001ed0
   329dc:	2000049c 	.word	0x2000049c
   329e0:	20001f20 	.word	0x20001f20
   329e4:	20000490 	.word	0x20000490
   329e8:	20001ed4 	.word	0x20001ed4

000329ec <rx_demux>:
{
   329ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   329f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 32ba0 <rx_demux+0x1b4>
	k_sem_give(sem_recv);
   329f4:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 32ba4 <rx_demux+0x1b8>
			LL_ASSERT(rx);
   329f8:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 32ba8 <rx_demux+0x1bc>
   329fc:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 32bac <rx_demux+0x1c0>
{
   32a00:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   32a02:	e9d8 0100 	ldrd	r0, r1, [r8]
   32a06:	aa03      	add	r2, sp, #12
   32a08:	f7fd f856 	bl	2fab8 <memq_peek>
		if (link) {
   32a0c:	4605      	mov	r5, r0
   32a0e:	2800      	cmp	r0, #0
   32a10:	d035      	beq.n	32a7e <rx_demux+0x92>
			LL_ASSERT(rx);
   32a12:	9b03      	ldr	r3, [sp, #12]
   32a14:	2b00      	cmp	r3, #0
   32a16:	f000 80a6 	beq.w	32b66 <rx_demux+0x17a>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   32a1a:	7818      	ldrb	r0, [r3, #0]
   32a1c:	aa04      	add	r2, sp, #16
   32a1e:	a902      	add	r1, sp, #8
   32a20:	f006 f804 	bl	38a2c <ull_conn_ack_by_last_peek>
			if (link_tx) {
   32a24:	4604      	mov	r4, r0
   32a26:	2800      	cmp	r0, #0
   32a28:	d055      	beq.n	32ad6 <rx_demux+0xea>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   32a2a:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   32a2e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   32a32:	780f      	ldrb	r7, [r1, #0]
   32a34:	f8ad 200a 	strh.w	r2, [sp, #10]
   32a38:	ae05      	add	r6, sp, #20
   32a3a:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   32a3c:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   32a40:	f006 f80e 	bl	38a60 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   32a44:	4621      	mov	r1, r4
   32a46:	9a05      	ldr	r2, [sp, #20]
   32a48:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   32a4c:	f006 f850 	bl	38af0 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   32a50:	4620      	mov	r0, r4
   32a52:	f005 ffc3 	bl	389dc <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   32a56:	4632      	mov	r2, r6
   32a58:	4629      	mov	r1, r5
   32a5a:	4638      	mov	r0, r7
   32a5c:	f005 ffe6 	bl	38a2c <ull_conn_ack_by_last_peek>
	} while (link);
   32a60:	4604      	mov	r4, r0
   32a62:	2800      	cmp	r0, #0
   32a64:	d1ec      	bne.n	32a40 <rx_demux+0x54>
	k_sem_give(sem_recv);
   32a66:	f8d9 0000 	ldr.w	r0, [r9]
   32a6a:	f00e fd7b 	bl	41564 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   32a6e:	e9d8 0100 	ldrd	r0, r1, [r8]
   32a72:	aa03      	add	r2, sp, #12
   32a74:	f7fd f820 	bl	2fab8 <memq_peek>
		if (link) {
   32a78:	4605      	mov	r5, r0
   32a7a:	2800      	cmp	r0, #0
   32a7c:	d1c9      	bne.n	32a12 <rx_demux+0x26>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   32a7e:	aa04      	add	r2, sp, #16
   32a80:	a902      	add	r1, sp, #8
   32a82:	f10d 0007 	add.w	r0, sp, #7
   32a86:	f005 ffb5 	bl	389f4 <ull_conn_ack_peek>
			if (link) {
   32a8a:	4604      	mov	r4, r0
   32a8c:	2800      	cmp	r0, #0
   32a8e:	d067      	beq.n	32b60 <rx_demux+0x174>
				rx_demux_conn_tx_ack(ack_last, handle,
   32a90:	9b04      	ldr	r3, [sp, #16]
   32a92:	9305      	str	r3, [sp, #20]
   32a94:	f89d 7007 	ldrb.w	r7, [sp, #7]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   32a98:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   32a9c:	f8ad 300a 	strh.w	r3, [sp, #10]
   32aa0:	ae05      	add	r6, sp, #20
   32aa2:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   32aa6:	f005 ffdb 	bl	38a60 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   32aaa:	4621      	mov	r1, r4
   32aac:	9a05      	ldr	r2, [sp, #20]
   32aae:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   32ab2:	f006 f81d 	bl	38af0 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   32ab6:	4620      	mov	r0, r4
   32ab8:	f005 ff90 	bl	389dc <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   32abc:	4632      	mov	r2, r6
   32abe:	4629      	mov	r1, r5
   32ac0:	4638      	mov	r0, r7
   32ac2:	f005 ffb3 	bl	38a2c <ull_conn_ack_by_last_peek>
	} while (link);
   32ac6:	4604      	mov	r4, r0
   32ac8:	2800      	cmp	r0, #0
   32aca:	d1ec      	bne.n	32aa6 <rx_demux+0xba>
	k_sem_give(sem_recv);
   32acc:	f8d9 0000 	ldr.w	r0, [r9]
   32ad0:	f00e fd48 	bl	41564 <z_impl_k_sem_give>
	} while (link);
   32ad4:	e7cb      	b.n	32a6e <rx_demux+0x82>
				nack = rx_demux_rx(link, rx);
   32ad6:	9b03      	ldr	r3, [sp, #12]
   32ad8:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   32ada:	791b      	ldrb	r3, [r3, #4]
   32adc:	3b01      	subs	r3, #1
   32ade:	2b16      	cmp	r3, #22
   32ae0:	d80d      	bhi.n	32afe <rx_demux+0x112>
   32ae2:	e8df f003 	tbb	[pc, r3]
   32ae6:	0c1a      	.short	0x0c1a
   32ae8:	0c0c0c38 	.word	0x0c0c0c38
   32aec:	0c0c0c0c 	.word	0x0c0c0c0c
   32af0:	0c0c0c0c 	.word	0x0c0c0c0c
   32af4:	0c0c0c0c 	.word	0x0c0c0c0c
   32af8:	2d0c0c0c 	.word	0x2d0c0c0c
   32afc:	1a          	.byte	0x1a
   32afd:	00          	.byte	0x00
		LL_ASSERT(0);
   32afe:	4a2a      	ldr	r2, [pc, #168]	; (32ba8 <rx_demux+0x1bc>)
   32b00:	492b      	ldr	r1, [pc, #172]	; (32bb0 <rx_demux+0x1c4>)
   32b02:	482c      	ldr	r0, [pc, #176]	; (32bb4 <rx_demux+0x1c8>)
   32b04:	f640 13ff 	movw	r3, #2559	; 0x9ff
   32b08:	f00f fedc 	bl	428c4 <printk>
   32b0c:	4040      	eors	r0, r0
   32b0e:	f380 8811 	msr	BASEPRI, r0
   32b12:	f04f 0003 	mov.w	r0, #3
   32b16:	df02      	svc	2
			if (nack) {
   32b18:	e773      	b.n	32a02 <rx_demux+0x16>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   32b1a:	4921      	ldr	r1, [pc, #132]	; (32ba0 <rx_demux+0x1b4>)
   32b1c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   32b20:	2200      	movs	r2, #0
   32b22:	f7fc ffd1 	bl	2fac8 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   32b26:	4b24      	ldr	r3, [pc, #144]	; (32bb8 <rx_demux+0x1cc>)
		ll_rx_put(link, rx);
   32b28:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   32b2a:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   32b2c:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
   32b2e:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   32b30:	4a22      	ldr	r2, [pc, #136]	; (32bbc <rx_demux+0x1d0>)
   32b32:	f7fc ffb7 	bl	2faa4 <memq_enqueue>
	k_sem_give(sem_recv);
   32b36:	4b1b      	ldr	r3, [pc, #108]	; (32ba4 <rx_demux+0x1b8>)
   32b38:	6818      	ldr	r0, [r3, #0]
   32b3a:	f00e fd13 	bl	41564 <z_impl_k_sem_give>
			if (nack) {
   32b3e:	e760      	b.n	32a02 <rx_demux+0x16>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   32b40:	4917      	ldr	r1, [pc, #92]	; (32ba0 <rx_demux+0x1b4>)
   32b42:	f8d8 0004 	ldr.w	r0, [r8, #4]
   32b46:	2200      	movs	r2, #0
   32b48:	f7fc ffbe 	bl	2fac8 <memq_dequeue>
		ull_conn_setup(link, rx);
   32b4c:	9905      	ldr	r1, [sp, #20]
   32b4e:	4628      	mov	r0, r5
   32b50:	f002 fe74 	bl	3583c <ull_conn_setup>
			if (nack) {
   32b54:	e755      	b.n	32a02 <rx_demux+0x16>
		nack = ull_conn_rx(link, (void *)&rx);
   32b56:	a905      	add	r1, sp, #20
   32b58:	4628      	mov	r0, r5
   32b5a:	f002 fe97 	bl	3588c <ull_conn_rx>
		if (nack) {
   32b5e:	b188      	cbz	r0, 32b84 <rx_demux+0x198>
}
   32b60:	b007      	add	sp, #28
   32b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
   32b66:	4813      	ldr	r0, [pc, #76]	; (32bb4 <rx_demux+0x1c8>)
   32b68:	f44f 630b 	mov.w	r3, #2224	; 0x8b0
   32b6c:	465a      	mov	r2, fp
   32b6e:	4651      	mov	r1, sl
   32b70:	f00f fea8 	bl	428c4 <printk>
   32b74:	4040      	eors	r0, r0
   32b76:	f380 8811 	msr	BASEPRI, r0
   32b7a:	f04f 0003 	mov.w	r0, #3
   32b7e:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   32b80:	9b03      	ldr	r3, [sp, #12]
   32b82:	e74a      	b.n	32a1a <rx_demux+0x2e>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   32b84:	4906      	ldr	r1, [pc, #24]	; (32ba0 <rx_demux+0x1b4>)
   32b86:	4602      	mov	r2, r0
   32b88:	f8d8 0004 	ldr.w	r0, [r8, #4]
   32b8c:	f7fc ff9c 	bl	2fac8 <memq_dequeue>
		if (rx) {
   32b90:	9905      	ldr	r1, [sp, #20]
   32b92:	2900      	cmp	r1, #0
   32b94:	f43f af35 	beq.w	32a02 <rx_demux+0x16>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   32b98:	4b07      	ldr	r3, [pc, #28]	; (32bb8 <rx_demux+0x1cc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   32b9a:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
   32b9c:	78db      	ldrb	r3, [r3, #3]
   32b9e:	e7c6      	b.n	32b2e <rx_demux+0x142>
   32ba0:	20001ec8 	.word	0x20001ec8
   32ba4:	2000212c 	.word	0x2000212c
   32ba8:	00049dc8 	.word	0x00049dc8
   32bac:	00049e34 	.word	0x00049e34
   32bb0:	00049cc8 	.word	0x00049cc8
   32bb4:	00049c68 	.word	0x00049c68
   32bb8:	2000046c 	.word	0x2000046c
   32bbc:	20001ec4 	.word	0x20001ec4

00032bc0 <ll_rx_get>:
{
   32bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32bc4:	b085      	sub	sp, #20
   32bc6:	e9cd 0100 	strd	r0, r1, [sp]
   32bca:	4e67      	ldr	r6, [pc, #412]	; (32d68 <ll_rx_get+0x1a8>)
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   32bcc:	4f67      	ldr	r7, [pc, #412]	; (32d6c <ll_rx_get+0x1ac>)
	*node_rx = NULL;
   32bce:	9a00      	ldr	r2, [sp, #0]
   32bd0:	2300      	movs	r3, #0
   32bd2:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   32bd4:	e9d6 0100 	ldrd	r0, r1, [r6]
   32bd8:	aa03      	add	r2, sp, #12
   32bda:	f7fc ff6d 	bl	2fab8 <memq_peek>
	if (link) {
   32bde:	4605      	mov	r5, r0
   32be0:	2800      	cmp	r0, #0
   32be2:	f000 80a8 	beq.w	32d36 <ll_rx_get+0x176>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   32be6:	9b03      	ldr	r3, [sp, #12]
   32be8:	4961      	ldr	r1, [pc, #388]	; (32d70 <ll_rx_get+0x1b0>)
   32bea:	781a      	ldrb	r2, [r3, #0]
   32bec:	9801      	ldr	r0, [sp, #4]
   32bee:	f7ff fd93 	bl	32718 <tx_cmplt_get>
		if (!cmplt) {
   32bf2:	2800      	cmp	r0, #0
   32bf4:	f040 80a5 	bne.w	32d42 <ll_rx_get+0x182>
			f = mfifo_tx_ack.f;
   32bf8:	4c5e      	ldr	r4, [pc, #376]	; (32d74 <ll_rx_get+0x1b4>)
   32bfa:	78a3      	ldrb	r3, [r4, #2]
   32bfc:	f88d 3009 	strb.w	r3, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
   32c00:	78e2      	ldrb	r2, [r4, #3]
   32c02:	4683      	mov	fp, r0
   32c04:	f10d 0109 	add.w	r1, sp, #9
   32c08:	f10d 000a 	add.w	r0, sp, #10
   32c0c:	f7ff fd84 	bl	32718 <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
   32c10:	ea4b 0200 	orr.w	r2, fp, r0
   32c14:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   32c18:	d1f2      	bne.n	32c00 <ll_rx_get+0x40>
			} else if (rx->type == NODE_RX_TYPE_RELEASE) {
   32c1a:	9b03      	ldr	r3, [sp, #12]
   32c1c:	7919      	ldrb	r1, [r3, #4]
   32c1e:	2901      	cmp	r1, #1
   32c20:	f040 809c 	bne.w	32d5c <ll_rx_get+0x19c>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   32c24:	f8df b150 	ldr.w	fp, [pc, #336]	; 32d78 <ll_rx_get+0x1b8>
				(void)memq_dequeue(memq_ll_rx.tail,
   32c28:	494f      	ldr	r1, [pc, #316]	; (32d68 <ll_rx_get+0x1a8>)
   32c2a:	6870      	ldr	r0, [r6, #4]
   32c2c:	f7fc ff4c 	bl	2fac8 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   32c30:	f10b 0104 	add.w	r1, fp, #4
   32c34:	4628      	mov	r0, r5
   32c36:	f7fc feeb 	bl	2fa10 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   32c3a:	f89b 3000 	ldrb.w	r3, [fp]
   32c3e:	2b04      	cmp	r3, #4
   32c40:	d869      	bhi.n	32d16 <ll_rx_get+0x156>
	mem_link_rx.quota_pdu += delta;
   32c42:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
   32c44:	494d      	ldr	r1, [pc, #308]	; (32d7c <ll_rx_get+0x1bc>)
   32c46:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
   32c48:	f88b 3000 	strb.w	r3, [fp]
				mem_release(rx, &mem_pdu_rx.free);
   32c4c:	f7fc fee0 	bl	2fa10 <mem_release>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   32c50:	f89b 3000 	ldrb.w	r3, [fp]
   32c54:	2b00      	cmp	r3, #0
   32c56:	d0ba      	beq.n	32bce <ll_rx_get+0xe>
   32c58:	4d49      	ldr	r5, [pc, #292]	; (32d80 <ll_rx_get+0x1c0>)
	last = last + 1;
   32c5a:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
   32c5c:	786a      	ldrb	r2, [r5, #1]
   32c5e:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   32c60:	3401      	adds	r4, #1
   32c62:	b2e4      	uxtb	r4, r4
		last = 0U;
   32c64:	42a2      	cmp	r2, r4
   32c66:	bf08      	it	eq
   32c68:	2400      	moveq	r4, #0
	if (last == first) {
   32c6a:	429c      	cmp	r4, r3
   32c6c:	d01a      	beq.n	32ca4 <ll_rx_get+0xe4>
		link = mem_acquire(&mem_link_rx.free);
   32c6e:	4845      	ldr	r0, [pc, #276]	; (32d84 <ll_rx_get+0x1c4>)
   32c70:	f7fc feb4 	bl	2f9dc <mem_acquire>
		if (!link) {
   32c74:	4680      	mov	r8, r0
   32c76:	2800      	cmp	r0, #0
   32c78:	d0a9      	beq.n	32bce <ll_rx_get+0xe>
		rx = mem_acquire(&mem_pdu_rx.free);
   32c7a:	4840      	ldr	r0, [pc, #256]	; (32d7c <ll_rx_get+0x1bc>)
   32c7c:	f7fc feae 	bl	2f9dc <mem_acquire>
		if (!rx) {
   32c80:	2800      	cmp	r0, #0
   32c82:	d061      	beq.n	32d48 <ll_rx_get+0x188>
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   32c84:	462a      	mov	r2, r5
		rx->link = link;
   32c86:	f8c0 8000 	str.w	r8, [r0]
   32c8a:	78eb      	ldrb	r3, [r5, #3]
   32c8c:	f812 1b04 	ldrb.w	r1, [r2], #4
   32c90:	fb13 f301 	smulbb	r3, r3, r1
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   32c94:	50d0      	str	r0, [r2, r3]
	mem_link_rx.quota_pdu += delta;
   32c96:	f89b 3000 	ldrb.w	r3, [fp]
	*last = idx; /* Commit: Update write index */
   32c9a:	70ec      	strb	r4, [r5, #3]
   32c9c:	3b01      	subs	r3, #1
   32c9e:	f88b 3000 	strb.w	r3, [fp]
	if (!max) {
   32ca2:	e794      	b.n	32bce <ll_rx_get+0xe>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   32ca4:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 32d88 <ll_rx_get+0x1c8>
		link = mem_acquire(&mem_link_rx.free);
   32ca8:	4c36      	ldr	r4, [pc, #216]	; (32d84 <ll_rx_get+0x1c4>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   32caa:	f898 9003 	ldrb.w	r9, [r8, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   32cae:	4d33      	ldr	r5, [pc, #204]	; (32d7c <ll_rx_get+0x1bc>)
	if (last == count) {
   32cb0:	f898 0001 	ldrb.w	r0, [r8, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   32cb4:	f898 2002 	ldrb.w	r2, [r8, #2]
	last = last + 1;
   32cb8:	f109 0301 	add.w	r3, r9, #1
   32cbc:	fa5f f983 	uxtb.w	r9, r3
		last = 0U;
   32cc0:	4548      	cmp	r0, r9
   32cc2:	bf08      	it	eq
   32cc4:	f04f 0900 	moveq.w	r9, #0
	if (last == first) {
   32cc8:	4591      	cmp	r9, r2
		link = mem_acquire(&mem_link_rx.free);
   32cca:	4620      	mov	r0, r4
   32ccc:	f43f af7f 	beq.w	32bce <ll_rx_get+0xe>
   32cd0:	f7fc fe84 	bl	2f9dc <mem_acquire>
   32cd4:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   32cd6:	4628      	mov	r0, r5
		if (!link) {
   32cd8:	f1ba 0f00 	cmp.w	sl, #0
   32cdc:	f43f af77 	beq.w	32bce <ll_rx_get+0xe>
		rx = mem_acquire(&mem_pdu_rx.free);
   32ce0:	f7fc fe7c 	bl	2f9dc <mem_acquire>
		link->mem = NULL;
   32ce4:	2300      	movs	r3, #0
		if (!rx) {
   32ce6:	2800      	cmp	r0, #0
   32ce8:	d033      	beq.n	32d52 <ll_rx_get+0x192>
		link->mem = NULL;
   32cea:	f8ca 3004 	str.w	r3, [sl, #4]
		rx->link = link;
   32cee:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   32cf2:	f898 2003 	ldrb.w	r2, [r8, #3]
   32cf6:	f898 c000 	ldrb.w	ip, [r8]
   32cfa:	fb12 f20c 	smulbb	r2, r2, ip
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   32cfe:	50b8      	str	r0, [r7, r2]
	mem_link_rx.quota_pdu += delta;
   32d00:	f89b 2000 	ldrb.w	r2, [fp]
	*last = idx; /* Commit: Update write index */
   32d04:	f888 9003 	strb.w	r9, [r8, #3]
   32d08:	3a01      	subs	r2, #1
   32d0a:	b2d2      	uxtb	r2, r2
   32d0c:	f88b 2000 	strb.w	r2, [fp]
	while (mem_link_rx.quota_pdu &&
   32d10:	2a00      	cmp	r2, #0
   32d12:	d1cd      	bne.n	32cb0 <ll_rx_get+0xf0>
   32d14:	e75b      	b.n	32bce <ll_rx_get+0xe>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   32d16:	4a1d      	ldr	r2, [pc, #116]	; (32d8c <ll_rx_get+0x1cc>)
   32d18:	491d      	ldr	r1, [pc, #116]	; (32d90 <ll_rx_get+0x1d0>)
   32d1a:	481e      	ldr	r0, [pc, #120]	; (32d94 <ll_rx_get+0x1d4>)
   32d1c:	f240 6306 	movw	r3, #1542	; 0x606
   32d20:	f00f fdd0 	bl	428c4 <printk>
   32d24:	4040      	eors	r0, r0
   32d26:	f380 8811 	msr	BASEPRI, r0
   32d2a:	f04f 0003 	mov.w	r0, #3
   32d2e:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   32d30:	f89b 3000 	ldrb.w	r3, [fp]
   32d34:	e785      	b.n	32c42 <ll_rx_get+0x82>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   32d36:	490f      	ldr	r1, [pc, #60]	; (32d74 <ll_rx_get+0x1b4>)
   32d38:	9801      	ldr	r0, [sp, #4]
   32d3a:	78ca      	ldrb	r2, [r1, #3]
   32d3c:	3102      	adds	r1, #2
   32d3e:	f7ff fceb 	bl	32718 <tx_cmplt_get>
}
   32d42:	b005      	add	sp, #20
   32d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   32d48:	490e      	ldr	r1, [pc, #56]	; (32d84 <ll_rx_get+0x1c4>)
   32d4a:	4640      	mov	r0, r8
   32d4c:	f7fc fe60 	bl	2fa10 <mem_release>
			return;
   32d50:	e73d      	b.n	32bce <ll_rx_get+0xe>
			mem_release(link, &mem_link_rx.free);
   32d52:	490c      	ldr	r1, [pc, #48]	; (32d84 <ll_rx_get+0x1c4>)
   32d54:	4650      	mov	r0, sl
   32d56:	f7fc fe5b 	bl	2fa10 <mem_release>
			return;
   32d5a:	e738      	b.n	32bce <ll_rx_get+0xe>
			*node_rx = rx;
   32d5c:	9900      	ldr	r1, [sp, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   32d5e:	4610      	mov	r0, r2
			*node_rx = rx;
   32d60:	600b      	str	r3, [r1, #0]
}
   32d62:	b005      	add	sp, #20
   32d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32d68:	20001ec0 	.word	0x20001ec0
   32d6c:	20000494 	.word	0x20000494
   32d70:	2000046e 	.word	0x2000046e
   32d74:	2000046c 	.word	0x2000046c
   32d78:	20001ed0 	.word	0x20001ed0
   32d7c:	20001f20 	.word	0x20001f20
   32d80:	2000049c 	.word	0x2000049c
   32d84:	20001ed4 	.word	0x20001ed4
   32d88:	20000490 	.word	0x20000490
   32d8c:	00049dc8 	.word	0x00049dc8
   32d90:	00049e38 	.word	0x00049e38
   32d94:	00049c68 	.word	0x00049c68

00032d98 <ll_rx_dequeue>:
{
   32d98:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   32d9a:	495d      	ldr	r1, [pc, #372]	; (32f10 <ll_rx_dequeue+0x178>)
{
   32d9c:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   32d9e:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   32da0:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   32da2:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   32da4:	aa01      	add	r2, sp, #4
   32da6:	f7fc fe8f 	bl	2fac8 <memq_dequeue>
	LL_ASSERT(link);
   32daa:	4604      	mov	r4, r0
   32dac:	2800      	cmp	r0, #0
   32dae:	d063      	beq.n	32e78 <ll_rx_dequeue+0xe0>
	mem_release(link, &mem_link_rx.free);
   32db0:	4958      	ldr	r1, [pc, #352]	; (32f14 <ll_rx_dequeue+0x17c>)
   32db2:	4620      	mov	r0, r4
   32db4:	f7fc fe2c 	bl	2fa10 <mem_release>
	switch (rx->type) {
   32db8:	9a01      	ldr	r2, [sp, #4]
   32dba:	7913      	ldrb	r3, [r2, #4]
   32dbc:	2b1c      	cmp	r3, #28
   32dbe:	d810      	bhi.n	32de2 <ll_rx_dequeue+0x4a>
   32dc0:	e8df f003 	tbb	[pc, r3]
   32dc4:	1e0f0f1e 	.word	0x1e0f0f1e
   32dc8:	0f0f0f0f 	.word	0x0f0f0f0f
   32dcc:	0f0f0f0f 	.word	0x0f0f0f0f
   32dd0:	0f0f0f0f 	.word	0x0f0f0f0f
   32dd4:	0f0f0f0f 	.word	0x0f0f0f0f
   32dd8:	1e2f0f0f 	.word	0x1e2f0f0f
   32ddc:	1e1e1e1e 	.word	0x1e1e1e1e
   32de0:	1e          	.byte	0x1e
   32de1:	00          	.byte	0x00
		LL_ASSERT(0);
   32de2:	4a4d      	ldr	r2, [pc, #308]	; (32f18 <ll_rx_dequeue+0x180>)
   32de4:	494d      	ldr	r1, [pc, #308]	; (32f1c <ll_rx_dequeue+0x184>)
   32de6:	484e      	ldr	r0, [pc, #312]	; (32f20 <ll_rx_dequeue+0x188>)
   32de8:	f240 43c7 	movw	r3, #1223	; 0x4c7
   32dec:	f00f fd6a 	bl	428c4 <printk>
   32df0:	4040      	eors	r0, r0
   32df2:	f380 8811 	msr	BASEPRI, r0
   32df6:	f04f 0003 	mov.w	r0, #3
   32dfa:	df02      	svc	2
}
   32dfc:	b002      	add	sp, #8
   32dfe:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   32e00:	2b00      	cmp	r3, #0
   32e02:	d1fb      	bne.n	32dfc <ll_rx_dequeue+0x64>
   32e04:	4a44      	ldr	r2, [pc, #272]	; (32f18 <ll_rx_dequeue+0x180>)
   32e06:	4947      	ldr	r1, [pc, #284]	; (32f24 <ll_rx_dequeue+0x18c>)
   32e08:	4845      	ldr	r0, [pc, #276]	; (32f20 <ll_rx_dequeue+0x188>)
   32e0a:	f240 43c3 	movw	r3, #1219	; 0x4c3
   32e0e:	f00f fd59 	bl	428c4 <printk>
   32e12:	4040      	eors	r0, r0
   32e14:	f380 8811 	msr	BASEPRI, r0
   32e18:	f04f 0003 	mov.w	r0, #3
   32e1c:	df02      	svc	2
}
   32e1e:	b002      	add	sp, #8
   32e20:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   32e22:	7f13      	ldrb	r3, [r2, #28]
   32e24:	2b3c      	cmp	r3, #60	; 0x3c
   32e26:	d035      	beq.n	32e94 <ll_rx_dequeue+0xfc>
   32e28:	7f53      	ldrb	r3, [r2, #29]
   32e2a:	b1bb      	cbz	r3, 32e5c <ll_rx_dequeue+0xc4>
			adv = HDR_LLL2ULL(lll);
   32e2c:	6893      	ldr	r3, [r2, #8]
   32e2e:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
   32e30:	6e60      	ldr	r0, [r4, #100]	; 0x64
   32e32:	b120      	cbz	r0, 32e3e <ll_rx_dequeue+0xa6>
					adv->node_rx_cc_free = NULL;
   32e34:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
   32e36:	493c      	ldr	r1, [pc, #240]	; (32f28 <ll_rx_dequeue+0x190>)
					adv->node_rx_cc_free = NULL;
   32e38:	6663      	str	r3, [r4, #100]	; 0x64
					mem_release(rx_free, &mem_pdu_rx.free);
   32e3a:	f7fc fde9 	bl	2fa10 <mem_release>
			adv->is_enabled = 0U;
   32e3e:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   32e42:	f36f 0300 	bfc	r3, #0, #1
   32e46:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
			      ull_adv_is_enabled(0));
   32e4a:	2000      	movs	r0, #0
   32e4c:	f001 fa5c 	bl	34308 <ull_adv_is_enabled>
			if (!bm) {
   32e50:	2800      	cmp	r0, #0
   32e52:	d1d3      	bne.n	32dfc <ll_rx_dequeue+0x64>
				ull_filter_adv_scan_state_cb(0);
   32e54:	f006 fe08 	bl	39a68 <ull_filter_adv_scan_state_cb>
}
   32e58:	b002      	add	sp, #8
   32e5a:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(0);
   32e5c:	4a2e      	ldr	r2, [pc, #184]	; (32f18 <ll_rx_dequeue+0x180>)
   32e5e:	492f      	ldr	r1, [pc, #188]	; (32f1c <ll_rx_dequeue+0x184>)
   32e60:	482f      	ldr	r0, [pc, #188]	; (32f20 <ll_rx_dequeue+0x188>)
   32e62:	f240 4354 	movw	r3, #1108	; 0x454
   32e66:	f00f fd2d 	bl	428c4 <printk>
   32e6a:	4040      	eors	r0, r0
   32e6c:	f380 8811 	msr	BASEPRI, r0
   32e70:	f04f 0003 	mov.w	r0, #3
   32e74:	df02      	svc	2
   32e76:	e7e8      	b.n	32e4a <ll_rx_dequeue+0xb2>
	LL_ASSERT(link);
   32e78:	4a27      	ldr	r2, [pc, #156]	; (32f18 <ll_rx_dequeue+0x180>)
   32e7a:	492c      	ldr	r1, [pc, #176]	; (32f2c <ll_rx_dequeue+0x194>)
   32e7c:	4828      	ldr	r0, [pc, #160]	; (32f20 <ll_rx_dequeue+0x188>)
   32e7e:	f240 33a1 	movw	r3, #929	; 0x3a1
   32e82:	f00f fd1f 	bl	428c4 <printk>
   32e86:	4040      	eors	r0, r0
   32e88:	f380 8811 	msr	BASEPRI, r0
   32e8c:	f04f 0003 	mov.w	r0, #3
   32e90:	df02      	svc	2
   32e92:	e78d      	b.n	32db0 <ll_rx_dequeue+0x18>
			lll = ftr->param;
   32e94:	6896      	ldr	r6, [r2, #8]
			adv = HDR_LLL2ULL(lll);
   32e96:	e9d6 4500 	ldrd	r4, r5, [r6]
				LL_ASSERT(conn_lll);
   32e9a:	b1ed      	cbz	r5, 32ed8 <ll_rx_dequeue+0x140>
				LL_ASSERT(!conn_lll->link_tx_free);
   32e9c:	6dab      	ldr	r3, [r5, #88]	; 0x58
				lll->conn = NULL;
   32e9e:	2200      	movs	r2, #0
   32ea0:	6072      	str	r2, [r6, #4]
				LL_ASSERT(!conn_lll->link_tx_free);
   32ea2:	b163      	cbz	r3, 32ebe <ll_rx_dequeue+0x126>
   32ea4:	4a1c      	ldr	r2, [pc, #112]	; (32f18 <ll_rx_dequeue+0x180>)
   32ea6:	4922      	ldr	r1, [pc, #136]	; (32f30 <ll_rx_dequeue+0x198>)
   32ea8:	481d      	ldr	r0, [pc, #116]	; (32f20 <ll_rx_dequeue+0x188>)
   32eaa:	f240 431a 	movw	r3, #1050	; 0x41a
   32eae:	f00f fd09 	bl	428c4 <printk>
   32eb2:	4040      	eors	r0, r0
   32eb4:	f380 8811 	msr	BASEPRI, r0
   32eb8:	f04f 0003 	mov.w	r0, #3
   32ebc:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   32ebe:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   32ec2:	f105 0048 	add.w	r0, r5, #72	; 0x48
   32ec6:	f7fc fde3 	bl	2fa90 <memq_deinit>
				LL_ASSERT(link);
   32eca:	4606      	mov	r6, r0
   32ecc:	b190      	cbz	r0, 32ef4 <ll_rx_dequeue+0x15c>
				ll_conn_release(conn);
   32ece:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
   32ed0:	65ae      	str	r6, [r5, #88]	; 0x58
				ll_conn_release(conn);
   32ed2:	f002 f973 	bl	351bc <ll_conn_release>
   32ed6:	e7b2      	b.n	32e3e <ll_rx_dequeue+0xa6>
				LL_ASSERT(conn_lll);
   32ed8:	4a0f      	ldr	r2, [pc, #60]	; (32f18 <ll_rx_dequeue+0x180>)
   32eda:	4916      	ldr	r1, [pc, #88]	; (32f34 <ll_rx_dequeue+0x19c>)
   32edc:	4810      	ldr	r0, [pc, #64]	; (32f20 <ll_rx_dequeue+0x188>)
   32ede:	f240 4317 	movw	r3, #1047	; 0x417
   32ee2:	f00f fcef 	bl	428c4 <printk>
   32ee6:	4040      	eors	r0, r0
   32ee8:	f380 8811 	msr	BASEPRI, r0
   32eec:	f04f 0003 	mov.w	r0, #3
   32ef0:	df02      	svc	2
   32ef2:	e7d3      	b.n	32e9c <ll_rx_dequeue+0x104>
				LL_ASSERT(link);
   32ef4:	4a08      	ldr	r2, [pc, #32]	; (32f18 <ll_rx_dequeue+0x180>)
   32ef6:	490d      	ldr	r1, [pc, #52]	; (32f2c <ll_rx_dequeue+0x194>)
   32ef8:	4809      	ldr	r0, [pc, #36]	; (32f20 <ll_rx_dequeue+0x188>)
   32efa:	f240 431d 	movw	r3, #1053	; 0x41d
   32efe:	f00f fce1 	bl	428c4 <printk>
   32f02:	4040      	eors	r0, r0
   32f04:	f380 8811 	msr	BASEPRI, r0
   32f08:	f04f 0003 	mov.w	r0, #3
   32f0c:	df02      	svc	2
   32f0e:	e7de      	b.n	32ece <ll_rx_dequeue+0x136>
   32f10:	20001ec0 	.word	0x20001ec0
   32f14:	20001ed4 	.word	0x20001ed4
   32f18:	00049dc8 	.word	0x00049dc8
   32f1c:	00049cc8 	.word	0x00049cc8
   32f20:	00049c68 	.word	0x00049c68
   32f24:	00049e98 	.word	0x00049e98
   32f28:	20001f20 	.word	0x20001f20
   32f2c:	0004a134 	.word	0x0004a134
   32f30:	00049e80 	.word	0x00049e80
   32f34:	00049e74 	.word	0x00049e74

00032f38 <ll_rx_mem_release>:
{
   32f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
   32f3c:	6804      	ldr	r4, [r0, #0]
{
   32f3e:	4680      	mov	r8, r0
	while (rx) {
   32f40:	b344      	cbz	r4, 32f94 <ll_rx_mem_release+0x5c>
			LL_ASSERT(0);
   32f42:	4f56      	ldr	r7, [pc, #344]	; (3309c <ll_rx_mem_release+0x164>)
   32f44:	f8df 9158 	ldr.w	r9, [pc, #344]	; 330a0 <ll_rx_mem_release+0x168>
   32f48:	4e56      	ldr	r6, [pc, #344]	; (330a4 <ll_rx_mem_release+0x16c>)
		rx = rx->next;
   32f4a:	4625      	mov	r5, r4
   32f4c:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   32f4e:	792b      	ldrb	r3, [r5, #4]
   32f50:	2b1c      	cmp	r3, #28
   32f52:	d810      	bhi.n	32f76 <ll_rx_mem_release+0x3e>
   32f54:	e8df f003 	tbb	[pc, r3]
   32f58:	380f0f38 	.word	0x380f0f38
   32f5c:	0f0f0f0f 	.word	0x0f0f0f0f
   32f60:	0f0f0f0f 	.word	0x0f0f0f0f
   32f64:	0f0f0f0f 	.word	0x0f0f0f0f
   32f68:	0f0f0f0f 	.word	0x0f0f0f0f
   32f6c:	56260f0f 	.word	0x56260f0f
   32f70:	38383838 	.word	0x38383838
   32f74:	38          	.byte	0x38
   32f75:	00          	.byte	0x00
			LL_ASSERT(0);
   32f76:	f240 53fa 	movw	r3, #1530	; 0x5fa
   32f7a:	463a      	mov	r2, r7
   32f7c:	4649      	mov	r1, r9
   32f7e:	4630      	mov	r0, r6
   32f80:	f00f fca0 	bl	428c4 <printk>
   32f84:	4040      	eors	r0, r0
   32f86:	f380 8811 	msr	BASEPRI, r0
   32f8a:	f04f 0003 	mov.w	r0, #3
   32f8e:	df02      	svc	2
	while (rx) {
   32f90:	2c00      	cmp	r4, #0
   32f92:	d1da      	bne.n	32f4a <ll_rx_mem_release+0x12>
	*node_rx = rx;
   32f94:	2300      	movs	r3, #0
   32f96:	f8c8 3000 	str.w	r3, [r8]
	rx_alloc(UINT8_MAX);
   32f9a:	20ff      	movs	r0, #255	; 0xff
}
   32f9c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
   32fa0:	f7ff bca0 	b.w	328e4 <rx_alloc>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   32fa4:	7f2b      	ldrb	r3, [r5, #28]
   32fa6:	2b3c      	cmp	r3, #60	; 0x3c
   32fa8:	d062      	beq.n	33070 <ll_rx_mem_release+0x138>
				LL_ASSERT(!cc->status);
   32faa:	b1db      	cbz	r3, 32fe4 <ll_rx_mem_release+0xac>
   32fac:	4a3b      	ldr	r2, [pc, #236]	; (3309c <ll_rx_mem_release+0x164>)
   32fae:	493e      	ldr	r1, [pc, #248]	; (330a8 <ll_rx_mem_release+0x170>)
   32fb0:	483c      	ldr	r0, [pc, #240]	; (330a4 <ll_rx_mem_release+0x16c>)
   32fb2:	f240 532b 	movw	r3, #1323	; 0x52b
   32fb6:	f00f fc85 	bl	428c4 <printk>
   32fba:	4040      	eors	r0, r0
   32fbc:	f380 8811 	msr	BASEPRI, r0
   32fc0:	f04f 0003 	mov.w	r0, #3
   32fc4:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   32fc6:	792b      	ldrb	r3, [r5, #4]
   32fc8:	b963      	cbnz	r3, 32fe4 <ll_rx_mem_release+0xac>
   32fca:	4938      	ldr	r1, [pc, #224]	; (330ac <ll_rx_mem_release+0x174>)
   32fcc:	f240 537d 	movw	r3, #1405	; 0x57d
   32fd0:	463a      	mov	r2, r7
   32fd2:	4630      	mov	r0, r6
   32fd4:	f00f fc76 	bl	428c4 <printk>
   32fd8:	4040      	eors	r0, r0
   32fda:	f380 8811 	msr	BASEPRI, r0
   32fde:	f04f 0003 	mov.w	r0, #3
   32fe2:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   32fe4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 330b0 <ll_rx_mem_release+0x178>
   32fe8:	f89a 3000 	ldrb.w	r3, [sl]
   32fec:	2b04      	cmp	r3, #4
   32fee:	d82f      	bhi.n	33050 <ll_rx_mem_release+0x118>
	mem_link_rx.quota_pdu += delta;
   32ff0:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
   32ff2:	4930      	ldr	r1, [pc, #192]	; (330b4 <ll_rx_mem_release+0x17c>)
	mem_link_rx.quota_pdu += delta;
   32ff4:	f88a 3000 	strb.w	r3, [sl]
			mem_release(rx_free, &mem_pdu_rx.free);
   32ff8:	4628      	mov	r0, r5
   32ffa:	f7fc fd09 	bl	2fa10 <mem_release>
	while (rx) {
   32ffe:	2c00      	cmp	r4, #0
   33000:	d1a3      	bne.n	32f4a <ll_rx_mem_release+0x12>
   33002:	e7c7      	b.n	32f94 <ll_rx_mem_release+0x5c>
			if (IS_ACL_HANDLE(rx_free->handle)) {
   33004:	88e8      	ldrh	r0, [r5, #6]
   33006:	2800      	cmp	r0, #0
   33008:	d1c2      	bne.n	32f90 <ll_rx_mem_release+0x58>
				conn = ll_conn_get(rx_free->handle);
   3300a:	f002 f8e5 	bl	351d8 <ll_conn_get>
				LL_ASSERT(!conn->lll.link_tx_free);
   3300e:	6f43      	ldr	r3, [r0, #116]	; 0x74
				conn = ll_conn_get(rx_free->handle);
   33010:	4605      	mov	r5, r0
				LL_ASSERT(!conn->lll.link_tx_free);
   33012:	b163      	cbz	r3, 3302e <ll_rx_mem_release+0xf6>
   33014:	4a21      	ldr	r2, [pc, #132]	; (3309c <ll_rx_mem_release+0x164>)
   33016:	4928      	ldr	r1, [pc, #160]	; (330b8 <ll_rx_mem_release+0x180>)
   33018:	4822      	ldr	r0, [pc, #136]	; (330a4 <ll_rx_mem_release+0x16c>)
   3301a:	f240 53ec 	movw	r3, #1516	; 0x5ec
   3301e:	f00f fc51 	bl	428c4 <printk>
   33022:	4040      	eors	r0, r0
   33024:	f380 8811 	msr	BASEPRI, r0
   33028:	f04f 0003 	mov.w	r0, #3
   3302c:	df02      	svc	2
				link = memq_deinit(&conn->lll.memq_tx.head,
   3302e:	f105 0168 	add.w	r1, r5, #104	; 0x68
   33032:	f105 0064 	add.w	r0, r5, #100	; 0x64
   33036:	f7fc fd2b 	bl	2fa90 <memq_deinit>
				LL_ASSERT(link);
   3303a:	4682      	mov	sl, r0
   3303c:	b300      	cbz	r0, 33080 <ll_rx_mem_release+0x148>
				conn->lll.link_tx_free = link;
   3303e:	f8c5 a074 	str.w	sl, [r5, #116]	; 0x74
				ll_conn_release(conn);
   33042:	4628      	mov	r0, r5
   33044:	f002 f8ba 	bl	351bc <ll_conn_release>
	while (rx) {
   33048:	2c00      	cmp	r4, #0
   3304a:	f47f af7e 	bne.w	32f4a <ll_rx_mem_release+0x12>
   3304e:	e7a1      	b.n	32f94 <ll_rx_mem_release+0x5c>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   33050:	491a      	ldr	r1, [pc, #104]	; (330bc <ll_rx_mem_release+0x184>)
   33052:	f240 6306 	movw	r3, #1542	; 0x606
   33056:	463a      	mov	r2, r7
   33058:	4630      	mov	r0, r6
   3305a:	f00f fc33 	bl	428c4 <printk>
   3305e:	4040      	eors	r0, r0
   33060:	f380 8811 	msr	BASEPRI, r0
   33064:	f04f 0003 	mov.w	r0, #3
   33068:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   3306a:	f89a 3000 	ldrb.w	r3, [sl]
   3306e:	e7bf      	b.n	32ff0 <ll_rx_mem_release+0xb8>
				mem_release(rx_free, &mem_pdu_rx.free);
   33070:	4910      	ldr	r1, [pc, #64]	; (330b4 <ll_rx_mem_release+0x17c>)
   33072:	4628      	mov	r0, r5
   33074:	f7fc fccc 	bl	2fa10 <mem_release>
	while (rx) {
   33078:	2c00      	cmp	r4, #0
   3307a:	f47f af66 	bne.w	32f4a <ll_rx_mem_release+0x12>
   3307e:	e789      	b.n	32f94 <ll_rx_mem_release+0x5c>
				LL_ASSERT(link);
   33080:	4a06      	ldr	r2, [pc, #24]	; (3309c <ll_rx_mem_release+0x164>)
   33082:	490f      	ldr	r1, [pc, #60]	; (330c0 <ll_rx_mem_release+0x188>)
   33084:	4807      	ldr	r0, [pc, #28]	; (330a4 <ll_rx_mem_release+0x16c>)
   33086:	f240 53ef 	movw	r3, #1519	; 0x5ef
   3308a:	f00f fc1b 	bl	428c4 <printk>
   3308e:	4040      	eors	r0, r0
   33090:	f380 8811 	msr	BASEPRI, r0
   33094:	f04f 0003 	mov.w	r0, #3
   33098:	df02      	svc	2
   3309a:	e7d0      	b.n	3303e <ll_rx_mem_release+0x106>
   3309c:	00049dc8 	.word	0x00049dc8
   330a0:	00049cc8 	.word	0x00049cc8
   330a4:	00049c68 	.word	0x00049c68
   330a8:	00049eb8 	.word	0x00049eb8
   330ac:	00049ec4 	.word	0x00049ec4
   330b0:	20001ed0 	.word	0x20001ed0
   330b4:	20001f20 	.word	0x20001f20
   330b8:	00049ee8 	.word	0x00049ee8
   330bc:	00049e38 	.word	0x00049e38
   330c0:	0004a134 	.word	0x0004a134

000330c4 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   330c4:	4801      	ldr	r0, [pc, #4]	; (330cc <ll_rx_link_alloc+0x8>)
   330c6:	f7fc bc89 	b.w	2f9dc <mem_acquire>
   330ca:	bf00      	nop
   330cc:	20001ed4 	.word	0x20001ed4

000330d0 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   330d0:	4901      	ldr	r1, [pc, #4]	; (330d8 <ll_rx_link_release+0x8>)
   330d2:	f7fc bc9d 	b.w	2fa10 <mem_release>
   330d6:	bf00      	nop
   330d8:	20001ed4 	.word	0x20001ed4

000330dc <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   330dc:	4801      	ldr	r0, [pc, #4]	; (330e4 <ll_rx_alloc+0x8>)
   330de:	f7fc bc7d 	b.w	2f9dc <mem_acquire>
   330e2:	bf00      	nop
   330e4:	20001f20 	.word	0x20001f20

000330e8 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   330e8:	4901      	ldr	r1, [pc, #4]	; (330f0 <ll_rx_release+0x8>)
   330ea:	f7fc bc91 	b.w	2fa10 <mem_release>
   330ee:	bf00      	nop
   330f0:	20001f20 	.word	0x20001f20

000330f4 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   330f4:	4b02      	ldr	r3, [pc, #8]	; (33100 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   330f6:	4a03      	ldr	r2, [pc, #12]	; (33104 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   330f8:	78db      	ldrb	r3, [r3, #3]
   330fa:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   330fc:	f7fc bcd2 	b.w	2faa4 <memq_enqueue>
   33100:	2000046c 	.word	0x2000046c
   33104:	20001ec4 	.word	0x20001ec4

00033108 <ll_rx_sched>:
	k_sem_give(sem_recv);
   33108:	4b01      	ldr	r3, [pc, #4]	; (33110 <ll_rx_sched+0x8>)
   3310a:	6818      	ldr	r0, [r3, #0]
   3310c:	f00e ba2a 	b.w	41564 <z_impl_k_sem_give>
   33110:	2000212c 	.word	0x2000212c

00033114 <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   33114:	490d      	ldr	r1, [pc, #52]	; (3314c <ll_pdu_rx_alloc_peek+0x38>)
   33116:	788a      	ldrb	r2, [r1, #2]
   33118:	78cb      	ldrb	r3, [r1, #3]
	if (last >= first) {
   3311a:	429a      	cmp	r2, r3
   3311c:	d80d      	bhi.n	3313a <ll_pdu_rx_alloc_peek+0x26>
		return last - first;
   3311e:	eba3 0c02 	sub.w	ip, r3, r2
   33122:	fa5f fc8c 	uxtb.w	ip, ip
   33126:	4560      	cmp	r0, ip
   33128:	d80e      	bhi.n	33148 <ll_pdu_rx_alloc_peek+0x34>
	if (first == last) {
   3312a:	429a      	cmp	r2, r3
   3312c:	d00c      	beq.n	33148 <ll_pdu_rx_alloc_peek+0x34>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   3312e:	7809      	ldrb	r1, [r1, #0]
	return *((void **)(fifo + first * size));
   33130:	4b07      	ldr	r3, [pc, #28]	; (33150 <ll_pdu_rx_alloc_peek+0x3c>)
   33132:	fb12 f201 	smulbb	r2, r2, r1
   33136:	5898      	ldr	r0, [r3, r2]
   33138:	4770      	bx	lr
		return count - first + last;
   3313a:	f891 c001 	ldrb.w	ip, [r1, #1]
   3313e:	4463      	add	r3, ip
   33140:	1a9b      	subs	r3, r3, r2
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   33142:	b2db      	uxtb	r3, r3
   33144:	4298      	cmp	r0, r3
   33146:	d9f2      	bls.n	3312e <ll_pdu_rx_alloc_peek+0x1a>
		return NULL;
   33148:	2000      	movs	r0, #0
}
   3314a:	4770      	bx	lr
   3314c:	20000490 	.word	0x20000490
   33150:	20000494 	.word	0x20000494

00033154 <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   33154:	4b09      	ldr	r3, [pc, #36]	; (3317c <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   33156:	7899      	ldrb	r1, [r3, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   33158:	78da      	ldrb	r2, [r3, #3]
   3315a:	7818      	ldrb	r0, [r3, #0]
   3315c:	f893 c001 	ldrb.w	ip, [r3, #1]
   33160:	428a      	cmp	r2, r1
   33162:	d009      	beq.n	33178 <ll_pdu_rx_alloc+0x24>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   33164:	1c4a      	adds	r2, r1, #1
	mem = *((void **)(fifo + _first * size));
   33166:	fb01 3000 	mla	r0, r1, r0, r3
	_first += 1U;
   3316a:	b2d2      	uxtb	r2, r2
	if (_first == count) {
		_first = 0U;
   3316c:	4594      	cmp	ip, r2
   3316e:	bf08      	it	eq
   33170:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   33172:	6840      	ldr	r0, [r0, #4]
	}

	*first = _first; /* Write back read-index */
   33174:	709a      	strb	r2, [r3, #2]

	return mem;
   33176:	4770      	bx	lr
		return NULL;
   33178:	2000      	movs	r0, #0
}
   3317a:	4770      	bx	lr
   3317c:	20000490 	.word	0x20000490

00033180 <ll_tx_ack_put>:
{
   33180:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   33182:	4c14      	ldr	r4, [pc, #80]	; (331d4 <ll_tx_ack_put+0x54>)
   33184:	78e2      	ldrb	r2, [r4, #3]
	if (last == count) {
   33186:	f894 e001 	ldrb.w	lr, [r4, #1]
   3318a:	f894 c002 	ldrb.w	ip, [r4, #2]
   3318e:	7825      	ldrb	r5, [r4, #0]
	last = last + 1;
   33190:	1c53      	adds	r3, r2, #1
   33192:	b2db      	uxtb	r3, r3
		last = 0U;
   33194:	459e      	cmp	lr, r3
   33196:	bf08      	it	eq
   33198:	2300      	moveq	r3, #0
	if (last == first) {
   3319a:	459c      	cmp	ip, r3
   3319c:	d009      	beq.n	331b2 <ll_tx_ack_put+0x32>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   3319e:	fb12 f205 	smulbb	r2, r2, r5
   331a2:	f104 0c04 	add.w	ip, r4, #4
	tx->handle = handle;
   331a6:	f82c 0002 	strh.w	r0, [ip, r2]
   331aa:	4462      	add	r2, ip
	tx->node = node_tx;
   331ac:	6051      	str	r1, [r2, #4]
	*last = idx; /* Commit: Update write index */
   331ae:	70e3      	strb	r3, [r4, #3]
}
   331b0:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(tx);
   331b2:	4a09      	ldr	r2, [pc, #36]	; (331d8 <ll_tx_ack_put+0x58>)
   331b4:	4909      	ldr	r1, [pc, #36]	; (331dc <ll_tx_ack_put+0x5c>)
   331b6:	480a      	ldr	r0, [pc, #40]	; (331e0 <ll_tx_ack_put+0x60>)
   331b8:	f240 634e 	movw	r3, #1614	; 0x64e
   331bc:	f00f fb82 	bl	428c4 <printk>
   331c0:	4040      	eors	r0, r0
   331c2:	f380 8811 	msr	BASEPRI, r0
   331c6:	f04f 0003 	mov.w	r0, #3
   331ca:	df02      	svc	2
	tx->handle = handle;
   331cc:	2300      	movs	r3, #0
   331ce:	801b      	strh	r3, [r3, #0]
   331d0:	deff      	udf	#255	; 0xff
   331d2:	bf00      	nop
   331d4:	2000046c 	.word	0x2000046c
   331d8:	00049dc8 	.word	0x00049dc8
   331dc:	0004a128 	.word	0x0004a128
   331e0:	00049c68 	.word	0x00049c68

000331e4 <ll_timeslice_ticker_id_get>:
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   331e4:	2200      	movs	r2, #0
	*ticker_id = (TICKER_NODES - FLASH_TICKER_NODES);
   331e6:	2304      	movs	r3, #4
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   331e8:	7002      	strb	r2, [r0, #0]
	*ticker_id = (TICKER_NODES - FLASH_TICKER_NODES);
   331ea:	700b      	strb	r3, [r1, #0]
}
   331ec:	4770      	bx	lr
   331ee:	bf00      	nop

000331f0 <ll_radio_state_abort>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   331f0:	2200      	movs	r2, #0
{
   331f2:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   331f4:	4611      	mov	r1, r2
   331f6:	4b0a      	ldr	r3, [pc, #40]	; (33220 <ll_radio_state_abort+0x30>)
   331f8:	2001      	movs	r0, #1
   331fa:	f7fc fcc9 	bl	2fb90 <mayfly_enqueue>
	LL_ASSERT(!ret);
   331fe:	b900      	cbnz	r0, 33202 <ll_radio_state_abort+0x12>
}
   33200:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   33202:	4a08      	ldr	r2, [pc, #32]	; (33224 <ll_radio_state_abort+0x34>)
   33204:	4908      	ldr	r1, [pc, #32]	; (33228 <ll_radio_state_abort+0x38>)
   33206:	4809      	ldr	r0, [pc, #36]	; (3322c <ll_radio_state_abort+0x3c>)
   33208:	f240 6366 	movw	r3, #1638	; 0x666
   3320c:	f00f fb5a 	bl	428c4 <printk>
   33210:	4040      	eors	r0, r0
   33212:	f380 8811 	msr	BASEPRI, r0
   33216:	f04f 0003 	mov.w	r0, #3
   3321a:	df02      	svc	2
}
   3321c:	bd08      	pop	{r3, pc}
   3321e:	bf00      	nop
   33220:	2000044c 	.word	0x2000044c
   33224:	00049dc8 	.word	0x00049dc8
   33228:	00049f00 	.word	0x00049f00
   3322c:	00049c68 	.word	0x00049c68

00033230 <ull_ticker_status_take>:
	if (ret == TICKER_STATUS_BUSY) {
   33230:	f030 0302 	bics.w	r3, r0, #2
{
   33234:	b510      	push	{r4, lr}
   33236:	460c      	mov	r4, r1
	if (ret == TICKER_STATUS_BUSY) {
   33238:	d002      	beq.n	33240 <ull_ticker_status_take+0x10>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   3323a:	680b      	ldr	r3, [r1, #0]
   3323c:	2b02      	cmp	r3, #2
   3323e:	d008      	beq.n	33252 <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
   33240:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   33244:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   33248:	4809      	ldr	r0, [pc, #36]	; (33270 <ull_ticker_status_take+0x40>)
   3324a:	f00e f9b1 	bl	415b0 <z_impl_k_sem_take>
	return *ret_cb;
   3324e:	6820      	ldr	r0, [r4, #0]
}
   33250:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   33252:	4a08      	ldr	r2, [pc, #32]	; (33274 <ull_ticker_status_take+0x44>)
   33254:	4908      	ldr	r1, [pc, #32]	; (33278 <ull_ticker_status_take+0x48>)
   33256:	4809      	ldr	r0, [pc, #36]	; (3327c <ull_ticker_status_take+0x4c>)
   33258:	f240 6382 	movw	r3, #1666	; 0x682
   3325c:	f00f fb32 	bl	428c4 <printk>
   33260:	4040      	eors	r0, r0
   33262:	f380 8811 	msr	BASEPRI, r0
   33266:	f04f 0003 	mov.w	r0, #3
   3326a:	df02      	svc	2
   3326c:	e7e8      	b.n	33240 <ull_ticker_status_take+0x10>
   3326e:	bf00      	nop
   33270:	20002130 	.word	0x20002130
   33274:	00049dc8 	.word	0x00049dc8
   33278:	00049f08 	.word	0x00049f08
   3327c:	00049c68 	.word	0x00049c68

00033280 <ull_disable_mark>:
	if (!*m) {
   33280:	4904      	ldr	r1, [pc, #16]	; (33294 <ull_disable_mark+0x14>)
   33282:	680a      	ldr	r2, [r1, #0]
   33284:	b10a      	cbz	r2, 3328a <ull_disable_mark+0xa>
}
   33286:	4610      	mov	r0, r2
   33288:	4770      	bx	lr
		*m = param;
   3328a:	4602      	mov	r2, r0
   3328c:	6008      	str	r0, [r1, #0]
}
   3328e:	4610      	mov	r0, r2
   33290:	4770      	bx	lr
   33292:	bf00      	nop
   33294:	20001eb0 	.word	0x20001eb0

00033298 <ull_disable_unmark>:
	if (*m && *m == param) {
   33298:	4a04      	ldr	r2, [pc, #16]	; (332ac <ull_disable_unmark+0x14>)
   3329a:	6813      	ldr	r3, [r2, #0]
   3329c:	b123      	cbz	r3, 332a8 <ull_disable_unmark+0x10>
   3329e:	4298      	cmp	r0, r3
		*m = NULL;
   332a0:	bf06      	itte	eq
   332a2:	2100      	moveq	r1, #0
   332a4:	6011      	streq	r1, [r2, #0]
	return NULL;
   332a6:	2300      	movne	r3, #0
}
   332a8:	4618      	mov	r0, r3
   332aa:	4770      	bx	lr
   332ac:	20001eb0 	.word	0x20001eb0

000332b0 <ull_disable_mark_get>:
	return mark_get(mark_disable);
   332b0:	4b01      	ldr	r3, [pc, #4]	; (332b8 <ull_disable_mark_get+0x8>)
}
   332b2:	6818      	ldr	r0, [r3, #0]
   332b4:	4770      	bx	lr
   332b6:	bf00      	nop
   332b8:	20001eb0 	.word	0x20001eb0

000332bc <ull_update_mark>:
	if (!*m) {
   332bc:	4904      	ldr	r1, [pc, #16]	; (332d0 <ull_update_mark+0x14>)
   332be:	680a      	ldr	r2, [r1, #0]
   332c0:	b10a      	cbz	r2, 332c6 <ull_update_mark+0xa>
}
   332c2:	4610      	mov	r0, r2
   332c4:	4770      	bx	lr
		*m = param;
   332c6:	4602      	mov	r2, r0
   332c8:	6008      	str	r0, [r1, #0]
}
   332ca:	4610      	mov	r0, r2
   332cc:	4770      	bx	lr
   332ce:	bf00      	nop
   332d0:	20001eb4 	.word	0x20001eb4

000332d4 <ull_update_unmark>:
	if (*m && *m == param) {
   332d4:	4a04      	ldr	r2, [pc, #16]	; (332e8 <ull_update_unmark+0x14>)
   332d6:	6813      	ldr	r3, [r2, #0]
   332d8:	b123      	cbz	r3, 332e4 <ull_update_unmark+0x10>
   332da:	4298      	cmp	r0, r3
		*m = NULL;
   332dc:	bf06      	itte	eq
   332de:	2100      	moveq	r1, #0
   332e0:	6011      	streq	r1, [r2, #0]
	return NULL;
   332e2:	2300      	movne	r3, #0
}
   332e4:	4618      	mov	r0, r3
   332e6:	4770      	bx	lr
   332e8:	20001eb4 	.word	0x20001eb4

000332ec <ull_update_mark_get>:
	return mark_get(mark_update);
   332ec:	4b01      	ldr	r3, [pc, #4]	; (332f4 <ull_update_mark_get+0x8>)
}
   332ee:	6818      	ldr	r0, [r3, #0]
   332f0:	4770      	bx	lr
   332f2:	bf00      	nop
   332f4:	20001eb4 	.word	0x20001eb4

000332f8 <ull_disable>:
{
   332f8:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
   332fa:	6805      	ldr	r5, [r0, #0]
   332fc:	782b      	ldrb	r3, [r5, #0]
{
   332fe:	b087      	sub	sp, #28
	if (!ull_ref_get(hdr)) {
   33300:	b353      	cbz	r3, 33358 <ull_disable+0x60>
	compiler_barrier();
   33302:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   33304:	2201      	movs	r2, #1
   33306:	2100      	movs	r1, #0
   33308:	4668      	mov	r0, sp
   3330a:	f015 fa20 	bl	4874e <z_impl_k_sem_init>
   3330e:	782b      	ldrb	r3, [r5, #0]
	hdr->disabled_cb = disabled_cb;
   33310:	4a13      	ldr	r2, [pc, #76]	; (33360 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   33312:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
   33316:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
   33318:	b1f3      	cbz	r3, 33358 <ull_disable+0x60>
	mfy.param = lll;
   3331a:	4b12      	ldr	r3, [pc, #72]	; (33364 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   3331c:	2200      	movs	r2, #0
   3331e:	4611      	mov	r1, r2
   33320:	2003      	movs	r0, #3
	mfy.param = lll;
   33322:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   33324:	f7fc fc34 	bl	2fb90 <mayfly_enqueue>
	LL_ASSERT(!ret);
   33328:	b940      	cbnz	r0, 3333c <ull_disable+0x44>
	return z_impl_k_sem_take(sem, timeout);
   3332a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3332e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   33332:	4668      	mov	r0, sp
   33334:	f00e f93c 	bl	415b0 <z_impl_k_sem_take>
}
   33338:	b007      	add	sp, #28
   3333a:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   3333c:	4a0a      	ldr	r2, [pc, #40]	; (33368 <ull_disable+0x70>)
   3333e:	490b      	ldr	r1, [pc, #44]	; (3336c <ull_disable+0x74>)
   33340:	480b      	ldr	r0, [pc, #44]	; (33370 <ull_disable+0x78>)
   33342:	f240 63ff 	movw	r3, #1791	; 0x6ff
   33346:	f00f fabd 	bl	428c4 <printk>
   3334a:	4040      	eors	r0, r0
   3334c:	f380 8811 	msr	BASEPRI, r0
   33350:	f04f 0003 	mov.w	r0, #3
   33354:	df02      	svc	2
   33356:	e7e8      	b.n	3332a <ull_disable+0x32>
		return -EALREADY;
   33358:	f06f 0077 	mvn.w	r0, #119	; 0x77
   3335c:	e7ec      	b.n	33338 <ull_disable+0x40>
   3335e:	bf00      	nop
   33360:	00032715 	.word	0x00032715
   33364:	2000043c 	.word	0x2000043c
   33368:	00049dc8 	.word	0x00049dc8
   3336c:	00049f00 	.word	0x00049f00
   33370:	00049c68 	.word	0x00049c68

00033374 <ull_ticker_stop_with_mark>:
{
   33374:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
   33376:	4e1e      	ldr	r6, [pc, #120]	; (333f0 <ull_ticker_stop_with_mark+0x7c>)
   33378:	6833      	ldr	r3, [r6, #0]
{
   3337a:	b085      	sub	sp, #20
   3337c:	460c      	mov	r4, r1
   3337e:	4617      	mov	r7, r2
	if (!*m) {
   33380:	b353      	cbz	r3, 333d8 <ull_ticker_stop_with_mark+0x64>
	if (mark != param) {
   33382:	4299      	cmp	r1, r3
   33384:	d113      	bne.n	333ae <ull_ticker_stop_with_mark+0x3a>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   33386:	ad03      	add	r5, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   33388:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   3338a:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
   3338c:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   3338e:	9500      	str	r5, [sp, #0]
   33390:	4b18      	ldr	r3, [pc, #96]	; (333f4 <ull_ticker_stop_with_mark+0x80>)
   33392:	2103      	movs	r1, #3
   33394:	2000      	movs	r0, #0
   33396:	f7fd fe27 	bl	30fe8 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   3339a:	4629      	mov	r1, r5
   3339c:	f7ff ff48 	bl	33230 <ull_ticker_status_take>
	if (ret) {
   333a0:	4605      	mov	r5, r0
   333a2:	b140      	cbz	r0, 333b6 <ull_ticker_stop_with_mark+0x42>
	if (*m && *m == param) {
   333a4:	6833      	ldr	r3, [r6, #0]
   333a6:	b10b      	cbz	r3, 333ac <ull_ticker_stop_with_mark+0x38>
   333a8:	429c      	cmp	r4, r3
   333aa:	d017      	beq.n	333dc <ull_ticker_stop_with_mark+0x68>
		if (mark != param) {
   333ac:	b1c4      	cbz	r4, 333e0 <ull_ticker_stop_with_mark+0x6c>
		return -ENOLCK;
   333ae:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
   333b2:	b005      	add	sp, #20
   333b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = ull_disable(lll_disable);
   333b6:	4638      	mov	r0, r7
   333b8:	f7ff ff9e 	bl	332f8 <ull_disable>
	if (*m && *m == param) {
   333bc:	6833      	ldr	r3, [r6, #0]
   333be:	b10b      	cbz	r3, 333c4 <ull_ticker_stop_with_mark+0x50>
   333c0:	429c      	cmp	r4, r3
   333c2:	d011      	beq.n	333e8 <ull_ticker_stop_with_mark+0x74>
	if (mark != param) {
   333c4:	2c00      	cmp	r4, #0
   333c6:	d1f2      	bne.n	333ae <ull_ticker_stop_with_mark+0x3a>
	if (err && (err != -EALREADY)) {
   333c8:	2800      	cmp	r0, #0
   333ca:	d0f2      	beq.n	333b2 <ull_ticker_stop_with_mark+0x3e>
	return 0;
   333cc:	f110 0f78 	cmn.w	r0, #120	; 0x78
   333d0:	bf08      	it	eq
   333d2:	2000      	moveq	r0, #0
}
   333d4:	b005      	add	sp, #20
   333d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
   333d8:	6031      	str	r1, [r6, #0]
	if (mark != param) {
   333da:	e7d4      	b.n	33386 <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
   333dc:	2300      	movs	r3, #0
   333de:	6033      	str	r3, [r6, #0]
		return -EALREADY;
   333e0:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   333e4:	b005      	add	sp, #20
   333e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
   333e8:	6035      	str	r5, [r6, #0]
	if (err && (err != -EALREADY)) {
   333ea:	2800      	cmp	r0, #0
   333ec:	d0e1      	beq.n	333b2 <ull_ticker_stop_with_mark+0x3e>
   333ee:	e7ed      	b.n	333cc <ull_ticker_stop_with_mark+0x58>
   333f0:	20001eb0 	.word	0x20001eb0
   333f4:	00032709 	.word	0x00032709

000333f8 <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   333f8:	490d      	ldr	r1, [pc, #52]	; (33430 <ull_pdu_rx_alloc_peek+0x38>)
   333fa:	788a      	ldrb	r2, [r1, #2]
   333fc:	78cb      	ldrb	r3, [r1, #3]
	if (last >= first) {
   333fe:	429a      	cmp	r2, r3
   33400:	d80d      	bhi.n	3341e <ull_pdu_rx_alloc_peek+0x26>
		return last - first;
   33402:	eba3 0c02 	sub.w	ip, r3, r2
   33406:	fa5f fc8c 	uxtb.w	ip, ip
   3340a:	4560      	cmp	r0, ip
   3340c:	d80e      	bhi.n	3342c <ull_pdu_rx_alloc_peek+0x34>
	if (first == last) {
   3340e:	429a      	cmp	r2, r3
   33410:	d00c      	beq.n	3342c <ull_pdu_rx_alloc_peek+0x34>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   33412:	7809      	ldrb	r1, [r1, #0]
	return *((void **)(fifo + first * size));
   33414:	4b07      	ldr	r3, [pc, #28]	; (33434 <ull_pdu_rx_alloc_peek+0x3c>)
   33416:	fb12 f201 	smulbb	r2, r2, r1
   3341a:	5898      	ldr	r0, [r3, r2]
   3341c:	4770      	bx	lr
		return count - first + last;
   3341e:	f891 c001 	ldrb.w	ip, [r1, #1]
   33422:	4463      	add	r3, ip
   33424:	1a9b      	subs	r3, r3, r2
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   33426:	b2db      	uxtb	r3, r3
   33428:	4298      	cmp	r0, r3
   3342a:	d9f2      	bls.n	33412 <ull_pdu_rx_alloc_peek+0x1a>
		return NULL;
   3342c:	2000      	movs	r0, #0
}
   3342e:	4770      	bx	lr
   33430:	2000049c 	.word	0x2000049c
   33434:	200004a0 	.word	0x200004a0

00033438 <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
   33438:	4b09      	ldr	r3, [pc, #36]	; (33460 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   3343a:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   3343c:	78da      	ldrb	r2, [r3, #3]
   3343e:	7818      	ldrb	r0, [r3, #0]
   33440:	f893 c001 	ldrb.w	ip, [r3, #1]
   33444:	428a      	cmp	r2, r1
   33446:	d009      	beq.n	3345c <ull_pdu_rx_alloc+0x24>
	_first += 1U;
   33448:	1c4a      	adds	r2, r1, #1
	mem = *((void **)(fifo + _first * size));
   3344a:	fb01 3000 	mla	r0, r1, r0, r3
	_first += 1U;
   3344e:	b2d2      	uxtb	r2, r2
		_first = 0U;
   33450:	4594      	cmp	ip, r2
   33452:	bf08      	it	eq
   33454:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   33456:	6840      	ldr	r0, [r0, #4]
	*first = _first; /* Write back read-index */
   33458:	709a      	strb	r2, [r3, #2]
	return mem;
   3345a:	4770      	bx	lr
		return NULL;
   3345c:	2000      	movs	r0, #0
}
   3345e:	4770      	bx	lr
   33460:	2000049c 	.word	0x2000049c

00033464 <ull_rx_put>:
{
   33464:	b538      	push	{r3, r4, r5, lr}
   33466:	460c      	mov	r4, r1
   33468:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   3346a:	f005 fabd 	bl	389e8 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   3346e:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   33470:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   33472:	4a03      	ldr	r2, [pc, #12]	; (33480 <ull_rx_put+0x1c>)
   33474:	4628      	mov	r0, r5
}
   33476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   3347a:	f7fc bb13 	b.w	2faa4 <memq_enqueue>
   3347e:	bf00      	nop
   33480:	20001ecc 	.word	0x20001ecc

00033484 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   33484:	2201      	movs	r2, #1
   33486:	4b02      	ldr	r3, [pc, #8]	; (33490 <ull_rx_sched+0xc>)
   33488:	4611      	mov	r1, r2
   3348a:	2000      	movs	r0, #0
   3348c:	f7fc bb80 	b.w	2fb90 <mayfly_enqueue>
   33490:	2000042c 	.word	0x2000042c

00033494 <ull_prepare_enqueue>:
{
   33494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   33498:	4e16      	ldr	r6, [pc, #88]	; (334f4 <ull_prepare_enqueue+0x60>)
{
   3349a:	f89d a020 	ldrb.w	sl, [sp, #32]
   3349e:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   334a0:	78f3      	ldrb	r3, [r6, #3]
{
   334a2:	460f      	mov	r7, r1
	last = last + 1;
   334a4:	1c5d      	adds	r5, r3, #1
   334a6:	4611      	mov	r1, r2
	if (last == count) {
   334a8:	7872      	ldrb	r2, [r6, #1]
	last = last + 1;
   334aa:	b2ed      	uxtb	r5, r5
		last = 0U;
   334ac:	42aa      	cmp	r2, r5
   334ae:	bf08      	it	eq
   334b0:	2500      	moveq	r5, #0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   334b2:	78b2      	ldrb	r2, [r6, #2]
	if (last == first) {
   334b4:	42aa      	cmp	r2, r5
   334b6:	d018      	beq.n	334ea <ull_prepare_enqueue+0x56>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   334b8:	4634      	mov	r4, r6
   334ba:	4680      	mov	r8, r0
   334bc:	f814 0b04 	ldrb.w	r0, [r4], #4
   334c0:	fb00 4403 	mla	r4, r0, r3, r4
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   334c4:	2210      	movs	r2, #16
   334c6:	4620      	mov	r0, r4
   334c8:	f011 fafb 	bl	44ac2 <memcpy>
	e->is_resume = is_resume;
   334cc:	7f23      	ldrb	r3, [r4, #28]
	e->abort_cb = abort_cb;
   334ce:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
   334d0:	f00a 0a01 	and.w	sl, sl, #1
   334d4:	f023 0303 	bic.w	r3, r3, #3
   334d8:	ea43 030a 	orr.w	r3, r3, sl
	e->is_abort_cb = is_abort_cb;
   334dc:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_resume = is_resume;
   334e0:	7723      	strb	r3, [r4, #28]
	*last = idx; /* Commit: Update write index */
   334e2:	70f5      	strb	r5, [r6, #3]
}
   334e4:	4620      	mov	r0, r4
   334e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return NULL;
   334ea:	2400      	movs	r4, #0
}
   334ec:	4620      	mov	r0, r4
   334ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   334f2:	bf00      	nop
   334f4:	200005a4 	.word	0x200005a4

000334f8 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   334f8:	4805      	ldr	r0, [pc, #20]	; (33510 <ull_prepare_dequeue_get+0x18>)
   334fa:	7882      	ldrb	r2, [r0, #2]
	if (first == last) {
   334fc:	78c1      	ldrb	r1, [r0, #3]
   334fe:	f890 c000 	ldrb.w	ip, [r0]
   33502:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
   33504:	bf1a      	itte	ne
   33506:	3004      	addne	r0, #4
   33508:	fb02 000c 	mlane	r0, r2, ip, r0
		return NULL;
   3350c:	2000      	moveq	r0, #0
}
   3350e:	4770      	bx	lr
   33510:	200005a4 	.word	0x200005a4

00033514 <ull_prepare_dequeue_iter>:
{
   33514:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   33516:	4b0d      	ldr	r3, [pc, #52]	; (3354c <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
   33518:	7802      	ldrb	r2, [r0, #0]
   3351a:	7859      	ldrb	r1, [r3, #1]
   3351c:	f893 c003 	ldrb.w	ip, [r3, #3]
   33520:	f893 e000 	ldrb.w	lr, [r3]
   33524:	4291      	cmp	r1, r2
   33526:	bf9c      	itt	ls
   33528:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
   3352a:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   3352c:	4594      	cmp	ip, r2
   3352e:	d00a      	beq.n	33546 <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
   33530:	1c53      	adds	r3, r2, #1
   33532:	b2db      	uxtb	r3, r3
		i = 0U;
   33534:	4299      	cmp	r1, r3
   33536:	bf08      	it	eq
   33538:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
   3353a:	4905      	ldr	r1, [pc, #20]	; (33550 <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
   3353c:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   3353e:	fb02 100e 	mla	r0, r2, lr, r1
}
   33542:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   33546:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   33548:	e7fb      	b.n	33542 <ull_prepare_dequeue_iter+0x2e>
   3354a:	bf00      	nop
   3354c:	200005a4 	.word	0x200005a4
   33550:	200005a8 	.word	0x200005a8

00033554 <ull_prepare_dequeue>:
{
   33554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return MFIFO_DEQUEUE_GET(prep);
   33558:	4c23      	ldr	r4, [pc, #140]	; (335e8 <ull_prepare_dequeue+0x94>)
   3355a:	78a3      	ldrb	r3, [r4, #2]
	if (first == last) {
   3355c:	78e2      	ldrb	r2, [r4, #3]
   3355e:	f894 c000 	ldrb.w	ip, [r4]
   33562:	429a      	cmp	r2, r3
   33564:	d025      	beq.n	335b2 <ull_prepare_dequeue+0x5e>
	return (void *)(fifo + first * size);
   33566:	1d27      	adds	r7, r4, #4
			mfy.param = next;
   33568:	f8df 9080 	ldr.w	r9, [pc, #128]	; 335ec <ull_prepare_dequeue+0x98>
   3356c:	4680      	mov	r8, r0
   3356e:	fb03 7c0c 	mla	ip, r3, ip, r7
		uint8_t is_aborted = next->is_aborted;
   33572:	f89c 301c 	ldrb.w	r3, [ip, #28]
		if (!is_aborted) {
   33576:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
   33578:	f3c3 0540 	ubfx	r5, r3, #1, #1
		uint8_t is_resume = next->is_resume;
   3357c:	f003 0601 	and.w	r6, r3, #1
		if (!is_aborted) {
   33580:	d519      	bpl.n	335b6 <ull_prepare_dequeue+0x62>
	uint8_t _first = *first; /* Copy read-index */
   33582:	78a2      	ldrb	r2, [r4, #2]
		MFIFO_DEQUEUE(prep);
   33584:	78e1      	ldrb	r1, [r4, #3]
   33586:	f894 c000 	ldrb.w	ip, [r4]
   3358a:	7860      	ldrb	r0, [r4, #1]
	_first += 1U;
   3358c:	1c53      	adds	r3, r2, #1
	if (_first == last) {
   3358e:	4291      	cmp	r1, r2
	_first += 1U;
   33590:	b2db      	uxtb	r3, r3
	if (_first == last) {
   33592:	d00e      	beq.n	335b2 <ull_prepare_dequeue+0x5e>
		_first = 0U;
   33594:	4298      	cmp	r0, r3
   33596:	bf08      	it	eq
   33598:	2300      	moveq	r3, #0
	if (first == last) {
   3359a:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
   3359c:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
   3359e:	d008      	beq.n	335b2 <ull_prepare_dequeue+0x5e>
	return (void *)(fifo + first * size);
   335a0:	fb03 7c0c 	mla	ip, r3, ip, r7
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   335a4:	2d00      	cmp	r5, #0
   335a6:	d1e4      	bne.n	33572 <ull_prepare_dequeue+0x1e>
   335a8:	b11e      	cbz	r6, 335b2 <ull_prepare_dequeue+0x5e>
   335aa:	f89c 301c 	ldrb.w	r3, [ip, #28]
   335ae:	07db      	lsls	r3, r3, #31
   335b0:	d5df      	bpl.n	33572 <ull_prepare_dequeue+0x1e>
}
   335b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
   335b6:	4b0d      	ldr	r3, [pc, #52]	; (335ec <ull_prepare_dequeue+0x98>)
			mfy.param = next;
   335b8:	f8c9 c008 	str.w	ip, [r9, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
   335bc:	462a      	mov	r2, r5
   335be:	4629      	mov	r1, r5
   335c0:	4640      	mov	r0, r8
   335c2:	f7fc fae5 	bl	2fb90 <mayfly_enqueue>
			LL_ASSERT(!ret);
   335c6:	2800      	cmp	r0, #0
   335c8:	d0db      	beq.n	33582 <ull_prepare_dequeue+0x2e>
   335ca:	4a09      	ldr	r2, [pc, #36]	; (335f0 <ull_prepare_dequeue+0x9c>)
   335cc:	4909      	ldr	r1, [pc, #36]	; (335f4 <ull_prepare_dequeue+0xa0>)
   335ce:	480a      	ldr	r0, [pc, #40]	; (335f8 <ull_prepare_dequeue+0xa4>)
   335d0:	f240 7376 	movw	r3, #1910	; 0x776
   335d4:	f00f f976 	bl	428c4 <printk>
   335d8:	4040      	eors	r0, r0
   335da:	f380 8811 	msr	BASEPRI, r0
   335de:	f04f 0003 	mov.w	r0, #3
   335e2:	df02      	svc	2
   335e4:	e7cd      	b.n	33582 <ull_prepare_dequeue+0x2e>
   335e6:	bf00      	nop
   335e8:	200005a4 	.word	0x200005a4
   335ec:	2000040c 	.word	0x2000040c
   335f0:	00049dc8 	.word	0x00049dc8
   335f4:	00049f00 	.word	0x00049f00
   335f8:	00049c68 	.word	0x00049c68

000335fc <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   335fc:	4b06      	ldr	r3, [pc, #24]	; (33618 <ull_event_done_extra_get+0x1c>)
   335fe:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   33600:	78d9      	ldrb	r1, [r3, #3]
   33602:	7818      	ldrb	r0, [r3, #0]
   33604:	4291      	cmp	r1, r2
   33606:	d005      	beq.n	33614 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   33608:	fb02 3300 	mla	r3, r2, r0, r3
   3360c:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   3360e:	b110      	cbz	r0, 33616 <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   33610:	3020      	adds	r0, #32
   33612:	4770      	bx	lr
		return NULL;
   33614:	2000      	movs	r0, #0
}
   33616:	4770      	bx	lr
   33618:	2000058c 	.word	0x2000058c

0003361c <ull_event_done>:
{
   3361c:	b538      	push	{r3, r4, r5, lr}
	evdone = MFIFO_DEQUEUE(done);
   3361e:	4a13      	ldr	r2, [pc, #76]	; (3366c <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
   33620:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   33622:	78d5      	ldrb	r5, [r2, #3]
   33624:	7814      	ldrb	r4, [r2, #0]
   33626:	429d      	cmp	r5, r3
{
   33628:	4601      	mov	r1, r0
	evdone = MFIFO_DEQUEUE(done);
   3362a:	7850      	ldrb	r0, [r2, #1]
   3362c:	d01b      	beq.n	33666 <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
   3362e:	fb03 2404 	mla	r4, r3, r4, r2
	_first += 1U;
   33632:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   33634:	6864      	ldr	r4, [r4, #4]
	_first += 1U;
   33636:	b2db      	uxtb	r3, r3
		_first = 0U;
   33638:	4298      	cmp	r0, r3
   3363a:	bf08      	it	eq
   3363c:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   3363e:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   33640:	b18c      	cbz	r4, 33666 <ull_event_done+0x4a>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   33642:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
   33644:	2500      	movs	r5, #0
	link = evdone->hdr.link;
   33646:	6820      	ldr	r0, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
   33648:	4a09      	ldr	r2, [pc, #36]	; (33670 <ull_event_done+0x54>)
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   3364a:	7123      	strb	r3, [r4, #4]
	evdone->param = param;
   3364c:	61e1      	str	r1, [r4, #28]
	evdone->hdr.link = NULL;
   3364e:	6025      	str	r5, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
   33650:	4621      	mov	r1, r4
   33652:	f7fc fa27 	bl	2faa4 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   33656:	2201      	movs	r2, #1
   33658:	4b06      	ldr	r3, [pc, #24]	; (33674 <ull_event_done+0x58>)
   3365a:	4611      	mov	r1, r2
   3365c:	4628      	mov	r0, r5
   3365e:	f7fc fa97 	bl	2fb90 <mayfly_enqueue>
}
   33662:	4620      	mov	r0, r4
   33664:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   33666:	2400      	movs	r4, #0
   33668:	e7fb      	b.n	33662 <ull_event_done+0x46>
   3366a:	bf00      	nop
   3366c:	2000058c 	.word	0x2000058c
   33670:	20001ebc 	.word	0x20001ebc
   33674:	2000041c 	.word	0x2000041c

00033678 <ull_rxfifo_alloc>:
{
   33678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3367c:	b083      	sub	sp, #12
   3367e:	461d      	mov	r5, r3
   33680:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   33684:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   33686:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
   3368a:	9401      	str	r4, [sp, #4]
   3368c:	4617      	mov	r7, r2
   3368e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   33690:	9200      	str	r2, [sp, #0]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   33692:	b353      	cbz	r3, 336ea <ull_rxfifo_alloc+0x72>
   33694:	1e5c      	subs	r4, r3, #1
   33696:	f895 a000 	ldrb.w	sl, [r5]
   3369a:	4680      	mov	r8, r0
   3369c:	460e      	mov	r6, r1
   3369e:	b2e4      	uxtb	r4, r4
	last = last + 1;
   336a0:	f10a 0301 	add.w	r3, sl, #1
   336a4:	fa5f fa83 	uxtb.w	sl, r3
		last = 0U;
   336a8:	4556      	cmp	r6, sl
   336aa:	bf08      	it	eq
   336ac:	f04f 0a00 	moveq.w	sl, #0
	if (last == first) {
   336b0:	4557      	cmp	r7, sl
		link = mem_acquire(link_free);
   336b2:	4648      	mov	r0, r9
   336b4:	d019      	beq.n	336ea <ull_rxfifo_alloc+0x72>
   336b6:	f7fc f991 	bl	2f9dc <mem_acquire>
   336ba:	4683      	mov	fp, r0
		rx = mem_acquire(mem_free);
   336bc:	9800      	ldr	r0, [sp, #0]
		if (!link) {
   336be:	f1bb 0f00 	cmp.w	fp, #0
   336c2:	d012      	beq.n	336ea <ull_rxfifo_alloc+0x72>
		rx = mem_acquire(mem_free);
   336c4:	f7fc f98a 	bl	2f9dc <mem_acquire>
		if (!rx) {
   336c8:	b190      	cbz	r0, 336f0 <ull_rxfifo_alloc+0x78>
		link->mem = NULL;
   336ca:	2300      	movs	r3, #0
   336cc:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
   336d0:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   336d4:	782a      	ldrb	r2, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   336d6:	9b01      	ldr	r3, [sp, #4]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   336d8:	fb12 f208 	smulbb	r2, r2, r8
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   336dc:	5098      	str	r0, [r3, r2]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   336de:	3c01      	subs	r4, #1
   336e0:	b2e4      	uxtb	r4, r4
   336e2:	2cff      	cmp	r4, #255	; 0xff
	*last = idx; /* Commit: Update write index */
   336e4:	f885 a000 	strb.w	sl, [r5]
   336e8:	d1da      	bne.n	336a0 <ull_rxfifo_alloc+0x28>
}
   336ea:	b003      	add	sp, #12
   336ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, link_free);
   336f0:	4649      	mov	r1, r9
   336f2:	4658      	mov	r0, fp
}
   336f4:	b003      	add	sp, #12
   336f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, link_free);
   336fa:	f7fc b989 	b.w	2fa10 <mem_release>
   336fe:	bf00      	nop

00033700 <init_reset>:
{
   33700:	b570      	push	{r4, r5, r6, lr}
	RXFIFO_INIT_ALLOC(done);
   33702:	4c3f      	ldr	r4, [pc, #252]	; (33800 <init_reset+0x100>)
   33704:	4d3f      	ldr	r5, [pc, #252]	; (33804 <init_reset+0x104>)
   33706:	79a2      	ldrb	r2, [r4, #6]
   33708:	88a1      	ldrh	r1, [r4, #4]
   3370a:	4e3f      	ldr	r6, [pc, #252]	; (33808 <init_reset+0x108>)
   3370c:	2000      	movs	r0, #0
{
   3370e:	b084      	sub	sp, #16
	RXFIFO_INIT_ALLOC(done);
   33710:	4623      	mov	r3, r4
   33712:	8068      	strh	r0, [r5, #2]
   33714:	f104 0008 	add.w	r0, r4, #8
   33718:	f7fc f930 	bl	2f97c <mem_init>
   3371c:	79e3      	ldrb	r3, [r4, #7]
   3371e:	79a2      	ldrb	r2, [r4, #6]
   33720:	1d30      	adds	r0, r6, #4
   33722:	441a      	add	r2, r3
   33724:	2108      	movs	r1, #8
   33726:	4633      	mov	r3, r6
   33728:	f7fc f928 	bl	2f97c <mem_init>
   3372c:	9602      	str	r6, [sp, #8]
   3372e:	462e      	mov	r6, r5
   33730:	79a3      	ldrb	r3, [r4, #6]
   33732:	f816 0b04 	ldrb.w	r0, [r6], #4
   33736:	9303      	str	r3, [sp, #12]
   33738:	78aa      	ldrb	r2, [r5, #2]
   3373a:	7869      	ldrb	r1, [r5, #1]
   3373c:	1ceb      	adds	r3, r5, #3
   3373e:	e9cd 6400 	strd	r6, r4, [sp]
   33742:	f7ff ff99 	bl	33678 <ull_rxfifo_alloc>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   33746:	4b31      	ldr	r3, [pc, #196]	; (3380c <init_reset+0x10c>)
   33748:	2207      	movs	r2, #7
   3374a:	1d18      	adds	r0, r3, #4
   3374c:	2144      	movs	r1, #68	; 0x44
   3374e:	f7fc f915 	bl	2f97c <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   33752:	4b2f      	ldr	r3, [pc, #188]	; (33810 <init_reset+0x110>)
   33754:	2209      	movs	r2, #9
   33756:	1d18      	adds	r0, r3, #4
   33758:	2108      	movs	r1, #8
   3375a:	f7fc f90f 	bl	2f97c <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   3375e:	482c      	ldr	r0, [pc, #176]	; (33810 <init_reset+0x110>)
   33760:	f7fc f93c 	bl	2f9dc <mem_acquire>
	LL_ASSERT(link);
   33764:	4604      	mov	r4, r0
   33766:	b308      	cbz	r0, 337ac <init_reset+0xac>
	MEMQ_INIT(ull_rx, link);
   33768:	4a2a      	ldr	r2, [pc, #168]	; (33814 <init_reset+0x114>)
   3376a:	4620      	mov	r0, r4
   3376c:	1f11      	subs	r1, r2, #4
   3376e:	f7fc f98b 	bl	2fa88 <memq_init>
	link = mem_acquire(&mem_link_done.free);
   33772:	4825      	ldr	r0, [pc, #148]	; (33808 <init_reset+0x108>)
   33774:	f7fc f932 	bl	2f9dc <mem_acquire>
	LL_ASSERT(link);
   33778:	4604      	mov	r4, r0
   3377a:	b328      	cbz	r0, 337c8 <init_reset+0xc8>
	MEMQ_INIT(ull_done, link);
   3377c:	4a26      	ldr	r2, [pc, #152]	; (33818 <init_reset+0x118>)
   3377e:	4620      	mov	r0, r4
   33780:	1f11      	subs	r1, r2, #4
   33782:	f7fc f981 	bl	2fa88 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   33786:	4822      	ldr	r0, [pc, #136]	; (33810 <init_reset+0x110>)
   33788:	f7fc f928 	bl	2f9dc <mem_acquire>
	LL_ASSERT(link);
   3378c:	4604      	mov	r4, r0
   3378e:	b348      	cbz	r0, 337e4 <init_reset+0xe4>
	MEMQ_INIT(ll_rx, link);
   33790:	4a22      	ldr	r2, [pc, #136]	; (3381c <init_reset+0x11c>)
   33792:	4620      	mov	r0, r4
   33794:	1f11      	subs	r1, r2, #4
   33796:	f7fc f977 	bl	2fa88 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   3379a:	4b21      	ldr	r3, [pc, #132]	; (33820 <init_reset+0x120>)
   3379c:	2205      	movs	r2, #5
	rx_alloc(UINT8_MAX);
   3379e:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
   337a0:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
   337a2:	f7ff f89f 	bl	328e4 <rx_alloc>
}
   337a6:	2000      	movs	r0, #0
   337a8:	b004      	add	sp, #16
   337aa:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   337ac:	4a1d      	ldr	r2, [pc, #116]	; (33824 <init_reset+0x124>)
   337ae:	491e      	ldr	r1, [pc, #120]	; (33828 <init_reset+0x128>)
   337b0:	481e      	ldr	r0, [pc, #120]	; (3382c <init_reset+0x12c>)
   337b2:	f640 0302 	movw	r3, #2050	; 0x802
   337b6:	f00f f885 	bl	428c4 <printk>
   337ba:	4040      	eors	r0, r0
   337bc:	f380 8811 	msr	BASEPRI, r0
   337c0:	f04f 0003 	mov.w	r0, #3
   337c4:	df02      	svc	2
   337c6:	e7cf      	b.n	33768 <init_reset+0x68>
	LL_ASSERT(link);
   337c8:	4a16      	ldr	r2, [pc, #88]	; (33824 <init_reset+0x124>)
   337ca:	4917      	ldr	r1, [pc, #92]	; (33828 <init_reset+0x128>)
   337cc:	4817      	ldr	r0, [pc, #92]	; (3382c <init_reset+0x12c>)
   337ce:	f640 030a 	movw	r3, #2058	; 0x80a
   337d2:	f00f f877 	bl	428c4 <printk>
   337d6:	4040      	eors	r0, r0
   337d8:	f380 8811 	msr	BASEPRI, r0
   337dc:	f04f 0003 	mov.w	r0, #3
   337e0:	df02      	svc	2
   337e2:	e7cb      	b.n	3377c <init_reset+0x7c>
	LL_ASSERT(link);
   337e4:	4a0f      	ldr	r2, [pc, #60]	; (33824 <init_reset+0x124>)
   337e6:	4910      	ldr	r1, [pc, #64]	; (33828 <init_reset+0x128>)
   337e8:	4810      	ldr	r0, [pc, #64]	; (3382c <init_reset+0x12c>)
   337ea:	f640 0312 	movw	r3, #2066	; 0x812
   337ee:	f00f f869 	bl	428c4 <printk>
   337f2:	4040      	eors	r0, r0
   337f4:	f380 8811 	msr	BASEPRI, r0
   337f8:	f04f 0003 	mov.w	r0, #3
   337fc:	df02      	svc	2
   337fe:	e7c7      	b.n	33790 <init_reset+0x90>
   33800:	200004b4 	.word	0x200004b4
   33804:	2000058c 	.word	0x2000058c
   33808:	20002100 	.word	0x20002100
   3380c:	20001f20 	.word	0x20001f20
   33810:	20001ed4 	.word	0x20001ed4
   33814:	20001ecc 	.word	0x20001ecc
   33818:	20001ebc 	.word	0x20001ebc
   3381c:	20001ec4 	.word	0x20001ec4
   33820:	20001ed0 	.word	0x20001ed0
   33824:	00049dc8 	.word	0x00049dc8
   33828:	0004a134 	.word	0x0004a134
   3382c:	00049c68 	.word	0x00049c68

00033830 <ll_init>:
{
   33830:	b530      	push	{r4, r5, lr}
	sem_recv = sem_rx;
   33832:	4b2c      	ldr	r3, [pc, #176]	; (338e4 <ll_init+0xb4>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   33834:	4d2c      	ldr	r5, [pc, #176]	; (338e8 <ll_init+0xb8>)
	sem_recv = sem_rx;
   33836:	6018      	str	r0, [r3, #0]
{
   33838:	b087      	sub	sp, #28
	cntr_init();
   3383a:	f008 fca7 	bl	3c18c <cntr_init>
	mayfly_init();
   3383e:	f7fc f953 	bl	2fae8 <mayfly_init>
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   33842:	492a      	ldr	r1, [pc, #168]	; (338ec <ll_init+0xbc>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   33844:	4a2a      	ldr	r2, [pc, #168]	; (338f0 <ll_init+0xc0>)
   33846:	9505      	str	r5, [sp, #20]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   33848:	f04f 0c05 	mov.w	ip, #5
   3384c:	f881 c008 	strb.w	ip, [r1, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   33850:	4c28      	ldr	r4, [pc, #160]	; (338f4 <ll_init+0xc4>)
   33852:	9204      	str	r2, [sp, #16]
   33854:	4a28      	ldr	r2, [pc, #160]	; (338f8 <ll_init+0xc8>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   33856:	2002      	movs	r0, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   33858:	e9cd 2402 	strd	r2, r4, [sp, #8]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   3385c:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   3385e:	240d      	movs	r4, #13
   33860:	e9cd 1400 	strd	r1, r4, [sp]
   33864:	4a25      	ldr	r2, [pc, #148]	; (338fc <ll_init+0xcc>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   33866:	7408      	strb	r0, [r1, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
   33868:	7608      	strb	r0, [r1, #24]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   3386a:	700b      	strb	r3, [r1, #0]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   3386c:	2000      	movs	r0, #0
   3386e:	2106      	movs	r1, #6
   33870:	f7fd fa70 	bl	30d54 <ticker_init>
	LL_ASSERT(!err);
   33874:	bb40      	cbnz	r0, 338c8 <ll_init+0x98>
	return z_impl_k_sem_init(sem, initial_count, limit);
   33876:	2201      	movs	r2, #1
   33878:	2100      	movs	r1, #0
   3387a:	4821      	ldr	r0, [pc, #132]	; (33900 <ll_init+0xd0>)
   3387c:	f014 ff67 	bl	4874e <z_impl_k_sem_init>
	err = lll_init();
   33880:	f006 fea8 	bl	3a5d4 <lll_init>
	if (err) {
   33884:	4604      	mov	r4, r0
   33886:	b110      	cbz	r0, 3388e <ll_init+0x5e>
}
   33888:	4620      	mov	r0, r4
   3388a:	b007      	add	sp, #28
   3388c:	bd30      	pop	{r4, r5, pc}
	err = init_reset();
   3388e:	f7ff ff37 	bl	33700 <init_reset>
	if (err) {
   33892:	4604      	mov	r4, r0
   33894:	2800      	cmp	r0, #0
   33896:	d1f7      	bne.n	33888 <ll_init+0x58>
	err = lll_adv_init();
   33898:	f007 faf2 	bl	3ae80 <lll_adv_init>
	if (err) {
   3389c:	4604      	mov	r4, r0
   3389e:	2800      	cmp	r0, #0
   338a0:	d1f2      	bne.n	33888 <ll_init+0x58>
	err = ull_adv_init();
   338a2:	f000 fcdd 	bl	34260 <ull_adv_init>
	if (err) {
   338a6:	4604      	mov	r4, r0
   338a8:	2800      	cmp	r0, #0
   338aa:	d1ed      	bne.n	33888 <ll_init+0x58>
	err = lll_conn_init();
   338ac:	f007 ffb2 	bl	3b814 <lll_conn_init>
	if (err) {
   338b0:	4604      	mov	r4, r0
   338b2:	2800      	cmp	r0, #0
   338b4:	d1e8      	bne.n	33888 <ll_init+0x58>
	err = ull_conn_init();
   338b6:	f001 ff69 	bl	3578c <ull_conn_init>
	if (err) {
   338ba:	4604      	mov	r4, r0
   338bc:	2800      	cmp	r0, #0
   338be:	d1e3      	bne.n	33888 <ll_init+0x58>
		ull_filter_reset(true);
   338c0:	2001      	movs	r0, #1
   338c2:	f006 f84f 	bl	39964 <ull_filter_reset>
	return  0;
   338c6:	e7df      	b.n	33888 <ll_init+0x58>
	LL_ASSERT(!err);
   338c8:	4a0e      	ldr	r2, [pc, #56]	; (33904 <ll_init+0xd4>)
   338ca:	490f      	ldr	r1, [pc, #60]	; (33908 <ll_init+0xd8>)
   338cc:	480f      	ldr	r0, [pc, #60]	; (3390c <ll_init+0xdc>)
   338ce:	f240 230d 	movw	r3, #525	; 0x20d
   338d2:	f00e fff7 	bl	428c4 <printk>
   338d6:	4040      	eors	r0, r0
   338d8:	f380 8811 	msr	BASEPRI, r0
   338dc:	f04f 0003 	mov.w	r0, #3
   338e0:	df02      	svc	2
   338e2:	e7c8      	b.n	33876 <ll_init+0x46>
   338e4:	2000212c 	.word	0x2000212c
   338e8:	0003ce25 	.word	0x0003ce25
   338ec:	200023ec 	.word	0x200023ec
   338f0:	0003ccd5 	.word	0x0003ccd5
   338f4:	0003cc71 	.word	0x0003cc71
   338f8:	20002148 	.word	0x20002148
   338fc:	2000240c 	.word	0x2000240c
   33900:	20002130 	.word	0x20002130
   33904:	00049dc8 	.word	0x00049dc8
   33908:	00049e04 	.word	0x00049e04
   3390c:	00049c68 	.word	0x00049c68

00033910 <ll_reset>:
{
   33910:	b510      	push	{r4, lr}
   33912:	b086      	sub	sp, #24
	err = ull_adv_reset();
   33914:	f000 fcb4 	bl	34280 <ull_adv_reset>
	LL_ASSERT(!err);
   33918:	bb70      	cbnz	r0, 33978 <ll_reset+0x68>
	err = ull_conn_reset();
   3391a:	f001 ff39 	bl	35790 <ull_conn_reset>
	LL_ASSERT(!err);
   3391e:	2800      	cmp	r0, #0
   33920:	d13b      	bne.n	3399a <ll_reset+0x8a>
	MFIFO_INIT(tx_ack);
   33922:	4b3a      	ldr	r3, [pc, #232]	; (33a0c <ll_reset+0xfc>)
   33924:	2400      	movs	r4, #0
   33926:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   33928:	4620      	mov	r0, r4
   3392a:	f006 f81b 	bl	39964 <ull_filter_reset>
	MFIFO_INIT(prep);
   3392e:	4938      	ldr	r1, [pc, #224]	; (33a10 <ll_reset+0x100>)
	MFIFO_INIT(pdu_rx_free);
   33930:	4a38      	ldr	r2, [pc, #224]	; (33a14 <ll_reset+0x104>)
	MFIFO_INIT(ll_pdu_rx_free);
   33932:	4b39      	ldr	r3, [pc, #228]	; (33a18 <ll_reset+0x108>)
	MFIFO_INIT(prep);
   33934:	804c      	strh	r4, [r1, #2]
	MFIFO_INIT(pdu_rx_free);
   33936:	8054      	strh	r4, [r2, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   33938:	805c      	strh	r4, [r3, #2]
   3393a:	2201      	movs	r2, #1
   3393c:	4621      	mov	r1, r4
   3393e:	4668      	mov	r0, sp
   33940:	f014 ff05 	bl	4874e <z_impl_k_sem_init>
		mfy.param = &sem;
   33944:	4b35      	ldr	r3, [pc, #212]	; (33a1c <ll_reset+0x10c>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   33946:	4622      	mov	r2, r4
   33948:	4621      	mov	r1, r4
   3394a:	2003      	movs	r0, #3
		mfy.param = &sem;
   3394c:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   33950:	f7fc f91e 	bl	2fb90 <mayfly_enqueue>
		LL_ASSERT(!retval);
   33954:	2800      	cmp	r0, #0
   33956:	d14b      	bne.n	339f0 <ll_reset+0xe0>
	return z_impl_k_sem_take(sem, timeout);
   33958:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3395c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   33960:	4668      	mov	r0, sp
   33962:	f00d fe25 	bl	415b0 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   33966:	f000 fc91 	bl	3428c <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   3396a:	2800      	cmp	r0, #0
   3396c:	d132      	bne.n	339d4 <ll_reset+0xc4>
	err = init_reset();
   3396e:	f7ff fec7 	bl	33700 <init_reset>
	LL_ASSERT(!err);
   33972:	bb00      	cbnz	r0, 339b6 <ll_reset+0xa6>
}
   33974:	b006      	add	sp, #24
   33976:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   33978:	4a29      	ldr	r2, [pc, #164]	; (33a20 <ll_reset+0x110>)
   3397a:	492a      	ldr	r1, [pc, #168]	; (33a24 <ll_reset+0x114>)
   3397c:	482a      	ldr	r0, [pc, #168]	; (33a28 <ll_reset+0x118>)
   3397e:	f240 23ad 	movw	r3, #685	; 0x2ad
   33982:	f00e ff9f 	bl	428c4 <printk>
   33986:	4040      	eors	r0, r0
   33988:	f380 8811 	msr	BASEPRI, r0
   3398c:	f04f 0003 	mov.w	r0, #3
   33990:	df02      	svc	2
	err = ull_conn_reset();
   33992:	f001 fefd 	bl	35790 <ull_conn_reset>
	LL_ASSERT(!err);
   33996:	2800      	cmp	r0, #0
   33998:	d0c3      	beq.n	33922 <ll_reset+0x12>
   3399a:	4a21      	ldr	r2, [pc, #132]	; (33a20 <ll_reset+0x110>)
   3399c:	4921      	ldr	r1, [pc, #132]	; (33a24 <ll_reset+0x114>)
   3399e:	4822      	ldr	r0, [pc, #136]	; (33a28 <ll_reset+0x118>)
   339a0:	f240 23de 	movw	r3, #734	; 0x2de
   339a4:	f00e ff8e 	bl	428c4 <printk>
   339a8:	4040      	eors	r0, r0
   339aa:	f380 8811 	msr	BASEPRI, r0
   339ae:	f04f 0003 	mov.w	r0, #3
   339b2:	df02      	svc	2
   339b4:	e7b5      	b.n	33922 <ll_reset+0x12>
	LL_ASSERT(!err);
   339b6:	4a1a      	ldr	r2, [pc, #104]	; (33a20 <ll_reset+0x110>)
   339b8:	491a      	ldr	r1, [pc, #104]	; (33a24 <ll_reset+0x114>)
   339ba:	481b      	ldr	r0, [pc, #108]	; (33a28 <ll_reset+0x118>)
   339bc:	f240 3327 	movw	r3, #807	; 0x327
   339c0:	f00e ff80 	bl	428c4 <printk>
   339c4:	4040      	eors	r0, r0
   339c6:	f380 8811 	msr	BASEPRI, r0
   339ca:	f04f 0003 	mov.w	r0, #3
   339ce:	df02      	svc	2
}
   339d0:	b006      	add	sp, #24
   339d2:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   339d4:	4a12      	ldr	r2, [pc, #72]	; (33a20 <ll_reset+0x110>)
   339d6:	4913      	ldr	r1, [pc, #76]	; (33a24 <ll_reset+0x114>)
   339d8:	4813      	ldr	r0, [pc, #76]	; (33a28 <ll_reset+0x118>)
   339da:	f240 331a 	movw	r3, #794	; 0x31a
   339de:	f00e ff71 	bl	428c4 <printk>
   339e2:	4040      	eors	r0, r0
   339e4:	f380 8811 	msr	BASEPRI, r0
   339e8:	f04f 0003 	mov.w	r0, #3
   339ec:	df02      	svc	2
   339ee:	e7be      	b.n	3396e <ll_reset+0x5e>
		LL_ASSERT(!retval);
   339f0:	4a0b      	ldr	r2, [pc, #44]	; (33a20 <ll_reset+0x110>)
   339f2:	490e      	ldr	r1, [pc, #56]	; (33a2c <ll_reset+0x11c>)
   339f4:	480c      	ldr	r0, [pc, #48]	; (33a28 <ll_reset+0x118>)
   339f6:	f240 330d 	movw	r3, #781	; 0x30d
   339fa:	f00e ff63 	bl	428c4 <printk>
   339fe:	4040      	eors	r0, r0
   33a00:	f380 8811 	msr	BASEPRI, r0
   33a04:	f04f 0003 	mov.w	r0, #3
   33a08:	df02      	svc	2
   33a0a:	e7a5      	b.n	33958 <ll_reset+0x48>
   33a0c:	2000046c 	.word	0x2000046c
   33a10:	200005a4 	.word	0x200005a4
   33a14:	2000049c 	.word	0x2000049c
   33a18:	20000490 	.word	0x20000490
   33a1c:	2000045c 	.word	0x2000045c
   33a20:	00049dc8 	.word	0x00049dc8
   33a24:	00049e04 	.word	0x00049e04
   33a28:	00049c68 	.word	0x00049c68
   33a2c:	00049f28 	.word	0x00049f28

00033a30 <lll_prepare>:
 *	   -EINPROGRESS: Event already in progress and prepare was queued
 */
int lll_prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		lll_prepare_cb_t prepare_cb, int8_t event_prio,
		struct lll_prepare_param *prepare_param)
{
   33a30:	b510      	push	{r4, lr}
   33a32:	b082      	sub	sp, #8
	}

	prepare_param->prio = prio;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */

	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
   33a34:	2400      	movs	r4, #0
   33a36:	e9cd 4400 	strd	r4, r4, [sp]
   33a3a:	9b04      	ldr	r3, [sp, #16]
   33a3c:	f006 ffde 	bl	3a9fc <lll_prepare_resolve>
				   prepare_param, 0, 0);
}
   33a40:	b002      	add	sp, #8
   33a42:	bd10      	pop	{r4, pc}

00033a44 <lll_resume>:

void lll_resume(void *param)
{
   33a44:	b510      	push	{r4, lr}
   33a46:	4603      	mov	r3, r0
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
   33a48:	7f00      	ldrb	r0, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   33a4a:	691a      	ldr	r2, [r3, #16]
   33a4c:	6999      	ldr	r1, [r3, #24]
   33a4e:	2401      	movs	r4, #1
{
   33a50:	b082      	sub	sp, #8
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   33a52:	4020      	ands	r0, r4
   33a54:	e9cd 0400 	strd	r0, r4, [sp]
   33a58:	6958      	ldr	r0, [r3, #20]
   33a5a:	f006 ffcf 	bl	3a9fc <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   33a5e:	b108      	cbz	r0, 33a64 <lll_resume+0x20>
   33a60:	3077      	adds	r0, #119	; 0x77
   33a62:	d101      	bne.n	33a68 <lll_resume+0x24>
}
   33a64:	b002      	add	sp, #8
   33a66:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   33a68:	4a06      	ldr	r2, [pc, #24]	; (33a84 <lll_resume+0x40>)
   33a6a:	4907      	ldr	r1, [pc, #28]	; (33a88 <lll_resume+0x44>)
   33a6c:	4807      	ldr	r0, [pc, #28]	; (33a8c <lll_resume+0x48>)
   33a6e:	234f      	movs	r3, #79	; 0x4f
   33a70:	f00e ff28 	bl	428c4 <printk>
   33a74:	4040      	eors	r0, r0
   33a76:	f380 8811 	msr	BASEPRI, r0
   33a7a:	f04f 0003 	mov.w	r0, #3
   33a7e:	df02      	svc	2
}
   33a80:	b002      	add	sp, #8
   33a82:	bd10      	pop	{r4, pc}
   33a84:	00049f30 	.word	0x00049f30
   33a88:	00049f74 	.word	0x00049f74
   33a8c:	00049c68 	.word	0x00049c68

00033a90 <ticker_stop_cb>:
{
   33a90:	b530      	push	{r4, r5, lr}
   33a92:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   33a94:	4b19      	ldr	r3, [pc, #100]	; (33afc <ticker_stop_cb+0x6c>)
{
   33a96:	9d07      	ldr	r5, [sp, #28]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   33a98:	4a19      	ldr	r2, [pc, #100]	; (33b00 <ticker_stop_cb+0x70>)
   33a9a:	1aeb      	subs	r3, r5, r3
   33a9c:	fba2 2303 	umull	r2, r3, r2, r3
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   33aa0:	f413 5f7f 	tst.w	r3, #16320	; 0x3fc0
	handle = ull_adv_handle_get(adv);
   33aa4:	f3c3 1487 	ubfx	r4, r3, #6, #8
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   33aa8:	d119      	bne.n	33ade <ticker_stop_cb+0x4e>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   33aaa:	1ca2      	adds	r2, r4, #2
   33aac:	4b15      	ldr	r3, [pc, #84]	; (33b04 <ticker_stop_cb+0x74>)
   33aae:	9500      	str	r5, [sp, #0]
   33ab0:	b2d2      	uxtb	r2, r2
   33ab2:	2101      	movs	r1, #1
   33ab4:	2000      	movs	r0, #0
   33ab6:	f7fd fa97 	bl	30fe8 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   33aba:	f030 0302 	bics.w	r3, r0, #2
   33abe:	d00c      	beq.n	33ada <ticker_stop_cb+0x4a>
   33ac0:	4a11      	ldr	r2, [pc, #68]	; (33b08 <ticker_stop_cb+0x78>)
   33ac2:	4912      	ldr	r1, [pc, #72]	; (33b0c <ticker_stop_cb+0x7c>)
   33ac4:	4812      	ldr	r0, [pc, #72]	; (33b10 <ticker_stop_cb+0x80>)
   33ac6:	f640 03d2 	movw	r3, #2258	; 0x8d2
   33aca:	f00e fefb 	bl	428c4 <printk>
   33ace:	4040      	eors	r0, r0
   33ad0:	f380 8811 	msr	BASEPRI, r0
   33ad4:	f04f 0003 	mov.w	r0, #3
   33ad8:	df02      	svc	2
}
   33ada:	b003      	add	sp, #12
   33adc:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   33ade:	4a0a      	ldr	r2, [pc, #40]	; (33b08 <ticker_stop_cb+0x78>)
   33ae0:	490c      	ldr	r1, [pc, #48]	; (33b14 <ticker_stop_cb+0x84>)
   33ae2:	480b      	ldr	r0, [pc, #44]	; (33b10 <ticker_stop_cb+0x80>)
   33ae4:	f640 03cd 	movw	r3, #2253	; 0x8cd
   33ae8:	f00e feec 	bl	428c4 <printk>
   33aec:	4040      	eors	r0, r0
   33aee:	f380 8811 	msr	BASEPRI, r0
   33af2:	f04f 0003 	mov.w	r0, #3
   33af6:	df02      	svc	2
   33af8:	e7d7      	b.n	33aaa <ticker_stop_cb+0x1a>
   33afa:	bf00      	nop
   33afc:	20002560 	.word	0x20002560
   33b00:	8d3dcb09 	.word	0x8d3dcb09
   33b04:	00033bad 	.word	0x00033bad
   33b08:	00049f88 	.word	0x00049f88
   33b0c:	00049fd4 	.word	0x00049fd4
   33b10:	00049c68 	.word	0x00049c68
   33b14:	00049fc8 	.word	0x00049fc8

00033b18 <disabled_cb>:
{
   33b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
   33b1a:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
   33b1c:	6e2f      	ldr	r7, [r5, #96]	; 0x60
{
   33b1e:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   33b20:	b1d7      	cbz	r7, 33b58 <disabled_cb+0x40>
	LL_ASSERT(adv->node_rx_cc_free);
   33b22:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	adv->link_cc_free = NULL;
   33b24:	2300      	movs	r3, #0
   33b26:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
   33b28:	b34c      	cbz	r4, 33b7e <disabled_cb+0x66>
	adv->node_rx_cc_free = NULL;
   33b2a:	2100      	movs	r1, #0
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   33b2c:	2316      	movs	r3, #22
	adv->node_rx_cc_free = NULL;
   33b2e:	6669      	str	r1, [r5, #100]	; 0x64
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   33b30:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
   33b32:	f64f 73ff 	movw	r3, #65535	; 0xffff
   33b36:	80e3      	strh	r3, [r4, #6]
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   33b38:	221e      	movs	r2, #30
   33b3a:	f104 001c 	add.w	r0, r4, #28
   33b3e:	f010 ffcb 	bl	44ad8 <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   33b42:	233c      	movs	r3, #60	; 0x3c
   33b44:	7723      	strb	r3, [r4, #28]
	rx->hdr.rx_ftr.param = param;
   33b46:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
   33b48:	4621      	mov	r1, r4
   33b4a:	4638      	mov	r0, r7
   33b4c:	f7ff fad2 	bl	330f4 <ll_rx_put>
}
   33b50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   33b54:	f7ff bad8 	b.w	33108 <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
   33b58:	4a10      	ldr	r2, [pc, #64]	; (33b9c <disabled_cb+0x84>)
   33b5a:	4911      	ldr	r1, [pc, #68]	; (33ba0 <disabled_cb+0x88>)
   33b5c:	4811      	ldr	r0, [pc, #68]	; (33ba4 <disabled_cb+0x8c>)
   33b5e:	f640 131a 	movw	r3, #2330	; 0x91a
   33b62:	f00e feaf 	bl	428c4 <printk>
   33b66:	4040      	eors	r0, r0
   33b68:	f380 8811 	msr	BASEPRI, r0
   33b6c:	f04f 0003 	mov.w	r0, #3
   33b70:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
   33b72:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	link = adv->link_cc_free;
   33b74:	6e2f      	ldr	r7, [r5, #96]	; 0x60
	adv->link_cc_free = NULL;
   33b76:	2300      	movs	r3, #0
   33b78:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
   33b7a:	2c00      	cmp	r4, #0
   33b7c:	d1d5      	bne.n	33b2a <disabled_cb+0x12>
   33b7e:	4a07      	ldr	r2, [pc, #28]	; (33b9c <disabled_cb+0x84>)
   33b80:	4909      	ldr	r1, [pc, #36]	; (33ba8 <disabled_cb+0x90>)
   33b82:	4808      	ldr	r0, [pc, #32]	; (33ba4 <disabled_cb+0x8c>)
   33b84:	f640 131e 	movw	r3, #2334	; 0x91e
   33b88:	f00e fe9c 	bl	428c4 <printk>
   33b8c:	4040      	eors	r0, r0
   33b8e:	f380 8811 	msr	BASEPRI, r0
   33b92:	f04f 0003 	mov.w	r0, #3
   33b96:	df02      	svc	2
	rx = adv->node_rx_cc_free;
   33b98:	6e6c      	ldr	r4, [r5, #100]	; 0x64
   33b9a:	e7c6      	b.n	33b2a <disabled_cb+0x12>
   33b9c:	00049f88 	.word	0x00049f88
   33ba0:	00049ff0 	.word	0x00049ff0
   33ba4:	00049c68 	.word	0x00049c68
   33ba8:	0004a004 	.word	0x0004a004

00033bac <ticker_stop_op_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
   33bac:	b100      	cbz	r0, 33bb0 <ticker_stop_op_cb+0x4>
   33bae:	4770      	bx	lr
	mfy.param = param;
   33bb0:	4b0c      	ldr	r3, [pc, #48]	; (33be4 <ticker_stop_op_cb+0x38>)
{
   33bb2:	b510      	push	{r4, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   33bb4:	4602      	mov	r2, r0
   33bb6:	460c      	mov	r4, r1
   33bb8:	2002      	movs	r0, #2
   33bba:	2101      	movs	r1, #1
	mfy.param = param;
   33bbc:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   33bbe:	f7fb ffe7 	bl	2fb90 <mayfly_enqueue>
	LL_ASSERT(!ret);
   33bc2:	b900      	cbnz	r0, 33bc6 <ticker_stop_op_cb+0x1a>
}
   33bc4:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   33bc6:	4a08      	ldr	r2, [pc, #32]	; (33be8 <ticker_stop_op_cb+0x3c>)
   33bc8:	4908      	ldr	r1, [pc, #32]	; (33bec <ticker_stop_op_cb+0x40>)
   33bca:	4809      	ldr	r0, [pc, #36]	; (33bf0 <ticker_stop_op_cb+0x44>)
   33bcc:	f640 03ee 	movw	r3, #2286	; 0x8ee
   33bd0:	f00e fe78 	bl	428c4 <printk>
   33bd4:	4040      	eors	r0, r0
   33bd6:	f380 8811 	msr	BASEPRI, r0
   33bda:	f04f 0003 	mov.w	r0, #3
   33bde:	df02      	svc	2
}
   33be0:	bd10      	pop	{r4, pc}
   33be2:	bf00      	nop
   33be4:	200006c8 	.word	0x200006c8
   33be8:	00049f88 	.word	0x00049f88
   33bec:	00049f00 	.word	0x00049f00
   33bf0:	00049c68 	.word	0x00049c68

00033bf4 <adv_disable>:
{
   33bf4:	b538      	push	{r3, r4, r5, lr}
   33bf6:	4604      	mov	r4, r0
   33bf8:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
   33bfc:	b353      	cbz	r3, 33c54 <adv_disable+0x60>
		mfy.param = &adv->lll;
   33bfe:	4d17      	ldr	r5, [pc, #92]	; (33c5c <adv_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
   33c00:	6963      	ldr	r3, [r4, #20]
		mfy.param = &adv->lll;
   33c02:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   33c04:	b16b      	cbz	r3, 33c22 <adv_disable+0x2e>
   33c06:	4a16      	ldr	r2, [pc, #88]	; (33c60 <adv_disable+0x6c>)
   33c08:	4916      	ldr	r1, [pc, #88]	; (33c64 <adv_disable+0x70>)
   33c0a:	4817      	ldr	r0, [pc, #92]	; (33c68 <adv_disable+0x74>)
   33c0c:	f640 1303 	movw	r3, #2307	; 0x903
   33c10:	f00e fe58 	bl	428c4 <printk>
   33c14:	4040      	eors	r0, r0
   33c16:	f380 8811 	msr	BASEPRI, r0
   33c1a:	f04f 0003 	mov.w	r0, #3
   33c1e:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   33c20:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   33c22:	4912      	ldr	r1, [pc, #72]	; (33c6c <adv_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   33c24:	4b0d      	ldr	r3, [pc, #52]	; (33c5c <adv_disable+0x68>)
   33c26:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   33c28:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   33c2c:	4611      	mov	r1, r2
   33c2e:	2001      	movs	r0, #1
   33c30:	f7fb ffae 	bl	2fb90 <mayfly_enqueue>
		LL_ASSERT(!ret);
   33c34:	b900      	cbnz	r0, 33c38 <adv_disable+0x44>
}
   33c36:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   33c38:	4a09      	ldr	r2, [pc, #36]	; (33c60 <adv_disable+0x6c>)
   33c3a:	490d      	ldr	r1, [pc, #52]	; (33c70 <adv_disable+0x7c>)
   33c3c:	480a      	ldr	r0, [pc, #40]	; (33c68 <adv_disable+0x74>)
   33c3e:	f640 130a 	movw	r3, #2314	; 0x90a
   33c42:	f00e fe3f 	bl	428c4 <printk>
   33c46:	4040      	eors	r0, r0
   33c48:	f380 8811 	msr	BASEPRI, r0
   33c4c:	f04f 0003 	mov.w	r0, #3
   33c50:	df02      	svc	2
}
   33c52:	bd38      	pop	{r3, r4, r5, pc}
   33c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&adv->lll);
   33c58:	f7ff bf5e 	b.w	33b18 <disabled_cb>
   33c5c:	200006b8 	.word	0x200006b8
   33c60:	00049f88 	.word	0x00049f88
   33c64:	0004a01c 	.word	0x0004a01c
   33c68:	00049c68 	.word	0x00049c68
   33c6c:	00033b19 	.word	0x00033b19
   33c70:	00049f00 	.word	0x00049f00

00033c74 <ticker_update_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   33c74:	b900      	cbnz	r0, 33c78 <ticker_update_op_cb+0x4>
   33c76:	4770      	bx	lr
{
   33c78:	b510      	push	{r4, lr}
   33c7a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   33c7c:	f7ff fb18 	bl	332b0 <ull_disable_mark_get>
   33c80:	4284      	cmp	r4, r0
   33c82:	d00c      	beq.n	33c9e <ticker_update_op_cb+0x2a>
   33c84:	4a06      	ldr	r2, [pc, #24]	; (33ca0 <ticker_update_op_cb+0x2c>)
   33c86:	4907      	ldr	r1, [pc, #28]	; (33ca4 <ticker_update_op_cb+0x30>)
   33c88:	4807      	ldr	r0, [pc, #28]	; (33ca8 <ticker_update_op_cb+0x34>)
   33c8a:	f640 03bf 	movw	r3, #2239	; 0x8bf
   33c8e:	f00e fe19 	bl	428c4 <printk>
   33c92:	4040      	eors	r0, r0
   33c94:	f380 8811 	msr	BASEPRI, r0
   33c98:	f04f 0003 	mov.w	r0, #3
   33c9c:	df02      	svc	2
}
   33c9e:	bd10      	pop	{r4, pc}
   33ca0:	00049f88 	.word	0x00049f88
   33ca4:	0004a030 	.word	0x0004a030
   33ca8:	00049c68 	.word	0x00049c68

00033cac <init_set.constprop.0>:
	pdu->tx_addr = 0;
	pdu->rx_addr = 0;
	pdu->len = BDADDR_SIZE;
}

static void init_set(struct ll_adv_set *adv)
   33cac:	b500      	push	{lr}
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   33cae:	4b13      	ldr	r3, [pc, #76]	; (33cfc <init_set.constprop.0+0x50>)
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   33cb0:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   33cb2:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   33cb6:	f893 c06a 	ldrb.w	ip, [r3, #106]	; 0x6a
   33cba:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   33cbe:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
   33cc2:	f022 0202 	bic.w	r2, r2, #2
   33cc6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   33cc8:	f042 020e 	orr.w	r2, r2, #14
   33ccc:	849a      	strh	r2, [r3, #36]	; 0x24
	pdu->len = BDADDR_SIZE;
   33cce:	2006      	movs	r0, #6
	pdu->type = pdu_type;
   33cd0:	2200      	movs	r2, #0
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   33cd2:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   33cd6:	f36f 0c42 	bfc	ip, #1, #2
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   33cda:	f8a3 e068 	strh.w	lr, [r3, #104]	; 0x68
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   33cde:	f883 c06a 	strb.w	ip, [r3, #106]	; 0x6a
	pdu->len = BDADDR_SIZE;
   33ce2:	7048      	strb	r0, [r1, #1]
	pdu->type = pdu_type;
   33ce4:	700a      	strb	r2, [r1, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   33ce6:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
   33cea:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   33cee:	2204      	movs	r2, #4
   33cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	pdu->len = BDADDR_SIZE;
   33cf2:	7058      	strb	r0, [r3, #1]
	pdu->type = pdu_type;
   33cf4:	701a      	strb	r2, [r3, #0]
	adv->delay_remain = ULL_ADV_RANDOM_DELAY;
#endif /* ONFIG_BT_CTLR_JIT_SCHEDULING */

	init_pdu(lll_adv_data_peek(&ll_adv[0].lll), PDU_ADV_TYPE_ADV_IND);
	init_pdu(lll_adv_scan_rsp_peek(&ll_adv[0].lll), PDU_ADV_TYPE_SCAN_RSP);
}
   33cf6:	f85d fb04 	ldr.w	pc, [sp], #4
   33cfa:	bf00      	nop
   33cfc:	20002560 	.word	0x20002560

00033d00 <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
   33d00:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   33d02:	4c1b      	ldr	r4, [pc, #108]	; (33d70 <conn_release.constprop.0+0x70>)
   33d04:	6a25      	ldr	r5, [r4, #32]
	LL_ASSERT(!lll->link_tx_free);
   33d06:	6dab      	ldr	r3, [r5, #88]	; 0x58
   33d08:	b163      	cbz	r3, 33d24 <conn_release.constprop.0+0x24>
   33d0a:	4a1a      	ldr	r2, [pc, #104]	; (33d74 <conn_release.constprop.0+0x74>)
   33d0c:	491a      	ldr	r1, [pc, #104]	; (33d78 <conn_release.constprop.0+0x78>)
   33d0e:	481b      	ldr	r0, [pc, #108]	; (33d7c <conn_release.constprop.0+0x7c>)
   33d10:	f640 1348 	movw	r3, #2376	; 0x948
   33d14:	f00e fdd6 	bl	428c4 <printk>
   33d18:	4040      	eors	r0, r0
   33d1a:	f380 8811 	msr	BASEPRI, r0
   33d1e:	f04f 0003 	mov.w	r0, #3
   33d22:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   33d24:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   33d28:	f105 0048 	add.w	r0, r5, #72	; 0x48
   33d2c:	f7fb feb0 	bl	2fa90 <memq_deinit>
	LL_ASSERT(link);
   33d30:	4606      	mov	r6, r0
   33d32:	b170      	cbz	r0, 33d52 <conn_release.constprop.0+0x52>
	ll_conn_release(lll->hdr.parent);
   33d34:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   33d36:	65ae      	str	r6, [r5, #88]	; 0x58
	adv->lll.conn = NULL;
   33d38:	2500      	movs	r5, #0
	ll_conn_release(lll->hdr.parent);
   33d3a:	f001 fa3f 	bl	351bc <ll_conn_release>
	ll_rx_release(adv->node_rx_cc_free);
   33d3e:	6e60      	ldr	r0, [r4, #100]	; 0x64
	adv->lll.conn = NULL;
   33d40:	6225      	str	r5, [r4, #32]
	ll_rx_release(adv->node_rx_cc_free);
   33d42:	f7ff f9d1 	bl	330e8 <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
   33d46:	6e20      	ldr	r0, [r4, #96]	; 0x60
	adv->node_rx_cc_free = NULL;
   33d48:	6665      	str	r5, [r4, #100]	; 0x64
	ll_rx_link_release(adv->link_cc_free);
   33d4a:	f7ff f9c1 	bl	330d0 <ll_rx_link_release>
	adv->link_cc_free = NULL;
   33d4e:	6625      	str	r5, [r4, #96]	; 0x60
}
   33d50:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   33d52:	4a08      	ldr	r2, [pc, #32]	; (33d74 <conn_release.constprop.0+0x74>)
   33d54:	490a      	ldr	r1, [pc, #40]	; (33d80 <conn_release.constprop.0+0x80>)
   33d56:	4809      	ldr	r0, [pc, #36]	; (33d7c <conn_release.constprop.0+0x7c>)
   33d58:	f640 134a 	movw	r3, #2378	; 0x94a
   33d5c:	f00e fdb2 	bl	428c4 <printk>
   33d60:	4040      	eors	r0, r0
   33d62:	f380 8811 	msr	BASEPRI, r0
   33d66:	f04f 0003 	mov.w	r0, #3
   33d6a:	df02      	svc	2
   33d6c:	e7e2      	b.n	33d34 <conn_release.constprop.0+0x34>
   33d6e:	bf00      	nop
   33d70:	20002560 	.word	0x20002560
   33d74:	00049f88 	.word	0x00049f88
   33d78:	0004a060 	.word	0x0004a060
   33d7c:	00049c68 	.word	0x00049c68
   33d80:	0004a134 	.word	0x0004a134

00033d84 <disable.constprop.0>:
static inline uint8_t disable(uint8_t handle)
   33d84:	b530      	push	{r4, r5, lr}
	if (!adv || !adv->is_enabled) {
   33d86:	4c4f      	ldr	r4, [pc, #316]	; (33ec4 <disable.constprop.0+0x140>)
   33d88:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   33d8c:	07d9      	lsls	r1, r3, #31
static inline uint8_t disable(uint8_t handle)
   33d8e:	b085      	sub	sp, #20
	if (!adv || !adv->is_enabled) {
   33d90:	d55f      	bpl.n	33e52 <disable.constprop.0+0xce>
	if (adv->lll.conn) {
   33d92:	6a23      	ldr	r3, [r4, #32]
   33d94:	b153      	cbz	r3, 33dac <disable.constprop.0+0x28>
		adv->lll.conn->periph.cancelled = 1U;
   33d96:	f893 2020 	ldrb.w	r2, [r3, #32]
   33d9a:	f042 0202 	orr.w	r2, r2, #2
   33d9e:	f883 2020 	strb.w	r2, [r3, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
   33da2:	6a23      	ldr	r3, [r4, #32]
   33da4:	f893 3020 	ldrb.w	r3, [r3, #32]
   33da8:	07da      	lsls	r2, r3, #31
   33daa:	d467      	bmi.n	33e7c <disable.constprop.0+0xf8>
	mark = ull_disable_mark(adv);
   33dac:	4845      	ldr	r0, [pc, #276]	; (33ec4 <disable.constprop.0+0x140>)
   33dae:	f7ff fa67 	bl	33280 <ull_disable_mark>
	LL_ASSERT(mark == adv);
   33db2:	4284      	cmp	r4, r0
   33db4:	d00c      	beq.n	33dd0 <disable.constprop.0+0x4c>
   33db6:	4a44      	ldr	r2, [pc, #272]	; (33ec8 <disable.constprop.0+0x144>)
   33db8:	4944      	ldr	r1, [pc, #272]	; (33ecc <disable.constprop.0+0x148>)
   33dba:	4845      	ldr	r0, [pc, #276]	; (33ed0 <disable.constprop.0+0x14c>)
   33dbc:	f640 13ff 	movw	r3, #2559	; 0x9ff
   33dc0:	f00e fd80 	bl	428c4 <printk>
   33dc4:	4040      	eors	r0, r0
   33dc6:	f380 8811 	msr	BASEPRI, r0
   33dca:	f04f 0003 	mov.w	r0, #3
   33dce:	df02      	svc	2
	if (adv->lll.is_hdcd) {
   33dd0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   33dd4:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   33dd6:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
   33dd8:	d50d      	bpl.n	33df6 <disable.constprop.0+0x72>
		ret_cb = TICKER_STATUS_BUSY;
   33dda:	2102      	movs	r1, #2
   33ddc:	9103      	str	r1, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   33dde:	4b3d      	ldr	r3, [pc, #244]	; (33ed4 <disable.constprop.0+0x150>)
   33de0:	9500      	str	r5, [sp, #0]
   33de2:	2103      	movs	r1, #3
   33de4:	2201      	movs	r2, #1
   33de6:	2000      	movs	r0, #0
   33de8:	f7fd f8fe 	bl	30fe8 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   33dec:	4629      	mov	r1, r5
   33dee:	f7ff fa1f 	bl	33230 <ull_ticker_status_take>
		if (ret) {
   33df2:	2800      	cmp	r0, #0
   33df4:	d152      	bne.n	33e9c <disable.constprop.0+0x118>
	ret_cb = TICKER_STATUS_BUSY;
   33df6:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   33df8:	2103      	movs	r1, #3
   33dfa:	4b36      	ldr	r3, [pc, #216]	; (33ed4 <disable.constprop.0+0x150>)
   33dfc:	9500      	str	r5, [sp, #0]
   33dfe:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
   33e00:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   33e02:	f7fd f8f1 	bl	30fe8 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   33e06:	4629      	mov	r1, r5
   33e08:	f7ff fa12 	bl	33230 <ull_ticker_status_take>
	if (ret) {
   33e0c:	bb20      	cbnz	r0, 33e58 <disable.constprop.0+0xd4>
	err = ull_disable(&adv->lll);
   33e0e:	4832      	ldr	r0, [pc, #200]	; (33ed8 <disable.constprop.0+0x154>)
   33e10:	f7ff fa72 	bl	332f8 <ull_disable>
	LL_ASSERT(!err || (err == -EALREADY));
   33e14:	b108      	cbz	r0, 33e1a <disable.constprop.0+0x96>
   33e16:	3078      	adds	r0, #120	; 0x78
   33e18:	d132      	bne.n	33e80 <disable.constprop.0+0xfc>
	mark = ull_disable_unmark(adv);
   33e1a:	482a      	ldr	r0, [pc, #168]	; (33ec4 <disable.constprop.0+0x140>)
   33e1c:	f7ff fa3c 	bl	33298 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   33e20:	4284      	cmp	r4, r0
   33e22:	d00c      	beq.n	33e3e <disable.constprop.0+0xba>
   33e24:	4a28      	ldr	r2, [pc, #160]	; (33ec8 <disable.constprop.0+0x144>)
   33e26:	4929      	ldr	r1, [pc, #164]	; (33ecc <disable.constprop.0+0x148>)
   33e28:	4829      	ldr	r0, [pc, #164]	; (33ed0 <disable.constprop.0+0x14c>)
   33e2a:	f640 2321 	movw	r3, #2593	; 0xa21
   33e2e:	f00e fd49 	bl	428c4 <printk>
   33e32:	4040      	eors	r0, r0
   33e34:	f380 8811 	msr	BASEPRI, r0
   33e38:	f04f 0003 	mov.w	r0, #3
   33e3c:	df02      	svc	2
	if (adv->lll.conn) {
   33e3e:	6a23      	ldr	r3, [r4, #32]
   33e40:	b10b      	cbz	r3, 33e46 <disable.constprop.0+0xc2>
		conn_release(adv);
   33e42:	f7ff ff5d 	bl	33d00 <conn_release.constprop.0>
	adv->is_enabled = 0U;
   33e46:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   33e4a:	f36f 0300 	bfc	r3, #0, #1
   33e4e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
			return 0;
   33e52:	2000      	movs	r0, #0
}
   33e54:	b005      	add	sp, #20
   33e56:	bd30      	pop	{r4, r5, pc}
		mark = ull_disable_unmark(adv);
   33e58:	481a      	ldr	r0, [pc, #104]	; (33ec4 <disable.constprop.0+0x140>)
   33e5a:	f7ff fa1d 	bl	33298 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   33e5e:	4284      	cmp	r4, r0
   33e60:	d00c      	beq.n	33e7c <disable.constprop.0+0xf8>
   33e62:	4a19      	ldr	r2, [pc, #100]	; (33ec8 <disable.constprop.0+0x144>)
   33e64:	4919      	ldr	r1, [pc, #100]	; (33ecc <disable.constprop.0+0x148>)
   33e66:	481a      	ldr	r0, [pc, #104]	; (33ed0 <disable.constprop.0+0x14c>)
   33e68:	f640 2318 	movw	r3, #2584	; 0xa18
   33e6c:	f00e fd2a 	bl	428c4 <printk>
   33e70:	4040      	eors	r0, r0
   33e72:	f380 8811 	msr	BASEPRI, r0
   33e76:	f04f 0003 	mov.w	r0, #3
   33e7a:	df02      	svc	2
			return BT_HCI_ERR_CMD_DISALLOWED;
   33e7c:	200c      	movs	r0, #12
   33e7e:	e7e9      	b.n	33e54 <disable.constprop.0+0xd0>
	LL_ASSERT(!err || (err == -EALREADY));
   33e80:	4a11      	ldr	r2, [pc, #68]	; (33ec8 <disable.constprop.0+0x144>)
   33e82:	4916      	ldr	r1, [pc, #88]	; (33edc <disable.constprop.0+0x158>)
   33e84:	4812      	ldr	r0, [pc, #72]	; (33ed0 <disable.constprop.0+0x14c>)
   33e86:	f640 231e 	movw	r3, #2590	; 0xa1e
   33e8a:	f00e fd1b 	bl	428c4 <printk>
   33e8e:	4040      	eors	r0, r0
   33e90:	f380 8811 	msr	BASEPRI, r0
   33e94:	f04f 0003 	mov.w	r0, #3
   33e98:	df02      	svc	2
   33e9a:	e7be      	b.n	33e1a <disable.constprop.0+0x96>
			mark = ull_disable_unmark(adv);
   33e9c:	4809      	ldr	r0, [pc, #36]	; (33ec4 <disable.constprop.0+0x140>)
   33e9e:	f7ff f9fb 	bl	33298 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   33ea2:	4284      	cmp	r4, r0
   33ea4:	d0ea      	beq.n	33e7c <disable.constprop.0+0xf8>
   33ea6:	4a08      	ldr	r2, [pc, #32]	; (33ec8 <disable.constprop.0+0x144>)
   33ea8:	4908      	ldr	r1, [pc, #32]	; (33ecc <disable.constprop.0+0x148>)
   33eaa:	4809      	ldr	r0, [pc, #36]	; (33ed0 <disable.constprop.0+0x14c>)
   33eac:	f640 230a 	movw	r3, #2570	; 0xa0a
   33eb0:	f00e fd08 	bl	428c4 <printk>
   33eb4:	4040      	eors	r0, r0
   33eb6:	f380 8811 	msr	BASEPRI, r0
   33eba:	f04f 0003 	mov.w	r0, #3
   33ebe:	df02      	svc	2
   33ec0:	e7dc      	b.n	33e7c <disable.constprop.0+0xf8>
   33ec2:	bf00      	nop
   33ec4:	20002560 	.word	0x20002560
   33ec8:	00049f88 	.word	0x00049f88
   33ecc:	0004a074 	.word	0x0004a074
   33ed0:	00049c68 	.word	0x00049c68
   33ed4:	00032709 	.word	0x00032709
   33ed8:	2000257c 	.word	0x2000257c
   33edc:	0004a080 	.word	0x0004a080

00033ee0 <adv_time_get.constprop.0.isra.0>:
static uint16_t adv_time_get(struct pdu_adv *pdu, struct pdu_adv *pdu_scan,
   33ee0:	b410      	push	{r4}
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   33ee2:	7804      	ldrb	r4, [r0, #0]
   33ee4:	f004 040f 	and.w	r4, r4, #15
				   rxtx_turn_us * (adv_chn_cnt - 1);
   33ee8:	1e53      	subs	r3, r2, #1
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   33eea:	2c02      	cmp	r4, #2
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   33eec:	b29b      	uxth	r3, r3
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   33eee:	d01f      	beq.n	33f30 <adv_time_get.constprop.0.isra.0+0x50>
			if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   33ef0:	2c01      	cmp	r4, #1
   33ef2:	d009      	beq.n	33f08 <adv_time_get.constprop.0.isra.0+0x28>
			BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
   33ef4:	3110      	adds	r1, #16
		const uint16_t scan_rsp_us =
   33ef6:	00c9      	lsls	r1, r1, #3
			} else if (pdu->type == PDU_ADV_TYPE_ADV_IND) {
   33ef8:	b18c      	cbz	r4, 33f1e <adv_time_get.constprop.0.isra.0+0x3e>
			} else if (pdu->type == PDU_ADV_TYPE_SCAN_IND) {
   33efa:	2c06      	cmp	r4, #6
   33efc:	d00f      	beq.n	33f1e <adv_time_get.constprop.0.isra.0+0x3e>
   33efe:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   33f02:	f44f 70f3 	mov.w	r0, #486	; 0x1e6
   33f06:	e003      	b.n	33f10 <adv_time_get.constprop.0.isra.0+0x30>
   33f08:	f44f 6287 	mov.w	r2, #1080	; 0x438
   33f0c:	f240 2016 	movw	r0, #534	; 0x216
			time_us += (BYTES2US(adv_size, PHY_1M) +
   33f10:	fb03 2300 	mla	r3, r3, r0, r2
   33f14:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   33f18:	4018      	ands	r0, r3
}
   33f1a:	bc10      	pop	{r4}
   33f1c:	4770      	bx	lr
				adv_size += pdu->len;
   33f1e:	7842      	ldrb	r2, [r0, #1]
   33f20:	3210      	adds	r2, #16
			time_us += (BYTES2US(adv_size, PHY_1M) +
   33f22:	00d2      	lsls	r2, r2, #3
   33f24:	f501 715c 	add.w	r1, r1, #880	; 0x370
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
   33f28:	f502 70b3 	add.w	r0, r2, #358	; 0x166
   33f2c:	440a      	add	r2, r1
   33f2e:	e7ef      	b.n	33f10 <adv_time_get.constprop.0.isra.0+0x30>
			adv_size += pdu->len;
   33f30:	7841      	ldrb	r1, [r0, #1]
}
   33f32:	bc10      	pop	{r4}
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   33f34:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   33f38:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   33f3c:	0058      	lsls	r0, r3, #1
   33f3e:	3110      	adds	r1, #16
   33f40:	f500 70c8 	add.w	r0, r0, #400	; 0x190
   33f44:	00cb      	lsls	r3, r1, #3
   33f46:	fb03 0202 	mla	r2, r3, r2, r0
   33f4a:	b290      	uxth	r0, r2
}
   33f4c:	4770      	bx	lr
   33f4e:	bf00      	nop

00033f50 <ticker_cb>:
{
   33f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33f54:	461d      	mov	r5, r3
   33f56:	b08a      	sub	sp, #40	; 0x28
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   33f58:	f64f 73ff 	movw	r3, #65535	; 0xffff
   33f5c:	429d      	cmp	r5, r3
{
   33f5e:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   33f62:	9c11      	ldr	r4, [sp, #68]	; 0x44
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   33f64:	d018      	beq.n	33f98 <ticker_cb+0x48>
	return ++hdr->ref;
   33f66:	7823      	ldrb	r3, [r4, #0]
   33f68:	3301      	adds	r3, #1
   33f6a:	b2db      	uxtb	r3, r3
   33f6c:	4607      	mov	r7, r0
   33f6e:	4616      	mov	r6, r2
   33f70:	7023      	strb	r3, [r4, #0]
		LL_ASSERT(ref);
   33f72:	2b00      	cmp	r3, #0
   33f74:	d061      	beq.n	3403a <ticker_cb+0xea>
		p.ticks_at_expire = ticks_at_expire;
   33f76:	4938      	ldr	r1, [pc, #224]	; (34058 <ticker_cb+0x108>)
		mfy.param = &p;
   33f78:	4b38      	ldr	r3, [pc, #224]	; (3405c <ticker_cb+0x10c>)
		p.lazy = lazy;
   33f7a:	810d      	strh	r5, [r1, #8]
	lll = &adv->lll;
   33f7c:	f104 001c 	add.w	r0, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   33f80:	2200      	movs	r2, #0
		p.param = lll;
   33f82:	60c8      	str	r0, [r1, #12]
		p.remainder = remainder;
   33f84:	e9c1 7600 	strd	r7, r6, [r1]
		p.force = force;
   33f88:	f881 800a 	strb.w	r8, [r1, #10]
		mfy.param = &p;
   33f8c:	6099      	str	r1, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   33f8e:	2001      	movs	r0, #1
   33f90:	4611      	mov	r1, r2
   33f92:	f7fb fdfd 	bl	2fb90 <mayfly_enqueue>
		LL_ASSERT(!ret);
   33f96:	b938      	cbnz	r0, 33fa8 <ticker_cb+0x58>
	if (!lll->is_hdcd)
   33f98:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   33f9c:	f010 0501 	ands.w	r5, r0, #1
   33fa0:	d014      	beq.n	33fcc <ticker_cb+0x7c>
}
   33fa2:	b00a      	add	sp, #40	; 0x28
   33fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
   33fa8:	4a2d      	ldr	r2, [pc, #180]	; (34060 <ticker_cb+0x110>)
   33faa:	492e      	ldr	r1, [pc, #184]	; (34064 <ticker_cb+0x114>)
   33fac:	482e      	ldr	r0, [pc, #184]	; (34068 <ticker_cb+0x118>)
   33fae:	f640 0392 	movw	r3, #2194	; 0x892
   33fb2:	f00e fc87 	bl	428c4 <printk>
   33fb6:	4040      	eors	r0, r0
   33fb8:	f380 8811 	msr	BASEPRI, r0
   33fbc:	f04f 0003 	mov.w	r0, #3
   33fc0:	df02      	svc	2
	if (!lll->is_hdcd)
   33fc2:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   33fc6:	f010 0501 	ands.w	r5, r0, #1
   33fca:	d1ea      	bne.n	33fa2 <ticker_cb+0x52>
	lll_rand_isr_get(&random_delay, sizeof(random_delay));
   33fcc:	2104      	movs	r1, #4
   33fce:	a809      	add	r0, sp, #36	; 0x24
   33fd0:	f006 fb56 	bl	3a680 <lll_rand_isr_get>
	random_delay %= ticks_delay_window;
   33fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   33fd6:	4a25      	ldr	r2, [pc, #148]	; (3406c <ticker_cb+0x11c>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   33fd8:	9406      	str	r4, [sp, #24]
	random_delay %= ticks_delay_window;
   33fda:	fba2 1203 	umull	r1, r2, r2, r3
   33fde:	1a99      	subs	r1, r3, r2
   33fe0:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   33fe4:	0a12      	lsrs	r2, r2, #8
   33fe6:	f240 1147 	movw	r1, #327	; 0x147
   33fea:	fb01 3312 	mls	r3, r1, r2, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   33fee:	4a20      	ldr	r2, [pc, #128]	; (34070 <ticker_cb+0x120>)
   33ff0:	4920      	ldr	r1, [pc, #128]	; (34074 <ticker_cb+0x124>)
   33ff2:	1aa2      	subs	r2, r4, r2
   33ff4:	fba1 1202 	umull	r1, r2, r1, r2
   33ff8:	0992      	lsrs	r2, r2, #6
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   33ffa:	491f      	ldr	r1, [pc, #124]	; (34078 <ticker_cb+0x128>)
   33ffc:	3202      	adds	r2, #2
	random_delay += (ticks_delay_window_offset + 1);
   33ffe:	3301      	adds	r3, #1
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   34000:	e9cd 5104 	strd	r5, r1, [sp, #16]
   34004:	e9cd 5502 	strd	r5, r5, [sp, #8]
   34008:	e9cd 5500 	strd	r5, r5, [sp]
   3400c:	b2d2      	uxtb	r2, r2
   3400e:	2101      	movs	r1, #1
   34010:	4628      	mov	r0, r5
	random_delay += (ticks_delay_window_offset + 1);
   34012:	9309      	str	r3, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   34014:	f7fc ffd0 	bl	30fb8 <ticker_update>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   34018:	f030 0302 	bics.w	r3, r0, #2
   3401c:	d0c1      	beq.n	33fa2 <ticker_cb+0x52>
   3401e:	4a10      	ldr	r2, [pc, #64]	; (34060 <ticker_cb+0x110>)
   34020:	4916      	ldr	r1, [pc, #88]	; (3407c <ticker_cb+0x12c>)
   34022:	4811      	ldr	r0, [pc, #68]	; (34068 <ticker_cb+0x118>)
   34024:	f240 732c 	movw	r3, #1836	; 0x72c
   34028:	f00e fc4c 	bl	428c4 <printk>
   3402c:	4040      	eors	r0, r0
   3402e:	f380 8811 	msr	BASEPRI, r0
   34032:	f04f 0003 	mov.w	r0, #3
   34036:	df02      	svc	2
}
   34038:	e7b3      	b.n	33fa2 <ticker_cb+0x52>
		LL_ASSERT(ref);
   3403a:	4a09      	ldr	r2, [pc, #36]	; (34060 <ticker_cb+0x110>)
   3403c:	4910      	ldr	r1, [pc, #64]	; (34080 <ticker_cb+0x130>)
   3403e:	480a      	ldr	r0, [pc, #40]	; (34068 <ticker_cb+0x118>)
   34040:	f640 0385 	movw	r3, #2181	; 0x885
   34044:	f00e fc3e 	bl	428c4 <printk>
   34048:	4040      	eors	r0, r0
   3404a:	f380 8811 	msr	BASEPRI, r0
   3404e:	f04f 0003 	mov.w	r0, #3
   34052:	df02      	svc	2
   34054:	e78f      	b.n	33f76 <ticker_cb+0x26>
   34056:	bf00      	nop
   34058:	20002534 	.word	0x20002534
   3405c:	200006a8 	.word	0x200006a8
   34060:	00049f88 	.word	0x00049f88
   34064:	00049f00 	.word	0x00049f00
   34068:	00049c68 	.word	0x00049c68
   3406c:	90d4f121 	.word	0x90d4f121
   34070:	20002560 	.word	0x20002560
   34074:	8d3dcb09 	.word	0x8d3dcb09
   34078:	00033c75 	.word	0x00033c75
   3407c:	00049fd4 	.word	0x00049fd4
   34080:	0004a098 	.word	0x0004a098

00034084 <ll_adv_params_set>:
{
   34084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!adv || adv->is_enabled) {
   34088:	4c6e      	ldr	r4, [pc, #440]	; (34244 <ll_adv_params_set+0x1c0>)
{
   3408a:	461f      	mov	r7, r3
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   3408c:	4b6e      	ldr	r3, [pc, #440]	; (34248 <ll_adv_params_set+0x1c4>)
	if (!adv || adv->is_enabled) {
   3408e:	f894 606a 	ldrb.w	r6, [r4, #106]	; 0x6a
{
   34092:	4680      	mov	r8, r0
   34094:	468e      	mov	lr, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   34096:	e893 0003 	ldmia.w	r3, {r0, r1}
{
   3409a:	b082      	sub	sp, #8
	if (!adv || adv->is_enabled) {
   3409c:	f016 0601 	ands.w	r6, r6, #1
{
   340a0:	4615      	mov	r5, r2
   340a2:	f89d c02c 	ldrb.w	ip, [sp, #44]	; 0x2c
   340a6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   340aa:	9000      	str	r0, [sp, #0]
   340ac:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
   340b0:	f040 808a 	bne.w	341c8 <ll_adv_params_set+0x144>
	adv->lll.chan_map = chan_map;
   340b4:	f00c 0c07 	and.w	ip, ip, #7
   340b8:	f002 0203 	and.w	r2, r2, #3
   340bc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   340c0:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   340c4:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
		adv->interval = 0;
   340c8:	f1be 0f01 	cmp.w	lr, #1
   340cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   340d0:	bf08      	it	eq
   340d2:	f04f 0800 	moveq.w	r8, #0
	pdu->type = pdu_adv_type[adv_type];
   340d6:	f10e 0308 	add.w	r3, lr, #8
   340da:	f8a4 8068 	strh.w	r8, [r4, #104]	; 0x68
   340de:	eb0d 0e03 	add.w	lr, sp, r3
   340e2:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
	adv->lll.chan_map = chan_map;
   340e6:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
	pdu_type_prev = pdu->type;
   340e8:	f898 9000 	ldrb.w	r9, [r8]
	pdu->type = pdu_adv_type[adv_type];
   340ec:	f81e 3c08 	ldrb.w	r3, [lr, #-8]
	adv->lll.chan_map = chan_map;
   340f0:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   340f4:	f013 0f0e 	tst.w	r3, #14
	adv->lll.chan_map = chan_map;
   340f8:	f022 0202 	bic.w	r2, r2, #2
	pdu->type = pdu_adv_type[adv_type];
   340fc:	f029 011f 	bic.w	r1, r9, #31
   34100:	f003 030f 	and.w	r3, r3, #15
	adv->lll.chan_map = chan_map;
   34104:	ea4c 0c02 	orr.w	ip, ip, r2
   34108:	ea43 0301 	orr.w	r3, r3, r1
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   3410c:	bf0c      	ite	eq
   3410e:	2201      	moveq	r2, #1
   34110:	2200      	movne	r2, #0
   34112:	f362 1345 	bfi	r3, r2, #5, #1
	adv->lll.chan_map = chan_map;
   34116:	f8a4 c024 	strh.w	ip, [r4, #36]	; 0x24
	pdu_type_prev = pdu->type;
   3411a:	f888 3000 	strb.w	r3, [r8]
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   3411e:	f003 030f 	and.w	r3, r3, #15
   34122:	2b01      	cmp	r3, #1
	pdu_type_prev = pdu->type;
   34124:	f009 090f 	and.w	r9, r9, #15
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   34128:	d045      	beq.n	341b6 <ll_adv_params_set+0x132>
	adv->own_addr_type = own_addr_type;
   3412a:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   3412e:	f365 0342 	bfi	r3, r5, #1, #2
   34132:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   34136:	b2da      	uxtb	r2, r3
   34138:	075b      	lsls	r3, r3, #29
   3413a:	d508      	bpl.n	3414e <ll_adv_params_set+0xca>
		adv->peer_addr_type = direct_addr_type;
   3413c:	f367 02c3 	bfi	r2, r7, #3, #1
   34140:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
		memcpy(&adv->peer_addr, direct_addr, BDADDR_SIZE);
   34144:	4841      	ldr	r0, [pc, #260]	; (3424c <ll_adv_params_set+0x1c8>)
   34146:	990a      	ldr	r1, [sp, #40]	; 0x28
   34148:	2206      	movs	r2, #6
   3414a:	f010 fcba 	bl	44ac2 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   3414e:	f898 3000 	ldrb.w	r3, [r8]
   34152:	f003 020f 	and.w	r2, r3, #15
   34156:	2a01      	cmp	r2, #1
		pdu->tx_addr = own_addr_type & 0x1;
   34158:	f005 0a01 	and.w	sl, r5, #1
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   3415c:	d039      	beq.n	341d2 <ll_adv_params_set+0x14e>
	} else if (pdu->len == 0) {
   3415e:	f898 2001 	ldrb.w	r2, [r8, #1]
   34162:	b1f2      	cbz	r2, 341a2 <ll_adv_params_set+0x11e>
		if (((pdu_type_prev == PDU_ADV_TYPE_DIRECT_IND) ||
   34164:	f1b9 0f01 	cmp.w	r9, #1
   34168:	d04e      	beq.n	34208 <ll_adv_params_set+0x184>
		pdu->tx_addr = own_addr_type & 0x1;
   3416a:	f898 3000 	ldrb.w	r3, [r8]
   3416e:	f36a 1386 	bfi	r3, sl, #6, #1
		pdu->rx_addr = 0;
   34172:	f36f 13c7 	bfc	r3, #7, #1
   34176:	f888 3000 	strb.w	r3, [r8]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   3417a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   3417e:	61e4      	str	r4, [r4, #28]
   34180:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   34184:	01ad      	lsls	r5, r5, #6
   34186:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   34188:	f005 0540 	and.w	r5, r5, #64	; 0x40
		if (pdu->len == 0) {
   3418c:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   3418e:	f045 0504 	orr.w	r5, r5, #4
   34192:	701d      	strb	r5, [r3, #0]
		if (pdu->len == 0) {
   34194:	b90a      	cbnz	r2, 3419a <ll_adv_params_set+0x116>
			pdu->len = BDADDR_SIZE;
   34196:	2206      	movs	r2, #6
   34198:	705a      	strb	r2, [r3, #1]
}
   3419a:	4630      	mov	r0, r6
   3419c:	b002      	add	sp, #8
   3419e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pdu->tx_addr = own_addr_type & 0x1;
   341a2:	f36a 1386 	bfi	r3, sl, #6, #1
		pdu->rx_addr = 0;
   341a6:	f362 13c7 	bfi	r3, r2, #7, #1
   341aa:	f888 3000 	strb.w	r3, [r8]
		pdu->len = BDADDR_SIZE;
   341ae:	2306      	movs	r3, #6
   341b0:	f888 3001 	strb.w	r3, [r8, #1]
   341b4:	e7e1      	b.n	3417a <ll_adv_params_set+0xf6>
	    (pdu_type_prev != PDU_ADV_TYPE_DIRECT_IND) &&
   341b6:	f1b9 0f01 	cmp.w	r9, #1
   341ba:	d0b6      	beq.n	3412a <ll_adv_params_set+0xa6>
		if (pdu->len == 0U) {
   341bc:	f898 2001 	ldrb.w	r2, [r8, #1]
   341c0:	b9b2      	cbnz	r2, 341f0 <ll_adv_params_set+0x16c>
			adv->ad_data_backup.len = 0U;
   341c2:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
   341c6:	e7b0      	b.n	3412a <ll_adv_params_set+0xa6>
		return BT_HCI_ERR_CMD_DISALLOWED;
   341c8:	260c      	movs	r6, #12
}
   341ca:	4630      	mov	r0, r6
   341cc:	b002      	add	sp, #8
   341ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pdu->rx_addr = direct_addr_type;
   341d2:	4640      	mov	r0, r8
		pdu->tx_addr = own_addr_type & 0x1;
   341d4:	f36a 1386 	bfi	r3, sl, #6, #1
		pdu->rx_addr = direct_addr_type;
   341d8:	f367 13c7 	bfi	r3, r7, #7, #1
   341dc:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   341e0:	990a      	ldr	r1, [sp, #40]	; 0x28
   341e2:	2206      	movs	r2, #6
   341e4:	f010 fc6d 	bl	44ac2 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   341e8:	230c      	movs	r3, #12
   341ea:	f888 3001 	strb.w	r3, [r8, #1]
   341ee:	e7c4      	b.n	3417a <ll_adv_params_set+0xf6>
			LL_ASSERT(pdu->len >=
   341f0:	2a05      	cmp	r2, #5
   341f2:	d916      	bls.n	34222 <ll_adv_params_set+0x19e>
			adv->ad_data_backup.len = pdu->len -
   341f4:	3a06      	subs	r2, #6
   341f6:	b2d2      	uxtb	r2, r2
   341f8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
   341fc:	f108 0108 	add.w	r1, r8, #8
   34200:	4813      	ldr	r0, [pc, #76]	; (34250 <ll_adv_params_set+0x1cc>)
   34202:	f010 fc5e 	bl	44ac2 <memcpy>
   34206:	e790      	b.n	3412a <ll_adv_params_set+0xa6>
			memcpy(pdu->adv_ind.data, adv->ad_data_backup.data,
   34208:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   3420c:	4910      	ldr	r1, [pc, #64]	; (34250 <ll_adv_params_set+0x1cc>)
   3420e:	f108 0008 	add.w	r0, r8, #8
   34212:	f010 fc56 	bl	44ac2 <memcpy>
			pdu->len = offsetof(struct pdu_adv_adv_ind, data) +
   34216:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   3421a:	3306      	adds	r3, #6
   3421c:	f888 3001 	strb.w	r3, [r8, #1]
   34220:	e7a3      	b.n	3416a <ll_adv_params_set+0xe6>
			LL_ASSERT(pdu->len >=
   34222:	4a0c      	ldr	r2, [pc, #48]	; (34254 <ll_adv_params_set+0x1d0>)
   34224:	490c      	ldr	r1, [pc, #48]	; (34258 <ll_adv_params_set+0x1d4>)
   34226:	480d      	ldr	r0, [pc, #52]	; (3425c <ll_adv_params_set+0x1d8>)
   34228:	f44f 73ce 	mov.w	r3, #412	; 0x19c
   3422c:	f00e fb4a 	bl	428c4 <printk>
   34230:	4040      	eors	r0, r0
   34232:	f380 8811 	msr	BASEPRI, r0
   34236:	f04f 0003 	mov.w	r0, #3
   3423a:	df02      	svc	2
			adv->ad_data_backup.len = pdu->len -
   3423c:	f898 2001 	ldrb.w	r2, [r8, #1]
   34240:	e7d8      	b.n	341f4 <ll_adv_params_set+0x170>
   34242:	bf00      	nop
   34244:	20002560 	.word	0x20002560
   34248:	00049410 	.word	0x00049410
   3424c:	200025cb 	.word	0x200025cb
   34250:	200025a1 	.word	0x200025a1
   34254:	00049f88 	.word	0x00049f88
   34258:	0004a09c 	.word	0x0004a09c
   3425c:	00049c68 	.word	0x00049c68

00034260 <ull_adv_init>:
{
   34260:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   34262:	4c06      	ldr	r4, [pc, #24]	; (3427c <ull_adv_init+0x1c>)
   34264:	4620      	mov	r0, r4
   34266:	f006 fe3b 	bl	3aee0 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   3426a:	f104 000c 	add.w	r0, r4, #12
   3426e:	f006 fe37 	bl	3aee0 <lll_adv_data_init>
	init_set(&ll_adv[0]);
   34272:	f7ff fd1b 	bl	33cac <init_set.constprop.0>
}
   34276:	2000      	movs	r0, #0
   34278:	bd10      	pop	{r4, pc}
   3427a:	bf00      	nop
   3427c:	20002588 	.word	0x20002588

00034280 <ull_adv_reset>:
{
   34280:	b508      	push	{r3, lr}
		(void)disable(handle);
   34282:	f7ff fd7f 	bl	33d84 <disable.constprop.0>
}
   34286:	2000      	movs	r0, #0
   34288:	bd08      	pop	{r3, pc}
   3428a:	bf00      	nop

0003428c <ull_adv_reset_finalize>:
{
   3428c:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&lll->adv_data);
   3428e:	4c09      	ldr	r4, [pc, #36]	; (342b4 <ull_adv_reset_finalize+0x28>)
		lll_adv_data_reset(&lll->scan_rsp);
   34290:	f104 050c 	add.w	r5, r4, #12
		lll_adv_data_reset(&lll->adv_data);
   34294:	4620      	mov	r0, r4
   34296:	f006 fe33 	bl	3af00 <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
   3429a:	4628      	mov	r0, r5
   3429c:	f006 fe30 	bl	3af00 <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   342a0:	4620      	mov	r0, r4
   342a2:	f006 fe1d 	bl	3aee0 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   342a6:	4628      	mov	r0, r5
   342a8:	f006 fe1a 	bl	3aee0 <lll_adv_data_init>
	init_set(&ll_adv[0]);
   342ac:	f7ff fcfe 	bl	33cac <init_set.constprop.0>
}
   342b0:	2000      	movs	r0, #0
   342b2:	bd38      	pop	{r3, r4, r5, pc}
   342b4:	20002588 	.word	0x20002588

000342b8 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   342b8:	4a03      	ldr	r2, [pc, #12]	; (342c8 <ull_adv_handle_get+0x10>)
   342ba:	4b04      	ldr	r3, [pc, #16]	; (342cc <ull_adv_handle_get+0x14>)
   342bc:	1a80      	subs	r0, r0, r2
   342be:	fba3 3000 	umull	r3, r0, r3, r0
}
   342c2:	f3c0 108f 	ubfx	r0, r0, #6, #16
   342c6:	4770      	bx	lr
   342c8:	20002560 	.word	0x20002560
   342cc:	8d3dcb09 	.word	0x8d3dcb09

000342d0 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   342d0:	4a04      	ldr	r2, [pc, #16]	; (342e4 <ull_adv_lll_handle_get+0x14>)
   342d2:	6800      	ldr	r0, [r0, #0]
   342d4:	4b04      	ldr	r3, [pc, #16]	; (342e8 <ull_adv_lll_handle_get+0x18>)
   342d6:	1a80      	subs	r0, r0, r2
   342d8:	fba3 3000 	umull	r3, r0, r3, r0
}
   342dc:	f3c0 108f 	ubfx	r0, r0, #6, #16
   342e0:	4770      	bx	lr
   342e2:	bf00      	nop
   342e4:	20002560 	.word	0x20002560
   342e8:	8d3dcb09 	.word	0x8d3dcb09

000342ec <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   342ec:	b938      	cbnz	r0, 342fe <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   342ee:	4805      	ldr	r0, [pc, #20]	; (34304 <ull_adv_is_enabled_get+0x18>)
   342f0:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
		return NULL;
   342f4:	f013 0f01 	tst.w	r3, #1
   342f8:	bf08      	it	eq
   342fa:	2000      	moveq	r0, #0
   342fc:	4770      	bx	lr
   342fe:	2000      	movs	r0, #0
}
   34300:	4770      	bx	lr
   34302:	bf00      	nop
   34304:	20002560 	.word	0x20002560

00034308 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
   34308:	b928      	cbnz	r0, 34316 <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
   3430a:	4b04      	ldr	r3, [pc, #16]	; (3431c <ull_adv_is_enabled+0x14>)
   3430c:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
   34310:	f000 0001 	and.w	r0, r0, #1
   34314:	4770      	bx	lr
   34316:	2000      	movs	r0, #0
}
   34318:	4770      	bx	lr
   3431a:	bf00      	nop
   3431c:	20002560 	.word	0x20002560

00034320 <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   34320:	b950      	cbnz	r0, 34338 <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
   34322:	4b06      	ldr	r3, [pc, #24]	; (3433c <ull_adv_filter_pol_get+0x1c>)
   34324:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
   34328:	f010 0001 	ands.w	r0, r0, #1
   3432c:	d005      	beq.n	3433a <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
   3432e:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
   34332:	f000 0003 	and.w	r0, r0, #3
   34336:	4770      	bx	lr
		return 0;
   34338:	2000      	movs	r0, #0
}
   3433a:	4770      	bx	lr
   3433c:	20002560 	.word	0x20002560

00034340 <ull_adv_pdu_update_addrs>:
{
   34340:	b570      	push	{r4, r5, r6, lr}
   34342:	4605      	mov	r5, r0
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
   34344:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
{
   34348:	460c      	mov	r4, r1
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
   3434a:	f005 fcd3 	bl	39cf4 <ull_filter_adva_get>
	if (!rpa || IS_ENABLED(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)) {
   3434e:	b310      	cbz	r0, 34396 <ull_adv_pdu_update_addrs+0x56>
		pdu->tx_addr = 1;
   34350:	7823      	ldrb	r3, [r4, #0]
   34352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   34356:	4601      	mov	r1, r0
   34358:	7023      	strb	r3, [r4, #0]
	return pdu->adv_ind.addr;
   3435a:	1ca6      	adds	r6, r4, #2
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   3435c:	2206      	movs	r2, #6
   3435e:	4630      	mov	r0, r6
   34360:	f010 fbaf 	bl	44ac2 <memcpy>
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   34364:	7823      	ldrb	r3, [r4, #0]
   34366:	f003 030f 	and.w	r3, r3, #15
   3436a:	2b01      	cmp	r3, #1
   3436c:	d001      	beq.n	34372 <ull_adv_pdu_update_addrs+0x32>
}
   3436e:	4630      	mov	r0, r6
   34370:	bd70      	pop	{r4, r5, r6, pc}
	rx_addr = ull_filter_tgta_get(adv->lll.rl_idx);
   34372:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
   34376:	f005 fceb 	bl	39d50 <ull_filter_tgta_get>
	if (rx_addr) {
   3437a:	4601      	mov	r1, r0
   3437c:	2800      	cmp	r0, #0
   3437e:	d0f6      	beq.n	3436e <ull_adv_pdu_update_addrs+0x2e>
		pdu->rx_addr = 1;
   34380:	7823      	ldrb	r3, [r4, #0]
   34382:	4620      	mov	r0, r4
   34384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   34388:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(tgt_addr, rx_addr, BDADDR_SIZE);
   3438c:	2206      	movs	r2, #6
   3438e:	f010 fb98 	bl	44ac2 <memcpy>
}
   34392:	4630      	mov	r0, r6
   34394:	bd70      	pop	{r4, r5, r6, pc}
			own_id_addr = ll_addr_get(pdu->tx_addr);
   34396:	7820      	ldrb	r0, [r4, #0]
   34398:	f3c0 1080 	ubfx	r0, r0, #6, #1
   3439c:	f7fc fe88 	bl	310b0 <ll_addr_get>
   343a0:	4601      	mov	r1, r0
	if (rpa) {
   343a2:	e7da      	b.n	3435a <ull_adv_pdu_update_addrs+0x1a>

000343a4 <ull_adv_data_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   343a4:	291f      	cmp	r1, #31
   343a6:	d849      	bhi.n	3443c <ull_adv_data_set+0x98>
{
   343a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   343aa:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   343ae:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   343b2:	b083      	sub	sp, #12
   343b4:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   343b6:	7833      	ldrb	r3, [r6, #0]
   343b8:	f003 030f 	and.w	r3, r3, #15
   343bc:	2b01      	cmp	r3, #1
   343be:	460d      	mov	r5, r1
   343c0:	4604      	mov	r4, r0
   343c2:	4617      	mov	r7, r2
   343c4:	d03c      	beq.n	34440 <ull_adv_data_set+0x9c>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   343c6:	f10d 0107 	add.w	r1, sp, #7
   343ca:	3028      	adds	r0, #40	; 0x28
   343cc:	f006 fe1a 	bl	3b004 <lll_adv_pdu_alloc>
		pdu->chan_sel = prev->chan_sel;
   343d0:	4631      	mov	r1, r6
   343d2:	4606      	mov	r6, r0
   343d4:	f811 2b02 	ldrb.w	r2, [r1], #2
   343d8:	f3c2 1040 	ubfx	r0, r2, #5, #1
	pdu->type = prev->type;
   343dc:	f3c2 0303 	ubfx	r3, r2, #0, #4
   343e0:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	pdu->tx_addr = prev->tx_addr;
   343e4:	f3c2 1080 	ubfx	r0, r2, #6, #1
	pdu->type = prev->type;
   343e8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
   343ec:	f002 0280 	and.w	r2, r2, #128	; 0x80
   343f0:	4630      	mov	r0, r6
   343f2:	4313      	orrs	r3, r2
   343f4:	f800 3b02 	strb.w	r3, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   343f8:	2206      	movs	r2, #6
   343fa:	f010 fb62 	bl	44ac2 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   343fe:	462a      	mov	r2, r5
   34400:	4639      	mov	r1, r7
   34402:	f106 0008 	add.w	r0, r6, #8
	pdu->len = BDADDR_SIZE + len;
   34406:	3506      	adds	r5, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
   34408:	f010 fb5b 	bl	44ac2 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   3440c:	7075      	strb	r5, [r6, #1]
	if (adv->is_enabled) {
   3440e:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   34412:	07db      	lsls	r3, r3, #31
   34414:	d406      	bmi.n	34424 <ull_adv_data_set+0x80>
	pdu->last = idx;
   34416:	f89d 3007 	ldrb.w	r3, [sp, #7]
   3441a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
		return 0;
   3441e:	2000      	movs	r0, #0
}
   34420:	b003      	add	sp, #12
   34422:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   34424:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   34428:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		err = ull_adv_time_update(adv, pdu, pdu_scan);
   3442c:	4631      	mov	r1, r6
   3442e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   34430:	4620      	mov	r0, r4
   34432:	f7f2 fc2d 	bl	26c90 <ull_adv_time_update>
		if (err) {
   34436:	2800      	cmp	r0, #0
   34438:	d0ed      	beq.n	34416 <ull_adv_data_set+0x72>
   3443a:	e7f1      	b.n	34420 <ull_adv_data_set+0x7c>
		return BT_HCI_ERR_INVALID_PARAM;
   3443c:	2012      	movs	r0, #18
}
   3443e:	4770      	bx	lr
		adv->ad_data_backup.len = len;
   34440:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
		memcpy(adv->ad_data_backup.data, data, adv->ad_data_backup.len);
   34444:	460a      	mov	r2, r1
   34446:	3041      	adds	r0, #65	; 0x41
   34448:	4639      	mov	r1, r7
   3444a:	f010 fb3a 	bl	44ac2 <memcpy>
		return 0;
   3444e:	e7e6      	b.n	3441e <ull_adv_data_set+0x7a>

00034450 <ll_adv_data_set>:
{
   34450:	4603      	mov	r3, r0
   34452:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
   34454:	4801      	ldr	r0, [pc, #4]	; (3445c <ll_adv_data_set+0xc>)
   34456:	4619      	mov	r1, r3
   34458:	f7ff bfa4 	b.w	343a4 <ull_adv_data_set>
   3445c:	20002560 	.word	0x20002560

00034460 <ull_scan_rsp_set.part.0>:
uint8_t ull_scan_rsp_set(struct ll_adv_set *adv, uint8_t len,
   34460:	b5f0      	push	{r4, r5, r6, r7, lr}
   34462:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   34466:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   3446a:	b083      	sub	sp, #12
   3446c:	6b9d      	ldr	r5, [r3, #56]	; 0x38
   3446e:	460e      	mov	r6, r1
   34470:	4604      	mov	r4, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   34472:	f10d 0107 	add.w	r1, sp, #7
   34476:	3034      	adds	r0, #52	; 0x34
   34478:	4617      	mov	r7, r2
   3447a:	f006 fdc3 	bl	3b004 <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
   3447e:	4629      	mov	r1, r5
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   34480:	2206      	movs	r2, #6
	pdu->tx_addr = prev->tx_addr;
   34482:	f811 3b02 	ldrb.w	r3, [r1], #2
   34486:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   3448a:	019b      	lsls	r3, r3, #6
   3448c:	f043 0304 	orr.w	r3, r3, #4
   34490:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
   34492:	1db3      	adds	r3, r6, #6
   34494:	7043      	strb	r3, [r0, #1]
   34496:	4605      	mov	r5, r0
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   34498:	3002      	adds	r0, #2
   3449a:	f010 fb12 	bl	44ac2 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   3449e:	4632      	mov	r2, r6
   344a0:	4639      	mov	r1, r7
   344a2:	f105 0008 	add.w	r0, r5, #8
   344a6:	f010 fb0c 	bl	44ac2 <memcpy>
	if (adv->is_enabled) {
   344aa:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   344ae:	07da      	lsls	r2, r3, #31
   344b0:	d50b      	bpl.n	344ca <ull_scan_rsp_set.part.0+0x6a>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   344b2:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
   344b6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		if ((pdu_adv_scan->type == PDU_ADV_TYPE_ADV_IND) ||
   344ba:	2341      	movs	r3, #65	; 0x41
   344bc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   344be:	780a      	ldrb	r2, [r1, #0]
   344c0:	f002 020f 	and.w	r2, r2, #15
   344c4:	40d3      	lsrs	r3, r2
   344c6:	07db      	lsls	r3, r3, #31
   344c8:	d406      	bmi.n	344d8 <ull_scan_rsp_set.part.0+0x78>
	pdu->last = idx;
   344ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
   344ce:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return 0;
   344d2:	2000      	movs	r0, #0
}
   344d4:	b003      	add	sp, #12
   344d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = ull_adv_time_update(adv, pdu_adv_scan, pdu);
   344d8:	462a      	mov	r2, r5
   344da:	4620      	mov	r0, r4
   344dc:	f7f2 fbd8 	bl	26c90 <ull_adv_time_update>
			if (err) {
   344e0:	2800      	cmp	r0, #0
   344e2:	d0f2      	beq.n	344ca <ull_scan_rsp_set.part.0+0x6a>
   344e4:	e7f6      	b.n	344d4 <ull_scan_rsp_set.part.0+0x74>
   344e6:	bf00      	nop

000344e8 <ll_adv_scan_rsp_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   344e8:	281f      	cmp	r0, #31
{
   344ea:	4603      	mov	r3, r0
   344ec:	460a      	mov	r2, r1
	if (len > PDU_AC_DATA_SIZE_MAX) {
   344ee:	d803      	bhi.n	344f8 <ll_adv_scan_rsp_set+0x10>
   344f0:	4802      	ldr	r0, [pc, #8]	; (344fc <ll_adv_scan_rsp_set+0x14>)
   344f2:	4619      	mov	r1, r3
   344f4:	f7ff bfb4 	b.w	34460 <ull_scan_rsp_set.part.0>
}
   344f8:	2012      	movs	r0, #18
   344fa:	4770      	bx	lr
   344fc:	20002560 	.word	0x20002560

00034500 <init_reset>:
{
   34500:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   34502:	4b15      	ldr	r3, [pc, #84]	; (34558 <init_reset+0x58>)
   34504:	4815      	ldr	r0, [pc, #84]	; (3455c <init_reset+0x5c>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   34506:	4c16      	ldr	r4, [pc, #88]	; (34560 <init_reset+0x60>)
	mem_init(conn_pool, sizeof(struct ll_conn),
   34508:	2201      	movs	r2, #1
   3450a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   3450e:	f7fb fa35 	bl	2f97c <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_BUF_ACL_TX_COUNT,
   34512:	4b14      	ldr	r3, [pc, #80]	; (34564 <init_reset+0x64>)
   34514:	2203      	movs	r2, #3
   34516:	1d18      	adds	r0, r3, #4
   34518:	2124      	movs	r1, #36	; 0x24
   3451a:	f7fb fa2f 	bl	2f97c <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   3451e:	4b12      	ldr	r3, [pc, #72]	; (34568 <init_reset+0x68>)
   34520:	2204      	movs	r2, #4
   34522:	1898      	adds	r0, r3, r2
   34524:	212c      	movs	r1, #44	; 0x2c
   34526:	f7fb fa29 	bl	2f97c <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   3452a:	4b10      	ldr	r3, [pc, #64]	; (3456c <init_reset+0x6c>)
   3452c:	2207      	movs	r2, #7
   3452e:	1d18      	adds	r0, r3, #4
   34530:	2108      	movs	r1, #8
   34532:	f7fb fa23 	bl	2f97c <mem_init>
	default_phy_tx |= PHY_2M;
   34536:	490e      	ldr	r1, [pc, #56]	; (34570 <init_reset+0x70>)
	default_phy_rx |= PHY_2M;
   34538:	4a0e      	ldr	r2, [pc, #56]	; (34574 <init_reset+0x74>)
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   3453a:	480f      	ldr	r0, [pc, #60]	; (34578 <init_reset+0x78>)
	default_phy_tx |= PHY_2M;
   3453c:	2303      	movs	r3, #3
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   3453e:	f04f 0c1b 	mov.w	ip, #27
   34542:	f8a4 c000 	strh.w	ip, [r4]
	default_phy_tx |= PHY_2M;
   34546:	700b      	strb	r3, [r1, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   34548:	f44f 7ca4 	mov.w	ip, #328	; 0x148
	default_phy_rx |= PHY_2M;
   3454c:	7013      	strb	r3, [r2, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   3454e:	f8a0 c000 	strh.w	ip, [r0]
}
   34552:	2000      	movs	r0, #0
   34554:	bd10      	pop	{r4, pc}
   34556:	bf00      	nop
   34558:	200025f8 	.word	0x200025f8
   3455c:	200014e8 	.word	0x200014e8
   34560:	20003b0c 	.word	0x20003b0c
   34564:	200026ec 	.word	0x200026ec
   34568:	20002638 	.word	0x20002638
   3456c:	200025fc 	.word	0x200025fc
   34570:	20003c12 	.word	0x20003c12
   34574:	20003c11 	.word	0x20003c11
   34578:	20003b0a 	.word	0x20003b0a

0003457c <ctrl_tx_pause_enqueue>:
{
   3457c:	b538      	push	{r3, r4, r5, lr}
   3457e:	4604      	mov	r4, r0
		if (!conn->tx_ctrl) {
   34580:	e9d0 3071 	ldrd	r3, r0, [r0, #452]	; 0x1c4
{
   34584:	460d      	mov	r5, r1
	if (
   34586:	b353      	cbz	r3, 345de <ctrl_tx_pause_enqueue+0x62>
	    !conn->llcp_enc.pause_tx &&
   34588:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   3458c:	0789      	lsls	r1, r1, #30
   3458e:	d415      	bmi.n	345bc <ctrl_tx_pause_enqueue+0x40>
	    !conn->llcp_phy.pause_tx &&
   34590:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   34594:	07c9      	lsls	r1, r1, #31
   34596:	d411      	bmi.n	345bc <ctrl_tx_pause_enqueue+0x40>
		if (conn->tx_head == conn->tx_data) {
   34598:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   3459c:	428b      	cmp	r3, r1
   3459e:	d02f      	beq.n	34600 <ctrl_tx_pause_enqueue+0x84>
		} else if (!conn->tx_ctrl) {
   345a0:	2800      	cmp	r0, #0
   345a2:	d04d      	beq.n	34640 <ctrl_tx_pause_enqueue+0xc4>
			LL_ASSERT(!pause);
   345a4:	2a00      	cmp	r2, #0
   345a6:	d13d      	bne.n	34624 <ctrl_tx_pause_enqueue+0xa8>
	tx->next = conn->tx_ctrl_last->next;
   345a8:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   345ac:	681a      	ldr	r2, [r3, #0]
   345ae:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   345b0:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   345b2:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   345b4:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
   345b8:	b1bb      	cbz	r3, 345ea <ctrl_tx_pause_enqueue+0x6e>
}
   345ba:	bd38      	pop	{r3, r4, r5, pc}
		if (!conn->tx_ctrl) {
   345bc:	b1c0      	cbz	r0, 345f0 <ctrl_tx_pause_enqueue+0x74>
			LL_ASSERT(!pause);
   345be:	2a00      	cmp	r2, #0
   345c0:	d0f2      	beq.n	345a8 <ctrl_tx_pause_enqueue+0x2c>
   345c2:	4a27      	ldr	r2, [pc, #156]	; (34660 <ctrl_tx_pause_enqueue+0xe4>)
   345c4:	4927      	ldr	r1, [pc, #156]	; (34664 <ctrl_tx_pause_enqueue+0xe8>)
   345c6:	4828      	ldr	r0, [pc, #160]	; (34668 <ctrl_tx_pause_enqueue+0xec>)
   345c8:	f44f 6328 	mov.w	r3, #2688	; 0xa80
   345cc:	f00e f97a 	bl	428c4 <printk>
   345d0:	4040      	eors	r0, r0
   345d2:	f380 8811 	msr	BASEPRI, r0
   345d6:	f04f 0003 	mov.w	r0, #3
   345da:	df02      	svc	2
   345dc:	e7e4      	b.n	345a8 <ctrl_tx_pause_enqueue+0x2c>
		if (!conn->tx_ctrl) {
   345de:	2800      	cmp	r0, #0
   345e0:	d1ed      	bne.n	345be <ctrl_tx_pause_enqueue+0x42>
			tx->next = conn->tx_head;
   345e2:	6008      	str	r0, [r1, #0]
			conn->tx_head = tx;
   345e4:	f8c4 11c4 	str.w	r1, [r4, #452]	; 0x1c4
			if (!pause) {
   345e8:	b1ca      	cbz	r2, 3461e <ctrl_tx_pause_enqueue+0xa2>
		conn->tx_data_last = tx;
   345ea:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
}
   345ee:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
   345f0:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
   345f2:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
			if (!pause) {
   345f6:	2a00      	cmp	r2, #0
   345f8:	d1df      	bne.n	345ba <ctrl_tx_pause_enqueue+0x3e>
				conn->tx_ctrl = tx;
   345fa:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
}
   345fe:	bd38      	pop	{r3, r4, r5, pc}
			conn->tx_data = conn->tx_data->next;
   34600:	6819      	ldr	r1, [r3, #0]
   34602:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   34606:	2800      	cmp	r0, #0
   34608:	d1cc      	bne.n	345a4 <ctrl_tx_pause_enqueue+0x28>
			tx->next = conn->tx_head->next;
   3460a:	6819      	ldr	r1, [r3, #0]
   3460c:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   3460e:	601d      	str	r5, [r3, #0]
			if (!pause) {
   34610:	b90a      	cbnz	r2, 34616 <ctrl_tx_pause_enqueue+0x9a>
				conn->tx_ctrl = tx;
   34612:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
	if (!tx->next) {
   34616:	682b      	ldr	r3, [r5, #0]
   34618:	2b00      	cmp	r3, #0
   3461a:	d1ce      	bne.n	345ba <ctrl_tx_pause_enqueue+0x3e>
   3461c:	e7e5      	b.n	345ea <ctrl_tx_pause_enqueue+0x6e>
				conn->tx_ctrl = tx;
   3461e:	e9c4 1172 	strd	r1, r1, [r4, #456]	; 0x1c8
	if (!tx->next) {
   34622:	e7e2      	b.n	345ea <ctrl_tx_pause_enqueue+0x6e>
			LL_ASSERT(!pause);
   34624:	4a0e      	ldr	r2, [pc, #56]	; (34660 <ctrl_tx_pause_enqueue+0xe4>)
   34626:	490f      	ldr	r1, [pc, #60]	; (34664 <ctrl_tx_pause_enqueue+0xe8>)
   34628:	480f      	ldr	r0, [pc, #60]	; (34668 <ctrl_tx_pause_enqueue+0xec>)
   3462a:	f640 236e 	movw	r3, #2670	; 0xa6e
   3462e:	f00e f949 	bl	428c4 <printk>
   34632:	4040      	eors	r0, r0
   34634:	f380 8811 	msr	BASEPRI, r0
   34638:	f04f 0003 	mov.w	r0, #3
   3463c:	df02      	svc	2
	tx->next = conn->tx_ctrl_last->next;
   3463e:	e7b3      	b.n	345a8 <ctrl_tx_pause_enqueue+0x2c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   34640:	7919      	ldrb	r1, [r3, #4]
   34642:	f001 0103 	and.w	r1, r1, #3
   34646:	2903      	cmp	r1, #3
   34648:	d004      	beq.n	34654 <ctrl_tx_pause_enqueue+0xd8>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3464a:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
			LL_ASSERT(!pause);
   3464e:	2a00      	cmp	r2, #0
   34650:	d0aa      	beq.n	345a8 <ctrl_tx_pause_enqueue+0x2c>
   34652:	e7e7      	b.n	34624 <ctrl_tx_pause_enqueue+0xa8>
	    ((pdu_data_tx->llctrl.opcode !=
   34654:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   34656:	2903      	cmp	r1, #3
   34658:	d0d7      	beq.n	3460a <ctrl_tx_pause_enqueue+0x8e>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3465a:	290a      	cmp	r1, #10
   3465c:	d1f5      	bne.n	3464a <ctrl_tx_pause_enqueue+0xce>
   3465e:	e7d4      	b.n	3460a <ctrl_tx_pause_enqueue+0x8e>
   34660:	0004a0dc 	.word	0x0004a0dc
   34664:	0004a11c 	.word	0x0004a11c
   34668:	00049c68 	.word	0x00049c68

0003466c <tx_lll_flush>:
{
   3466c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = HDR_LLL2ULL(lll);
   34670:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   34674:	4934      	ldr	r1, [pc, #208]	; (34748 <tx_lll_flush+0xdc>)
{
   34676:	b083      	sub	sp, #12
   34678:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   3467a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   3467e:	4640      	mov	r0, r8
   34680:	f7fb f9e2 	bl	2fa48 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   34684:	f105 0648 	add.w	r6, r5, #72	; 0x48
	lll_conn_flush(handle, lll);
   34688:	4629      	mov	r1, r5
   3468a:	f007 f8d1 	bl	3b830 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   3468e:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   34690:	aa01      	add	r2, sp, #4
   34692:	4631      	mov	r1, r6
   34694:	f7fb fa18 	bl	2fac8 <memq_dequeue>
	while (link) {
   34698:	b328      	cbz	r0, 346e6 <tx_lll_flush+0x7a>
   3469a:	4c2c      	ldr	r4, [pc, #176]	; (3474c <tx_lll_flush+0xe0>)
		lll_tx->handle = LLL_HANDLE_INVALID;
   3469c:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   346a0:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   346a4:	78e2      	ldrb	r2, [r4, #3]
	if (last == count) {
   346a6:	f894 c001 	ldrb.w	ip, [r4, #1]
   346aa:	78a1      	ldrb	r1, [r4, #2]
	last = last + 1;
   346ac:	1c53      	adds	r3, r2, #1
   346ae:	b2db      	uxtb	r3, r3
		last = 0U;
   346b0:	459c      	cmp	ip, r3
   346b2:	bf08      	it	eq
   346b4:	2300      	moveq	r3, #0
	if (last == first) {
   346b6:	4299      	cmp	r1, r3
   346b8:	f894 c000 	ldrb.w	ip, [r4]
   346bc:	d033      	beq.n	34726 <tx_lll_flush+0xba>
		lll_tx->node = tx;
   346be:	9901      	ldr	r1, [sp, #4]
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   346c0:	fb12 f20c 	smulbb	r2, r2, ip
   346c4:	eb02 0c09 	add.w	ip, r2, r9
		lll_tx->handle = LLL_HANDLE_INVALID;
   346c8:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   346cc:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
   346ce:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   346d2:	6002      	str	r2, [r0, #0]
		tx->next = link;
   346d4:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   346d6:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
	*last = idx; /* Commit: Update write index */
   346d8:	70e3      	strb	r3, [r4, #3]
   346da:	aa01      	add	r2, sp, #4
   346dc:	4631      	mov	r1, r6
   346de:	f7fb f9f3 	bl	2fac8 <memq_dequeue>
	while (link) {
   346e2:	2800      	cmp	r0, #0
   346e4:	d1de      	bne.n	346a4 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   346e6:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
	rx = (void *)&conn->llcp_terminate.node_rx;
   346ea:	f508 74a2 	add.w	r4, r8, #324	; 0x144
	LL_ASSERT(rx->hdr.link);
   346ee:	b150      	cbz	r0, 34706 <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
   346f0:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   346f2:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   346f4:	f8c8 3144 	str.w	r3, [r8, #324]	; 0x144
	ull_rx_put(link, rx);
   346f8:	f7fe feb4 	bl	33464 <ull_rx_put>
	ull_rx_sched();
   346fc:	f7fe fec2 	bl	33484 <ull_rx_sched>
}
   34700:	b003      	add	sp, #12
   34702:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   34706:	4a12      	ldr	r2, [pc, #72]	; (34750 <tx_lll_flush+0xe4>)
   34708:	4912      	ldr	r1, [pc, #72]	; (34754 <tx_lll_flush+0xe8>)
   3470a:	4813      	ldr	r0, [pc, #76]	; (34758 <tx_lll_flush+0xec>)
   3470c:	f640 13da 	movw	r3, #2522	; 0x9da
   34710:	f00e f8d8 	bl	428c4 <printk>
   34714:	4040      	eors	r0, r0
   34716:	f380 8811 	msr	BASEPRI, r0
   3471a:	f04f 0003 	mov.w	r0, #3
   3471e:	df02      	svc	2
	link = rx->hdr.link;
   34720:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
   34724:	e7e4      	b.n	346f0 <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
   34726:	4a0a      	ldr	r2, [pc, #40]	; (34750 <tx_lll_flush+0xe4>)
   34728:	490c      	ldr	r1, [pc, #48]	; (3475c <tx_lll_flush+0xf0>)
   3472a:	480b      	ldr	r0, [pc, #44]	; (34758 <tx_lll_flush+0xec>)
   3472c:	f640 13c6 	movw	r3, #2502	; 0x9c6
   34730:	f00e f8c8 	bl	428c4 <printk>
   34734:	4040      	eors	r0, r0
   34736:	f380 8811 	msr	BASEPRI, r0
   3473a:	f04f 0003 	mov.w	r0, #3
   3473e:	df02      	svc	2
		lll_tx->handle = LLL_HANDLE_INVALID;
   34740:	2300      	movs	r3, #0
   34742:	801b      	strh	r3, [r3, #0]
   34744:	deff      	udf	#255	; 0xff
   34746:	bf00      	nop
   34748:	200014e8 	.word	0x200014e8
   3474c:	20000718 	.word	0x20000718
   34750:	0004a0dc 	.word	0x0004a0dc
   34754:	0004a12c 	.word	0x0004a12c
   34758:	00049c68 	.word	0x00049c68
   3475c:	0004a124 	.word	0x0004a124

00034760 <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
   34760:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
   34764:	f012 0202 	ands.w	r2, r2, #2
   34768:	d00a      	beq.n	34780 <ctrl_tx_sec_enqueue+0x20>
		if (!conn->tx_ctrl) {
   3476a:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
   3476e:	b1d3      	cbz	r3, 347a6 <ctrl_tx_sec_enqueue+0x46>
			tx->next = conn->tx_ctrl_last->next;
   34770:	f8d0 31cc 	ldr.w	r3, [r0, #460]	; 0x1cc
   34774:	681a      	ldr	r2, [r3, #0]
   34776:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   34778:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   3477a:	680b      	ldr	r3, [r1, #0]
   3477c:	b1d3      	cbz	r3, 347b4 <ctrl_tx_sec_enqueue+0x54>
   3477e:	4770      	bx	lr
		if (conn->tx_head) {
   34780:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   34784:	b1cb      	cbz	r3, 347ba <ctrl_tx_sec_enqueue+0x5a>
{
   34786:	b500      	push	{lr}
			if ((conn->llcp_req != conn->llcp_ack) &&
   34788:	f890 c0e5 	ldrb.w	ip, [r0, #229]	; 0xe5
   3478c:	f890 e0e4 	ldrb.w	lr, [r0, #228]	; 0xe4
   34790:	45e6      	cmp	lr, ip
   34792:	d004      	beq.n	3479e <ctrl_tx_sec_enqueue+0x3e>
   34794:	f890 c0e6 	ldrb.w	ip, [r0, #230]	; 0xe6
   34798:	f1bc 0f03 	cmp.w	ip, #3
   3479c:	d010      	beq.n	347c0 <ctrl_tx_sec_enqueue+0x60>
}
   3479e:	f85d eb04 	ldr.w	lr, [sp], #4
		ctrl_tx_pause_enqueue(conn, tx, pause);
   347a2:	f7ff beeb 	b.w	3457c <ctrl_tx_pause_enqueue>
			tx->next = conn->tx_head;
   347a6:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   347aa:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   347ac:	f8c0 11c4 	str.w	r1, [r0, #452]	; 0x1c4
		if (!tx->next) {
   347b0:	2b00      	cmp	r3, #0
   347b2:	d1e4      	bne.n	3477e <ctrl_tx_sec_enqueue+0x1e>
			conn->tx_data_last = tx;
   347b4:	f8c0 11d4 	str.w	r1, [r0, #468]	; 0x1d4
   347b8:	4770      	bx	lr
	bool pause = false;
   347ba:	461a      	mov	r2, r3
		ctrl_tx_pause_enqueue(conn, tx, pause);
   347bc:	f7ff bede 	b.w	3457c <ctrl_tx_pause_enqueue>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   347c0:	f893 c004 	ldrb.w	ip, [r3, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   347c4:	f00c 0c03 	and.w	ip, ip, #3
   347c8:	f1bc 0f03 	cmp.w	ip, #3
   347cc:	d1e7      	bne.n	3479e <ctrl_tx_sec_enqueue+0x3e>
			    ((pdu_data_tx->llctrl.opcode ==
   347ce:	79da      	ldrb	r2, [r3, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   347d0:	2a03      	cmp	r2, #3
   347d2:	d005      	beq.n	347e0 <ctrl_tx_sec_enqueue+0x80>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   347d4:	f1a2 020a 	sub.w	r2, r2, #10
   347d8:	fab2 f282 	clz	r2, r2
   347dc:	0952      	lsrs	r2, r2, #5
   347de:	e7de      	b.n	3479e <ctrl_tx_sec_enqueue+0x3e>
				pause = true;
   347e0:	2201      	movs	r2, #1
   347e2:	e7dc      	b.n	3479e <ctrl_tx_sec_enqueue+0x3e>

000347e4 <ticker_stop_op_cb>:
{
   347e4:	b510      	push	{r4, lr}
   347e6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   347e8:	b9b0      	cbnz	r0, 34818 <ticker_stop_op_cb+0x34>
	mfy.param = param;
   347ea:	4b12      	ldr	r3, [pc, #72]	; (34834 <ticker_stop_op_cb+0x50>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   347ec:	2200      	movs	r2, #0
   347ee:	2101      	movs	r1, #1
   347f0:	2002      	movs	r0, #2
	mfy.param = param;
   347f2:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   347f4:	f7fb f9cc 	bl	2fb90 <mayfly_enqueue>
	LL_ASSERT(!ret);
   347f8:	b900      	cbnz	r0, 347fc <ticker_stop_op_cb+0x18>
}
   347fa:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   347fc:	4a0e      	ldr	r2, [pc, #56]	; (34838 <ticker_stop_op_cb+0x54>)
   347fe:	490f      	ldr	r1, [pc, #60]	; (3483c <ticker_stop_op_cb+0x58>)
   34800:	480f      	ldr	r0, [pc, #60]	; (34840 <ticker_stop_op_cb+0x5c>)
   34802:	f44f 6318 	mov.w	r3, #2432	; 0x980
   34806:	f00e f85d 	bl	428c4 <printk>
   3480a:	4040      	eors	r0, r0
   3480c:	f380 8811 	msr	BASEPRI, r0
   34810:	f04f 0003 	mov.w	r0, #3
   34814:	df02      	svc	2
}
   34816:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   34818:	4a07      	ldr	r2, [pc, #28]	; (34838 <ticker_stop_op_cb+0x54>)
   3481a:	490a      	ldr	r1, [pc, #40]	; (34844 <ticker_stop_op_cb+0x60>)
   3481c:	4808      	ldr	r0, [pc, #32]	; (34840 <ticker_stop_op_cb+0x5c>)
   3481e:	f640 137a 	movw	r3, #2426	; 0x97a
   34822:	f00e f84f 	bl	428c4 <printk>
   34826:	4040      	eors	r0, r0
   34828:	f380 8811 	msr	BASEPRI, r0
   3482c:	f04f 0003 	mov.w	r0, #3
   34830:	df02      	svc	2
   34832:	e7da      	b.n	347ea <ticker_stop_op_cb+0x6>
   34834:	200006f8 	.word	0x200006f8
   34838:	0004a0dc 	.word	0x0004a0dc
   3483c:	00049f00 	.word	0x00049f00
   34840:	00049c68 	.word	0x00049c68
   34844:	0004a13c 	.word	0x0004a13c

00034848 <disabled_cb>:
{
   34848:	b508      	push	{r3, lr}
	mfy.param = param;
   3484a:	4b0b      	ldr	r3, [pc, #44]	; (34878 <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   3484c:	2200      	movs	r2, #0
	mfy.param = param;
   3484e:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   34850:	4611      	mov	r1, r2
   34852:	2001      	movs	r0, #1
   34854:	f7fb f99c 	bl	2fb90 <mayfly_enqueue>
	LL_ASSERT(!ret);
   34858:	b900      	cbnz	r0, 3485c <disabled_cb+0x14>
}
   3485a:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   3485c:	4a07      	ldr	r2, [pc, #28]	; (3487c <disabled_cb+0x34>)
   3485e:	4908      	ldr	r1, [pc, #32]	; (34880 <disabled_cb+0x38>)
   34860:	4808      	ldr	r0, [pc, #32]	; (34884 <disabled_cb+0x3c>)
   34862:	f640 13ac 	movw	r3, #2476	; 0x9ac
   34866:	f00e f82d 	bl	428c4 <printk>
   3486a:	4040      	eors	r0, r0
   3486c:	f380 8811 	msr	BASEPRI, r0
   34870:	f04f 0003 	mov.w	r0, #3
   34874:	df02      	svc	2
}
   34876:	bd08      	pop	{r3, pc}
   34878:	200006d8 	.word	0x200006d8
   3487c:	0004a0dc 	.word	0x0004a0dc
   34880:	00049f00 	.word	0x00049f00
   34884:	00049c68 	.word	0x00049c68

00034888 <conn_disable>:
{
   34888:	b538      	push	{r3, r4, r5, lr}
   3488a:	4604      	mov	r4, r0
	return hdr->ref;
   3488c:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
   34890:	b353      	cbz	r3, 348e8 <conn_disable+0x60>
		mfy.param = &conn->lll;
   34892:	4d17      	ldr	r5, [pc, #92]	; (348f0 <conn_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
   34894:	6963      	ldr	r3, [r4, #20]
		mfy.param = &conn->lll;
   34896:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   34898:	b16b      	cbz	r3, 348b6 <conn_disable+0x2e>
   3489a:	4a16      	ldr	r2, [pc, #88]	; (348f4 <conn_disable+0x6c>)
   3489c:	4916      	ldr	r1, [pc, #88]	; (348f8 <conn_disable+0x70>)
   3489e:	4817      	ldr	r0, [pc, #92]	; (348fc <conn_disable+0x74>)
   348a0:	f640 1395 	movw	r3, #2453	; 0x995
   348a4:	f00e f80e 	bl	428c4 <printk>
   348a8:	4040      	eors	r0, r0
   348aa:	f380 8811 	msr	BASEPRI, r0
   348ae:	f04f 0003 	mov.w	r0, #3
   348b2:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   348b4:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   348b6:	4912      	ldr	r1, [pc, #72]	; (34900 <conn_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   348b8:	4b0d      	ldr	r3, [pc, #52]	; (348f0 <conn_disable+0x68>)
   348ba:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   348bc:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   348c0:	4611      	mov	r1, r2
   348c2:	2001      	movs	r0, #1
   348c4:	f7fb f964 	bl	2fb90 <mayfly_enqueue>
		LL_ASSERT(!ret);
   348c8:	b900      	cbnz	r0, 348cc <conn_disable+0x44>
}
   348ca:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   348cc:	4a09      	ldr	r2, [pc, #36]	; (348f4 <conn_disable+0x6c>)
   348ce:	490d      	ldr	r1, [pc, #52]	; (34904 <conn_disable+0x7c>)
   348d0:	480a      	ldr	r0, [pc, #40]	; (348fc <conn_disable+0x74>)
   348d2:	f640 139c 	movw	r3, #2460	; 0x99c
   348d6:	f00d fff5 	bl	428c4 <printk>
   348da:	4040      	eors	r0, r0
   348dc:	f380 8811 	msr	BASEPRI, r0
   348e0:	f04f 0003 	mov.w	r0, #3
   348e4:	df02      	svc	2
}
   348e6:	bd38      	pop	{r3, r4, r5, pc}
   348e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&conn->lll);
   348ec:	f7ff bfac 	b.w	34848 <disabled_cb>
   348f0:	200006e8 	.word	0x200006e8
   348f4:	0004a0dc 	.word	0x0004a0dc
   348f8:	0004a01c 	.word	0x0004a01c
   348fc:	00049c68 	.word	0x00049c68
   34900:	00034849 	.word	0x00034849
   34904:	00049f00 	.word	0x00049f00

00034908 <conn_setup_adv_scan_disabled_cb>:
{
   34908:	b508      	push	{r3, lr}
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   3490a:	6883      	ldr	r3, [r0, #8]
   3490c:	685a      	ldr	r2, [r3, #4]
	switch (lll->role) {
   3490e:	7f53      	ldrb	r3, [r2, #29]
   34910:	09db      	lsrs	r3, r3, #7
   34912:	d10d      	bne.n	34930 <conn_setup_adv_scan_disabled_cb+0x28>
		LL_ASSERT(0);
   34914:	4a09      	ldr	r2, [pc, #36]	; (3493c <conn_setup_adv_scan_disabled_cb+0x34>)
   34916:	490a      	ldr	r1, [pc, #40]	; (34940 <conn_setup_adv_scan_disabled_cb+0x38>)
   34918:	480a      	ldr	r0, [pc, #40]	; (34944 <conn_setup_adv_scan_disabled_cb+0x3c>)
   3491a:	f640 03d5 	movw	r3, #2261	; 0x8d5
   3491e:	f00d ffd1 	bl	428c4 <printk>
   34922:	4040      	eors	r0, r0
   34924:	f380 8811 	msr	BASEPRI, r0
   34928:	f04f 0003 	mov.w	r0, #3
   3492c:	df02      	svc	2
}
   3492e:	bd08      	pop	{r3, pc}
		ull_periph_setup(rx, ftr, lll);
   34930:	4601      	mov	r1, r0
}
   34932:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		ull_periph_setup(rx, ftr, lll);
   34936:	3108      	adds	r1, #8
   34938:	f7f2 bcc6 	b.w	272c8 <ull_periph_setup>
   3493c:	0004a0dc 	.word	0x0004a0dc
   34940:	00049cc8 	.word	0x00049cc8
   34944:	00049c68 	.word	0x00049c68

00034948 <ticker_start_conn_op_cb>:
{
   34948:	b510      	push	{r4, lr}
   3494a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   3494c:	b990      	cbnz	r0, 34974 <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
   3494e:	4620      	mov	r0, r4
   34950:	f7fe fcc0 	bl	332d4 <ull_update_unmark>
	LL_ASSERT(p == param);
   34954:	4284      	cmp	r4, r0
   34956:	d00c      	beq.n	34972 <ticker_start_conn_op_cb+0x2a>
   34958:	4a0d      	ldr	r2, [pc, #52]	; (34990 <ticker_start_conn_op_cb+0x48>)
   3495a:	490e      	ldr	r1, [pc, #56]	; (34994 <ticker_start_conn_op_cb+0x4c>)
   3495c:	480e      	ldr	r0, [pc, #56]	; (34998 <ticker_start_conn_op_cb+0x50>)
   3495e:	f640 03b7 	movw	r3, #2231	; 0x8b7
   34962:	f00d ffaf 	bl	428c4 <printk>
   34966:	4040      	eors	r0, r0
   34968:	f380 8811 	msr	BASEPRI, r0
   3496c:	f04f 0003 	mov.w	r0, #3
   34970:	df02      	svc	2
}
   34972:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   34974:	4a06      	ldr	r2, [pc, #24]	; (34990 <ticker_start_conn_op_cb+0x48>)
   34976:	4909      	ldr	r1, [pc, #36]	; (3499c <ticker_start_conn_op_cb+0x54>)
   34978:	4807      	ldr	r0, [pc, #28]	; (34998 <ticker_start_conn_op_cb+0x50>)
   3497a:	f640 03b4 	movw	r3, #2228	; 0x8b4
   3497e:	f00d ffa1 	bl	428c4 <printk>
   34982:	4040      	eors	r0, r0
   34984:	f380 8811 	msr	BASEPRI, r0
   34988:	f04f 0003 	mov.w	r0, #3
   3498c:	df02      	svc	2
   3498e:	e7de      	b.n	3494e <ticker_start_conn_op_cb+0x6>
   34990:	0004a0dc 	.word	0x0004a0dc
   34994:	0004a148 	.word	0x0004a148
   34998:	00049c68 	.word	0x00049c68
   3499c:	0004a13c 	.word	0x0004a13c

000349a0 <ticker_stop_conn_op_cb>:
{
   349a0:	b510      	push	{r4, lr}
   349a2:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   349a4:	b990      	cbnz	r0, 349cc <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
   349a6:	4620      	mov	r0, r4
   349a8:	f7fe fc88 	bl	332bc <ull_update_mark>
	LL_ASSERT(p == param);
   349ac:	4284      	cmp	r4, r0
   349ae:	d00c      	beq.n	349ca <ticker_stop_conn_op_cb+0x2a>
   349b0:	4a0d      	ldr	r2, [pc, #52]	; (349e8 <ticker_stop_conn_op_cb+0x48>)
   349b2:	490e      	ldr	r1, [pc, #56]	; (349ec <ticker_stop_conn_op_cb+0x4c>)
   349b4:	480e      	ldr	r0, [pc, #56]	; (349f0 <ticker_stop_conn_op_cb+0x50>)
   349b6:	f640 03ad 	movw	r3, #2221	; 0x8ad
   349ba:	f00d ff83 	bl	428c4 <printk>
   349be:	4040      	eors	r0, r0
   349c0:	f380 8811 	msr	BASEPRI, r0
   349c4:	f04f 0003 	mov.w	r0, #3
   349c8:	df02      	svc	2
}
   349ca:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   349cc:	4a06      	ldr	r2, [pc, #24]	; (349e8 <ticker_stop_conn_op_cb+0x48>)
   349ce:	4909      	ldr	r1, [pc, #36]	; (349f4 <ticker_stop_conn_op_cb+0x54>)
   349d0:	4807      	ldr	r0, [pc, #28]	; (349f0 <ticker_stop_conn_op_cb+0x50>)
   349d2:	f640 03aa 	movw	r3, #2218	; 0x8aa
   349d6:	f00d ff75 	bl	428c4 <printk>
   349da:	4040      	eors	r0, r0
   349dc:	f380 8811 	msr	BASEPRI, r0
   349e0:	f04f 0003 	mov.w	r0, #3
   349e4:	df02      	svc	2
   349e6:	e7de      	b.n	349a6 <ticker_stop_conn_op_cb+0x6>
   349e8:	0004a0dc 	.word	0x0004a0dc
   349ec:	0004a148 	.word	0x0004a148
   349f0:	00049c68 	.word	0x00049c68
   349f4:	0004a13c 	.word	0x0004a13c

000349f8 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   349f8:	b900      	cbnz	r0, 349fc <ticker_update_conn_op_cb+0x4>
   349fa:	4770      	bx	lr
{
   349fc:	b510      	push	{r4, lr}
   349fe:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   34a00:	f7fe fc74 	bl	332ec <ull_update_mark_get>
   34a04:	4284      	cmp	r4, r0
   34a06:	d010      	beq.n	34a2a <ticker_update_conn_op_cb+0x32>
   34a08:	f7fe fc52 	bl	332b0 <ull_disable_mark_get>
   34a0c:	4284      	cmp	r4, r0
   34a0e:	d00c      	beq.n	34a2a <ticker_update_conn_op_cb+0x32>
   34a10:	4a06      	ldr	r2, [pc, #24]	; (34a2c <ticker_update_conn_op_cb+0x34>)
   34a12:	4907      	ldr	r1, [pc, #28]	; (34a30 <ticker_update_conn_op_cb+0x38>)
   34a14:	4807      	ldr	r0, [pc, #28]	; (34a34 <ticker_update_conn_op_cb+0x3c>)
   34a16:	f640 03a1 	movw	r3, #2209	; 0x8a1
   34a1a:	f00d ff53 	bl	428c4 <printk>
   34a1e:	4040      	eors	r0, r0
   34a20:	f380 8811 	msr	BASEPRI, r0
   34a24:	f04f 0003 	mov.w	r0, #3
   34a28:	df02      	svc	2
}
   34a2a:	bd10      	pop	{r4, pc}
   34a2c:	0004a0dc 	.word	0x0004a0dc
   34a30:	0004a154 	.word	0x0004a154
   34a34:	00049c68 	.word	0x00049c68

00034a38 <tx_ull_dequeue>:
{
   34a38:	b410      	push	{r4}
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   34a3a:	e9d0 2471 	ldrd	r2, r4, [r0, #452]	; 0x1c4
{
   34a3e:	4603      	mov	r3, r0
   34a40:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   34a42:	b164      	cbz	r4, 34a5e <tx_ull_dequeue+0x26>
	if (conn->tx_head == conn->tx_ctrl) {
   34a44:	4294      	cmp	r4, r2
   34a46:	d024      	beq.n	34a92 <tx_ull_dequeue+0x5a>
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   34a48:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
		if (conn->tx_head == conn->tx_data) {
   34a4c:	428a      	cmp	r2, r1
   34a4e:	d00b      	beq.n	34a68 <tx_ull_dequeue+0x30>
		conn->tx_head = conn->tx_head->next;
   34a50:	6812      	ldr	r2, [r2, #0]
   34a52:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   34a56:	2300      	movs	r3, #0
}
   34a58:	bc10      	pop	{r4}
		tx->next = tx;
   34a5a:	6003      	str	r3, [r0, #0]
}
   34a5c:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   34a5e:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
   34a62:	4291      	cmp	r1, r2
   34a64:	d104      	bne.n	34a70 <tx_ull_dequeue+0x38>
	if (conn->tx_head == conn->tx_ctrl) {
   34a66:	b1a2      	cbz	r2, 34a92 <tx_ull_dequeue+0x5a>
			conn->tx_data = conn->tx_data->next;
   34a68:	6809      	ldr	r1, [r1, #0]
   34a6a:	f8c3 11d0 	str.w	r1, [r3, #464]	; 0x1d0
   34a6e:	e7ef      	b.n	34a50 <tx_ull_dequeue+0x18>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   34a70:	7911      	ldrb	r1, [r2, #4]
   34a72:	f001 0103 	and.w	r1, r1, #3
   34a76:	2903      	cmp	r1, #3
   34a78:	d013      	beq.n	34aa2 <tx_ull_dequeue+0x6a>
		conn->tx_head = conn->tx_head->next;
   34a7a:	6812      	ldr	r2, [r2, #0]
   34a7c:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
			conn->tx_ctrl_last = NULL;
   34a80:	2200      	movs	r2, #0
   34a82:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
   34a86:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
		tx->next = tx;
   34a8a:	4603      	mov	r3, r0
}
   34a8c:	bc10      	pop	{r4}
		tx->next = tx;
   34a8e:	6003      	str	r3, [r0, #0]
}
   34a90:	4770      	bx	lr
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   34a92:	f8d3 11cc 	ldr.w	r1, [r3, #460]	; 0x1cc
		conn->tx_head = conn->tx_head->next;
   34a96:	6812      	ldr	r2, [r2, #0]
   34a98:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   34a9c:	42a1      	cmp	r1, r4
   34a9e:	d1f2      	bne.n	34a86 <tx_ull_dequeue+0x4e>
   34aa0:	e7ee      	b.n	34a80 <tx_ull_dequeue+0x48>
	    ((pdu_data_tx->llctrl.opcode !=
   34aa2:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   34aa4:	2903      	cmp	r1, #3
   34aa6:	d0d3      	beq.n	34a50 <tx_ull_dequeue+0x18>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   34aa8:	290a      	cmp	r1, #10
   34aaa:	d1e6      	bne.n	34a7a <tx_ull_dequeue+0x42>
   34aac:	e7d0      	b.n	34a50 <tx_ull_dequeue+0x18>
   34aae:	bf00      	nop

00034ab0 <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
   34ab0:	e92d 41e8 	stmdb	sp!, {r3, r5, r6, r7, r8, lr}
   34ab4:	4605      	mov	r5, r0
	if (conn->common.txn_lock) {
   34ab6:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
{
   34aba:	460e      	mov	r6, r1
	if (conn->common.txn_lock) {
   34abc:	0781      	lsls	r1, r0, #30
   34abe:	d433      	bmi.n	34b28 <reject_ext_ind_send+0x78>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   34ac0:	483b      	ldr	r0, [pc, #236]	; (34bb0 <reject_ext_ind_send+0x100>)
   34ac2:	4690      	mov	r8, r2
   34ac4:	461f      	mov	r7, r3
   34ac6:	f7fa ff89 	bl	2f9dc <mem_acquire>
	if (!tx) {
   34aca:	2800      	cmp	r0, #0
   34acc:	d051      	beq.n	34b72 <reject_ext_ind_send+0xc2>
	conn->common.txn_lock = 1U;
   34ace:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   34ad2:	f043 0302 	orr.w	r3, r3, #2
   34ad6:	f885 30d8 	strb.w	r3, [r5, #216]	; 0xd8
	pdu_ctrl_tx = (void *)tx->pdu;

	ull_pdu_data_init(pdu_ctrl_tx);

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   34ada:	2303      	movs	r3, #3
   34adc:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   34ade:	2311      	movs	r3, #17
	    conn->tx_head &&
   34ae0:	f8d5 21c4 	ldr.w	r2, [r5, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   34ae4:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   34ae6:	7903      	ldrb	r3, [r0, #4]
		if (!conn->tx_ctrl) {
   34ae8:	f8d5 11c8 	ldr.w	r1, [r5, #456]	; 0x1c8
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   34aec:	f880 8008 	strb.w	r8, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   34af0:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   34af4:	7247      	strb	r7, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   34af6:	7103      	strb	r3, [r0, #4]
	if (
   34af8:	b1da      	cbz	r2, 34b32 <reject_ext_ind_send+0x82>
	    !conn->llcp_enc.pause_tx &&
   34afa:	f895 3166 	ldrb.w	r3, [r5, #358]	; 0x166
	    conn->tx_head &&
   34afe:	079f      	lsls	r7, r3, #30
   34b00:	d42d      	bmi.n	34b5e <reject_ext_ind_send+0xae>
	    !conn->llcp_phy.pause_tx &&
   34b02:	f895 31bf 	ldrb.w	r3, [r5, #447]	; 0x1bf
   34b06:	07db      	lsls	r3, r3, #31
   34b08:	d429      	bmi.n	34b5e <reject_ext_ind_send+0xae>
		if (conn->tx_head == conn->tx_data) {
   34b0a:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
   34b0e:	429a      	cmp	r2, r3
   34b10:	d032      	beq.n	34b78 <reject_ext_ind_send+0xc8>
		} else if (!conn->tx_ctrl) {
   34b12:	2900      	cmp	r1, #0
   34b14:	d03e      	beq.n	34b94 <reject_ext_ind_send+0xe4>
	tx->next = conn->tx_ctrl_last->next;
   34b16:	f8d5 21cc 	ldr.w	r2, [r5, #460]	; 0x1cc
   34b1a:	6813      	ldr	r3, [r2, #0]
   34b1c:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   34b1e:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   34b20:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   34b22:	f8c5 01cc 	str.w	r0, [r5, #460]	; 0x1cc
	if (!tx->next) {
   34b26:	b1bb      	cbz	r3, 34b58 <reject_ext_ind_send+0xa8>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   34b28:	2301      	movs	r3, #1
   34b2a:	7133      	strb	r3, [r6, #4]
		*err = 0U;
   34b2c:	2000      	movs	r0, #0

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;

	return 0;
}
   34b2e:	e8bd 81e8 	ldmia.w	sp!, {r3, r5, r6, r7, r8, pc}
		if (!conn->tx_ctrl) {
   34b32:	b151      	cbz	r1, 34b4a <reject_ext_ind_send+0x9a>
	tx->next = conn->tx_ctrl_last->next;
   34b34:	f8d5 31cc 	ldr.w	r3, [r5, #460]	; 0x1cc
   34b38:	681a      	ldr	r2, [r3, #0]
   34b3a:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   34b3c:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   34b3e:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   34b40:	f8c5 01cc 	str.w	r0, [r5, #460]	; 0x1cc
	if (!tx->next) {
   34b44:	2b00      	cmp	r3, #0
   34b46:	d1ef      	bne.n	34b28 <reject_ext_ind_send+0x78>
   34b48:	e006      	b.n	34b58 <reject_ext_ind_send+0xa8>
			tx->next = conn->tx_head;
   34b4a:	6001      	str	r1, [r0, #0]
			conn->tx_head = tx;
   34b4c:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
   34b50:	f8c5 01c8 	str.w	r0, [r5, #456]	; 0x1c8
				conn->tx_ctrl_last = tx;
   34b54:	f8c5 01cc 	str.w	r0, [r5, #460]	; 0x1cc
		conn->tx_data_last = tx;
   34b58:	f8c5 01d4 	str.w	r0, [r5, #468]	; 0x1d4
   34b5c:	e7e4      	b.n	34b28 <reject_ext_ind_send+0x78>
		if (!conn->tx_ctrl) {
   34b5e:	2900      	cmp	r1, #0
   34b60:	d1e8      	bne.n	34b34 <reject_ext_ind_send+0x84>
			tx->next = conn->tx_head;
   34b62:	6002      	str	r2, [r0, #0]
			conn->tx_head = tx;
   34b64:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
   34b68:	f8c5 01c8 	str.w	r0, [r5, #456]	; 0x1c8
				conn->tx_ctrl_last = tx;
   34b6c:	f8c5 01cc 	str.w	r0, [r5, #460]	; 0x1cc
	if (!tx->next) {
   34b70:	e7da      	b.n	34b28 <reject_ext_ind_send+0x78>
		*err = -ENOBUFS;
   34b72:	f06f 0068 	mvn.w	r0, #104	; 0x68
   34b76:	e7da      	b.n	34b2e <reject_ext_ind_send+0x7e>
			conn->tx_data = conn->tx_data->next;
   34b78:	6813      	ldr	r3, [r2, #0]
   34b7a:	f8c5 31d0 	str.w	r3, [r5, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   34b7e:	2900      	cmp	r1, #0
   34b80:	d1c9      	bne.n	34b16 <reject_ext_ind_send+0x66>
			tx->next = conn->tx_head->next;
   34b82:	6813      	ldr	r3, [r2, #0]
   34b84:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   34b86:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
   34b88:	e9c5 0072 	strd	r0, r0, [r5, #456]	; 0x1c8
	if (!tx->next) {
   34b8c:	6803      	ldr	r3, [r0, #0]
   34b8e:	2b00      	cmp	r3, #0
   34b90:	d1ca      	bne.n	34b28 <reject_ext_ind_send+0x78>
   34b92:	e7e1      	b.n	34b58 <reject_ext_ind_send+0xa8>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   34b94:	7913      	ldrb	r3, [r2, #4]
   34b96:	f003 0303 	and.w	r3, r3, #3
   34b9a:	2b03      	cmp	r3, #3
   34b9c:	d002      	beq.n	34ba4 <reject_ext_ind_send+0xf4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   34b9e:	f8c5 21c8 	str.w	r2, [r5, #456]	; 0x1c8
   34ba2:	e7ba      	b.n	34b1a <reject_ext_ind_send+0x6a>
	    ((pdu_data_tx->llctrl.opcode !=
   34ba4:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   34ba6:	2b03      	cmp	r3, #3
   34ba8:	d0eb      	beq.n	34b82 <reject_ext_ind_send+0xd2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   34baa:	2b0a      	cmp	r3, #10
   34bac:	d1f7      	bne.n	34b9e <reject_ext_ind_send+0xee>
   34bae:	e7e8      	b.n	34b82 <reject_ext_ind_send+0xd2>
   34bb0:	20002638 	.word	0x20002638

00034bb4 <event_len_prep>:
{
   34bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp_length.state) {
   34bb6:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
   34bba:	f003 0207 	and.w	r2, r3, #7
{
   34bbe:	4604      	mov	r4, r0
	switch (conn->llcp_length.state) {
   34bc0:	2a06      	cmp	r2, #6
   34bc2:	f200 80e0 	bhi.w	34d86 <event_len_prep+0x1d2>
   34bc6:	e8df f002 	tbb	[pc, r2]
   34bca:	4504      	.short	0x4504
   34bcc:	46464545 	.word	0x46464545
   34bd0:	45          	.byte	0x45
   34bd1:	00          	.byte	0x00
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   34bd2:	4874      	ldr	r0, [pc, #464]	; (34da4 <event_len_prep+0x1f0>)
   34bd4:	f7fa ff02 	bl	2f9dc <mem_acquire>
		if (!tx) {
   34bd8:	2800      	cmp	r0, #0
   34bda:	d03b      	beq.n	34c54 <event_len_prep+0xa0>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   34bdc:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   34be0:	f8b4 21b2 	ldrh.w	r2, [r4, #434]	; 0x1b2
		conn->default_tx_time = conn->llcp_length.tx_time;
   34be4:	f8b4 51b6 	ldrh.w	r5, [r4, #438]	; 0x1b6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   34be8:	f8a4 20d2 	strh.w	r2, [r4, #210]	; 0xd2
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   34bec:	2301      	movs	r3, #1
   34bee:	f363 0102 	bfi	r1, r3, #0, #3
		conn->default_tx_time = conn->llcp_length.tx_time;
   34bf2:	f8a4 50d4 	strh.w	r5, [r4, #212]	; 0xd4
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   34bf6:	f884 11ae 	strb.w	r1, [r4, #430]	; 0x1ae
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   34bfa:	73c3      	strb	r3, [r0, #15]
		pdu_ctrl_tx->len =
   34bfc:	2309      	movs	r3, #9
   34bfe:	7143      	strb	r3, [r0, #5]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   34c00:	4969      	ldr	r1, [pc, #420]	; (34da8 <event_len_prep+0x1f4>)
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   34c02:	8182      	strh	r2, [r0, #12]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   34c04:	2314      	movs	r3, #20
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   34c06:	2248      	movs	r2, #72	; 0x48
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   34c08:	6081      	str	r1, [r0, #8]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   34c0a:	7382      	strb	r2, [r0, #14]
		if (!conn->tx_ctrl) {
   34c0c:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
	    conn->tx_head &&
   34c10:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   34c14:	71c3      	strb	r3, [r0, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   34c16:	7903      	ldrb	r3, [r0, #4]
   34c18:	f043 0303 	orr.w	r3, r3, #3
   34c1c:	7103      	strb	r3, [r0, #4]
	if (
   34c1e:	2a00      	cmp	r2, #0
   34c20:	d06b      	beq.n	34cfa <event_len_prep+0x146>
	    !conn->llcp_enc.pause_tx &&
   34c22:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   34c26:	079d      	lsls	r5, r3, #30
   34c28:	d403      	bmi.n	34c32 <event_len_prep+0x7e>
	    !conn->llcp_phy.pause_tx &&
   34c2a:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   34c2e:	07db      	lsls	r3, r3, #31
   34c30:	d57b      	bpl.n	34d2a <event_len_prep+0x176>
		if (!conn->tx_ctrl) {
   34c32:	2900      	cmp	r1, #0
   34c34:	f000 8087 	beq.w	34d46 <event_len_prep+0x192>
	tx->next = conn->tx_ctrl_last->next;
   34c38:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   34c3c:	681a      	ldr	r2, [r3, #0]
   34c3e:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   34c40:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   34c42:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   34c44:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   34c48:	2b00      	cmp	r3, #0
   34c4a:	d05d      	beq.n	34d08 <event_len_prep+0x154>
		conn->procedure_expire = conn->procedure_reload;
   34c4c:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   34c50:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
}
   34c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   34c56:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   34c5a:	f8b0 c1b0 	ldrh.w	ip, [r0, #432]	; 0x1b0
		lll->max_rx_time = conn->llcp_length.rx_time;
   34c5e:	f8b0 11b4 	ldrh.w	r1, [r0, #436]	; 0x1b4
		tx_octets = conn->llcp_length.tx_octets;
   34c62:	f8b0 71b2 	ldrh.w	r7, [r0, #434]	; 0x1b2
		uint16_t tx_time = conn->llcp_length.tx_time;
   34c66:	f8b0 61b6 	ldrh.w	r6, [r0, #438]	; 0x1b6
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   34c6a:	f8a0 c05a 	strh.w	ip, [r0, #90]	; 0x5a
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   34c6e:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
   34c70:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   34c74:	d024      	beq.n	34cc0 <event_len_prep+0x10c>
			conn->llcp_length.state =
   34c76:	2206      	movs	r2, #6
   34c78:	f362 0302 	bfi	r3, r2, #0, #3
   34c7c:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
		rx = conn->llcp_rx;
   34c80:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   34c84:	b335      	cbz	r5, 34cd4 <event_len_prep+0x120>
   34c86:	6828      	ldr	r0, [r5, #0]
   34c88:	b320      	cbz	r0, 34cd4 <event_len_prep+0x120>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   34c8a:	7f2b      	ldrb	r3, [r5, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   34c8c:	6842      	ldr	r2, [r0, #4]
   34c8e:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   34c92:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.handle = conn->lll.handle;
   34c96:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   34c98:	772b      	strb	r3, [r5, #28]
		pdu_ctrl_rx->len =
   34c9a:	2309      	movs	r3, #9
		rx->hdr.handle = conn->lll.handle;
   34c9c:	80ea      	strh	r2, [r5, #6]
		pdu_ctrl_rx->len =
   34c9e:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   34ca0:	2203      	movs	r2, #3
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   34ca2:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   34ca4:	8469      	strh	r1, [r5, #34]	; 0x22
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   34ca6:	f8a5 c020 	strh.w	ip, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   34caa:	84af      	strh	r7, [r5, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   34cac:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   34cae:	4629      	mov	r1, r5
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   34cb0:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   34cb2:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   34cb4:	f7fe fa1e 	bl	330f4 <ll_rx_put>
}
   34cb8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ll_rx_sched();
   34cbc:	f7fe ba24 	b.w	33108 <ll_rx_sched>
			if (!conn->llcp_length.cache.tx_octets) {
   34cc0:	f8b0 21b8 	ldrh.w	r2, [r0, #440]	; 0x1b8
   34cc4:	bb1a      	cbnz	r2, 34d0e <event_len_prep+0x15a>
				conn->llcp_length.ack = conn->llcp_length.req;
   34cc6:	f890 31ac 	ldrb.w	r3, [r0, #428]	; 0x1ac
				conn->procedure_expire = 0U;
   34cca:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
				conn->llcp_length.ack = conn->llcp_length.req;
   34cce:	f880 31ad 	strb.w	r3, [r0, #429]	; 0x1ad
				conn->procedure_expire = 0U;
   34cd2:	e7d5      	b.n	34c80 <event_len_prep+0xcc>
		LL_ASSERT(rx && rx->hdr.link);
   34cd4:	4a35      	ldr	r2, [pc, #212]	; (34dac <event_len_prep+0x1f8>)
   34cd6:	4936      	ldr	r1, [pc, #216]	; (34db0 <event_len_prep+0x1fc>)
   34cd8:	4836      	ldr	r0, [pc, #216]	; (34db4 <event_len_prep+0x200>)
   34cda:	f44f 5386 	mov.w	r3, #4288	; 0x10c0
   34cde:	f00d fdf1 	bl	428c4 <printk>
   34ce2:	4040      	eors	r0, r0
   34ce4:	f380 8811 	msr	BASEPRI, r0
   34ce8:	f04f 0003 	mov.w	r0, #3
   34cec:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   34cee:	6828      	ldr	r0, [r5, #0]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   34cf0:	f8b4 c05a 	ldrh.w	ip, [r4, #90]	; 0x5a
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   34cf4:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
   34cf8:	e7c7      	b.n	34c8a <event_len_prep+0xd6>
		if (!conn->tx_ctrl) {
   34cfa:	2900      	cmp	r1, #0
   34cfc:	d19c      	bne.n	34c38 <event_len_prep+0x84>
			tx->next = conn->tx_head;
   34cfe:	6001      	str	r1, [r0, #0]
				conn->tx_ctrl = tx;
   34d00:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   34d04:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
		conn->tx_data_last = tx;
   34d08:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   34d0c:	e79e      	b.n	34c4c <event_len_prep+0x98>
				conn->llcp_length.tx_octets =
   34d0e:	f8a0 21b2 	strh.w	r2, [r0, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
   34d12:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   34d14:	f362 0302 	bfi	r3, r2, #0, #3
   34d18:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
				conn->llcp_length.tx_time =
   34d1c:	f8b0 31ba 	ldrh.w	r3, [r0, #442]	; 0x1ba
				conn->llcp_length.cache.tx_octets = 0;
   34d20:	f8a0 21b8 	strh.w	r2, [r0, #440]	; 0x1b8
				conn->llcp_length.tx_time =
   34d24:	f8a0 31b6 	strh.w	r3, [r0, #438]	; 0x1b6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   34d28:	e7aa      	b.n	34c80 <event_len_prep+0xcc>
		if (conn->tx_head == conn->tx_data) {
   34d2a:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   34d2e:	429a      	cmp	r2, r3
   34d30:	d00f      	beq.n	34d52 <event_len_prep+0x19e>
		} else if (!conn->tx_ctrl) {
   34d32:	b1d1      	cbz	r1, 34d6a <event_len_prep+0x1b6>
	tx->next = conn->tx_ctrl_last->next;
   34d34:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   34d38:	6813      	ldr	r3, [r2, #0]
   34d3a:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   34d3c:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   34d3e:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   34d40:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
}
   34d44:	e780      	b.n	34c48 <event_len_prep+0x94>
			tx->next = conn->tx_head;
   34d46:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   34d48:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   34d4c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   34d50:	e77c      	b.n	34c4c <event_len_prep+0x98>
			conn->tx_data = conn->tx_data->next;
   34d52:	6813      	ldr	r3, [r2, #0]
   34d54:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   34d58:	2900      	cmp	r1, #0
   34d5a:	d1eb      	bne.n	34d34 <event_len_prep+0x180>
			tx->next = conn->tx_head->next;
   34d5c:	6813      	ldr	r3, [r2, #0]
   34d5e:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   34d60:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   34d62:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   34d64:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   34d68:	e76e      	b.n	34c48 <event_len_prep+0x94>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   34d6a:	7913      	ldrb	r3, [r2, #4]
   34d6c:	f003 0303 	and.w	r3, r3, #3
   34d70:	2b03      	cmp	r3, #3
   34d72:	d002      	beq.n	34d7a <event_len_prep+0x1c6>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   34d74:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
   34d78:	e7de      	b.n	34d38 <event_len_prep+0x184>
	    ((pdu_data_tx->llctrl.opcode !=
   34d7a:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   34d7c:	2b03      	cmp	r3, #3
   34d7e:	d0ed      	beq.n	34d5c <event_len_prep+0x1a8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   34d80:	2b0a      	cmp	r3, #10
   34d82:	d1f7      	bne.n	34d74 <event_len_prep+0x1c0>
   34d84:	e7ea      	b.n	34d5c <event_len_prep+0x1a8>
		LL_ASSERT(0);
   34d86:	4a09      	ldr	r2, [pc, #36]	; (34dac <event_len_prep+0x1f8>)
   34d88:	490b      	ldr	r1, [pc, #44]	; (34db8 <event_len_prep+0x204>)
   34d8a:	480a      	ldr	r0, [pc, #40]	; (34db4 <event_len_prep+0x200>)
   34d8c:	f241 03ea 	movw	r3, #4330	; 0x10ea
   34d90:	f00d fd98 	bl	428c4 <printk>
   34d94:	4040      	eors	r0, r0
   34d96:	f380 8811 	msr	BASEPRI, r0
   34d9a:	f04f 0003 	mov.w	r0, #3
   34d9e:	df02      	svc	2
}
   34da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34da2:	bf00      	nop
   34da4:	20002638 	.word	0x20002638
   34da8:	0148001b 	.word	0x0148001b
   34dac:	0004a0dc 	.word	0x0004a0dc
   34db0:	0004a1a8 	.word	0x0004a1a8
   34db4:	00049c68 	.word	0x00049c68
   34db8:	00049cc8 	.word	0x00049cc8

00034dbc <event_phy_upd_ind_prep>:
{
   34dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->llcp.phy_upd_ind.initiate) {
   34dc0:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
   34dc4:	f013 0601 	ands.w	r6, r3, #1
{
   34dc8:	4604      	mov	r4, r0
   34dca:	460d      	mov	r5, r1
	if (conn->llcp.phy_upd_ind.initiate) {
   34dcc:	f040 8098 	bne.w	34f00 <event_phy_upd_ind_prep+0x144>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
   34dd0:	f8b0 10ea 	ldrh.w	r1, [r0, #234]	; 0xea
   34dd4:	1a69      	subs	r1, r5, r1
   34dd6:	0409      	lsls	r1, r1, #16
   34dd8:	f100 8099 	bmi.w	34f0e <event_phy_upd_ind_prep+0x152>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   34ddc:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
   34de0:	2900      	cmp	r1, #0
   34de2:	f2c0 8134 	blt.w	3504e <event_phy_upd_ind_prep+0x292>
		rx = conn->llcp_rx;
   34de6:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
   34dea:	461a      	mov	r2, r3
			conn->llcp_ack = conn->llcp_req;
   34dec:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
   34df0:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
		old_tx = lll->phy_tx;
   34df4:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
		old_rx = lll->phy_rx;
   34df8:	f894 8061 	ldrb.w	r8, [r4, #97]	; 0x61
		uint16_t eff_tx_time = lll->max_tx_time;
   34dfc:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
		uint16_t eff_rx_time = lll->max_rx_time;
   34e00:	f8b4 705e 	ldrh.w	r7, [r4, #94]	; 0x5e
		if (conn->llcp.phy_upd_ind.tx) {
   34e04:	f013 0f1c 	tst.w	r3, #28
		old_rx = lll->phy_rx;
   34e08:	f008 0807 	and.w	r8, r8, #7
		old_tx = lll->phy_tx;
   34e0c:	f001 0907 	and.w	r9, r1, #7
		if (conn->llcp.phy_upd_ind.tx) {
   34e10:	d007      	beq.n	34e22 <event_phy_upd_ind_prep+0x66>
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
   34e12:	f3c3 0082 	ubfx	r0, r3, #2, #3
   34e16:	f360 0102 	bfi	r1, r0, #0, #3
   34e1a:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
   34e1e:	f44f 76a4 	mov.w	r6, #328	; 0x148
		if (conn->llcp.phy_upd_ind.rx) {
   34e22:	2b1f      	cmp	r3, #31
   34e24:	d875      	bhi.n	34f12 <event_phy_upd_ind_prep+0x156>
		LL_ASSERT(rx && rx->hdr.link);
   34e26:	2d00      	cmp	r5, #0
   34e28:	f000 80f1 	beq.w	3500e <event_phy_upd_ind_prep+0x252>
   34e2c:	6828      	ldr	r0, [r5, #0]
   34e2e:	2800      	cmp	r0, #0
   34e30:	f000 80ed 	beq.w	3500e <event_phy_upd_ind_prep+0x252>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   34e34:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		    (lll->phy_rx == old_rx)) {
   34e38:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
		conn->llcp_rx = rx->hdr.link->mem;
   34e3c:	f8d0 c004 	ldr.w	ip, [r0, #4]
   34e40:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   34e44:	0792      	lsls	r2, r2, #30
   34e46:	f3c3 0c02 	ubfx	ip, r3, #0, #3
		    (lll->phy_rx == old_rx)) {
   34e4a:	f3c1 0e02 	ubfx	lr, r1, #0, #3
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   34e4e:	f003 0307 	and.w	r3, r3, #7
		    (lll->phy_rx == old_rx)) {
   34e52:	f001 0107 	and.w	r1, r1, #7
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   34e56:	d402      	bmi.n	34e5e <event_phy_upd_ind_prep+0xa2>
   34e58:	4599      	cmp	r9, r3
   34e5a:	f000 80bb 	beq.w	34fd4 <event_phy_upd_ind_prep+0x218>
		rx->hdr.handle = lll->handle;
   34e5e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   34e60:	80eb      	strh	r3, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   34e62:	231c      	movs	r3, #28
   34e64:	712b      	strb	r3, [r5, #4]
		upd->status = 0U;
   34e66:	2300      	movs	r3, #0
		upd->tx = lll->phy_tx;
   34e68:	f885 c01d 	strb.w	ip, [r5, #29]
		upd->rx = lll->phy_rx;
   34e6c:	f885 e01e 	strb.w	lr, [r5, #30]
		upd->status = 0U;
   34e70:	772b      	strb	r3, [r5, #28]
		ll_rx_put(rx->hdr.link, rx);
   34e72:	4629      	mov	r1, r5
   34e74:	f7fe f93e 	bl	330f4 <ll_rx_put>
		rx = conn->llcp_rx;
   34e78:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   34e7c:	2d00      	cmp	r5, #0
   34e7e:	f000 80d7 	beq.w	35030 <event_phy_upd_ind_prep+0x274>
   34e82:	6828      	ldr	r0, [r5, #0]
   34e84:	2800      	cmp	r0, #0
   34e86:	f000 80d3 	beq.w	35030 <event_phy_upd_ind_prep+0x274>
		if ((eff_tx_time <= lll->max_tx_time) &&
   34e8a:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
		conn->llcp_rx = rx->hdr.link->mem;
   34e8e:	6842      	ldr	r2, [r0, #4]
   34e90:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		if ((eff_tx_time <= lll->max_tx_time) &&
   34e94:	42b3      	cmp	r3, r6
   34e96:	d30a      	bcc.n	34eae <event_phy_upd_ind_prep+0xf2>
   34e98:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   34e9c:	d807      	bhi.n	34eae <event_phy_upd_ind_prep+0xf2>
		    (eff_rx_time <= lll->max_rx_time) &&
   34e9e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		    (lll->max_tx_time <= max_tx_time) &&
   34ea2:	42bb      	cmp	r3, r7
   34ea4:	d303      	bcc.n	34eae <event_phy_upd_ind_prep+0xf2>
		    (eff_rx_time <= lll->max_rx_time) &&
   34ea6:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   34eaa:	f240 810a 	bls.w	350c2 <event_phy_upd_ind_prep+0x306>
		lll->max_tx_time = eff_tx_time;
   34eae:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
		lll->max_rx_time = eff_rx_time;
   34eb2:	f8a4 705e 	strh.w	r7, [r4, #94]	; 0x5e
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   34eb6:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
   34eb8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   34eba:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   34ebc:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   34ec0:	f04f 0c03 	mov.w	ip, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   34ec4:	2109      	movs	r1, #9
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   34ec6:	772b      	strb	r3, [r5, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   34ec8:	f885 c004 	strb.w	ip, [r5, #4]
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   34ecc:	7769      	strb	r1, [r5, #29]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   34ece:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
   34ed2:	f8b4 4058 	ldrh.w	r4, [r4, #88]	; 0x58
   34ed6:	2300      	movs	r3, #0
   34ed8:	461a      	mov	r2, r3
   34eda:	f361 030f 	bfi	r3, r1, #0, #16
   34ede:	f367 431f 	bfi	r3, r7, #16, #16
   34ee2:	f364 020f 	bfi	r2, r4, #0, #16
   34ee6:	f366 421f 	bfi	r2, r6, #16, #16
   34eea:	622b      	str	r3, [r5, #32]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   34eec:	2315      	movs	r3, #21
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   34eee:	626a      	str	r2, [r5, #36]	; 0x24
		ll_rx_put(rx->hdr.link, rx);
   34ef0:	4629      	mov	r1, r5
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   34ef2:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   34ef4:	f7fe f8fe 	bl	330f4 <ll_rx_put>
}
   34ef8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		ll_rx_sched();
   34efc:	f7fe b904 	b.w	33108 <ll_rx_sched>
		if (memq_peek(conn->lll.memq_tx.head, conn->lll.memq_tx.tail,
   34f00:	e9d0 0119 	ldrd	r0, r1, [r0, #100]	; 0x64
   34f04:	2200      	movs	r2, #0
   34f06:	f7fa fdd7 	bl	2fab8 <memq_peek>
   34f0a:	4606      	mov	r6, r0
   34f0c:	b158      	cbz	r0, 34f26 <event_phy_upd_ind_prep+0x16a>
}
   34f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
   34f12:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
   34f16:	095b      	lsrs	r3, r3, #5
   34f18:	f363 0102 	bfi	r1, r3, #0, #3
   34f1c:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
   34f20:	f44f 77a4 	mov.w	r7, #328	; 0x148
   34f24:	e77f      	b.n	34e26 <event_phy_upd_ind_prep+0x6a>
		rx = ll_pdu_rx_alloc_peek(2);
   34f26:	2002      	movs	r0, #2
   34f28:	f7fe f8f4 	bl	33114 <ll_pdu_rx_alloc_peek>
		if (!rx) {
   34f2c:	4680      	mov	r8, r0
   34f2e:	2800      	cmp	r0, #0
   34f30:	d0ed      	beq.n	34f0e <event_phy_upd_ind_prep+0x152>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   34f32:	489b      	ldr	r0, [pc, #620]	; (351a0 <event_phy_upd_ind_prep+0x3e4>)
   34f34:	f7fa fd52 	bl	2f9dc <mem_acquire>
		if (!tx) {
   34f38:	4607      	mov	r7, r0
   34f3a:	2800      	cmp	r0, #0
   34f3c:	d0e7      	beq.n	34f0e <event_phy_upd_ind_prep+0x152>
		conn->llcp.phy_upd_ind.initiate = 0U;
   34f3e:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   34f42:	f366 0300 	bfi	r3, r6, #0, #1
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
   34f46:	f3c3 1642 	ubfx	r6, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
   34f4a:	ea46 0693 	orr.w	r6, r6, r3, lsr #2
   34f4e:	f016 0607 	ands.w	r6, r6, #7
		conn->llcp.phy_upd_ind.initiate = 0U;
   34f52:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		if (!((conn->llcp.phy_upd_ind.tx |
   34f56:	b2db      	uxtb	r3, r3
   34f58:	f040 8095 	bne.w	35086 <event_phy_upd_ind_prep+0x2ca>
			conn->llcp_ack = conn->llcp_req;
   34f5c:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
			conn->llcp.phy_upd_ind.instant = 0U;
   34f60:	f8a4 60ea 	strh.w	r6, [r4, #234]	; 0xea
			if (conn->llcp.phy_upd_ind.cmd) {
   34f64:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
   34f66:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			if (conn->llcp.phy_upd_ind.cmd) {
   34f6a:	f100 80c9 	bmi.w	35100 <event_phy_upd_ind_prep+0x344>
   34f6e:	4633      	mov	r3, r6
   34f70:	4632      	mov	r2, r6
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   34f72:	727b      	strb	r3, [r7, #9]
		pdu_ctrl_tx->len =
   34f74:	2305      	movs	r3, #5
   34f76:	717b      	strb	r3, [r7, #5]
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   34f78:	723e      	strb	r6, [r7, #8]
		pdu_ctrl_tx->llctrl.opcode =
   34f7a:	2318      	movs	r3, #24
		if (!conn->tx_ctrl) {
   34f7c:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   34f80:	817a      	strh	r2, [r7, #10]
	    conn->tx_head &&
   34f82:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
		pdu_ctrl_tx->llctrl.opcode =
   34f86:	71fb      	strb	r3, [r7, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   34f88:	793b      	ldrb	r3, [r7, #4]
   34f8a:	f043 0303 	orr.w	r3, r3, #3
   34f8e:	713b      	strb	r3, [r7, #4]
	if (
   34f90:	2a00      	cmp	r2, #0
   34f92:	f000 80aa 	beq.w	350ea <event_phy_upd_ind_prep+0x32e>
	    !conn->llcp_enc.pause_tx &&
   34f96:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   34f9a:	079d      	lsls	r5, r3, #30
   34f9c:	f100 809a 	bmi.w	350d4 <event_phy_upd_ind_prep+0x318>
	    !conn->llcp_phy.pause_tx &&
   34fa0:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   34fa4:	07d8      	lsls	r0, r3, #31
   34fa6:	f100 8095 	bmi.w	350d4 <event_phy_upd_ind_prep+0x318>
		if (conn->tx_head == conn->tx_data) {
   34faa:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   34fae:	429a      	cmp	r2, r3
   34fb0:	f000 80da 	beq.w	35168 <event_phy_upd_ind_prep+0x3ac>
		} else if (!conn->tx_ctrl) {
   34fb4:	2900      	cmp	r1, #0
   34fb6:	f000 80e4 	beq.w	35182 <event_phy_upd_ind_prep+0x3c6>
	tx->next = conn->tx_ctrl_last->next;
   34fba:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   34fbe:	681a      	ldr	r2, [r3, #0]
   34fc0:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   34fc2:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   34fc4:	683b      	ldr	r3, [r7, #0]
	conn->tx_ctrl_last = tx;
   34fc6:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
	if (!tx->next) {
   34fca:	2b00      	cmp	r3, #0
   34fcc:	d19f      	bne.n	34f0e <event_phy_upd_ind_prep+0x152>
		conn->tx_data_last = tx;
   34fce:	f8c4 71d4 	str.w	r7, [r4, #468]	; 0x1d4
   34fd2:	e79c      	b.n	34f0e <event_phy_upd_ind_prep+0x152>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   34fd4:	4588      	cmp	r8, r1
   34fd6:	f47f af42 	bne.w	34e5e <event_phy_upd_ind_prep+0xa2>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   34fda:	2301      	movs	r3, #1
   34fdc:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   34fde:	4629      	mov	r1, r5
   34fe0:	f7fe f888 	bl	330f4 <ll_rx_put>
				rx = conn->llcp_rx;
   34fe4:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
				LL_ASSERT(rx && rx->hdr.link);
   34fe8:	2d00      	cmp	r5, #0
   34fea:	f000 80ae 	beq.w	3514a <event_phy_upd_ind_prep+0x38e>
   34fee:	6828      	ldr	r0, [r5, #0]
   34ff0:	2800      	cmp	r0, #0
   34ff2:	f000 80aa 	beq.w	3514a <event_phy_upd_ind_prep+0x38e>
				conn->llcp_rx = rx->hdr.link->mem;
   34ff6:	6842      	ldr	r2, [r0, #4]
   34ff8:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   34ffc:	2301      	movs	r3, #1
				ll_rx_put(rx->hdr.link, rx);
   34ffe:	4629      	mov	r1, r5
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   35000:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
   35002:	f7fe f877 	bl	330f4 <ll_rx_put>
}
   35006:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   3500a:	f7fe b87d 	b.w	33108 <ll_rx_sched>
		LL_ASSERT(rx && rx->hdr.link);
   3500e:	4a65      	ldr	r2, [pc, #404]	; (351a4 <event_phy_upd_ind_prep+0x3e8>)
   35010:	4965      	ldr	r1, [pc, #404]	; (351a8 <event_phy_upd_ind_prep+0x3ec>)
   35012:	4866      	ldr	r0, [pc, #408]	; (351ac <event_phy_upd_ind_prep+0x3f0>)
   35014:	f241 231a 	movw	r3, #4634	; 0x121a
   35018:	f00d fc54 	bl	428c4 <printk>
   3501c:	4040      	eors	r0, r0
   3501e:	f380 8811 	msr	BASEPRI, r0
   35022:	f04f 0003 	mov.w	r0, #3
   35026:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   35028:	6828      	ldr	r0, [r5, #0]
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   3502a:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   3502e:	e701      	b.n	34e34 <event_phy_upd_ind_prep+0x78>
		LL_ASSERT(rx && rx->hdr.link);
   35030:	4a5c      	ldr	r2, [pc, #368]	; (351a4 <event_phy_upd_ind_prep+0x3e8>)
   35032:	495d      	ldr	r1, [pc, #372]	; (351a8 <event_phy_upd_ind_prep+0x3ec>)
   35034:	485d      	ldr	r0, [pc, #372]	; (351ac <event_phy_upd_ind_prep+0x3f0>)
   35036:	f241 2349 	movw	r3, #4681	; 0x1249
   3503a:	f00d fc43 	bl	428c4 <printk>
   3503e:	4040      	eors	r0, r0
   35040:	f380 8811 	msr	BASEPRI, r0
   35044:	f04f 0003 	mov.w	r0, #3
   35048:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   3504a:	6828      	ldr	r0, [r5, #0]
   3504c:	e71d      	b.n	34e8a <event_phy_upd_ind_prep+0xce>
			rx = ll_pdu_rx_alloc();
   3504e:	f7fe f881 	bl	33154 <ll_pdu_rx_alloc>
			if (!rx) {
   35052:	4605      	mov	r5, r0
   35054:	2800      	cmp	r0, #0
   35056:	f43f af5a 	beq.w	34f0e <event_phy_upd_ind_prep+0x152>
			rx->hdr.link->mem = conn->llcp_rx;
   3505a:	6803      	ldr	r3, [r0, #0]
   3505c:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   35060:	605a      	str	r2, [r3, #4]
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   35062:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
			conn->llcp_rx = rx;
   35066:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3506a:	2b00      	cmp	r3, #0
		if (conn->llcp.phy_upd_ind.tx) {
   3506c:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   35070:	461a      	mov	r2, r3
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   35072:	f6bf aebb 	bge.w	34dec <event_phy_upd_ind_prep+0x30>
   35076:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
   3507a:	2900      	cmp	r1, #0
   3507c:	f43f aeb6 	beq.w	34dec <event_phy_upd_ind_prep+0x30>
			conn->periph.llcp_type = LLCP_NONE;
   35080:	f884 60d9 	strb.w	r6, [r4, #217]	; 0xd9
   35084:	e6b6      	b.n	34df4 <event_phy_upd_ind_prep+0x38>
							 lll->latency +
   35086:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   35088:	1da9      	adds	r1, r5, #6
   3508a:	4419      	add	r1, r3
			conn->llcp.phy_upd_ind.instant = event_counter +
   3508c:	f8a4 10ea 	strh.w	r1, [r4, #234]	; 0xea
			(void)ll_pdu_rx_alloc();
   35090:	f7fe f860 	bl	33154 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   35094:	f8d8 3000 	ldr.w	r3, [r8]
   35098:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   3509c:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
   3509e:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
				rx = ll_pdu_rx_alloc();
   350a2:	f7fe f857 	bl	33154 <ll_pdu_rx_alloc>
				rx->hdr.link->mem = conn->llcp_rx;
   350a6:	6803      	ldr	r3, [r0, #0]
   350a8:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   350ac:	605a      	str	r2, [r3, #4]
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   350ae:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   350b2:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
				conn->llcp_rx = rx;
   350b6:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   350ba:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   350be:	095b      	lsrs	r3, r3, #5
   350c0:	e757      	b.n	34f72 <event_phy_upd_ind_prep+0x1b6>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   350c2:	2301      	movs	r3, #1
   350c4:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   350c6:	4629      	mov	r1, r5
   350c8:	f7fe f814 	bl	330f4 <ll_rx_put>
}
   350cc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   350d0:	f7fe b81a 	b.w	33108 <ll_rx_sched>
		if (!conn->tx_ctrl) {
   350d4:	2900      	cmp	r1, #0
   350d6:	f47f af70 	bne.w	34fba <event_phy_upd_ind_prep+0x1fe>
			tx->next = conn->tx_head;
   350da:	603a      	str	r2, [r7, #0]
			conn->tx_head = tx;
   350dc:	f8c4 71c4 	str.w	r7, [r4, #452]	; 0x1c4
   350e0:	f8c4 71c8 	str.w	r7, [r4, #456]	; 0x1c8
				conn->tx_ctrl_last = tx;
   350e4:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
	if (!tx->next) {
   350e8:	e711      	b.n	34f0e <event_phy_upd_ind_prep+0x152>
		if (!conn->tx_ctrl) {
   350ea:	2900      	cmp	r1, #0
   350ec:	f47f af65 	bne.w	34fba <event_phy_upd_ind_prep+0x1fe>
			tx->next = conn->tx_head;
   350f0:	6039      	str	r1, [r7, #0]
			conn->tx_head = tx;
   350f2:	f8c4 71c4 	str.w	r7, [r4, #452]	; 0x1c4
   350f6:	f8c4 71c8 	str.w	r7, [r4, #456]	; 0x1c8
				conn->tx_ctrl_last = tx;
   350fa:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
	if (!tx->next) {
   350fe:	e766      	b.n	34fce <event_phy_upd_ind_prep+0x212>
				(void)ll_pdu_rx_alloc();
   35100:	f7fe f828 	bl	33154 <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
   35104:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   35106:	f8a8 3006 	strh.w	r3, [r8, #6]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3510a:	231c      	movs	r3, #28
				upd->status = 0U;
   3510c:	f888 601c 	strb.w	r6, [r8, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   35110:	f888 3004 	strb.w	r3, [r8, #4]
				upd->tx = lll->phy_tx;
   35114:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
				ll_rx_put(rx->hdr.link, rx);
   35118:	f8d8 0000 	ldr.w	r0, [r8]
				upd->tx = lll->phy_tx;
   3511c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   35120:	f888 301d 	strb.w	r3, [r8, #29]
				upd->rx = lll->phy_rx;
   35124:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   35128:	f3c3 0302 	ubfx	r3, r3, #0, #3
   3512c:	f888 301e 	strb.w	r3, [r8, #30]
				ll_rx_put(rx->hdr.link, rx);
   35130:	4641      	mov	r1, r8
   35132:	f7fd ffdf 	bl	330f4 <ll_rx_put>
				ll_rx_sched();
   35136:	f7fd ffe7 	bl	33108 <ll_rx_sched>
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   3513a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   3513e:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   35142:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   35146:	095b      	lsrs	r3, r3, #5
   35148:	e713      	b.n	34f72 <event_phy_upd_ind_prep+0x1b6>
				LL_ASSERT(rx && rx->hdr.link);
   3514a:	4a16      	ldr	r2, [pc, #88]	; (351a4 <event_phy_upd_ind_prep+0x3e8>)
   3514c:	4916      	ldr	r1, [pc, #88]	; (351a8 <event_phy_upd_ind_prep+0x3ec>)
   3514e:	4817      	ldr	r0, [pc, #92]	; (351ac <event_phy_upd_ind_prep+0x3f0>)
   35150:	f241 232c 	movw	r3, #4652	; 0x122c
   35154:	f00d fbb6 	bl	428c4 <printk>
   35158:	4040      	eors	r0, r0
   3515a:	f380 8811 	msr	BASEPRI, r0
   3515e:	f04f 0003 	mov.w	r0, #3
   35162:	df02      	svc	2
				conn->llcp_rx = rx->hdr.link->mem;
   35164:	6828      	ldr	r0, [r5, #0]
   35166:	e746      	b.n	34ff6 <event_phy_upd_ind_prep+0x23a>
			conn->tx_data = conn->tx_data->next;
   35168:	6813      	ldr	r3, [r2, #0]
   3516a:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   3516e:	2900      	cmp	r1, #0
   35170:	f47f af23 	bne.w	34fba <event_phy_upd_ind_prep+0x1fe>
			tx->next = conn->tx_head->next;
   35174:	6813      	ldr	r3, [r2, #0]
   35176:	603b      	str	r3, [r7, #0]
			conn->tx_head->next = tx;
   35178:	6017      	str	r7, [r2, #0]
				conn->tx_ctrl = tx;
   3517a:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
	if (!tx->next) {
   3517e:	683b      	ldr	r3, [r7, #0]
   35180:	e723      	b.n	34fca <event_phy_upd_ind_prep+0x20e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   35182:	7913      	ldrb	r3, [r2, #4]
   35184:	f003 0303 	and.w	r3, r3, #3
   35188:	2b03      	cmp	r3, #3
   3518a:	d002      	beq.n	35192 <event_phy_upd_ind_prep+0x3d6>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3518c:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   35190:	e713      	b.n	34fba <event_phy_upd_ind_prep+0x1fe>
	    ((pdu_data_tx->llctrl.opcode !=
   35192:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   35194:	2b03      	cmp	r3, #3
   35196:	d0ed      	beq.n	35174 <event_phy_upd_ind_prep+0x3b8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   35198:	2b0a      	cmp	r3, #10
   3519a:	d1f7      	bne.n	3518c <event_phy_upd_ind_prep+0x3d0>
   3519c:	e7ea      	b.n	35174 <event_phy_upd_ind_prep+0x3b8>
   3519e:	bf00      	nop
   351a0:	20002638 	.word	0x20002638
   351a4:	0004a0dc 	.word	0x0004a0dc
   351a8:	0004a1a8 	.word	0x0004a1a8
   351ac:	00049c68 	.word	0x00049c68

000351b0 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   351b0:	4801      	ldr	r0, [pc, #4]	; (351b8 <ll_conn_acquire+0x8>)
   351b2:	f7fa bc13 	b.w	2f9dc <mem_acquire>
   351b6:	bf00      	nop
   351b8:	200025f8 	.word	0x200025f8

000351bc <ll_conn_release>:
	mem_release(conn, &conn_free);
   351bc:	4901      	ldr	r1, [pc, #4]	; (351c4 <ll_conn_release+0x8>)
   351be:	f7fa bc27 	b.w	2fa10 <mem_release>
   351c2:	bf00      	nop
   351c4:	200025f8 	.word	0x200025f8

000351c8 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   351c8:	4902      	ldr	r1, [pc, #8]	; (351d4 <ll_conn_handle_get+0xc>)
   351ca:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   351ce:	f7fa bc3b 	b.w	2fa48 <mem_index_get>
   351d2:	bf00      	nop
   351d4:	200014e8 	.word	0x200014e8

000351d8 <ll_conn_get>:
{
   351d8:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   351da:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   351de:	4801      	ldr	r0, [pc, #4]	; (351e4 <ll_conn_get+0xc>)
   351e0:	f7fa bc2e 	b.w	2fa40 <mem_get>
   351e4:	200014e8 	.word	0x200014e8

000351e8 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   351e8:	b958      	cbnz	r0, 35202 <ll_connected_get+0x1a>
{
   351ea:	b508      	push	{r3, lr}
   351ec:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   351ee:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   351f2:	4805      	ldr	r0, [pc, #20]	; (35208 <ll_connected_get+0x20>)
   351f4:	f7fa fc24 	bl	2fa40 <mem_get>
	if (conn->lll.handle != handle) {
   351f8:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   351fa:	b903      	cbnz	r3, 351fe <ll_connected_get+0x16>
}
   351fc:	bd08      	pop	{r3, pc}
		return NULL;
   351fe:	2000      	movs	r0, #0
}
   35200:	bd08      	pop	{r3, pc}
		return NULL;
   35202:	2000      	movs	r0, #0
}
   35204:	4770      	bx	lr
   35206:	bf00      	nop
   35208:	200014e8 	.word	0x200014e8

0003520c <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   3520c:	4801      	ldr	r0, [pc, #4]	; (35214 <ll_tx_mem_acquire+0x8>)
   3520e:	f7fa bbe5 	b.w	2f9dc <mem_acquire>
   35212:	bf00      	nop
   35214:	200026ec 	.word	0x200026ec

00035218 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   35218:	4901      	ldr	r1, [pc, #4]	; (35220 <ll_tx_mem_release+0x8>)
   3521a:	f7fa bbf9 	b.w	2fa10 <mem_release>
   3521e:	bf00      	nop
   35220:	200026ec 	.word	0x200026ec

00035224 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   35224:	2800      	cmp	r0, #0
   35226:	d13e      	bne.n	352a6 <ll_tx_mem_enqueue+0x82>
{
   35228:	b570      	push	{r4, r5, r6, lr}
   3522a:	4602      	mov	r2, r0
   3522c:	460e      	mov	r6, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3522e:	481f      	ldr	r0, [pc, #124]	; (352ac <ll_tx_mem_enqueue+0x88>)
   35230:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   35234:	f7fa fc04 	bl	2fa40 <mem_get>
	if (conn->lll.handle != handle) {
   35238:	8d02      	ldrh	r2, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3523a:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   3523c:	b9f2      	cbnz	r2, 3527c <ll_tx_mem_enqueue+0x58>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   3523e:	4c1c      	ldr	r4, [pc, #112]	; (352b0 <ll_tx_mem_enqueue+0x8c>)
   35240:	78e0      	ldrb	r0, [r4, #3]
	if (last == count) {
   35242:	f894 c001 	ldrb.w	ip, [r4, #1]
   35246:	78a1      	ldrb	r1, [r4, #2]
	last = last + 1;
   35248:	1c43      	adds	r3, r0, #1
   3524a:	b2db      	uxtb	r3, r3
		last = 0U;
   3524c:	459c      	cmp	ip, r3
   3524e:	bf08      	it	eq
   35250:	2300      	moveq	r3, #0
	if (last == first) {
   35252:	4299      	cmp	r1, r3
   35254:	d024      	beq.n	352a0 <ll_tx_mem_enqueue+0x7c>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   35256:	4621      	mov	r1, r4
   35258:	f811 cb04 	ldrb.w	ip, [r1], #4
   3525c:	fb1c fc00 	smulbb	ip, ip, r0
	lll_tx->handle = handle;
   35260:	f821 200c 	strh.w	r2, [r1, ip]
   35264:	448c      	add	ip, r1
	lll_tx->node = tx;
   35266:	f8cc 6004 	str.w	r6, [ip, #4]
	*last = idx; /* Commit: Update write index */
   3526a:	70e3      	strb	r3, [r4, #3]
   3526c:	782b      	ldrb	r3, [r5, #0]
	if (ull_ref_get(&conn->ull)) {
   3526e:	b943      	cbnz	r3, 35282 <ll_tx_mem_enqueue+0x5e>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   35270:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   35274:	2b00      	cmp	r3, #0
   35276:	db0e      	blt.n	35296 <ll_tx_mem_enqueue+0x72>
	return 0;
   35278:	2000      	movs	r0, #0
}
   3527a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3527c:	f06f 0015 	mvn.w	r0, #21
}
   35280:	bd70      	pop	{r4, r5, r6, pc}
		mfy.param = conn;
   35282:	4b0c      	ldr	r3, [pc, #48]	; (352b4 <ll_tx_mem_enqueue+0x90>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   35284:	2101      	movs	r1, #1
   35286:	2003      	movs	r0, #3
		mfy.param = conn;
   35288:	609d      	str	r5, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   3528a:	f7fa fc81 	bl	2fb90 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3528e:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   35292:	2b00      	cmp	r3, #0
   35294:	daf0      	bge.n	35278 <ll_tx_mem_enqueue+0x54>
		ull_periph_latency_cancel(conn, handle);
   35296:	2100      	movs	r1, #0
   35298:	4628      	mov	r0, r5
   3529a:	f003 fe57 	bl	38f4c <ull_periph_latency_cancel>
   3529e:	e7eb      	b.n	35278 <ll_tx_mem_enqueue+0x54>
		return -ENOBUFS;
   352a0:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   352a4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   352a6:	f06f 0015 	mvn.w	r0, #21
}
   352aa:	4770      	bx	lr
   352ac:	200014e8 	.word	0x200014e8
   352b0:	2000075c 	.word	0x2000075c
   352b4:	20000708 	.word	0x20000708

000352b8 <ll_conn_update>:
{
   352b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   352bc:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   352c0:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
   352c4:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   352c8:	2800      	cmp	r0, #0
   352ca:	d168      	bne.n	3539e <ll_conn_update+0xe6>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   352cc:	460c      	mov	r4, r1
   352ce:	4616      	mov	r6, r2
   352d0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   352d4:	4602      	mov	r2, r0
   352d6:	4840      	ldr	r0, [pc, #256]	; (353d8 <ll_conn_update+0x120>)
   352d8:	461d      	mov	r5, r3
   352da:	f7fa fbb1 	bl	2fa40 <mem_get>
	if (conn->lll.handle != handle) {
   352de:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   352e0:	2b00      	cmp	r3, #0
   352e2:	d15c      	bne.n	3539e <ll_conn_update+0xe6>
	if (!cmd) {
   352e4:	b1ec      	cbz	r4, 35322 <ll_conn_update+0x6a>
		cmd--;
   352e6:	3c01      	subs	r4, #1
		if (cmd) {
   352e8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   352ec:	d021      	beq.n	35332 <ll_conn_update+0x7a>
			if ((conn->llcp_conn_param.req ==
   352ee:	f890 2185 	ldrb.w	r2, [r0, #389]	; 0x185
   352f2:	f890 3184 	ldrb.w	r3, [r0, #388]	; 0x184
   352f6:	429a      	cmp	r2, r3
   352f8:	d04e      	beq.n	35398 <ll_conn_update+0xe0>
			    (conn->llcp_conn_param.state !=
   352fa:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
			     conn->llcp_conn_param.ack) ||
   352fe:	f003 020f 	and.w	r2, r3, #15
   35302:	2a03      	cmp	r2, #3
   35304:	d148      	bne.n	35398 <ll_conn_update+0xe0>
			conn->llcp_conn_param.state = cmd;
   35306:	f004 040f 	and.w	r4, r4, #15
   3530a:	f044 0410 	orr.w	r4, r4, #16
   3530e:	f023 031f 	bic.w	r3, r3, #31
   35312:	431c      	orrs	r4, r3
			conn->llcp_conn_param.status = status;
   35314:	f880 6187 	strb.w	r6, [r0, #391]	; 0x187
			conn->llcp_conn_param.state = cmd;
   35318:	f880 4186 	strb.w	r4, [r0, #390]	; 0x186
	return 0;
   3531c:	2000      	movs	r0, #0
}
   3531e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!conn->llcp_conn_param.disabled &&
   35322:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
   35326:	0699      	lsls	r1, r3, #26
   35328:	d42c      	bmi.n	35384 <ll_conn_update+0xcc>
		    (!conn->common.fex_valid ||
   3532a:	f890 30d8 	ldrb.w	r3, [r0, #216]	; 0xd8
		if (!conn->llcp_conn_param.disabled &&
   3532e:	07da      	lsls	r2, r3, #31
   35330:	d424      	bmi.n	3537c <ll_conn_update+0xc4>
			if (conn->llcp_conn_param.req !=
   35332:	f890 2184 	ldrb.w	r2, [r0, #388]	; 0x184
   35336:	f890 3185 	ldrb.w	r3, [r0, #389]	; 0x185
   3533a:	4293      	cmp	r3, r2
   3533c:	d12c      	bne.n	35398 <ll_conn_update+0xe0>
			conn->llcp_conn_param.req++;
   3533e:	3301      	adds	r3, #1
   35340:	f880 3184 	strb.w	r3, [r0, #388]	; 0x184
			conn->llcp_conn_param.state = cmd;
   35344:	f8b0 3186 	ldrh.w	r3, [r0, #390]	; 0x186
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   35348:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
			conn->llcp_conn_param.state = cmd;
   3534c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   35350:	f043 0310 	orr.w	r3, r3, #16
   35354:	f8a0 3186 	strh.w	r3, [r0, #390]	; 0x186
			conn->llcp_conn_param.interval_min = interval_min;
   35358:	2300      	movs	r3, #0
   3535a:	461a      	mov	r2, r3
   3535c:	f369 020f 	bfi	r2, r9, #0, #16
   35360:	f365 030f 	bfi	r3, r5, #0, #16
   35364:	f368 431f 	bfi	r3, r8, #16, #16
   35368:	f367 421f 	bfi	r2, r7, #16, #16
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3536c:	2900      	cmp	r1, #0
			conn->llcp_conn_param.interval_min = interval_min;
   3536e:	e9c0 3262 	strd	r3, r2, [r0, #392]	; 0x188
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   35372:	dad3      	bge.n	3531c <ll_conn_update+0x64>
				ull_periph_latency_cancel(conn, handle);
   35374:	2100      	movs	r1, #0
   35376:	f003 fde9 	bl	38f4c <ull_periph_latency_cancel>
   3537a:	e7cf      	b.n	3531c <ll_conn_update+0x64>
		     (conn->llcp_feature.features_conn &
   3537c:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
		    (!conn->common.fex_valid ||
   35380:	079b      	lsls	r3, r3, #30
   35382:	d4d6      	bmi.n	35332 <ll_conn_update+0x7a>
		} else if (conn->lll.role) {
   35384:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   35388:	2b00      	cmp	r3, #0
   3538a:	db23      	blt.n	353d4 <ll_conn_update+0x11c>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   3538c:	f890 210c 	ldrb.w	r2, [r0, #268]	; 0x10c
   35390:	f890 310d 	ldrb.w	r3, [r0, #269]	; 0x10d
   35394:	4293      	cmp	r3, r2
   35396:	d005      	beq.n	353a4 <ll_conn_update+0xec>
			return BT_HCI_ERR_CMD_DISALLOWED;
   35398:	200c      	movs	r0, #12
}
   3539a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3539e:	2002      	movs	r0, #2
}
   353a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   353a4:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
		conn->llcp_cu.interval = interval_max;
   353a8:	f8a0 8110 	strh.w	r8, [r0, #272]	; 0x110
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   353ac:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.req++;
   353b0:	3301      	adds	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   353b2:	f042 0209 	orr.w	r2, r2, #9
   353b6:	f880 210e 	strb.w	r2, [r0, #270]	; 0x10e
		conn->llcp_cu.req++;
   353ba:	f880 310c 	strb.w	r3, [r0, #268]	; 0x10c
		conn->llcp_cu.win_size = 1U;
   353be:	2201      	movs	r2, #1
		conn->llcp_cu.win_offset_us = 0U;
   353c0:	2300      	movs	r3, #0
		conn->llcp_cu.latency = latency;
   353c2:	f8a0 9112 	strh.w	r9, [r0, #274]	; 0x112
		conn->llcp_cu.timeout = timeout;
   353c6:	f8a0 7114 	strh.w	r7, [r0, #276]	; 0x114
		conn->llcp_cu.win_size = 1U;
   353ca:	f880 211c 	strb.w	r2, [r0, #284]	; 0x11c
		conn->llcp_cu.win_offset_us = 0U;
   353ce:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
		conn->llcp_cu.req++;
   353d2:	e7a3      	b.n	3531c <ll_conn_update+0x64>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   353d4:	201a      	movs	r0, #26
   353d6:	e7e0      	b.n	3539a <ll_conn_update+0xe2>
   353d8:	200014e8 	.word	0x200014e8

000353dc <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   353dc:	b9d0      	cbnz	r0, 35414 <ll_chm_get+0x38>
{
   353de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   353e0:	4602      	mov	r2, r0
   353e2:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   353e4:	480c      	ldr	r0, [pc, #48]	; (35418 <ll_chm_get+0x3c>)
   353e6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   353ea:	f7fa fb29 	bl	2fa40 <mem_get>
	if (conn->lll.handle != handle) {
   353ee:	8d06      	ldrh	r6, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   353f0:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   353f2:	b96e      	cbnz	r6, 35410 <ll_chm_get+0x34>
		memcpy(chm, conn->lll.data_chan_map,
   353f4:	f100 0734 	add.w	r7, r0, #52	; 0x34
		conn->chm_updated = 0U;
   353f8:	f884 61d8 	strb.w	r6, [r4, #472]	; 0x1d8
		memcpy(chm, conn->lll.data_chan_map,
   353fc:	2205      	movs	r2, #5
   353fe:	4639      	mov	r1, r7
   35400:	4628      	mov	r0, r5
   35402:	f00f fb5e 	bl	44ac2 <memcpy>
	} while (conn->chm_updated);
   35406:	f894 01d8 	ldrb.w	r0, [r4, #472]	; 0x1d8
   3540a:	2800      	cmp	r0, #0
   3540c:	d1f4      	bne.n	353f8 <ll_chm_get+0x1c>
}
   3540e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35410:	2002      	movs	r0, #2
}
   35412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35414:	2002      	movs	r0, #2
}
   35416:	4770      	bx	lr
   35418:	200014e8 	.word	0x200014e8

0003541c <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3541c:	bb70      	cbnz	r0, 3547c <ll_terminate_ind_send+0x60>
{
   3541e:	b510      	push	{r4, lr}
   35420:	4602      	mov	r2, r0
   35422:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35424:	4818      	ldr	r0, [pc, #96]	; (35488 <ll_terminate_ind_send+0x6c>)
   35426:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   3542a:	f7fa fb09 	bl	2fa40 <mem_get>
	if (conn->lll.handle != handle) {
   3542e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   35430:	bb13      	cbnz	r3, 35478 <ll_terminate_ind_send+0x5c>
	if (conn->llcp_terminate.req != conn->llcp_terminate.ack) {
   35432:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
   35436:	f890 2141 	ldrb.w	r2, [r0, #321]	; 0x141
   3543a:	429a      	cmp	r2, r3
   3543c:	d11a      	bne.n	35474 <ll_terminate_ind_send+0x58>
	switch (reason) {
   3543e:	2c1a      	cmp	r4, #26
   35440:	d803      	bhi.n	3544a <ll_terminate_ind_send+0x2e>
   35442:	2c04      	cmp	r4, #4
   35444:	d810      	bhi.n	35468 <ll_terminate_ind_send+0x4c>
   35446:	2012      	movs	r0, #18
}
   35448:	bd10      	pop	{r4, pc}
	switch (reason) {
   3544a:	2c29      	cmp	r4, #41	; 0x29
   3544c:	d001      	beq.n	35452 <ll_terminate_ind_send+0x36>
   3544e:	2c3b      	cmp	r4, #59	; 0x3b
   35450:	d1f9      	bne.n	35446 <ll_terminate_ind_send+0x2a>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   35452:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
	conn->llcp_terminate.reason_own = reason;
   35456:	f880 4142 	strb.w	r4, [r0, #322]	; 0x142
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   3545a:	3301      	adds	r3, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3545c:	2a00      	cmp	r2, #0
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   3545e:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   35462:	db0d      	blt.n	35480 <ll_terminate_ind_send+0x64>
	return 0;
   35464:	2000      	movs	r0, #0
}
   35466:	bd10      	pop	{r4, pc}
	switch (reason) {
   35468:	4a08      	ldr	r2, [pc, #32]	; (3548c <ll_terminate_ind_send+0x70>)
   3546a:	40e2      	lsrs	r2, r4
   3546c:	07d2      	lsls	r2, r2, #31
   3546e:	d4f0      	bmi.n	35452 <ll_terminate_ind_send+0x36>
   35470:	2012      	movs	r0, #18
   35472:	e7e9      	b.n	35448 <ll_terminate_ind_send+0x2c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   35474:	200c      	movs	r0, #12
}
   35476:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35478:	2002      	movs	r0, #2
}
   3547a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3547c:	2002      	movs	r0, #2
}
   3547e:	4770      	bx	lr
		ull_periph_latency_cancel(conn, handle);
   35480:	2100      	movs	r1, #0
   35482:	f003 fd63 	bl	38f4c <ull_periph_latency_cancel>
   35486:	e7ed      	b.n	35464 <ll_terminate_ind_send+0x48>
   35488:	200014e8 	.word	0x200014e8
   3548c:	04380020 	.word	0x04380020

00035490 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   35490:	bb00      	cbnz	r0, 354d4 <ll_feature_req_send+0x44>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35492:	4602      	mov	r2, r0
   35494:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
{
   35498:	b508      	push	{r3, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3549a:	480f      	ldr	r0, [pc, #60]	; (354d8 <ll_feature_req_send+0x48>)
   3549c:	f7fa fad0 	bl	2fa40 <mem_get>
	if (conn->lll.handle != handle) {
   354a0:	8d01      	ldrh	r1, [r0, #40]	; 0x28
   354a2:	b989      	cbnz	r1, 354c8 <ll_feature_req_send+0x38>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   354a4:	f890 c120 	ldrb.w	ip, [r0, #288]	; 0x120
   354a8:	f890 2121 	ldrb.w	r2, [r0, #289]	; 0x121
   354ac:	4562      	cmp	r2, ip
   354ae:	d109      	bne.n	354c4 <ll_feature_req_send+0x34>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   354b0:	f990 c039 	ldrsb.w	ip, [r0, #57]	; 0x39
	conn->llcp_feature.req++;
   354b4:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   354b6:	f1bc 0f00 	cmp.w	ip, #0
	conn->llcp_feature.req++;
   354ba:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   354be:	db05      	blt.n	354cc <ll_feature_req_send+0x3c>
	return 0;
   354c0:	2000      	movs	r0, #0
}
   354c2:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   354c4:	200c      	movs	r0, #12
}
   354c6:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   354c8:	2002      	movs	r0, #2
}
   354ca:	bd08      	pop	{r3, pc}
		ull_periph_latency_cancel(conn, handle);
   354cc:	f003 fd3e 	bl	38f4c <ull_periph_latency_cancel>
	return 0;
   354d0:	2000      	movs	r0, #0
   354d2:	e7f6      	b.n	354c2 <ll_feature_req_send+0x32>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   354d4:	2002      	movs	r0, #2
}
   354d6:	4770      	bx	lr
   354d8:	200014e8 	.word	0x200014e8

000354dc <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   354dc:	bb00      	cbnz	r0, 35520 <ll_version_ind_send+0x44>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   354de:	4602      	mov	r2, r0
   354e0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
{
   354e4:	b508      	push	{r3, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   354e6:	480f      	ldr	r0, [pc, #60]	; (35524 <ll_version_ind_send+0x48>)
   354e8:	f7fa faaa 	bl	2fa40 <mem_get>
	if (conn->lll.handle != handle) {
   354ec:	8d01      	ldrh	r1, [r0, #40]	; 0x28
   354ee:	b989      	cbnz	r1, 35514 <ll_version_ind_send+0x38>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   354f0:	f890 c138 	ldrb.w	ip, [r0, #312]	; 0x138
   354f4:	f890 2139 	ldrb.w	r2, [r0, #313]	; 0x139
   354f8:	4562      	cmp	r2, ip
   354fa:	d109      	bne.n	35510 <ll_version_ind_send+0x34>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   354fc:	f990 c039 	ldrsb.w	ip, [r0, #57]	; 0x39
	conn->llcp_version.req++;
   35500:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   35502:	f1bc 0f00 	cmp.w	ip, #0
	conn->llcp_version.req++;
   35506:	f880 2138 	strb.w	r2, [r0, #312]	; 0x138
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3550a:	db05      	blt.n	35518 <ll_version_ind_send+0x3c>
	return 0;
   3550c:	2000      	movs	r0, #0
}
   3550e:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   35510:	200c      	movs	r0, #12
}
   35512:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35514:	2002      	movs	r0, #2
}
   35516:	bd08      	pop	{r3, pc}
		ull_periph_latency_cancel(conn, handle);
   35518:	f003 fd18 	bl	38f4c <ull_periph_latency_cancel>
	return 0;
   3551c:	2000      	movs	r0, #0
   3551e:	e7f6      	b.n	3550e <ll_version_ind_send+0x32>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35520:	2002      	movs	r0, #2
}
   35522:	4770      	bx	lr
   35524:	200014e8 	.word	0x200014e8

00035528 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   35528:	2800      	cmp	r0, #0
   3552a:	d149      	bne.n	355c0 <ll_length_req_send+0x98>
{
   3552c:	b538      	push	{r3, r4, r5, lr}
   3552e:	460c      	mov	r4, r1
   35530:	4615      	mov	r5, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35532:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   35536:	4602      	mov	r2, r0
   35538:	4822      	ldr	r0, [pc, #136]	; (355c4 <ll_length_req_send+0x9c>)
   3553a:	f7fa fa81 	bl	2fa40 <mem_get>
	if (conn->lll.handle != handle) {
   3553e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   35540:	bbd3      	cbnz	r3, 355b8 <ll_length_req_send+0x90>
	if (conn->llcp_length.disabled ||
   35542:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
   35546:	071a      	lsls	r2, r3, #28
   35548:	d434      	bmi.n	355b4 <ll_length_req_send+0x8c>
	    (conn->common.fex_valid &&
   3554a:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
	if (conn->llcp_length.disabled ||
   3554e:	07d1      	lsls	r1, r2, #31
   35550:	d503      	bpl.n	3555a <ll_length_req_send+0x32>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_DLE)))) {
   35552:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
	    (conn->common.fex_valid &&
   35556:	0692      	lsls	r2, r2, #26
   35558:	d52c      	bpl.n	355b4 <ll_length_req_send+0x8c>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   3555a:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
   3555e:	f890 21ad 	ldrb.w	r2, [r0, #429]	; 0x1ad
   35562:	428a      	cmp	r2, r1
   35564:	d011      	beq.n	3558a <ll_length_req_send+0x62>
		switch (conn->llcp_length.state) {
   35566:	f003 0307 	and.w	r3, r3, #7
   3556a:	2b03      	cmp	r3, #3
   3556c:	d004      	beq.n	35578 <ll_length_req_send+0x50>
   3556e:	3303      	adds	r3, #3
   35570:	f003 0307 	and.w	r3, r3, #7
   35574:	2b01      	cmp	r3, #1
   35576:	d821      	bhi.n	355bc <ll_length_req_send+0x94>
			if (!conn->llcp_length.cache.tx_octets) {
   35578:	f8b0 31b8 	ldrh.w	r3, [r0, #440]	; 0x1b8
   3557c:	b9f3      	cbnz	r3, 355bc <ll_length_req_send+0x94>
				conn->llcp_length.cache.tx_octets = tx_octets;
   3557e:	f8a0 41b8 	strh.w	r4, [r0, #440]	; 0x1b8
				conn->llcp_length.cache.tx_time = tx_time;
   35582:	f8a0 51ba 	strh.w	r5, [r0, #442]	; 0x1ba
				return 0;
   35586:	2000      	movs	r0, #0
}
   35588:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3558a:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
	conn->llcp_length.tx_octets = tx_octets;
   3558e:	f8a0 41b2 	strh.w	r4, [r0, #434]	; 0x1b2
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   35592:	f36f 0302 	bfc	r3, #0, #3
   35596:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3559a:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_length.tx_time = tx_time;
   3559e:	f8a0 51b6 	strh.w	r5, [r0, #438]	; 0x1b6
	conn->llcp_length.req++;
   355a2:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   355a4:	2b00      	cmp	r3, #0
	conn->llcp_length.req++;
   355a6:	f880 21ac 	strb.w	r2, [r0, #428]	; 0x1ac
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   355aa:	daec      	bge.n	35586 <ll_length_req_send+0x5e>
		ull_periph_latency_cancel(conn, handle);
   355ac:	2100      	movs	r1, #0
   355ae:	f003 fccd 	bl	38f4c <ull_periph_latency_cancel>
   355b2:	e7e8      	b.n	35586 <ll_length_req_send+0x5e>
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   355b4:	201a      	movs	r0, #26
}
   355b6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   355b8:	2002      	movs	r0, #2
}
   355ba:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   355bc:	200c      	movs	r0, #12
}
   355be:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   355c0:	2002      	movs	r0, #2
}
   355c2:	4770      	bx	lr
   355c4:	200014e8 	.word	0x200014e8

000355c8 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   355c8:	4a03      	ldr	r2, [pc, #12]	; (355d8 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   355ca:	4b04      	ldr	r3, [pc, #16]	; (355dc <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   355cc:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   355ce:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   355d0:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   355d2:	800b      	strh	r3, [r1, #0]
}
   355d4:	4770      	bx	lr
   355d6:	bf00      	nop
   355d8:	20003b0c 	.word	0x20003b0c
   355dc:	20003b0a 	.word	0x20003b0a

000355e0 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   355e0:	4a02      	ldr	r2, [pc, #8]	; (355ec <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   355e2:	4b03      	ldr	r3, [pc, #12]	; (355f0 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   355e4:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   355e6:	8019      	strh	r1, [r3, #0]
}
   355e8:	2000      	movs	r0, #0
   355ea:	4770      	bx	lr
   355ec:	20003b0c 	.word	0x20003b0c
   355f0:	20003b0a 	.word	0x20003b0a

000355f4 <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   355f4:	f04f 0c1b 	mov.w	ip, #27
   355f8:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   355fc:	f44f 70a4 	mov.w	r0, #328	; 0x148
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   35600:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   35604:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   35606:	8018      	strh	r0, [r3, #0]
}
   35608:	4770      	bx	lr
   3560a:	bf00      	nop

0003560c <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3560c:	b9c0      	cbnz	r0, 35640 <ll_phy_get+0x34>
{
   3560e:	b538      	push	{r3, r4, r5, lr}
   35610:	460d      	mov	r5, r1
   35612:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35614:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   35618:	4602      	mov	r2, r0
   3561a:	480a      	ldr	r0, [pc, #40]	; (35644 <ll_phy_get+0x38>)
   3561c:	f7fa fa10 	bl	2fa40 <mem_get>
   35620:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   35622:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   35624:	b950      	cbnz	r0, 3563c <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
   35626:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   3562a:	f3c2 0202 	ubfx	r2, r2, #0, #3
   3562e:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
   35630:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   35634:	f3c3 0302 	ubfx	r3, r3, #0, #3
   35638:	7023      	strb	r3, [r4, #0]
}
   3563a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3563c:	2002      	movs	r0, #2
}
   3563e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35640:	2002      	movs	r0, #2
}
   35642:	4770      	bx	lr
   35644:	200014e8 	.word	0x200014e8

00035648 <ll_phy_default_set>:
	default_phy_tx = tx;
   35648:	4a02      	ldr	r2, [pc, #8]	; (35654 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   3564a:	4b03      	ldr	r3, [pc, #12]	; (35658 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   3564c:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   3564e:	7019      	strb	r1, [r3, #0]
}
   35650:	2000      	movs	r0, #0
   35652:	4770      	bx	lr
   35654:	20003c12 	.word	0x20003c12
   35658:	20003c11 	.word	0x20003c11

0003565c <ll_phy_req_send>:
{
   3565c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   3565e:	2800      	cmp	r0, #0
   35660:	d143      	bne.n	356ea <ll_phy_req_send+0x8e>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35662:	460c      	mov	r4, r1
   35664:	4616      	mov	r6, r2
   35666:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   3566a:	4602      	mov	r2, r0
   3566c:	4823      	ldr	r0, [pc, #140]	; (356fc <ll_phy_req_send+0xa0>)
   3566e:	461f      	mov	r7, r3
   35670:	f7fa f9e6 	bl	2fa40 <mem_get>
	if (conn->lll.handle != handle) {
   35674:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   35676:	bbc3      	cbnz	r3, 356ea <ll_phy_req_send+0x8e>
	if (conn->llcp_phy.disabled ||
   35678:	f890 51bf 	ldrb.w	r5, [r0, #447]	; 0x1bf
   3567c:	f015 0508 	ands.w	r5, r5, #8
   35680:	d130      	bne.n	356e4 <ll_phy_req_send+0x88>
	    (conn->common.fex_valid &&
   35682:	f890 30d8 	ldrb.w	r3, [r0, #216]	; 0xd8
	if (conn->llcp_phy.disabled ||
   35686:	07db      	lsls	r3, r3, #31
   35688:	d504      	bpl.n	35694 <ll_phy_req_send+0x38>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_PHY_2M)) &&
   3568a:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   3568e:	f413 6f10 	tst.w	r3, #2304	; 0x900
   35692:	d027      	beq.n	356e4 <ll_phy_req_send+0x88>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
   35694:	f890 31bc 	ldrb.w	r3, [r0, #444]	; 0x1bc
   35698:	f890 11bd 	ldrb.w	r1, [r0, #445]	; 0x1bd
   3569c:	4299      	cmp	r1, r3
   3569e:	d11e      	bne.n	356de <ll_phy_req_send+0x82>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   356a0:	f004 0407 	and.w	r4, r4, #7
   356a4:	00a4      	lsls	r4, r4, #2
   356a6:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   356aa:	f007 0707 	and.w	r7, r7, #7
   356ae:	ea44 1347 	orr.w	r3, r4, r7, lsl #5
   356b2:	f006 0601 	and.w	r6, r6, #1
   356b6:	ea43 2246 	orr.w	r2, r3, r6, lsl #9
   356ba:	f8b0 31be 	ldrh.w	r3, [r0, #446]	; 0x1be
   356be:	f423 63df 	bic.w	r3, r3, #1784	; 0x6f8
   356c2:	f023 0307 	bic.w	r3, r3, #7
   356c6:	431a      	orrs	r2, r3
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   356c8:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   356cc:	f8a0 21be 	strh.w	r2, [r0, #446]	; 0x1be
	conn->llcp_phy.req++;
   356d0:	3101      	adds	r1, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   356d2:	2b00      	cmp	r3, #0
	conn->llcp_phy.req++;
   356d4:	f880 11bc 	strb.w	r1, [r0, #444]	; 0x1bc
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   356d8:	db0a      	blt.n	356f0 <ll_phy_req_send+0x94>
}
   356da:	4628      	mov	r0, r5
   356dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   356de:	250c      	movs	r5, #12
}
   356e0:	4628      	mov	r0, r5
   356e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   356e4:	251a      	movs	r5, #26
}
   356e6:	4628      	mov	r0, r5
   356e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   356ea:	2502      	movs	r5, #2
}
   356ec:	4628      	mov	r0, r5
   356ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ull_periph_latency_cancel(conn, handle);
   356f0:	2100      	movs	r1, #0
   356f2:	f003 fc2b 	bl	38f4c <ull_periph_latency_cancel>
}
   356f6:	4628      	mov	r0, r5
   356f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   356fa:	bf00      	nop
   356fc:	200014e8 	.word	0x200014e8

00035700 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   35700:	b9d8      	cbnz	r0, 3573a <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35702:	4602      	mov	r2, r0
{
   35704:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35706:	480e      	ldr	r0, [pc, #56]	; (35740 <ll_apto_get+0x40>)
   35708:	460c      	mov	r4, r1
   3570a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   3570e:	f7fa f997 	bl	2fa40 <mem_get>
   35712:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   35714:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   35716:	b970      	cbnz	r0, 35736 <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   35718:	f8b2 30ce 	ldrh.w	r3, [r2, #206]	; 0xce
   3571c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
   3571e:	fb02 f303 	mul.w	r3, r2, r3
   35722:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   35726:	4a07      	ldr	r2, [pc, #28]	; (35744 <ll_apto_get+0x44>)
   35728:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   3572c:	fba2 2303 	umull	r2, r3, r2, r3
   35730:	099b      	lsrs	r3, r3, #6
   35732:	8023      	strh	r3, [r4, #0]
}
   35734:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35736:	2002      	movs	r0, #2
}
   35738:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3573a:	2002      	movs	r0, #2
}
   3573c:	4770      	bx	lr
   3573e:	bf00      	nop
   35740:	200014e8 	.word	0x200014e8
   35744:	10624dd3 	.word	0x10624dd3

00035748 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   35748:	b9d8      	cbnz	r0, 35782 <ll_apto_set+0x3a>
{
   3574a:	b510      	push	{r4, lr}
   3574c:	4602      	mov	r2, r0
   3574e:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35750:	480d      	ldr	r0, [pc, #52]	; (35788 <ll_apto_set+0x40>)
   35752:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   35756:	f7fa f973 	bl	2fa40 <mem_get>
   3575a:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   3575c:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   3575e:	b970      	cbnz	r0, 3577e <ll_apto_set+0x36>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   35760:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
   35762:	f240 41e2 	movw	r1, #1250	; 0x4e2
   35766:	fb01 f202 	mul.w	r2, r1, r2
   3576a:	f242 7110 	movw	r1, #10000	; 0x2710
   3576e:	fb01 2104 	mla	r1, r1, r4, r2
   35772:	3901      	subs	r1, #1
   35774:	fbb1 f1f2 	udiv	r1, r1, r2
   35778:	f8a3 10ce 	strh.w	r1, [r3, #206]	; 0xce
}
   3577c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3577e:	2002      	movs	r0, #2
}
   35780:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35782:	2002      	movs	r0, #2
}
   35784:	4770      	bx	lr
   35786:	bf00      	nop
   35788:	200014e8 	.word	0x200014e8

0003578c <ull_conn_init>:
	err = init_reset();
   3578c:	f7fe beb8 	b.w	34500 <init_reset>

00035790 <ull_conn_reset>:
{
   35790:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35792:	2200      	movs	r2, #0
   35794:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   35798:	4815      	ldr	r0, [pc, #84]	; (357f0 <ull_conn_reset+0x60>)
   3579a:	f7fa f951 	bl	2fa40 <mem_get>
   3579e:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   357a0:	f100 021c 	add.w	r2, r0, #28
   357a4:	4601      	mov	r1, r0
   357a6:	2003      	movs	r0, #3
   357a8:	f7fd fde4 	bl	33374 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   357ac:	b108      	cbz	r0, 357b2 <ull_conn_reset+0x22>
   357ae:	3078      	adds	r0, #120	; 0x78
   357b0:	d10f      	bne.n	357d2 <ull_conn_reset+0x42>
	MFIFO_INIT(conn_tx);
   357b2:	4810      	ldr	r0, [pc, #64]	; (357f4 <ull_conn_reset+0x64>)
	MFIFO_INIT(conn_ack);
   357b4:	4910      	ldr	r1, [pc, #64]	; (357f8 <ull_conn_reset+0x68>)
	conn_upd_curr = NULL;
   357b6:	4a11      	ldr	r2, [pc, #68]	; (357fc <ull_conn_reset+0x6c>)
	conn->lll.link_tx_free = NULL;
   357b8:	2300      	movs	r3, #0
	conn->lll.handle = LLL_HANDLE_INVALID;
   357ba:	f64f 7cff 	movw	ip, #65535	; 0xffff
	MFIFO_INIT(conn_tx);
   357be:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   357c0:	804b      	strh	r3, [r1, #2]
	conn->lll.handle = LLL_HANDLE_INVALID;
   357c2:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
	conn->lll.link_tx_free = NULL;
   357c6:	6763      	str	r3, [r4, #116]	; 0x74
}
   357c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
   357cc:	6013      	str	r3, [r2, #0]
	err = init_reset();
   357ce:	f7fe be97 	b.w	34500 <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
   357d2:	4a0b      	ldr	r2, [pc, #44]	; (35800 <ull_conn_reset+0x70>)
   357d4:	490b      	ldr	r1, [pc, #44]	; (35804 <ull_conn_reset+0x74>)
   357d6:	480c      	ldr	r0, [pc, #48]	; (35808 <ull_conn_reset+0x78>)
   357d8:	f640 03e3 	movw	r3, #2275	; 0x8e3
   357dc:	f00d f872 	bl	428c4 <printk>
   357e0:	4040      	eors	r0, r0
   357e2:	f380 8811 	msr	BASEPRI, r0
   357e6:	f04f 0003 	mov.w	r0, #3
   357ea:	df02      	svc	2
   357ec:	e7e1      	b.n	357b2 <ull_conn_reset+0x22>
   357ee:	bf00      	nop
   357f0:	200014e8 	.word	0x200014e8
   357f4:	2000075c 	.word	0x2000075c
   357f8:	20000718 	.word	0x20000718
   357fc:	200025f4 	.word	0x200025f4
   35800:	0004a0dc 	.word	0x0004a0dc
   35804:	0004a1ec 	.word	0x0004a1ec
   35808:	00049c68 	.word	0x00049c68

0003580c <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   3580c:	4b01      	ldr	r3, [pc, #4]	; (35814 <ull_conn_default_tx_octets_get+0x8>)
}
   3580e:	8818      	ldrh	r0, [r3, #0]
   35810:	4770      	bx	lr
   35812:	bf00      	nop
   35814:	20003b0c 	.word	0x20003b0c

00035818 <ull_conn_default_tx_time_get>:
	return default_tx_time;
   35818:	4b01      	ldr	r3, [pc, #4]	; (35820 <ull_conn_default_tx_time_get+0x8>)
}
   3581a:	8818      	ldrh	r0, [r3, #0]
   3581c:	4770      	bx	lr
   3581e:	bf00      	nop
   35820:	20003b0a 	.word	0x20003b0a

00035824 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   35824:	4b01      	ldr	r3, [pc, #4]	; (3582c <ull_conn_default_phy_tx_get+0x8>)
}
   35826:	7818      	ldrb	r0, [r3, #0]
   35828:	4770      	bx	lr
   3582a:	bf00      	nop
   3582c:	20003c12 	.word	0x20003c12

00035830 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   35830:	4b01      	ldr	r3, [pc, #4]	; (35838 <ull_conn_default_phy_rx_get+0x8>)
}
   35832:	7818      	ldrb	r0, [r3, #0]
   35834:	4770      	bx	lr
   35836:	bf00      	nop
   35838:	20003c11 	.word	0x20003c11

0003583c <ull_conn_setup>:
{
   3583c:	b538      	push	{r3, r4, r5, lr}
	hdr = HDR_LLL2ULL(ftr->param);
   3583e:	688b      	ldr	r3, [r1, #8]
	rx->link = rx_link;
   35840:	6008      	str	r0, [r1, #0]
	hdr = HDR_LLL2ULL(ftr->param);
   35842:	681d      	ldr	r5, [r3, #0]
   35844:	782b      	ldrb	r3, [r5, #0]
{
   35846:	460c      	mov	r4, r1
	if (ull_ref_get(hdr)) {
   35848:	b193      	cbz	r3, 35870 <ull_conn_setup+0x34>
		LL_ASSERT(!hdr->disabled_cb);
   3584a:	696b      	ldr	r3, [r5, #20]
   3584c:	b163      	cbz	r3, 35868 <ull_conn_setup+0x2c>
   3584e:	4a0b      	ldr	r2, [pc, #44]	; (3587c <ull_conn_setup+0x40>)
   35850:	490b      	ldr	r1, [pc, #44]	; (35880 <ull_conn_setup+0x44>)
   35852:	480c      	ldr	r0, [pc, #48]	; (35884 <ull_conn_setup+0x48>)
   35854:	f240 33ed 	movw	r3, #1005	; 0x3ed
   35858:	f00d f834 	bl	428c4 <printk>
   3585c:	4040      	eors	r0, r0
   3585e:	f380 8811 	msr	BASEPRI, r0
   35862:	f04f 0003 	mov.w	r0, #3
   35866:	df02      	svc	2
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
   35868:	4b07      	ldr	r3, [pc, #28]	; (35888 <ull_conn_setup+0x4c>)
   3586a:	e9c5 3405 	strd	r3, r4, [r5, #20]
}
   3586e:	bd38      	pop	{r3, r4, r5, pc}
   35870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		conn_setup_adv_scan_disabled_cb(rx);
   35874:	4608      	mov	r0, r1
   35876:	f7ff b847 	b.w	34908 <conn_setup_adv_scan_disabled_cb>
   3587a:	bf00      	nop
   3587c:	0004a0dc 	.word	0x0004a0dc
   35880:	0004a01c 	.word	0x0004a01c
   35884:	00049c68 	.word	0x00049c68
   35888:	00034909 	.word	0x00034909

0003588c <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   3588c:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
   3588e:	88da      	ldrh	r2, [r3, #6]
   35890:	2a00      	cmp	r2, #0
   35892:	f040 80d2 	bne.w	35a3a <ull_conn_rx+0x1ae>
{
   35896:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3589a:	460d      	mov	r5, r1
   3589c:	b083      	sub	sp, #12
   3589e:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   358a0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   358a4:	48a0      	ldr	r0, [pc, #640]	; (35b28 <ull_conn_rx+0x29c>)
   358a6:	f7fa f8cb 	bl	2fa40 <mem_get>
	if (conn->lll.handle != handle) {
   358aa:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   358ac:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   358ae:	2b00      	cmp	r3, #0
   358b0:	f040 80bf 	bne.w	35a32 <ull_conn_rx+0x1a6>
	pdu_rx = (void *)(*rx)->pdu;
   358b4:	682e      	ldr	r6, [r5, #0]

	opcode = pdu_rx->llctrl.opcode;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   358b6:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
	switch (pdu_rx->ll_id) {
   358ba:	7f33      	ldrb	r3, [r6, #28]
   358bc:	f003 0303 	and.w	r3, r3, #3
   358c0:	2b03      	cmp	r3, #3
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   358c2:	f002 0001 	and.w	r0, r2, #1
	switch (pdu_rx->ll_id) {
   358c6:	d139      	bne.n	3593c <ull_conn_rx+0xb0>
	opcode = pdu_rx->llctrl.opcode;
   358c8:	f896 901f 	ldrb.w	r9, [r6, #31]
	pdu_rx = (void *)(*rx)->pdu;
   358cc:	f106 0c1c 	add.w	ip, r6, #28
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   358d0:	2800      	cmp	r0, #0
   358d2:	d043      	beq.n	3595c <ull_conn_rx+0xd0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   358d4:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   358d8:	2b00      	cmp	r3, #0
		((!conn->llcp_enc.refresh &&
   358da:	f002 0004 	and.w	r0, r2, #4
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   358de:	f2c0 82b3 	blt.w	35e48 <ull_conn_rx+0x5bc>
	return (!conn->lll.role &&
   358e2:	2800      	cmp	r0, #0
   358e4:	f040 80ad 	bne.w	35a42 <ull_conn_rx+0x1b6>
		((!conn->llcp_enc.refresh &&
   358e8:	f1b9 0f02 	cmp.w	r9, #2
   358ec:	f000 82bb 	beq.w	35e66 <ull_conn_rx+0x5da>
   358f0:	f1b9 0f11 	cmp.w	r9, #17
   358f4:	d82c      	bhi.n	35950 <ull_conn_rx+0xc4>
   358f6:	488d      	ldr	r0, [pc, #564]	; (35b2c <ull_conn_rx+0x2a0>)
   358f8:	fa20 f009 	lsr.w	r0, r0, r9
   358fc:	07c1      	lsls	r1, r0, #31
   358fe:	d527      	bpl.n	35950 <ull_conn_rx+0xc4>

		return 0;
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   35900:	f1b9 0f18 	cmp.w	r9, #24
   35904:	d84c      	bhi.n	359a0 <ull_conn_rx+0x114>
   35906:	e8df f019 	tbh	[pc, r9, lsl #1]
   3590a:	03fe      	.short	0x03fe
   3590c:	02ae0465 	.word	0x02ae0465
   35910:	004b004b 	.word	0x004b004b
   35914:	0275004b 	.word	0x0275004b
   35918:	030701d9 	.word	0x030701d9
   3591c:	02c1019d 	.word	0x02c1019d
   35920:	02530498 	.word	0x02530498
   35924:	004b0211 	.word	0x004b0211
   35928:	004b0202 	.word	0x004b0202
   3592c:	01460167 	.word	0x01460167
   35930:	00cb0105 	.word	0x00cb0105
   35934:	011500cb 	.word	0x011500cb
   35938:	0376004b 	.word	0x0376004b
	switch (pdu_rx->ll_id) {
   3593c:	b933      	cbnz	r3, 3594c <ull_conn_rx+0xc0>
		if (conn->llcp_enc.pause_rx) {
   3593e:	bb58      	cbnz	r0, 35998 <ull_conn_rx+0x10c>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   35940:	2301      	movs	r3, #1
   35942:	7133      	strb	r3, [r6, #4]
		return 0;
   35944:	2000      	movs	r0, #0
}
   35946:	b003      	add	sp, #12
   35948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   3594c:	2800      	cmp	r0, #0
   3594e:	d0f9      	beq.n	35944 <ull_conn_rx+0xb8>
			conn->llcp_terminate.reason_final =
   35950:	223d      	movs	r2, #61	; 0x3d
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   35952:	2301      	movs	r3, #1
			conn->llcp_terminate.reason_final =
   35954:	f884 2143 	strb.w	r2, [r4, #323]	; 0x143
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   35958:	7133      	strb	r3, [r6, #4]
   3595a:	e7f3      	b.n	35944 <ull_conn_rx+0xb8>
	switch (opcode) {
   3595c:	f1b9 0f18 	cmp.w	r9, #24
   35960:	d81e      	bhi.n	359a0 <ull_conn_rx+0x114>
   35962:	e8df f019 	tbh	[pc, r9, lsl #1]
   35966:	03ce      	.short	0x03ce
   35968:	02800435 	.word	0x02800435
   3596c:	001d0387 	.word	0x001d0387
   35970:	0247001d 	.word	0x0247001d
   35974:	02d701ab 	.word	0x02d701ab
   35978:	0291016f 	.word	0x0291016f
   3597c:	0225046a 	.word	0x0225046a
   35980:	001d01e3 	.word	0x001d01e3
   35984:	001d01d4 	.word	0x001d01d4
   35988:	01180139 	.word	0x01180139
   3598c:	009d00d7 	.word	0x009d00d7
   35990:	00e7009d 	.word	0x00e7009d
   35994:	0346001d 	.word	0x0346001d
			conn->llcp_terminate.reason_final =
   35998:	233d      	movs	r3, #61	; 0x3d
   3599a:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
   3599e:	e7cf      	b.n	35940 <ull_conn_rx+0xb4>
	if (conn->common.txn_lock) {
   359a0:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   359a4:	0798      	lsls	r0, r3, #30
   359a6:	d4cb      	bmi.n	35940 <ull_conn_rx+0xb4>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   359a8:	4861      	ldr	r0, [pc, #388]	; (35b30 <ull_conn_rx+0x2a4>)
   359aa:	f7fa f817 	bl	2f9dc <mem_acquire>
	if (!tx) {
   359ae:	2800      	cmp	r0, #0
   359b0:	f000 854b 	beq.w	3644a <ull_conn_rx+0xbbe>
	conn->common.txn_lock = 1U;
   359b4:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   359b8:	f043 0302 	orr.w	r3, r3, #2
   359bc:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   359c0:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   359c2:	f880 9008 	strb.w	r9, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   359c6:	f043 0303 	orr.w	r3, r3, #3
   359ca:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   359cc:	2302      	movs	r3, #2
   359ce:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   359d0:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   359d4:	2207      	movs	r2, #7
   359d6:	71c2      	strb	r2, [r0, #7]
	if (
   359d8:	2b00      	cmp	r3, #0
   359da:	f000 84e9 	beq.w	363b0 <ull_conn_rx+0xb24>
	    !conn->llcp_enc.pause_tx &&
   359de:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   359e2:	0791      	lsls	r1, r2, #30
   359e4:	d414      	bmi.n	35a10 <ull_conn_rx+0x184>
	    !conn->llcp_phy.pause_tx &&
   359e6:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   359ea:	07d2      	lsls	r2, r2, #31
   359ec:	d410      	bmi.n	35a10 <ull_conn_rx+0x184>
		if (conn->tx_head == conn->tx_data) {
   359ee:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   359f2:	4293      	cmp	r3, r2
   359f4:	f000 852d 	beq.w	36452 <ull_conn_rx+0xbc6>
		} else if (!conn->tx_ctrl) {
   359f8:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   359fc:	b962      	cbnz	r2, 35a18 <ull_conn_rx+0x18c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   359fe:	791a      	ldrb	r2, [r3, #4]
   35a00:	f002 0203 	and.w	r2, r2, #3
   35a04:	2a03      	cmp	r2, #3
   35a06:	f000 87db 	beq.w	369c0 <ull_conn_rx+0x1134>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   35a0a:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   35a0e:	e005      	b.n	35a1c <ull_conn_rx+0x190>
		if (!conn->tx_ctrl) {
   35a10:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   35a14:	2a00      	cmp	r2, #0
   35a16:	d03d      	beq.n	35a94 <ull_conn_rx+0x208>
	tx->next = conn->tx_ctrl_last->next;
   35a18:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   35a1c:	681a      	ldr	r2, [r3, #0]
   35a1e:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   35a20:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   35a22:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   35a24:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   35a28:	2b00      	cmp	r3, #0
   35a2a:	d189      	bne.n	35940 <ull_conn_rx+0xb4>
		conn->tx_data_last = tx;
   35a2c:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   35a30:	e786      	b.n	35940 <ull_conn_rx+0xb4>
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   35a32:	682b      	ldr	r3, [r5, #0]
   35a34:	2201      	movs	r2, #1
   35a36:	711a      	strb	r2, [r3, #4]
		    PDU_DATA_LLCTRL_LEN(phy_upd_ind) != pdu_rx->len) {
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = phy_upd_ind_recv(conn, link, rx, pdu_rx);
		if (err) {
   35a38:	e784      	b.n	35944 <ull_conn_rx+0xb8>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   35a3a:	2201      	movs	r2, #1
   35a3c:	711a      	strb	r2, [r3, #4]
		return 0;
   35a3e:	2000      	movs	r0, #0
}
   35a40:	4770      	bx	lr
   35a42:	f1a9 0802 	sub.w	r8, r9, #2
   35a46:	fa5f fe88 	uxtb.w	lr, r8
   35a4a:	f1be 0f09 	cmp.w	lr, #9
   35a4e:	f63f af4f 	bhi.w	358f0 <ull_conn_rx+0x64>
   35a52:	f240 2005 	movw	r0, #517	; 0x205
   35a56:	fa20 f00e 	lsr.w	r0, r0, lr
   35a5a:	07c0      	lsls	r0, r0, #31
   35a5c:	f57f af4b 	bpl.w	358f6 <ull_conn_rx+0x6a>
	switch (opcode) {
   35a60:	f1b8 0f09 	cmp.w	r8, #9
   35a64:	d89c      	bhi.n	359a0 <ull_conn_rx+0x114>
   35a66:	a001      	add	r0, pc, #4	; (adr r0, 35a6c <ull_conn_rx+0x1e0>)
   35a68:	f850 f028 	ldr.w	pc, [r0, r8, lsl #2]
   35a6c:	00035e67 	.word	0x00035e67
   35a70:	00036079 	.word	0x00036079
   35a74:	000359a1 	.word	0x000359a1
   35a78:	000359a1 	.word	0x000359a1
   35a7c:	00035df5 	.word	0x00035df5
   35a80:	00035cbd 	.word	0x00035cbd
   35a84:	00035f19 	.word	0x00035f19
   35a88:	00035c45 	.word	0x00035c45
   35a8c:	00035e8d 	.word	0x00035e8d
   35a90:	0003623b 	.word	0x0003623b
			tx->next = conn->tx_head;
   35a94:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   35a96:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   35a9a:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   35a9e:	e74f      	b.n	35940 <ull_conn_rx+0xb4>
		if (PDU_DATA_LLCTRL_LEN(length_req) != pdu_rx->len) {
   35aa0:	7f73      	ldrb	r3, [r6, #29]
   35aa2:	2b09      	cmp	r3, #9
   35aa4:	f47f af7c 	bne.w	359a0 <ull_conn_rx+0x114>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   35aa8:	f1b9 0f14 	cmp.w	r9, #20
   35aac:	f000 851e 	beq.w	364ec <ull_conn_rx+0xc60>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   35ab0:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
	if (/* Local idle, and Peer request then complete the Peer procedure
   35ab4:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
	eff_rx_octets = conn->lll.max_rx_octets;
   35ab8:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
   35abc:	f8b4 a058 	ldrh.w	sl, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   35ac0:	f8b4 b05e 	ldrh.w	fp, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   35ac4:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
	if (/* Local idle, and Peer request then complete the Peer procedure
   35ac8:	4293      	cmp	r3, r2
	eff_rx_octets = conn->lll.max_rx_octets;
   35aca:	468e      	mov	lr, r1
	if (/* Local idle, and Peer request then complete the Peer procedure
   35acc:	f001 8073 	beq.w	36bb6 <ull_conn_rx+0x132a>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   35ad0:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
	struct node_tx *tx = NULL;
   35ad4:	2300      	movs	r3, #0
	       tx) ||
   35ad6:	f001 0107 	and.w	r1, r1, #7
   35ada:	2902      	cmp	r1, #2
   35adc:	f000 8527 	beq.w	3652e <ull_conn_rx+0xca2>
   35ae0:	f896 901f 	ldrb.w	r9, [r6, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   35ae4:	f1b9 0f15 	cmp.w	r9, #21
   35ae8:	f43f af2c 	beq.w	35944 <ull_conn_rx+0xb8>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   35aec:	4618      	mov	r0, r3
   35aee:	4910      	ldr	r1, [pc, #64]	; (35b30 <ull_conn_rx+0x2a4>)
   35af0:	f7f9 ff8e 	bl	2fa10 <mem_release>
			if (conn->llcp_length.state ==
   35af4:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			conn->common.txn_lock = 0U;
   35af8:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
   35afc:	f003 0307 	and.w	r3, r3, #7
			conn->common.txn_lock = 0U;
   35b00:	f36f 0241 	bfc	r2, #1, #1
			if (conn->llcp_length.state ==
   35b04:	2b04      	cmp	r3, #4
			conn->common.txn_lock = 0U;
   35b06:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
   35b0a:	f47f af1b 	bne.w	35944 <ull_conn_rx+0xb8>
				return -EBUSY;
   35b0e:	f06f 000f 	mvn.w	r0, #15
   35b12:	e718      	b.n	35946 <ull_conn_rx+0xba>
		if (PDU_DATA_LLCTRL_LEN(ping_rsp) != pdu_rx->len) {
   35b14:	7f73      	ldrb	r3, [r6, #29]
   35b16:	2b01      	cmp	r3, #1
   35b18:	f47f af42 	bne.w	359a0 <ull_conn_rx+0x114>
		conn->procedure_expire = 0U;
   35b1c:	2200      	movs	r2, #0
   35b1e:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   35b22:	7133      	strb	r3, [r6, #4]
		break;
   35b24:	e70e      	b.n	35944 <ull_conn_rx+0xb8>
   35b26:	bf00      	nop
   35b28:	200014e8 	.word	0x200014e8
   35b2c:	00022060 	.word	0x00022060
   35b30:	20002638 	.word	0x20002638
		if (PDU_DATA_LLCTRL_LEN(phy_req) != pdu_rx->len) {
   35b34:	7f73      	ldrb	r3, [r6, #29]
   35b36:	2b03      	cmp	r3, #3
   35b38:	f47f af32 	bne.w	359a0 <ull_conn_rx+0x114>
		if (!conn->lll.role) {
   35b3c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   35b40:	2b00      	cmp	r3, #0
   35b42:	f2c0 8560 	blt.w	36606 <ull_conn_rx+0xd7a>
			if ((conn->llcp_phy.ack !=
   35b46:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
			     conn->llcp_phy.req) &&
   35b4a:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
			if ((conn->llcp_phy.ack !=
   35b4e:	4281      	cmp	r1, r0
   35b50:	d007      	beq.n	35b62 <ull_conn_rx+0x2d6>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   35b52:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
   35b56:	f002 0203 	and.w	r2, r2, #3
			     conn->llcp_phy.req) &&
   35b5a:	3a01      	subs	r2, #1
   35b5c:	2a02      	cmp	r2, #2
   35b5e:	f240 86bd 	bls.w	368dc <ull_conn_rx+0x1050>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   35b62:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   35b66:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   35b6a:	1a9b      	subs	r3, r3, r2
   35b6c:	f003 0303 	and.w	r3, r3, #3
   35b70:	2b02      	cmp	r3, #2
   35b72:	f000 869b 	beq.w	368ac <ull_conn_rx+0x1020>
				     LLCP_ENCRYPTION)) ||
   35b76:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   35b7a:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   35b7e:	429a      	cmp	r2, r3
   35b80:	f000 86b7 	beq.w	368f2 <ull_conn_rx+0x1066>
				nack = reject_ext_ind_send(conn, *rx,
   35b84:	232a      	movs	r3, #42	; 0x2a
   35b86:	2216      	movs	r2, #22
   35b88:	4631      	mov	r1, r6
   35b8a:	4620      	mov	r0, r4
}
   35b8c:	b003      	add	sp, #12
   35b8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
   35b92:	f7fe bf8d 	b.w	34ab0 <reject_ext_ind_send>
		if (PDU_DATA_LLCTRL_LEN(ping_req) != pdu_rx->len) {
   35b96:	7f75      	ldrb	r5, [r6, #29]
   35b98:	2d01      	cmp	r5, #1
   35b9a:	f47f af01 	bne.w	359a0 <ull_conn_rx+0x114>
	if (conn->common.txn_lock) {
   35b9e:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   35ba2:	0799      	lsls	r1, r3, #30
   35ba4:	d416      	bmi.n	35bd4 <ull_conn_rx+0x348>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   35ba6:	48b5      	ldr	r0, [pc, #724]	; (35e7c <ull_conn_rx+0x5f0>)
   35ba8:	f7f9 ff18 	bl	2f9dc <mem_acquire>
	if (!tx) {
   35bac:	4601      	mov	r1, r0
   35bae:	2800      	cmp	r0, #0
   35bb0:	f000 844b 	beq.w	3644a <ull_conn_rx+0xbbe>
	conn->common.txn_lock = 1U;
   35bb4:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   35bb8:	f043 0302 	orr.w	r3, r3, #2
   35bbc:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   35bc0:	7903      	ldrb	r3, [r0, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   35bc2:	7145      	strb	r5, [r0, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   35bc4:	f043 0303 	orr.w	r3, r3, #3
   35bc8:	7103      	strb	r3, [r0, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   35bca:	2313      	movs	r3, #19
   35bcc:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   35bce:	4620      	mov	r0, r4
   35bd0:	f7fe fdc6 	bl	34760 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   35bd4:	7135      	strb	r5, [r6, #4]
	return 0;
   35bd6:	e6b5      	b.n	35944 <ull_conn_rx+0xb8>
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
   35bd8:	7f73      	ldrb	r3, [r6, #29]
   35bda:	2b03      	cmp	r3, #3
   35bdc:	f47f aee0 	bne.w	359a0 <ull_conn_rx+0x114>
	switch (rej_ext_ind->reject_opcode) {
   35be0:	f896 3020 	ldrb.w	r3, [r6, #32]
   35be4:	3b03      	subs	r3, #3
   35be6:	2b13      	cmp	r3, #19
   35be8:	f63f aeaa 	bhi.w	35940 <ull_conn_rx+0xb4>
   35bec:	a201      	add	r2, pc, #4	; (adr r2, 35bf4 <ull_conn_rx+0x368>)
   35bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   35bf2:	bf00      	nop
   35bf4:	00036325 	.word	0x00036325
   35bf8:	00035941 	.word	0x00035941
   35bfc:	00035941 	.word	0x00035941
   35c00:	00035941 	.word	0x00035941
   35c04:	00035941 	.word	0x00035941
   35c08:	00035941 	.word	0x00035941
   35c0c:	00035941 	.word	0x00035941
   35c10:	00035941 	.word	0x00035941
   35c14:	00035941 	.word	0x00035941
   35c18:	00035941 	.word	0x00035941
   35c1c:	00035941 	.word	0x00035941
   35c20:	00035941 	.word	0x00035941
   35c24:	000362ab 	.word	0x000362ab
   35c28:	00035941 	.word	0x00035941
   35c2c:	00035941 	.word	0x00035941
   35c30:	00035941 	.word	0x00035941
   35c34:	00035941 	.word	0x00035941
   35c38:	0003626f 	.word	0x0003626f
   35c3c:	00035941 	.word	0x00035941
   35c40:	00036363 	.word	0x00036363
		if ((!IS_ENABLED(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG) &&
   35c44:	7f73      	ldrb	r3, [r6, #29]
   35c46:	2b09      	cmp	r3, #9
   35c48:	f47f aeaa 	bne.w	359a0 <ull_conn_rx+0x114>
   35c4c:	6a32      	ldr	r2, [r6, #32]
	feat &= LL_FEAT_BIT_MASK;
   35c4e:	498c      	ldr	r1, [pc, #560]	; (35e80 <ull_conn_rx+0x5f4>)
   35c50:	6a73      	ldr	r3, [r6, #36]	; 0x24
   35c52:	4311      	orrs	r1, r2
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   35c54:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
   35c58:	400a      	ands	r2, r1
   35c5a:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
   35c5e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   35c62:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
	feat &= LL_FEAT_BIT_MASK;
   35c66:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   35c6a:	401a      	ands	r2, r3
   35c6c:	f8c4 212c 	str.w	r2, [r4, #300]	; 0x12c
   35c70:	6a75      	ldr	r5, [r6, #36]	; 0x24
   35c72:	6a37      	ldr	r7, [r6, #32]
		feat_land_octet0(feat_get(&rsp->features[0]), ll_feat_get());
   35c74:	f7fc fcf8 	bl	32668 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   35c78:	f005 03ff 	and.w	r3, r5, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   35c7c:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_peer =
   35c80:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
	conn->common.fex_valid = 1U;
   35c84:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   35c88:	f043 0301 	orr.w	r3, r3, #1
   35c8c:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	conn->llcp_feature.ack = conn->llcp_feature.req;
   35c90:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
   35c94:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
	feat &= LL_FEAT_BIT_MASK;
   35c98:	4b79      	ldr	r3, [pc, #484]	; (35e80 <ull_conn_rx+0x5f4>)
   35c9a:	433b      	orrs	r3, r7
	feat_result = feat_to_keep & feat_octet0;
   35c9c:	4003      	ands	r3, r0
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   35c9e:	f027 02ff 	bic.w	r2, r7, #255	; 0xff
	feat_result &= 0xFF;
   35ca2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   35ca6:	4313      	orrs	r3, r2
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   35ca8:	f043 6307 	orr.w	r3, r3, #141557760	; 0x8700000
	feat_result &= 0xFF;
   35cac:	2200      	movs	r2, #0
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   35cae:	f443 2303 	orr.w	r3, r3, #536576	; 0x83000
	conn->procedure_expire = 0U;
   35cb2:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	conn->llcp_feature.features_peer =
   35cb6:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
}
   35cba:	e643      	b.n	35944 <ull_conn_rx+0xb8>
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
   35cbc:	7f73      	ldrb	r3, [r6, #29]
   35cbe:	2b02      	cmp	r3, #2
   35cc0:	f47f ae6e 	bne.w	359a0 <ull_conn_rx+0x114>
			    conn->llcp_conn_param.req) &&
   35cc4:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
		} else if ((conn->llcp_conn_param.ack !=
   35cc8:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   35ccc:	f896 3020 	ldrb.w	r3, [r6, #32]
		} else if ((conn->llcp_conn_param.ack !=
   35cd0:	4291      	cmp	r1, r2
   35cd2:	d002      	beq.n	35cda <ull_conn_rx+0x44e>
			    conn->llcp_conn_param.req) &&
   35cd4:	2b0f      	cmp	r3, #15
   35cd6:	f000 8519 	beq.w	3670c <ull_conn_rx+0xe80>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   35cda:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
   35cde:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
   35ce2:	4291      	cmp	r1, r2
   35ce4:	d002      	beq.n	35cec <ull_conn_rx+0x460>
   35ce6:	2b14      	cmp	r3, #20
   35ce8:	f000 85ee 	beq.w	368c8 <ull_conn_rx+0x103c>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   35cec:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
   35cf0:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
   35cf4:	4291      	cmp	r1, r2
   35cf6:	d002      	beq.n	35cfe <ull_conn_rx+0x472>
   35cf8:	2b16      	cmp	r3, #22
   35cfa:	f000 863d 	beq.w	36978 <ull_conn_rx+0x10ec>
			switch (llctrl->unknown_rsp.type) {
   35cfe:	2b12      	cmp	r3, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   35d00:	bf04      	itt	eq
   35d02:	2301      	moveq	r3, #1
   35d04:	7133      	strbeq	r3, [r6, #4]
		conn->procedure_expire = 0U;
   35d06:	2300      	movs	r3, #0
   35d08:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
		break;
   35d0c:	e61a      	b.n	35944 <ull_conn_rx+0xb8>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
   35d0e:	7f73      	ldrb	r3, [r6, #29]
   35d10:	2b18      	cmp	r3, #24
   35d12:	f47f ae45 	bne.w	359a0 <ull_conn_rx+0x114>
	return conn_upd_curr && (conn_upd_curr != conn);
   35d16:	485b      	ldr	r0, [pc, #364]	; (35e84 <ull_conn_rx+0x5f8>)
   35d18:	6803      	ldr	r3, [r0, #0]
   35d1a:	2b00      	cmp	r3, #0
   35d1c:	f000 83b6 	beq.w	3648c <ull_conn_rx+0xc00>
   35d20:	429c      	cmp	r4, r3
   35d22:	f000 83b3 	beq.w	3648c <ull_conn_rx+0xc00>
			nack = reject_ext_ind_send(conn, *rx,
   35d26:	2320      	movs	r3, #32
   35d28:	220f      	movs	r2, #15
   35d2a:	e72d      	b.n	35b88 <ull_conn_rx+0x2fc>
		if (PDU_DATA_LLCTRL_LEN(reject_ind) != pdu_rx->len) {
   35d2c:	7f73      	ldrb	r3, [r6, #29]
   35d2e:	2b02      	cmp	r3, #2
   35d30:	f47f ae36 	bne.w	359a0 <ull_conn_rx+0x114>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   35d34:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   35d38:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   35d3c:	429a      	cmp	r2, r3
   35d3e:	d004      	beq.n	35d4a <ull_conn_rx+0x4be>
   35d40:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   35d44:	2a03      	cmp	r2, #3
   35d46:	f000 8643 	beq.w	369d0 <ull_conn_rx+0x1144>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   35d4a:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
   35d4e:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   35d52:	4293      	cmp	r3, r2
   35d54:	f000 8440 	beq.w	365d8 <ull_conn_rx+0xd4c>
		rej_ext_ind->error_code = rej_ind->error_code;
   35d58:	f896 1020 	ldrb.w	r1, [r6, #32]
   35d5c:	f886 1021 	strb.w	r1, [r6, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   35d60:	2923      	cmp	r1, #35	; 0x23
   35d62:	d012      	beq.n	35d8a <ull_conn_rx+0x4fe>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   35d64:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   35d68:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   35d6c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   35d70:	f36f 0200 	bfc	r2, #0, #1
   35d74:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
		conn->procedure_expire = 0U;
   35d78:	2200      	movs	r2, #0
   35d7a:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   35d7e:	f3c3 0202 	ubfx	r2, r3, #0, #3
   35d82:	f362 1306 	bfi	r3, r2, #4, #3
   35d86:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	if (!conn->llcp_phy.cmd) {
   35d8a:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   35d8e:	075b      	lsls	r3, r3, #29
   35d90:	f57f add6 	bpl.w	35940 <ull_conn_rx+0xb4>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   35d94:	231c      	movs	r3, #28
   35d96:	7133      	strb	r3, [r6, #4]
	p->status = rej_ext_ind->error_code;
   35d98:	7731      	strb	r1, [r6, #28]
	p->tx = conn->lll.phy_tx;
   35d9a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   35d9e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   35da2:	7773      	strb	r3, [r6, #29]
	p->rx = conn->lll.phy_rx;
   35da4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   35da8:	f3c3 0302 	ubfx	r3, r3, #0, #3
   35dac:	77b3      	strb	r3, [r6, #30]
	if (err) {
   35dae:	e5c9      	b.n	35944 <ull_conn_rx+0xb8>
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
   35db0:	7f75      	ldrb	r5, [r6, #29]
   35db2:	2d06      	cmp	r5, #6
   35db4:	f47f adf4 	bne.w	359a0 <ull_conn_rx+0x114>
	if (!conn->llcp_version.tx) {
   35db8:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   35dbc:	07da      	lsls	r2, r3, #31
   35dbe:	f140 8551 	bpl.w	36864 <ull_conn_rx+0xfd8>
	} else if (!conn->llcp_version.rx) {
   35dc2:	f013 0302 	ands.w	r3, r3, #2
   35dc6:	f47f adbb 	bne.w	35940 <ull_conn_rx+0xb4>
		conn->llcp_version.ack = conn->llcp_version.req;
   35dca:	f894 2138 	ldrb.w	r2, [r4, #312]	; 0x138
   35dce:	f884 2139 	strb.w	r2, [r4, #313]	; 0x139
		conn->procedure_expire = 0U;
   35dd2:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_version.version_number = v->version_number;
   35dd6:	f896 2020 	ldrb.w	r2, [r6, #32]
	conn->llcp_version.rx = 1U;
   35dda:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
	conn->llcp_version.version_number = v->version_number;
   35dde:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   35de2:	f8d6 2021 	ldr.w	r2, [r6, #33]	; 0x21
   35de6:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
	conn->llcp_version.rx = 1U;
   35dea:	f043 0302 	orr.w	r3, r3, #2
   35dee:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	return 0;
   35df2:	e5a7      	b.n	35944 <ull_conn_rx+0xb8>
		if ((conn->llcp_req == conn->llcp_ack) ||
   35df4:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   35df8:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   35dfc:	4298      	cmp	r0, r3
   35dfe:	f43f adcf 	beq.w	359a0 <ull_conn_rx+0x114>
   35e02:	f894 00e6 	ldrb.w	r0, [r4, #230]	; 0xe6
   35e06:	2803      	cmp	r0, #3
   35e08:	f47f adca 	bne.w	359a0 <ull_conn_rx+0x114>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   35e0c:	7f70      	ldrb	r0, [r6, #29]
   35e0e:	2801      	cmp	r0, #1
   35e10:	f47f adc6 	bne.w	359a0 <ull_conn_rx+0x114>
		if (conn->lll.role) {
   35e14:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   35e18:	2900      	cmp	r1, #0
   35e1a:	f2c0 8562 	blt.w	368e2 <ull_conn_rx+0x1056>
			conn->llcp_enc.pause_rx = 0U;
   35e1e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
			conn->llcp_ack = conn->llcp_req;
   35e22:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
			conn->procedure_expire = 0U;
   35e26:	2100      	movs	r1, #0
			conn->llcp_enc.pause_rx = 0U;
   35e28:	f022 0203 	bic.w	r2, r2, #3
   35e2c:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
			conn->procedure_expire = 0U;
   35e30:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
		if (conn->llcp_enc.refresh) {
   35e34:	0757      	lsls	r7, r2, #29
   35e36:	f57f ad85 	bpl.w	35944 <ull_conn_rx+0xb8>
			conn->llcp_enc.refresh = 0U;
   35e3a:	f36f 0282 	bfc	r2, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   35e3e:	2319      	movs	r3, #25
			conn->llcp_enc.refresh = 0U;
   35e40:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   35e44:	7133      	strb	r3, [r6, #4]
   35e46:	e57d      	b.n	35944 <ull_conn_rx+0xb8>
	       (conn->lll.role &&
   35e48:	2800      	cmp	r0, #0
   35e4a:	f000 82bd 	beq.w	363c8 <ull_conn_rx+0xb3c>
   35e4e:	f1b9 0f03 	cmp.w	r9, #3
   35e52:	f200 82eb 	bhi.w	3642c <ull_conn_rx+0xba0>
   35e56:	f1b9 0f01 	cmp.w	r9, #1
   35e5a:	f67f ad79 	bls.w	35950 <ull_conn_rx+0xc4>
	switch (opcode) {
   35e5e:	f1b9 0f03 	cmp.w	r9, #3
   35e62:	f000 8109 	beq.w	36078 <ull_conn_rx+0x7ec>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
   35e66:	7f73      	ldrb	r3, [r6, #29]
   35e68:	2b02      	cmp	r3, #2
   35e6a:	f47f ad99 	bne.w	359a0 <ull_conn_rx+0x114>
	conn->llcp_terminate.reason_final =
   35e6e:	f896 2020 	ldrb.w	r2, [r6, #32]
   35e72:	f884 2143 	strb.w	r2, [r4, #323]	; 0x143
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   35e76:	2301      	movs	r3, #1
   35e78:	7133      	strb	r3, [r6, #4]
}
   35e7a:	e563      	b.n	35944 <ull_conn_rx+0xb8>
   35e7c:	20002638 	.word	0x20002638
   35e80:	087830d0 	.word	0x087830d0
   35e84:	200025f4 	.word	0x200025f4
   35e88:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (!conn->lll.role ||
   35e8c:	2b00      	cmp	r3, #0
   35e8e:	f6bf ad87 	bge.w	359a0 <ull_conn_rx+0x114>
   35e92:	7f75      	ldrb	r5, [r6, #29]
   35e94:	2d01      	cmp	r5, #1
   35e96:	f47f ad83 	bne.w	359a0 <ull_conn_rx+0x114>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   35e9a:	48ca      	ldr	r0, [pc, #808]	; (361c4 <ull_conn_rx+0x938>)
   35e9c:	f7f9 fd9e 	bl	2f9dc <mem_acquire>
		if (!tx) {
   35ea0:	2800      	cmp	r0, #0
   35ea2:	f000 82d2 	beq.w	3644a <ull_conn_rx+0xbbe>
	conn->llcp_enc.pause_rx = 1U;
   35ea6:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   35eaa:	f023 0305 	bic.w	r3, r3, #5
   35eae:	f043 0305 	orr.w	r3, r3, #5
   35eb2:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   35eb6:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   35eba:	f36f 03c3 	bfc	r3, #3, #1
   35ebe:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   35ec2:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   35ec4:	7145      	strb	r5, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   35ec6:	f043 0303 	orr.w	r3, r3, #3
   35eca:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
   35ecc:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   35ed0:	220b      	movs	r2, #11
   35ed2:	71c2      	strb	r2, [r0, #7]
	if (
   35ed4:	2b00      	cmp	r3, #0
   35ed6:	f000 82cf 	beq.w	36478 <ull_conn_rx+0xbec>
	    !conn->llcp_enc.pause_tx &&
   35eda:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   35ede:	0795      	lsls	r5, r2, #30
   35ee0:	f100 82ca 	bmi.w	36478 <ull_conn_rx+0xbec>
	    !conn->llcp_phy.pause_tx &&
   35ee4:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   35ee8:	07d1      	lsls	r1, r2, #31
   35eea:	f100 82c5 	bmi.w	36478 <ull_conn_rx+0xbec>
		if (conn->tx_head == conn->tx_data) {
   35eee:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   35ef2:	4293      	cmp	r3, r2
   35ef4:	f000 86fb 	beq.w	36cee <ull_conn_rx+0x1462>
		} else if (!conn->tx_ctrl) {
   35ef8:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   35efc:	2a00      	cmp	r2, #0
   35efe:	f47f ad8b 	bne.w	35a18 <ull_conn_rx+0x18c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   35f02:	791a      	ldrb	r2, [r3, #4]
   35f04:	f002 0203 	and.w	r2, r2, #3
   35f08:	2a03      	cmp	r2, #3
   35f0a:	f000 87a8 	beq.w	36e5e <ull_conn_rx+0x15d2>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   35f0e:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   35f12:	e581      	b.n	35a18 <ull_conn_rx+0x18c>
   35f14:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (!conn->lll.role ||
   35f18:	2b00      	cmp	r3, #0
   35f1a:	f6bf ad41 	bge.w	359a0 <ull_conn_rx+0x114>
   35f1e:	7f77      	ldrb	r7, [r6, #29]
   35f20:	2f09      	cmp	r7, #9
   35f22:	f47f ad3d 	bne.w	359a0 <ull_conn_rx+0x114>
	if (conn->common.txn_lock) {
   35f26:	f894 80d8 	ldrb.w	r8, [r4, #216]	; 0xd8
   35f2a:	f018 0802 	ands.w	r8, r8, #2
   35f2e:	f47f ad07 	bne.w	35940 <ull_conn_rx+0xb4>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   35f32:	48a4      	ldr	r0, [pc, #656]	; (361c4 <ull_conn_rx+0x938>)
   35f34:	f7f9 fd52 	bl	2f9dc <mem_acquire>
	if (!tx) {
   35f38:	4605      	mov	r5, r0
   35f3a:	2800      	cmp	r0, #0
   35f3c:	f000 8285 	beq.w	3644a <ull_conn_rx+0xbbe>
	conn->common.txn_lock = 1U;
   35f40:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	feat &= LL_FEAT_BIT_MASK;
   35f44:	49a0      	ldr	r1, [pc, #640]	; (361c8 <ull_conn_rx+0x93c>)
	conn->common.txn_lock = 1U;
   35f46:	f043 0302 	orr.w	r3, r3, #2
   35f4a:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
   35f4e:	6a32      	ldr	r2, [r6, #32]
   35f50:	6a73      	ldr	r3, [r6, #36]	; 0x24
	feat &= LL_FEAT_BIT_MASK;
   35f52:	4311      	orrs	r1, r2
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   35f54:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
   35f58:	400a      	ands	r2, r1
   35f5a:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
   35f5e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   35f62:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
	feat &= LL_FEAT_BIT_MASK;
   35f66:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   35f6a:	401a      	ands	r2, r3
   35f6c:	f8c4 212c 	str.w	r2, [r4, #300]	; 0x12c
   35f70:	f8d6 9024 	ldr.w	r9, [r6, #36]	; 0x24
   35f74:	f8d6 a020 	ldr.w	sl, [r6, #32]
		feat_land_octet0(feat_get(&req->features[0]), ll_feat_get());
   35f78:	f7fc fb76 	bl	32668 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   35f7c:	f009 03ff 	and.w	r3, r9, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   35f80:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_peer =
   35f84:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
	feat &= LL_FEAT_BIT_MASK;
   35f88:	4b8f      	ldr	r3, [pc, #572]	; (361c8 <ull_conn_rx+0x93c>)
   35f8a:	ea4a 0303 	orr.w	r3, sl, r3
	feat_result = feat_to_keep & feat_octet0;
   35f8e:	4003      	ands	r3, r0
	feat_result &= 0xFF;
   35f90:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   35f94:	f02a 0aff 	bic.w	sl, sl, #255	; 0xff
   35f98:	ea43 030a 	orr.w	r3, r3, sl
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   35f9c:	f043 6307 	orr.w	r3, r3, #141557760	; 0x8700000
   35fa0:	f443 2303 	orr.w	r3, r3, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   35fa4:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
	conn->common.fex_valid = 1U;
   35fa8:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   35fac:	f043 0301 	orr.w	r3, r3, #1
   35fb0:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   35fb4:	792b      	ldrb	r3, [r5, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   35fb6:	716f      	strb	r7, [r5, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   35fb8:	f043 0303 	orr.w	r3, r3, #3
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   35fbc:	2208      	movs	r2, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   35fbe:	712b      	strb	r3, [r5, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   35fc0:	18a8      	adds	r0, r5, r2
   35fc2:	4641      	mov	r1, r8
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   35fc4:	71ef      	strb	r7, [r5, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   35fc6:	f00e fd87 	bl	44ad8 <memset>
	feat = feat_land_octet0(ll_feat_get(),
   35fca:	f7fc fb4d 	bl	32668 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   35fce:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	dst[0] = val;
   35fd2:	7329      	strb	r1, [r5, #12]
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   35fd4:	f063 03ff 	orn	r3, r3, #255	; 0xff
   35fd8:	4003      	ands	r3, r0
   35fda:	60ab      	str	r3, [r5, #8]
	dst[1] = val >> 8;
   35fdc:	f8a5 800d 	strh.w	r8, [r5, #13]
   35fe0:	f885 800f 	strb.w	r8, [r5, #15]
	ctrl_tx_sec_enqueue(conn, tx);
   35fe4:	4629      	mov	r1, r5
   35fe6:	4620      	mov	r0, r4
   35fe8:	f7fe fbba 	bl	34760 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   35fec:	2301      	movs	r3, #1
   35fee:	7133      	strb	r3, [r6, #4]
	return 0;
   35ff0:	e4a8      	b.n	35944 <ull_conn_rx+0xb8>
   35ff2:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (!conn->lll.role ||
   35ff6:	2b00      	cmp	r3, #0
   35ff8:	f6bf acd2 	bge.w	359a0 <ull_conn_rx+0x114>
   35ffc:	7f73      	ldrb	r3, [r6, #29]
   35ffe:	2b05      	cmp	r3, #5
   36000:	f47f acce 	bne.w	359a0 <ull_conn_rx+0x114>
	if (!((ind->c_to_p_phy | ind->p_to_c_phy) & 0x07)) {
   36004:	f896 2020 	ldrb.w	r2, [r6, #32]
   36008:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   3600c:	4313      	orrs	r3, r2
   3600e:	f013 0307 	ands.w	r3, r3, #7
   36012:	f040 84f5 	bne.w	36a00 <ull_conn_rx+0x1174>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   36016:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   3601a:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   3601e:	428a      	cmp	r2, r1
   36020:	f43f ac8e 	beq.w	35940 <ull_conn_rx+0xb4>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   36024:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   36028:	f002 0203 	and.w	r2, r2, #3
   3602c:	2a02      	cmp	r2, #2
   3602e:	f47f ac87 	bne.w	35940 <ull_conn_rx+0xb4>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   36032:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
		conn->llcp_phy.ack = conn->llcp_phy.req;
   36036:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   3603a:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
		conn->procedure_expire = 0U;
   3603e:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
		conn->llcp_phy.pause_tx = 0U;
   36042:	f363 0100 	bfi	r1, r3, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   36046:	4610      	mov	r0, r2
   36048:	f362 1006 	bfi	r0, r2, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   3604c:	f884 11bf 	strb.w	r1, [r4, #447]	; 0x1bf
		if (!conn->llcp_phy.cmd) {
   36050:	0749      	lsls	r1, r1, #29
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   36052:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
   36056:	f3c2 0202 	ubfx	r2, r2, #0, #3
		if (!conn->llcp_phy.cmd) {
   3605a:	f57f acea 	bpl.w	35a32 <ull_conn_rx+0x1a6>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3605e:	6829      	ldr	r1, [r5, #0]
   36060:	201c      	movs	r0, #28
   36062:	7108      	strb	r0, [r1, #4]
		p->status = 0U;
   36064:	7733      	strb	r3, [r6, #28]
		p->tx = conn->lll.phy_tx;
   36066:	7772      	strb	r2, [r6, #29]
		p->rx = conn->lll.phy_rx;
   36068:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   3606c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   36070:	77b3      	strb	r3, [r6, #30]
		if (err) {
   36072:	e467      	b.n	35944 <ull_conn_rx+0xb8>
   36074:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (!conn->lll.role ||
   36078:	2b00      	cmp	r3, #0
   3607a:	f6bf ac91 	bge.w	359a0 <ull_conn_rx+0x114>
   3607e:	7f73      	ldrb	r3, [r6, #29]
   36080:	2b17      	cmp	r3, #23
   36082:	f47f ac8d 	bne.w	359a0 <ull_conn_rx+0x114>
		if (unlikely(((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   36086:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   3608a:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3608e:	1a9b      	subs	r3, r3, r2
   36090:	f003 0303 	and.w	r3, r3, #3
   36094:	2b02      	cmp	r3, #2
   36096:	f000 85bf 	beq.w	36c18 <ull_conn_rx+0x138c>
		memcpy(&conn->llcp_enc.rand[0],
   3609a:	2208      	movs	r2, #8
   3609c:	f106 0120 	add.w	r1, r6, #32
   360a0:	f204 1069 	addw	r0, r4, #361	; 0x169
   360a4:	f00e fd0d 	bl	44ac2 <memcpy>
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   360a8:	8d33      	ldrh	r3, [r6, #40]	; 0x28
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   360aa:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   360ae:	f8a4 3167 	strh.w	r3, [r4, #359]	; 0x167
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   360b2:	6829      	ldr	r1, [r5, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   360b4:	2301      	movs	r3, #1
   360b6:	f363 0201 	bfi	r2, r3, #0, #2
   360ba:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   360be:	710b      	strb	r3, [r1, #4]
		conn->llcp_ack -= 2U;
   360c0:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
		conn->llcp_type = LLCP_ENCRYPTION;
   360c4:	2103      	movs	r1, #3
		conn->llcp_ack -= 2U;
   360c6:	3b02      	subs	r3, #2
   360c8:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		memcpy(&conn->llcp.encryption.skd[0],
   360cc:	2208      	movs	r2, #8
		conn->llcp_type = LLCP_ENCRYPTION;
   360ce:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
		memcpy(&conn->llcp.encryption.skd[0],
   360d2:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
   360d6:	f106 012a 	add.w	r1, r6, #42	; 0x2a
   360da:	f00e fcf2 	bl	44ac2 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   360de:	2204      	movs	r2, #4
   360e0:	f106 0132 	add.w	r1, r6, #50	; 0x32
   360e4:	f104 0094 	add.w	r0, r4, #148	; 0x94
   360e8:	f00e fceb 	bl	44ac2 <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   360ec:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
		conn->procedure_expire = conn->procedure_reload;
   360f0:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
   360f4:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->llcp_enc.pause_rx = 1U;
   360f8:	f043 0301 	orr.w	r3, r3, #1
   360fc:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
		break;
   36100:	e420      	b.n	35944 <ull_conn_rx+0xb8>
   36102:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (!conn->lll.role ||
   36106:	2b00      	cmp	r3, #0
   36108:	f6bf ac4a 	bge.w	359a0 <ull_conn_rx+0x114>
   3610c:	7f73      	ldrb	r3, [r6, #29]
   3610e:	2b0c      	cmp	r3, #12
   36110:	f47f ac46 	bne.w	359a0 <ull_conn_rx+0x114>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   36114:	f8b6 2029 	ldrh.w	r2, [r6, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   36118:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   3611a:	1ad3      	subs	r3, r2, r3
   3611c:	0419      	lsls	r1, r3, #16
   3611e:	f100 8468 	bmi.w	369f2 <ull_conn_rx+0x1166>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   36122:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   36126:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   3612a:	1a5b      	subs	r3, r3, r1
   3612c:	f003 0303 	and.w	r3, r3, #3
   36130:	2b02      	cmp	r3, #2
   36132:	f000 84dc 	beq.w	36aee <ull_conn_rx+0x1262>
	if (!conn_upd_curr) {
   36136:	4b25      	ldr	r3, [pc, #148]	; (361cc <ull_conn_rx+0x940>)
   36138:	6819      	ldr	r1, [r3, #0]
   3613a:	2900      	cmp	r1, #0
   3613c:	f000 84ff 	beq.w	36b3e <ull_conn_rx+0x12b2>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   36140:	f896 3020 	ldrb.w	r3, [r6, #32]
   36144:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   36148:	f8b6 3021 	ldrh.w	r3, [r6, #33]	; 0x21
   3614c:	f240 41e2 	movw	r1, #1250	; 0x4e2
   36150:	fb01 f303 	mul.w	r3, r1, r3
	conn->llcp_cu.win_offset_us =
   36154:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   36158:	f8d6 3023 	ldr.w	r3, [r6, #35]	; 0x23
	conn->llcp_cu.interval =
   3615c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   36160:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   36164:	f896 1027 	ldrb.w	r1, [r6, #39]	; 0x27
   36168:	f896 0028 	ldrb.w	r0, [r6, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   3616c:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   36170:	f023 030f 	bic.w	r3, r3, #15
   36174:	f043 0308 	orr.w	r3, r3, #8
   36178:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
	conn->llcp_cu.ack--;
   3617c:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   36180:	ea41 2200 	orr.w	r2, r1, r0, lsl #8
	conn->llcp_cu.timeout =
   36184:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
	conn->llcp_cu.ack--;
   36188:	3b01      	subs	r3, #1
	link->mem = conn->llcp_rx;
   3618a:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
	conn->llcp_cu.ack--;
   3618e:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
	link->mem = conn->llcp_rx;
   36192:	607a      	str	r2, [r7, #4]
	(*rx)->hdr.link = link;
   36194:	682a      	ldr	r2, [r5, #0]
   36196:	6017      	str	r7, [r2, #0]
	conn->llcp_rx = *rx;
   36198:	682a      	ldr	r2, [r5, #0]
   3619a:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	*rx = NULL;
   3619e:	2300      	movs	r3, #0
   361a0:	602b      	str	r3, [r5, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   361a2:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   361a6:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   361aa:	4293      	cmp	r3, r2
   361ac:	f43f adab 	beq.w	35d06 <ull_conn_rx+0x47a>
	    ((conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) ||
   361b0:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   361b4:	f003 030e 	and.w	r3, r3, #14
   361b8:	2b04      	cmp	r3, #4
   361ba:	f47f ada4 	bne.w	35d06 <ull_conn_rx+0x47a>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   361be:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
		if (err) {
   361c2:	e5a0      	b.n	35d06 <ull_conn_rx+0x47a>
   361c4:	20002638 	.word	0x20002638
   361c8:	087830d0 	.word	0x087830d0
   361cc:	200025f4 	.word	0x200025f4
   361d0:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (!conn->lll.role ||
   361d4:	2b00      	cmp	r3, #0
   361d6:	f6bf abe3 	bge.w	359a0 <ull_conn_rx+0x114>
   361da:	7f73      	ldrb	r3, [r6, #29]
   361dc:	2b08      	cmp	r3, #8
   361de:	f47f abdf 	bne.w	359a0 <ull_conn_rx+0x114>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   361e2:	f8b6 5025 	ldrh.w	r5, [r6, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   361e6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   361e8:	1aeb      	subs	r3, r5, r3
   361ea:	041b      	lsls	r3, r3, #16
   361ec:	f100 8401 	bmi.w	369f2 <ull_conn_rx+0x1166>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   361f0:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   361f4:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   361f8:	1a9b      	subs	r3, r3, r2
   361fa:	f003 0303 	and.w	r3, r3, #3
   361fe:	2b02      	cmp	r3, #2
   36200:	f000 8475 	beq.w	36aee <ull_conn_rx+0x1262>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   36204:	2205      	movs	r2, #5
   36206:	f106 0120 	add.w	r1, r6, #32
   3620a:	f104 00e9 	add.w	r0, r4, #233	; 0xe9
   3620e:	f00e fc58 	bl	44ac2 <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   36212:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_ack -= 2U;
   36216:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
	conn->llcp.chan_map.instant = instant;
   3621a:	f8a4 50ee 	strh.w	r5, [r4, #238]	; 0xee
	conn->llcp.chan_map.initiate = 0U;
   3621e:	f36f 0200 	bfc	r2, #0, #1
   36222:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_type = LLCP_CHAN_MAP;
   36226:	2102      	movs	r1, #2
	conn->llcp_ack -= 2U;
   36228:	3b02      	subs	r3, #2
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3622a:	2201      	movs	r2, #1
	conn->llcp_type = LLCP_CHAN_MAP;
   3622c:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	conn->llcp_ack -= 2U;
   36230:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   36234:	7132      	strb	r2, [r6, #4]
		if (err) {
   36236:	f7ff bb85 	b.w	35944 <ull_conn_rx+0xb8>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   3623a:	7f75      	ldrb	r5, [r6, #29]
   3623c:	2d01      	cmp	r5, #1
   3623e:	f47f abaf 	bne.w	359a0 <ull_conn_rx+0x114>
	} else if (!conn->lll.role) {
   36242:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   36246:	2b00      	cmp	r3, #0
   36248:	f2c0 80f7 	blt.w	3643a <ull_conn_rx+0xbae>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3624c:	48a4      	ldr	r0, [pc, #656]	; (364e0 <ull_conn_rx+0xc54>)
   3624e:	f7f9 fbc5 	bl	2f9dc <mem_acquire>
		if (!tx) {
   36252:	2800      	cmp	r0, #0
   36254:	f000 80f9 	beq.w	3644a <ull_conn_rx+0xbbe>
	conn->llcp_enc.pause_rx = 1U;
   36258:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   3625c:	f043 0301 	orr.w	r3, r3, #1
   36260:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   36264:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   36268:	f023 0318 	bic.w	r3, r3, #24
   3626c:	e627      	b.n	35ebe <ull_conn_rx+0x632>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   3626e:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   36272:	f894 21ad 	ldrb.w	r2, [r4, #429]	; 0x1ad
   36276:	429a      	cmp	r2, r3
   36278:	f43f ab62 	beq.w	35940 <ull_conn_rx+0xb4>
	conn->procedure_expire = 0U;
   3627c:	2100      	movs	r1, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   3627e:	2209      	movs	r2, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   36280:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
	conn->procedure_expire = 0U;
   36284:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   36288:	7772      	strb	r2, [r6, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   3628a:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   3628e:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   36292:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   36296:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
   3629a:	84f3      	strh	r3, [r6, #38]	; 0x26
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   3629c:	2415      	movs	r4, #21
   3629e:	77f4      	strb	r4, [r6, #31]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   362a0:	8430      	strh	r0, [r6, #32]
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   362a2:	84b1      	strh	r1, [r6, #36]	; 0x24
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   362a4:	8472      	strh	r2, [r6, #34]	; 0x22
	if (err) {
   362a6:	f7ff bb4d 	b.w	35944 <ull_conn_rx+0xb8>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   362aa:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   362ae:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   362b2:	4293      	cmp	r3, r2
   362b4:	f43f ab44 	beq.w	35940 <ull_conn_rx+0xb4>
	if (!lll->role && (rej_ext_ind->error_code ==
   362b8:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
	return ((uint16_t)src[1] << 8) | src[0];
   362bc:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   362c0:	2900      	cmp	r1, #0
   362c2:	f2c0 8199 	blt.w	365f8 <ull_conn_rx+0xd6c>
   362c6:	2b1a      	cmp	r3, #26
   362c8:	f000 8566 	beq.w	36d98 <ull_conn_rx+0x150c>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   362cc:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   362d0:	f003 010f 	and.w	r1, r3, #15
   362d4:	2904      	cmp	r1, #4
   362d6:	d106      	bne.n	362e6 <ull_conn_rx+0xa5a>
	conn_upd_curr = NULL;
   362d8:	4982      	ldr	r1, [pc, #520]	; (364e4 <ull_conn_rx+0xc58>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   362da:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   362de:	2200      	movs	r2, #0
   362e0:	600a      	str	r2, [r1, #0]
		conn->procedure_expire = 0U;
   362e2:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	if (!conn->llcp_conn_param.cmd) {
   362e6:	06d8      	lsls	r0, r3, #27
   362e8:	f57f ab2a 	bpl.w	35940 <ull_conn_rx+0xb4>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   362ec:	2318      	movs	r3, #24
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   362ee:	f01c 0f01 	tst.w	ip, #1
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   362f2:	7133      	strb	r3, [r6, #4]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   362f4:	f040 8466 	bne.w	36bc4 <ull_conn_rx+0x1338>
	cu->status = rej_ext_ind->error_code;
   362f8:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   362fc:	7733      	strb	r3, [r6, #28]
	cu->interval = lll->interval;
   362fe:	f8d4 202a 	ldr.w	r2, [r4, #42]	; 0x2a
   36302:	f8c6 201e 	str.w	r2, [r6, #30]
	cu->timeout = conn->supervision_reload *
   36306:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
		      lll->interval * 125U / 1000;
   3630a:	b292      	uxth	r2, r2
	cu->timeout = conn->supervision_reload *
   3630c:	fb02 f303 	mul.w	r3, r2, r3
		      lll->interval * 125U / 1000;
   36310:	227d      	movs	r2, #125	; 0x7d
   36312:	fb02 f303 	mul.w	r3, r2, r3
   36316:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3631a:	fbb3 f3f2 	udiv	r3, r3, r2
	cu->timeout = conn->supervision_reload *
   3631e:	8473      	strh	r3, [r6, #34]	; 0x22
	if (err) {
   36320:	f7ff bb10 	b.w	35944 <ull_conn_rx+0xb8>
		if ((conn->llcp_ack != conn->llcp_req) &&
   36324:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   36328:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   3632c:	4293      	cmp	r3, r2
   3632e:	f43f ab07 	beq.w	35940 <ull_conn_rx+0xb4>
   36332:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   36336:	2b03      	cmp	r3, #3
   36338:	f47f ab02 	bne.w	35940 <ull_conn_rx+0xb4>
	conn->llcp_enc.pause_rx = 0U;
   3633c:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
   36340:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
	conn->llcp_enc.pause_rx = 0U;
   36344:	f023 0303 	bic.w	r3, r3, #3
	conn->procedure_expire = 0U;
   36348:	2100      	movs	r1, #0
	conn->llcp_enc.pause_rx = 0U;
   3634a:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
   3634e:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   36352:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   36356:	f886 3020 	strb.w	r3, [r6, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   3635a:	220d      	movs	r2, #13
   3635c:	77f2      	strb	r2, [r6, #31]
	if (err) {
   3635e:	f7ff baf1 	b.w	35944 <ull_conn_rx+0xb8>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   36362:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   36366:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   3636a:	428b      	cmp	r3, r1
   3636c:	f43f aae8 	beq.w	35940 <ull_conn_rx+0xb4>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   36370:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   36374:	2a23      	cmp	r2, #35	; 0x23
   36376:	d012      	beq.n	3639e <ull_conn_rx+0xb12>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   36378:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   3637c:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   36380:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   36384:	f36f 0100 	bfc	r1, #0, #1
   36388:	f884 11bf 	strb.w	r1, [r4, #447]	; 0x1bf
		conn->procedure_expire = 0U;
   3638c:	2100      	movs	r1, #0
   3638e:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   36392:	f3c3 0102 	ubfx	r1, r3, #0, #3
   36396:	f361 1306 	bfi	r3, r1, #4, #3
   3639a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	if (!conn->llcp_phy.cmd) {
   3639e:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   363a2:	075d      	lsls	r5, r3, #29
   363a4:	f57f aacc 	bpl.w	35940 <ull_conn_rx+0xb4>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   363a8:	231c      	movs	r3, #28
   363aa:	7133      	strb	r3, [r6, #4]
	p->status = rej_ext_ind->error_code;
   363ac:	7732      	strb	r2, [r6, #28]
   363ae:	e4f4      	b.n	35d9a <ull_conn_rx+0x50e>
		if (!conn->tx_ctrl) {
   363b0:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   363b4:	2b00      	cmp	r3, #0
   363b6:	f47f ab2f 	bne.w	35a18 <ull_conn_rx+0x18c>
			tx->next = conn->tx_head;
   363ba:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   363bc:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   363c0:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   363c4:	f7ff bb32 	b.w	35a2c <ull_conn_rx+0x1a0>
		((!conn->llcp_enc.refresh &&
   363c8:	f1b9 0f07 	cmp.w	r9, #7
   363cc:	f43f ac76 	beq.w	35cbc <ull_conn_rx+0x430>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   363d0:	f1b9 0f02 	cmp.w	r9, #2
   363d4:	f43f ad47 	beq.w	35e66 <ull_conn_rx+0x5da>
   363d8:	f1a9 0006 	sub.w	r0, r9, #6
   363dc:	b2c7      	uxtb	r7, r0
   363de:	2f0b      	cmp	r7, #11
   363e0:	f63f aab6 	bhi.w	35950 <ull_conn_rx+0xc4>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   363e4:	4940      	ldr	r1, [pc, #256]	; (364e8 <ull_conn_rx+0xc5c>)
   363e6:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   363ea:	07ff      	lsls	r7, r7, #31
   363ec:	f53f aab0 	bmi.w	35950 <ull_conn_rx+0xc4>
	switch (opcode) {
   363f0:	280b      	cmp	r0, #11
   363f2:	f63f aad5 	bhi.w	359a0 <ull_conn_rx+0x114>
   363f6:	a701      	add	r7, pc, #4	; (adr r7, 363fc <ull_conn_rx+0xb70>)
   363f8:	f857 f020 	ldr.w	pc, [r7, r0, lsl #2]
   363fc:	00035df5 	.word	0x00035df5
   36400:	00035cbd 	.word	0x00035cbd
   36404:	00035f19 	.word	0x00035f19
   36408:	00035c45 	.word	0x00035c45
   3640c:	00035e8d 	.word	0x00035e8d
   36410:	0003623b 	.word	0x0003623b
   36414:	00035db1 	.word	0x00035db1
   36418:	00035d2d 	.word	0x00035d2d
   3641c:	000359a1 	.word	0x000359a1
   36420:	00035d0f 	.word	0x00035d0f
   36424:	000359a1 	.word	0x000359a1
   36428:	00035bd9 	.word	0x00035bd9
   3642c:	f1b9 0f0b 	cmp.w	r9, #11
   36430:	d1d2      	bne.n	363d8 <ull_conn_rx+0xb4c>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   36432:	7f73      	ldrb	r3, [r6, #29]
   36434:	2b01      	cmp	r3, #1
   36436:	f47f aab3 	bne.w	359a0 <ull_conn_rx+0x114>
		conn->lll.enc_tx = 0;
   3643a:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   3643e:	f36f 1304 	bfc	r3, #4, #1
   36442:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		goto pause_enc_rsp_send_exit;
   36446:	f7ff ba7b 	b.w	35940 <ull_conn_rx+0xb4>
		*err = -ENOBUFS;
   3644a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   3644e:	f7ff ba7a 	b.w	35946 <ull_conn_rx+0xba>
			conn->tx_data = conn->tx_data->next;
   36452:	681a      	ldr	r2, [r3, #0]
   36454:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   36458:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   3645c:	2a00      	cmp	r2, #0
   3645e:	f47f aadb 	bne.w	35a18 <ull_conn_rx+0x18c>
			tx->next = conn->tx_head->next;
   36462:	681a      	ldr	r2, [r3, #0]
   36464:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   36466:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   36468:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   3646a:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
   3646e:	2b00      	cmp	r3, #0
   36470:	f47f aa66 	bne.w	35940 <ull_conn_rx+0xb4>
   36474:	f7ff bada 	b.w	35a2c <ull_conn_rx+0x1a0>
		if (!conn->tx_ctrl) {
   36478:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   3647c:	2a00      	cmp	r2, #0
   3647e:	f47f aacb 	bne.w	35a18 <ull_conn_rx+0x18c>
			tx->next = conn->tx_head;
   36482:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   36484:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   36488:	f7ff bacb 	b.w	35a22 <ull_conn_rx+0x196>
		if (!conn->lll.role) {
   3648c:	f994 7039 	ldrsb.w	r7, [r4, #57]	; 0x39
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   36490:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   36494:	f894 5185 	ldrb.w	r5, [r4, #389]	; 0x185
		if (!conn->lll.role) {
   36498:	2f00      	cmp	r7, #0
   3649a:	f2c0 817e 	blt.w	3679a <ull_conn_rx+0xf0e>
			if ((conn->llcp_conn_param.req !=
   3649e:	42a9      	cmp	r1, r5
   364a0:	d008      	beq.n	364b4 <ull_conn_rx+0xc28>
			    ((conn->llcp_conn_param.state ==
   364a2:	f894 7186 	ldrb.w	r7, [r4, #390]	; 0x186
					conn->llcp_conn_param.ack) &&
   364a6:	2151      	movs	r1, #81	; 0x51
   364a8:	f007 070f 	and.w	r7, r7, #15
   364ac:	40f9      	lsrs	r1, r7
   364ae:	07cf      	lsls	r7, r1, #31
   364b0:	f100 829b 	bmi.w	369ea <ull_conn_rx+0x115e>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   364b4:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
   364b8:	f894 70e5 	ldrb.w	r7, [r4, #229]	; 0xe5
   364bc:	1bc9      	subs	r1, r1, r7
   364be:	f001 0103 	and.w	r1, r1, #3
   364c2:	2902      	cmp	r1, #2
   364c4:	f000 83a2 	beq.w	36c0c <ull_conn_rx+0x1380>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   364c8:	f894 71bc 	ldrb.w	r7, [r4, #444]	; 0x1bc
   364cc:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
   364d0:	428f      	cmp	r7, r1
   364d2:	f000 83af 	beq.w	36c34 <ull_conn_rx+0x13a8>
				nack = reject_ext_ind_send(conn, *rx,
   364d6:	232a      	movs	r3, #42	; 0x2a
   364d8:	220f      	movs	r2, #15
   364da:	f7ff bb55 	b.w	35b88 <ull_conn_rx+0x2fc>
   364de:	bf00      	nop
   364e0:	20002638 	.word	0x20002638
   364e4:	200025f4 	.word	0x200025f4
   364e8:	0004a2d0 	.word	0x0004a2d0
	if (conn->common.txn_lock) {
   364ec:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   364f0:	079b      	lsls	r3, r3, #30
   364f2:	f53f aa25 	bmi.w	35940 <ull_conn_rx+0xb4>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   364f6:	48d7      	ldr	r0, [pc, #860]	; (36854 <ull_conn_rx+0xfc8>)
   364f8:	f7f9 fa70 	bl	2f9dc <mem_acquire>
	if (!tx) {
   364fc:	4603      	mov	r3, r0
   364fe:	2800      	cmp	r0, #0
   36500:	d0a3      	beq.n	3644a <ull_conn_rx+0xbbe>
	conn->common.txn_lock = 1U;
   36502:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   36506:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
	eff_rx_octets = conn->lll.max_rx_octets;
   3650a:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
   3650e:	f8b4 a058 	ldrh.w	sl, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   36512:	f8b4 b05e 	ldrh.w	fp, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   36516:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
	conn->common.txn_lock = 1U;
   3651a:	f042 0202 	orr.w	r2, r2, #2
   3651e:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   36522:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
	if (/* Local idle, and Peer request then complete the Peer procedure
   36526:	428a      	cmp	r2, r1
	eff_rx_octets = conn->lll.max_rx_octets;
   36528:	4686      	mov	lr, r0
	if (/* Local idle, and Peer request then complete the Peer procedure
   3652a:	f040 846f 	bne.w	36e0c <ull_conn_rx+0x1580>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   3652e:	8c30      	ldrh	r0, [r6, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   36530:	281a      	cmp	r0, #26
   36532:	f240 821f 	bls.w	36974 <ull_conn_rx+0x10e8>
			eff_tx_octets = MIN(max_rx_octets,
   36536:	f8b4 10d2 	ldrh.w	r1, [r4, #210]	; 0xd2
   3653a:	4281      	cmp	r1, r0
   3653c:	bf28      	it	cs
   3653e:	4601      	movcs	r1, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   36540:	8cb0      	ldrh	r0, [r6, #36]	; 0x24
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   36542:	f8b6 c026 	ldrh.w	ip, [r6, #38]	; 0x26
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   36546:	281a      	cmp	r0, #26
		if (lr_rx_time >= PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN,
   36548:	8c70      	ldrh	r0, [r6, #34]	; 0x22
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   3654a:	46f1      	mov	r9, lr
   3654c:	bf88      	it	hi
   3654e:	f04f 0e1b 	movhi.w	lr, #27
		if (lr_rx_time >= PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN,
   36552:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   36556:	bf34      	ite	cc
   36558:	4640      	movcc	r0, r8
   3655a:	f44f 70a4 	movcs.w	r0, #328	; 0x148
		if (lr_tx_time >= PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN,
   3655e:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
   36562:	bf34      	ite	cc
   36564:	46dc      	movcc	ip, fp
   36566:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   3656a:	45f1      	cmp	r9, lr
   3656c:	f000 82c1 	beq.w	36af2 <ull_conn_rx+0x1266>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   36570:	3a01      	subs	r2, #1
   36572:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->llcp_length.rx_octets = eff_rx_octets;
   36576:	f8a4 e1b0 	strh.w	lr, [r4, #432]	; 0x1b0
			link->mem = conn->llcp_rx;
   3657a:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
			conn->llcp_length.tx_octets = eff_tx_octets;
   3657e:	f8a4 11b2 	strh.w	r1, [r4, #434]	; 0x1b2
			conn->llcp_length.rx_time = eff_rx_time;
   36582:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
			conn->llcp_length.tx_time = eff_tx_time;
   36586:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
			if (tx) {
   3658a:	2b00      	cmp	r3, #0
   3658c:	f000 82ff 	beq.w	36b8e <ull_conn_rx+0x1302>
				conn->llcp_length.state =
   36590:	f894 61ae 	ldrb.w	r6, [r4, #430]	; 0x1ae
   36594:	f04f 0805 	mov.w	r8, #5
   36598:	f368 0602 	bfi	r6, r8, #0, #3
   3659c:	f884 61ae 	strb.w	r6, [r4, #430]	; 0x1ae
			link->mem = conn->llcp_rx;
   365a0:	607a      	str	r2, [r7, #4]
			(*rx)->hdr.link = link;
   365a2:	682a      	ldr	r2, [r5, #0]
   365a4:	6017      	str	r7, [r2, #0]
			conn->llcp_rx = *rx;
   365a6:	682a      	ldr	r2, [r5, #0]
   365a8:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
			*rx = NULL;
   365ac:	2200      	movs	r2, #0
   365ae:	602a      	str	r2, [r5, #0]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   365b0:	791a      	ldrb	r2, [r3, #4]
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   365b2:	81d8      	strh	r0, [r3, #14]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   365b4:	f042 0203 	orr.w	r2, r2, #3
	ctrl_tx_sec_enqueue(conn, tx);
   365b8:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   365ba:	711a      	strb	r2, [r3, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   365bc:	2409      	movs	r4, #9
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   365be:	2215      	movs	r2, #21
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   365c0:	8199      	strh	r1, [r3, #12]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   365c2:	f8a3 e008 	strh.w	lr, [r3, #8]
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   365c6:	f8a3 c00a 	strh.w	ip, [r3, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   365ca:	4619      	mov	r1, r3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   365cc:	715c      	strb	r4, [r3, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   365ce:	71da      	strb	r2, [r3, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   365d0:	f7fe f8c6 	bl	34760 <ctrl_tx_sec_enqueue>
}
   365d4:	f7ff b9b6 	b.w	35944 <ull_conn_rx+0xb8>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   365d8:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   365dc:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   365e0:	4293      	cmp	r3, r2
   365e2:	f43f ae44 	beq.w	3626e <ull_conn_rx+0x9e2>
		rej_ext_ind->error_code = rej_ind->error_code;
   365e6:	f896 3020 	ldrb.w	r3, [r6, #32]
   365ea:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   365ee:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   365f2:	2900      	cmp	r1, #0
   365f4:	f6bf ae67 	bge.w	362c6 <ull_conn_rx+0xa3a>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   365f8:	2b23      	cmp	r3, #35	; 0x23
			conn->periph.ticks_to_offset =
   365fa:	bf1c      	itt	ne
   365fc:	f8d4 31a8 	ldrne.w	r3, [r4, #424]	; 0x1a8
   36600:	f8c4 30e0 	strne.w	r3, [r4, #224]	; 0xe0
   36604:	e662      	b.n	362cc <ull_conn_rx+0xa40>
	if (conn->common.txn_lock) {
   36606:	f894 70d8 	ldrb.w	r7, [r4, #216]	; 0xd8
   3660a:	f017 0702 	ands.w	r7, r7, #2
   3660e:	f47f a997 	bne.w	35940 <ull_conn_rx+0xb4>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   36612:	4890      	ldr	r0, [pc, #576]	; (36854 <ull_conn_rx+0xfc8>)
   36614:	f7f9 f9e2 	bl	2f9dc <mem_acquire>
	if (!tx) {
   36618:	4603      	mov	r3, r0
   3661a:	2800      	cmp	r0, #0
   3661c:	f43f af15 	beq.w	3644a <ull_conn_rx+0xbbe>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   36620:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
	conn->common.txn_lock = 1U;
   36624:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
	if (conn->llcp_phy.ack ==
   36628:	f894 e1bd 	ldrb.w	lr, [r4, #445]	; 0x1bd
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   3662c:	2002      	movs	r0, #2
   3662e:	f360 0101 	bfi	r1, r0, #0, #2
	conn->common.txn_lock = 1U;
   36632:	f042 0202 	orr.w	r2, r2, #2
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   36636:	f884 11be 	strb.w	r1, [r4, #446]	; 0x1be
	if (conn->llcp_phy.ack ==
   3663a:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
	conn->common.txn_lock = 1U;
   3663e:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   36642:	f894 21c0 	ldrb.w	r2, [r4, #448]	; 0x1c0
	if (conn->llcp_phy.ack ==
   36646:	4571      	cmp	r1, lr
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   36648:	f3c2 0502 	ubfx	r5, r2, #0, #3
   3664c:	f002 0c07 	and.w	ip, r2, #7
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   36650:	f3c2 00c2 	ubfx	r0, r2, #3, #3
	if (conn->llcp_phy.ack ==
   36654:	d114      	bne.n	36680 <ull_conn_rx+0xdf4>
		conn->llcp_phy.ack--;
   36656:	3901      	subs	r1, #1
		conn->llcp_phy.cmd = 0U;
   36658:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack--;
   3665c:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->llcp_phy.tx =
   36660:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
		conn->llcp_phy.cmd = 0U;
   36664:	f367 0282 	bfi	r2, r7, #2, #1
		conn->llcp_phy.tx =
   36668:	f36c 0184 	bfi	r1, ip, #2, #3
		conn->llcp_phy.rx =
   3666c:	f360 1147 	bfi	r1, r0, #5, #3
		conn->llcp_phy.cmd = 0U;
   36670:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
		conn->procedure_expire =
   36674:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
		conn->llcp_phy.rx =
   36678:	f884 11be 	strb.w	r1, [r4, #446]	; 0x1be
		conn->procedure_expire =
   3667c:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	conn->llcp_phy.rx &= p->tx_phys;
   36680:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
	conn->llcp_phy.tx &= p->rx_phys;
   36684:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
	conn->llcp_phy.rx &= p->tx_phys;
   36688:	f896 7020 	ldrb.w	r7, [r6, #32]
	conn->llcp_phy.tx &= p->rx_phys;
   3668c:	f3c1 0c82 	ubfx	ip, r1, #2, #3
   36690:	ea02 020c 	and.w	r2, r2, ip
	conn->llcp_phy.rx &= p->tx_phys;
   36694:	ea07 1751 	and.w	r7, r7, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   36698:	0092      	lsls	r2, r2, #2
   3669a:	f001 0103 	and.w	r1, r1, #3
   3669e:	ea42 1247 	orr.w	r2, r2, r7, lsl #5
   366a2:	430a      	orrs	r2, r1
   366a4:	f884 21be 	strb.w	r2, [r4, #446]	; 0x1be
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   366a8:	2203      	movs	r2, #3
   366aa:	715a      	strb	r2, [r3, #5]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   366ac:	7258      	strb	r0, [r3, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   366ae:	7918      	ldrb	r0, [r3, #4]
	    conn->tx_head &&
   366b0:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   366b4:	721d      	strb	r5, [r3, #8]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   366b6:	2117      	movs	r1, #23
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   366b8:	f040 0003 	orr.w	r0, r0, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   366bc:	71d9      	strb	r1, [r3, #7]
		if (!conn->tx_ctrl) {
   366be:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   366c2:	7118      	strb	r0, [r3, #4]
	if (
   366c4:	2a00      	cmp	r2, #0
   366c6:	f000 80f8 	beq.w	368ba <ull_conn_rx+0x102e>
	    !conn->llcp_enc.pause_tx &&
   366ca:	f894 0166 	ldrb.w	r0, [r4, #358]	; 0x166
	    conn->tx_head &&
   366ce:	0785      	lsls	r5, r0, #30
   366d0:	f100 80f3 	bmi.w	368ba <ull_conn_rx+0x102e>
	    !conn->llcp_phy.pause_tx &&
   366d4:	f894 01bf 	ldrb.w	r0, [r4, #447]	; 0x1bf
   366d8:	07c0      	lsls	r0, r0, #31
   366da:	f100 80ee 	bmi.w	368ba <ull_conn_rx+0x102e>
		if (conn->tx_head == conn->tx_data) {
   366de:	f8d4 01d0 	ldr.w	r0, [r4, #464]	; 0x1d0
   366e2:	4282      	cmp	r2, r0
   366e4:	f000 832b 	beq.w	36d3e <ull_conn_rx+0x14b2>
		} else if (!conn->tx_ctrl) {
   366e8:	2900      	cmp	r1, #0
   366ea:	f000 83c0 	beq.w	36e6e <ull_conn_rx+0x15e2>
	tx->next = conn->tx_ctrl_last->next;
   366ee:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   366f2:	6811      	ldr	r1, [r2, #0]
   366f4:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last->next = tx;
   366f6:	6013      	str	r3, [r2, #0]
	if (!tx->next) {
   366f8:	681a      	ldr	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   366fa:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
	if (!tx->next) {
   366fe:	2a00      	cmp	r2, #0
   36700:	f47f a91e 	bne.w	35940 <ull_conn_rx+0xb4>
		conn->tx_data_last = tx;
   36704:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   36708:	f7ff b91a 	b.w	35940 <ull_conn_rx+0xb4>
			conn->llcp_conn_param.disabled = 1U;
   3670c:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   36710:	f043 0320 	orr.w	r3, r3, #32
   36714:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
			if (!conn->lll.role) {
   36718:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3671c:	2b00      	cmp	r3, #0
   3671e:	f2c0 8211 	blt.w	36b44 <ull_conn_rx+0x12b8>
				LL_ASSERT(conn->llcp_cu.req ==
   36722:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   36726:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   3672a:	429a      	cmp	r2, r3
   3672c:	d00e      	beq.n	3674c <ull_conn_rx+0xec0>
   3672e:	4a4a      	ldr	r2, [pc, #296]	; (36858 <ull_conn_rx+0xfcc>)
   36730:	494a      	ldr	r1, [pc, #296]	; (3685c <ull_conn_rx+0xfd0>)
   36732:	484b      	ldr	r0, [pc, #300]	; (36860 <ull_conn_rx+0xfd4>)
   36734:	f641 33f5 	movw	r3, #7157	; 0x1bf5
   36738:	f00c f8c4 	bl	428c4 <printk>
   3673c:	4040      	eors	r0, r0
   3673e:	f380 8811 	msr	BASEPRI, r0
   36742:	f04f 0003 	mov.w	r0, #3
   36746:	df02      	svc	2
   36748:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_conn_param.state =
   3674c:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   36750:	2106      	movs	r1, #6
   36752:	f361 0203 	bfi	r2, r1, #0, #4
				conn->llcp_cu.ack--;
   36756:	3b01      	subs	r3, #1
				conn->llcp_cu.win_size = 1U;
   36758:	2101      	movs	r1, #1
				conn->llcp_cu.ack--;
   3675a:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_cu.win_size = 1U;
   3675e:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   36762:	6828      	ldr	r0, [r5, #0]
				conn->llcp_conn_param.state =
   36764:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   36768:	f3c2 1300 	ubfx	r3, r2, #4, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   3676c:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
   36770:	00db      	lsls	r3, r3, #3
   36772:	f022 020f 	bic.w	r2, r2, #15
   36776:	430b      	orrs	r3, r1
   36778:	4313      	orrs	r3, r2
   3677a:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
				conn->llcp_cu.timeout =
   3677e:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
					conn->llcp_conn_param.interval_max;
   36782:	f8d4 218a 	ldr.w	r2, [r4, #394]	; 0x18a
				conn->llcp_cu.timeout =
   36786:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
				conn->llcp_cu.win_offset_us = 0U;
   3678a:	2300      	movs	r3, #0
				conn->llcp_cu.interval =
   3678c:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
				conn->llcp_cu.win_offset_us = 0U;
   36790:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   36794:	7101      	strb	r1, [r0, #4]
				break;
   36796:	f7ff b8d5 	b.w	35944 <ull_conn_rx+0xb8>
		} else if ((conn->llcp_conn_param.req ==
   3679a:	42a9      	cmp	r1, r5
   3679c:	d005      	beq.n	367aa <ull_conn_rx+0xf1e>
			    conn->llcp_conn_param.ack) ||
   3679e:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   367a2:	f012 0f0b 	tst.w	r2, #11
   367a6:	f47f a8cb 	bne.w	35940 <ull_conn_rx+0xb4>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   367aa:	f8d6 8020 	ldr.w	r8, [r6, #32]
   367ae:	f8d6 e024 	ldr.w	lr, [r6, #36]	; 0x24
				cpr->preferred_periodicity;
   367b2:	f896 9028 	ldrb.w	r9, [r6, #40]	; 0x28
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   367b6:	fa1f f288 	uxth.w	r2, r8
   367ba:	2a05      	cmp	r2, #5
   367bc:	d972      	bls.n	368a4 <ull_conn_rx+0x1018>
   367be:	ea4f 4718 	mov.w	r7, r8, lsr #16
   367c2:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
   367c6:	d86d      	bhi.n	368a4 <ull_conn_rx+0x1018>
			    (interval_max > 3200) ||
   367c8:	42ba      	cmp	r2, r7
   367ca:	d86b      	bhi.n	368a4 <ull_conn_rx+0x1018>
   367cc:	fa1f fc8e 	uxth.w	ip, lr
			    (interval_min > interval_max) ||
   367d0:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   367d4:	d266      	bcs.n	368a4 <ull_conn_rx+0x1018>
   367d6:	ea4f 421e 	mov.w	r2, lr, lsr #16
			    (latency > 499) ||
   367da:	f1a2 010a 	sub.w	r1, r2, #10
   367de:	b289      	uxth	r1, r1
   367e0:	f640 4a76 	movw	sl, #3190	; 0xc76
   367e4:	4551      	cmp	r1, sl
   367e6:	d85d      	bhi.n	368a4 <ull_conn_rx+0x1018>
			     ((latency + 1) * interval_max)) ||
   367e8:	f10c 0101 	add.w	r1, ip, #1
   367ec:	b289      	uxth	r1, r1
   367ee:	fb07 f101 	mul.w	r1, r7, r1
			    (timeout < 10) || (timeout > 3200) ||
   367f2:	ebb1 0f82 	cmp.w	r1, r2, lsl #2
   367f6:	d255      	bcs.n	368a4 <ull_conn_rx+0x1018>
			     ((latency + 1) * interval_max)) ||
   367f8:	45b9      	cmp	r9, r7
   367fa:	d853      	bhi.n	368a4 <ull_conn_rx+0x1018>
			conn->llcp_conn_param.interval_min = interval_min;
   367fc:	e9c4 8e62 	strd	r8, lr, [r4, #392]	; 0x188
			conn->llcp_conn_param.preferred_periodicity =
   36800:	f884 9190 	strb.w	r9, [r4, #400]	; 0x190
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   36804:	f8d6 e029 	ldr.w	lr, [r6, #41]	; 0x29
   36808:	f8d6 102d 	ldr.w	r1, [r6, #45]	; 0x2d
   3680c:	f8d6 8031 	ldr.w	r8, [r6, #49]	; 0x31
			conn->llcp_conn_param.reference_conn_event_count =
   36810:	f8c4 819a 	str.w	r8, [r4, #410]	; 0x19a
   36814:	f8c4 e192 	str.w	lr, [r4, #402]	; 0x192
   36818:	f8c4 1196 	str.w	r1, [r4, #406]	; 0x196
				sys_le16_to_cpu(cpr->offset5);
   3681c:	f896 1035 	ldrb.w	r1, [r6, #53]	; 0x35
   36820:	f896 e036 	ldrb.w	lr, [r6, #54]	; 0x36
   36824:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
			conn->llcp_conn_param.offset5 =
   36828:	f8a4 119e 	strh.w	r1, [r4, #414]	; 0x19e
			if ((conn->llcp_conn_param.interval_max !=
   3682c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
   3682e:	42b9      	cmp	r1, r7
   36830:	f000 832a 	beq.w	36e88 <ull_conn_rx+0x15fc>
				conn->llcp_conn_param.state =
   36834:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   36838:	2103      	movs	r1, #3
   3683a:	f361 0203 	bfi	r2, r1, #0, #4
   3683e:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			conn->llcp_conn_param.ack--;
   36842:	3d01      	subs	r5, #1
   36844:	f884 5185 	strb.w	r5, [r4, #389]	; 0x185
	if (!conn_upd_curr) {
   36848:	2b00      	cmp	r3, #0
   3684a:	f47f a87b 	bne.w	35944 <ull_conn_rx+0xb8>
		conn_upd_curr = conn;
   3684e:	6004      	str	r4, [r0, #0]
   36850:	f7ff b878 	b.w	35944 <ull_conn_rx+0xb8>
   36854:	20002638 	.word	0x20002638
   36858:	0004a0dc 	.word	0x0004a0dc
   3685c:	0004a228 	.word	0x0004a228
   36860:	00049c68 	.word	0x00049c68
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   36864:	48df      	ldr	r0, [pc, #892]	; (36be4 <ull_conn_rx+0x1358>)
   36866:	f7f9 f8b9 	bl	2f9dc <mem_acquire>
		if (!tx) {
   3686a:	4601      	mov	r1, r0
   3686c:	2800      	cmp	r0, #0
   3686e:	f43f adec 	beq.w	3644a <ull_conn_rx+0xbbe>
		conn->llcp_version.tx = 1U;
   36872:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   36876:	f043 0301 	orr.w	r3, r3, #1
   3687a:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3687e:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->len =
   36880:	7145      	strb	r5, [r0, #5]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   36882:	f043 0303 	orr.w	r3, r3, #3
   36886:	7103      	strb	r3, [r0, #4]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   36888:	f640 420c 	movw	r2, #3084	; 0xc0c
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   3688c:	4bd6      	ldr	r3, [pc, #856]	; (36be8 <ull_conn_rx+0x135c>)
   3688e:	f8c0 3009 	str.w	r3, [r0, #9]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   36892:	f8a0 2007 	strh.w	r2, [r0, #7]
		ctrl_tx_sec_enqueue(conn, tx);
   36896:	4620      	mov	r0, r4
   36898:	f7fd ff62 	bl	34760 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3689c:	2301      	movs	r3, #1
   3689e:	7133      	strb	r3, [r6, #4]
   368a0:	f7ff ba99 	b.w	35dd6 <ull_conn_rx+0x54a>
				nack = reject_ext_ind_send(conn, *rx,
   368a4:	231e      	movs	r3, #30
   368a6:	220f      	movs	r2, #15
   368a8:	f7ff b96e 	b.w	35b88 <ull_conn_rx+0x2fc>
				      0x03) == 0x02) &&
   368ac:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   368b0:	2b03      	cmp	r3, #3
   368b2:	f47f a967 	bne.w	35b84 <ull_conn_rx+0x2f8>
   368b6:	f7ff b95e 	b.w	35b76 <ull_conn_rx+0x2ea>
		if (!conn->tx_ctrl) {
   368ba:	2900      	cmp	r1, #0
   368bc:	f47f af17 	bne.w	366ee <ull_conn_rx+0xe62>
			tx->next = conn->tx_head;
   368c0:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl = tx;
   368c2:	e9c4 3371 	strd	r3, r3, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   368c6:	e717      	b.n	366f8 <ull_conn_rx+0xe6c>
			conn->llcp_length.disabled = 1U;
   368c8:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
   368cc:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->llcp_length.disabled = 1U;
   368d0:	f043 0308 	orr.w	r3, r3, #8
   368d4:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
   368d8:	f7ff ba15 	b.w	35d06 <ull_conn_rx+0x47a>
				nack = reject_ext_ind_send(conn, *rx,
   368dc:	2323      	movs	r3, #35	; 0x23
   368de:	f7ff b952 	b.w	35b86 <ull_conn_rx+0x2fa>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   368e2:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   368e6:	f36f 0301 	bfc	r3, #0, #2
   368ea:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   368ee:	f7ff baa1 	b.w	35e34 <ull_conn_rx+0x5a8>
				conn->llcp_phy.state =
   368f2:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
				if (conn->llcp_phy.ack ==
   368f6:	4281      	cmp	r1, r0
				conn->llcp_phy.state =
   368f8:	f043 0303 	orr.w	r3, r3, #3
   368fc:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (conn->llcp_phy.ack ==
   36900:	d111      	bne.n	36926 <ull_conn_rx+0x109a>
					conn->llcp_phy.tx =
   36902:	f8b4 21be 	ldrh.w	r2, [r4, #446]	; 0x1be
						conn->phy_pref_rx;
   36906:	f894 01c0 	ldrb.w	r0, [r4, #448]	; 0x1c0
					conn->llcp_phy.ack--;
   3690a:	1e4b      	subs	r3, r1, #1
					conn->llcp_phy.tx =
   3690c:	f422 629f 	bic.w	r2, r2, #1272	; 0x4f8
					conn->llcp_phy.ack--;
   36910:	f884 31bd 	strb.w	r3, [r4, #445]	; 0x1bd
					conn->llcp_phy.tx =
   36914:	f240 43fc 	movw	r3, #1276	; 0x4fc
   36918:	f022 0204 	bic.w	r2, r2, #4
   3691c:	ea03 0380 	and.w	r3, r3, r0, lsl #2
   36920:	4313      	orrs	r3, r2
   36922:	f8a4 31be 	strh.w	r3, [r4, #446]	; 0x1be
				conn->llcp_phy.rx &= p->tx_phys;
   36926:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   3692a:	f896 1020 	ldrb.w	r1, [r6, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   3692e:	f3c3 0082 	ubfx	r0, r3, #2, #3
				conn->llcp_phy.rx &= p->tx_phys;
   36932:	ea01 1153 	and.w	r1, r1, r3, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   36936:	f003 0203 	and.w	r2, r3, #3
   3693a:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   3693e:	4003      	ands	r3, r0
   36940:	009b      	lsls	r3, r3, #2
   36942:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   36946:	4313      	orrs	r3, r2
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   36948:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   3694c:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   36950:	d001      	beq.n	36956 <ull_conn_rx+0x10ca>
   36952:	2b1f      	cmp	r3, #31
   36954:	d805      	bhi.n	36962 <ull_conn_rx+0x10d6>
					conn->llcp_phy.tx = 0;
   36956:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   3695a:	f003 0303 	and.w	r3, r3, #3
   3695e:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				conn->llcp_phy.pause_tx = 1U;
   36962:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   36966:	2201      	movs	r2, #1
				conn->llcp_phy.pause_tx = 1U;
   36968:	4313      	orrs	r3, r2
   3696a:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3696e:	7132      	strb	r2, [r6, #4]
   36970:	f7fe bfe8 	b.w	35944 <ull_conn_rx+0xb8>
   36974:	4651      	mov	r1, sl
   36976:	e5e3      	b.n	36540 <ull_conn_rx+0xcb4>
			lll->phy_tx_time = lll->phy_tx;
   36978:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
			conn->llcp_phy.pause_tx = 0U;
   3697c:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
			conn->llcp_phy.ack = conn->llcp_phy.req;
   36980:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
			conn->llcp_phy.pause_tx = 0U;
   36984:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   36988:	460a      	mov	r2, r1
			conn->llcp_phy.pause_tx = 0U;
   3698a:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   3698e:	f361 1206 	bfi	r2, r1, #4, #3
   36992:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			if (conn->llcp_phy.cmd) {
   36996:	f013 0f04 	tst.w	r3, #4
			conn->llcp_phy.pause_tx = 0U;
   3699a:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
			lll->phy_tx_time = lll->phy_tx;
   3699e:	f3c1 0102 	ubfx	r1, r1, #0, #3
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   369a2:	682b      	ldr	r3, [r5, #0]
			if (conn->llcp_phy.cmd) {
   369a4:	f000 810a 	beq.w	36bbc <ull_conn_rx+0x1330>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   369a8:	221c      	movs	r2, #28
   369aa:	711a      	strb	r2, [r3, #4]
				p->status = 0U;
   369ac:	2300      	movs	r3, #0
   369ae:	7733      	strb	r3, [r6, #28]
				p->tx = lll->phy_tx;
   369b0:	7771      	strb	r1, [r6, #29]
				p->rx = lll->phy_rx;
   369b2:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   369b6:	f3c3 0302 	ubfx	r3, r3, #0, #3
   369ba:	77b3      	strb	r3, [r6, #30]
   369bc:	f7ff b9a3 	b.w	35d06 <ull_conn_rx+0x47a>
	    ((pdu_data_tx->llctrl.opcode !=
   369c0:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   369c2:	2a03      	cmp	r2, #3
   369c4:	f43f ad4d 	beq.w	36462 <ull_conn_rx+0xbd6>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   369c8:	2a0a      	cmp	r2, #10
   369ca:	f47f a81e 	bne.w	35a0a <ull_conn_rx+0x17e>
   369ce:	e548      	b.n	36462 <ull_conn_rx+0xbd6>
	conn->llcp_enc.pause_rx = 0U;
   369d0:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
   369d4:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	conn->procedure_expire = 0U;
   369d8:	2100      	movs	r1, #0
	conn->llcp_enc.pause_rx = 0U;
   369da:	f022 0203 	bic.w	r2, r2, #3
   369de:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
   369e2:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
	if (err) {
   369e6:	f7fe bfad 	b.w	35944 <ull_conn_rx+0xb8>
				nack = reject_ext_ind_send(conn, *rx,
   369ea:	2323      	movs	r3, #35	; 0x23
   369ec:	220f      	movs	r2, #15
   369ee:	f7ff b8cb 	b.w	35b88 <ull_conn_rx+0x2fc>
		err = BT_HCI_ERR_INSTANT_PASSED;
   369f2:	2328      	movs	r3, #40	; 0x28
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   369f4:	2201      	movs	r2, #1
   369f6:	7132      	strb	r2, [r6, #4]
			conn->llcp_terminate.reason_final = err;
   369f8:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
   369fc:	f7fe bfa2 	b.w	35944 <ull_conn_rx+0xb8>
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   36a00:	2101      	movs	r1, #1
   36a02:	f10d 0007 	add.w	r0, sp, #7
	phy = ind->c_to_p_phy;
   36a06:	f88d 2007 	strb.w	r2, [sp, #7]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   36a0a:	f7f9 f9c7 	bl	2fd9c <util_ones_count_get>
   36a0e:	2801      	cmp	r0, #1
   36a10:	f200 80f4 	bhi.w	36bfc <ull_conn_rx+0x1370>
	phy = ind->p_to_c_phy;
   36a14:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   36a18:	f88d 3007 	strb.w	r3, [sp, #7]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   36a1c:	f10d 0007 	add.w	r0, sp, #7
   36a20:	2101      	movs	r1, #1
   36a22:	f7f9 f9bb 	bl	2fd9c <util_ones_count_get>
   36a26:	2801      	cmp	r0, #1
   36a28:	f200 80e8 	bhi.w	36bfc <ull_conn_rx+0x1370>
	instant = sys_le16_to_cpu(ind->instant);
   36a2c:	8c71      	ldrh	r1, [r6, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   36a2e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   36a30:	1acb      	subs	r3, r1, r3
   36a32:	041b      	lsls	r3, r3, #16
   36a34:	f100 81ab 	bmi.w	36d8e <ull_conn_rx+0x1502>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   36a38:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   36a3c:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   36a40:	1a9b      	subs	r3, r3, r2
   36a42:	f003 0303 	and.w	r3, r3, #3
   36a46:	2b02      	cmp	r3, #2
   36a48:	f000 8219 	beq.w	36e7e <ull_conn_rx+0x15f2>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   36a4c:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
   36a50:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   36a54:	4283      	cmp	r3, r0
   36a56:	d018      	beq.n	36a8a <ull_conn_rx+0x11fe>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   36a58:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   36a5c:	f003 0303 	and.w	r3, r3, #3
   36a60:	2b02      	cmp	r3, #2
   36a62:	d112      	bne.n	36a8a <ull_conn_rx+0x11fe>
		conn->llcp_phy.pause_tx = 0U;
   36a64:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   36a68:	f884 01bd 	strb.w	r0, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   36a6c:	f36f 0300 	bfc	r3, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   36a70:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
		conn->llcp_phy.pause_tx = 0U;
   36a74:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   36a78:	f3c3 0380 	ubfx	r3, r3, #2, #1
   36a7c:	f363 0041 	bfi	r0, r3, #1, #1
		conn->procedure_expire = 0U;
   36a80:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   36a82:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
		conn->procedure_expire = 0U;
   36a86:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp.phy_upd_ind.tx = ind->p_to_c_phy;
   36a8a:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
	conn->llcp.phy_upd_ind.rx = ind->c_to_p_phy;
   36a8e:	f896 0020 	ldrb.w	r0, [r6, #32]
	conn->llcp.phy_upd_ind.instant = instant;
   36a92:	f8a4 10ea 	strh.w	r1, [r4, #234]	; 0xea
	conn->llcp.phy_upd_ind.initiate = 0U;
   36a96:	009b      	lsls	r3, r3, #2
   36a98:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   36a9c:	f003 031c 	and.w	r3, r3, #28
   36aa0:	f001 0102 	and.w	r1, r1, #2
   36aa4:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
   36aa8:	430b      	orrs	r3, r1
   36aaa:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	link->mem = conn->llcp_rx;
   36aae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   36ab2:	607b      	str	r3, [r7, #4]
	(*rx)->hdr.link = link;
   36ab4:	682b      	ldr	r3, [r5, #0]
   36ab6:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   36ab8:	6829      	ldr	r1, [r5, #0]
   36aba:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
	*rx = NULL;
   36abe:	2300      	movs	r3, #0
   36ac0:	602b      	str	r3, [r5, #0]
	if (conn->llcp.phy_upd_ind.tx) {
   36ac2:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
	conn->llcp_ack -= 2U;
   36ac6:	3a02      	subs	r2, #2
	conn->llcp_type = LLCP_PHY_UPD;
   36ac8:	2106      	movs	r1, #6
	if (conn->llcp.phy_upd_ind.tx) {
   36aca:	f013 0f1c 	tst.w	r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
   36ace:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	conn->llcp_ack -= 2U;
   36ad2:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
	if (conn->llcp.phy_upd_ind.tx) {
   36ad6:	f43e af35 	beq.w	35944 <ull_conn_rx+0xb8>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   36ada:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
   36ade:	f3c3 0382 	ubfx	r3, r3, #2, #3
   36ae2:	f363 1206 	bfi	r2, r3, #4, #3
   36ae6:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
		if (err) {
   36aea:	f7fe bf2b 	b.w	35944 <ull_conn_rx+0xb8>
		err = BT_HCI_ERR_DIFF_TRANS_COLLISION;
   36aee:	232a      	movs	r3, #42	; 0x2a
   36af0:	e780      	b.n	369f4 <ull_conn_rx+0x1168>
			conn->procedure_expire = 0U;
   36af2:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   36af4:	4551      	cmp	r1, sl
			conn->llcp_length.ack = conn->llcp_length.req;
   36af6:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->procedure_expire = 0U;
   36afa:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   36afe:	f000 8111 	beq.w	36d24 <ull_conn_rx+0x1498>
			conn->lll.max_rx_time = eff_rx_time;
   36b02:	f8a4 c05e 	strh.w	ip, [r4, #94]	; 0x5e
			if (tx) {
   36b06:	2b00      	cmp	r3, #0
   36b08:	f000 8100 	beq.w	36d0c <ull_conn_rx+0x1480>
					(conn->llcp_length.req - 1);
   36b0c:	3a01      	subs	r2, #1
				conn->llcp_length.ack =
   36b0e:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
				conn->llcp_length.state =
   36b12:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
				conn->llcp_length.rx_octets = eff_rx_octets;
   36b16:	f8a4 e1b0 	strh.w	lr, [r4, #432]	; 0x1b0
				conn->llcp_length.state =
   36b1a:	2503      	movs	r5, #3
   36b1c:	f365 0202 	bfi	r2, r5, #0, #3
				conn->llcp_length.tx_octets = eff_tx_octets;
   36b20:	f8a4 11b2 	strh.w	r1, [r4, #434]	; 0x1b2
				conn->llcp_length.rx_time = eff_rx_time;
   36b24:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
				conn->llcp_length.tx_time = eff_tx_time;
   36b28:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
				conn->llcp_length.state =
   36b2c:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   36b30:	f8a6 e020 	strh.w	lr, [r6, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   36b34:	84b1      	strh	r1, [r6, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   36b36:	f8a6 c022 	strh.w	ip, [r6, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   36b3a:	84f0      	strh	r0, [r6, #38]	; 0x26
	if (tx) {
   36b3c:	e538      	b.n	365b0 <ull_conn_rx+0xd24>
		conn_upd_curr = conn;
   36b3e:	601c      	str	r4, [r3, #0]
   36b40:	f7ff bafe 	b.w	36140 <ull_conn_rx+0x8b4>
	conn_upd_curr = NULL;
   36b44:	4b29      	ldr	r3, [pc, #164]	; (36bec <ull_conn_rx+0x1360>)
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   36b46:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   36b4a:	2200      	movs	r2, #0
   36b4c:	601a      	str	r2, [r3, #0]
			if (!conn->llcp_conn_param.cmd) {
   36b4e:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   36b52:	06da      	lsls	r2, r3, #27
   36b54:	f57e aef4 	bpl.w	35940 <ull_conn_rx+0xb4>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   36b58:	2318      	movs	r3, #24
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   36b5a:	f01c 0f01 	tst.w	ip, #1
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   36b5e:	7133      	strb	r3, [r6, #4]
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   36b60:	f040 8107 	bne.w	36d72 <ull_conn_rx+0x14e6>
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   36b64:	231a      	movs	r3, #26
   36b66:	7733      	strb	r3, [r6, #28]
			cu->interval = lll->interval;
   36b68:	f8d4 202a 	ldr.w	r2, [r4, #42]	; 0x2a
   36b6c:	f8c6 201e 	str.w	r2, [r6, #30]
			cu->timeout = conn->supervision_reload *
   36b70:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
				      lll->interval * 125U / 1000;
   36b74:	b292      	uxth	r2, r2
			cu->timeout = conn->supervision_reload *
   36b76:	fb02 f303 	mul.w	r3, r2, r3
				      lll->interval * 125U / 1000;
   36b7a:	227d      	movs	r2, #125	; 0x7d
   36b7c:	fb02 f303 	mul.w	r3, r2, r3
   36b80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   36b84:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   36b88:	8473      	strh	r3, [r6, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   36b8a:	f7ff b8bc 	b.w	35d06 <ull_conn_rx+0x47a>
				conn->lll.max_tx_octets = eff_tx_octets;
   36b8e:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->llcp_length.state =
   36b92:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
				conn->lll.max_tx_time = eff_tx_time;
   36b96:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
				conn->llcp_length.state =
   36b9a:	2004      	movs	r0, #4
   36b9c:	f360 0102 	bfi	r1, r0, #0, #3
   36ba0:	f884 11ae 	strb.w	r1, [r4, #430]	; 0x1ae
			link->mem = conn->llcp_rx;
   36ba4:	607a      	str	r2, [r7, #4]
			(*rx)->hdr.link = link;
   36ba6:	682a      	ldr	r2, [r5, #0]
   36ba8:	6017      	str	r7, [r2, #0]
			conn->llcp_rx = *rx;
   36baa:	682a      	ldr	r2, [r5, #0]
   36bac:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
			*rx = NULL;
   36bb0:	602b      	str	r3, [r5, #0]
	if (tx) {
   36bb2:	f7fe bec7 	b.w	35944 <ull_conn_rx+0xb8>
	struct node_tx *tx = NULL;
   36bb6:	2300      	movs	r3, #0
   36bb8:	f7fe bf94 	b.w	35ae4 <ull_conn_rx+0x258>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   36bbc:	2201      	movs	r2, #1
   36bbe:	711a      	strb	r2, [r3, #4]
   36bc0:	f7ff b8a1 	b.w	35d06 <ull_conn_rx+0x47a>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   36bc4:	4a0a      	ldr	r2, [pc, #40]	; (36bf0 <ull_conn_rx+0x1364>)
   36bc6:	490b      	ldr	r1, [pc, #44]	; (36bf4 <ull_conn_rx+0x1368>)
   36bc8:	480b      	ldr	r0, [pc, #44]	; (36bf8 <ull_conn_rx+0x136c>)
   36bca:	f44f 53a7 	mov.w	r3, #5344	; 0x14e0
   36bce:	f00b fe79 	bl	428c4 <printk>
   36bd2:	4040      	eors	r0, r0
   36bd4:	f380 8811 	msr	BASEPRI, r0
   36bd8:	f04f 0003 	mov.w	r0, #3
   36bdc:	df02      	svc	2
   36bde:	f7ff bb8b 	b.w	362f8 <ull_conn_rx+0xa6c>
   36be2:	bf00      	nop
   36be4:	20002638 	.word	0x20002638
   36be8:	ffff05f1 	.word	0xffff05f1
   36bec:	200025f4 	.word	0x200025f4
   36bf0:	0004a0dc 	.word	0x0004a0dc
   36bf4:	00049d8c 	.word	0x00049d8c
   36bf8:	00049c68 	.word	0x00049c68
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   36bfc:	682b      	ldr	r3, [r5, #0]
   36bfe:	2201      	movs	r2, #1
   36c00:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INVALID_LL_PARAM;
   36c02:	231e      	movs	r3, #30
			conn->llcp_terminate.reason_final = err;
   36c04:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
   36c08:	f7fe be9c 	b.w	35944 <ull_conn_rx+0xb8>
				      0x03) == 0x02) &&
   36c0c:	f894 10e6 	ldrb.w	r1, [r4, #230]	; 0xe6
   36c10:	2903      	cmp	r1, #3
   36c12:	f47f ac60 	bne.w	364d6 <ull_conn_rx+0xc4a>
   36c16:	e457      	b.n	364c8 <ull_conn_rx+0xc3c>
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   36c18:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
			conn->llcp_ack += 2U;
   36c1c:	3202      	adds	r2, #2
   36c1e:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   36c22:	2b00      	cmp	r3, #0
   36c24:	f040 8097 	bne.w	36d56 <ull_conn_rx+0x14ca>
			conn->periph.llcp_type = conn->llcp_type;
   36c28:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   36c2c:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
   36c30:	f7ff ba33 	b.w	3609a <ull_conn_rx+0x80e>
				uint16_t interval_min =
   36c34:	f8d6 9020 	ldr.w	r9, [r6, #32]
   36c38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
					cpr->preferred_periodicity;
   36c3c:	f896 a028 	ldrb.w	sl, [r6, #40]	; 0x28
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   36c40:	fa1f f189 	uxth.w	r1, r9
   36c44:	2905      	cmp	r1, #5
   36c46:	f67f ae2d 	bls.w	368a4 <ull_conn_rx+0x1018>
   36c4a:	ea4f 4719 	mov.w	r7, r9, lsr #16
   36c4e:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
   36c52:	f63f ae27 	bhi.w	368a4 <ull_conn_rx+0x1018>
				    (interval_max > 3200) ||
   36c56:	42b9      	cmp	r1, r7
   36c58:	f63f ae24 	bhi.w	368a4 <ull_conn_rx+0x1018>
   36c5c:	fa1f fe88 	uxth.w	lr, r8
				    (interval_min > interval_max) ||
   36c60:	f5be 7ffa 	cmp.w	lr, #500	; 0x1f4
   36c64:	f4bf ae1e 	bcs.w	368a4 <ull_conn_rx+0x1018>
   36c68:	ea4f 4118 	mov.w	r1, r8, lsr #16
				    (latency > 499) ||
   36c6c:	f1a1 0c0a 	sub.w	ip, r1, #10
   36c70:	fa1f fc8c 	uxth.w	ip, ip
   36c74:	f640 4b76 	movw	fp, #3190	; 0xc76
   36c78:	45dc      	cmp	ip, fp
   36c7a:	f63f ae13 	bhi.w	368a4 <ull_conn_rx+0x1018>
				     ((latency + 1) * interval_max)) ||
   36c7e:	f10e 0c01 	add.w	ip, lr, #1
   36c82:	fa1f fc8c 	uxth.w	ip, ip
   36c86:	fb07 fc0c 	mul.w	ip, r7, ip
				    (timeout > 3200) ||
   36c8a:	ebbc 0f81 	cmp.w	ip, r1, lsl #2
   36c8e:	f4bf ae09 	bcs.w	368a4 <ull_conn_rx+0x1018>
				     ((latency + 1) * interval_max)) ||
   36c92:	45ba      	cmp	sl, r7
   36c94:	f63f ae06 	bhi.w	368a4 <ull_conn_rx+0x1018>
				conn->llcp_conn_param.interval_min =
   36c98:	e9c4 9862 	strd	r9, r8, [r4, #392]	; 0x188
				conn->llcp_conn_param.preferred_periodicity =
   36c9c:	f884 a190 	strb.w	sl, [r4, #400]	; 0x190
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   36ca0:	f8d6 8029 	ldr.w	r8, [r6, #41]	; 0x29
   36ca4:	f8d6 c02d 	ldr.w	ip, [r6, #45]	; 0x2d
   36ca8:	f8d6 9031 	ldr.w	r9, [r6, #49]	; 0x31
				conn->llcp_conn_param.reference_conn_event_count =
   36cac:	f8c4 919a 	str.w	r9, [r4, #410]	; 0x19a
   36cb0:	f8c4 8192 	str.w	r8, [r4, #402]	; 0x192
   36cb4:	f8c4 c196 	str.w	ip, [r4, #406]	; 0x196
					sys_le16_to_cpu(cpr->offset5);
   36cb8:	f896 c035 	ldrb.w	ip, [r6, #53]	; 0x35
   36cbc:	f896 8036 	ldrb.w	r8, [r6, #54]	; 0x36
   36cc0:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
				conn->llcp_conn_param.offset5 =
   36cc4:	f8a4 c19e 	strh.w	ip, [r4, #414]	; 0x19e
				if ((conn->llcp_conn_param.interval_max !=
   36cc8:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
   36ccc:	45bc      	cmp	ip, r7
   36cce:	f000 80a5 	beq.w	36e1c <ull_conn_rx+0x1590>
					if (conn->llcp_enc.pause_tx) {
   36cd2:	f012 0f02 	tst.w	r2, #2
						conn->llcp_conn_param.state =
   36cd6:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
					if (conn->llcp_enc.pause_tx) {
   36cda:	f43f adad 	beq.w	36838 <ull_conn_rx+0xfac>
						conn->llcp_conn_param.state =
   36cde:	2102      	movs	r1, #2
   36ce0:	f361 0203 	bfi	r2, r1, #0, #4
   36ce4:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
						(*rx)->hdr.type =
   36ce8:	2201      	movs	r2, #1
   36cea:	7132      	strb	r2, [r6, #4]
   36cec:	e5a9      	b.n	36842 <ull_conn_rx+0xfb6>
			conn->tx_data = conn->tx_data->next;
   36cee:	681a      	ldr	r2, [r3, #0]
   36cf0:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   36cf4:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   36cf8:	2a00      	cmp	r2, #0
   36cfa:	f47e ae8d 	bne.w	35a18 <ull_conn_rx+0x18c>
			tx->next = conn->tx_head->next;
   36cfe:	681a      	ldr	r2, [r3, #0]
   36d00:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   36d02:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   36d04:	f8c4 01c8 	str.w	r0, [r4, #456]	; 0x1c8
				conn->tx_ctrl_last = tx;
   36d08:	f7fe be8b 	b.w	35a22 <ull_conn_rx+0x196>
				conn->lll.max_tx_octets = eff_tx_octets;
   36d0c:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->lll.max_tx_time = eff_tx_time;
   36d10:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   36d14:	f8a6 e020 	strh.w	lr, [r6, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   36d18:	84b1      	strh	r1, [r6, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   36d1a:	f8a6 c022 	strh.w	ip, [r6, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   36d1e:	84f0      	strh	r0, [r6, #38]	; 0x26
	if (tx) {
   36d20:	f7fe be10 	b.w	35944 <ull_conn_rx+0xb8>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   36d24:	4540      	cmp	r0, r8
   36d26:	f47f aeec 	bne.w	36b02 <ull_conn_rx+0x1276>
			    eff_rx_time == conn->lll.max_rx_time &&
   36d2a:	45dc      	cmp	ip, fp
   36d2c:	f47f aee9 	bne.w	36b02 <ull_conn_rx+0x1276>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   36d30:	682a      	ldr	r2, [r5, #0]
   36d32:	2501      	movs	r5, #1
   36d34:	7115      	strb	r5, [r2, #4]
	if (tx) {
   36d36:	2b00      	cmp	r3, #0
   36d38:	f43e ae04 	beq.w	35944 <ull_conn_rx+0xb8>
   36d3c:	e438      	b.n	365b0 <ull_conn_rx+0xd24>
			conn->tx_data = conn->tx_data->next;
   36d3e:	6810      	ldr	r0, [r2, #0]
   36d40:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   36d44:	2900      	cmp	r1, #0
   36d46:	f47f acd2 	bne.w	366ee <ull_conn_rx+0xe62>
			tx->next = conn->tx_head->next;
   36d4a:	6811      	ldr	r1, [r2, #0]
   36d4c:	6019      	str	r1, [r3, #0]
			conn->tx_head->next = tx;
   36d4e:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   36d50:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
				conn->tx_ctrl_last = tx;
   36d54:	e4d0      	b.n	366f8 <ull_conn_rx+0xe6c>
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   36d56:	4a5b      	ldr	r2, [pc, #364]	; (36ec4 <ull_conn_rx+0x1638>)
   36d58:	495b      	ldr	r1, [pc, #364]	; (36ec8 <ull_conn_rx+0x163c>)
   36d5a:	485c      	ldr	r0, [pc, #368]	; (36ecc <ull_conn_rx+0x1640>)
   36d5c:	f641 13ad 	movw	r3, #6573	; 0x19ad
   36d60:	f00b fdb0 	bl	428c4 <printk>
   36d64:	4040      	eors	r0, r0
   36d66:	f380 8811 	msr	BASEPRI, r0
   36d6a:	f04f 0003 	mov.w	r0, #3
   36d6e:	df02      	svc	2
   36d70:	e75a      	b.n	36c28 <ull_conn_rx+0x139c>
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   36d72:	4a54      	ldr	r2, [pc, #336]	; (36ec4 <ull_conn_rx+0x1638>)
   36d74:	4956      	ldr	r1, [pc, #344]	; (36ed0 <ull_conn_rx+0x1644>)
   36d76:	4855      	ldr	r0, [pc, #340]	; (36ecc <ull_conn_rx+0x1640>)
   36d78:	f641 4322 	movw	r3, #7202	; 0x1c22
   36d7c:	f00b fda2 	bl	428c4 <printk>
   36d80:	4040      	eors	r0, r0
   36d82:	f380 8811 	msr	BASEPRI, r0
   36d86:	f04f 0003 	mov.w	r0, #3
   36d8a:	df02      	svc	2
   36d8c:	e6ea      	b.n	36b64 <ull_conn_rx+0x12d8>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   36d8e:	682b      	ldr	r3, [r5, #0]
   36d90:	2201      	movs	r2, #1
   36d92:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   36d94:	2328      	movs	r3, #40	; 0x28
   36d96:	e735      	b.n	36c04 <ull_conn_rx+0x1378>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   36d98:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   36d9c:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   36da0:	429a      	cmp	r2, r3
   36da2:	d00e      	beq.n	36dc2 <ull_conn_rx+0x1536>
   36da4:	4a47      	ldr	r2, [pc, #284]	; (36ec4 <ull_conn_rx+0x1638>)
   36da6:	494b      	ldr	r1, [pc, #300]	; (36ed4 <ull_conn_rx+0x1648>)
   36da8:	4848      	ldr	r0, [pc, #288]	; (36ecc <ull_conn_rx+0x1640>)
   36daa:	f241 43af 	movw	r3, #5295	; 0x14af
   36dae:	f00b fd89 	bl	428c4 <printk>
   36db2:	4040      	eors	r0, r0
   36db4:	f380 8811 	msr	BASEPRI, r0
   36db8:	f04f 0003 	mov.w	r0, #3
   36dbc:	df02      	svc	2
   36dbe:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   36dc2:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   36dc6:	2106      	movs	r1, #6
   36dc8:	f361 0203 	bfi	r2, r1, #0, #4
		conn->llcp_cu.ack--;
   36dcc:	3b01      	subs	r3, #1
   36dce:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   36dd2:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   36dd6:	f3c2 1300 	ubfx	r3, r2, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   36dda:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
		conn->llcp_cu.win_size = 1U;
   36dde:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   36de0:	00db      	lsls	r3, r3, #3
   36de2:	430b      	orrs	r3, r1
   36de4:	f022 020f 	bic.w	r2, r2, #15
   36de8:	4313      	orrs	r3, r2
		conn->llcp_cu.win_size = 1U;
   36dea:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   36dee:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   36df2:	f8d4 118a 	ldr.w	r1, [r4, #394]	; 0x18a
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   36df6:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.win_offset_us = 0U;
   36dfa:	2000      	movs	r0, #0
   36dfc:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   36e00:	f8c4 1110 	str.w	r1, [r4, #272]	; 0x110
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   36e04:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
	if (err) {
   36e08:	f7fe bd9a 	b.w	35940 <ull_conn_rx+0xb4>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   36e0c:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   36e10:	f011 0f06 	tst.w	r1, #6
   36e14:	f43f ab8b 	beq.w	3652e <ull_conn_rx+0xca2>
   36e18:	f7fe be5d 	b.w	35ad6 <ull_conn_rx+0x24a>
				     lll->interval) ||
   36e1c:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
   36e20:	45f4      	cmp	ip, lr
   36e22:	f47f af56 	bne.w	36cd2 <ull_conn_rx+0x1446>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   36e26:	f240 4ce2 	movw	ip, #1250	; 0x4e2
   36e2a:	fb0c f707 	mul.w	r7, ip, r7
   36e2e:	f242 7c10 	movw	ip, #10000	; 0x2710
   36e32:	fb0c 7101 	mla	r1, ip, r1, r7
   36e36:	3901      	subs	r1, #1
   36e38:	fbb1 f1f7 	udiv	r1, r1, r7
				     lll->latency) ||
   36e3c:	f8b4 70c2 	ldrh.w	r7, [r4, #194]	; 0xc2
   36e40:	b289      	uxth	r1, r1
   36e42:	428f      	cmp	r7, r1
   36e44:	f47f af45 	bne.w	36cd2 <ull_conn_rx+0x1446>
				conn->llcp_conn_param.state =
   36e48:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   36e4c:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   36e50:	f042 0201 	orr.w	r2, r2, #1
   36e54:	f8a4 2186 	strh.w	r2, [r4, #390]	; 0x186
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   36e58:	2201      	movs	r2, #1
   36e5a:	7132      	strb	r2, [r6, #4]
   36e5c:	e4f1      	b.n	36842 <ull_conn_rx+0xfb6>
	    ((pdu_data_tx->llctrl.opcode !=
   36e5e:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   36e60:	2a03      	cmp	r2, #3
   36e62:	f43f af4c 	beq.w	36cfe <ull_conn_rx+0x1472>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   36e66:	2a0a      	cmp	r2, #10
   36e68:	f47f a851 	bne.w	35f0e <ull_conn_rx+0x682>
   36e6c:	e747      	b.n	36cfe <ull_conn_rx+0x1472>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   36e6e:	7911      	ldrb	r1, [r2, #4]
   36e70:	f001 0103 	and.w	r1, r1, #3
   36e74:	2903      	cmp	r1, #3
   36e76:	d01d      	beq.n	36eb4 <ull_conn_rx+0x1628>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   36e78:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   36e7c:	e437      	b.n	366ee <ull_conn_rx+0xe62>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   36e7e:	682b      	ldr	r3, [r5, #0]
   36e80:	2201      	movs	r2, #1
   36e82:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   36e84:	232a      	movs	r3, #42	; 0x2a
   36e86:	e6bd      	b.n	36c04 <ull_conn_rx+0x1378>
			     lll->interval) ||
   36e88:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
   36e8a:	4567      	cmp	r7, ip
   36e8c:	f47f acd2 	bne.w	36834 <ull_conn_rx+0xfa8>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   36e90:	f240 47e2 	movw	r7, #1250	; 0x4e2
   36e94:	fb07 f101 	mul.w	r1, r7, r1
   36e98:	f242 7710 	movw	r7, #10000	; 0x2710
   36e9c:	fb07 1202 	mla	r2, r7, r2, r1
   36ea0:	3a01      	subs	r2, #1
   36ea2:	fbb2 f2f1 	udiv	r2, r2, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   36ea6:	f8b4 10c2 	ldrh.w	r1, [r4, #194]	; 0xc2
   36eaa:	b292      	uxth	r2, r2
   36eac:	4291      	cmp	r1, r2
   36eae:	f47f acc1 	bne.w	36834 <ull_conn_rx+0xfa8>
   36eb2:	e7c9      	b.n	36e48 <ull_conn_rx+0x15bc>
	    ((pdu_data_tx->llctrl.opcode !=
   36eb4:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   36eb6:	2903      	cmp	r1, #3
   36eb8:	f43f af47 	beq.w	36d4a <ull_conn_rx+0x14be>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   36ebc:	290a      	cmp	r1, #10
   36ebe:	d1db      	bne.n	36e78 <ull_conn_rx+0x15ec>
   36ec0:	e743      	b.n	36d4a <ull_conn_rx+0x14be>
   36ec2:	bf00      	nop
   36ec4:	0004a0dc 	.word	0x0004a0dc
   36ec8:	0004a204 	.word	0x0004a204
   36ecc:	00049c68 	.word	0x00049c68
   36ed0:	00049d8c 	.word	0x00049d8c
   36ed4:	0004a228 	.word	0x0004a228

00036ed8 <ull_conn_llcp>:
{
   36ed8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36edc:	4604      	mov	r4, r0
	if ((conn->llcp_ack == conn->llcp_req) &&
   36ede:	f890 00e5 	ldrb.w	r0, [r0, #229]	; 0xe5
   36ee2:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   36ee6:	4298      	cmp	r0, r3
{
   36ee8:	460e      	mov	r6, r1
   36eea:	4615      	mov	r5, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
   36eec:	d031      	beq.n	36f52 <ull_conn_llcp+0x7a>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   36eee:	1a1b      	subs	r3, r3, r0
   36ef0:	f003 0303 	and.w	r3, r3, #3
   36ef4:	2b02      	cmp	r3, #2
   36ef6:	d011      	beq.n	36f1c <ull_conn_llcp+0x44>
   36ef8:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   36efc:	460a      	mov	r2, r1
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   36efe:	2a00      	cmp	r2, #0
   36f00:	f2c0 8089 	blt.w	37016 <ull_conn_llcp+0x13e>
	if (((conn->llcp_terminate.req - conn->llcp_terminate.ack) & 0xFF) ==
   36f04:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
   36f08:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   36f0c:	1a9b      	subs	r3, r3, r2
   36f0e:	b2db      	uxtb	r3, r3
   36f10:	2b01      	cmp	r3, #1
   36f12:	f000 809a 	beq.w	3704a <ull_conn_llcp+0x172>
	return 0;
   36f16:	2000      	movs	r0, #0
}
   36f18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   36f1c:	f894 21ad 	ldrb.w	r2, [r4, #429]	; 0x1ad
   36f20:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   36f24:	429a      	cmp	r2, r3
   36f26:	d006      	beq.n	36f36 <ull_conn_llcp+0x5e>
			     LLCP_LENGTH_STATE_RESIZE) ||
   36f28:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			if ((conn->llcp_length.state ==
   36f2c:	f003 0306 	and.w	r3, r3, #6
   36f30:	2b04      	cmp	r3, #4
   36f32:	f000 8227 	beq.w	37384 <ull_conn_llcp+0x4ac>
		switch (conn->llcp_type) {
   36f36:	f894 70e6 	ldrb.w	r7, [r4, #230]	; 0xe6
   36f3a:	1e7b      	subs	r3, r7, #1
   36f3c:	2b05      	cmp	r3, #5
   36f3e:	f200 820b 	bhi.w	37358 <ull_conn_llcp+0x480>
   36f42:	e8df f013 	tbh	[pc, r3, lsl #1]
   36f46:	0024      	.short	0x0024
   36f48:	012701a8 	.word	0x012701a8
   36f4c:	00ec0209 	.word	0x00ec0209
   36f50:	00e1      	.short	0x00e1
   36f52:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
	if ((conn->llcp_ack == conn->llcp_req) &&
   36f56:	2900      	cmp	r1, #0
   36f58:	460a      	mov	r2, r1
   36f5a:	f2c0 820d 	blt.w	37378 <ull_conn_llcp+0x4a0>
	    !conn->llcp_enc.pause_rx) {
   36f5e:	f894 7166 	ldrb.w	r7, [r4, #358]	; 0x166
	    (!conn->lll.role || (conn->periph.llcp_type == LLCP_NONE)) &&
   36f62:	f017 0f01 	tst.w	r7, #1
   36f66:	d1cd      	bne.n	36f04 <ull_conn_llcp+0x2c>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
   36f68:	f894 e10d 	ldrb.w	lr, [r4, #269]	; 0x10d
   36f6c:	f894 c10c 	ldrb.w	ip, [r4, #268]	; 0x10c
   36f70:	45f4      	cmp	ip, lr
   36f72:	f000 8344 	beq.w	375fe <ull_conn_llcp+0x726>
			conn->llcp_type = LLCP_CONN_UPD;
   36f76:	2301      	movs	r3, #1
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   36f78:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
			conn->llcp_type = LLCP_CONN_UPD;
   36f7c:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   36f80:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
			conn->llcp_ack -= 2U;
   36f84:	3802      	subs	r0, #2
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   36f86:	429a      	cmp	r2, r3
			conn->llcp_ack -= 2U;
   36f88:	f884 00e5 	strb.w	r0, [r4, #229]	; 0xe5
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   36f8c:	d1cc      	bne.n	36f28 <ull_conn_llcp+0x50>
			if (event_conn_upd_prep(conn, lazy,
   36f8e:	4632      	mov	r2, r6
   36f90:	4629      	mov	r1, r5
   36f92:	4620      	mov	r0, r4
   36f94:	f7ef fed4 	bl	26d40 <event_conn_upd_prep>
   36f98:	2800      	cmp	r0, #0
   36f9a:	f040 81ea 	bne.w	37372 <ull_conn_llcp+0x49a>
				return -ECANCELED;
   36f9e:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   36fa2:	e7b9      	b.n	36f18 <ull_conn_llcp+0x40>
	conn->lll.enc_tx = 1;
   36fa4:	f043 0310 	orr.w	r3, r3, #16
   36fa8:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   36fac:	7903      	ldrb	r3, [r0, #4]
   36fae:	f043 0303 	orr.w	r3, r3, #3
   36fb2:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   36fb4:	2301      	movs	r3, #1
   36fb6:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   36fb8:	2306      	movs	r3, #6
   36fba:	71c3      	strb	r3, [r0, #7]
	    conn->tx_head &&
   36fbc:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   36fc0:	2b00      	cmp	r3, #0
   36fc2:	f000 8690 	beq.w	37ce6 <ull_conn_llcp+0xe0e>
	    !conn->llcp_enc.pause_tx &&
   36fc6:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   36fca:	0797      	lsls	r7, r2, #30
   36fcc:	f100 868b 	bmi.w	37ce6 <ull_conn_llcp+0xe0e>
	    !conn->llcp_phy.pause_tx &&
   36fd0:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   36fd4:	07d0      	lsls	r0, r2, #31
   36fd6:	f100 8686 	bmi.w	37ce6 <ull_conn_llcp+0xe0e>
		if (conn->tx_head == conn->tx_data) {
   36fda:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   36fde:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   36fe0:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   36fe4:	f001 800c 	beq.w	38000 <ull_conn_llcp+0x1128>
		} else if (!conn->tx_ctrl) {
   36fe8:	2a00      	cmp	r2, #0
   36fea:	f001 8129 	beq.w	38240 <ull_conn_llcp+0x1368>
	tx->next = conn->tx_ctrl_last->next;
   36fee:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   36ff2:	681a      	ldr	r2, [r3, #0]
   36ff4:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   36ff8:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   36ffc:	f8d9 3000 	ldr.w	r3, [r9]
	conn->tx_ctrl_last = tx;
   37000:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   37004:	2b00      	cmp	r3, #0
   37006:	f000 8714 	beq.w	37e32 <ull_conn_llcp+0xf5a>
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   3700a:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   3700e:	f043 0303 	orr.w	r3, r3, #3
   37012:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   37016:	f894 70d9 	ldrb.w	r7, [r4, #217]	; 0xd9
   3701a:	2f00      	cmp	r7, #0
   3701c:	f43f af72 	beq.w	36f04 <ull_conn_llcp+0x2c>
		switch (conn->periph.llcp_type) {
   37020:	2f02      	cmp	r7, #2
   37022:	f000 8168 	beq.w	372f6 <ull_conn_llcp+0x41e>
   37026:	2f06      	cmp	r7, #6
   37028:	d05c      	beq.n	370e4 <ull_conn_llcp+0x20c>
   3702a:	2f01      	cmp	r7, #1
   3702c:	d063      	beq.n	370f6 <ull_conn_llcp+0x21e>
			LL_ASSERT(0);
   3702e:	4ac6      	ldr	r2, [pc, #792]	; (37348 <ull_conn_llcp+0x470>)
   37030:	49c6      	ldr	r1, [pc, #792]	; (3734c <ull_conn_llcp+0x474>)
   37032:	48c7      	ldr	r0, [pc, #796]	; (37350 <ull_conn_llcp+0x478>)
   37034:	f240 5312 	movw	r3, #1298	; 0x512
   37038:	f00b fc44 	bl	428c4 <printk>
   3703c:	4040      	eors	r0, r0
   3703e:	f380 8811 	msr	BASEPRI, r0
   37042:	f04f 0003 	mov.w	r0, #3
   37046:	df02      	svc	2
			break;
   37048:	e75c      	b.n	36f04 <ull_conn_llcp+0x2c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3704a:	48c2      	ldr	r0, [pc, #776]	; (37354 <ull_conn_llcp+0x47c>)
   3704c:	f7f8 fcc6 	bl	2f9dc <mem_acquire>
		if (tx) {
   37050:	2800      	cmp	r0, #0
   37052:	d03a      	beq.n	370ca <ull_conn_llcp+0x1f2>
			conn->llcp_terminate.ack--;
   37054:	f894 3141 	ldrb.w	r3, [r4, #321]	; 0x141
   37058:	3b01      	subs	r3, #1
   3705a:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3705e:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
   37060:	2202      	movs	r2, #2
   37062:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   37064:	f043 0303 	orr.w	r3, r3, #3
   37068:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
   3706a:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
   3706c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_tx->llctrl.terminate_ind.error_code =
   37070:	f894 1142 	ldrb.w	r1, [r4, #322]	; 0x142
		if (!conn->tx_ctrl) {
   37074:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
			pdu_tx->llctrl.terminate_ind.error_code =
   37078:	7201      	strb	r1, [r0, #8]
	if (
   3707a:	2b00      	cmp	r3, #0
   3707c:	f000 8186 	beq.w	3738c <ull_conn_llcp+0x4b4>
	    !conn->llcp_enc.pause_tx &&
   37080:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   37084:	078d      	lsls	r5, r1, #30
   37086:	d412      	bmi.n	370ae <ull_conn_llcp+0x1d6>
	    !conn->llcp_phy.pause_tx &&
   37088:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   3708c:	07c9      	lsls	r1, r1, #31
   3708e:	d40e      	bmi.n	370ae <ull_conn_llcp+0x1d6>
		if (conn->tx_head == conn->tx_data) {
   37090:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   37094:	428b      	cmp	r3, r1
   37096:	f000 8536 	beq.w	37b06 <ull_conn_llcp+0xc2e>
		} else if (!conn->tx_ctrl) {
   3709a:	b95a      	cbnz	r2, 370b4 <ull_conn_llcp+0x1dc>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3709c:	791a      	ldrb	r2, [r3, #4]
   3709e:	f002 0203 	and.w	r2, r2, #3
   370a2:	2a03      	cmp	r2, #3
   370a4:	f000 86cf 	beq.w	37e46 <ull_conn_llcp+0xf6e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   370a8:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   370ac:	e004      	b.n	370b8 <ull_conn_llcp+0x1e0>
		if (!conn->tx_ctrl) {
   370ae:	2a00      	cmp	r2, #0
   370b0:	f000 8254 	beq.w	3755c <ull_conn_llcp+0x684>
	tx->next = conn->tx_ctrl_last->next;
   370b4:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   370b8:	681a      	ldr	r2, [r3, #0]
   370ba:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   370bc:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   370be:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   370c0:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   370c4:	2b00      	cmp	r3, #0
   370c6:	f000 8169 	beq.w	3739c <ull_conn_llcp+0x4c4>
		if (!conn->procedure_expire) {
   370ca:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   370ce:	2b00      	cmp	r3, #0
   370d0:	f47f af21 	bne.w	36f16 <ull_conn_llcp+0x3e>
			conn->procedure_expire = conn->supervision_reload;
   370d4:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			if (conn->procedure_expire <= 1U) {
   370d8:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
   370da:	bf98      	it	ls
   370dc:	3301      	addls	r3, #1
   370de:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   370e2:	e718      	b.n	36f16 <ull_conn_llcp+0x3e>
			event_counter = lll->event_counter +
   370e4:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   370e6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   370e8:	4419      	add	r1, r3
   370ea:	4429      	add	r1, r5
			event_phy_upd_ind_prep(conn, event_counter);
   370ec:	4620      	mov	r0, r4
   370ee:	b289      	uxth	r1, r1
   370f0:	f7fd fe64 	bl	34dbc <event_phy_upd_ind_prep>
		break;
   370f4:	e706      	b.n	36f04 <ull_conn_llcp+0x2c>
			if (event_conn_upd_prep(conn, lazy,
   370f6:	4632      	mov	r2, r6
   370f8:	4629      	mov	r1, r5
   370fa:	4620      	mov	r0, r4
   370fc:	f7ef fe20 	bl	26d40 <event_conn_upd_prep>
   37100:	2800      	cmp	r0, #0
   37102:	f47f aeff 	bne.w	36f04 <ull_conn_llcp+0x2c>
   37106:	e74a      	b.n	36f9e <ull_conn_llcp+0xc6>
			event_counter = lll->event_counter +
   37108:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   3710a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   3710c:	4419      	add	r1, r3
   3710e:	4429      	add	r1, r5
			event_phy_upd_ind_prep(conn, event_counter);
   37110:	b289      	uxth	r1, r1
   37112:	4620      	mov	r0, r4
   37114:	f7fd fe52 	bl	34dbc <event_phy_upd_ind_prep>
		break;
   37118:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   3711c:	e6ef      	b.n	36efe <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3711e:	488d      	ldr	r0, [pc, #564]	; (37354 <ull_conn_llcp+0x47c>)
   37120:	f7f8 fc5c 	bl	2f9dc <mem_acquire>
	if (tx) {
   37124:	2800      	cmp	r0, #0
   37126:	f000 8124 	beq.w	37372 <ull_conn_llcp+0x49a>
		conn->llcp_ack = conn->llcp_req;
   3712a:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3712e:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   37132:	7903      	ldrb	r3, [r0, #4]
   37134:	f043 0303 	orr.w	r3, r3, #3
   37138:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   3713a:	2301      	movs	r3, #1
   3713c:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   3713e:	2312      	movs	r3, #18
   37140:	71c3      	strb	r3, [r0, #7]
		if (!conn->tx_ctrl) {
   37142:	e9d4 3271 	ldrd	r3, r2, [r4, #452]	; 0x1c4
	if (
   37146:	2b00      	cmp	r3, #0
   37148:	f000 83dc 	beq.w	37904 <ull_conn_llcp+0xa2c>
	    !conn->llcp_enc.pause_tx &&
   3714c:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   37150:	0789      	lsls	r1, r1, #30
   37152:	f100 82da 	bmi.w	3770a <ull_conn_llcp+0x832>
	    !conn->llcp_phy.pause_tx &&
   37156:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   3715a:	07cf      	lsls	r7, r1, #31
   3715c:	f100 82d5 	bmi.w	3770a <ull_conn_llcp+0x832>
		if (conn->tx_head == conn->tx_data) {
   37160:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   37164:	428b      	cmp	r3, r1
   37166:	f000 863a 	beq.w	37dde <ull_conn_llcp+0xf06>
		} else if (!conn->tx_ctrl) {
   3716a:	2a00      	cmp	r2, #0
   3716c:	f000 8673 	beq.w	37e56 <ull_conn_llcp+0xf7e>
	tx->next = conn->tx_ctrl_last->next;
   37170:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   37174:	681a      	ldr	r2, [r3, #0]
   37176:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   37178:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   3717a:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   3717c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   37180:	2b00      	cmp	r3, #0
   37182:	f000 83c7 	beq.w	37914 <ull_conn_llcp+0xa3c>
		conn->procedure_expire = conn->procedure_reload;
   37186:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   3718a:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   3718e:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   37192:	e6b4      	b.n	36efe <ull_conn_llcp+0x26>
	if (conn->llcp.encryption.state) {
   37194:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   37198:	f013 0803 	ands.w	r8, r3, #3
   3719c:	f000 8150 	beq.w	37440 <ull_conn_llcp+0x568>
		if (lll->role &&
   371a0:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   371a4:	2b00      	cmp	r3, #0
   371a6:	f6bf aead 	bge.w	36f04 <ull_conn_llcp+0x2c>
   371aa:	f1b8 0f01 	cmp.w	r8, #1
   371ae:	f47f af32 	bne.w	37016 <ull_conn_llcp+0x13e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   371b2:	4868      	ldr	r0, [pc, #416]	; (37354 <ull_conn_llcp+0x47c>)
   371b4:	f7f8 fc12 	bl	2f9dc <mem_acquire>
	if (!tx) {
   371b8:	4607      	mov	r7, r0
   371ba:	2800      	cmp	r0, #0
   371bc:	f000 80d9 	beq.w	37372 <ull_conn_llcp+0x49a>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   371c0:	7903      	ldrb	r3, [r0, #4]
   371c2:	f043 0303 	orr.w	r3, r3, #3
   371c6:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   371c8:	f04f 0904 	mov.w	r9, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   371cc:	230d      	movs	r3, #13
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   371ce:	f100 0808 	add.w	r8, r0, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   371d2:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   371d4:	f880 9007 	strb.w	r9, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   371d8:	210c      	movs	r1, #12
   371da:	4640      	mov	r0, r8
   371dc:	f003 fa3c 	bl	3a658 <lll_csrand_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
   371e0:	4641      	mov	r1, r8
   371e2:	2208      	movs	r2, #8
   371e4:	f104 00fe 	add.w	r0, r4, #254	; 0xfe
   371e8:	f00d fc6b 	bl	44ac2 <memcpy>
	memcpy(&conn->lll.ccm_rx.iv[4],
   371ec:	464a      	mov	r2, r9
   371ee:	f107 0110 	add.w	r1, r7, #16
   371f2:	f104 0098 	add.w	r0, r4, #152	; 0x98
   371f6:	f00d fc64 	bl	44ac2 <memcpy>
	    conn->tx_head &&
   371fa:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   371fe:	2b00      	cmp	r3, #0
   37200:	f000 857c 	beq.w	37cfc <ull_conn_llcp+0xe24>
	    !conn->llcp_enc.pause_tx &&
   37204:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   37208:	0791      	lsls	r1, r2, #30
   3720a:	f100 84a3 	bmi.w	37b54 <ull_conn_llcp+0xc7c>
	    !conn->llcp_phy.pause_tx &&
   3720e:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   37212:	07d2      	lsls	r2, r2, #31
   37214:	f100 849e 	bmi.w	37b54 <ull_conn_llcp+0xc7c>
		if (conn->tx_head == conn->tx_data) {
   37218:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   3721c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   37220:	428b      	cmp	r3, r1
   37222:	f000 8644 	beq.w	37eae <ull_conn_llcp+0xfd6>
		} else if (!conn->tx_ctrl) {
   37226:	2a00      	cmp	r2, #0
   37228:	f000 86f9 	beq.w	3801e <ull_conn_llcp+0x1146>
	tx->next = conn->tx_ctrl_last->next;
   3722c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   37230:	681a      	ldr	r2, [r3, #0]
   37232:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   37234:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   37236:	683b      	ldr	r3, [r7, #0]
	conn->tx_ctrl_last = tx;
   37238:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
	if (!tx->next) {
   3723c:	2b00      	cmp	r3, #0
   3723e:	f000 8567 	beq.w	37d10 <ull_conn_llcp+0xe38>
			rx = ll_pdu_rx_alloc();
   37242:	f7fb ff87 	bl	33154 <ll_pdu_rx_alloc>
			if (!rx) {
   37246:	4607      	mov	r7, r0
   37248:	2800      	cmp	r0, #0
   3724a:	f000 8092 	beq.w	37372 <ull_conn_llcp+0x49a>
			rx->hdr.handle = conn->lll.handle;
   3724e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   37250:	80c3      	strh	r3, [r0, #6]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   37252:	2303      	movs	r3, #3
   37254:	7103      	strb	r3, [r0, #4]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   37256:	77c3      	strb	r3, [r0, #31]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   37258:	7f03      	ldrb	r3, [r0, #28]
   3725a:	f043 0303 	orr.w	r3, r3, #3
   3725e:	7703      	strb	r3, [r0, #28]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   37260:	2317      	movs	r3, #23
			memcpy(&pdu->llctrl.enc_req.rand[0],
   37262:	2208      	movs	r2, #8
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   37264:	7743      	strb	r3, [r0, #29]
			memcpy(&pdu->llctrl.enc_req.rand[0],
   37266:	f204 1169 	addw	r1, r4, #361	; 0x169
   3726a:	3020      	adds	r0, #32
   3726c:	f00d fc29 	bl	44ac2 <memcpy>
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   37270:	f8b4 3167 	ldrh.w	r3, [r4, #359]	; 0x167
   37274:	853b      	strh	r3, [r7, #40]	; 0x28
			ll_rx_put(rx->hdr.link, rx);
   37276:	6838      	ldr	r0, [r7, #0]
   37278:	4639      	mov	r1, r7
   3727a:	f7fb ff3b 	bl	330f4 <ll_rx_put>
			ll_rx_sched();
   3727e:	f7fb ff43 	bl	33108 <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
   37282:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   37286:	2202      	movs	r2, #2
   37288:	f362 0301 	bfi	r3, r2, #0, #2
   3728c:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   37290:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   37294:	e633      	b.n	36efe <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
   37296:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   37298:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   3729a:	4413      	add	r3, r2
	if (conn->llcp.chan_map.initiate) {
   3729c:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			event_counter = lll->event_counter +
   372a0:	442b      	add	r3, r5
	if (conn->llcp.chan_map.initiate) {
   372a2:	f012 0101 	ands.w	r1, r2, #1
			event_counter = lll->event_counter +
   372a6:	b29f      	uxth	r7, r3
	if (conn->llcp.chan_map.initiate) {
   372a8:	d17b      	bne.n	373a2 <ull_conn_llcp+0x4ca>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   372aa:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   372ae:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   372b2:	1afb      	subs	r3, r7, r3
   372b4:	0418      	lsls	r0, r3, #16
   372b6:	f53f ae22 	bmi.w	36efe <ull_conn_llcp+0x26>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   372ba:	2a00      	cmp	r2, #0
   372bc:	f2c0 831a 	blt.w	378f4 <ull_conn_llcp+0xa1c>
			conn->llcp_ack = conn->llcp_req;
   372c0:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   372c4:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		memcpy(&lll->data_chan_map[0],
   372c8:	f104 0734 	add.w	r7, r4, #52	; 0x34
   372cc:	2205      	movs	r2, #5
   372ce:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   372d2:	4638      	mov	r0, r7
   372d4:	f00d fbf5 	bl	44ac2 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   372d8:	2105      	movs	r1, #5
   372da:	4638      	mov	r0, r7
   372dc:	f7f8 fd5e 	bl	2fd9c <util_ones_count_get>
		lll->data_chan_count =
   372e0:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   372e4:	2301      	movs	r3, #1
		lll->data_chan_count =
   372e6:	f360 0205 	bfi	r2, r0, #0, #6
   372ea:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   372ee:	f884 31d8 	strb.w	r3, [r4, #472]	; 0x1d8
   372f2:	b252      	sxtb	r2, r2
   372f4:	e603      	b.n	36efe <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
   372f6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   372f8:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
   372fa:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			event_counter = lll->event_counter +
   372fe:	440b      	add	r3, r1
   37300:	442b      	add	r3, r5
	if (conn->llcp.chan_map.initiate) {
   37302:	f012 0601 	ands.w	r6, r2, #1
			event_counter = lll->event_counter +
   37306:	b29d      	uxth	r5, r3
	if (conn->llcp.chan_map.initiate) {
   37308:	f040 812e 	bne.w	37568 <ull_conn_llcp+0x690>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   3730c:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   37310:	1aeb      	subs	r3, r5, r3
   37312:	041f      	lsls	r7, r3, #16
   37314:	f53f adf6 	bmi.w	36f04 <ull_conn_llcp+0x2c>
		memcpy(&lll->data_chan_map[0],
   37318:	f104 0534 	add.w	r5, r4, #52	; 0x34
   3731c:	2205      	movs	r2, #5
   3731e:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
			conn->periph.llcp_type = LLCP_NONE;
   37322:	f884 60d9 	strb.w	r6, [r4, #217]	; 0xd9
		memcpy(&lll->data_chan_map[0],
   37326:	4628      	mov	r0, r5
   37328:	f00d fbcb 	bl	44ac2 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   3732c:	2105      	movs	r1, #5
   3732e:	4628      	mov	r0, r5
   37330:	f7f8 fd34 	bl	2fd9c <util_ones_count_get>
		lll->data_chan_count =
   37334:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   37338:	2201      	movs	r2, #1
		lll->data_chan_count =
   3733a:	f360 0305 	bfi	r3, r0, #0, #6
   3733e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   37342:	f884 21d8 	strb.w	r2, [r4, #472]	; 0x1d8
   37346:	e5dd      	b.n	36f04 <ull_conn_llcp+0x2c>
   37348:	0004a0dc 	.word	0x0004a0dc
   3734c:	00049cc8 	.word	0x00049cc8
   37350:	00049c68 	.word	0x00049c68
   37354:	20002638 	.word	0x20002638
			LL_ASSERT(0);
   37358:	4ace      	ldr	r2, [pc, #824]	; (37694 <ull_conn_llcp+0x7bc>)
   3735a:	49cf      	ldr	r1, [pc, #828]	; (37698 <ull_conn_llcp+0x7c0>)
   3735c:	48cf      	ldr	r0, [pc, #828]	; (3769c <ull_conn_llcp+0x7c4>)
   3735e:	f240 43e1 	movw	r3, #1249	; 0x4e1
   37362:	f00b faaf 	bl	428c4 <printk>
   37366:	4040      	eors	r0, r0
   37368:	f380 8811 	msr	BASEPRI, r0
   3736c:	f04f 0003 	mov.w	r0, #3
   37370:	df02      	svc	2
			break;
   37372:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   37376:	e5c2      	b.n	36efe <ull_conn_llcp+0x26>
	    (!conn->lll.role || (conn->periph.llcp_type == LLCP_NONE)) &&
   37378:	f894 70d9 	ldrb.w	r7, [r4, #217]	; 0xd9
   3737c:	2f00      	cmp	r7, #0
   3737e:	f47f ae4f 	bne.w	37020 <ull_conn_llcp+0x148>
   37382:	e5ec      	b.n	36f5e <ull_conn_llcp+0x86>
				event_len_prep(conn);
   37384:	4620      	mov	r0, r4
   37386:	f7fd fc15 	bl	34bb4 <event_len_prep>
   3738a:	e5d4      	b.n	36f36 <ull_conn_llcp+0x5e>
		if (!conn->tx_ctrl) {
   3738c:	2a00      	cmp	r2, #0
   3738e:	f47f ae91 	bne.w	370b4 <ull_conn_llcp+0x1dc>
			tx->next = conn->tx_head;
   37392:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   37394:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   37398:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
		conn->tx_data_last = tx;
   3739c:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   373a0:	e693      	b.n	370ca <ull_conn_llcp+0x1f2>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   373a2:	48bf      	ldr	r0, [pc, #764]	; (376a0 <ull_conn_llcp+0x7c8>)
   373a4:	f7f8 fb1a 	bl	2f9dc <mem_acquire>
		if (tx) {
   373a8:	4680      	mov	r8, r0
   373aa:	2800      	cmp	r0, #0
   373ac:	d0e1      	beq.n	37372 <ull_conn_llcp+0x49a>
						      conn->lll.latency + 6;
   373ae:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   373b0:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
						      conn->lll.latency + 6;
   373b4:	3306      	adds	r3, #6
   373b6:	443b      	add	r3, r7
			conn->llcp.chan_map.instant = event_counter +
   373b8:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   373bc:	7903      	ldrb	r3, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
   373be:	f36f 0200 	bfc	r2, #0, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   373c2:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.initiate = 0U;
   373c6:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   373ca:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   373cc:	2308      	movs	r3, #8
   373ce:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   373d0:	2301      	movs	r3, #1
   373d2:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   373d4:	2205      	movs	r2, #5
   373d6:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   373da:	3008      	adds	r0, #8
   373dc:	f00d fb71 	bl	44ac2 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   373e0:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   373e4:	f8a8 300d 	strh.w	r3, [r8, #13]
	    conn->tx_head &&
   373e8:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   373ec:	2b00      	cmp	r3, #0
   373ee:	f000 8294 	beq.w	3791a <ull_conn_llcp+0xa42>
	    !conn->llcp_enc.pause_tx &&
   373f2:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   373f6:	0792      	lsls	r2, r2, #30
   373f8:	f100 828f 	bmi.w	3791a <ull_conn_llcp+0xa42>
	    !conn->llcp_phy.pause_tx &&
   373fc:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   37400:	07d7      	lsls	r7, r2, #31
   37402:	f100 828a 	bmi.w	3791a <ull_conn_llcp+0xa42>
		if (conn->tx_head == conn->tx_data) {
   37406:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   3740a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   3740e:	428b      	cmp	r3, r1
   37410:	f000 853c 	beq.w	37e8c <ull_conn_llcp+0xfb4>
		} else if (!conn->tx_ctrl) {
   37414:	2a00      	cmp	r2, #0
   37416:	f000 8614 	beq.w	38042 <ull_conn_llcp+0x116a>
	tx->next = conn->tx_ctrl_last->next;
   3741a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   3741e:	681a      	ldr	r2, [r3, #0]
   37420:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   37424:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   37428:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   3742c:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   37430:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
	if (!tx->next) {
   37434:	2b00      	cmp	r3, #0
   37436:	f47f af5c 	bne.w	372f2 <ull_conn_llcp+0x41a>
		conn->tx_data_last = tx;
   3743a:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
   3743e:	e758      	b.n	372f2 <ull_conn_llcp+0x41a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   37440:	4897      	ldr	r0, [pc, #604]	; (376a0 <ull_conn_llcp+0x7c8>)
   37442:	f7f8 facb 	bl	2f9dc <mem_acquire>
	if (!tx) {
   37446:	4681      	mov	r9, r0
   37448:	2800      	cmp	r0, #0
   3744a:	d092      	beq.n	37372 <ull_conn_llcp+0x49a>
	if (!lll->role) {
   3744c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   37450:	2b00      	cmp	r3, #0
   37452:	f280 82d7 	bge.w	37a04 <ull_conn_llcp+0xb2c>
	else if (!lll->enc_rx) {
   37456:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   3745a:	0719      	lsls	r1, r3, #28
   3745c:	f53f ada2 	bmi.w	36fa4 <ull_conn_llcp+0xcc>
		if (conn->llcp.encryption.error_code) {
   37460:	f894 80f5 	ldrb.w	r8, [r4, #245]	; 0xf5
   37464:	f1b8 0f00 	cmp.w	r8, #0
   37468:	f040 8456 	bne.w	37d18 <ull_conn_llcp+0xe40>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
   3746c:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   37470:	463b      	mov	r3, r7
   37472:	4642      	mov	r2, r8
   37474:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
   37478:	f204 1071 	addw	r0, r4, #369	; 0x171
   3747c:	f004 ff00 	bl	3c280 <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
   37480:	4639      	mov	r1, r7
   37482:	2210      	movs	r2, #16
   37484:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   37488:	f00d fb1b 	bl	44ac2 <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   3748c:	2208      	movs	r2, #8
   3748e:	f104 0194 	add.w	r1, r4, #148	; 0x94
   37492:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
   37496:	f00d fb14 	bl	44ac2 <memcpy>
			lll->ccm_rx.direction = 1U;
   3749a:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
			lll->ccm_rx.counter = 0U;
   3749e:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
			lll->ccm_rx.direction = 1U;
   374a2:	f043 0301 	orr.w	r3, r3, #1
   374a6:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
			lll->ccm_tx.direction = 0U;
   374aa:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			lll->ccm_rx.counter = 0U;
   374ae:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
			lll->ccm_tx.direction = 0U;
   374b2:	f368 0300 	bfi	r3, r8, #0, #1
   374b6:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			lll->enc_rx = 1U;
   374ba:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
			lll->ccm_rx.counter = 0U;
   374be:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
			lll->enc_rx = 1U;
   374c2:	f043 0308 	orr.w	r3, r3, #8
   374c6:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   374ca:	f899 3004 	ldrb.w	r3, [r9, #4]
			lll->ccm_rx.counter = 0U;
   374ce:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   374d2:	f043 0303 	orr.w	r3, r3, #3
			lll->ccm_tx.counter = 0U;
   374d6:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
			lll->ccm_rx.counter = 0U;
   374da:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   374de:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   374e2:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   374e6:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   374ea:	f889 3004 	strb.w	r3, [r9, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   374ee:	2301      	movs	r3, #1
   374f0:	f889 3005 	strb.w	r3, [r9, #5]
	    conn->tx_head &&
   374f4:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
			pdu_ctrl_tx->llctrl.opcode =
   374f8:	2305      	movs	r3, #5
   374fa:	f889 3007 	strb.w	r3, [r9, #7]
	if (
   374fe:	2a00      	cmp	r2, #0
   37500:	f000 8334 	beq.w	37b6c <ull_conn_llcp+0xc94>
	    !conn->llcp_enc.pause_tx &&
   37504:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   37508:	0799      	lsls	r1, r3, #30
   3750a:	f100 832f 	bmi.w	37b6c <ull_conn_llcp+0xc94>
	    !conn->llcp_phy.pause_tx &&
   3750e:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   37512:	07db      	lsls	r3, r3, #31
   37514:	f100 832a 	bmi.w	37b6c <ull_conn_llcp+0xc94>
		if (conn->tx_head == conn->tx_data) {
   37518:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   3751c:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   37520:	428a      	cmp	r2, r1
   37522:	f000 8506 	beq.w	37f32 <ull_conn_llcp+0x105a>
		} else if (!conn->tx_ctrl) {
   37526:	2b00      	cmp	r3, #0
   37528:	f000 85ef 	beq.w	3810a <ull_conn_llcp+0x1232>
	tx->next = conn->tx_ctrl_last->next;
   3752c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   37530:	681a      	ldr	r2, [r3, #0]
   37532:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   37536:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   3753a:	f8d9 3000 	ldr.w	r3, [r9]
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3753e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
	conn->tx_ctrl_last = tx;
   37542:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   37546:	2b00      	cmp	r3, #0
   37548:	f000 82cb 	beq.w	37ae2 <ull_conn_llcp+0xc0a>
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   3754c:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   37550:	f043 0303 	orr.w	r3, r3, #3
   37554:	b252      	sxtb	r2, r2
   37556:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   3755a:	e4d0      	b.n	36efe <ull_conn_llcp+0x26>
			tx->next = conn->tx_head;
   3755c:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   3755e:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   37562:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   37566:	e5b0      	b.n	370ca <ull_conn_llcp+0x1f2>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   37568:	484d      	ldr	r0, [pc, #308]	; (376a0 <ull_conn_llcp+0x7c8>)
   3756a:	f7f8 fa37 	bl	2f9dc <mem_acquire>
		if (tx) {
   3756e:	4606      	mov	r6, r0
   37570:	2800      	cmp	r0, #0
   37572:	f43f acc7 	beq.w	36f04 <ull_conn_llcp+0x2c>
						      conn->lll.latency + 6;
   37576:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   37578:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3757c:	7902      	ldrb	r2, [r0, #4]
						      conn->lll.latency + 6;
   3757e:	3306      	adds	r3, #6
			conn->llcp.chan_map.initiate = 0U;
   37580:	f36f 0100 	bfc	r1, #0, #1
						      conn->lll.latency + 6;
   37584:	442b      	add	r3, r5
			conn->llcp.chan_map.initiate = 0U;
   37586:	f884 10e8 	strb.w	r1, [r4, #232]	; 0xe8
			conn->llcp.chan_map.instant = event_counter +
   3758a:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3758e:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->llctrl.opcode =
   37592:	2301      	movs	r3, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   37594:	2108      	movs	r1, #8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   37596:	7102      	strb	r2, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   37598:	7141      	strb	r1, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   3759a:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   3759c:	2205      	movs	r2, #5
   3759e:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   375a2:	3008      	adds	r0, #8
   375a4:	f00d fa8d 	bl	44ac2 <memcpy>
	    conn->tx_head &&
   375a8:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   375ac:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   375b0:	f8a6 200d 	strh.w	r2, [r6, #13]
	if (
   375b4:	2b00      	cmp	r3, #0
   375b6:	f000 8338 	beq.w	37c2a <ull_conn_llcp+0xd52>
	    !conn->llcp_enc.pause_tx &&
   375ba:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   375be:	0791      	lsls	r1, r2, #30
   375c0:	f100 82bc 	bmi.w	37b3c <ull_conn_llcp+0xc64>
	    !conn->llcp_phy.pause_tx &&
   375c4:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   375c8:	07d2      	lsls	r2, r2, #31
   375ca:	f100 82b7 	bmi.w	37b3c <ull_conn_llcp+0xc64>
		if (conn->tx_head == conn->tx_data) {
   375ce:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   375d2:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   375d6:	428b      	cmp	r3, r1
   375d8:	f000 844a 	beq.w	37e70 <ull_conn_llcp+0xf98>
		} else if (!conn->tx_ctrl) {
   375dc:	2a00      	cmp	r2, #0
   375de:	f000 8527 	beq.w	38030 <ull_conn_llcp+0x1158>
	tx->next = conn->tx_ctrl_last->next;
   375e2:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   375e6:	681a      	ldr	r2, [r3, #0]
   375e8:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
   375ea:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
   375ec:	6833      	ldr	r3, [r6, #0]
	conn->tx_ctrl_last = tx;
   375ee:	f8c4 61cc 	str.w	r6, [r4, #460]	; 0x1cc
	if (!tx->next) {
   375f2:	2b00      	cmp	r3, #0
   375f4:	f47f ac86 	bne.w	36f04 <ull_conn_llcp+0x2c>
		conn->tx_data_last = tx;
   375f8:	f8c4 61d4 	str.w	r6, [r4, #468]	; 0x1d4
   375fc:	e482      	b.n	36f04 <ull_conn_llcp+0x2c>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
   375fe:	f894 c121 	ldrb.w	ip, [r4, #289]	; 0x121
   37602:	f894 8120 	ldrb.w	r8, [r4, #288]	; 0x120
   37606:	45c4      	cmp	ip, r8
   37608:	d04c      	beq.n	376a4 <ull_conn_llcp+0x7cc>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
   3760a:	ebac 0c08 	sub.w	ip, ip, r8
   3760e:	f01c 0f01 	tst.w	ip, #1
   37612:	f43f ac74 	beq.w	36efe <ull_conn_llcp+0x26>
	if (conn->common.fex_valid) {
   37616:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   3761a:	f013 0701 	ands.w	r7, r3, #1
   3761e:	f000 8188 	beq.w	37932 <ull_conn_llcp+0xa5a>
		rx = ll_pdu_rx_alloc();
   37622:	f7fb fd97 	bl	33154 <ll_pdu_rx_alloc>
		if (!rx) {
   37626:	4607      	mov	r7, r0
   37628:	2800      	cmp	r0, #0
   3762a:	f000 815d 	beq.w	378e8 <ull_conn_llcp+0xa10>
		conn->llcp_feature.ack = conn->llcp_feature.req;
   3762e:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
   37632:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		rx->hdr.handle = conn->lll.handle;
   37636:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   37638:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3763a:	2303      	movs	r3, #3
   3763c:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   3763e:	7f03      	ldrb	r3, [r0, #28]
   37640:	f043 0303 	orr.w	r3, r3, #3
   37644:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   37646:	2309      	movs	r3, #9
   37648:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   3764a:	77c3      	strb	r3, [r0, #31]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
   3764c:	2208      	movs	r2, #8
   3764e:	2100      	movs	r1, #0
   37650:	3020      	adds	r0, #32
   37652:	f00d fa41 	bl	44ad8 <memset>
	sys_put_le32(val >> 32, &dst[4]);
   37656:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
	dst[0] = val;
   3765a:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   3765c:	f3c3 2107 	ubfx	r1, r3, #8, #8
	dst[0] = val;
   37660:	f363 0207 	bfi	r2, r3, #0, #8
   37664:	f361 220f 	bfi	r2, r1, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   37668:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   3766a:	f363 4217 	bfi	r2, r3, #16, #8
	dst[1] = val >> 8;
   3766e:	0a1b      	lsrs	r3, r3, #8
	dst[0] = val;
   37670:	f363 621f 	bfi	r2, r3, #24, #8
   37674:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   37678:	623b      	str	r3, [r7, #32]
   3767a:	627a      	str	r2, [r7, #36]	; 0x24
		ll_rx_put(rx->hdr.link, rx);
   3767c:	4639      	mov	r1, r7
	ll_rx_put(rx->hdr.link, rx);
   3767e:	6808      	ldr	r0, [r1, #0]
   37680:	f7fb fd38 	bl	330f4 <ll_rx_put>
	ll_rx_sched();
   37684:	f7fb fd40 	bl	33108 <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   37688:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3768c:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   37690:	e42d      	b.n	36eee <ull_conn_llcp+0x16>
   37692:	bf00      	nop
   37694:	0004a0dc 	.word	0x0004a0dc
   37698:	00049cc8 	.word	0x00049cc8
   3769c:	00049c68 	.word	0x00049c68
   376a0:	20002638 	.word	0x20002638
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
   376a4:	f894 c139 	ldrb.w	ip, [r4, #313]	; 0x139
   376a8:	f894 8138 	ldrb.w	r8, [r4, #312]	; 0x138
   376ac:	45c4      	cmp	ip, r8
   376ae:	d035      	beq.n	3771c <ull_conn_llcp+0x844>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
   376b0:	ebac 0c08 	sub.w	ip, ip, r8
   376b4:	f01c 0f01 	tst.w	ip, #1
   376b8:	f43f ac21 	beq.w	36efe <ull_conn_llcp+0x26>
	if (conn->llcp_version.tx == 0U) {
   376bc:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   376c0:	07d9      	lsls	r1, r3, #31
   376c2:	f140 82cb 	bpl.w	37c5c <ull_conn_llcp+0xd84>
	} else if (conn->llcp_version.rx) {
   376c6:	0799      	lsls	r1, r3, #30
   376c8:	f140 82ba 	bpl.w	37c40 <ull_conn_llcp+0xd68>
		rx = ll_pdu_rx_alloc();
   376cc:	f7fb fd42 	bl	33154 <ll_pdu_rx_alloc>
		if (!rx) {
   376d0:	4601      	mov	r1, r0
   376d2:	2800      	cmp	r0, #0
   376d4:	f000 8108 	beq.w	378e8 <ull_conn_llcp+0xa10>
		conn->llcp_version.ack = conn->llcp_version.req;
   376d8:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
   376dc:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
		rx->hdr.handle = conn->lll.handle;
   376e0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   376e2:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   376e4:	2303      	movs	r3, #3
   376e6:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   376e8:	7f03      	ldrb	r3, [r0, #28]
   376ea:	f043 0303 	orr.w	r3, r3, #3
   376ee:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
   376f0:	2306      	movs	r3, #6
   376f2:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   376f4:	230c      	movs	r3, #12
   376f6:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
   376f8:	f894 313b 	ldrb.w	r3, [r4, #315]	; 0x13b
   376fc:	f880 3020 	strb.w	r3, [r0, #32]
			sys_cpu_to_le16(conn->llcp_version.company_id);
   37700:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		pdu->llctrl.version_ind.company_id =
   37704:	f8c0 3021 	str.w	r3, [r0, #33]	; 0x21
		ll_rx_put(rx->hdr.link, rx);
   37708:	e7b9      	b.n	3767e <ull_conn_llcp+0x7a6>
		if (!conn->tx_ctrl) {
   3770a:	2a00      	cmp	r2, #0
   3770c:	f47f ad30 	bne.w	37170 <ull_conn_llcp+0x298>
			tx->next = conn->tx_head;
   37710:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   37712:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   37716:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   3771a:	e534      	b.n	37186 <ull_conn_llcp+0x2ae>
		} else if (conn->llcp_conn_param.ack !=
   3771c:	f894 8185 	ldrb.w	r8, [r4, #389]	; 0x185
   37720:	f894 c184 	ldrb.w	ip, [r4, #388]	; 0x184
   37724:	45e0      	cmp	r8, ip
   37726:	f000 81df 	beq.w	37ae8 <ull_conn_llcp+0xc10>
	return conn_upd_curr && (conn_upd_curr != conn);
   3772a:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 379fc <ull_conn_llcp+0xb24>
			event_counter = lll->event_counter +
   3772e:	f8b4 9032 	ldrh.w	r9, [r4, #50]	; 0x32
	return conn_upd_curr && (conn_upd_curr != conn);
   37732:	f8d8 c000 	ldr.w	ip, [r8]
					lll->latency_prepare + lazy;
   37736:	f8b4 a02e 	ldrh.w	sl, [r4, #46]	; 0x2e
	return conn_upd_curr && (conn_upd_curr != conn);
   3773a:	f1bc 0f00 	cmp.w	ip, #0
   3773e:	f000 832c 	beq.w	37d9a <ull_conn_llcp+0xec2>
   37742:	4564      	cmp	r4, ip
   37744:	f47f abdb 	bne.w	36efe <ull_conn_llcp+0x26>
	switch (conn->llcp_conn_param.state) {
   37748:	f894 c186 	ldrb.w	ip, [r4, #390]	; 0x186
   3774c:	f00c 0c0f 	and.w	ip, ip, #15
   37750:	f1bc 0f06 	cmp.w	ip, #6
   37754:	f200 8611 	bhi.w	3837a <ull_conn_llcp+0x14a2>
   37758:	f20f 0b04 	addw	fp, pc, #4
   3775c:	f85b f02c 	ldr.w	pc, [fp, ip, lsl #2]
   37760:	0003783b 	.word	0x0003783b
   37764:	000377bd 	.word	0x000377bd
   37768:	0003777d 	.word	0x0003777d
   3776c:	00036eef 	.word	0x00036eef
   37770:	00036eef 	.word	0x00036eef
   37774:	00036eef 	.word	0x00036eef
   37778:	00036eef 	.word	0x00036eef
	if (conn->llcp_enc.pause_tx) {
   3777c:	07bb      	lsls	r3, r7, #30
   3777e:	f53f abbe 	bmi.w	36efe <ull_conn_llcp+0x26>
	rx = ll_pdu_rx_alloc();
   37782:	f7fb fce7 	bl	33154 <ll_pdu_rx_alloc>
	if (!rx) {
   37786:	4601      	mov	r1, r0
   37788:	2800      	cmp	r0, #0
   3778a:	f000 80ad 	beq.w	378e8 <ull_conn_llcp+0xa10>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   3778e:	f894 0186 	ldrb.w	r0, [r4, #390]	; 0x186
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   37792:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   37794:	2203      	movs	r2, #3
   37796:	f362 0003 	bfi	r0, r2, #0, #4
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3779a:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   3779e:	f884 0186 	strb.w	r0, [r4, #390]	; 0x186
	rx->hdr.handle = conn->lll.handle;
   377a2:	8d20      	ldrh	r0, [r4, #40]	; 0x28
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   377a4:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   377a6:	2318      	movs	r3, #24
   377a8:	774b      	strb	r3, [r1, #29]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   377aa:	230f      	movs	r3, #15
	rx->hdr.handle = conn->lll.handle;
   377ac:	80c8      	strh	r0, [r1, #6]
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   377ae:	710a      	strb	r2, [r1, #4]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   377b0:	77cb      	strb	r3, [r1, #31]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   377b2:	e9d4 3262 	ldrd	r3, r2, [r4, #392]	; 0x188
   377b6:	624a      	str	r2, [r1, #36]	; 0x24
   377b8:	620b      	str	r3, [r1, #32]
   377ba:	e760      	b.n	3767e <ull_conn_llcp+0x7a6>
	if (conn->llcp_conn_param.status) {
   377bc:	f894 3187 	ldrb.w	r3, [r4, #391]	; 0x187
   377c0:	2b00      	cmp	r3, #0
   377c2:	f040 8448 	bne.w	38056 <ull_conn_llcp+0x117e>
	if (!conn->lll.role) {
   377c6:	2900      	cmp	r1, #0
   377c8:	f2c0 84d0 	blt.w	3816c <ull_conn_llcp+0x1294>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   377cc:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.win_offset_us = 0U;
   377d0:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   377d4:	2106      	movs	r1, #6
   377d6:	f361 0203 	bfi	r2, r1, #0, #4
		preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
   377da:	f894 1190 	ldrb.w	r1, [r4, #400]	; 0x190
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   377de:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.win_size = 1U;
   377e2:	2001      	movs	r0, #1
		interval_max = conn->llcp_conn_param.interval_max;
   377e4:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
		conn->llcp_cu.win_size = 1U;
   377e8:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
		if (preferred_periodicity) {
   377ec:	2900      	cmp	r1, #0
   377ee:	f000 84b9 	beq.w	38164 <ull_conn_llcp+0x128c>
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   377f2:	fbb2 f3f1 	udiv	r3, r2, r1
   377f6:	fb13 f301 	smulbb	r3, r3, r1
			if (conn->llcp_cu.interval < conn->llcp_conn_param.interval_min) {
   377fa:	f8b4 1188 	ldrh.w	r1, [r4, #392]	; 0x188
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   377fe:	b29b      	uxth	r3, r3
				conn->llcp_cu.interval = interval_max;
   37800:	4299      	cmp	r1, r3
   37802:	bf98      	it	ls
   37804:	461a      	movls	r2, r3
   37806:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   3780a:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   3780e:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   37812:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
   37816:	f8c4 1112 	str.w	r1, [r4, #274]	; 0x112
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   3781a:	f3c3 1300 	ubfx	r3, r3, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   3781e:	00db      	lsls	r3, r3, #3
   37820:	f043 0302 	orr.w	r3, r3, #2
   37824:	f022 020f 	bic.w	r2, r2, #15
   37828:	4313      	orrs	r3, r2
		conn->llcp_cu.ack--;
   3782a:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   3782e:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.ack--;
   37832:	f884 e10d 	strb.w	lr, [r4, #269]	; 0x10d
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   37836:	f7ff bb65 	b.w	36f04 <ull_conn_llcp+0x2c>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3783a:	4871      	ldr	r0, [pc, #452]	; (37a00 <ull_conn_llcp+0xb28>)
   3783c:	f7f8 f8ce 	bl	2f9dc <mem_acquire>
	if (!tx) {
   37840:	2800      	cmp	r0, #0
   37842:	d051      	beq.n	378e8 <ull_conn_llcp+0xa10>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   37844:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
   37846:	f8c8 4000 	str.w	r4, [r8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3784a:	f043 0303 	orr.w	r3, r3, #3
   3784e:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   37850:	2318      	movs	r3, #24
   37852:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   37854:	230f      	movs	r3, #15
   37856:	71c3      	strb	r3, [r0, #7]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   37858:	e9d4 3262 	ldrd	r3, r2, [r4, #392]	; 0x188
   3785c:	6083      	str	r3, [r0, #8]
	p->preferred_periodicity = 0U;
   3785e:	2300      	movs	r3, #0
   37860:	7403      	strb	r3, [r0, #16]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   37862:	60c2      	str	r2, [r0, #12]
	p->offset0 = sys_cpu_to_le16(0x0000);
   37864:	74c3      	strb	r3, [r0, #19]
   37866:	7503      	strb	r3, [r0, #20]
			event_counter = lll->event_counter +
   37868:	eb09 010a 	add.w	r1, r9, sl
	p->offset1 = sys_cpu_to_le16(0xffff);
   3786c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   37870:	7543      	strb	r3, [r0, #21]
   37872:	7583      	strb	r3, [r0, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
   37874:	75c3      	strb	r3, [r0, #23]
   37876:	7603      	strb	r3, [r0, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
   37878:	7643      	strb	r3, [r0, #25]
   3787a:	7683      	strb	r3, [r0, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
   3787c:	76c3      	strb	r3, [r0, #27]
   3787e:	7703      	strb	r3, [r0, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
   37880:	7743      	strb	r3, [r0, #29]
   37882:	7783      	strb	r3, [r0, #30]
			event_counter = lll->event_counter +
   37884:	4429      	add	r1, r5
	conn->procedure_expire = conn->procedure_reload;
   37886:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   3788a:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
   3788e:	f8a0 1011 	strh.w	r1, [r0, #17]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   37892:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   37896:	2104      	movs	r1, #4
   37898:	f361 0303 	bfi	r3, r1, #0, #4
   3789c:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
	    conn->tx_head &&
   378a0:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   378a4:	2b00      	cmp	r3, #0
   378a6:	f000 832b 	beq.w	37f00 <ull_conn_llcp+0x1028>
	    !conn->llcp_enc.pause_tx &&
   378aa:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   378ae:	078a      	lsls	r2, r1, #30
   378b0:	f100 8326 	bmi.w	37f00 <ull_conn_llcp+0x1028>
	    !conn->llcp_phy.pause_tx &&
   378b4:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   378b8:	07cf      	lsls	r7, r1, #31
   378ba:	f100 8321 	bmi.w	37f00 <ull_conn_llcp+0x1028>
		if (conn->tx_head == conn->tx_data) {
   378be:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   378c2:	428b      	cmp	r3, r1
		if (!conn->tx_ctrl) {
   378c4:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   378c8:	f000 8543 	beq.w	38352 <ull_conn_llcp+0x147a>
		} else if (!conn->tx_ctrl) {
   378cc:	2900      	cmp	r1, #0
   378ce:	f000 84c0 	beq.w	38252 <ull_conn_llcp+0x137a>
	tx->next = conn->tx_ctrl_last->next;
   378d2:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   378d6:	6819      	ldr	r1, [r3, #0]
   378d8:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   378da:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   378dc:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   378de:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   378e2:	2b00      	cmp	r3, #0
   378e4:	f000 8436 	beq.w	38154 <ull_conn_llcp+0x127c>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   378e8:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   378ec:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		break;
   378f0:	f7ff bafd 	b.w	36eee <ull_conn_llcp+0x16>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   378f4:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
   378f8:	2b00      	cmp	r3, #0
   378fa:	f43f ace1 	beq.w	372c0 <ull_conn_llcp+0x3e8>
			conn->periph.llcp_type = LLCP_NONE;
   378fe:	f884 10d9 	strb.w	r1, [r4, #217]	; 0xd9
   37902:	e4e1      	b.n	372c8 <ull_conn_llcp+0x3f0>
		if (!conn->tx_ctrl) {
   37904:	2a00      	cmp	r2, #0
   37906:	f47f ac33 	bne.w	37170 <ull_conn_llcp+0x298>
			tx->next = conn->tx_head;
   3790a:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   3790c:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   37910:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
		conn->tx_data_last = tx;
   37914:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   37918:	e435      	b.n	37186 <ull_conn_llcp+0x2ae>
		if (!conn->tx_ctrl) {
   3791a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   3791e:	2a00      	cmp	r2, #0
   37920:	f47f ad7b 	bne.w	3741a <ull_conn_llcp+0x542>
			tx->next = conn->tx_head;
   37924:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   37928:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   3792c:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   37930:	e57e      	b.n	37430 <ull_conn_llcp+0x558>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   37932:	4833      	ldr	r0, [pc, #204]	; (37a00 <ull_conn_llcp+0xb28>)
   37934:	f7f8 f852 	bl	2f9dc <mem_acquire>
	if (tx) {
   37938:	4680      	mov	r8, r0
   3793a:	2800      	cmp	r0, #0
   3793c:	d0d4      	beq.n	378e8 <ull_conn_llcp+0xa10>
		conn->llcp_feature.ack--;
   3793e:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
   37942:	3b01      	subs	r3, #1
   37944:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
   37948:	2309      	movs	r3, #9
   3794a:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
   3794c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   37950:	2b00      	cmp	r3, #0
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   37952:	7903      	ldrb	r3, [r0, #4]
   37954:	f043 0303 	orr.w	r3, r3, #3
   37958:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   3795a:	f04f 0208 	mov.w	r2, #8
		pdu->llctrl.opcode = !conn->lll.role ?
   3795e:	bfb4      	ite	lt
   37960:	230e      	movlt	r3, #14
   37962:	2308      	movge	r3, #8
   37964:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   37966:	4639      	mov	r1, r7
   37968:	4410      	add	r0, r2
   3796a:	f00d f8b5 	bl	44ad8 <memset>
	sys_put_le32(val >> 32, &dst[4]);
   3796e:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
	dst[0] = val;
   37972:	463b      	mov	r3, r7
   37974:	f362 0307 	bfi	r3, r2, #0, #8
	dst[1] = val >> 8;
   37978:	f3c2 2107 	ubfx	r1, r2, #8, #8
	dst[0] = val;
   3797c:	f361 230f 	bfi	r3, r1, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   37980:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   37982:	f362 4317 	bfi	r3, r2, #16, #8
	dst[1] = val >> 8;
   37986:	0a12      	lsrs	r2, r2, #8
	dst[0] = val;
   37988:	f362 631f 	bfi	r3, r2, #24, #8
   3798c:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
   37990:	f8c8 2008 	str.w	r2, [r8, #8]
   37994:	f8c8 300c 	str.w	r3, [r8, #12]
	    conn->tx_head &&
   37998:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   3799c:	2b00      	cmp	r3, #0
   3799e:	f000 822c 	beq.w	37dfa <ull_conn_llcp+0xf22>
	    !conn->llcp_enc.pause_tx &&
   379a2:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   379a6:	0797      	lsls	r7, r2, #30
   379a8:	f100 8133 	bmi.w	37c12 <ull_conn_llcp+0xd3a>
	    !conn->llcp_phy.pause_tx &&
   379ac:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   379b0:	07d0      	lsls	r0, r2, #31
   379b2:	f100 812e 	bmi.w	37c12 <ull_conn_llcp+0xd3a>
		if (conn->tx_head == conn->tx_data) {
   379b6:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   379ba:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   379be:	428b      	cmp	r3, r1
   379c0:	f000 828e 	beq.w	37ee0 <ull_conn_llcp+0x1008>
		} else if (!conn->tx_ctrl) {
   379c4:	2a00      	cmp	r2, #0
   379c6:	f000 8381 	beq.w	380cc <ull_conn_llcp+0x11f4>
	tx->next = conn->tx_ctrl_last->next;
   379ca:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   379ce:	681a      	ldr	r2, [r3, #0]
   379d0:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   379d4:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   379d8:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   379dc:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
   379e0:	2b00      	cmp	r3, #0
   379e2:	f000 8215 	beq.w	37e10 <ull_conn_llcp+0xf38>
		conn->procedure_expire = conn->procedure_reload;
   379e6:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   379ea:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   379ee:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		conn->procedure_expire = conn->procedure_reload;
   379f2:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	break;
   379f6:	f7ff ba7a 	b.w	36eee <ull_conn_llcp+0x16>
   379fa:	bf00      	nop
   379fc:	200025f4 	.word	0x200025f4
   37a00:	20002638 	.word	0x20002638
		ecb_encrypt(&conn->llcp_enc.ltk[0],
   37a04:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   37a08:	463b      	mov	r3, r7
   37a0a:	4642      	mov	r2, r8
   37a0c:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
   37a10:	f204 1071 	addw	r0, r4, #369	; 0x171
   37a14:	f004 fc34 	bl	3c280 <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
   37a18:	4639      	mov	r1, r7
   37a1a:	2210      	movs	r2, #16
   37a1c:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   37a20:	f00d f84f 	bl	44ac2 <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   37a24:	2208      	movs	r2, #8
   37a26:	f104 0194 	add.w	r1, r4, #148	; 0x94
   37a2a:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
   37a2e:	f00d f848 	bl	44ac2 <memcpy>
		lll->enc_rx = 1;
   37a32:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.counter = 0;
   37a36:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
		lll->enc_rx = 1;
   37a3a:	f023 0318 	bic.w	r3, r3, #24
   37a3e:	f043 0318 	orr.w	r3, r3, #24
   37a42:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.direction = 0;
   37a46:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
		lll->ccm_rx.counter = 0;
   37a4a:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
		lll->ccm_rx.direction = 0;
   37a4e:	f368 0300 	bfi	r3, r8, #0, #1
   37a52:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		lll->ccm_tx.direction = 1;
   37a56:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
		lll->ccm_rx.counter = 0;
   37a5a:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
		lll->ccm_tx.direction = 1;
   37a5e:	f043 0301 	orr.w	r3, r3, #1
   37a62:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   37a66:	2301      	movs	r3, #1
		lll->ccm_tx.counter = 0;
   37a68:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
		lll->ccm_rx.counter = 0;
   37a6c:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
   37a70:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   37a74:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   37a78:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   37a7c:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   37a80:	f899 2004 	ldrb.w	r2, [r9, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   37a84:	f889 3005 	strb.w	r3, [r9, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   37a88:	2306      	movs	r3, #6
   37a8a:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
   37a8e:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   37a92:	f042 0203 	orr.w	r2, r2, #3
   37a96:	f889 2004 	strb.w	r2, [r9, #4]
	if (
   37a9a:	2b00      	cmp	r3, #0
   37a9c:	d043      	beq.n	37b26 <ull_conn_llcp+0xc4e>
	    !conn->llcp_enc.pause_tx &&
   37a9e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   37aa2:	0797      	lsls	r7, r2, #30
   37aa4:	d43f      	bmi.n	37b26 <ull_conn_llcp+0xc4e>
	    !conn->llcp_phy.pause_tx &&
   37aa6:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   37aaa:	07d0      	lsls	r0, r2, #31
   37aac:	d43b      	bmi.n	37b26 <ull_conn_llcp+0xc4e>
		if (conn->tx_head == conn->tx_data) {
   37aae:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   37ab2:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   37ab4:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   37ab8:	f000 822b 	beq.w	37f12 <ull_conn_llcp+0x103a>
		} else if (!conn->tx_ctrl) {
   37abc:	2a00      	cmp	r2, #0
   37abe:	f000 8340 	beq.w	38142 <ull_conn_llcp+0x126a>
	tx->next = conn->tx_ctrl_last->next;
   37ac2:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   37ac6:	681a      	ldr	r2, [r3, #0]
   37ac8:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   37acc:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   37ad0:	f8d9 3000 	ldr.w	r3, [r9]
	conn->tx_ctrl_last = tx;
   37ad4:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   37ad8:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
	if (!tx->next) {
   37adc:	2b00      	cmp	r3, #0
   37ade:	f47f ad35 	bne.w	3754c <ull_conn_llcp+0x674>
		conn->tx_data_last = tx;
   37ae2:	f8c4 91d4 	str.w	r9, [r4, #468]	; 0x1d4
   37ae6:	e531      	b.n	3754c <ull_conn_llcp+0x674>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   37ae8:	f894 71ad 	ldrb.w	r7, [r4, #429]	; 0x1ad
   37aec:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   37af0:	429f      	cmp	r7, r3
   37af2:	d045      	beq.n	37b80 <ull_conn_llcp+0xca8>
			event_len_prep(conn);
   37af4:	4620      	mov	r0, r4
   37af6:	f7fd f85d 	bl	34bb4 <event_len_prep>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   37afa:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   37afe:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   37b02:	f7ff b9f4 	b.w	36eee <ull_conn_llcp+0x16>
			conn->tx_data = conn->tx_data->next;
   37b06:	6819      	ldr	r1, [r3, #0]
   37b08:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   37b0c:	2a00      	cmp	r2, #0
   37b0e:	f47f aad1 	bne.w	370b4 <ull_conn_llcp+0x1dc>
			tx->next = conn->tx_head->next;
   37b12:	681a      	ldr	r2, [r3, #0]
   37b14:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   37b16:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   37b18:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   37b1a:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
   37b1e:	2b00      	cmp	r3, #0
   37b20:	f47f aad3 	bne.w	370ca <ull_conn_llcp+0x1f2>
   37b24:	e43a      	b.n	3739c <ull_conn_llcp+0x4c4>
		if (!conn->tx_ctrl) {
   37b26:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   37b2a:	2a00      	cmp	r2, #0
   37b2c:	d1c9      	bne.n	37ac2 <ull_conn_llcp+0xbea>
			tx->next = conn->tx_head;
   37b2e:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   37b32:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   37b36:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   37b3a:	e7cd      	b.n	37ad8 <ull_conn_llcp+0xc00>
		if (!conn->tx_ctrl) {
   37b3c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   37b40:	2a00      	cmp	r2, #0
   37b42:	f47f ad4e 	bne.w	375e2 <ull_conn_llcp+0x70a>
			tx->next = conn->tx_head;
   37b46:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
   37b48:	e9c4 6671 	strd	r6, r6, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   37b4c:	f8c4 61cc 	str.w	r6, [r4, #460]	; 0x1cc
	if (!tx->next) {
   37b50:	f7ff b9d8 	b.w	36f04 <ull_conn_llcp+0x2c>
		if (!conn->tx_ctrl) {
   37b54:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   37b58:	2a00      	cmp	r2, #0
   37b5a:	f47f ab67 	bne.w	3722c <ull_conn_llcp+0x354>
			tx->next = conn->tx_head;
   37b5e:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
   37b60:	e9c4 7771 	strd	r7, r7, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   37b64:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
	if (!tx->next) {
   37b68:	f7ff bb6b 	b.w	37242 <ull_conn_llcp+0x36a>
		if (!conn->tx_ctrl) {
   37b6c:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   37b70:	2b00      	cmp	r3, #0
   37b72:	f47f acdb 	bne.w	3752c <ull_conn_llcp+0x654>
			tx->next = conn->tx_head;
   37b76:	f8c9 2000 	str.w	r2, [r9]
				conn->tx_ctrl = tx;
   37b7a:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   37b7e:	e4dc      	b.n	3753a <ull_conn_llcp+0x662>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   37b80:	f894 31bc 	ldrb.w	r3, [r4, #444]	; 0x1bc
   37b84:	f894 71bd 	ldrb.w	r7, [r4, #445]	; 0x1bd
   37b88:	429f      	cmp	r7, r3
   37b8a:	f43f a9b8 	beq.w	36efe <ull_conn_llcp+0x26>
	switch (conn->llcp_phy.state) {
   37b8e:	f894 71be 	ldrb.w	r7, [r4, #446]	; 0x1be
   37b92:	f007 0803 	and.w	r8, r7, #3
   37b96:	f1b8 0f03 	cmp.w	r8, #3
   37b9a:	f000 81d9 	beq.w	37f50 <ull_conn_llcp+0x1078>
   37b9e:	f1b8 0f00 	cmp.w	r8, #0
   37ba2:	f47f a9ab 	bne.w	36efc <ull_conn_llcp+0x24>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   37ba6:	48c9      	ldr	r0, [pc, #804]	; (37ecc <ull_conn_llcp+0xff4>)
   37ba8:	f7f7 ff18 	bl	2f9dc <mem_acquire>
		if (!tx) {
   37bac:	4601      	mov	r1, r0
   37bae:	2800      	cmp	r0, #0
   37bb0:	f43f ae9a 	beq.w	378e8 <ull_conn_llcp+0xa10>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   37bb4:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		conn->lll.phy_flags = conn->llcp_phy.flags;
   37bb8:	f894 71bf 	ldrb.w	r7, [r4, #447]	; 0x1bf
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   37bbc:	2001      	movs	r0, #1
   37bbe:	f360 0301 	bfi	r3, r0, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
   37bc2:	f894 01c0 	ldrb.w	r0, [r4, #448]	; 0x1c0
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   37bc6:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		conn->phy_pref_tx = conn->llcp_phy.tx;
   37bca:	f3c3 0c82 	ubfx	ip, r3, #2, #3
   37bce:	f36c 0002 	bfi	r0, ip, #0, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
   37bd2:	f894 c060 	ldrb.w	ip, [r4, #96]	; 0x60
   37bd6:	f3c7 0740 	ubfx	r7, r7, #1, #1
   37bda:	f367 0cc3 	bfi	ip, r7, #3, #1
   37bde:	f884 c060 	strb.w	ip, [r4, #96]	; 0x60
		conn->phy_pref_rx = conn->llcp_phy.rx;
   37be2:	f3c3 1c42 	ubfx	ip, r3, #5, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   37be6:	790f      	ldrb	r7, [r1, #4]
		conn->phy_pref_rx = conn->llcp_phy.rx;
   37be8:	f36c 00c5 	bfi	r0, ip, #3, #3
   37bec:	f884 01c0 	strb.w	r0, [r4, #448]	; 0x1c0
		conn->phy_pref_tx = conn->llcp_phy.tx;
   37bf0:	f3c3 0082 	ubfx	r0, r3, #2, #3
		pdu_ctrl_tx->len =
   37bf4:	2303      	movs	r3, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   37bf6:	f047 0703 	orr.w	r7, r7, #3
		pdu_ctrl_tx->len =
   37bfa:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   37bfc:	2316      	movs	r3, #22
		pr->tx_phys = conn->llcp_phy.tx;
   37bfe:	7208      	strb	r0, [r1, #8]
	ctrl_tx_pause_enqueue(conn, tx, false);
   37c00:	4642      	mov	r2, r8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   37c02:	710f      	strb	r7, [r1, #4]
		pr->rx_phys = conn->llcp_phy.rx;
   37c04:	f881 c009 	strb.w	ip, [r1, #9]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   37c08:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_pause_enqueue(conn, tx, false);
   37c0a:	4620      	mov	r0, r4
   37c0c:	f7fc fcb6 	bl	3457c <ctrl_tx_pause_enqueue>
   37c10:	e6e9      	b.n	379e6 <ull_conn_llcp+0xb0e>
		if (!conn->tx_ctrl) {
   37c12:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   37c16:	2a00      	cmp	r2, #0
   37c18:	f47f aed7 	bne.w	379ca <ull_conn_llcp+0xaf2>
			tx->next = conn->tx_head;
   37c1c:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   37c20:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   37c24:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
   37c28:	e6dd      	b.n	379e6 <ull_conn_llcp+0xb0e>
		if (!conn->tx_ctrl) {
   37c2a:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   37c2e:	2b00      	cmp	r3, #0
   37c30:	f47f acd7 	bne.w	375e2 <ull_conn_llcp+0x70a>
			tx->next = conn->tx_head;
   37c34:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
   37c36:	e9c4 6671 	strd	r6, r6, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   37c3a:	f8c4 61cc 	str.w	r6, [r4, #460]	; 0x1cc
	if (!tx->next) {
   37c3e:	e4db      	b.n	375f8 <ull_conn_llcp+0x720>
		LL_ASSERT(0);
   37c40:	4aa3      	ldr	r2, [pc, #652]	; (37ed0 <ull_conn_llcp+0xff8>)
   37c42:	49a4      	ldr	r1, [pc, #656]	; (37ed4 <ull_conn_llcp+0xffc>)
   37c44:	f640 63a1 	movw	r3, #3745	; 0xea1
		LL_ASSERT(0);
   37c48:	48a3      	ldr	r0, [pc, #652]	; (37ed8 <ull_conn_llcp+0x1000>)
   37c4a:	f00a fe3b 	bl	428c4 <printk>
   37c4e:	4040      	eors	r0, r0
   37c50:	f380 8811 	msr	BASEPRI, r0
   37c54:	f04f 0003 	mov.w	r0, #3
   37c58:	df02      	svc	2
   37c5a:	e645      	b.n	378e8 <ull_conn_llcp+0xa10>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   37c5c:	489b      	ldr	r0, [pc, #620]	; (37ecc <ull_conn_llcp+0xff4>)
   37c5e:	f7f7 febd 	bl	2f9dc <mem_acquire>
		if (tx) {
   37c62:	2800      	cmp	r0, #0
   37c64:	f43f ae40 	beq.w	378e8 <ull_conn_llcp+0xa10>
			conn->llcp_version.ack--;
   37c68:	f894 3139 	ldrb.w	r3, [r4, #313]	; 0x139
   37c6c:	3b01      	subs	r3, #1
   37c6e:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
			conn->llcp_version.tx = 1U;
   37c72:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   37c76:	f043 0301 	orr.w	r3, r3, #1
   37c7a:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   37c7e:	7903      	ldrb	r3, [r0, #4]
   37c80:	f043 0303 	orr.w	r3, r3, #3
   37c84:	7103      	strb	r3, [r0, #4]
			pdu->len =
   37c86:	2306      	movs	r3, #6
   37c88:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
   37c8a:	f640 430c 	movw	r3, #3084	; 0xc0c
   37c8e:	f8a0 3007 	strh.w	r3, [r0, #7]
			pdu->llctrl.version_ind.company_id = cid;
   37c92:	4b92      	ldr	r3, [pc, #584]	; (37edc <ull_conn_llcp+0x1004>)
   37c94:	f8c0 3009 	str.w	r3, [r0, #9]
	    conn->tx_head &&
   37c98:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   37c9c:	2b00      	cmp	r3, #0
   37c9e:	f000 80bf 	beq.w	37e20 <ull_conn_llcp+0xf48>
	    !conn->llcp_enc.pause_tx &&
   37ca2:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   37ca6:	0792      	lsls	r2, r2, #30
   37ca8:	f100 80ba 	bmi.w	37e20 <ull_conn_llcp+0xf48>
	    !conn->llcp_phy.pause_tx &&
   37cac:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   37cb0:	07d7      	lsls	r7, r2, #31
   37cb2:	f100 80b5 	bmi.w	37e20 <ull_conn_llcp+0xf48>
		if (conn->tx_head == conn->tx_data) {
   37cb6:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   37cba:	4293      	cmp	r3, r2
   37cbc:	f000 82b2 	beq.w	38224 <ull_conn_llcp+0x134c>
		} else if (!conn->tx_ctrl) {
   37cc0:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   37cc4:	2a00      	cmp	r2, #0
   37cc6:	f000 82fe 	beq.w	382c6 <ull_conn_llcp+0x13ee>
	tx->next = conn->tx_ctrl_last->next;
   37cca:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   37cce:	681a      	ldr	r2, [r3, #0]
   37cd0:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   37cd2:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   37cd4:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   37cd6:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   37cda:	2b00      	cmp	r3, #0
   37cdc:	f47f ae83 	bne.w	379e6 <ull_conn_llcp+0xb0e>
		conn->tx_data_last = tx;
   37ce0:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
			conn->procedure_expire = conn->procedure_reload;
   37ce4:	e67f      	b.n	379e6 <ull_conn_llcp+0xb0e>
		if (!conn->tx_ctrl) {
   37ce6:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   37cea:	2a00      	cmp	r2, #0
   37cec:	f47f a97f 	bne.w	36fee <ull_conn_llcp+0x116>
			tx->next = conn->tx_head;
   37cf0:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   37cf4:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   37cf8:	f7ff b980 	b.w	36ffc <ull_conn_llcp+0x124>
		if (!conn->tx_ctrl) {
   37cfc:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   37d00:	2b00      	cmp	r3, #0
   37d02:	f47f aa93 	bne.w	3722c <ull_conn_llcp+0x354>
			tx->next = conn->tx_head;
   37d06:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
   37d08:	e9c4 7771 	strd	r7, r7, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   37d0c:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
		conn->tx_data_last = tx;
   37d10:	f8c4 71d4 	str.w	r7, [r4, #468]	; 0x1d4
			if (err) {
   37d14:	f7ff ba95 	b.w	37242 <ull_conn_llcp+0x36a>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   37d18:	7903      	ldrb	r3, [r0, #4]
   37d1a:	f043 0303 	orr.w	r3, r3, #3
   37d1e:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   37d20:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   37d24:	07da      	lsls	r2, r3, #31
   37d26:	d576      	bpl.n	37e16 <ull_conn_llcp+0xf3e>
	    (conn->llcp_feature.features_conn &
   37d28:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	if (conn->common.fex_valid &&
   37d2c:	075b      	lsls	r3, r3, #29
   37d2e:	d572      	bpl.n	37e16 <ull_conn_llcp+0xf3e>
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   37d30:	2303      	movs	r3, #3
   37d32:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp.encryption.error_code;
   37d34:	f880 8009 	strb.w	r8, [r0, #9]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   37d38:	2311      	movs	r3, #17
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
   37d3a:	f889 7005 	strb.w	r7, [r9, #5]
   37d3e:	f889 3007 	strb.w	r3, [r9, #7]
	conn->llcp.encryption.error_code = 0U;
   37d42:	2300      	movs	r3, #0
   37d44:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
	    conn->tx_head &&
   37d48:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   37d4c:	2b00      	cmp	r3, #0
   37d4e:	d03d      	beq.n	37dcc <ull_conn_llcp+0xef4>
	    !conn->llcp_enc.pause_tx &&
   37d50:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   37d54:	0797      	lsls	r7, r2, #30
   37d56:	d439      	bmi.n	37dcc <ull_conn_llcp+0xef4>
	    !conn->llcp_phy.pause_tx &&
   37d58:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   37d5c:	07d0      	lsls	r0, r2, #31
   37d5e:	d435      	bmi.n	37dcc <ull_conn_llcp+0xef4>
		if (conn->tx_head == conn->tx_data) {
   37d60:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   37d64:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   37d66:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   37d6a:	f000 81d8 	beq.w	3811e <ull_conn_llcp+0x1246>
		} else if (!conn->tx_ctrl) {
   37d6e:	2a00      	cmp	r2, #0
   37d70:	f000 82b4 	beq.w	382dc <ull_conn_llcp+0x1404>
	tx->next = conn->tx_ctrl_last->next;
   37d74:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   37d78:	681a      	ldr	r2, [r3, #0]
   37d7a:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   37d7e:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   37d82:	f8d9 3000 	ldr.w	r3, [r9]
	conn->tx_ctrl_last = tx;
   37d86:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   37d8a:	2b00      	cmp	r3, #0
   37d8c:	d06d      	beq.n	37e6a <ull_conn_llcp+0xf92>
			conn->llcp_ack = conn->llcp_req;
   37d8e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   37d92:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   37d96:	f7ff b93e 	b.w	37016 <ull_conn_llcp+0x13e>
	switch (conn->llcp_conn_param.state) {
   37d9a:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   37d9e:	f003 030f 	and.w	r3, r3, #15
   37da2:	2b06      	cmp	r3, #6
   37da4:	f200 82e9 	bhi.w	3837a <ull_conn_llcp+0x14a2>
   37da8:	a001      	add	r0, pc, #4	; (adr r0, 37db0 <ull_conn_llcp+0xed8>)
   37daa:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   37dae:	bf00      	nop
   37db0:	0003783b 	.word	0x0003783b
   37db4:	000377bd 	.word	0x000377bd
   37db8:	0003777d 	.word	0x0003777d
   37dbc:	00036eff 	.word	0x00036eff
   37dc0:	00036eff 	.word	0x00036eff
   37dc4:	00036eff 	.word	0x00036eff
   37dc8:	00036eff 	.word	0x00036eff
		if (!conn->tx_ctrl) {
   37dcc:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   37dd0:	2a00      	cmp	r2, #0
   37dd2:	d1cf      	bne.n	37d74 <ull_conn_llcp+0xe9c>
			tx->next = conn->tx_head;
   37dd4:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   37dd8:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   37ddc:	e7d1      	b.n	37d82 <ull_conn_llcp+0xeaa>
			conn->tx_data = conn->tx_data->next;
   37dde:	6819      	ldr	r1, [r3, #0]
   37de0:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   37de4:	2a00      	cmp	r2, #0
   37de6:	f47f a9c3 	bne.w	37170 <ull_conn_llcp+0x298>
			tx->next = conn->tx_head->next;
   37dea:	681a      	ldr	r2, [r3, #0]
   37dec:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   37dee:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   37df0:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   37df2:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   37df6:	f7ff b9c3 	b.w	37180 <ull_conn_llcp+0x2a8>
		if (!conn->tx_ctrl) {
   37dfa:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   37dfe:	2b00      	cmp	r3, #0
   37e00:	f47f ade3 	bne.w	379ca <ull_conn_llcp+0xaf2>
			tx->next = conn->tx_head;
   37e04:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   37e08:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   37e0c:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
		conn->tx_data_last = tx;
   37e10:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
		conn->procedure_expire = conn->procedure_reload;
   37e14:	e5e7      	b.n	379e6 <ull_conn_llcp+0xb0e>
		p->error_code =	conn->llcp.encryption.error_code;
   37e16:	f889 8008 	strb.w	r8, [r9, #8]
   37e1a:	2702      	movs	r7, #2
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   37e1c:	230d      	movs	r3, #13
   37e1e:	e78c      	b.n	37d3a <ull_conn_llcp+0xe62>
		if (!conn->tx_ctrl) {
   37e20:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   37e24:	2a00      	cmp	r2, #0
   37e26:	f47f af50 	bne.w	37cca <ull_conn_llcp+0xdf2>
			tx->next = conn->tx_head;
   37e2a:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   37e2c:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   37e30:	e750      	b.n	37cd4 <ull_conn_llcp+0xdfc>
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   37e32:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
		conn->tx_data_last = tx;
   37e36:	f8c4 91d4 	str.w	r9, [r4, #468]	; 0x1d4
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   37e3a:	f043 0303 	orr.w	r3, r3, #3
   37e3e:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   37e42:	f7ff b8e8 	b.w	37016 <ull_conn_llcp+0x13e>
	    ((pdu_data_tx->llctrl.opcode !=
   37e46:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   37e48:	2a03      	cmp	r2, #3
   37e4a:	f43f ae62 	beq.w	37b12 <ull_conn_llcp+0xc3a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   37e4e:	2a0a      	cmp	r2, #10
   37e50:	f47f a92a 	bne.w	370a8 <ull_conn_llcp+0x1d0>
   37e54:	e65d      	b.n	37b12 <ull_conn_llcp+0xc3a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   37e56:	791a      	ldrb	r2, [r3, #4]
   37e58:	f002 0203 	and.w	r2, r2, #3
   37e5c:	2a03      	cmp	r2, #3
   37e5e:	f000 80c7 	beq.w	37ff0 <ull_conn_llcp+0x1118>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   37e62:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   37e66:	f7ff b983 	b.w	37170 <ull_conn_llcp+0x298>
		conn->tx_data_last = tx;
   37e6a:	f8c4 91d4 	str.w	r9, [r4, #468]	; 0x1d4
   37e6e:	e78e      	b.n	37d8e <ull_conn_llcp+0xeb6>
			conn->tx_data = conn->tx_data->next;
   37e70:	6819      	ldr	r1, [r3, #0]
   37e72:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   37e76:	2a00      	cmp	r2, #0
   37e78:	f47f abb3 	bne.w	375e2 <ull_conn_llcp+0x70a>
			tx->next = conn->tx_head->next;
   37e7c:	681a      	ldr	r2, [r3, #0]
   37e7e:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
   37e80:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
   37e82:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
   37e84:	e9c4 6672 	strd	r6, r6, [r4, #456]	; 0x1c8
   37e88:	f7ff bbb3 	b.w	375f2 <ull_conn_llcp+0x71a>
			conn->tx_data = conn->tx_data->next;
   37e8c:	6819      	ldr	r1, [r3, #0]
   37e8e:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   37e92:	2a00      	cmp	r2, #0
   37e94:	f47f aac1 	bne.w	3741a <ull_conn_llcp+0x542>
			tx->next = conn->tx_head->next;
   37e98:	681a      	ldr	r2, [r3, #0]
   37e9a:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   37e9e:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   37ea2:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   37ea6:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
   37eaa:	f7ff bac1 	b.w	37430 <ull_conn_llcp+0x558>
			conn->tx_data = conn->tx_data->next;
   37eae:	6819      	ldr	r1, [r3, #0]
   37eb0:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   37eb4:	2a00      	cmp	r2, #0
   37eb6:	f47f a9b9 	bne.w	3722c <ull_conn_llcp+0x354>
			tx->next = conn->tx_head->next;
   37eba:	681a      	ldr	r2, [r3, #0]
   37ebc:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
   37ebe:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   37ec0:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
   37ec2:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
   37ec6:	f7ff b9b9 	b.w	3723c <ull_conn_llcp+0x364>
   37eca:	bf00      	nop
   37ecc:	20002638 	.word	0x20002638
   37ed0:	0004a0dc 	.word	0x0004a0dc
   37ed4:	00049cc8 	.word	0x00049cc8
   37ed8:	00049c68 	.word	0x00049c68
   37edc:	ffff05f1 	.word	0xffff05f1
			conn->tx_data = conn->tx_data->next;
   37ee0:	6819      	ldr	r1, [r3, #0]
   37ee2:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   37ee6:	2a00      	cmp	r2, #0
   37ee8:	f47f ad6f 	bne.w	379ca <ull_conn_llcp+0xaf2>
			tx->next = conn->tx_head->next;
   37eec:	681a      	ldr	r2, [r3, #0]
   37eee:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   37ef2:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   37ef6:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   37efa:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
   37efe:	e56f      	b.n	379e0 <ull_conn_llcp+0xb08>
		if (!conn->tx_ctrl) {
   37f00:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   37f04:	2900      	cmp	r1, #0
   37f06:	f47f ace4 	bne.w	378d2 <ull_conn_llcp+0x9fa>
			tx->next = conn->tx_head;
   37f0a:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   37f0c:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   37f10:	e4e4      	b.n	378dc <ull_conn_llcp+0xa04>
			conn->tx_data = conn->tx_data->next;
   37f12:	6819      	ldr	r1, [r3, #0]
   37f14:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   37f18:	2a00      	cmp	r2, #0
   37f1a:	f47f add2 	bne.w	37ac2 <ull_conn_llcp+0xbea>
			tx->next = conn->tx_head->next;
   37f1e:	681a      	ldr	r2, [r3, #0]
   37f20:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   37f24:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   37f28:	f8d9 3000 	ldr.w	r3, [r9]
				conn->tx_ctrl_last = tx;
   37f2c:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   37f30:	e5d2      	b.n	37ad8 <ull_conn_llcp+0xc00>
			conn->tx_data = conn->tx_data->next;
   37f32:	6811      	ldr	r1, [r2, #0]
   37f34:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   37f38:	2b00      	cmp	r3, #0
   37f3a:	f47f aaf7 	bne.w	3752c <ull_conn_llcp+0x654>
			tx->next = conn->tx_head->next;
   37f3e:	6813      	ldr	r3, [r2, #0]
   37f40:	f8c9 3000 	str.w	r3, [r9]
			conn->tx_head->next = tx;
   37f44:	f8c2 9000 	str.w	r9, [r2]
				conn->tx_ctrl = tx;
   37f48:	f8c4 91c8 	str.w	r9, [r4, #456]	; 0x1c8
				conn->tx_ctrl_last = tx;
   37f4c:	f7ff baf5 	b.w	3753a <ull_conn_llcp+0x662>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   37f50:	f884 31bd 	strb.w	r3, [r4, #445]	; 0x1bd
		if (conn->llcp_phy.tx & PHY_2M) {
   37f54:	f3c7 0382 	ubfx	r3, r7, #2, #3
   37f58:	073f      	lsls	r7, r7, #28
   37f5a:	f100 80f0 	bmi.w	3813e <ull_conn_llcp+0x1266>
		} else if (conn->llcp_phy.tx & PHY_1M) {
   37f5e:	f013 0201 	ands.w	r2, r3, #1
   37f62:	d104      	bne.n	37f6e <ull_conn_llcp+0x1096>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
   37f64:	2b03      	cmp	r3, #3
   37f66:	bf94      	ite	ls
   37f68:	2300      	movls	r3, #0
   37f6a:	2301      	movhi	r3, #1
   37f6c:	009a      	lsls	r2, r3, #2
			conn->llcp_phy.tx = PHY_2M;
   37f6e:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
   37f72:	f362 0184 	bfi	r1, r2, #2, #3
   37f76:	f884 11be 	strb.w	r1, [r4, #446]	; 0x1be
		if (conn->llcp_phy.rx & PHY_2M) {
   37f7a:	f3c1 1342 	ubfx	r3, r1, #5, #3
   37f7e:	0649      	lsls	r1, r1, #25
   37f80:	f100 80db 	bmi.w	3813a <ull_conn_llcp+0x1262>
		} else if (conn->llcp_phy.rx & PHY_1M) {
   37f84:	f013 0101 	ands.w	r1, r3, #1
   37f88:	d104      	bne.n	37f94 <ull_conn_llcp+0x10bc>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
   37f8a:	2b03      	cmp	r3, #3
   37f8c:	bf94      	ite	ls
   37f8e:	2300      	movls	r3, #0
   37f90:	2301      	movhi	r3, #1
   37f92:	0099      	lsls	r1, r3, #2
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   37f94:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			conn->llcp_phy.rx = PHY_2M;
   37f98:	f894 71be 	ldrb.w	r7, [r4, #446]	; 0x1be
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   37f9c:	f003 0307 	and.w	r3, r3, #7
			conn->llcp.phy_upd_ind.tx = 0U;
   37fa0:	4293      	cmp	r3, r2
   37fa2:	bf08      	it	eq
   37fa4:	2200      	moveq	r2, #0
		conn->llcp_ack -= 2U;
   37fa6:	3802      	subs	r0, #2
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   37fa8:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp_ack -= 2U;
   37fac:	f884 00e5 	strb.w	r0, [r4, #229]	; 0xe5
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   37fb0:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   37fb4:	f3c3 0380 	ubfx	r3, r3, #2, #1
		conn->llcp.phy_upd_ind.initiate = 1U;
   37fb8:	005b      	lsls	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   37fba:	f000 0007 	and.w	r0, r0, #7
			conn->llcp_phy.rx = PHY_2M;
   37fbe:	f361 1747 	bfi	r7, r1, #5, #3
		conn->llcp.phy_upd_ind.initiate = 1U;
   37fc2:	f043 0301 	orr.w	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
   37fc6:	4288      	cmp	r0, r1
   37fc8:	bf08      	it	eq
   37fca:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   37fcc:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   37fd0:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
			conn->llcp_phy.rx = PHY_2M;
   37fd4:	f884 71be 	strb.w	r7, [r4, #446]	; 0x1be
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   37fd8:	f362 0184 	bfi	r1, r2, #2, #3
		conn->llcp.phy_upd_ind.initiate = 1U;
   37fdc:	f001 011c 	and.w	r1, r1, #28
   37fe0:	430b      	orrs	r3, r1
		conn->llcp_type = LLCP_PHY_UPD;
   37fe2:	2206      	movs	r2, #6
		conn->llcp.phy_upd_ind.initiate = 1U;
   37fe4:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		conn->llcp_type = LLCP_PHY_UPD;
   37fe8:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   37fec:	f7fe bfa3 	b.w	36f36 <ull_conn_llcp+0x5e>
	    ((pdu_data_tx->llctrl.opcode !=
   37ff0:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   37ff2:	2a03      	cmp	r2, #3
   37ff4:	f43f aef9 	beq.w	37dea <ull_conn_llcp+0xf12>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   37ff8:	2a0a      	cmp	r2, #10
   37ffa:	f47f af32 	bne.w	37e62 <ull_conn_llcp+0xf8a>
   37ffe:	e6f4      	b.n	37dea <ull_conn_llcp+0xf12>
			conn->tx_data = conn->tx_data->next;
   38000:	6819      	ldr	r1, [r3, #0]
   38002:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   38006:	2a00      	cmp	r2, #0
   38008:	f47e aff1 	bne.w	36fee <ull_conn_llcp+0x116>
			tx->next = conn->tx_head->next;
   3800c:	681a      	ldr	r2, [r3, #0]
   3800e:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   38012:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl = tx;
   38016:	f8c4 91c8 	str.w	r9, [r4, #456]	; 0x1c8
				conn->tx_ctrl_last = tx;
   3801a:	f7fe bfef 	b.w	36ffc <ull_conn_llcp+0x124>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3801e:	791a      	ldrb	r2, [r3, #4]
   38020:	f002 0203 	and.w	r2, r2, #3
   38024:	2a03      	cmp	r2, #3
   38026:	d062      	beq.n	380ee <ull_conn_llcp+0x1216>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   38028:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   3802c:	f7ff b8fe 	b.w	3722c <ull_conn_llcp+0x354>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38030:	791a      	ldrb	r2, [r3, #4]
   38032:	f002 0203 	and.w	r2, r2, #3
   38036:	2a03      	cmp	r2, #3
   38038:	d060      	beq.n	380fc <ull_conn_llcp+0x1224>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3803a:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   3803e:	f7ff bad0 	b.w	375e2 <ull_conn_llcp+0x70a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38042:	791a      	ldrb	r2, [r3, #4]
   38044:	f002 0203 	and.w	r2, r2, #3
   38048:	2a03      	cmp	r2, #3
   3804a:	f000 80dd 	beq.w	38208 <ull_conn_llcp+0x1330>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3804e:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   38052:	f7ff b9e2 	b.w	3741a <ull_conn_llcp+0x542>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   38056:	48b3      	ldr	r0, [pc, #716]	; (38324 <ull_conn_llcp+0x144c>)
   38058:	f7f7 fcc0 	bl	2f9dc <mem_acquire>
		if (!tx) {
   3805c:	2800      	cmp	r0, #0
   3805e:	f43f ac43 	beq.w	378e8 <ull_conn_llcp+0xa10>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   38062:	7902      	ldrb	r2, [r0, #4]
   38064:	f042 0203 	orr.w	r2, r2, #3
   38068:	7102      	strb	r2, [r0, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   3806a:	2203      	movs	r2, #3
   3806c:	7142      	strb	r2, [r0, #5]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   3806e:	f640 7211 	movw	r2, #3857	; 0xf11
   38072:	f8a0 2007 	strh.w	r2, [r0, #7]
		rej->error_code = conn->llcp_conn_param.status;
   38076:	f894 2187 	ldrb.w	r2, [r4, #391]	; 0x187
   3807a:	7242      	strb	r2, [r0, #9]
	    conn->tx_head &&
   3807c:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	if (
   38080:	b36a      	cbz	r2, 380de <ull_conn_llcp+0x1206>
	    !conn->llcp_enc.pause_tx &&
   38082:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   38086:	0789      	lsls	r1, r1, #30
   38088:	d429      	bmi.n	380de <ull_conn_llcp+0x1206>
	    !conn->llcp_phy.pause_tx &&
   3808a:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   3808e:	07cb      	lsls	r3, r1, #31
   38090:	d425      	bmi.n	380de <ull_conn_llcp+0x1206>
		if (conn->tx_head == conn->tx_data) {
   38092:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   38096:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
   38098:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   3809c:	f000 812e 	beq.w	382fc <ull_conn_llcp+0x1424>
		} else if (!conn->tx_ctrl) {
   380a0:	2900      	cmp	r1, #0
   380a2:	f000 8141 	beq.w	38328 <ull_conn_llcp+0x1450>
	tx->next = conn->tx_ctrl_last->next;
   380a6:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   380aa:	6811      	ldr	r1, [r2, #0]
   380ac:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   380ae:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   380b0:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   380b2:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   380b6:	2a00      	cmp	r2, #0
   380b8:	f000 810d 	beq.w	382d6 <ull_conn_llcp+0x13fe>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   380bc:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   380c0:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   380c4:	2300      	movs	r3, #0
   380c6:	f8c8 3000 	str.w	r3, [r8]
		return;
   380ca:	e40d      	b.n	378e8 <ull_conn_llcp+0xa10>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   380cc:	791a      	ldrb	r2, [r3, #4]
   380ce:	f002 0203 	and.w	r2, r2, #3
   380d2:	2a03      	cmp	r2, #3
   380d4:	f000 811e 	beq.w	38314 <ull_conn_llcp+0x143c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   380d8:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   380dc:	e475      	b.n	379ca <ull_conn_llcp+0xaf2>
		if (!conn->tx_ctrl) {
   380de:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   380e2:	2900      	cmp	r1, #0
   380e4:	d1df      	bne.n	380a6 <ull_conn_llcp+0x11ce>
			tx->next = conn->tx_head;
   380e6:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   380e8:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   380ec:	e7e0      	b.n	380b0 <ull_conn_llcp+0x11d8>
	    ((pdu_data_tx->llctrl.opcode !=
   380ee:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   380f0:	2a03      	cmp	r2, #3
   380f2:	f43f aee2 	beq.w	37eba <ull_conn_llcp+0xfe2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   380f6:	2a0a      	cmp	r2, #10
   380f8:	d196      	bne.n	38028 <ull_conn_llcp+0x1150>
   380fa:	e6de      	b.n	37eba <ull_conn_llcp+0xfe2>
	    ((pdu_data_tx->llctrl.opcode !=
   380fc:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   380fe:	2a03      	cmp	r2, #3
   38100:	f43f aebc 	beq.w	37e7c <ull_conn_llcp+0xfa4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   38104:	2a0a      	cmp	r2, #10
   38106:	d198      	bne.n	3803a <ull_conn_llcp+0x1162>
   38108:	e6b8      	b.n	37e7c <ull_conn_llcp+0xfa4>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3810a:	7913      	ldrb	r3, [r2, #4]
   3810c:	f003 0303 	and.w	r3, r3, #3
   38110:	2b03      	cmp	r3, #3
   38112:	f000 80eb 	beq.w	382ec <ull_conn_llcp+0x1414>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   38116:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   3811a:	f7ff ba07 	b.w	3752c <ull_conn_llcp+0x654>
			conn->tx_data = conn->tx_data->next;
   3811e:	6819      	ldr	r1, [r3, #0]
   38120:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   38124:	2a00      	cmp	r2, #0
   38126:	f47f ae25 	bne.w	37d74 <ull_conn_llcp+0xe9c>
			tx->next = conn->tx_head->next;
   3812a:	681a      	ldr	r2, [r3, #0]
   3812c:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   38130:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl = tx;
   38134:	f8c4 91c8 	str.w	r9, [r4, #456]	; 0x1c8
				conn->tx_ctrl_last = tx;
   38138:	e623      	b.n	37d82 <ull_conn_llcp+0xeaa>
   3813a:	2102      	movs	r1, #2
   3813c:	e72a      	b.n	37f94 <ull_conn_llcp+0x10bc>
   3813e:	2202      	movs	r2, #2
   38140:	e715      	b.n	37f6e <ull_conn_llcp+0x1096>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38142:	791a      	ldrb	r2, [r3, #4]
   38144:	f002 0203 	and.w	r2, r2, #3
   38148:	2a03      	cmp	r2, #3
   3814a:	f000 808b 	beq.w	38264 <ull_conn_llcp+0x138c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3814e:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   38152:	e4b6      	b.n	37ac2 <ull_conn_llcp+0xbea>
		conn->tx_data_last = tx;
   38154:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   38158:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3815c:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   38160:	f7fe bec5 	b.w	36eee <ull_conn_llcp+0x16>
			conn->llcp_cu.interval = interval_max;
   38164:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
   38168:	f7ff bb4f 	b.w	3780a <ull_conn_llcp+0x932>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3816c:	486d      	ldr	r0, [pc, #436]	; (38324 <ull_conn_llcp+0x144c>)
   3816e:	f7f7 fc35 	bl	2f9dc <mem_acquire>
	if (!tx) {
   38172:	4603      	mov	r3, r0
   38174:	2800      	cmp	r0, #0
   38176:	f43f abb7 	beq.w	378e8 <ull_conn_llcp+0xa10>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3817a:	7902      	ldrb	r2, [r0, #4]
   3817c:	f042 0203 	orr.w	r2, r2, #3
   38180:	7102      	strb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   38182:	2218      	movs	r2, #24
   38184:	7142      	strb	r2, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   38186:	2210      	movs	r2, #16
   38188:	71c2      	strb	r2, [r0, #7]
		sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   3818a:	e9d4 2162 	ldrd	r2, r1, [r4, #392]	; 0x188
	rsp->interval_min =
   3818e:	60c1      	str	r1, [r0, #12]
   38190:	6082      	str	r2, [r0, #8]
	rsp->preferred_periodicity =
   38192:	f894 2190 	ldrb.w	r2, [r4, #400]	; 0x190
   38196:	7402      	strb	r2, [r0, #16]
		sys_cpu_to_le16(conn->llcp_conn_param.reference_conn_event_count);
   38198:	f8d4 1192 	ldr.w	r1, [r4, #402]	; 0x192
   3819c:	f8d4 2196 	ldr.w	r2, [r4, #406]	; 0x196
   381a0:	f8d4 019a 	ldr.w	r0, [r4, #410]	; 0x19a
	rsp->reference_conn_event_count =
   381a4:	f8c3 0019 	str.w	r0, [r3, #25]
   381a8:	f8c3 1011 	str.w	r1, [r3, #17]
   381ac:	f8c3 2015 	str.w	r2, [r3, #21]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
   381b0:	f8b4 219e 	ldrh.w	r2, [r4, #414]	; 0x19e
   381b4:	f8a3 201d 	strh.w	r2, [r3, #29]
		if (!conn->tx_ctrl) {
   381b8:	e9d4 2171 	ldrd	r2, r1, [r4, #452]	; 0x1c4
	if (
   381bc:	b362      	cbz	r2, 38218 <ull_conn_llcp+0x1340>
	    !conn->llcp_enc.pause_tx &&
   381be:	f894 0166 	ldrb.w	r0, [r4, #358]	; 0x166
	    conn->tx_head &&
   381c2:	0787      	lsls	r7, r0, #30
   381c4:	d428      	bmi.n	38218 <ull_conn_llcp+0x1340>
	    !conn->llcp_phy.pause_tx &&
   381c6:	f894 01bf 	ldrb.w	r0, [r4, #447]	; 0x1bf
   381ca:	07c0      	lsls	r0, r0, #31
   381cc:	d424      	bmi.n	38218 <ull_conn_llcp+0x1340>
		if (conn->tx_head == conn->tx_data) {
   381ce:	f8d4 01d0 	ldr.w	r0, [r4, #464]	; 0x1d0
   381d2:	4282      	cmp	r2, r0
   381d4:	d061      	beq.n	3829a <ull_conn_llcp+0x13c2>
		} else if (!conn->tx_ctrl) {
   381d6:	2900      	cmp	r1, #0
   381d8:	d06d      	beq.n	382b6 <ull_conn_llcp+0x13de>
	tx->next = conn->tx_ctrl_last->next;
   381da:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   381de:	6811      	ldr	r1, [r2, #0]
   381e0:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last->next = tx;
   381e2:	6013      	str	r3, [r2, #0]
	if (!tx->next) {
   381e4:	681a      	ldr	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   381e6:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
	if (!tx->next) {
   381ea:	2a00      	cmp	r2, #0
   381ec:	d060      	beq.n	382b0 <ull_conn_llcp+0x13d8>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
   381ee:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   381f2:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
   381f6:	2305      	movs	r3, #5
   381f8:	f363 0203 	bfi	r2, r3, #0, #4
   381fc:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   38200:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   38204:	f7fe be73 	b.w	36eee <ull_conn_llcp+0x16>
	    ((pdu_data_tx->llctrl.opcode !=
   38208:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3820a:	2a03      	cmp	r2, #3
   3820c:	f43f ae44 	beq.w	37e98 <ull_conn_llcp+0xfc0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   38210:	2a0a      	cmp	r2, #10
   38212:	f47f af1c 	bne.w	3804e <ull_conn_llcp+0x1176>
   38216:	e63f      	b.n	37e98 <ull_conn_llcp+0xfc0>
		if (!conn->tx_ctrl) {
   38218:	2900      	cmp	r1, #0
   3821a:	d1de      	bne.n	381da <ull_conn_llcp+0x1302>
			tx->next = conn->tx_head;
   3821c:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl = tx;
   3821e:	e9c4 3371 	strd	r3, r3, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   38222:	e7df      	b.n	381e4 <ull_conn_llcp+0x130c>
			conn->tx_data = conn->tx_data->next;
   38224:	6812      	ldr	r2, [r2, #0]
   38226:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   3822a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   3822e:	2a00      	cmp	r2, #0
   38230:	f47f ad4b 	bne.w	37cca <ull_conn_llcp+0xdf2>
			tx->next = conn->tx_head->next;
   38234:	681a      	ldr	r2, [r3, #0]
   38236:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   38238:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   3823a:	f8c4 01c8 	str.w	r0, [r4, #456]	; 0x1c8
				conn->tx_ctrl_last = tx;
   3823e:	e549      	b.n	37cd4 <ull_conn_llcp+0xdfc>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38240:	791a      	ldrb	r2, [r3, #4]
   38242:	f002 0203 	and.w	r2, r2, #3
   38246:	2a03      	cmp	r2, #3
   38248:	d014      	beq.n	38274 <ull_conn_llcp+0x139c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3824a:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   3824e:	f7fe bece 	b.w	36fee <ull_conn_llcp+0x116>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38252:	7919      	ldrb	r1, [r3, #4]
   38254:	f001 0103 	and.w	r1, r1, #3
   38258:	2903      	cmp	r1, #3
   3825a:	d012      	beq.n	38282 <ull_conn_llcp+0x13aa>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3825c:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   38260:	f7ff bb37 	b.w	378d2 <ull_conn_llcp+0x9fa>
	    ((pdu_data_tx->llctrl.opcode !=
   38264:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38266:	2a03      	cmp	r2, #3
   38268:	f43f ae59 	beq.w	37f1e <ull_conn_llcp+0x1046>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3826c:	2a0a      	cmp	r2, #10
   3826e:	f47f af6e 	bne.w	3814e <ull_conn_llcp+0x1276>
   38272:	e654      	b.n	37f1e <ull_conn_llcp+0x1046>
	    ((pdu_data_tx->llctrl.opcode !=
   38274:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38276:	2a03      	cmp	r2, #3
   38278:	f43f aec8 	beq.w	3800c <ull_conn_llcp+0x1134>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3827c:	2a0a      	cmp	r2, #10
   3827e:	d1e4      	bne.n	3824a <ull_conn_llcp+0x1372>
   38280:	e6c4      	b.n	3800c <ull_conn_llcp+0x1134>
	    ((pdu_data_tx->llctrl.opcode !=
   38282:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38284:	2903      	cmp	r1, #3
   38286:	d001      	beq.n	3828c <ull_conn_llcp+0x13b4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   38288:	290a      	cmp	r1, #10
   3828a:	d1e7      	bne.n	3825c <ull_conn_llcp+0x1384>
			tx->next = conn->tx_head->next;
   3828c:	6819      	ldr	r1, [r3, #0]
   3828e:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   38290:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   38292:	f8c4 01c8 	str.w	r0, [r4, #456]	; 0x1c8
				conn->tx_ctrl_last = tx;
   38296:	f7ff bb21 	b.w	378dc <ull_conn_llcp+0xa04>
			conn->tx_data = conn->tx_data->next;
   3829a:	6810      	ldr	r0, [r2, #0]
   3829c:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   382a0:	2900      	cmp	r1, #0
   382a2:	d19a      	bne.n	381da <ull_conn_llcp+0x1302>
			tx->next = conn->tx_head->next;
   382a4:	6811      	ldr	r1, [r2, #0]
   382a6:	6019      	str	r1, [r3, #0]
			conn->tx_head->next = tx;
   382a8:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   382aa:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
				conn->tx_ctrl_last = tx;
   382ae:	e799      	b.n	381e4 <ull_conn_llcp+0x130c>
		conn->tx_data_last = tx;
   382b0:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
   382b4:	e79b      	b.n	381ee <ull_conn_llcp+0x1316>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   382b6:	7911      	ldrb	r1, [r2, #4]
   382b8:	f001 0103 	and.w	r1, r1, #3
   382bc:	2903      	cmp	r1, #3
   382be:	d04f      	beq.n	38360 <ull_conn_llcp+0x1488>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   382c0:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   382c4:	e789      	b.n	381da <ull_conn_llcp+0x1302>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   382c6:	791a      	ldrb	r2, [r3, #4]
   382c8:	f002 0203 	and.w	r2, r2, #3
   382cc:	2a03      	cmp	r2, #3
   382ce:	d033      	beq.n	38338 <ull_conn_llcp+0x1460>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   382d0:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   382d4:	e4f9      	b.n	37cca <ull_conn_llcp+0xdf2>
		conn->tx_data_last = tx;
   382d6:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   382da:	e6ef      	b.n	380bc <ull_conn_llcp+0x11e4>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   382dc:	791a      	ldrb	r2, [r3, #4]
   382de:	f002 0203 	and.w	r2, r2, #3
   382e2:	2a03      	cmp	r2, #3
   382e4:	d042      	beq.n	3836c <ull_conn_llcp+0x1494>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   382e6:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   382ea:	e543      	b.n	37d74 <ull_conn_llcp+0xe9c>
	    ((pdu_data_tx->llctrl.opcode !=
   382ec:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   382ee:	2b03      	cmp	r3, #3
   382f0:	f43f ae25 	beq.w	37f3e <ull_conn_llcp+0x1066>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   382f4:	2b0a      	cmp	r3, #10
   382f6:	f47f af0e 	bne.w	38116 <ull_conn_llcp+0x123e>
   382fa:	e620      	b.n	37f3e <ull_conn_llcp+0x1066>
			conn->tx_data = conn->tx_data->next;
   382fc:	6813      	ldr	r3, [r2, #0]
   382fe:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   38302:	2900      	cmp	r1, #0
   38304:	f47f aecf 	bne.w	380a6 <ull_conn_llcp+0x11ce>
			tx->next = conn->tx_head->next;
   38308:	6811      	ldr	r1, [r2, #0]
   3830a:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   3830c:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
   3830e:	f8c4 01c8 	str.w	r0, [r4, #456]	; 0x1c8
				conn->tx_ctrl_last = tx;
   38312:	e6cd      	b.n	380b0 <ull_conn_llcp+0x11d8>
	    ((pdu_data_tx->llctrl.opcode !=
   38314:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38316:	2a03      	cmp	r2, #3
   38318:	f43f ade8 	beq.w	37eec <ull_conn_llcp+0x1014>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3831c:	2a0a      	cmp	r2, #10
   3831e:	f47f aedb 	bne.w	380d8 <ull_conn_llcp+0x1200>
   38322:	e5e3      	b.n	37eec <ull_conn_llcp+0x1014>
   38324:	20002638 	.word	0x20002638
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38328:	7911      	ldrb	r1, [r2, #4]
   3832a:	f001 0103 	and.w	r1, r1, #3
   3832e:	2903      	cmp	r1, #3
   38330:	d009      	beq.n	38346 <ull_conn_llcp+0x146e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   38332:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   38336:	e6b6      	b.n	380a6 <ull_conn_llcp+0x11ce>
	    ((pdu_data_tx->llctrl.opcode !=
   38338:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3833a:	2a03      	cmp	r2, #3
   3833c:	f43f af7a 	beq.w	38234 <ull_conn_llcp+0x135c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   38340:	2a0a      	cmp	r2, #10
   38342:	d1c5      	bne.n	382d0 <ull_conn_llcp+0x13f8>
   38344:	e776      	b.n	38234 <ull_conn_llcp+0x135c>
	    ((pdu_data_tx->llctrl.opcode !=
   38346:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38348:	2903      	cmp	r1, #3
   3834a:	d0dd      	beq.n	38308 <ull_conn_llcp+0x1430>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3834c:	290a      	cmp	r1, #10
   3834e:	d1f0      	bne.n	38332 <ull_conn_llcp+0x145a>
   38350:	e7da      	b.n	38308 <ull_conn_llcp+0x1430>
			conn->tx_data = conn->tx_data->next;
   38352:	681a      	ldr	r2, [r3, #0]
   38354:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   38358:	2900      	cmp	r1, #0
   3835a:	d097      	beq.n	3828c <ull_conn_llcp+0x13b4>
   3835c:	f7ff bab9 	b.w	378d2 <ull_conn_llcp+0x9fa>
	    ((pdu_data_tx->llctrl.opcode !=
   38360:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38362:	2903      	cmp	r1, #3
   38364:	d09e      	beq.n	382a4 <ull_conn_llcp+0x13cc>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   38366:	290a      	cmp	r1, #10
   38368:	d1aa      	bne.n	382c0 <ull_conn_llcp+0x13e8>
   3836a:	e79b      	b.n	382a4 <ull_conn_llcp+0x13cc>
	    ((pdu_data_tx->llctrl.opcode !=
   3836c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3836e:	2a03      	cmp	r2, #3
   38370:	f43f aedb 	beq.w	3812a <ull_conn_llcp+0x1252>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   38374:	2a0a      	cmp	r2, #10
   38376:	d1b6      	bne.n	382e6 <ull_conn_llcp+0x140e>
   38378:	e6d7      	b.n	3812a <ull_conn_llcp+0x1252>
		LL_ASSERT(0);
   3837a:	4a02      	ldr	r2, [pc, #8]	; (38384 <ull_conn_llcp+0x14ac>)
   3837c:	4902      	ldr	r1, [pc, #8]	; (38388 <ull_conn_llcp+0x14b0>)
   3837e:	f640 73e1 	movw	r3, #4065	; 0xfe1
   38382:	e461      	b.n	37c48 <ull_conn_llcp+0xd70>
   38384:	0004a0dc 	.word	0x0004a0dc
   38388:	00049cc8 	.word	0x00049cc8

0003838c <ull_conn_tx_demux>:
{
   3838c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   38390:	4c24      	ldr	r4, [pc, #144]	; (38424 <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   38392:	4f25      	ldr	r7, [pc, #148]	; (38428 <ull_conn_tx_demux+0x9c>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   38394:	78e2      	ldrb	r2, [r4, #3]
{
   38396:	4605      	mov	r5, r0
	return (void *)(fifo + first * size);
   38398:	1d26      	adds	r6, r4, #4
   3839a:	e021      	b.n	383e0 <ull_conn_tx_demux+0x54>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3839c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   383a0:	4638      	mov	r0, r7
   383a2:	f7f7 fb4d 	bl	2fa40 <mem_get>
	if (conn->lll.handle != handle) {
   383a6:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   383a8:	bb2a      	cbnz	r2, 383f6 <ull_conn_tx_demux+0x6a>
			struct node_tx *tx = lll_tx->node;
   383aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
   383ae:	f8d0 11d0 	ldr.w	r1, [r0, #464]	; 0x1d0
			tx->next = NULL;
   383b2:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
   383b4:	b351      	cbz	r1, 3840c <ull_conn_tx_demux+0x80>
			if (conn->tx_data_last) {
   383b6:	f8d0 21d4 	ldr.w	r2, [r0, #468]	; 0x1d4
   383ba:	b102      	cbz	r2, 383be <ull_conn_tx_demux+0x32>
				conn->tx_data_last->next = tx;
   383bc:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   383be:	f8c0 31d4 	str.w	r3, [r0, #468]	; 0x1d4
		MFIFO_DEQUEUE(conn_tx);
   383c2:	78e2      	ldrb	r2, [r4, #3]
	uint8_t _first = *first; /* Copy read-index */
   383c4:	78a3      	ldrb	r3, [r4, #2]
   383c6:	7861      	ldrb	r1, [r4, #1]
	if (_first == last) {
   383c8:	429a      	cmp	r2, r3
   383ca:	d005      	beq.n	383d8 <ull_conn_tx_demux+0x4c>
	_first += 1U;
   383cc:	3301      	adds	r3, #1
   383ce:	b2db      	uxtb	r3, r3
		_first = 0U;
   383d0:	4299      	cmp	r1, r3
   383d2:	bf08      	it	eq
   383d4:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   383d6:	70a3      	strb	r3, [r4, #2]
	} while (--count);
   383d8:	3d01      	subs	r5, #1
   383da:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   383de:	d01e      	beq.n	3841e <ull_conn_tx_demux+0x92>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   383e0:	78a3      	ldrb	r3, [r4, #2]
   383e2:	7821      	ldrb	r1, [r4, #0]
	if (first == last) {
   383e4:	4293      	cmp	r3, r2
   383e6:	d01a      	beq.n	3841e <ull_conn_tx_demux+0x92>
	return (void *)(fifo + first * size);
   383e8:	fb13 f301 	smulbb	r3, r3, r1
   383ec:	eb03 0806 	add.w	r8, r3, r6
	if (handle >= CONFIG_BT_MAX_CONN) {
   383f0:	5af2      	ldrh	r2, [r6, r3]
   383f2:	2a00      	cmp	r2, #0
   383f4:	d0d2      	beq.n	3839c <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   383f6:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   383fa:	790b      	ldrb	r3, [r1, #4]
   383fc:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   38400:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
   38404:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   38406:	f7fa febb 	bl	33180 <ll_tx_ack_put>
   3840a:	e7da      	b.n	383c2 <ull_conn_tx_demux+0x36>
				if (!conn->tx_head) {
   3840c:	f8d0 21c4 	ldr.w	r2, [r0, #452]	; 0x1c4
				conn->tx_data = tx;
   38410:	f8c0 31d0 	str.w	r3, [r0, #464]	; 0x1d0
				if (!conn->tx_head) {
   38414:	2a00      	cmp	r2, #0
   38416:	d1ce      	bne.n	383b6 <ull_conn_tx_demux+0x2a>
					conn->tx_head = tx;
   38418:	f8c0 31c4 	str.w	r3, [r0, #452]	; 0x1c4
			if (conn->tx_data_last) {
   3841c:	e7cf      	b.n	383be <ull_conn_tx_demux+0x32>
}
   3841e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   38422:	bf00      	nop
   38424:	2000075c 	.word	0x2000075c
   38428:	200014e8 	.word	0x200014e8

0003842c <conn_cleanup>:
	if (conn == conn_upd_curr) {
   3842c:	4b39      	ldr	r3, [pc, #228]	; (38514 <conn_cleanup+0xe8>)
{
   3842e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (conn == conn_upd_curr) {
   38432:	681a      	ldr	r2, [r3, #0]
	rx = conn->llcp_rx;
   38434:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
	*((uint8_t *)rx->pdu) = reason;
   38438:	f880 1160 	strb.w	r1, [r0, #352]	; 0x160
	if (conn == conn_upd_curr) {
   3843c:	4290      	cmp	r0, r2
		conn_upd_curr = NULL;
   3843e:	bf04      	itt	eq
   38440:	2200      	moveq	r2, #0
   38442:	601a      	streq	r2, [r3, #0]
	rx->hdr.handle = conn->lll.handle;
   38444:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   38446:	f8a0 214a 	strh.w	r2, [r0, #330]	; 0x14a
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   3844a:	2317      	movs	r3, #23
{
   3844c:	b082      	sub	sp, #8
   3844e:	4606      	mov	r6, r0
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   38450:	f880 3148 	strb.w	r3, [r0, #328]	; 0x148
	while (rx) {
   38454:	b144      	cbz	r4, 38468 <conn_cleanup+0x3c>
		hdr->type = NODE_RX_TYPE_RELEASE;
   38456:	2501      	movs	r5, #1
		rx = hdr->link->mem;
   38458:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   3845a:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   3845c:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   3845e:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   38460:	f7fa fe48 	bl	330f4 <ll_rx_put>
	while (rx) {
   38464:	2c00      	cmp	r4, #0
   38466:	d1f7      	bne.n	38458 <conn_cleanup+0x2c>
	while (conn->tx_head) {
   38468:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   3846c:	b381      	cbz	r1, 384d0 <conn_cleanup+0xa4>
		link = mem_acquire(&mem_link_tx.free);
   3846e:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 38518 <conn_cleanup+0xec>
		LL_ASSERT(link);
   38472:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 3851c <conn_cleanup+0xf0>
   38476:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 38520 <conn_cleanup+0xf4>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   3847a:	f106 0768 	add.w	r7, r6, #104	; 0x68
   3847e:	e007      	b.n	38490 <conn_cleanup+0x64>
   38480:	4629      	mov	r1, r5
   38482:	463a      	mov	r2, r7
   38484:	4620      	mov	r0, r4
   38486:	f7f7 fb0d 	bl	2faa4 <memq_enqueue>
	while (conn->tx_head) {
   3848a:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   3848e:	b1f9      	cbz	r1, 384d0 <conn_cleanup+0xa4>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   38490:	4630      	mov	r0, r6
   38492:	f7fc fad1 	bl	34a38 <tx_ull_dequeue>
   38496:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   38498:	4640      	mov	r0, r8
   3849a:	f7f7 fa9f 	bl	2f9dc <mem_acquire>
		LL_ASSERT(link);
   3849e:	4604      	mov	r4, r0
   384a0:	2800      	cmp	r0, #0
   384a2:	d1ed      	bne.n	38480 <conn_cleanup+0x54>
   384a4:	481f      	ldr	r0, [pc, #124]	; (38524 <conn_cleanup+0xf8>)
   384a6:	f640 135e 	movw	r3, #2398	; 0x95e
   384aa:	4652      	mov	r2, sl
   384ac:	4649      	mov	r1, r9
   384ae:	f00a fa09 	bl	428c4 <printk>
   384b2:	4040      	eors	r0, r0
   384b4:	f380 8811 	msr	BASEPRI, r0
   384b8:	f04f 0003 	mov.w	r0, #3
   384bc:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   384be:	4629      	mov	r1, r5
   384c0:	463a      	mov	r2, r7
   384c2:	4620      	mov	r0, r4
   384c4:	f7f7 faee 	bl	2faa4 <memq_enqueue>
	while (conn->tx_head) {
   384c8:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   384cc:	2900      	cmp	r1, #0
   384ce:	d1df      	bne.n	38490 <conn_cleanup+0x64>
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   384d0:	8d32      	ldrh	r2, [r6, #40]	; 0x28
   384d2:	4b15      	ldr	r3, [pc, #84]	; (38528 <conn_cleanup+0xfc>)
   384d4:	9600      	str	r6, [sp, #0]
   384d6:	3203      	adds	r2, #3
   384d8:	b2d2      	uxtb	r2, r2
   384da:	2101      	movs	r1, #1
   384dc:	2000      	movs	r0, #0
   384de:	f7f8 fd83 	bl	30fe8 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   384e2:	f030 0302 	bics.w	r3, r0, #2
   384e6:	d00c      	beq.n	38502 <conn_cleanup+0xd6>
   384e8:	4a0c      	ldr	r2, [pc, #48]	; (3851c <conn_cleanup+0xf0>)
   384ea:	4910      	ldr	r1, [pc, #64]	; (3852c <conn_cleanup+0x100>)
   384ec:	480d      	ldr	r0, [pc, #52]	; (38524 <conn_cleanup+0xf8>)
   384ee:	f640 1323 	movw	r3, #2339	; 0x923
   384f2:	f00a f9e7 	bl	428c4 <printk>
   384f6:	4040      	eors	r0, r0
   384f8:	f380 8811 	msr	BASEPRI, r0
   384fc:	f04f 0003 	mov.w	r0, #3
   38500:	df02      	svc	2
	lll->handle = LLL_HANDLE_INVALID;
   38502:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   38506:	20ff      	movs	r0, #255	; 0xff
	lll->handle = LLL_HANDLE_INVALID;
   38508:	8533      	strh	r3, [r6, #40]	; 0x28
}
   3850a:	b002      	add	sp, #8
   3850c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull_conn_tx_demux(UINT8_MAX);
   38510:	f7ff bf3c 	b.w	3838c <ull_conn_tx_demux>
   38514:	200025f4 	.word	0x200025f4
   38518:	200025fc 	.word	0x200025fc
   3851c:	0004a0dc 	.word	0x0004a0dc
   38520:	0004a134 	.word	0x0004a134
   38524:	00049c68 	.word	0x00049c68
   38528:	000347e5 	.word	0x000347e5
   3852c:	0004a1bc 	.word	0x0004a1bc

00038530 <ull_conn_done>:
{
   38530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
   38534:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   38536:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   38538:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3853c:	429a      	cmp	r2, r3
{
   3853e:	b08a      	sub	sp, #40	; 0x28
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   38540:	d069      	beq.n	38616 <ull_conn_done+0xe6>
	switch (done->extra.mic_state) {
   38542:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   38546:	2b01      	cmp	r3, #1
   38548:	4605      	mov	r5, r0
   3854a:	f000 80d2 	beq.w	386f2 <ull_conn_done+0x1c2>
   3854e:	2b02      	cmp	r3, #2
   38550:	f000 80c5 	beq.w	386de <ull_conn_done+0x1ae>
   38554:	2b00      	cmp	r3, #0
   38556:	f000 80a8 	beq.w	386aa <ull_conn_done+0x17a>
	reason_final = conn->llcp_terminate.reason_final;
   3855a:	f894 6143 	ldrb.w	r6, [r4, #323]	; 0x143
	if (reason_final && (
   3855e:	2e00      	cmp	r6, #0
   38560:	f040 80c0 	bne.w	386e4 <ull_conn_done+0x1b4>
	latency_event = lll->latency_event;
   38564:	f8b4 8030 	ldrh.w	r8, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
   38568:	8cab      	ldrh	r3, [r5, #36]	; 0x24
	ticks_drift_plus = 0U;
   3856a:	9609      	str	r6, [sp, #36]	; 0x24
	elapsed_event = latency_event + 1;
   3856c:	f108 0701 	add.w	r7, r8, #1
   38570:	b2bf      	uxth	r7, r7
	ticks_drift_minus = 0U;
   38572:	9608      	str	r6, [sp, #32]
	if (done->extra.trx_cnt) {
   38574:	2b00      	cmp	r3, #0
   38576:	d051      	beq.n	3861c <ull_conn_done+0xec>
		} else if (lll->role) {
   38578:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3857c:	2b00      	cmp	r3, #0
   3857e:	f2c0 8108 	blt.w	38792 <ull_conn_done+0x262>
	if (done->extra.crc_valid) {
   38582:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
		conn->connect_expire = 0U;
   38586:	2200      	movs	r2, #0
	if (done->extra.crc_valid) {
   38588:	07d9      	lsls	r1, r3, #31
		conn->connect_expire = 0U;
   3858a:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	if (done->extra.crc_valid) {
   3858e:	f140 80b6 	bpl.w	386fe <ull_conn_done+0x1ce>
		conn->supervision_expire = 0U;
   38592:	2300      	movs	r3, #0
   38594:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
	if (conn->procedure_expire != 0U) {
   38598:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   3859c:	b12b      	cbz	r3, 385aa <ull_conn_done+0x7a>
		if (conn->procedure_expire > elapsed_event) {
   3859e:	42bb      	cmp	r3, r7
   385a0:	f240 810d 	bls.w	387be <ull_conn_done+0x28e>
			conn->procedure_expire -= elapsed_event;
   385a4:	1bdb      	subs	r3, r3, r7
   385a6:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->apto_expire != 0U) {
   385aa:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   385ae:	b12b      	cbz	r3, 385bc <ull_conn_done+0x8c>
		if (conn->apto_expire > elapsed_event) {
   385b0:	42bb      	cmp	r3, r7
   385b2:	f240 80c9 	bls.w	38748 <ull_conn_done+0x218>
			conn->apto_expire -= elapsed_event;
   385b6:	1bdb      	subs	r3, r3, r7
   385b8:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
	if (conn->appto_expire != 0U) {
   385bc:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   385c0:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   385c4:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
	if (conn->appto_expire != 0U) {
   385c8:	b15a      	cbz	r2, 385e2 <ull_conn_done+0xb2>
		if (conn->appto_expire > elapsed_event) {
   385ca:	42ba      	cmp	r2, r7
   385cc:	f200 80a0 	bhi.w	38710 <ull_conn_done+0x1e0>
			if ((conn->procedure_expire == 0U) &&
   385d0:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
			conn->appto_expire = 0U;
   385d4:	2000      	movs	r0, #0
   385d6:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
			if ((conn->procedure_expire == 0U) &&
   385da:	b912      	cbnz	r2, 385e2 <ull_conn_done+0xb2>
   385dc:	4299      	cmp	r1, r3
   385de:	f000 80f7 	beq.w	387d0 <ull_conn_done+0x2a0>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   385e2:	1a5b      	subs	r3, r3, r1
   385e4:	f003 0303 	and.w	r3, r3, #3
   385e8:	2b02      	cmp	r3, #2
   385ea:	f000 809a 	beq.w	38722 <ull_conn_done+0x1f2>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   385ee:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   385f2:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   385f6:	429a      	cmp	r2, r3
   385f8:	f000 80b8 	beq.w	3876c <ull_conn_done+0x23c>
		lll->latency_event = 0U;
   385fc:	2200      	movs	r2, #0
   385fe:	8622      	strh	r2, [r4, #48]	; 0x30
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   38600:	e9dd 5308 	ldrd	r5, r3, [sp, #32]
	if ((force) || (latency_event != lll->latency_event)) {
   38604:	bb56      	cbnz	r6, 3865c <ull_conn_done+0x12c>
   38606:	4590      	cmp	r8, r2
   38608:	f000 8098 	beq.w	3873c <ull_conn_done+0x20c>
		lazy = lll->latency_event + 1U;
   3860c:	3201      	adds	r2, #1
   3860e:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   38610:	bb33      	cbnz	r3, 38660 <ull_conn_done+0x130>
   38612:	bb2d      	cbnz	r5, 38660 <ull_conn_done+0x130>
   38614:	bb21      	cbnz	r1, 38660 <ull_conn_done+0x130>
}
   38616:	b00a      	add	sp, #40	; 0x28
   38618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (done->extra.crc_valid) {
   3861c:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   38620:	07da      	lsls	r2, r3, #31
   38622:	d4b6      	bmi.n	38592 <ull_conn_done+0x62>
	else if (conn->connect_expire) {
   38624:	f8b4 30c0 	ldrh.w	r3, [r4, #192]	; 0xc0
   38628:	2b00      	cmp	r3, #0
   3862a:	d068      	beq.n	386fe <ull_conn_done+0x1ce>
		if (conn->connect_expire > elapsed_event) {
   3862c:	42bb      	cmp	r3, r7
   3862e:	f240 80d6 	bls.w	387de <ull_conn_done+0x2ae>
			conn->connect_expire -= elapsed_event;
   38632:	1bdb      	subs	r3, r3, r7
   38634:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
	if (conn->supervision_expire) {
   38638:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   3863c:	2b00      	cmp	r3, #0
   3863e:	d0ab      	beq.n	38598 <ull_conn_done+0x68>
		if (conn->supervision_expire > elapsed_event) {
   38640:	429f      	cmp	r7, r3
   38642:	f080 80b7 	bcs.w	387b4 <ull_conn_done+0x284>
			conn->supervision_expire -= elapsed_event;
   38646:	1bdb      	subs	r3, r3, r7
   38648:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   3864a:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   3864c:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   3864e:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
			lll->latency_event = 0U;
   38652:	8622      	strh	r2, [r4, #48]	; 0x30
			if (conn->supervision_expire <= 6U) {
   38654:	f200 808c 	bhi.w	38770 <ull_conn_done+0x240>
				force = 1U;
   38658:	2601      	movs	r6, #1
   3865a:	e79d      	b.n	38598 <ull_conn_done+0x68>
		lazy = lll->latency_event + 1U;
   3865c:	3201      	adds	r2, #1
   3865e:	b291      	uxth	r1, r2
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   38660:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		struct ll_conn *conn = lll->hdr.parent;
   38662:	69e4      	ldr	r4, [r4, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   38664:	9500      	str	r5, [sp, #0]
   38666:	2000      	movs	r0, #0
   38668:	4d6c      	ldr	r5, [pc, #432]	; (3881c <ull_conn_done+0x2ec>)
   3866a:	9103      	str	r1, [sp, #12]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   3866c:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   3866e:	e9cd 0001 	strd	r0, r0, [sp, #4]
   38672:	9604      	str	r6, [sp, #16]
   38674:	9406      	str	r4, [sp, #24]
   38676:	b2d2      	uxtb	r2, r2
   38678:	2101      	movs	r1, #1
   3867a:	9505      	str	r5, [sp, #20]
   3867c:	f7f8 fc9c 	bl	30fb8 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   38680:	f030 0302 	bics.w	r3, r0, #2
   38684:	d0c7      	beq.n	38616 <ull_conn_done+0xe6>
   38686:	f7fa fe13 	bl	332b0 <ull_disable_mark_get>
   3868a:	4284      	cmp	r4, r0
   3868c:	d0c3      	beq.n	38616 <ull_conn_done+0xe6>
   3868e:	4a64      	ldr	r2, [pc, #400]	; (38820 <ull_conn_done+0x2f0>)
   38690:	4964      	ldr	r1, [pc, #400]	; (38824 <ull_conn_done+0x2f4>)
   38692:	4865      	ldr	r0, [pc, #404]	; (38828 <ull_conn_done+0x2f8>)
   38694:	f240 63cd 	movw	r3, #1741	; 0x6cd
   38698:	f00a f914 	bl	428c4 <printk>
   3869c:	4040      	eors	r0, r0
   3869e:	f380 8811 	msr	BASEPRI, r0
   386a2:	f04f 0003 	mov.w	r0, #3
   386a6:	df02      	svc	2
   386a8:	e7b5      	b.n	38616 <ull_conn_done+0xe6>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   386aa:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   386ae:	071f      	lsls	r7, r3, #28
   386b0:	d53e      	bpl.n	38730 <ull_conn_done+0x200>
					    (lll->latency + 6)) ?
   386b2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			appto_reload_new = (conn->apto_reload >
   386b4:	f8b4 20ce 	ldrh.w	r2, [r4, #206]	; 0xce
					    (lll->latency + 6)) ?
   386b8:	1d8b      	adds	r3, r1, #6
			appto_reload_new = (conn->apto_reload >
   386ba:	429a      	cmp	r2, r3
   386bc:	bfc4      	itt	gt
   386be:	1f93      	subgt	r3, r2, #6
   386c0:	1a5b      	subgt	r3, r3, r1
			if (conn->appto_reload != appto_reload_new) {
   386c2:	f8b4 10ca 	ldrh.w	r1, [r4, #202]	; 0xca
			appto_reload_new = (conn->apto_reload >
   386c6:	bfcc      	ite	gt
   386c8:	b29b      	uxthgt	r3, r3
   386ca:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   386cc:	4299      	cmp	r1, r3
   386ce:	d06b      	beq.n	387a8 <ull_conn_done+0x278>
				conn->appto_reload = appto_reload_new;
   386d0:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
				conn->appto_expire = conn->appto_reload;
   386d4:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
				conn->apto_expire = conn->apto_reload;
   386d8:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
   386dc:	e73d      	b.n	3855a <ull_conn_done+0x2a>
		conn->llcp_terminate.reason_final =
   386de:	263d      	movs	r6, #61	; 0x3d
   386e0:	f884 6143 	strb.w	r6, [r4, #323]	; 0x143
		conn_cleanup(conn, reason_final);
   386e4:	4631      	mov	r1, r6
   386e6:	4620      	mov	r0, r4
}
   386e8:	b00a      	add	sp, #40	; 0x28
   386ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		conn_cleanup(conn, reason_final);
   386ee:	f7ff be9d 	b.w	3842c <conn_cleanup>
		conn->appto_expire = conn->apto_expire = 0U;
   386f2:	2300      	movs	r3, #0
   386f4:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   386f8:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		break;
   386fc:	e72d      	b.n	3855a <ull_conn_done+0x2a>
		if (!conn->supervision_expire) {
   386fe:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   38702:	2b00      	cmp	r3, #0
   38704:	d19c      	bne.n	38640 <ull_conn_done+0x110>
			conn->supervision_expire = conn->supervision_reload;
   38706:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
   3870a:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
   3870e:	e795      	b.n	3863c <ull_conn_done+0x10c>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   38710:	1a5b      	subs	r3, r3, r1
   38712:	f003 0303 	and.w	r3, r3, #3
			conn->appto_expire -= elapsed_event;
   38716:	1bd2      	subs	r2, r2, r7
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   38718:	2b02      	cmp	r3, #2
			conn->appto_expire -= elapsed_event;
   3871a:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   3871e:	f47f af66 	bne.w	385ee <ull_conn_done+0xbe>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   38722:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   38726:	3b01      	subs	r3, #1
   38728:	2b01      	cmp	r3, #1
   3872a:	f63f af60 	bhi.w	385ee <ull_conn_done+0xbe>
   3872e:	e765      	b.n	385fc <ull_conn_done+0xcc>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   38730:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   38734:	07de      	lsls	r6, r3, #31
   38736:	f57f af10 	bpl.w	3855a <ull_conn_done+0x2a>
   3873a:	e7ba      	b.n	386b2 <ull_conn_done+0x182>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   3873c:	b913      	cbnz	r3, 38744 <ull_conn_done+0x214>
   3873e:	2d00      	cmp	r5, #0
   38740:	f43f af69 	beq.w	38616 <ull_conn_done+0xe6>
	lazy = 0U;
   38744:	4631      	mov	r1, r6
   38746:	e78b      	b.n	38660 <ull_conn_done+0x130>
			rx = ll_pdu_rx_alloc();
   38748:	f7fa fd04 	bl	33154 <ll_pdu_rx_alloc>
			if (rx) {
   3874c:	4601      	mov	r1, r0
   3874e:	2800      	cmp	r0, #0
   38750:	d03a      	beq.n	387c8 <ull_conn_done+0x298>
				rx->handle = lll->handle;
   38752:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				conn->apto_expire = 0U;
   38754:	2200      	movs	r2, #0
   38756:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
				rx->handle = lll->handle;
   3875a:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   3875c:	231a      	movs	r3, #26
   3875e:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   38760:	6800      	ldr	r0, [r0, #0]
   38762:	f7fa fcc7 	bl	330f4 <ll_rx_put>
				ll_rx_sched();
   38766:	f7fa fccf 	bl	33108 <ll_rx_sched>
   3876a:	e727      	b.n	385bc <ull_conn_done+0x8c>
	if ((force) || (latency_event != lll->latency_event)) {
   3876c:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   3876e:	e747      	b.n	38600 <ull_conn_done+0xd0>
			else if (lll->role) {
   38770:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   38774:	4293      	cmp	r3, r2
   38776:	f6bf af0f 	bge.w	38598 <ull_conn_done+0x68>
				if (latency_event) {
   3877a:	f1b8 0f00 	cmp.w	r8, #0
   3877e:	f47f af6b 	bne.w	38658 <ull_conn_done+0x128>
					force = conn->periph.force & 0x01;
   38782:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
					conn->periph.force >>= 1U;
   38786:	085a      	lsrs	r2, r3, #1
					if (force) {
   38788:	07db      	lsls	r3, r3, #31
   3878a:	d442      	bmi.n	38812 <ull_conn_done+0x2e2>
					conn->periph.force >>= 1U;
   3878c:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
   38790:	e702      	b.n	38598 <ull_conn_done+0x68>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   38792:	aa08      	add	r2, sp, #32
   38794:	a909      	add	r1, sp, #36	; 0x24
   38796:	4628      	mov	r0, r5
   38798:	f7ee f82a 	bl	267f0 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   3879c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   387a0:	b313      	cbz	r3, 387e8 <ull_conn_done+0x2b8>
				lll->latency_event = 0;
   387a2:	2300      	movs	r3, #0
   387a4:	8623      	strh	r3, [r4, #48]	; 0x30
   387a6:	e6ec      	b.n	38582 <ull_conn_done+0x52>
			if (conn->apto_expire == 0U) {
   387a8:	f8b4 10d0 	ldrh.w	r1, [r4, #208]	; 0xd0
   387ac:	2900      	cmp	r1, #0
   387ae:	f47f aed4 	bne.w	3855a <ull_conn_done+0x2a>
   387b2:	e78f      	b.n	386d4 <ull_conn_done+0x1a4>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   387b4:	2108      	movs	r1, #8
   387b6:	4620      	mov	r0, r4
   387b8:	f7ff fe38 	bl	3842c <conn_cleanup>
			return;
   387bc:	e72b      	b.n	38616 <ull_conn_done+0xe6>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   387be:	2122      	movs	r1, #34	; 0x22
   387c0:	4620      	mov	r0, r4
   387c2:	f7ff fe33 	bl	3842c <conn_cleanup>
			return;
   387c6:	e726      	b.n	38616 <ull_conn_done+0xe6>
				conn->apto_expire = 1U;
   387c8:	2301      	movs	r3, #1
   387ca:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   387ce:	e6f5      	b.n	385bc <ull_conn_done+0x8c>
				conn->llcp_type = LLCP_PING;
   387d0:	2305      	movs	r3, #5
				conn->llcp_ack -= 2U;
   387d2:	3902      	subs	r1, #2
				conn->llcp_type = LLCP_PING;
   387d4:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
				conn->llcp_ack -= 2U;
   387d8:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   387dc:	e707      	b.n	385ee <ull_conn_done+0xbe>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   387de:	213e      	movs	r1, #62	; 0x3e
   387e0:	4620      	mov	r0, r4
   387e2:	f7ff fe23 	bl	3842c <conn_cleanup>
			return;
   387e6:	e716      	b.n	38616 <ull_conn_done+0xe6>
				ull_conn_tx_demux(UINT8_MAX);
   387e8:	20ff      	movs	r0, #255	; 0xff
   387ea:	f7ff fdcf 	bl	3838c <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   387ee:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   387f2:	2b00      	cmp	r3, #0
   387f4:	d1d5      	bne.n	387a2 <ull_conn_done+0x272>
   387f6:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
   387fa:	4632      	mov	r2, r6
   387fc:	f7f7 f95c 	bl	2fab8 <memq_peek>
   38800:	2800      	cmp	r0, #0
   38802:	d1ce      	bne.n	387a2 <ull_conn_done+0x272>
			} else if (lll->periph.latency_enabled) {
   38804:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   38808:	0758      	lsls	r0, r3, #29
				lll->latency_event = lll->latency;
   3880a:	bf44      	itt	mi
   3880c:	8da3      	ldrhmi	r3, [r4, #44]	; 0x2c
   3880e:	8623      	strhmi	r3, [r4, #48]	; 0x30
   38810:	e6b7      	b.n	38582 <ull_conn_done+0x52>
						conn->periph.force |= BIT(31);
   38812:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   38816:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
   3881a:	e71d      	b.n	38658 <ull_conn_done+0x128>
   3881c:	000349f9 	.word	0x000349f9
   38820:	0004a0dc 	.word	0x0004a0dc
   38824:	0004a250 	.word	0x0004a250
   38828:	00049c68 	.word	0x00049c68

0003882c <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   3882c:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   38830:	2b00      	cmp	r3, #0
   38832:	f000 80be 	beq.w	389b2 <ull_conn_tx_lll_enqueue+0x186>
   38836:	3901      	subs	r1, #1
{
   38838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   3883c:	f8df 8174 	ldr.w	r8, [pc, #372]	; 389b4 <ull_conn_tx_lll_enqueue+0x188>
		LL_ASSERT(link);
   38840:	f8df a174 	ldr.w	sl, [pc, #372]	; 389b8 <ull_conn_tx_lll_enqueue+0x18c>
   38844:	f8df 9174 	ldr.w	r9, [pc, #372]	; 389bc <ull_conn_tx_lll_enqueue+0x190>
   38848:	4604      	mov	r4, r0
   3884a:	b2cd      	uxtb	r5, r1
   3884c:	e010      	b.n	38870 <ull_conn_tx_lll_enqueue+0x44>
		link = mem_acquire(&mem_link_tx.free);
   3884e:	4640      	mov	r0, r8
   38850:	f7f7 f8c4 	bl	2f9dc <mem_acquire>
		LL_ASSERT(link);
   38854:	4607      	mov	r7, r0
   38856:	b3b0      	cbz	r0, 388c6 <ull_conn_tx_lll_enqueue+0x9a>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   38858:	f104 0268 	add.w	r2, r4, #104	; 0x68
   3885c:	4631      	mov	r1, r6
   3885e:	4638      	mov	r0, r7
   38860:	f7f7 f920 	bl	2faa4 <memq_enqueue>
	while (conn->tx_head &&
   38864:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   38868:	3d01      	subs	r5, #1
   3886a:	b2ed      	uxtb	r5, r5
   3886c:	2b00      	cmp	r3, #0
   3886e:	d06c      	beq.n	3894a <ull_conn_tx_lll_enqueue+0x11e>
		 !conn->llcp_phy.pause_tx &&
   38870:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
	while (conn->tx_head &&
   38874:	07d1      	lsls	r1, r2, #31
   38876:	d403      	bmi.n	38880 <ull_conn_tx_lll_enqueue+0x54>
		 !conn->llcp_enc.pause_tx &&
   38878:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
		 !conn->llcp_phy.pause_tx &&
   3887c:	0792      	lsls	r2, r2, #30
   3887e:	d53a      	bpl.n	388f6 <ull_conn_tx_lll_enqueue+0xca>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   38880:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   38884:	429a      	cmp	r2, r3
   38886:	d160      	bne.n	3894a <ull_conn_tx_lll_enqueue+0x11e>
   38888:	2dff      	cmp	r5, #255	; 0xff
   3888a:	d05e      	beq.n	3894a <ull_conn_tx_lll_enqueue+0x11e>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   3888c:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
   38890:	4620      	mov	r0, r4
   38892:	f7fc f8d1 	bl	34a38 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   38896:	7903      	ldrb	r3, [r0, #4]
   38898:	f003 0303 	and.w	r3, r3, #3
   3889c:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   3889e:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   388a0:	d1d5      	bne.n	3884e <ull_conn_tx_lll_enqueue+0x22>
			ctrl_tx_pre_ack(conn, pdu_tx);
   388a2:	79c3      	ldrb	r3, [r0, #7]
	switch (pdu_tx->llctrl.opcode) {
   388a4:	2b0b      	cmp	r3, #11
   388a6:	d052      	beq.n	3894e <ull_conn_tx_lll_enqueue+0x122>
   388a8:	d81b      	bhi.n	388e2 <ull_conn_tx_lll_enqueue+0xb6>
   388aa:	2b04      	cmp	r3, #4
   388ac:	d1cf      	bne.n	3884e <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   388ae:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   388b2:	f043 0302 	orr.w	r3, r3, #2
   388b6:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
		link = mem_acquire(&mem_link_tx.free);
   388ba:	4640      	mov	r0, r8
   388bc:	f7f7 f88e 	bl	2f9dc <mem_acquire>
		LL_ASSERT(link);
   388c0:	4607      	mov	r7, r0
   388c2:	2800      	cmp	r0, #0
   388c4:	d1c8      	bne.n	38858 <ull_conn_tx_lll_enqueue+0x2c>
   388c6:	483e      	ldr	r0, [pc, #248]	; (389c0 <ull_conn_tx_lll_enqueue+0x194>)
   388c8:	f240 7326 	movw	r3, #1830	; 0x726
   388cc:	4652      	mov	r2, sl
   388ce:	4649      	mov	r1, r9
   388d0:	f009 fff8 	bl	428c4 <printk>
   388d4:	4040      	eors	r0, r0
   388d6:	f380 8811 	msr	BASEPRI, r0
   388da:	f04f 0003 	mov.w	r0, #3
   388de:	df02      	svc	2
   388e0:	e7ba      	b.n	38858 <ull_conn_tx_lll_enqueue+0x2c>
	switch (pdu_tx->llctrl.opcode) {
   388e2:	3b16      	subs	r3, #22
   388e4:	2b01      	cmp	r3, #1
   388e6:	d8b2      	bhi.n	3884e <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_phy.pause_tx = 1U;
   388e8:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   388ec:	f043 0301 	orr.w	r3, r3, #1
   388f0:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		break;
   388f4:	e7ab      	b.n	3884e <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   388f6:	791a      	ldrb	r2, [r3, #4]
   388f8:	f002 0203 	and.w	r2, r2, #3
   388fc:	2a03      	cmp	r2, #3
   388fe:	d1c3      	bne.n	38888 <ull_conn_tx_lll_enqueue+0x5c>
	    ((pdu_data_tx->llctrl.opcode ==
   38900:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   38902:	2a03      	cmp	r2, #3
   38904:	d001      	beq.n	3890a <ull_conn_tx_lll_enqueue+0xde>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   38906:	2a0a      	cmp	r2, #10
   38908:	d1be      	bne.n	38888 <ull_conn_tx_lll_enqueue+0x5c>
		if (((conn->llcp_req != conn->llcp_ack) &&
   3890a:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   3890e:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   38912:	428a      	cmp	r2, r1
   38914:	d021      	beq.n	3895a <ull_conn_tx_lll_enqueue+0x12e>
   38916:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   3891a:	2a03      	cmp	r2, #3
   3891c:	d0b4      	beq.n	38888 <ull_conn_tx_lll_enqueue+0x5c>
			if ((tx->next != NULL) &&
   3891e:	681a      	ldr	r2, [r3, #0]
   38920:	b19a      	cbz	r2, 3894a <ull_conn_tx_lll_enqueue+0x11e>
   38922:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   38926:	428a      	cmp	r2, r1
   38928:	d10f      	bne.n	3894a <ull_conn_tx_lll_enqueue+0x11e>
				conn->tx_head = tx->next;
   3892a:	f8c4 21c4 	str.w	r2, [r4, #452]	; 0x1c4
				tx->next = conn->tx_ctrl_last->next;
   3892e:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
				if (!conn->tx_data_last) {
   38932:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
				tx->next = conn->tx_ctrl_last->next;
   38936:	6810      	ldr	r0, [r2, #0]
   38938:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   3893a:	6013      	str	r3, [r2, #0]
				conn->tx_data = tx;
   3893c:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
				if (!conn->tx_data_last) {
   38940:	2900      	cmp	r1, #0
   38942:	d1a1      	bne.n	38888 <ull_conn_tx_lll_enqueue+0x5c>
					conn->tx_data_last = tx;
   38944:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
   38948:	e79e      	b.n	38888 <ull_conn_tx_lll_enqueue+0x5c>
}
   3894a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!conn->lll.role) {
   3894e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   38952:	2b00      	cmp	r3, #0
   38954:	f6bf af7b 	bge.w	3884e <ull_conn_tx_lll_enqueue+0x22>
   38958:	e7a9      	b.n	388ae <ull_conn_tx_lll_enqueue+0x82>
		    ((conn->llcp_req == conn->llcp_ack) &&
   3895a:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
   3895e:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
   38962:	4288      	cmp	r0, r1
   38964:	d1db      	bne.n	3891e <ull_conn_tx_lll_enqueue+0xf2>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   38966:	f894 0139 	ldrb.w	r0, [r4, #313]	; 0x139
   3896a:	f894 1138 	ldrb.w	r1, [r4, #312]	; 0x138
   3896e:	4288      	cmp	r0, r1
   38970:	d1d5      	bne.n	3891e <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   38972:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
   38976:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   3897a:	4288      	cmp	r0, r1
   3897c:	d1cf      	bne.n	3891e <ull_conn_tx_lll_enqueue+0xf2>
		       conn->llcp_conn_param.req) ||
   3897e:	f894 01ad 	ldrb.w	r0, [r4, #429]	; 0x1ad
   38982:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
   38986:	4288      	cmp	r0, r1
   38988:	d1c9      	bne.n	3891e <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   3898a:	f894 01bd 	ldrb.w	r0, [r4, #445]	; 0x1bd
   3898e:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   38992:	4288      	cmp	r0, r1
   38994:	d1c3      	bne.n	3891e <ull_conn_tx_lll_enqueue+0xf2>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   38996:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_ack -= 2U;
   3899a:	3a02      	subs	r2, #2
   3899c:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   389a0:	2201      	movs	r2, #1
   389a2:	f362 0301 	bfi	r3, r2, #0, #2
   389a6:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_type = LLCP_ENCRYPTION;
   389aa:	2303      	movs	r3, #3
   389ac:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
   389b0:	e76a      	b.n	38888 <ull_conn_tx_lll_enqueue+0x5c>
   389b2:	4770      	bx	lr
   389b4:	200025fc 	.word	0x200025fc
   389b8:	0004a0dc 	.word	0x0004a0dc
   389bc:	0004a134 	.word	0x0004a134
   389c0:	00049c68 	.word	0x00049c68

000389c4 <tx_demux>:
{
   389c4:	b510      	push	{r4, lr}
   389c6:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   389c8:	2001      	movs	r0, #1
   389ca:	f7ff fcdf 	bl	3838c <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   389ce:	4620      	mov	r0, r4
   389d0:	2101      	movs	r1, #1
}
   389d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   389d6:	f7ff bf29 	b.w	3882c <ull_conn_tx_lll_enqueue>
   389da:	bf00      	nop

000389dc <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   389dc:	4901      	ldr	r1, [pc, #4]	; (389e4 <ull_conn_link_tx_release+0x8>)
   389de:	f7f7 b817 	b.w	2fa10 <mem_release>
   389e2:	bf00      	nop
   389e4:	200025fc 	.word	0x200025fc

000389e8 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   389e8:	4b01      	ldr	r3, [pc, #4]	; (389f0 <ull_conn_ack_last_idx_get+0x8>)
}
   389ea:	78d8      	ldrb	r0, [r3, #3]
   389ec:	4770      	bx	lr
   389ee:	bf00      	nop
   389f0:	20000718 	.word	0x20000718

000389f4 <ull_conn_ack_peek>:
{
   389f4:	b510      	push	{r4, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   389f6:	4b0c      	ldr	r3, [pc, #48]	; (38a28 <ull_conn_ack_peek+0x34>)
   389f8:	f893 c002 	ldrb.w	ip, [r3, #2]
   389fc:	f893 e003 	ldrb.w	lr, [r3, #3]
   38a00:	781c      	ldrb	r4, [r3, #0]
	if (first == last) {
   38a02:	45f4      	cmp	ip, lr
   38a04:	d00d      	beq.n	38a22 <ull_conn_ack_peek+0x2e>
	return (void *)(fifo + first * size);
   38a06:	fb1c fc04 	smulbb	ip, ip, r4
   38a0a:	3304      	adds	r3, #4
   38a0c:	eb0c 0403 	add.w	r4, ip, r3
	*ack_last = mfifo_conn_ack.l;
   38a10:	f880 e000 	strb.w	lr, [r0]
	*handle = lll_tx->handle;
   38a14:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   38a18:	6863      	ldr	r3, [r4, #4]
	*handle = lll_tx->handle;
   38a1a:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   38a1c:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   38a1e:	6818      	ldr	r0, [r3, #0]
}
   38a20:	bd10      	pop	{r4, pc}
		return NULL;
   38a22:	2000      	movs	r0, #0
}
   38a24:	bd10      	pop	{r4, pc}
   38a26:	bf00      	nop
   38a28:	20000718 	.word	0x20000718

00038a2c <ull_conn_ack_by_last_peek>:
{
   38a2c:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   38a2e:	4b0b      	ldr	r3, [pc, #44]	; (38a5c <ull_conn_ack_by_last_peek+0x30>)
   38a30:	f893 c002 	ldrb.w	ip, [r3, #2]
   38a34:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
   38a38:	4584      	cmp	ip, r0
   38a3a:	d00d      	beq.n	38a58 <ull_conn_ack_by_last_peek+0x2c>
	return (void *)(fifo + first * size);
   38a3c:	3304      	adds	r3, #4
   38a3e:	fb1c fc0e 	smulbb	ip, ip, lr
   38a42:	eb0c 0e03 	add.w	lr, ip, r3
	*handle = lll_tx->handle;
   38a46:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   38a4a:	f8de 3004 	ldr.w	r3, [lr, #4]
	*handle = lll_tx->handle;
   38a4e:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   38a50:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   38a52:	6818      	ldr	r0, [r3, #0]
}
   38a54:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   38a58:	2000      	movs	r0, #0
   38a5a:	e7fb      	b.n	38a54 <ull_conn_ack_by_last_peek+0x28>
   38a5c:	20000718 	.word	0x20000718

00038a60 <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
   38a60:	4b09      	ldr	r3, [pc, #36]	; (38a88 <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   38a62:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   38a64:	78da      	ldrb	r2, [r3, #3]
   38a66:	7818      	ldrb	r0, [r3, #0]
   38a68:	f893 c001 	ldrb.w	ip, [r3, #1]
   38a6c:	428a      	cmp	r2, r1
   38a6e:	d009      	beq.n	38a84 <ull_conn_ack_dequeue+0x24>
	_first += 1U;
   38a70:	1c4a      	adds	r2, r1, #1
	mem = *((void **)(fifo + _first * size));
   38a72:	fb01 3000 	mla	r0, r1, r0, r3
	_first += 1U;
   38a76:	b2d2      	uxtb	r2, r2
		_first = 0U;
   38a78:	4594      	cmp	ip, r2
   38a7a:	bf08      	it	eq
   38a7c:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   38a7e:	6840      	ldr	r0, [r0, #4]
	*first = _first; /* Write back read-index */
   38a80:	709a      	strb	r2, [r3, #2]
	return mem;
   38a82:	4770      	bx	lr
		return NULL;
   38a84:	2000      	movs	r0, #0
}
   38a86:	4770      	bx	lr
   38a88:	20000718 	.word	0x20000718

00038a8c <ull_conn_lll_ack_enqueue>:
{
   38a8c:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   38a8e:	4c14      	ldr	r4, [pc, #80]	; (38ae0 <ull_conn_lll_ack_enqueue+0x54>)
   38a90:	78e2      	ldrb	r2, [r4, #3]
	if (last == count) {
   38a92:	f894 e001 	ldrb.w	lr, [r4, #1]
   38a96:	f894 c002 	ldrb.w	ip, [r4, #2]
   38a9a:	7825      	ldrb	r5, [r4, #0]
	last = last + 1;
   38a9c:	1c53      	adds	r3, r2, #1
   38a9e:	b2db      	uxtb	r3, r3
		last = 0U;
   38aa0:	459e      	cmp	lr, r3
   38aa2:	bf08      	it	eq
   38aa4:	2300      	moveq	r3, #0
	if (last == first) {
   38aa6:	459c      	cmp	ip, r3
   38aa8:	d009      	beq.n	38abe <ull_conn_lll_ack_enqueue+0x32>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   38aaa:	fb12 f205 	smulbb	r2, r2, r5
   38aae:	f104 0c04 	add.w	ip, r4, #4
	lll_tx->handle = handle;
   38ab2:	f82c 0002 	strh.w	r0, [ip, r2]
   38ab6:	4462      	add	r2, ip
	lll_tx->node = tx;
   38ab8:	6051      	str	r1, [r2, #4]
	*last = idx; /* Commit: Update write index */
   38aba:	70e3      	strb	r3, [r4, #3]
}
   38abc:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(lll_tx);
   38abe:	4a09      	ldr	r2, [pc, #36]	; (38ae4 <ull_conn_lll_ack_enqueue+0x58>)
   38ac0:	4909      	ldr	r1, [pc, #36]	; (38ae8 <ull_conn_lll_ack_enqueue+0x5c>)
   38ac2:	480a      	ldr	r0, [pc, #40]	; (38aec <ull_conn_lll_ack_enqueue+0x60>)
   38ac4:	f240 7376 	movw	r3, #1910	; 0x776
   38ac8:	f009 fefc 	bl	428c4 <printk>
   38acc:	4040      	eors	r0, r0
   38ace:	f380 8811 	msr	BASEPRI, r0
   38ad2:	f04f 0003 	mov.w	r0, #3
   38ad6:	df02      	svc	2
	lll_tx->handle = handle;
   38ad8:	2300      	movs	r3, #0
   38ada:	801b      	strh	r3, [r3, #0]
   38adc:	deff      	udf	#255	; 0xff
   38ade:	bf00      	nop
   38ae0:	20000718 	.word	0x20000718
   38ae4:	0004a0dc 	.word	0x0004a0dc
   38ae8:	0004a124 	.word	0x0004a124
   38aec:	00049c68 	.word	0x00049c68

00038af0 <ull_conn_tx_ack>:
{
   38af0:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(pdu_tx->len);
   38af2:	7953      	ldrb	r3, [r2, #5]
{
   38af4:	b082      	sub	sp, #8
   38af6:	4614      	mov	r4, r2
   38af8:	4605      	mov	r5, r0
   38afa:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   38afc:	b37b      	cbz	r3, 38b5e <ull_conn_tx_ack+0x6e>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   38afe:	7923      	ldrb	r3, [r4, #4]
   38b00:	f003 0203 	and.w	r2, r3, #3
   38b04:	2a03      	cmp	r2, #3
   38b06:	d00d      	beq.n	38b24 <ull_conn_tx_ack+0x34>
	} else if (handle == LLL_HANDLE_INVALID) {
   38b08:	f64f 72ff 	movw	r2, #65535	; 0xffff
   38b0c:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   38b0e:	bf04      	itt	eq
   38b10:	f36f 0301 	bfceq	r3, #0, #2
   38b14:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   38b16:	4621      	mov	r1, r4
   38b18:	4628      	mov	r0, r5
}
   38b1a:	b002      	add	sp, #8
   38b1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   38b20:	f7fa bb2e 	b.w	33180 <ll_tx_ack_put>
		if (handle != LLL_HANDLE_INVALID) {
   38b24:	f64f 73ff 	movw	r3, #65535	; 0xffff
   38b28:	429d      	cmp	r5, r3
   38b2a:	d126      	bne.n	38b7a <ull_conn_tx_ack+0x8a>
		if (link->next == (void *)tx) {
   38b2c:	6833      	ldr	r3, [r6, #0]
   38b2e:	42a3      	cmp	r3, r4
   38b30:	d05e      	beq.n	38bf0 <ull_conn_tx_ack+0x100>
		LL_ASSERT(!link->next);
   38b32:	2b00      	cmp	r3, #0
   38b34:	d0ef      	beq.n	38b16 <ull_conn_tx_ack+0x26>
   38b36:	4a96      	ldr	r2, [pc, #600]	; (38d90 <ull_conn_tx_ack+0x2a0>)
   38b38:	4996      	ldr	r1, [pc, #600]	; (38d94 <ull_conn_tx_ack+0x2a4>)
   38b3a:	4897      	ldr	r0, [pc, #604]	; (38d98 <ull_conn_tx_ack+0x2a8>)
   38b3c:	f44f 63f4 	mov.w	r3, #1952	; 0x7a0
   38b40:	f009 fec0 	bl	428c4 <printk>
   38b44:	4040      	eors	r0, r0
   38b46:	f380 8811 	msr	BASEPRI, r0
   38b4a:	f04f 0003 	mov.w	r0, #3
   38b4e:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   38b50:	4621      	mov	r1, r4
   38b52:	4628      	mov	r0, r5
}
   38b54:	b002      	add	sp, #8
   38b56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   38b5a:	f7fa bb11 	b.w	33180 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   38b5e:	4a8c      	ldr	r2, [pc, #560]	; (38d90 <ull_conn_tx_ack+0x2a0>)
   38b60:	498e      	ldr	r1, [pc, #568]	; (38d9c <ull_conn_tx_ack+0x2ac>)
   38b62:	488d      	ldr	r0, [pc, #564]	; (38d98 <ull_conn_tx_ack+0x2a8>)
   38b64:	f240 7383 	movw	r3, #1923	; 0x783
   38b68:	f009 feac 	bl	428c4 <printk>
   38b6c:	4040      	eors	r0, r0
   38b6e:	f380 8811 	msr	BASEPRI, r0
   38b72:	f04f 0003 	mov.w	r0, #3
   38b76:	df02      	svc	2
   38b78:	e7c1      	b.n	38afe <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   38b7a:	462a      	mov	r2, r5
   38b7c:	4888      	ldr	r0, [pc, #544]	; (38da0 <ull_conn_tx_ack+0x2b0>)
   38b7e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   38b82:	f7f6 ff5d 	bl	2fa40 <mem_get>
	switch (pdu_tx->llctrl.opcode) {
   38b86:	79e2      	ldrb	r2, [r4, #7]
   38b88:	3a02      	subs	r2, #2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   38b8a:	4603      	mov	r3, r0
	switch (pdu_tx->llctrl.opcode) {
   38b8c:	2a15      	cmp	r2, #21
   38b8e:	d8cd      	bhi.n	38b2c <ull_conn_tx_ack+0x3c>
   38b90:	a101      	add	r1, pc, #4	; (adr r1, 38b98 <ull_conn_tx_ack+0xa8>)
   38b92:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   38b96:	bf00      	nop
   38b98:	00038cb9 	.word	0x00038cb9
   38b9c:	00038b2d 	.word	0x00038b2d
   38ba0:	00038c13 	.word	0x00038c13
   38ba4:	00038c21 	.word	0x00038c21
   38ba8:	00038cd1 	.word	0x00038cd1
   38bac:	00038c05 	.word	0x00038c05
   38bb0:	00038b2d 	.word	0x00038b2d
   38bb4:	00038c05 	.word	0x00038c05
   38bb8:	00038b2d 	.word	0x00038b2d
   38bbc:	00038c13 	.word	0x00038c13
   38bc0:	00038b2d 	.word	0x00038b2d
   38bc4:	00038c2f 	.word	0x00038c2f
   38bc8:	00038b2d 	.word	0x00038b2d
   38bcc:	00038b2d 	.word	0x00038b2d
   38bd0:	00038b2d 	.word	0x00038b2d
   38bd4:	00038bff 	.word	0x00038bff
   38bd8:	00038b2d 	.word	0x00038b2d
   38bdc:	00038c05 	.word	0x00038c05
   38be0:	00038c9f 	.word	0x00038c9f
   38be4:	00038c43 	.word	0x00038c43
   38be8:	00038d0b 	.word	0x00038d0b
   38bec:	00038cf5 	.word	0x00038cf5
			mem_release(tx, &mem_conn_tx_ctrl.free);
   38bf0:	496c      	ldr	r1, [pc, #432]	; (38da4 <ull_conn_tx_ack+0x2b4>)
   38bf2:	4620      	mov	r0, r4
}
   38bf4:	b002      	add	sp, #8
   38bf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   38bfa:	f7f6 bf09 	b.w	2fa10 <mem_release>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   38bfe:	7a22      	ldrb	r2, [r4, #8]
   38c00:	2a03      	cmp	r2, #3
   38c02:	d014      	beq.n	38c2e <ull_conn_tx_ack+0x13e>
			conn->common.txn_lock = 0U;
   38c04:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
   38c08:	f36f 0241 	bfc	r2, #1, #1
   38c0c:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
			break;
   38c10:	e78c      	b.n	38b2c <ull_conn_tx_ack+0x3c>
			conn->llcp_enc.pause_tx = 1U;
   38c12:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
   38c16:	f042 0202 	orr.w	r2, r2, #2
   38c1a:	f880 2166 	strb.w	r2, [r0, #358]	; 0x166
		break;
   38c1e:	e785      	b.n	38b2c <ull_conn_tx_ack+0x3c>
			conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   38c20:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
   38c24:	f042 0203 	orr.w	r2, r2, #3
   38c28:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
   38c2c:	e77e      	b.n	38b2c <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_rx = 0U;
   38c2e:	f893 2166 	ldrb.w	r2, [r3, #358]	; 0x166
   38c32:	f022 0203 	bic.w	r2, r2, #3
   38c36:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
		conn->procedure_expire = 0U;
   38c3a:	2200      	movs	r2, #0
   38c3c:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		break;
   38c40:	e774      	b.n	38b2c <ull_conn_tx_ack+0x3c>
		conn->common.txn_lock = 0U;
   38c42:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
   38c46:	f36f 0241 	bfc	r2, #1, #1
   38c4a:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   38c4e:	f893 21ad 	ldrb.w	r2, [r3, #429]	; 0x1ad
   38c52:	f890 01ac 	ldrb.w	r0, [r0, #428]	; 0x1ac
   38c56:	4282      	cmp	r2, r0
   38c58:	f43f af68 	beq.w	38b2c <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
   38c5c:	f893 11ae 	ldrb.w	r1, [r3, #430]	; 0x1ae
   38c60:	f001 0207 	and.w	r2, r1, #7
   38c64:	2a03      	cmp	r2, #3
   38c66:	d005      	beq.n	38c74 <ull_conn_tx_ack+0x184>
   38c68:	3203      	adds	r2, #3
   38c6a:	f002 0207 	and.w	r2, r2, #7
   38c6e:	2a01      	cmp	r2, #1
   38c70:	f63f af5c 	bhi.w	38b2c <ull_conn_tx_ack+0x3c>
				conn->lll.max_tx_octets =
   38c74:	f8b3 21b2 	ldrh.w	r2, [r3, #434]	; 0x1b2
   38c78:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
				conn->lll.max_tx_time =
   38c7c:	f8b3 21b6 	ldrh.w	r2, [r3, #438]	; 0x1b6
   38c80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
				if (conn->llcp_length.state ==
   38c84:	f001 0207 	and.w	r2, r1, #7
   38c88:	2a05      	cmp	r2, #5
   38c8a:	d07b      	beq.n	38d84 <ull_conn_tx_ack+0x294>
				if (!conn->llcp_length.cache.tx_octets) {
   38c8c:	f8b3 21b8 	ldrh.w	r2, [r3, #440]	; 0x1b8
   38c90:	2a00      	cmp	r2, #0
   38c92:	d169      	bne.n	38d68 <ull_conn_tx_ack+0x278>
					conn->llcp_length.ack =
   38c94:	f883 01ad 	strb.w	r0, [r3, #429]	; 0x1ad
					conn->procedure_expire = 0U;
   38c98:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
					break;
   38c9c:	e746      	b.n	38b2c <ull_conn_tx_ack+0x3c>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_REQ_ACK_WAIT) {
   38c9e:	f890 21ae 	ldrb.w	r2, [r0, #430]	; 0x1ae
   38ca2:	f002 0107 	and.w	r1, r2, #7
   38ca6:	2901      	cmp	r1, #1
   38ca8:	f47f af40 	bne.w	38b2c <ull_conn_tx_ack+0x3c>
			conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   38cac:	2102      	movs	r1, #2
   38cae:	f361 0202 	bfi	r2, r1, #0, #3
   38cb2:	f880 21ae 	strb.w	r2, [r0, #430]	; 0x1ae
   38cb6:	e739      	b.n	38b2c <ull_conn_tx_ack+0x3c>
		if (pdu_tx->llctrl.terminate_ind.error_code ==
   38cb8:	7a22      	ldrb	r2, [r4, #8]
			conn->llcp_terminate.reason_final =
   38cba:	2a13      	cmp	r2, #19
   38cbc:	bf08      	it	eq
   38cbe:	2216      	moveq	r2, #22
   38cc0:	f880 2143 	strb.w	r2, [r0, #323]	; 0x143
		conn->llcp_terminate.ack--;
   38cc4:	f890 2141 	ldrb.w	r2, [r0, #321]	; 0x141
   38cc8:	3a01      	subs	r2, #1
   38cca:	f880 2141 	strb.w	r2, [r0, #321]	; 0x141
	break;
   38cce:	e72d      	b.n	38b2c <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   38cd0:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   38cd4:	2a00      	cmp	r2, #0
   38cd6:	daa3      	bge.n	38c20 <ull_conn_tx_ack+0x130>
			conn->llcp_enc.pause_rx = 0U;
   38cd8:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
   38cdc:	f022 0203 	bic.w	r2, r2, #3
   38ce0:	f880 2166 	strb.w	r2, [r0, #358]	; 0x166
			conn->procedure_expire = 0U;
   38ce4:	2200      	movs	r2, #0
   38ce6:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
			conn->llcp_ack = conn->llcp_req;
   38cea:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   38cee:	f880 20e5 	strb.w	r2, [r0, #229]	; 0xe5
   38cf2:	e71b      	b.n	38b2c <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   38cf4:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   38cf8:	2a00      	cmp	r2, #0
   38cfa:	db28      	blt.n	38d4e <ull_conn_tx_ack+0x25e>
		conn->llcp_phy.pause_tx = 0U;
   38cfc:	f893 21bf 	ldrb.w	r2, [r3, #447]	; 0x1bf
   38d00:	f36f 0200 	bfc	r2, #0, #1
   38d04:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
		break;
   38d08:	e710      	b.n	38b2c <ull_conn_tx_ack+0x3c>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   38d0a:	f890 21be 	ldrb.w	r2, [r0, #446]	; 0x1be
   38d0e:	2102      	movs	r1, #2
   38d10:	f361 0201 	bfi	r2, r1, #0, #2
   38d14:	f880 21be 	strb.w	r2, [r0, #446]	; 0x1be
		if (conn->lll.role) {
   38d18:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   38d1c:	2a00      	cmp	r2, #0
   38d1e:	daed      	bge.n	38cfc <ull_conn_tx_ack+0x20c>
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   38d20:	4a21      	ldr	r2, [pc, #132]	; (38da8 <ull_conn_tx_ack+0x2b8>)
   38d22:	e892 0003 	ldmia.w	r2, {r0, r1}
   38d26:	aa02      	add	r2, sp, #8
   38d28:	e902 0003 	stmdb	r2, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   38d2c:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
   38d30:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
   38d34:	ea41 0292 	orr.w	r2, r1, r2, lsr #2
			lll->phy_tx_time = phy_tx_time[phys];
   38d38:	f002 0207 	and.w	r2, r2, #7
   38d3c:	3208      	adds	r2, #8
   38d3e:	446a      	add	r2, sp
   38d40:	f812 2c08 	ldrb.w	r2, [r2, #-8]
   38d44:	f362 1106 	bfi	r1, r2, #4, #3
   38d48:	f883 1060 	strb.w	r1, [r3, #96]	; 0x60
   38d4c:	e7d6      	b.n	38cfc <ull_conn_tx_ack+0x20c>
				conn->common.txn_lock = 0U;
   38d4e:	f890 10d8 	ldrb.w	r1, [r0, #216]	; 0xd8
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   38d52:	4a15      	ldr	r2, [pc, #84]	; (38da8 <ull_conn_tx_ack+0x2b8>)
				conn->common.txn_lock = 0U;
   38d54:	f36f 0141 	bfc	r1, #1, #1
   38d58:	f880 10d8 	strb.w	r1, [r0, #216]	; 0xd8
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   38d5c:	e892 0003 	ldmia.w	r2, {r0, r1}
   38d60:	aa02      	add	r2, sp, #8
   38d62:	e902 0003 	stmdb	r2, {r0, r1}
				conn->common.txn_lock = 0U;
   38d66:	e7e1      	b.n	38d2c <ull_conn_tx_ack+0x23c>
				conn->llcp_length.tx_octets =
   38d68:	f8a3 21b2 	strh.w	r2, [r3, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
   38d6c:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   38d6e:	f362 0102 	bfi	r1, r2, #0, #3
				conn->llcp_length.cache.tx_octets = 0;
   38d72:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
				conn->llcp_length.tx_time =
   38d76:	f8b3 21ba 	ldrh.w	r2, [r3, #442]	; 0x1ba
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   38d7a:	f883 11ae 	strb.w	r1, [r3, #430]	; 0x1ae
				conn->llcp_length.tx_time =
   38d7e:	f8a3 21b6 	strh.w	r2, [r3, #438]	; 0x1b6
				break;
   38d82:	e6d3      	b.n	38b2c <ull_conn_tx_ack+0x3c>
					conn->llcp_length.state =
   38d84:	2204      	movs	r2, #4
   38d86:	f362 0102 	bfi	r1, r2, #0, #3
   38d8a:	f883 11ae 	strb.w	r1, [r3, #430]	; 0x1ae
					break;
   38d8e:	e6cd      	b.n	38b2c <ull_conn_tx_ack+0x3c>
   38d90:	0004a0dc 	.word	0x0004a0dc
   38d94:	0004a2b8 	.word	0x0004a2b8
   38d98:	00049c68 	.word	0x00049c68
   38d9c:	0004a2ac 	.word	0x0004a2ac
   38da0:	200014e8 	.word	0x200014e8
   38da4:	20002638 	.word	0x20002638
   38da8:	0004a2c4 	.word	0x0004a2c4

00038dac <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   38dac:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   38db0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
	switch (lll->phy_tx_time) {
   38db4:	f3c2 1202 	ubfx	r2, r2, #4, #3
   38db8:	2a02      	cmp	r2, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   38dba:	bf14      	ite	ne
   38dbc:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   38dbe:	089b      	lsreq	r3, r3, #2
	if (lll->enc_tx) {
   38dc0:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	return max_tx_octets;
   38dc4:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   38dc6:	bf14      	ite	ne
   38dc8:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   38dca:	3b0b      	subeq	r3, #11
   38dcc:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   38dce:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   38dd0:	bf44      	itt	mi
   38dd2:	3b04      	submi	r3, #4
   38dd4:	b29b      	uxthmi	r3, r3
}
   38dd6:	4298      	cmp	r0, r3
   38dd8:	bf28      	it	cs
   38dda:	4618      	movcs	r0, r3
   38ddc:	4770      	bx	lr
   38dde:	bf00      	nop

00038de0 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param)
{
   38de0:	b510      	push	{r4, lr}
   38de2:	460c      	mov	r4, r1
	struct ll_conn *conn = param;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   38de4:	b930      	cbnz	r0, 38df4 <ticker_update_latency_cancel_op_cb+0x14>

	conn->periph.latency_cancel = 0U;
   38de6:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   38dea:	f36f 0382 	bfc	r3, #2, #1
   38dee:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   38df2:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   38df4:	4a09      	ldr	r2, [pc, #36]	; (38e1c <ticker_update_latency_cancel_op_cb+0x3c>)
   38df6:	490a      	ldr	r1, [pc, #40]	; (38e20 <ticker_update_latency_cancel_op_cb+0x40>)
   38df8:	480a      	ldr	r0, [pc, #40]	; (38e24 <ticker_update_latency_cancel_op_cb+0x44>)
   38dfa:	f240 23af 	movw	r3, #687	; 0x2af
   38dfe:	f009 fd61 	bl	428c4 <printk>
   38e02:	4040      	eors	r0, r0
   38e04:	f380 8811 	msr	BASEPRI, r0
   38e08:	f04f 0003 	mov.w	r0, #3
   38e0c:	df02      	svc	2
	conn->periph.latency_cancel = 0U;
   38e0e:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   38e12:	f36f 0382 	bfc	r3, #2, #1
   38e16:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   38e1a:	bd10      	pop	{r4, pc}
   38e1c:	0004a300 	.word	0x0004a300
   38e20:	0004a348 	.word	0x0004a348
   38e24:	00049c68 	.word	0x00049c68

00038e28 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   38e28:	b900      	cbnz	r0, 38e2c <ticker_op_cb+0x4>
   38e2a:	4770      	bx	lr
{
   38e2c:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   38e2e:	4a07      	ldr	r2, [pc, #28]	; (38e4c <ticker_op_cb+0x24>)
   38e30:	4907      	ldr	r1, [pc, #28]	; (38e50 <ticker_op_cb+0x28>)
   38e32:	4808      	ldr	r0, [pc, #32]	; (38e54 <ticker_op_cb+0x2c>)
   38e34:	f240 23a7 	movw	r3, #679	; 0x2a7
   38e38:	f009 fd44 	bl	428c4 <printk>
   38e3c:	4040      	eors	r0, r0
   38e3e:	f380 8811 	msr	BASEPRI, r0
   38e42:	f04f 0003 	mov.w	r0, #3
   38e46:	df02      	svc	2
}
   38e48:	bd08      	pop	{r3, pc}
   38e4a:	bf00      	nop
   38e4c:	0004a300 	.word	0x0004a300
   38e50:	0004a13c 	.word	0x0004a13c
   38e54:	00049c68 	.word	0x00049c68

00038e58 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   38e58:	2801      	cmp	r0, #1
   38e5a:	d000      	beq.n	38e5e <ticker_op_stop_adv_cb+0x6>
   38e5c:	4770      	bx	lr
{
   38e5e:	b510      	push	{r4, lr}
   38e60:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   38e62:	f7fa fa25 	bl	332b0 <ull_disable_mark_get>
   38e66:	4284      	cmp	r4, r0
   38e68:	d00c      	beq.n	38e84 <ticker_op_stop_adv_cb+0x2c>
   38e6a:	4a07      	ldr	r2, [pc, #28]	; (38e88 <ticker_op_stop_adv_cb+0x30>)
   38e6c:	4907      	ldr	r1, [pc, #28]	; (38e8c <ticker_op_stop_adv_cb+0x34>)
   38e6e:	4808      	ldr	r0, [pc, #32]	; (38e90 <ticker_op_stop_adv_cb+0x38>)
   38e70:	f240 239f 	movw	r3, #671	; 0x29f
   38e74:	f009 fd26 	bl	428c4 <printk>
   38e78:	4040      	eors	r0, r0
   38e7a:	f380 8811 	msr	BASEPRI, r0
   38e7e:	f04f 0003 	mov.w	r0, #3
   38e82:	df02      	svc	2
}
   38e84:	bd10      	pop	{r4, pc}
   38e86:	bf00      	nop
   38e88:	0004a300 	.word	0x0004a300
   38e8c:	0004a35c 	.word	0x0004a35c
   38e90:	00049c68 	.word	0x00049c68

00038e94 <ull_periph_ticker_cb>:
{
   38e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38e98:	9c07      	ldr	r4, [sp, #28]
   38e9a:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   38e9e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   38ea0:	461d      	mov	r5, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   38ea2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   38ea6:	4299      	cmp	r1, r3
   38ea8:	d026      	beq.n	38ef8 <ull_periph_ticker_cb+0x64>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   38eaa:	4606      	mov	r6, r0
   38eac:	4617      	mov	r7, r2
   38eae:	4601      	mov	r1, r0
   38eb0:	462a      	mov	r2, r5
   38eb2:	4620      	mov	r0, r4
   38eb4:	f7fe f810 	bl	36ed8 <ull_conn_llcp>
		if (ret) {
   38eb8:	b9f0      	cbnz	r0, 38ef8 <ull_periph_ticker_cb+0x64>
	return ++hdr->ref;
   38eba:	7823      	ldrb	r3, [r4, #0]
   38ebc:	3301      	adds	r3, #1
   38ebe:	b2db      	uxtb	r3, r3
   38ec0:	7023      	strb	r3, [r4, #0]
	LL_ASSERT(ref);
   38ec2:	b34b      	cbz	r3, 38f18 <ull_periph_ticker_cb+0x84>
	p.ticks_at_expire = ticks_at_expire;
   38ec4:	491b      	ldr	r1, [pc, #108]	; (38f34 <ull_periph_ticker_cb+0xa0>)
	mfy.param = &p;
   38ec6:	4b1c      	ldr	r3, [pc, #112]	; (38f38 <ull_periph_ticker_cb+0xa4>)
	p.lazy = lazy;
   38ec8:	810d      	strh	r5, [r1, #8]
	p.param = &conn->lll;
   38eca:	f104 001c 	add.w	r0, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   38ece:	2200      	movs	r2, #0
	p.param = &conn->lll;
   38ed0:	60c8      	str	r0, [r1, #12]
	p.remainder = remainder;
   38ed2:	e9c1 6700 	strd	r6, r7, [r1]
	p.force = force;
   38ed6:	f881 800a 	strb.w	r8, [r1, #10]
	mfy.param = &p;
   38eda:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   38edc:	2001      	movs	r0, #1
   38ede:	4611      	mov	r1, r2
   38ee0:	f7f6 fe56 	bl	2fb90 <mayfly_enqueue>
	LL_ASSERT(!err);
   38ee4:	b950      	cbnz	r0, 38efc <ull_periph_ticker_cb+0x68>
	ull_conn_tx_demux(UINT8_MAX);
   38ee6:	20ff      	movs	r0, #255	; 0xff
   38ee8:	f7ff fa50 	bl	3838c <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   38eec:	4620      	mov	r0, r4
   38eee:	21ff      	movs	r1, #255	; 0xff
}
   38ef0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   38ef4:	f7ff bc9a 	b.w	3882c <ull_conn_tx_lll_enqueue>
}
   38ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   38efc:	4a0f      	ldr	r2, [pc, #60]	; (38f3c <ull_periph_ticker_cb+0xa8>)
   38efe:	4910      	ldr	r1, [pc, #64]	; (38f40 <ull_periph_ticker_cb+0xac>)
   38f00:	4810      	ldr	r0, [pc, #64]	; (38f44 <ull_periph_ticker_cb+0xb0>)
   38f02:	f240 232a 	movw	r3, #554	; 0x22a
   38f06:	f009 fcdd 	bl	428c4 <printk>
   38f0a:	4040      	eors	r0, r0
   38f0c:	f380 8811 	msr	BASEPRI, r0
   38f10:	f04f 0003 	mov.w	r0, #3
   38f14:	df02      	svc	2
   38f16:	e7e6      	b.n	38ee6 <ull_periph_ticker_cb+0x52>
	LL_ASSERT(ref);
   38f18:	4a08      	ldr	r2, [pc, #32]	; (38f3c <ull_periph_ticker_cb+0xa8>)
   38f1a:	490b      	ldr	r1, [pc, #44]	; (38f48 <ull_periph_ticker_cb+0xb4>)
   38f1c:	4809      	ldr	r0, [pc, #36]	; (38f44 <ull_periph_ticker_cb+0xb0>)
   38f1e:	f240 231d 	movw	r3, #541	; 0x21d
   38f22:	f009 fccf 	bl	428c4 <printk>
   38f26:	4040      	eors	r0, r0
   38f28:	f380 8811 	msr	BASEPRI, r0
   38f2c:	f04f 0003 	mov.w	r0, #3
   38f30:	df02      	svc	2
   38f32:	e7c7      	b.n	38ec4 <ull_periph_ticker_cb+0x30>
   38f34:	20002764 	.word	0x20002764
   38f38:	20000780 	.word	0x20000780
   38f3c:	0004a300 	.word	0x0004a300
   38f40:	00049e04 	.word	0x00049e04
   38f44:	00049c68 	.word	0x00049c68
   38f48:	0004a098 	.word	0x0004a098

00038f4c <ull_periph_latency_cancel>:
	if (conn->lll.latency_event && !conn->periph.latency_cancel) {
   38f4c:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   38f4e:	b123      	cbz	r3, 38f5a <ull_periph_latency_cancel+0xe>
   38f50:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
   38f54:	f012 0304 	ands.w	r3, r2, #4
   38f58:	d000      	beq.n	38f5c <ull_periph_latency_cancel+0x10>
   38f5a:	4770      	bx	lr
{
   38f5c:	b510      	push	{r4, lr}
		conn->periph.latency_cancel = 1U;
   38f5e:	f042 0204 	orr.w	r2, r2, #4
{
   38f62:	b088      	sub	sp, #32
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   38f64:	4c11      	ldr	r4, [pc, #68]	; (38fac <ull_periph_latency_cancel+0x60>)
		conn->periph.latency_cancel = 1U;
   38f66:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   38f6a:	3103      	adds	r1, #3
   38f6c:	2201      	movs	r2, #1
   38f6e:	e9cd 3202 	strd	r3, r2, [sp, #8]
   38f72:	e9cd 3404 	strd	r3, r4, [sp, #16]
   38f76:	e9cd 3300 	strd	r3, r3, [sp]
   38f7a:	9006      	str	r0, [sp, #24]
   38f7c:	b2ca      	uxtb	r2, r1
   38f7e:	4618      	mov	r0, r3
   38f80:	2103      	movs	r1, #3
   38f82:	f7f8 f819 	bl	30fb8 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   38f86:	f030 0302 	bics.w	r3, r0, #2
   38f8a:	d00c      	beq.n	38fa6 <ull_periph_latency_cancel+0x5a>
   38f8c:	4a08      	ldr	r2, [pc, #32]	; (38fb0 <ull_periph_latency_cancel+0x64>)
   38f8e:	4909      	ldr	r1, [pc, #36]	; (38fb4 <ull_periph_latency_cancel+0x68>)
   38f90:	4809      	ldr	r0, [pc, #36]	; (38fb8 <ull_periph_latency_cancel+0x6c>)
   38f92:	f240 13e3 	movw	r3, #483	; 0x1e3
   38f96:	f009 fc95 	bl	428c4 <printk>
   38f9a:	4040      	eors	r0, r0
   38f9c:	f380 8811 	msr	BASEPRI, r0
   38fa0:	f04f 0003 	mov.w	r0, #3
   38fa4:	df02      	svc	2
}
   38fa6:	b008      	add	sp, #32
   38fa8:	bd10      	pop	{r4, pc}
   38faa:	bf00      	nop
   38fac:	00038de1 	.word	0x00038de1
   38fb0:	0004a300 	.word	0x0004a300
   38fb4:	0004a1bc 	.word	0x0004a1bc
   38fb8:	00049c68 	.word	0x00049c68

00038fbc <ll_start_enc_req_send>:
{
   38fbc:	b570      	push	{r4, r5, r6, lr}
   38fbe:	460d      	mov	r5, r1
   38fc0:	4616      	mov	r6, r2
	conn = ll_connected_get(handle);
   38fc2:	f7fc f911 	bl	351e8 <ll_connected_get>
	if (!conn) {
   38fc6:	b3f8      	cbz	r0, 39048 <ll_start_enc_req_send+0x8c>
	if (error_code) {
   38fc8:	4604      	mov	r4, r0
   38fca:	b95d      	cbnz	r5, 38fe4 <ll_start_enc_req_send+0x28>
		if ((conn->llcp_req == conn->llcp_ack) ||
   38fcc:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   38fd0:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
   38fd4:	429a      	cmp	r2, r3
   38fd6:	d003      	beq.n	38fe0 <ll_start_enc_req_send+0x24>
   38fd8:	f890 30e6 	ldrb.w	r3, [r0, #230]	; 0xe6
   38fdc:	2b03      	cmp	r3, #3
   38fde:	d026      	beq.n	3902e <ll_start_enc_req_send+0x72>
				return BT_HCI_ERR_CMD_DISALLOWED;
   38fe0:	200c      	movs	r0, #12
}
   38fe2:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->llcp_enc.refresh == 0U) {
   38fe4:	f890 3166 	ldrb.w	r3, [r0, #358]	; 0x166
   38fe8:	f013 0304 	ands.w	r3, r3, #4
   38fec:	d113      	bne.n	39016 <ll_start_enc_req_send+0x5a>
			if ((conn->llcp_req == conn->llcp_ack) ||
   38fee:	f890 10e4 	ldrb.w	r1, [r0, #228]	; 0xe4
   38ff2:	f890 20e5 	ldrb.w	r2, [r0, #229]	; 0xe5
   38ff6:	4291      	cmp	r1, r2
   38ff8:	d0f2      	beq.n	38fe0 <ll_start_enc_req_send+0x24>
   38ffa:	f890 20e6 	ldrb.w	r2, [r0, #230]	; 0xe6
   38ffe:	2a03      	cmp	r2, #3
   39000:	d1ee      	bne.n	38fe0 <ll_start_enc_req_send+0x24>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   39002:	f890 20f4 	ldrb.w	r2, [r0, #244]	; 0xf4
			conn->llcp.encryption.error_code = error_code;
   39006:	f880 50f5 	strb.w	r5, [r0, #245]	; 0xf5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   3900a:	f363 0201 	bfi	r2, r3, #0, #2
   3900e:	f880 20f4 	strb.w	r2, [r0, #244]	; 0xf4
	return 0;
   39012:	2000      	movs	r0, #0
}
   39014:	bd70      	pop	{r4, r5, r6, pc}
			    conn->llcp_terminate.req) {
   39016:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
			if (conn->llcp_terminate.ack !=
   3901a:	f890 3141 	ldrb.w	r3, [r0, #321]	; 0x141
   3901e:	4293      	cmp	r3, r2
   39020:	d1de      	bne.n	38fe0 <ll_start_enc_req_send+0x24>
			conn->llcp_terminate.req++;
   39022:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
   39024:	f880 5142 	strb.w	r5, [r0, #322]	; 0x142
			conn->llcp_terminate.req++;
   39028:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
   3902c:	e7f1      	b.n	39012 <ll_start_enc_req_send+0x56>
		memcpy(&conn->llcp_enc.ltk[0], ltk,
   3902e:	2210      	movs	r2, #16
   39030:	4631      	mov	r1, r6
   39032:	f200 1071 	addw	r0, r0, #369	; 0x171
   39036:	f00b fd44 	bl	44ac2 <memcpy>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   3903a:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
   3903e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   39042:	f8a4 30f4 	strh.w	r3, [r4, #244]	; 0xf4
   39046:	e7e4      	b.n	39012 <ll_start_enc_req_send+0x56>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   39048:	2002      	movs	r0, #2
}
   3904a:	bd70      	pop	{r4, r5, r6, pc}

0003904c <lll_chan_sel_1>:
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.2
 * Channel Selection algorithm #1
 */
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   3904c:	b530      	push	{r4, r5, lr}
   3904e:	4604      	mov	r4, r0
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   39050:	7800      	ldrb	r0, [r0, #0]
{
   39052:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   39056:	fb02 1101 	mla	r1, r2, r1, r1
   3905a:	4a1f      	ldr	r2, [pc, #124]	; (390d8 <lll_chan_sel_1+0x8c>)
   3905c:	4401      	add	r1, r0
   3905e:	fb82 0201 	smull	r0, r2, r2, r1
   39062:	440a      	add	r2, r1
   39064:	1152      	asrs	r2, r2, #5
   39066:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
   3906a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   3906e:	1a8a      	subs	r2, r1, r2
   39070:	b2d0      	uxtb	r0, r2
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   39072:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
   39074:	7020      	strb	r0, [r4, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   39076:	5c59      	ldrb	r1, [r3, r1]
   39078:	f002 0207 	and.w	r2, r2, #7
   3907c:	fa41 f202 	asr.w	r2, r1, r2
   39080:	f012 0201 	ands.w	r2, r2, #1
   39084:	d11f      	bne.n	390c6 <lll_chan_sel_1+0x7a>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   39086:	fbb0 f4f5 	udiv	r4, r0, r5
   3908a:	fb05 0414 	mls	r4, r5, r4, r0
   3908e:	b2e4      	uxtb	r4, r4
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   39090:	1e5d      	subs	r5, r3, #1
	chan_next = 0U;
   39092:	4610      	mov	r0, r2
   39094:	3304      	adds	r3, #4
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   39096:	f100 0e08 	add.w	lr, r0, #8
   3909a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
		bit_count = 8U;
		while (bit_count--) {
   3909e:	fa5f fe8e 	uxtb.w	lr, lr
		bite = *chan_map;
   390a2:	4602      	mov	r2, r0
			if (bite & 0x01) {
   390a4:	f011 0f01 	tst.w	r1, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   390a8:	f102 0c01 	add.w	ip, r2, #1
			bite >>= 1;
   390ac:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   390b0:	d002      	beq.n	390b8 <lll_chan_sel_1+0x6c>
				if (chan_index == 0U) {
   390b2:	b14c      	cbz	r4, 390c8 <lll_chan_sel_1+0x7c>
				chan_index--;
   390b4:	3c01      	subs	r4, #1
   390b6:	b2e4      	uxtb	r4, r4
			chan_next++;
   390b8:	fa5f f28c 	uxtb.w	r2, ip
		while (bit_count--) {
   390bc:	4572      	cmp	r2, lr
   390be:	d1f1      	bne.n	390a4 <lll_chan_sel_1+0x58>
			chan_next++;
   390c0:	4610      	mov	r0, r2
	while (byte_count--) {
   390c2:	429d      	cmp	r5, r3
   390c4:	d1e7      	bne.n	39096 <lll_chan_sel_1+0x4a>
}
   390c6:	bd30      	pop	{r4, r5, pc}
		}

		if (bit_count < 8) {
   390c8:	1dc1      	adds	r1, r0, #7
   390ca:	1a89      	subs	r1, r1, r2
   390cc:	b2c9      	uxtb	r1, r1
   390ce:	2907      	cmp	r1, #7
   390d0:	4610      	mov	r0, r2
   390d2:	d8f6      	bhi.n	390c2 <lll_chan_sel_1+0x76>
}
   390d4:	bd30      	pop	{r4, r5, pc}
   390d6:	bf00      	nop
   390d8:	dd67c8a7 	.word	0xdd67c8a7

000390dc <lll_chan_id>:
	return aa_ms ^ aa_ls;
   390dc:	8842      	ldrh	r2, [r0, #2]
   390de:	8800      	ldrh	r0, [r0, #0]
}
   390e0:	4050      	eors	r0, r2
   390e2:	4770      	bx	lr

000390e4 <lll_chan_sel_2>:
{
   390e4:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.3.2
 * Inputs and basic components, for below operations
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   390e6:	4d34      	ldr	r5, [pc, #208]	; (391b8 <lll_chan_sel_2+0xd4>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   390e8:	4c34      	ldr	r4, [pc, #208]	; (391bc <lll_chan_sel_2+0xd8>)
static uint16_t chan_prn_s(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_s;

	prn_s = counter ^ chan_id;
   390ea:	4048      	eors	r0, r1
   390ec:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   390f0:	0a06      	lsrs	r6, r0, #8
   390f2:	fa5f fe80 	uxtb.w	lr, r0
   390f6:	eb0e 2e8e 	add.w	lr, lr, lr, lsl #10
   390fa:	eb06 2086 	add.w	r0, r6, r6, lsl #10
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   390fe:	ea04 1740 	and.w	r7, r4, r0, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   39102:	ea05 0640 	and.w	r6, r5, r0, lsl #1
   39106:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   3910a:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   3910e:	433e      	orrs	r6, r7
   39110:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   39114:	eb00 2700 	add.w	r7, r0, r0, lsl #8
   39118:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
   3911c:	eb06 260e 	add.w	r6, r6, lr, lsl #8
   39120:	eb00 2007 	add.w	r0, r0, r7, lsl #8
   39124:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   39126:	f3c0 4007 	ubfx	r0, r0, #16, #8
   3912a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   3912e:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
   39132:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   39136:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
   39138:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   3913c:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   3913e:	d1d7      	bne.n	390f0 <lll_chan_sel_2+0xc>
static uint16_t chan_prn_e(uint16_t counter, uint16_t chan_id)
{
	uint16_t prn_e;

	prn_e = chan_prn_s(counter, chan_id);
	prn_e ^= chan_id;
   39140:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   39142:	481f      	ldr	r0, [pc, #124]	; (391c0 <lll_chan_sel_2+0xdc>)
   39144:	fba0 4001 	umull	r4, r0, r0, r1
   39148:	1a0c      	subs	r4, r1, r0
   3914a:	eb00 0054 	add.w	r0, r0, r4, lsr #1
   3914e:	0940      	lsrs	r0, r0, #5
   39150:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
   39154:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   39158:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   3915a:	f3c0 04c4 	ubfx	r4, r0, #3, #5
   3915e:	f000 0507 	and.w	r5, r0, #7
   39162:	5d14      	ldrb	r4, [r2, r4]
   39164:	412c      	asrs	r4, r5
   39166:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
   39168:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   3916a:	d41c      	bmi.n	391a6 <lll_chan_sel_2+0xc2>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   3916c:	fb01 f303 	mul.w	r3, r1, r3
   39170:	1e56      	subs	r6, r2, #1
   39172:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   39176:	3204      	adds	r2, #4
	chan_next = 0U;
   39178:	4660      	mov	r0, ip
		bite = *chan_map;
   3917a:	f100 0508 	add.w	r5, r0, #8
   3917e:	f816 cf01 	ldrb.w	ip, [r6, #1]!
		while (bit_count--) {
   39182:	b2ed      	uxtb	r5, r5
		bite = *chan_map;
   39184:	4601      	mov	r1, r0
			if (bite & 0x01) {
   39186:	f01c 0f01 	tst.w	ip, #1
			chan_next++;
   3918a:	f101 0401 	add.w	r4, r1, #1
			bite >>= 1;
   3918e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
			if (bite & 0x01) {
   39192:	d002      	beq.n	3919a <lll_chan_sel_2+0xb6>
				if (chan_index == 0U) {
   39194:	b143      	cbz	r3, 391a8 <lll_chan_sel_2+0xc4>
				chan_index--;
   39196:	3b01      	subs	r3, #1
   39198:	b2db      	uxtb	r3, r3
			chan_next++;
   3919a:	b2e1      	uxtb	r1, r4
		while (bit_count--) {
   3919c:	42a9      	cmp	r1, r5
   3919e:	d1f2      	bne.n	39186 <lll_chan_sel_2+0xa2>
			chan_next++;
   391a0:	4608      	mov	r0, r1
	while (byte_count--) {
   391a2:	4296      	cmp	r6, r2
   391a4:	d1e9      	bne.n	3917a <lll_chan_sel_2+0x96>
}
   391a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (bit_count < 8) {
   391a8:	3007      	adds	r0, #7
   391aa:	1a40      	subs	r0, r0, r1
   391ac:	b2c0      	uxtb	r0, r0
   391ae:	2807      	cmp	r0, #7
   391b0:	4608      	mov	r0, r1
   391b2:	d8f6      	bhi.n	391a2 <lll_chan_sel_2+0xbe>
}
   391b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   391b6:	bf00      	nop
   391b8:	00022110 	.word	0x00022110
   391bc:	00088440 	.word	0x00088440
   391c0:	bacf914d 	.word	0xbacf914d

000391c4 <rl_update>:
		}
	}
}

static void rl_update(void)
{
   391c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   391c8:	4d18      	ldr	r5, [pc, #96]	; (3922c <rl_update+0x68>)
   391ca:	4e19      	ldr	r6, [pc, #100]	; (39230 <rl_update+0x6c>)
   391cc:	2400      	movs	r4, #0
   391ce:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
}

static void filter_insert(struct lll_filter *const filter, int index,
			  uint8_t addr_type, const uint8_t *const bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   391d2:	1eaf      	subs	r7, r5, #2
   391d4:	f04f 0801 	mov.w	r8, #1
   391d8:	e006      	b.n	391e8 <rl_update+0x24>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   391da:	3401      	adds	r4, #1
   391dc:	2c08      	cmp	r4, #8
   391de:	f105 0506 	add.w	r5, r5, #6
   391e2:	f106 0628 	add.w	r6, r6, #40	; 0x28
   391e6:	d01f      	beq.n	39228 <rl_update+0x64>
		if (rl[i].taken) {
   391e8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   391ec:	f819 3033 	ldrb.w	r3, [r9, r3, lsl #3]
   391f0:	07da      	lsls	r2, r3, #31
   391f2:	d5f2      	bpl.n	391da <rl_update+0x16>
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   391f4:	787a      	ldrb	r2, [r7, #1]
	filter->enable_bitmask |= BIT(index);
   391f6:	f897 c000 	ldrb.w	ip, [r7]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   391fa:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   391fe:	fa08 f104 	lsl.w	r1, r8, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   39202:	40a3      	lsls	r3, r4
	filter->enable_bitmask |= BIT(index);
   39204:	ea4c 0c01 	orr.w	ip, ip, r1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   39208:	4313      	orrs	r3, r2
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3920a:	4631      	mov	r1, r6
   3920c:	4628      	mov	r0, r5
   3920e:	2206      	movs	r2, #6
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   39210:	3401      	adds	r4, #1
	filter->enable_bitmask |= BIT(index);
   39212:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   39216:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   39218:	f00b fc53 	bl	44ac2 <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3921c:	2c08      	cmp	r4, #8
   3921e:	f105 0506 	add.w	r5, r5, #6
   39222:	f106 0628 	add.w	r6, r6, #40	; 0x28
   39226:	d1df      	bne.n	391e8 <rl_update+0x24>
}
   39228:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3922c:	2000277a 	.word	0x2000277a
   39230:	20002865 	.word	0x20002865

00039234 <fal_update>:
{
   39234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   39238:	4e21      	ldr	r6, [pc, #132]	; (392c0 <fal_update+0x8c>)
   3923a:	4d22      	ldr	r5, [pc, #136]	; (392c4 <fal_update+0x90>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   3923c:	f8df 8088 	ldr.w	r8, [pc, #136]	; 392c8 <fal_update+0x94>
   39240:	f8df 9088 	ldr.w	r9, [pc, #136]	; 392cc <fal_update+0x98>
{
   39244:	2400      	movs	r4, #0
   39246:	f1a5 0a02 	sub.w	sl, r5, #2
	filter->enable_bitmask |= BIT(index);
   3924a:	1eb7      	subs	r7, r6, #2
		if (!fal[i].taken) {
   3924c:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   39250:	f04f 0c01 	mov.w	ip, #1
		if (!fal[i].taken) {
   39254:	f013 0f01 	tst.w	r3, #1
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   39258:	4630      	mov	r0, r6
	filter->enable_bitmask |= BIT(index);
   3925a:	fa0c fc04 	lsl.w	ip, ip, r4
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3925e:	4629      	mov	r1, r5
	for (i = 0U; i < FAL_SIZE; i++) {
   39260:	f106 0606 	add.w	r6, r6, #6
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   39264:	f04f 0206 	mov.w	r2, #6
		if (!fal[i].taken) {
   39268:	d023      	beq.n	392b2 <fal_update+0x7e>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   3926a:	f898 e000 	ldrb.w	lr, [r8]
		j = fal[i].rl_idx;
   3926e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   39272:	f1be 0f00 	cmp.w	lr, #0
   39276:	d00a      	beq.n	3928e <fal_update+0x5a>
   39278:	2b07      	cmp	r3, #7
   3927a:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   3927e:	d806      	bhi.n	3928e <fal_update+0x5a>
   39280:	f819 303e 	ldrb.w	r3, [r9, lr, lsl #3]
   39284:	f013 0f04 	tst.w	r3, #4
   39288:	d001      	beq.n	3928e <fal_update+0x5a>
   3928a:	06db      	lsls	r3, r3, #27
   3928c:	d511      	bpl.n	392b2 <fal_update+0x7e>
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   3928e:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   39292:	f897 e000 	ldrb.w	lr, [r7]
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   39296:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->enable_bitmask |= BIT(index);
   3929a:	ea4e 0e0c 	orr.w	lr, lr, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3929e:	f897 c001 	ldrb.w	ip, [r7, #1]
	filter->enable_bitmask |= BIT(index);
   392a2:	f887 e000 	strb.w	lr, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   392a6:	40a3      	lsls	r3, r4
   392a8:	ea4c 0303 	orr.w	r3, ip, r3
   392ac:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   392ae:	f00b fc08 	bl	44ac2 <memcpy>
	for (i = 0U; i < FAL_SIZE; i++) {
   392b2:	3401      	adds	r4, #1
   392b4:	2c08      	cmp	r4, #8
   392b6:	f105 0508 	add.w	r5, r5, #8
   392ba:	d1c7      	bne.n	3924c <fal_update+0x18>
}
   392bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   392c0:	200029e6 	.word	0x200029e6
   392c4:	200029a6 	.word	0x200029a6
   392c8:	20003c14 	.word	0x20003c14
   392cc:	20002864 	.word	0x20002864

000392d0 <ll_fal_size_get>:
}
   392d0:	2008      	movs	r0, #8
   392d2:	4770      	bx	lr

000392d4 <ll_fal_clear>:
{
   392d4:	b538      	push	{r3, r4, r5, lr}
	if (ull_adv_filter_pol_get(0)) {
   392d6:	2000      	movs	r0, #0
   392d8:	f7fb f822 	bl	34320 <ull_adv_filter_pol_get>
   392dc:	b9c8      	cbnz	r0, 39312 <ll_fal_clear+0x3e>
   392de:	4c0e      	ldr	r4, [pc, #56]	; (39318 <ll_fal_clear+0x44>)
			rl[j].fal = 0U;
   392e0:	4d0e      	ldr	r5, [pc, #56]	; (3931c <ll_fal_clear+0x48>)
   392e2:	1e62      	subs	r2, r4, #1
		uint8_t j = fal[i].rl_idx;
   392e4:	f814 3030 	ldrb.w	r3, [r4, r0, lsl #3]
		if (j < ARRAY_SIZE(rl)) {
   392e8:	2b07      	cmp	r3, #7
			rl[j].fal = 0U;
   392ea:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   392ee:	d805      	bhi.n	392fc <ll_fal_clear+0x28>
			rl[j].fal = 0U;
   392f0:	f815 3031 	ldrb.w	r3, [r5, r1, lsl #3]
   392f4:	f36f 1345 	bfc	r3, #5, #1
   392f8:	f805 3031 	strb.w	r3, [r5, r1, lsl #3]
		fal[i].taken = 0U;
   392fc:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   39300:	f36f 0300 	bfc	r3, #0, #1
   39304:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
   39308:	3001      	adds	r0, #1
   3930a:	2808      	cmp	r0, #8
   3930c:	d1ea      	bne.n	392e4 <ll_fal_clear+0x10>
	return 0;
   3930e:	2000      	movs	r0, #0
}
   39310:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   39312:	200c      	movs	r0, #12
}
   39314:	bd38      	pop	{r3, r4, r5, pc}
   39316:	bf00      	nop
   39318:	200029a5 	.word	0x200029a5
   3931c:	20002864 	.word	0x20002864

00039320 <ll_fal_add>:
{
   39320:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39324:	4680      	mov	r8, r0
	if (ull_adv_filter_pol_get(0)) {
   39326:	2000      	movs	r0, #0
   39328:	f7fa fffa 	bl	34320 <ull_adv_filter_pol_get>
   3932c:	2800      	cmp	r0, #0
   3932e:	d167      	bne.n	39400 <ll_fal_add+0xe0>
	if (addr->type == ADDR_TYPE_ANON) {
   39330:	f898 b000 	ldrb.w	fp, [r8]
   39334:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   39338:	4605      	mov	r5, r0
   3933a:	d05f      	beq.n	393fc <ll_fal_add+0xdc>
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   3933c:	4e3b      	ldr	r6, [pc, #236]	; (3942c <ll_fal_add+0x10c>)
   3933e:	f108 0901 	add.w	r9, r8, #1
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   39342:	f00b 0b01 	and.w	fp, fp, #1
		*free_idx = FILTER_IDX_NONE;
   39346:	f04f 0aff 	mov.w	sl, #255	; 0xff
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   3934a:	4604      	mov	r4, r0
   3934c:	1eb7      	subs	r7, r6, #2
   3934e:	e009      	b.n	39364 <ll_fal_add+0x44>
		} else if (free_idx && !fal[i].taken &&
   39350:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   39354:	d101      	bne.n	3935a <ll_fal_add+0x3a>
			*free_idx = i;
   39356:	fa5f fa84 	uxtb.w	sl, r4
	for (i = 0; i < FAL_SIZE; i++) {
   3935a:	3401      	adds	r4, #1
   3935c:	2c08      	cmp	r4, #8
   3935e:	f106 0608 	add.w	r6, r6, #8
   39362:	d016      	beq.n	39392 <ll_fal_add+0x72>
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   39364:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   39368:	07d9      	lsls	r1, r3, #31
   3936a:	f3c3 0240 	ubfx	r2, r3, #1, #1
   3936e:	d5ef      	bpl.n	39350 <ll_fal_add+0x30>
   39370:	455a      	cmp	r2, fp
   39372:	d1f2      	bne.n	3935a <ll_fal_add+0x3a>
   39374:	2206      	movs	r2, #6
   39376:	4630      	mov	r0, r6
   39378:	4649      	mov	r1, r9
   3937a:	f00b fb92 	bl	44aa2 <memcmp>
   3937e:	b3e0      	cbz	r0, 393fa <ll_fal_add+0xda>
		} else if (free_idx && !fal[i].taken &&
   39380:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   39384:	07da      	lsls	r2, r3, #31
   39386:	d5e3      	bpl.n	39350 <ll_fal_add+0x30>
	for (i = 0; i < FAL_SIZE; i++) {
   39388:	3401      	adds	r4, #1
   3938a:	2c08      	cmp	r4, #8
   3938c:	f106 0608 	add.w	r6, r6, #8
   39390:	d1e8      	bne.n	39364 <ll_fal_add+0x44>
	} else if (j >= ARRAY_SIZE(fal)) {
   39392:	f1ba 0f07 	cmp.w	sl, #7
   39396:	d836      	bhi.n	39406 <ll_fal_add+0xe6>
	fal[i].id_addr_type = id_addr->type & 0x1;
   39398:	f898 2000 	ldrb.w	r2, [r8]
   3939c:	f817 303a 	ldrb.w	r3, [r7, sl, lsl #3]
   393a0:	f362 0341 	bfi	r3, r2, #1, #1
   393a4:	f807 303a 	strb.w	r3, [r7, sl, lsl #3]
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
   393a8:	2302      	movs	r3, #2
   393aa:	fb14 340a 	smlabb	r4, r4, sl, r3
	memcpy(dst, src, sizeof(*dst));
   393ae:	1938      	adds	r0, r7, r4
   393b0:	2206      	movs	r2, #6
   393b2:	4649      	mov	r1, r9
   393b4:	f00b fb85 	bl	44ac2 <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   393b8:	4c1d      	ldr	r4, [pc, #116]	; (39430 <ll_fal_add+0x110>)
   393ba:	f898 b000 	ldrb.w	fp, [r8]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   393be:	1e66      	subs	r6, r4, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   393c0:	f00b 0b01 	and.w	fp, fp, #1
   393c4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   393c8:	ea4f 08c3 	mov.w	r8, r3, lsl #3
   393cc:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   393d0:	f3c3 1280 	ubfx	r2, r3, #6, #1
   393d4:	07db      	lsls	r3, r3, #31
   393d6:	d501      	bpl.n	393dc <ll_fal_add+0xbc>
   393d8:	455a      	cmp	r2, fp
   393da:	d017      	beq.n	3940c <ll_fal_add+0xec>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   393dc:	3501      	adds	r5, #1
   393de:	2d08      	cmp	r5, #8
   393e0:	f104 0428 	add.w	r4, r4, #40	; 0x28
   393e4:	d1ee      	bne.n	393c4 <ll_fal_add+0xa4>
		fal[i].rl_idx = FILTER_IDX_NONE;
   393e6:	25ff      	movs	r5, #255	; 0xff
	fal[i].taken = 1U;
   393e8:	f817 303a 	ldrb.w	r3, [r7, sl, lsl #3]
   393ec:	eb07 02ca 	add.w	r2, r7, sl, lsl #3
   393f0:	f043 0301 	orr.w	r3, r3, #1
   393f4:	f807 303a 	strb.w	r3, [r7, sl, lsl #3]
   393f8:	7055      	strb	r5, [r2, #1]
		fal[i].rl_idx = FILTER_IDX_NONE;
   393fa:	2000      	movs	r0, #0
}
   393fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   39400:	200c      	movs	r0, #12
}
   39402:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39406:	2007      	movs	r0, #7
   39408:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3940c:	4620      	mov	r0, r4
   3940e:	2206      	movs	r2, #6
   39410:	4649      	mov	r1, r9
   39412:	f00b fb46 	bl	44aa2 <memcmp>
   39416:	2800      	cmp	r0, #0
   39418:	d1e0      	bne.n	393dc <ll_fal_add+0xbc>
		rl[j].fal = 1U;
   3941a:	f816 3008 	ldrb.w	r3, [r6, r8]
   3941e:	f043 0320 	orr.w	r3, r3, #32
   39422:	f806 3008 	strb.w	r3, [r6, r8]
   39426:	b2ed      	uxtb	r5, r5
   39428:	e7de      	b.n	393e8 <ll_fal_add+0xc8>
   3942a:	bf00      	nop
   3942c:	200029a6 	.word	0x200029a6
   39430:	20002865 	.word	0x20002865

00039434 <ll_fal_remove>:
{
   39434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39438:	4607      	mov	r7, r0
	if (ull_adv_filter_pol_get(0)) {
   3943a:	2000      	movs	r0, #0
   3943c:	f7fa ff70 	bl	34320 <ull_adv_filter_pol_get>
   39440:	bbb8      	cbnz	r0, 394b2 <ll_fal_remove+0x7e>
	if (addr->type == ADDR_TYPE_ANON) {
   39442:	783e      	ldrb	r6, [r7, #0]
   39444:	2eff      	cmp	r6, #255	; 0xff
   39446:	4604      	mov	r4, r0
   39448:	d013      	beq.n	39472 <ll_fal_remove+0x3e>
	uint8_t i = fal_find(id_addr->type, id_addr->a.val, NULL);
   3944a:	4d1b      	ldr	r5, [pc, #108]	; (394b8 <ll_fal_remove+0x84>)
   3944c:	3701      	adds	r7, #1
	for (i = 0; i < FAL_SIZE; i++) {
   3944e:	f1a5 0802 	sub.w	r8, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   39452:	f006 0601 	and.w	r6, r6, #1
   39456:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   3945a:	f3c3 0240 	ubfx	r2, r3, #1, #1
   3945e:	07db      	lsls	r3, r3, #31
   39460:	d501      	bpl.n	39466 <ll_fal_remove+0x32>
   39462:	42b2      	cmp	r2, r6
   39464:	d007      	beq.n	39476 <ll_fal_remove+0x42>
	for (i = 0; i < FAL_SIZE; i++) {
   39466:	3401      	adds	r4, #1
   39468:	2c08      	cmp	r4, #8
   3946a:	f105 0508 	add.w	r5, r5, #8
   3946e:	d1f2      	bne.n	39456 <ll_fal_remove+0x22>
   39470:	2002      	movs	r0, #2
}
   39472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   39476:	2206      	movs	r2, #6
   39478:	4628      	mov	r0, r5
   3947a:	4639      	mov	r1, r7
   3947c:	f00b fb11 	bl	44aa2 <memcmp>
   39480:	2800      	cmp	r0, #0
   39482:	d1f0      	bne.n	39466 <ll_fal_remove+0x32>
		uint8_t j = fal[i].rl_idx;
   39484:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   39488:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   3948a:	2b07      	cmp	r3, #7
   3948c:	d808      	bhi.n	394a0 <ll_fal_remove+0x6c>
			rl[j].fal = 0U;
   3948e:	4a0b      	ldr	r2, [pc, #44]	; (394bc <ll_fal_remove+0x88>)
   39490:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   39494:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   39498:	f360 1145 	bfi	r1, r0, #5, #1
   3949c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		fal[i].taken = 0U;
   394a0:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   394a4:	f36f 0300 	bfc	r3, #0, #1
   394a8:	f808 3034 	strb.w	r3, [r8, r4, lsl #3]
		return 0;
   394ac:	2000      	movs	r0, #0
}
   394ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   394b2:	200c      	movs	r0, #12
}
   394b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   394b8:	200029a6 	.word	0x200029a6
   394bc:	20002864 	.word	0x20002864

000394c0 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   394c0:	2807      	cmp	r0, #7
{
   394c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   394c6:	4604      	mov	r4, r0
   394c8:	460e      	mov	r6, r1
   394ca:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   394cc:	d817      	bhi.n	394fe <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   394ce:	4d1a      	ldr	r5, [pc, #104]	; (39538 <ll_rl_id_addr_get+0x78>)
   394d0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   394d4:	00a7      	lsls	r7, r4, #2
   394d6:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   394da:	07db      	lsls	r3, r3, #31
   394dc:	d51d      	bpl.n	3951a <ll_rl_id_addr_get+0x5a>
	*id_addr_type = rl[rl_idx].id_addr_type;
   394de:	4427      	add	r7, r4
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   394e0:	4640      	mov	r0, r8
	*id_addr_type = rl[rl_idx].id_addr_type;
   394e2:	f815 3037 	ldrb.w	r3, [r5, r7, lsl #3]
   394e6:	f3c3 1380 	ubfx	r3, r3, #6, #1
   394ea:	7033      	strb	r3, [r6, #0]
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   394ec:	2328      	movs	r3, #40	; 0x28
   394ee:	fb03 5104 	mla	r1, r3, r4, r5
   394f2:	2206      	movs	r2, #6
}
   394f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   394f8:	3101      	adds	r1, #1
   394fa:	f00b bae2 	b.w	44ac2 <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   394fe:	4a0f      	ldr	r2, [pc, #60]	; (3953c <ll_rl_id_addr_get+0x7c>)
   39500:	490f      	ldr	r1, [pc, #60]	; (39540 <ll_rl_id_addr_get+0x80>)
   39502:	4810      	ldr	r0, [pc, #64]	; (39544 <ll_rl_id_addr_get+0x84>)
   39504:	f44f 7389 	mov.w	r3, #274	; 0x112
   39508:	f009 f9dc 	bl	428c4 <printk>
   3950c:	4040      	eors	r0, r0
   3950e:	f380 8811 	msr	BASEPRI, r0
   39512:	f04f 0003 	mov.w	r0, #3
   39516:	df02      	svc	2
   39518:	e7d9      	b.n	394ce <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   3951a:	4a08      	ldr	r2, [pc, #32]	; (3953c <ll_rl_id_addr_get+0x7c>)
   3951c:	490a      	ldr	r1, [pc, #40]	; (39548 <ll_rl_id_addr_get+0x88>)
   3951e:	4809      	ldr	r0, [pc, #36]	; (39544 <ll_rl_id_addr_get+0x84>)
   39520:	f240 1313 	movw	r3, #275	; 0x113
   39524:	f009 f9ce 	bl	428c4 <printk>
   39528:	4040      	eors	r0, r0
   3952a:	f380 8811 	msr	BASEPRI, r0
   3952e:	f04f 0003 	mov.w	r0, #3
   39532:	df02      	svc	2
   39534:	e7d3      	b.n	394de <ll_rl_id_addr_get+0x1e>
   39536:	bf00      	nop
   39538:	20002864 	.word	0x20002864
   3953c:	0004a38c 	.word	0x0004a38c
   39540:	0004a3d0 	.word	0x0004a3d0
   39544:	00049c68 	.word	0x00049c68
   39548:	0004a3dc 	.word	0x0004a3dc

0003954c <ll_rl_size_get>:
uint8_t ll_rl_size_get(void)
   3954c:	2008      	movs	r0, #8
   3954e:	4770      	bx	lr

00039550 <ll_rl_clear>:
{
   39550:	b510      	push	{r4, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   39552:	2000      	movs	r0, #0
   39554:	f7fa fed8 	bl	34308 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   39558:	bb88      	cbnz	r0, 395be <ll_rl_clear+0x6e>
		rl[i].taken = 0U;
   3955a:	4b1a      	ldr	r3, [pc, #104]	; (395c4 <ll_rl_clear+0x74>)
	peer_irk_count = 0U;
   3955c:	4c1a      	ldr	r4, [pc, #104]	; (395c8 <ll_rl_clear+0x78>)
		rl[i].taken = 0U;
   3955e:	7819      	ldrb	r1, [r3, #0]
   39560:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
	peer_irk_count = 0U;
   39564:	7020      	strb	r0, [r4, #0]
		rl[i].taken = 0U;
   39566:	f360 0100 	bfi	r1, r0, #0, #1
   3956a:	f360 0200 	bfi	r2, r0, #0, #1
   3956e:	7019      	strb	r1, [r3, #0]
   39570:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   39574:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
   39578:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   3957c:	f360 0100 	bfi	r1, r0, #0, #1
   39580:	f360 0200 	bfi	r2, r0, #0, #1
   39584:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
   39588:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   3958c:	f893 10a0 	ldrb.w	r1, [r3, #160]	; 0xa0
   39590:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   39594:	f360 0100 	bfi	r1, r0, #0, #1
   39598:	f360 0200 	bfi	r2, r0, #0, #1
   3959c:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
   395a0:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
   395a4:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   395a8:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   395ac:	f360 0100 	bfi	r1, r0, #0, #1
   395b0:	f360 0200 	bfi	r2, r0, #0, #1
   395b4:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   395b8:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   395bc:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   395be:	200c      	movs	r0, #12
}
   395c0:	bd10      	pop	{r4, pc}
   395c2:	bf00      	nop
   395c4:	20002864 	.word	0x20002864
   395c8:	20003c13 	.word	0x20003c13

000395cc <ll_rl_remove>:
{
   395cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   395d0:	b083      	sub	sp, #12
   395d2:	4603      	mov	r3, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   395d4:	2000      	movs	r0, #0
{
   395d6:	461d      	mov	r5, r3
   395d8:	9300      	str	r3, [sp, #0]
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   395da:	f7fa fe95 	bl	34308 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   395de:	2800      	cmp	r0, #0
   395e0:	d150      	bne.n	39684 <ll_rl_remove+0xb8>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   395e2:	462b      	mov	r3, r5
   395e4:	f8df 8140 	ldr.w	r8, [pc, #320]	; 39728 <ll_rl_remove+0x15c>
   395e8:	f813 bb01 	ldrb.w	fp, [r3], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   395ec:	4604      	mov	r4, r0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   395ee:	f00b 0b01 	and.w	fp, fp, #1
   395f2:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
   395f6:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   395fa:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   395fe:	f816 2035 	ldrb.w	r2, [r6, r5, lsl #3]
   39602:	07d0      	lsls	r0, r2, #31
   39604:	ea4f 0984 	mov.w	r9, r4, lsl #2
   39608:	f3c2 1180 	ubfx	r1, r2, #6, #1
   3960c:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   39610:	d501      	bpl.n	39616 <ll_rl_remove+0x4a>
   39612:	4559      	cmp	r1, fp
   39614:	d008      	beq.n	39628 <ll_rl_remove+0x5c>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   39616:	3401      	adds	r4, #1
   39618:	2c08      	cmp	r4, #8
   3961a:	f108 0828 	add.w	r8, r8, #40	; 0x28
   3961e:	d1ea      	bne.n	395f6 <ll_rl_remove+0x2a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   39620:	2002      	movs	r0, #2
}
   39622:	b003      	add	sp, #12
   39624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   39628:	4619      	mov	r1, r3
   3962a:	4640      	mov	r0, r8
   3962c:	2206      	movs	r2, #6
   3962e:	9301      	str	r3, [sp, #4]
   39630:	f00b fa37 	bl	44aa2 <memcmp>
   39634:	9b01      	ldr	r3, [sp, #4]
   39636:	4607      	mov	r7, r0
   39638:	2800      	cmp	r0, #0
   3963a:	d1ec      	bne.n	39616 <ll_rl_remove+0x4a>
		if (rl[i].pirk) {
   3963c:	f816 200a 	ldrb.w	r2, [r6, sl]
   39640:	0752      	lsls	r2, r2, #29
   39642:	d432      	bmi.n	396aa <ll_rl_remove+0xde>
		j = fal_find(id_addr->type, id_addr->a.val, NULL);
   39644:	9a00      	ldr	r2, [sp, #0]
   39646:	4d39      	ldr	r5, [pc, #228]	; (3972c <ll_rl_remove+0x160>)
   39648:	f892 a000 	ldrb.w	sl, [r2]
	for (i = 0; i < FAL_SIZE; i++) {
   3964c:	f1a5 0802 	sub.w	r8, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   39650:	f00a 0a01 	and.w	sl, sl, #1
   39654:	f818 2037 	ldrb.w	r2, [r8, r7, lsl #3]
   39658:	f3c2 0140 	ubfx	r1, r2, #1, #1
   3965c:	07d2      	lsls	r2, r2, #31
   3965e:	d501      	bpl.n	39664 <ll_rl_remove+0x98>
   39660:	4551      	cmp	r1, sl
   39662:	d013      	beq.n	3968c <ll_rl_remove+0xc0>
	for (i = 0; i < FAL_SIZE; i++) {
   39664:	3701      	adds	r7, #1
   39666:	2f08      	cmp	r7, #8
   39668:	f105 0508 	add.w	r5, r5, #8
   3966c:	d1f2      	bne.n	39654 <ll_rl_remove+0x88>
		rl[i].taken = 0U;
   3966e:	44a1      	add	r9, r4
		return 0;
   39670:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   39672:	f816 3039 	ldrb.w	r3, [r6, r9, lsl #3]
   39676:	f36f 0300 	bfc	r3, #0, #1
   3967a:	f806 3039 	strb.w	r3, [r6, r9, lsl #3]
}
   3967e:	b003      	add	sp, #12
   39680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   39684:	200c      	movs	r0, #12
}
   39686:	b003      	add	sp, #12
   39688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3968c:	4619      	mov	r1, r3
   3968e:	2206      	movs	r2, #6
   39690:	4628      	mov	r0, r5
   39692:	9300      	str	r3, [sp, #0]
   39694:	f00b fa05 	bl	44aa2 <memcmp>
   39698:	9b00      	ldr	r3, [sp, #0]
   3969a:	2800      	cmp	r0, #0
   3969c:	d1e2      	bne.n	39664 <ll_rl_remove+0x98>
			fal[j].rl_idx = FILTER_IDX_NONE;
   3969e:	eb08 08c7 	add.w	r8, r8, r7, lsl #3
   396a2:	23ff      	movs	r3, #255	; 0xff
   396a4:	f888 3001 	strb.w	r3, [r8, #1]
   396a8:	e7e1      	b.n	3966e <ll_rl_remove+0xa2>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   396aa:	f8df a084 	ldr.w	sl, [pc, #132]	; 39730 <ll_rl_remove+0x164>
   396ae:	f89a 8000 	ldrb.w	r8, [sl]
   396b2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			if (pj && pi != pj) {
   396b6:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
   396ba:	d002      	beq.n	396c2 <ll_rl_remove+0xf6>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   396bc:	7ded      	ldrb	r5, [r5, #23]
			if (pj && pi != pj) {
   396be:	4545      	cmp	r5, r8
   396c0:	d102      	bne.n	396c8 <ll_rl_remove+0xfc>
			peer_irk_count--;
   396c2:	f88a 8000 	strb.w	r8, [sl]
   396c6:	e7bd      	b.n	39644 <ll_rl_remove+0x78>
				(void)memcpy(peer_irks[pi], peer_irks[pj],
   396c8:	481a      	ldr	r0, [pc, #104]	; (39734 <ll_rl_remove+0x168>)
   396ca:	2210      	movs	r2, #16
   396cc:	eb00 1108 	add.w	r1, r0, r8, lsl #4
   396d0:	eb00 1005 	add.w	r0, r0, r5, lsl #4
   396d4:	f00b f9f5 	bl	44ac2 <memcpy>
				     k < CONFIG_BT_CTLR_RL_SIZE;
   396d8:	4817      	ldr	r0, [pc, #92]	; (39738 <ll_rl_remove+0x16c>)
				(void)memcpy(peer_irks[pi], peer_irks[pj],
   396da:	9b01      	ldr	r3, [sp, #4]
   396dc:	463a      	mov	r2, r7
					if (rl[k].taken && rl[k].pirk &&
   396de:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   396e2:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
   396e6:	f816 1031 	ldrb.w	r1, [r6, r1, lsl #3]
   396ea:	f011 0f01 	tst.w	r1, #1
   396ee:	d004      	beq.n	396fa <ll_rl_remove+0x12e>
   396f0:	0749      	lsls	r1, r1, #29
   396f2:	d502      	bpl.n	396fa <ll_rl_remove+0x12e>
   396f4:	7dc1      	ldrb	r1, [r0, #23]
   396f6:	4541      	cmp	r1, r8
   396f8:	d00b      	beq.n	39712 <ll_rl_remove+0x146>
				     k < CONFIG_BT_CTLR_RL_SIZE;
   396fa:	3201      	adds	r2, #1
   396fc:	2a08      	cmp	r2, #8
   396fe:	f100 0028 	add.w	r0, r0, #40	; 0x28
   39702:	d1ec      	bne.n	396de <ll_rl_remove+0x112>
			peer_irk_count--;
   39704:	f89a 8000 	ldrb.w	r8, [sl]
   39708:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   3970c:	fa5f f888 	uxtb.w	r8, r8
   39710:	e7d7      	b.n	396c2 <ll_rl_remove+0xf6>
   39712:	f89a 8000 	ldrb.w	r8, [sl]
						peer_irk_rl_ids[pi] = k;
   39716:	4909      	ldr	r1, [pc, #36]	; (3973c <ll_rl_remove+0x170>)
						rl[k].pirk_idx = pi;
   39718:	f88c 5017 	strb.w	r5, [ip, #23]
			peer_irk_count--;
   3971c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
						peer_irk_rl_ids[pi] = k;
   39720:	554a      	strb	r2, [r1, r5]
			peer_irk_count--;
   39722:	fa5f f888 	uxtb.w	r8, r8
						break;
   39726:	e7cc      	b.n	396c2 <ll_rl_remove+0xf6>
   39728:	20002865 	.word	0x20002865
   3972c:	200029a6 	.word	0x200029a6
   39730:	20003c13 	.word	0x20003c13
   39734:	200027e4 	.word	0x200027e4
   39738:	20002864 	.word	0x20002864
   3973c:	200027dc 	.word	0x200027dc

00039740 <ll_rl_crpa_set>:
{
   39740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   39744:	795c      	ldrb	r4, [r3, #5]
   39746:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   3974a:	2c40      	cmp	r4, #64	; 0x40
   3974c:	d001      	beq.n	39752 <ll_rl_crpa_set+0x12>
}
   3974e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (id_addr) {
   39752:	461d      	mov	r5, r3
   39754:	460f      	mov	r7, r1
   39756:	b1f1      	cbz	r1, 39796 <ll_rl_crpa_set+0x56>
   39758:	f8df 8060 	ldr.w	r8, [pc, #96]	; 397bc <ll_rl_crpa_set+0x7c>
   3975c:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3975e:	f000 0601 	and.w	r6, r0, #1
   39762:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
   39766:	e004      	b.n	39772 <ll_rl_crpa_set+0x32>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   39768:	3401      	adds	r4, #1
   3976a:	2c08      	cmp	r4, #8
   3976c:	f108 0828 	add.w	r8, r8, #40	; 0x28
   39770:	d0ed      	beq.n	3974e <ll_rl_crpa_set+0xe>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   39772:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   39776:	f819 2033 	ldrb.w	r2, [r9, r3, lsl #3]
   3977a:	f3c2 1380 	ubfx	r3, r2, #6, #1
   3977e:	07d2      	lsls	r2, r2, #31
   39780:	d5f2      	bpl.n	39768 <ll_rl_crpa_set+0x28>
   39782:	42b3      	cmp	r3, r6
   39784:	d1f0      	bne.n	39768 <ll_rl_crpa_set+0x28>
   39786:	2206      	movs	r2, #6
   39788:	4640      	mov	r0, r8
   3978a:	4639      	mov	r1, r7
   3978c:	f00b f989 	bl	44aa2 <memcmp>
   39790:	2800      	cmp	r0, #0
   39792:	d1e9      	bne.n	39768 <ll_rl_crpa_set+0x28>
   39794:	b2e2      	uxtb	r2, r4
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   39796:	2a07      	cmp	r2, #7
   39798:	d8d9      	bhi.n	3974e <ll_rl_crpa_set+0xe>
   3979a:	4809      	ldr	r0, [pc, #36]	; (397c0 <ll_rl_crpa_set+0x80>)
   3979c:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   397a0:	f810 3033 	ldrb.w	r3, [r0, r3, lsl #3]
   397a4:	07db      	lsls	r3, r3, #31
   397a6:	d5d2      	bpl.n	3974e <ll_rl_crpa_set+0xe>
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
   397a8:	2328      	movs	r3, #40	; 0x28
   397aa:	fb03 0002 	mla	r0, r3, r2, r0
   397ae:	4629      	mov	r1, r5
   397b0:	2206      	movs	r2, #6
}
   397b2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
   397b6:	3018      	adds	r0, #24
   397b8:	f00b b983 	b.w	44ac2 <memcpy>
   397bc:	20002865 	.word	0x20002865
   397c0:	20002864 	.word	0x20002864

000397c4 <ll_rl_crpa_get>:
{
   397c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   397c8:	4682      	mov	sl, r0
   397ca:	4e1a      	ldr	r6, [pc, #104]	; (39834 <ll_rl_crpa_get+0x70>)
   397cc:	f81a 8b01 	ldrb.w	r8, [sl], #1
{
   397d0:	4689      	mov	r9, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   397d2:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   397d4:	f008 0801 	and.w	r8, r8, #1
   397d8:	1e77      	subs	r7, r6, #1
   397da:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   397de:	00d5      	lsls	r5, r2, #3
   397e0:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   397e4:	f3c3 1280 	ubfx	r2, r3, #6, #1
   397e8:	07db      	lsls	r3, r3, #31
   397ea:	f104 0401 	add.w	r4, r4, #1
   397ee:	d501      	bpl.n	397f4 <ll_rl_crpa_get+0x30>
   397f0:	4542      	cmp	r2, r8
   397f2:	d006      	beq.n	39802 <ll_rl_crpa_get+0x3e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   397f4:	2c08      	cmp	r4, #8
   397f6:	f106 0628 	add.w	r6, r6, #40	; 0x28
   397fa:	d1ee      	bne.n	397da <ll_rl_crpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   397fc:	2002      	movs	r0, #2
}
   397fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   39802:	4630      	mov	r0, r6
   39804:	2206      	movs	r2, #6
   39806:	4651      	mov	r1, sl
   39808:	f00b f94b 	bl	44aa2 <memcmp>
   3980c:	4683      	mov	fp, r0
   3980e:	2800      	cmp	r0, #0
   39810:	d1f0      	bne.n	397f4 <ll_rl_crpa_get+0x30>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   39812:	f105 0218 	add.w	r2, r5, #24
   39816:	4417      	add	r7, r2
   39818:	2106      	movs	r1, #6
   3981a:	4638      	mov	r0, r7
   3981c:	f7f6 f928 	bl	2fa70 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   39820:	2800      	cmp	r0, #0
   39822:	d0eb      	beq.n	397fc <ll_rl_crpa_get+0x38>
   39824:	2206      	movs	r2, #6
   39826:	4639      	mov	r1, r7
   39828:	4648      	mov	r0, r9
   3982a:	f00b f94a 	bl	44ac2 <memcpy>
		return 0;
   3982e:	4658      	mov	r0, fp
}
   39830:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39834:	20002865 	.word	0x20002865

00039838 <ll_rl_lrpa_get>:
{
   39838:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   3983c:	4682      	mov	sl, r0
   3983e:	4e16      	ldr	r6, [pc, #88]	; (39898 <ll_rl_lrpa_get+0x60>)
   39840:	f81a 8b01 	ldrb.w	r8, [sl], #1
{
   39844:	4689      	mov	r9, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   39846:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   39848:	f008 0801 	and.w	r8, r8, #1
   3984c:	1e77      	subs	r7, r6, #1
   3984e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   39852:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   39856:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   3985a:	f3c3 1280 	ubfx	r2, r3, #6, #1
   3985e:	07db      	lsls	r3, r3, #31
   39860:	f104 0401 	add.w	r4, r4, #1
   39864:	d501      	bpl.n	3986a <ll_rl_lrpa_get+0x32>
   39866:	4542      	cmp	r2, r8
   39868:	d006      	beq.n	39878 <ll_rl_lrpa_get+0x40>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3986a:	2c08      	cmp	r4, #8
   3986c:	f106 0628 	add.w	r6, r6, #40	; 0x28
   39870:	d1ed      	bne.n	3984e <ll_rl_lrpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   39872:	2002      	movs	r0, #2
}
   39874:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   39878:	4630      	mov	r0, r6
   3987a:	2206      	movs	r2, #6
   3987c:	4651      	mov	r1, sl
   3987e:	f00b f910 	bl	44aa2 <memcmp>
   39882:	4683      	mov	fp, r0
   39884:	2800      	cmp	r0, #0
   39886:	d1f0      	bne.n	3986a <ll_rl_lrpa_get+0x32>
   39888:	6a69      	ldr	r1, [r5, #36]	; 0x24
   3988a:	2206      	movs	r2, #6
   3988c:	4648      	mov	r0, r9
   3988e:	f00b f918 	bl	44ac2 <memcpy>
		return 0;
   39892:	4658      	mov	r0, fp
}
   39894:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39898:	20002865 	.word	0x20002865

0003989c <ll_rl_enable>:
{
   3989c:	b510      	push	{r4, lr}
   3989e:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   398a0:	2000      	movs	r0, #0
   398a2:	f7fa fd31 	bl	34308 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   398a6:	b940      	cbnz	r0, 398ba <ll_rl_enable+0x1e>
	switch (enable) {
   398a8:	b11c      	cbz	r4, 398b2 <ll_rl_enable+0x16>
   398aa:	2c01      	cmp	r4, #1
   398ac:	d001      	beq.n	398b2 <ll_rl_enable+0x16>
   398ae:	2012      	movs	r0, #18
}
   398b0:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   398b2:	4b03      	ldr	r3, [pc, #12]	; (398c0 <ll_rl_enable+0x24>)
   398b4:	701c      	strb	r4, [r3, #0]
	return 0;
   398b6:	2000      	movs	r0, #0
}
   398b8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   398ba:	200c      	movs	r0, #12
}
   398bc:	bd10      	pop	{r4, pc}
   398be:	bf00      	nop
   398c0:	20003c14 	.word	0x20003c14

000398c4 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   398c4:	4b03      	ldr	r3, [pc, #12]	; (398d4 <ll_rl_timeout_set+0x10>)
   398c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   398ca:	fb02 f000 	mul.w	r0, r2, r0
   398ce:	6018      	str	r0, [r3, #0]
}
   398d0:	4770      	bx	lr
   398d2:	bf00      	nop
   398d4:	20002774 	.word	0x20002774

000398d8 <ll_priv_mode_set>:
{
   398d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   398dc:	4682      	mov	sl, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   398de:	2000      	movs	r0, #0
{
   398e0:	4688      	mov	r8, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   398e2:	f7fa fd11 	bl	34308 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   398e6:	bb70      	cbnz	r0, 39946 <ll_priv_mode_set+0x6e>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   398e8:	4e1d      	ldr	r6, [pc, #116]	; (39960 <ll_priv_mode_set+0x88>)
   398ea:	f81a 9b01 	ldrb.w	r9, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   398ee:	4604      	mov	r4, r0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   398f0:	f009 0901 	and.w	r9, r9, #1
   398f4:	1e77      	subs	r7, r6, #1
   398f6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   398fa:	00d5      	lsls	r5, r2, #3
   398fc:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   39900:	f3c3 1280 	ubfx	r2, r3, #6, #1
   39904:	07db      	lsls	r3, r3, #31
   39906:	f104 0401 	add.w	r4, r4, #1
   3990a:	d501      	bpl.n	39910 <ll_priv_mode_set+0x38>
   3990c:	454a      	cmp	r2, r9
   3990e:	d006      	beq.n	3991e <ll_priv_mode_set+0x46>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   39910:	2c08      	cmp	r4, #8
   39912:	f106 0628 	add.w	r6, r6, #40	; 0x28
   39916:	d1ee      	bne.n	398f6 <ll_priv_mode_set+0x1e>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   39918:	2002      	movs	r0, #2
}
   3991a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3991e:	4630      	mov	r0, r6
   39920:	2206      	movs	r2, #6
   39922:	4651      	mov	r1, sl
   39924:	f00b f8bd 	bl	44aa2 <memcmp>
   39928:	2800      	cmp	r0, #0
   3992a:	d1f1      	bne.n	39910 <ll_priv_mode_set+0x38>
		switch (mode) {
   3992c:	f1b8 0f00 	cmp.w	r8, #0
   39930:	d00f      	beq.n	39952 <ll_priv_mode_set+0x7a>
   39932:	f1b8 0f01 	cmp.w	r8, #1
   39936:	d109      	bne.n	3994c <ll_priv_mode_set+0x74>
			rl[i].dev = 1U;
   39938:	5d7b      	ldrb	r3, [r7, r5]
   3993a:	f043 0310 	orr.w	r3, r3, #16
   3993e:	557b      	strb	r3, [r7, r5]
	return 0;
   39940:	2000      	movs	r0, #0
}
   39942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   39946:	200c      	movs	r0, #12
}
   39948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch (mode) {
   3994c:	2012      	movs	r0, #18
}
   3994e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rl[i].dev = 0U;
   39952:	5d7b      	ldrb	r3, [r7, r5]
   39954:	f368 1304 	bfi	r3, r8, #4, #1
   39958:	557b      	strb	r3, [r7, r5]
	return 0;
   3995a:	2000      	movs	r0, #0
   3995c:	e7f1      	b.n	39942 <ll_priv_mode_set+0x6a>
   3995e:	bf00      	nop
   39960:	20002865 	.word	0x20002865

00039964 <ull_filter_reset>:
{
   39964:	b5d0      	push	{r4, r6, r7, lr}
   39966:	4c31      	ldr	r4, [pc, #196]	; (39a2c <ull_filter_reset+0xc8>)
   39968:	4931      	ldr	r1, [pc, #196]	; (39a30 <ull_filter_reset+0xcc>)
	for (int i = 0; i < FAL_SIZE; i++) {
   3996a:	2300      	movs	r3, #0
   3996c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		uint8_t j = fal[i].rl_idx;
   39970:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
		if (j < ARRAY_SIZE(rl)) {
   39974:	2a07      	cmp	r2, #7
			rl[j].fal = 0U;
   39976:	eb02 0e82 	add.w	lr, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   3997a:	d805      	bhi.n	39988 <ull_filter_reset+0x24>
			rl[j].fal = 0U;
   3997c:	f811 203e 	ldrb.w	r2, [r1, lr, lsl #3]
   39980:	f36f 1245 	bfc	r2, #5, #1
   39984:	f801 203e 	strb.w	r2, [r1, lr, lsl #3]
		fal[i].taken = 0U;
   39988:	f81c 2033 	ldrb.w	r2, [ip, r3, lsl #3]
   3998c:	f36f 0200 	bfc	r2, #0, #1
   39990:	f80c 2033 	strb.w	r2, [ip, r3, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
   39994:	3301      	adds	r3, #1
   39996:	2b08      	cmp	r3, #8
   39998:	d1ea      	bne.n	39970 <ull_filter_reset+0xc>
	rl_enable = 0U;
   3999a:	4a26      	ldr	r2, [pc, #152]	; (39a34 <ull_filter_reset+0xd0>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   3999c:	4c26      	ldr	r4, [pc, #152]	; (39a38 <ull_filter_reset+0xd4>)
	rl_enable = 0U;
   3999e:	2300      	movs	r3, #0
   399a0:	7013      	strb	r3, [r2, #0]
		rl[i].taken = 0U;
   399a2:	780a      	ldrb	r2, [r1, #0]
   399a4:	f363 0200 	bfi	r2, r3, #0, #1
   399a8:	700a      	strb	r2, [r1, #0]
   399aa:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
   399ae:	f363 0200 	bfi	r2, r3, #0, #1
   399b2:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
   399b6:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
   399ba:	f363 0200 	bfi	r2, r3, #0, #1
   399be:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
   399c2:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   399c6:	f363 0200 	bfi	r2, r3, #0, #1
   399ca:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   399ce:	f891 20a0 	ldrb.w	r2, [r1, #160]	; 0xa0
   399d2:	f363 0200 	bfi	r2, r3, #0, #1
   399d6:	f881 20a0 	strb.w	r2, [r1, #160]	; 0xa0
   399da:	f891 20c8 	ldrb.w	r2, [r1, #200]	; 0xc8
   399de:	f363 0200 	bfi	r2, r3, #0, #1
   399e2:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
   399e6:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
   399ea:	f363 0200 	bfi	r2, r3, #0, #1
   399ee:	f881 20f0 	strb.w	r2, [r1, #240]	; 0xf0
   399f2:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
   399f6:	f363 0200 	bfi	r2, r3, #0, #1
   399fa:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   399fe:	4a0f      	ldr	r2, [pc, #60]	; (39a3c <ull_filter_reset+0xd8>)
   39a00:	7013      	strb	r3, [r2, #0]
	rpa_last_ms = -1;
   39a02:	4b0f      	ldr	r3, [pc, #60]	; (39a40 <ull_filter_reset+0xdc>)
   39a04:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   39a08:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   39a0c:	e9c3 6700 	strd	r6, r7, [r3]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   39a10:	4b0c      	ldr	r3, [pc, #48]	; (39a44 <ull_filter_reset+0xe0>)
   39a12:	6023      	str	r3, [r4, #0]
	if (init) {
   39a14:	b128      	cbz	r0, 39a22 <ull_filter_reset+0xbe>
}
   39a16:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
		k_work_init_delayable(&rpa_work, rpa_timeout);
   39a1a:	490b      	ldr	r1, [pc, #44]	; (39a48 <ull_filter_reset+0xe4>)
   39a1c:	480b      	ldr	r0, [pc, #44]	; (39a4c <ull_filter_reset+0xe8>)
   39a1e:	f00e bf3c 	b.w	4889a <k_work_init_delayable>
}
   39a22:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
		k_work_cancel_delayable(&rpa_work);
   39a26:	4809      	ldr	r0, [pc, #36]	; (39a4c <ull_filter_reset+0xe8>)
   39a28:	f00e bf43 	b.w	488b2 <k_work_cancel_delayable>
   39a2c:	200029a5 	.word	0x200029a5
   39a30:	20002864 	.word	0x20002864
   39a34:	20003c14 	.word	0x20003c14
   39a38:	20002774 	.word	0x20002774
   39a3c:	20003c13 	.word	0x20003c13
   39a40:	200016f8 	.word	0x200016f8
   39a44:	000dbba0 	.word	0x000dbba0
   39a48:	00039cb9 	.word	0x00039cb9
   39a4c:	200016c8 	.word	0x200016c8

00039a50 <ull_filter_lll_get>:
	return &rl_filter;
   39a50:	4a03      	ldr	r2, [pc, #12]	; (39a60 <ull_filter_lll_get+0x10>)
   39a52:	4b04      	ldr	r3, [pc, #16]	; (39a64 <ull_filter_lll_get+0x14>)
}
   39a54:	2800      	cmp	r0, #0
   39a56:	bf14      	ite	ne
   39a58:	4610      	movne	r0, r2
   39a5a:	4618      	moveq	r0, r3
   39a5c:	4770      	bx	lr
   39a5e:	bf00      	nop
   39a60:	200029e4 	.word	0x200029e4
   39a64:	20002778 	.word	0x20002778

00039a68 <ull_filter_adv_scan_state_cb>:
	if (bm) {
   39a68:	b1a8      	cbz	r0, 39a96 <ull_filter_adv_scan_state_cb+0x2e>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   39a6a:	4a0c      	ldr	r2, [pc, #48]	; (39a9c <ull_filter_adv_scan_state_cb+0x34>)
			return ((t * to_hz + off) / from_hz);
   39a6c:	6812      	ldr	r2, [r2, #0]
{
   39a6e:	b510      	push	{r4, lr}
   39a70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   39a74:	f240 30e7 	movw	r0, #999	; 0x3e7
   39a78:	2100      	movs	r1, #0
   39a7a:	fbe2 0103 	umlal	r0, r1, r2, r3
   39a7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   39a82:	2300      	movs	r3, #0
   39a84:	f7ec fb3c 	bl	26100 <__aeabi_uldivmod>
}
   39a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   39a8c:	4602      	mov	r2, r0
   39a8e:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   39a90:	4803      	ldr	r0, [pc, #12]	; (39aa0 <ull_filter_adv_scan_state_cb+0x38>)
   39a92:	f007 bf53 	b.w	4193c <k_work_schedule>
	k_work_cancel_delayable(&rpa_work);
   39a96:	4802      	ldr	r0, [pc, #8]	; (39aa0 <ull_filter_adv_scan_state_cb+0x38>)
   39a98:	f00e bf0b 	b.w	488b2 <k_work_cancel_delayable>
   39a9c:	20002774 	.word	0x20002774
   39aa0:	200016c8 	.word	0x200016c8

00039aa4 <ull_filter_adv_update>:
{
   39aa4:	b508      	push	{r3, lr}
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   39aa6:	4b09      	ldr	r3, [pc, #36]	; (39acc <ull_filter_adv_update+0x28>)
   39aa8:	2200      	movs	r2, #0
   39aaa:	801a      	strh	r2, [r3, #0]
	if (adv_fp &&
   39aac:	b930      	cbnz	r0, 39abc <ull_filter_adv_update+0x18>
	if (rl_enable &&
   39aae:	4b08      	ldr	r3, [pc, #32]	; (39ad0 <ull_filter_adv_update+0x2c>)
	filter->enable_bitmask = 0;
   39ab0:	4a08      	ldr	r2, [pc, #32]	; (39ad4 <ull_filter_adv_update+0x30>)
	if (rl_enable &&
   39ab2:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   39ab4:	2100      	movs	r1, #0
   39ab6:	8011      	strh	r1, [r2, #0]
	if (rl_enable &&
   39ab8:	b91b      	cbnz	r3, 39ac2 <ull_filter_adv_update+0x1e>
}
   39aba:	bd08      	pop	{r3, pc}
		fal_update();
   39abc:	f7ff fbba 	bl	39234 <fal_update>
   39ac0:	e7f5      	b.n	39aae <ull_filter_adv_update+0xa>
}
   39ac2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   39ac6:	f7ff bb7d 	b.w	391c4 <rl_update>
   39aca:	bf00      	nop
   39acc:	200029e4 	.word	0x200029e4
   39ad0:	20003c14 	.word	0x20003c14
   39ad4:	20002778 	.word	0x20002778

00039ad8 <ull_filter_rpa_update>:
{
   39ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39adc:	4682      	mov	sl, r0
   39ade:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   39ae0:	f00f f887 	bl	48bf2 <z_impl_k_uptime_ticks>
   39ae4:	014a      	lsls	r2, r1, #5
   39ae6:	0143      	lsls	r3, r0, #5
   39ae8:	1a1b      	subs	r3, r3, r0
   39aea:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   39aee:	eb62 0201 	sbc.w	r2, r2, r1
   39af2:	0092      	lsls	r2, r2, #2
   39af4:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   39af8:	009b      	lsls	r3, r3, #2
   39afa:	181b      	adds	r3, r3, r0
   39afc:	eb41 0902 	adc.w	r9, r1, r2
   39b00:	ea4f 09c9 	mov.w	r9, r9, lsl #3
   39b04:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
   39b08:	f3c3 3310 	ubfx	r3, r3, #12, #17
   39b0c:	ea43 4349 	orr.w	r3, r3, r9, lsl #17
   39b10:	ea4f 39d9 	mov.w	r9, r9, lsr #15
	bool all = timeout || (rpa_last_ms == -1) ||
   39b14:	f1ba 0f00 	cmp.w	sl, #0
   39b18:	d116      	bne.n	39b48 <ull_filter_rpa_update+0x70>
   39b1a:	4a5f      	ldr	r2, [pc, #380]	; (39c98 <ull_filter_rpa_update+0x1c0>)
   39b1c:	e9d2 1200 	ldrd	r1, r2, [r2]
   39b20:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   39b24:	bf08      	it	eq
   39b26:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
   39b2a:	d00d      	beq.n	39b48 <ull_filter_rpa_update+0x70>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   39b2c:	485b      	ldr	r0, [pc, #364]	; (39c9c <ull_filter_rpa_update+0x1c4>)
   39b2e:	6800      	ldr	r0, [r0, #0]
   39b30:	1a59      	subs	r1, r3, r1
   39b32:	eb69 0202 	sbc.w	r2, r9, r2
	bool all = timeout || (rpa_last_ms == -1) ||
   39b36:	4281      	cmp	r1, r0
   39b38:	f172 0200 	sbcs.w	r2, r2, #0
   39b3c:	bfac      	ite	ge
   39b3e:	f04f 0b01 	movge.w	fp, #1
   39b42:	f04f 0b00 	movlt.w	fp, #0
   39b46:	e001      	b.n	39b4c <ull_filter_rpa_update+0x74>
   39b48:	f04f 0b01 	mov.w	fp, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   39b4c:	4e54      	ldr	r6, [pc, #336]	; (39ca0 <ull_filter_rpa_update+0x1c8>)
   39b4e:	f8cd a004 	str.w	sl, [sp, #4]
   39b52:	f8df 8150 	ldr.w	r8, [pc, #336]	; 39ca4 <ull_filter_rpa_update+0x1cc>
	bool all = timeout || (rpa_last_ms == -1) ||
   39b56:	2400      	movs	r4, #0
   39b58:	1ff7      	subs	r7, r6, #7
   39b5a:	469a      	mov	sl, r3
   39b5c:	e00d      	b.n	39b7a <ull_filter_rpa_update+0xa2>
			rl[i].rpas_ready = 1U;
   39b5e:	4425      	add	r5, r4
   39b60:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   39b64:	f043 0302 	orr.w	r3, r3, #2
   39b68:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   39b6c:	3401      	adds	r4, #1
   39b6e:	2c08      	cmp	r4, #8
   39b70:	f108 0806 	add.w	r8, r8, #6
   39b74:	f106 0628 	add.w	r6, r6, #40	; 0x28
   39b78:	d026      	beq.n	39bc8 <ull_filter_rpa_update+0xf0>
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   39b7a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   39b7e:	00a5      	lsls	r5, r4, #2
   39b80:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   39b84:	07da      	lsls	r2, r3, #31
   39b86:	d5f1      	bpl.n	39b6c <ull_filter_rpa_update+0x94>
   39b88:	f1bb 0f00 	cmp.w	fp, #0
   39b8c:	d101      	bne.n	39b92 <ull_filter_rpa_update+0xba>
   39b8e:	0798      	lsls	r0, r3, #30
   39b90:	d4ec      	bmi.n	39b6c <ull_filter_rpa_update+0x94>
			if (rl[i].pirk) {
   39b92:	192b      	adds	r3, r5, r4
   39b94:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   39b98:	0759      	lsls	r1, r3, #29
   39b9a:	d424      	bmi.n	39be6 <ull_filter_rpa_update+0x10e>
			if (rl[i].lirk) {
   39b9c:	192b      	adds	r3, r5, r4
   39b9e:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   39ba2:	071a      	lsls	r2, r3, #28
   39ba4:	d5db      	bpl.n	39b5e <ull_filter_rpa_update+0x86>
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   39ba6:	a902      	add	r1, sp, #8
   39ba8:	4630      	mov	r0, r6
   39baa:	f00a ffec 	bl	44b86 <bt_rpa_create>
				LL_ASSERT(!err);
   39bae:	2800      	cmp	r0, #0
   39bb0:	d164      	bne.n	39c7c <ull_filter_rpa_update+0x1a4>
				rl[i].local_rpa = &rpa;
   39bb2:	ab02      	add	r3, sp, #8
   39bb4:	f8c6 301d 	str.w	r3, [r6, #29]
   39bb8:	4619      	mov	r1, r3
   39bba:	2206      	movs	r2, #6
   39bbc:	4640      	mov	r0, r8
   39bbe:	f00a ff80 	bl	44ac2 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   39bc2:	f8c6 801d 	str.w	r8, [r6, #29]
   39bc6:	e7ca      	b.n	39b5e <ull_filter_rpa_update+0x86>
	if (all) {
   39bc8:	4653      	mov	r3, sl
   39bca:	f8dd a004 	ldr.w	sl, [sp, #4]
   39bce:	f1bb 0f00 	cmp.w	fp, #0
   39bd2:	d002      	beq.n	39bda <ull_filter_rpa_update+0x102>
		rpa_last_ms = now;
   39bd4:	4a30      	ldr	r2, [pc, #192]	; (39c98 <ull_filter_rpa_update+0x1c0>)
   39bd6:	e9c2 3900 	strd	r3, r9, [r2]
	if (timeout) {
   39bda:	f1ba 0f00 	cmp.w	sl, #0
   39bde:	d127      	bne.n	39c30 <ull_filter_rpa_update+0x158>
}
   39be0:	b007      	add	sp, #28
   39be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	psrc += length - 1;
   39be6:	7c31      	ldrb	r1, [r6, #16]
   39be8:	4b2f      	ldr	r3, [pc, #188]	; (39ca8 <ull_filter_rpa_update+0x1d0>)
   39bea:	220f      	movs	r2, #15
   39bec:	eb02 1201 	add.w	r2, r2, r1, lsl #4
   39bf0:	441a      	add	r2, r3
	for (; length > 0; length--) {
   39bf2:	f10d 0017 	add.w	r0, sp, #23
   39bf6:	f10d 0307 	add.w	r3, sp, #7
		*pdst++ = *psrc--;
   39bfa:	f812 1901 	ldrb.w	r1, [r2], #-1
   39bfe:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   39c02:	4283      	cmp	r3, r0
   39c04:	d1f9      	bne.n	39bfa <ull_filter_rpa_update+0x122>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   39c06:	f106 0117 	add.w	r1, r6, #23
   39c0a:	a802      	add	r0, sp, #8
   39c0c:	f00a ffbb 	bl	44b86 <bt_rpa_create>
				LL_ASSERT(!err);
   39c10:	2800      	cmp	r0, #0
   39c12:	d0c3      	beq.n	39b9c <ull_filter_rpa_update+0xc4>
   39c14:	4a25      	ldr	r2, [pc, #148]	; (39cac <ull_filter_rpa_update+0x1d4>)
   39c16:	4926      	ldr	r1, [pc, #152]	; (39cb0 <ull_filter_rpa_update+0x1d8>)
   39c18:	4826      	ldr	r0, [pc, #152]	; (39cb4 <ull_filter_rpa_update+0x1dc>)
   39c1a:	f240 23eb 	movw	r3, #747	; 0x2eb
   39c1e:	f008 fe51 	bl	428c4 <printk>
   39c22:	4040      	eors	r0, r0
   39c24:	f380 8811 	msr	BASEPRI, r0
   39c28:	f04f 0003 	mov.w	r0, #3
   39c2c:	df02      	svc	2
   39c2e:	e7b5      	b.n	39b9c <ull_filter_rpa_update+0xc4>
		adv = ull_adv_is_enabled_get(0);
   39c30:	2000      	movs	r0, #0
   39c32:	f7fa fb5b 	bl	342ec <ull_adv_is_enabled_get>
		if (adv) {
   39c36:	4604      	mov	r4, r0
   39c38:	2800      	cmp	r0, #0
   39c3a:	d0d1      	beq.n	39be0 <ull_filter_rpa_update+0x108>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   39c3c:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
   39c40:	075b      	lsls	r3, r3, #29
   39c42:	d5cd      	bpl.n	39be0 <ull_filter_rpa_update+0x108>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   39c44:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   39c48:	2b07      	cmp	r3, #7
   39c4a:	d8c9      	bhi.n	39be0 <ull_filter_rpa_update+0x108>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   39c4c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   39c50:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   39c54:	a902      	add	r1, sp, #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   39c56:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   39c58:	3028      	adds	r0, #40	; 0x28
   39c5a:	f001 f9d3 	bl	3b004 <lll_adv_pdu_alloc>
	(void)memcpy(pdu, prev, PDU_AC_LL_HEADER_SIZE + prev->len);
   39c5e:	7872      	ldrb	r2, [r6, #1]
   39c60:	4605      	mov	r5, r0
   39c62:	3202      	adds	r2, #2
   39c64:	4631      	mov	r1, r6
   39c66:	f00a ff2c 	bl	44ac2 <memcpy>
	ull_adv_pdu_update_addrs(adv, pdu);
   39c6a:	4629      	mov	r1, r5
   39c6c:	4620      	mov	r0, r4
   39c6e:	f7fa fb67 	bl	34340 <ull_adv_pdu_update_addrs>
	pdu->last = idx;
   39c72:	f89d 3008 	ldrb.w	r3, [sp, #8]
   39c76:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   39c7a:	e7b1      	b.n	39be0 <ull_filter_rpa_update+0x108>
				LL_ASSERT(!err);
   39c7c:	4a0b      	ldr	r2, [pc, #44]	; (39cac <ull_filter_rpa_update+0x1d4>)
   39c7e:	490c      	ldr	r1, [pc, #48]	; (39cb0 <ull_filter_rpa_update+0x1d8>)
   39c80:	480c      	ldr	r0, [pc, #48]	; (39cb4 <ull_filter_rpa_update+0x1dc>)
   39c82:	f44f 733e 	mov.w	r3, #760	; 0x2f8
   39c86:	f008 fe1d 	bl	428c4 <printk>
   39c8a:	4040      	eors	r0, r0
   39c8c:	f380 8811 	msr	BASEPRI, r0
   39c90:	f04f 0003 	mov.w	r0, #3
   39c94:	df02      	svc	2
   39c96:	e78c      	b.n	39bb2 <ull_filter_rpa_update+0xda>
   39c98:	200016f8 	.word	0x200016f8
   39c9c:	20002774 	.word	0x20002774
   39ca0:	2000286b 	.word	0x2000286b
   39ca4:	200027ac 	.word	0x200027ac
   39ca8:	200027e4 	.word	0x200027e4
   39cac:	0004a38c 	.word	0x0004a38c
   39cb0:	00049e04 	.word	0x00049e04
   39cb4:	00049c68 	.word	0x00049c68

00039cb8 <rpa_timeout>:
{
   39cb8:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   39cba:	2001      	movs	r0, #1
   39cbc:	f7ff ff0c 	bl	39ad8 <ull_filter_rpa_update>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   39cc0:	4a0a      	ldr	r2, [pc, #40]	; (39cec <rpa_timeout+0x34>)
   39cc2:	6812      	ldr	r2, [r2, #0]
   39cc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   39cc8:	f240 30e7 	movw	r0, #999	; 0x3e7
   39ccc:	2100      	movs	r1, #0
   39cce:	fbe2 0103 	umlal	r0, r1, r2, r3
   39cd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   39cd6:	2300      	movs	r3, #0
   39cd8:	f7ec fa12 	bl	26100 <__aeabi_uldivmod>
}
   39cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   39ce0:	4602      	mov	r2, r0
   39ce2:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   39ce4:	4802      	ldr	r0, [pc, #8]	; (39cf0 <rpa_timeout+0x38>)
   39ce6:	f007 be29 	b.w	4193c <k_work_schedule>
   39cea:	bf00      	nop
   39cec:	20002774 	.word	0x20002774
   39cf0:	200016c8 	.word	0x200016c8

00039cf4 <ull_filter_adva_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   39cf4:	2807      	cmp	r0, #7
   39cf6:	d813      	bhi.n	39d20 <ull_filter_adva_get+0x2c>
{
   39cf8:	b570      	push	{r4, r5, r6, lr}
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   39cfa:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   39cfe:	4d10      	ldr	r5, [pc, #64]	; (39d40 <ull_filter_adva_get+0x4c>)
   39d00:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   39d04:	071a      	lsls	r2, r3, #28
   39d06:	4604      	mov	r4, r0
   39d08:	ea4f 0680 	mov.w	r6, r0, lsl #2
   39d0c:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   39d10:	d505      	bpl.n	39d1e <ull_filter_adva_get+0x2a>
		LL_ASSERT(rl[rl_idx].rpas_ready);
   39d12:	079b      	lsls	r3, r3, #30
   39d14:	d506      	bpl.n	39d24 <ull_filter_adva_get+0x30>
		return rl[rl_idx].local_rpa->val;
   39d16:	4426      	add	r6, r4
   39d18:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
   39d1c:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   39d1e:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   39d20:	2000      	movs	r0, #0
}
   39d22:	4770      	bx	lr
		LL_ASSERT(rl[rl_idx].rpas_ready);
   39d24:	4a07      	ldr	r2, [pc, #28]	; (39d44 <ull_filter_adva_get+0x50>)
   39d26:	4908      	ldr	r1, [pc, #32]	; (39d48 <ull_filter_adva_get+0x54>)
   39d28:	4808      	ldr	r0, [pc, #32]	; (39d4c <ull_filter_adva_get+0x58>)
   39d2a:	f44f 7347 	mov.w	r3, #796	; 0x31c
   39d2e:	f008 fdc9 	bl	428c4 <printk>
   39d32:	4040      	eors	r0, r0
   39d34:	f380 8811 	msr	BASEPRI, r0
   39d38:	f04f 0003 	mov.w	r0, #3
   39d3c:	df02      	svc	2
   39d3e:	e7ea      	b.n	39d16 <ull_filter_adva_get+0x22>
   39d40:	20002864 	.word	0x20002864
   39d44:	0004a38c 	.word	0x0004a38c
   39d48:	0004a3f0 	.word	0x0004a3f0
   39d4c:	00049c68 	.word	0x00049c68

00039d50 <ull_filter_tgta_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].pirk) {
   39d50:	2807      	cmp	r0, #7
   39d52:	d80c      	bhi.n	39d6e <ull_filter_tgta_get+0x1e>
   39d54:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   39d58:	4a06      	ldr	r2, [pc, #24]	; (39d74 <ull_filter_tgta_get+0x24>)
   39d5a:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   39d5e:	074b      	lsls	r3, r1, #29
   39d60:	d505      	bpl.n	39d6e <ull_filter_tgta_get+0x1e>
		return rl[rl_idx].peer_rpa.val;
   39d62:	2328      	movs	r3, #40	; 0x28
   39d64:	fb03 2200 	mla	r2, r3, r0, r2
   39d68:	f102 001e 	add.w	r0, r2, #30
   39d6c:	4770      	bx	lr
	return NULL;
   39d6e:	2000      	movs	r0, #0
   39d70:	4770      	bx	lr
   39d72:	bf00      	nop
   39d74:	20002864 	.word	0x20002864

00039d78 <ull_filter_rl_find>:
{
   39d78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39d7c:	468b      	mov	fp, r1
	if (free_idx) {
   39d7e:	4617      	mov	r7, r2
   39d80:	b10a      	cbz	r2, 39d86 <ull_filter_rl_find+0xe>
		*free_idx = FILTER_IDX_NONE;
   39d82:	23ff      	movs	r3, #255	; 0xff
   39d84:	7013      	strb	r3, [r2, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   39d86:	4d1b      	ldr	r5, [pc, #108]	; (39df4 <ull_filter_rl_find+0x7c>)
{
   39d88:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   39d8a:	f000 0a01 	and.w	sl, r0, #1
   39d8e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   39d92:	e006      	b.n	39da2 <ull_filter_rl_find+0x2a>
   39d94:	4552      	cmp	r2, sl
   39d96:	d01f      	beq.n	39dd8 <ull_filter_rl_find+0x60>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   39d98:	3401      	adds	r4, #1
   39d9a:	2c08      	cmp	r4, #8
   39d9c:	f105 0528 	add.w	r5, r5, #40	; 0x28
   39da0:	d015      	beq.n	39dce <ull_filter_rl_find+0x56>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   39da2:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   39da6:	fa5f f884 	uxtb.w	r8, r4
   39daa:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   39dae:	07d9      	lsls	r1, r3, #31
   39db0:	f3c3 1280 	ubfx	r2, r3, #6, #1
   39db4:	d4ee      	bmi.n	39d94 <ull_filter_rl_find+0x1c>
		} else if (free_idx && !rl[i].taken &&
   39db6:	2f00      	cmp	r7, #0
   39db8:	d0ee      	beq.n	39d98 <ull_filter_rl_find+0x20>
   39dba:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   39dbc:	3401      	adds	r4, #1
		} else if (free_idx && !rl[i].taken &&
   39dbe:	2bff      	cmp	r3, #255	; 0xff
			*free_idx = i;
   39dc0:	bf08      	it	eq
   39dc2:	f887 8000 	strbeq.w	r8, [r7]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   39dc6:	2c08      	cmp	r4, #8
   39dc8:	f105 0528 	add.w	r5, r5, #40	; 0x28
   39dcc:	d1e9      	bne.n	39da2 <ull_filter_rl_find+0x2a>
	return FILTER_IDX_NONE;
   39dce:	f04f 08ff 	mov.w	r8, #255	; 0xff
}
   39dd2:	4640      	mov	r0, r8
   39dd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   39dd8:	4628      	mov	r0, r5
   39dda:	2206      	movs	r2, #6
   39ddc:	4659      	mov	r1, fp
   39dde:	f00a fe60 	bl	44aa2 <memcmp>
   39de2:	2800      	cmp	r0, #0
   39de4:	d0f5      	beq.n	39dd2 <ull_filter_rl_find+0x5a>
		} else if (free_idx && !rl[i].taken &&
   39de6:	2f00      	cmp	r7, #0
   39de8:	d0d6      	beq.n	39d98 <ull_filter_rl_find+0x20>
   39dea:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   39dee:	07db      	lsls	r3, r3, #31
   39df0:	d4d2      	bmi.n	39d98 <ull_filter_rl_find+0x20>
   39df2:	e7e2      	b.n	39dba <ull_filter_rl_find+0x42>
   39df4:	20002865 	.word	0x20002865

00039df8 <ll_rl_add>:
{
   39df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39dfc:	4607      	mov	r7, r0
   39dfe:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   39e00:	2000      	movs	r0, #0
{
   39e02:	460d      	mov	r5, r1
   39e04:	4691      	mov	r9, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   39e06:	f7fa fa7f 	bl	34308 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   39e0a:	2800      	cmp	r0, #0
   39e0c:	d17a      	bne.n	39f04 <ll_rl_add+0x10c>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   39e0e:	46ba      	mov	sl, r7
   39e10:	4604      	mov	r4, r0
   39e12:	f81a 0b01 	ldrb.w	r0, [sl], #1
   39e16:	f10d 020f 	add.w	r2, sp, #15
   39e1a:	4651      	mov	r1, sl
   39e1c:	f7ff ffac 	bl	39d78 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   39e20:	2807      	cmp	r0, #7
   39e22:	f240 80b4 	bls.w	39f8e <ll_rl_add+0x196>
	} else if (j >= ARRAY_SIZE(rl)) {
   39e26:	f89d 800f 	ldrb.w	r8, [sp, #15]
   39e2a:	f1b8 0f07 	cmp.w	r8, #7
   39e2e:	d87b      	bhi.n	39f28 <ll_rl_add+0x130>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   39e30:	eb08 0388 	add.w	r3, r8, r8, lsl #2
   39e34:	4e58      	ldr	r6, [pc, #352]	; (39f98 <ll_rl_add+0x1a0>)
   39e36:	00db      	lsls	r3, r3, #3
   39e38:	1c58      	adds	r0, r3, #1
   39e3a:	2206      	movs	r2, #6
   39e3c:	4651      	mov	r1, sl
   39e3e:	4430      	add	r0, r6
   39e40:	9300      	str	r3, [sp, #0]
   39e42:	f00a fe3e 	bl	44ac2 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   39e46:	eb08 0288 	add.w	r2, r8, r8, lsl #2
   39e4a:	7838      	ldrb	r0, [r7, #0]
   39e4c:	f816 1032 	ldrb.w	r1, [r6, r2, lsl #3]
   39e50:	ea4f 0bc2 	mov.w	fp, r2, lsl #3
   39e54:	f360 1186 	bfi	r1, r0, #6, #1
   39e58:	eb06 03c2 	add.w	r3, r6, r2, lsl #3
   39e5c:	f806 100b 	strb.w	r1, [r6, fp]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   39e60:	4628      	mov	r0, r5
   39e62:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   39e64:	9301      	str	r3, [sp, #4]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   39e66:	f7f5 fe03 	bl	2fa70 <mem_nz>
   39e6a:	f816 200b 	ldrb.w	r2, [r6, fp]
   39e6e:	f360 0282 	bfi	r2, r0, #2, #1
   39e72:	f806 200b 	strb.w	r2, [r6, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   39e76:	2110      	movs	r1, #16
   39e78:	4648      	mov	r0, r9
   39e7a:	f7f5 fdf9 	bl	2fa70 <mem_nz>
   39e7e:	f816 200b 	ldrb.w	r2, [r6, fp]
	if (rl[i].pirk) {
   39e82:	9b00      	ldr	r3, [sp, #0]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   39e84:	f000 0001 	and.w	r0, r0, #1
   39e88:	f360 02c3 	bfi	r2, r0, #3, #1
	if (rl[i].pirk) {
   39e8c:	f012 0f04 	tst.w	r2, #4
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   39e90:	f806 200b 	strb.w	r2, [r6, fp]
	rl[i].id_addr_type = id_addr->type & 0x1;
   39e94:	ea4f 0b88 	mov.w	fp, r8, lsl #2
	if (rl[i].pirk) {
   39e98:	d14a      	bne.n	39f30 <ll_rl_add+0x138>
	if (rl[i].lirk) {
   39e9a:	2800      	cmp	r0, #0
   39e9c:	d168      	bne.n	39f70 <ll_rl_add+0x178>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   39e9e:	f103 0018 	add.w	r0, r3, #24
   39ea2:	2206      	movs	r2, #6
   39ea4:	4430      	add	r0, r6
   39ea6:	2100      	movs	r1, #0
   39ea8:	f00a fe16 	bl	44ad8 <memset>
	rl[i].dev = 0U;
   39eac:	eb0b 0308 	add.w	r3, fp, r8
   39eb0:	4d3a      	ldr	r5, [pc, #232]	; (39f9c <ll_rl_add+0x1a4>)
	rl[i].rpas_ready = 0U;
   39eb2:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
   39eb6:	f022 0212 	bic.w	r2, r2, #18
   39eba:	f806 2033 	strb.w	r2, [r6, r3, lsl #3]
	j = fal_find(id_addr->type, id_addr->a.val, NULL);
   39ebe:	f897 9000 	ldrb.w	r9, [r7]
	for (i = 0; i < FAL_SIZE; i++) {
   39ec2:	1eaf      	subs	r7, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   39ec4:	f009 0901 	and.w	r9, r9, #1
   39ec8:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   39ecc:	f3c3 0240 	ubfx	r2, r3, #1, #1
   39ed0:	f013 0301 	ands.w	r3, r3, #1
   39ed4:	d001      	beq.n	39eda <ll_rl_add+0xe2>
   39ed6:	454a      	cmp	r2, r9
   39ed8:	d018      	beq.n	39f0c <ll_rl_add+0x114>
	for (i = 0; i < FAL_SIZE; i++) {
   39eda:	3401      	adds	r4, #1
   39edc:	2c08      	cmp	r4, #8
   39ede:	f105 0508 	add.w	r5, r5, #8
   39ee2:	d1f1      	bne.n	39ec8 <ll_rl_add+0xd0>
   39ee4:	2300      	movs	r3, #0
	rl[i].taken = 1U;
   39ee6:	44c3      	add	fp, r8
   39ee8:	015b      	lsls	r3, r3, #5
   39eea:	f816 203b 	ldrb.w	r2, [r6, fp, lsl #3]
   39eee:	f043 0301 	orr.w	r3, r3, #1
   39ef2:	f022 0221 	bic.w	r2, r2, #33	; 0x21
   39ef6:	4313      	orrs	r3, r2
	return 0;
   39ef8:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   39efa:	f806 303b 	strb.w	r3, [r6, fp, lsl #3]
}
   39efe:	b005      	add	sp, #20
   39f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   39f04:	200c      	movs	r0, #12
}
   39f06:	b005      	add	sp, #20
   39f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   39f0c:	4628      	mov	r0, r5
   39f0e:	2206      	movs	r2, #6
   39f10:	4651      	mov	r1, sl
   39f12:	9300      	str	r3, [sp, #0]
   39f14:	f00a fdc5 	bl	44aa2 <memcmp>
   39f18:	9b00      	ldr	r3, [sp, #0]
   39f1a:	2800      	cmp	r0, #0
   39f1c:	d1dd      	bne.n	39eda <ll_rl_add+0xe2>
		fal[j].rl_idx = i;
   39f1e:	eb07 07c4 	add.w	r7, r7, r4, lsl #3
   39f22:	f887 8001 	strb.w	r8, [r7, #1]
		rl[i].fal = 1U;
   39f26:	e7de      	b.n	39ee6 <ll_rl_add+0xee>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   39f28:	2007      	movs	r0, #7
}
   39f2a:	b005      	add	sp, #20
   39f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   39f30:	f8df c06c 	ldr.w	ip, [pc, #108]	; 39fa0 <ll_rl_add+0x1a8>
		peer_irk_rl_ids[peer_irk_count] = i;
   39f34:	491b      	ldr	r1, [pc, #108]	; (39fa4 <ll_rl_add+0x1ac>)
		rl[i].pirk_idx = peer_irk_count;
   39f36:	f89c 2000 	ldrb.w	r2, [ip]
   39f3a:	f8dd e004 	ldr.w	lr, [sp, #4]
		peer_irk_rl_ids[peer_irk_count] = i;
   39f3e:	f801 8002 	strb.w	r8, [r1, r2]
		rl[i].pirk_idx = peer_irk_count;
   39f42:	f88e 2017 	strb.w	r2, [lr, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   39f46:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   39f4a:	f8df e05c 	ldr.w	lr, [pc, #92]	; 39fa8 <ll_rl_add+0x1b0>
   39f4e:	eb01 1102 	add.w	r1, r1, r2, lsl #4
   39f52:	3201      	adds	r2, #1
   39f54:	f88c 2000 	strb.w	r2, [ip]
   39f58:	4471      	add	r1, lr
	psrc += length - 1;
   39f5a:	f105 020f 	add.w	r2, r5, #15
	for (; length > 0; length--) {
   39f5e:	3d01      	subs	r5, #1
		*pdst++ = *psrc--;
   39f60:	f812 c901 	ldrb.w	ip, [r2], #-1
   39f64:	f801 cf01 	strb.w	ip, [r1, #1]!
	for (; length > 0; length--) {
   39f68:	42aa      	cmp	r2, r5
   39f6a:	d1f9      	bne.n	39f60 <ll_rl_add+0x168>
	if (rl[i].lirk) {
   39f6c:	2800      	cmp	r0, #0
   39f6e:	d096      	beq.n	39e9e <ll_rl_add+0xa6>
		(void)memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   39f70:	1dd8      	adds	r0, r3, #7
   39f72:	4649      	mov	r1, r9
   39f74:	2210      	movs	r2, #16
   39f76:	4430      	add	r0, r6
   39f78:	9300      	str	r3, [sp, #0]
   39f7a:	f00a fda2 	bl	44ac2 <memcpy>
		rl[i].local_rpa = NULL;
   39f7e:	eb0b 0208 	add.w	r2, fp, r8
   39f82:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   39f86:	2100      	movs	r1, #0
   39f88:	9b00      	ldr	r3, [sp, #0]
   39f8a:	6251      	str	r1, [r2, #36]	; 0x24
   39f8c:	e787      	b.n	39e9e <ll_rl_add+0xa6>
		return BT_HCI_ERR_INVALID_PARAM;
   39f8e:	2012      	movs	r0, #18
}
   39f90:	b005      	add	sp, #20
   39f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39f96:	bf00      	nop
   39f98:	20002864 	.word	0x20002864
   39f9c:	200029a6 	.word	0x200029a6
   39fa0:	20003c13 	.word	0x20003c13
   39fa4:	200027dc 	.word	0x200027dc
   39fa8:	200027e4 	.word	0x200027e4

00039fac <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   39fac:	2807      	cmp	r0, #7
   39fae:	d807      	bhi.n	39fc0 <ull_filter_lll_lrpa_used+0x14>
   39fb0:	4b04      	ldr	r3, [pc, #16]	; (39fc4 <ull_filter_lll_lrpa_used+0x18>)
   39fb2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   39fb6:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   39fba:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   39fbe:	4770      	bx	lr
   39fc0:	2000      	movs	r0, #0
}
   39fc2:	4770      	bx	lr
   39fc4:	20002864 	.word	0x20002864

00039fc8 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   39fc8:	4b02      	ldr	r3, [pc, #8]	; (39fd4 <ull_filter_lll_irks_get+0xc>)
   39fca:	781b      	ldrb	r3, [r3, #0]
   39fcc:	7003      	strb	r3, [r0, #0]
}
   39fce:	4802      	ldr	r0, [pc, #8]	; (39fd8 <ull_filter_lll_irks_get+0x10>)
   39fd0:	4770      	bx	lr
   39fd2:	bf00      	nop
   39fd4:	20003c13 	.word	0x20003c13
   39fd8:	200027e4 	.word	0x200027e4

00039fdc <ull_filter_lll_rl_irk_idx>:
{
   39fdc:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   39fde:	4b20      	ldr	r3, [pc, #128]	; (3a060 <ull_filter_lll_rl_irk_idx+0x84>)
   39fe0:	781b      	ldrb	r3, [r3, #0]
   39fe2:	4283      	cmp	r3, r0
{
   39fe4:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   39fe6:	d90c      	bls.n	3a002 <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   39fe8:	4b1e      	ldr	r3, [pc, #120]	; (3a064 <ull_filter_lll_rl_irk_idx+0x88>)
   39fea:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   39fec:	2c07      	cmp	r4, #7
   39fee:	d819      	bhi.n	3a024 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   39ff0:	4b1d      	ldr	r3, [pc, #116]	; (3a068 <ull_filter_lll_rl_irk_idx+0x8c>)
   39ff2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   39ff6:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   39ffa:	07db      	lsls	r3, r3, #31
   39ffc:	d520      	bpl.n	3a040 <ull_filter_lll_rl_irk_idx+0x64>
}
   39ffe:	4620      	mov	r0, r4
   3a000:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   3a002:	4a1a      	ldr	r2, [pc, #104]	; (3a06c <ull_filter_lll_rl_irk_idx+0x90>)
   3a004:	491a      	ldr	r1, [pc, #104]	; (3a070 <ull_filter_lll_rl_irk_idx+0x94>)
   3a006:	481b      	ldr	r0, [pc, #108]	; (3a074 <ull_filter_lll_rl_irk_idx+0x98>)
   3a008:	f240 336d 	movw	r3, #877	; 0x36d
   3a00c:	f008 fc5a 	bl	428c4 <printk>
   3a010:	4040      	eors	r0, r0
   3a012:	f380 8811 	msr	BASEPRI, r0
   3a016:	f04f 0003 	mov.w	r0, #3
   3a01a:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   3a01c:	4b11      	ldr	r3, [pc, #68]	; (3a064 <ull_filter_lll_rl_irk_idx+0x88>)
   3a01e:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   3a020:	2c07      	cmp	r4, #7
   3a022:	d9e5      	bls.n	39ff0 <ull_filter_lll_rl_irk_idx+0x14>
   3a024:	4a11      	ldr	r2, [pc, #68]	; (3a06c <ull_filter_lll_rl_irk_idx+0x90>)
   3a026:	4914      	ldr	r1, [pc, #80]	; (3a078 <ull_filter_lll_rl_irk_idx+0x9c>)
   3a028:	4812      	ldr	r0, [pc, #72]	; (3a074 <ull_filter_lll_rl_irk_idx+0x98>)
   3a02a:	f240 336f 	movw	r3, #879	; 0x36f
   3a02e:	f008 fc49 	bl	428c4 <printk>
   3a032:	4040      	eors	r0, r0
   3a034:	f380 8811 	msr	BASEPRI, r0
   3a038:	f04f 0003 	mov.w	r0, #3
   3a03c:	df02      	svc	2
   3a03e:	e7d7      	b.n	39ff0 <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   3a040:	4a0a      	ldr	r2, [pc, #40]	; (3a06c <ull_filter_lll_rl_irk_idx+0x90>)
   3a042:	490e      	ldr	r1, [pc, #56]	; (3a07c <ull_filter_lll_rl_irk_idx+0xa0>)
   3a044:	480b      	ldr	r0, [pc, #44]	; (3a074 <ull_filter_lll_rl_irk_idx+0x98>)
   3a046:	f44f 735c 	mov.w	r3, #880	; 0x370
   3a04a:	f008 fc3b 	bl	428c4 <printk>
   3a04e:	4040      	eors	r0, r0
   3a050:	f380 8811 	msr	BASEPRI, r0
   3a054:	f04f 0003 	mov.w	r0, #3
   3a058:	df02      	svc	2
}
   3a05a:	4620      	mov	r0, r4
   3a05c:	bd10      	pop	{r4, pc}
   3a05e:	bf00      	nop
   3a060:	20003c13 	.word	0x20003c13
   3a064:	200027dc 	.word	0x200027dc
   3a068:	20002864 	.word	0x20002864
   3a06c:	0004a38c 	.word	0x0004a38c
   3a070:	0004a578 	.word	0x0004a578
   3a074:	00049c68 	.word	0x00049c68
   3a078:	0004a598 	.word	0x0004a598
   3a07c:	0004a56c 	.word	0x0004a56c

0003a080 <ull_filter_lll_irk_in_fal>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   3a080:	2807      	cmp	r0, #7
   3a082:	d823      	bhi.n	3a0cc <ull_filter_lll_irk_in_fal+0x4c>
{
   3a084:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   3a086:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   3a08a:	4e11      	ldr	r6, [pc, #68]	; (3a0d0 <ull_filter_lll_irk_in_fal+0x50>)
   3a08c:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   3a090:	07db      	lsls	r3, r3, #31
   3a092:	4604      	mov	r4, r0
   3a094:	ea4f 0580 	mov.w	r5, r0, lsl #2
   3a098:	d505      	bpl.n	3a0a6 <ull_filter_lll_irk_in_fal+0x26>
	return rl[rl_idx].fal;
   3a09a:	4425      	add	r5, r4
   3a09c:	f816 0035 	ldrb.w	r0, [r6, r5, lsl #3]
   3a0a0:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   3a0a4:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   3a0a6:	4a0b      	ldr	r2, [pc, #44]	; (3a0d4 <ull_filter_lll_irk_in_fal+0x54>)
   3a0a8:	490b      	ldr	r1, [pc, #44]	; (3a0d8 <ull_filter_lll_irk_in_fal+0x58>)
   3a0aa:	480c      	ldr	r0, [pc, #48]	; (3a0dc <ull_filter_lll_irk_in_fal+0x5c>)
   3a0ac:	f240 337b 	movw	r3, #891	; 0x37b
   3a0b0:	f008 fc08 	bl	428c4 <printk>
   3a0b4:	4040      	eors	r0, r0
   3a0b6:	f380 8811 	msr	BASEPRI, r0
   3a0ba:	f04f 0003 	mov.w	r0, #3
   3a0be:	df02      	svc	2
	return rl[rl_idx].fal;
   3a0c0:	4425      	add	r5, r4
   3a0c2:	f816 0035 	ldrb.w	r0, [r6, r5, lsl #3]
   3a0c6:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   3a0ca:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   3a0cc:	2000      	movs	r0, #0
}
   3a0ce:	4770      	bx	lr
   3a0d0:	20002864 	.word	0x20002864
   3a0d4:	0004a38c 	.word	0x0004a38c
   3a0d8:	0004a3dc 	.word	0x0004a3dc
   3a0dc:	00049c68 	.word	0x00049c68

0003a0e0 <ull_filter_lll_rl_addr_allowed>:
	if (*rl_idx != FILTER_IDX_NONE) {
   3a0e0:	7813      	ldrb	r3, [r2, #0]
   3a0e2:	2bff      	cmp	r3, #255	; 0xff
   3a0e4:	d119      	bne.n	3a11a <ull_filter_lll_rl_addr_allowed+0x3a>
{
   3a0e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3a0ea:	4d19      	ldr	r5, [pc, #100]	; (3a150 <ull_filter_lll_rl_addr_allowed+0x70>)
   3a0ec:	4604      	mov	r4, r0
   3a0ee:	46ae      	mov	lr, r5
	if (*rl_idx != FILTER_IDX_NONE) {
   3a0f0:	2300      	movs	r3, #0
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   3a0f2:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   3a0f6:	009e      	lsls	r6, r3, #2
   3a0f8:	f815 c03c 	ldrb.w	ip, [r5, ip, lsl #3]
   3a0fc:	f01c 0001 	ands.w	r0, ip, #1
   3a100:	d003      	beq.n	3a10a <ull_filter_lll_rl_addr_allowed+0x2a>
   3a102:	f3cc 1c80 	ubfx	ip, ip, #6, #1
   3a106:	45a4      	cmp	ip, r4
   3a108:	d009      	beq.n	3a11e <ull_filter_lll_rl_addr_allowed+0x3e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3a10a:	3301      	adds	r3, #1
   3a10c:	2b08      	cmp	r3, #8
   3a10e:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
   3a112:	d1ee      	bne.n	3a0f2 <ull_filter_lll_rl_addr_allowed+0x12>
		return true;
   3a114:	2001      	movs	r0, #1
}
   3a116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return true;
   3a11a:	2001      	movs	r0, #1
}
   3a11c:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   3a11e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   3a122:	4677      	mov	r7, lr
   3a124:	f04f 0c00 	mov.w	ip, #0
				if (addr[j] != id_addr[j]) {
   3a128:	f817 af01 	ldrb.w	sl, [r7, #1]!
   3a12c:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   3a130:	45ca      	cmp	sl, r9
			for (j = 0U; j < BDADDR_SIZE; j++) {
   3a132:	f10c 0c01 	add.w	ip, ip, #1
				if (addr[j] != id_addr[j]) {
   3a136:	d1e8      	bne.n	3a10a <ull_filter_lll_rl_addr_allowed+0x2a>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   3a138:	f1bc 0f06 	cmp.w	ip, #6
   3a13c:	d1f4      	bne.n	3a128 <ull_filter_lll_rl_addr_allowed+0x48>
				return !rl[i].pirk || rl[i].dev;
   3a13e:	441e      	add	r6, r3
				*rl_idx = i;
   3a140:	7013      	strb	r3, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   3a142:	f815 3036 	ldrb.w	r3, [r5, r6, lsl #3]
   3a146:	075a      	lsls	r2, r3, #29
   3a148:	d5e5      	bpl.n	3a116 <ull_filter_lll_rl_addr_allowed+0x36>
   3a14a:	f3c3 1000 	ubfx	r0, r3, #4, #1
   3a14e:	e7e2      	b.n	3a116 <ull_filter_lll_rl_addr_allowed+0x36>
   3a150:	20002864 	.word	0x20002864

0003a154 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   3a154:	4b02      	ldr	r3, [pc, #8]	; (3a160 <ull_filter_lll_rl_enabled+0xc>)
   3a156:	7818      	ldrb	r0, [r3, #0]
}
   3a158:	3800      	subs	r0, #0
   3a15a:	bf18      	it	ne
   3a15c:	2001      	movne	r0, #1
   3a15e:	4770      	bx	lr
   3a160:	20003c14 	.word	0x20003c14

0003a164 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   3a164:	4668      	mov	r0, sp
   3a166:	f020 0107 	bic.w	r1, r0, #7
   3a16a:	468d      	mov	sp, r1
   3a16c:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   3a16e:	f002 f8a9 	bl	3c2c4 <isr_radio>

	ISR_DIRECT_PM();
   3a172:	f7f0 f813 	bl	2a19c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   3a176:	f7f0 f8e3 	bl	2a340 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   3a17a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   3a17e:	4685      	mov	sp, r0
   3a180:	4770      	bx	lr
   3a182:	bf00      	nop

0003a184 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   3a184:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   3a186:	4b09      	ldr	r3, [pc, #36]	; (3a1ac <rtc0_nrf5_isr+0x28>)
   3a188:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   3a18c:	b93a      	cbnz	r2, 3a19e <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   3a18e:	2001      	movs	r0, #1
   3a190:	f7f5 fd5c 	bl	2fc4c <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   3a194:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   3a198:	2002      	movs	r0, #2
   3a19a:	f7f5 bd57 	b.w	2fc4c <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   3a19e:	2000      	movs	r0, #0
   3a1a0:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   3a1a4:	f7f6 fe26 	bl	30df4 <ticker_trigger>
   3a1a8:	e7f1      	b.n	3a18e <rtc0_nrf5_isr+0xa>
   3a1aa:	bf00      	nop
   3a1ac:	4000b000 	.word	0x4000b000

0003a1b0 <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   3a1b0:	2000      	movs	r0, #0
   3a1b2:	f7f5 bd4b 	b.w	2fc4c <mayfly_run>
   3a1b6:	bf00      	nop

0003a1b8 <ticker_stop_op_cb>:
static uint8_t preempt_stop_ack;
static uint8_t preempt_req;
static uint8_t volatile preempt_ack;

static void ticker_stop_op_cb(uint32_t status, void *param)
{
   3a1b8:	b510      	push	{r4, lr}
	ARG_UNUSED(param);
	ARG_UNUSED(status);

	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   3a1ba:	4b0e      	ldr	r3, [pc, #56]	; (3a1f4 <ticker_stop_op_cb+0x3c>)
   3a1bc:	4c0e      	ldr	r4, [pc, #56]	; (3a1f8 <ticker_stop_op_cb+0x40>)
   3a1be:	781a      	ldrb	r2, [r3, #0]
   3a1c0:	7823      	ldrb	r3, [r4, #0]
   3a1c2:	429a      	cmp	r2, r3
   3a1c4:	d006      	beq.n	3a1d4 <ticker_stop_op_cb+0x1c>
	preempt_stop_ack++;

	preempt_req = preempt_ack;
   3a1c6:	490d      	ldr	r1, [pc, #52]	; (3a1fc <ticker_stop_op_cb+0x44>)
   3a1c8:	4a0d      	ldr	r2, [pc, #52]	; (3a200 <ticker_stop_op_cb+0x48>)
   3a1ca:	7809      	ldrb	r1, [r1, #0]
   3a1cc:	7011      	strb	r1, [r2, #0]
	preempt_stop_ack++;
   3a1ce:	3301      	adds	r3, #1
   3a1d0:	7023      	strb	r3, [r4, #0]
}
   3a1d2:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   3a1d4:	4a0b      	ldr	r2, [pc, #44]	; (3a204 <ticker_stop_op_cb+0x4c>)
   3a1d6:	490c      	ldr	r1, [pc, #48]	; (3a208 <ticker_stop_op_cb+0x50>)
   3a1d8:	480c      	ldr	r0, [pc, #48]	; (3a20c <ticker_stop_op_cb+0x54>)
   3a1da:	f240 3301 	movw	r3, #769	; 0x301
   3a1de:	f008 fb71 	bl	428c4 <printk>
   3a1e2:	4040      	eors	r0, r0
   3a1e4:	f380 8811 	msr	BASEPRI, r0
   3a1e8:	f04f 0003 	mov.w	r0, #3
   3a1ec:	df02      	svc	2
	preempt_stop_ack++;
   3a1ee:	7823      	ldrb	r3, [r4, #0]
   3a1f0:	e7e9      	b.n	3a1c6 <ticker_stop_op_cb+0xe>
   3a1f2:	bf00      	nop
   3a1f4:	20003c18 	.word	0x20003c18
   3a1f8:	20003c17 	.word	0x20003c17
   3a1fc:	20003c15 	.word	0x20003c15
   3a200:	20003c16 	.word	0x20003c16
   3a204:	0004a5a0 	.word	0x0004a5a0
   3a208:	0004a5e8 	.word	0x0004a5e8
   3a20c:	00049c68 	.word	0x00049c68

0003a210 <ticker_start_op_cb>:

static void ticker_start_op_cb(uint32_t status, void *param)
{
   3a210:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(param);
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   3a212:	b9f8      	cbnz	r0, 3a254 <ticker_start_op_cb+0x44>

	LL_ASSERT(preempt_start_req != preempt_start_ack);
   3a214:	4b1e      	ldr	r3, [pc, #120]	; (3a290 <ticker_start_op_cb+0x80>)
   3a216:	4d1f      	ldr	r5, [pc, #124]	; (3a294 <ticker_start_op_cb+0x84>)
   3a218:	781a      	ldrb	r2, [r3, #0]
   3a21a:	782b      	ldrb	r3, [r5, #0]
   3a21c:	429a      	cmp	r2, r3
   3a21e:	d027      	beq.n	3a270 <ticker_start_op_cb+0x60>
	preempt_start_ack++;

	LL_ASSERT(preempt_req == preempt_ack);
   3a220:	4a1d      	ldr	r2, [pc, #116]	; (3a298 <ticker_start_op_cb+0x88>)
   3a222:	4c1e      	ldr	r4, [pc, #120]	; (3a29c <ticker_start_op_cb+0x8c>)
   3a224:	7812      	ldrb	r2, [r2, #0]
   3a226:	7821      	ldrb	r1, [r4, #0]
	preempt_start_ack++;
   3a228:	3301      	adds	r3, #1
	LL_ASSERT(preempt_req == preempt_ack);
   3a22a:	4291      	cmp	r1, r2
	preempt_start_ack++;
   3a22c:	702b      	strb	r3, [r5, #0]
	LL_ASSERT(preempt_req == preempt_ack);
   3a22e:	b2d3      	uxtb	r3, r2
   3a230:	d00d      	beq.n	3a24e <ticker_start_op_cb+0x3e>
   3a232:	4a1b      	ldr	r2, [pc, #108]	; (3a2a0 <ticker_start_op_cb+0x90>)
   3a234:	491b      	ldr	r1, [pc, #108]	; (3a2a4 <ticker_start_op_cb+0x94>)
   3a236:	481c      	ldr	r0, [pc, #112]	; (3a2a8 <ticker_start_op_cb+0x98>)
   3a238:	f240 330f 	movw	r3, #783	; 0x30f
   3a23c:	f008 fb42 	bl	428c4 <printk>
   3a240:	4040      	eors	r0, r0
   3a242:	f380 8811 	msr	BASEPRI, r0
   3a246:	f04f 0003 	mov.w	r0, #3
   3a24a:	df02      	svc	2
	preempt_req++;
   3a24c:	7823      	ldrb	r3, [r4, #0]
   3a24e:	3301      	adds	r3, #1
   3a250:	7023      	strb	r3, [r4, #0]
}
   3a252:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   3a254:	4a12      	ldr	r2, [pc, #72]	; (3a2a0 <ticker_start_op_cb+0x90>)
   3a256:	4915      	ldr	r1, [pc, #84]	; (3a2ac <ticker_start_op_cb+0x9c>)
   3a258:	4813      	ldr	r0, [pc, #76]	; (3a2a8 <ticker_start_op_cb+0x98>)
   3a25a:	f240 330a 	movw	r3, #778	; 0x30a
   3a25e:	f008 fb31 	bl	428c4 <printk>
   3a262:	4040      	eors	r0, r0
   3a264:	f380 8811 	msr	BASEPRI, r0
   3a268:	f04f 0003 	mov.w	r0, #3
   3a26c:	df02      	svc	2
   3a26e:	e7d1      	b.n	3a214 <ticker_start_op_cb+0x4>
	LL_ASSERT(preempt_start_req != preempt_start_ack);
   3a270:	4a0b      	ldr	r2, [pc, #44]	; (3a2a0 <ticker_start_op_cb+0x90>)
   3a272:	490f      	ldr	r1, [pc, #60]	; (3a2b0 <ticker_start_op_cb+0xa0>)
   3a274:	480c      	ldr	r0, [pc, #48]	; (3a2a8 <ticker_start_op_cb+0x98>)
   3a276:	f44f 7343 	mov.w	r3, #780	; 0x30c
   3a27a:	f008 fb23 	bl	428c4 <printk>
   3a27e:	4040      	eors	r0, r0
   3a280:	f380 8811 	msr	BASEPRI, r0
   3a284:	f04f 0003 	mov.w	r0, #3
   3a288:	df02      	svc	2
	preempt_start_ack++;
   3a28a:	782b      	ldrb	r3, [r5, #0]
   3a28c:	e7c8      	b.n	3a220 <ticker_start_op_cb+0x10>
   3a28e:	bf00      	nop
   3a290:	20003c1a 	.word	0x20003c1a
   3a294:	20003c19 	.word	0x20003c19
   3a298:	20003c15 	.word	0x20003c15
   3a29c:	20003c16 	.word	0x20003c16
   3a2a0:	0004a5a0 	.word	0x0004a5a0
   3a2a4:	0004a638 	.word	0x0004a638
   3a2a8:	00049c68 	.word	0x00049c68
   3a2ac:	0004a13c 	.word	0x0004a13c
   3a2b0:	0004a610 	.word	0x0004a610

0003a2b4 <isr_race>:
	radio_status_reset();
   3a2b4:	f002 b918 	b.w	3c4e8 <radio_status_reset>

0003a2b8 <preempt_ticker_cb>:
}

static void preempt_ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
			      uint32_t remainder, uint16_t lazy, uint8_t force,
			      void *param)
{
   3a2b8:	b510      	push	{r4, lr}
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	LL_ASSERT(preempt_ack != preempt_req);
   3a2ba:	4a18      	ldr	r2, [pc, #96]	; (3a31c <preempt_ticker_cb+0x64>)
   3a2bc:	4c18      	ldr	r4, [pc, #96]	; (3a320 <preempt_ticker_cb+0x68>)
   3a2be:	7812      	ldrb	r2, [r2, #0]
   3a2c0:	7823      	ldrb	r3, [r4, #0]
   3a2c2:	429a      	cmp	r2, r3
   3a2c4:	d01b      	beq.n	3a2fe <preempt_ticker_cb+0x46>
	preempt_ack++;
   3a2c6:	7821      	ldrb	r1, [r4, #0]

	mfy.param = param;
   3a2c8:	4b16      	ldr	r3, [pc, #88]	; (3a324 <preempt_ticker_cb+0x6c>)
	preempt_ack++;
   3a2ca:	3101      	adds	r1, #1
   3a2cc:	b2c9      	uxtb	r1, r1
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   3a2ce:	2200      	movs	r2, #0
	preempt_ack++;
   3a2d0:	7021      	strb	r1, [r4, #0]
	mfy.param = param;
   3a2d2:	9903      	ldr	r1, [sp, #12]
   3a2d4:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   3a2d6:	2001      	movs	r0, #1
   3a2d8:	4611      	mov	r1, r2
   3a2da:	f7f5 fc59 	bl	2fb90 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   3a2de:	b900      	cbnz	r0, 3a2e2 <preempt_ticker_cb+0x2a>
}
   3a2e0:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   3a2e2:	4a11      	ldr	r2, [pc, #68]	; (3a328 <preempt_ticker_cb+0x70>)
   3a2e4:	4911      	ldr	r1, [pc, #68]	; (3a32c <preempt_ticker_cb+0x74>)
   3a2e6:	4812      	ldr	r0, [pc, #72]	; (3a330 <preempt_ticker_cb+0x78>)
   3a2e8:	f240 3376 	movw	r3, #886	; 0x376
   3a2ec:	f008 faea 	bl	428c4 <printk>
   3a2f0:	4040      	eors	r0, r0
   3a2f2:	f380 8811 	msr	BASEPRI, r0
   3a2f6:	f04f 0003 	mov.w	r0, #3
   3a2fa:	df02      	svc	2
}
   3a2fc:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_ack != preempt_req);
   3a2fe:	4a0a      	ldr	r2, [pc, #40]	; (3a328 <preempt_ticker_cb+0x70>)
   3a300:	490c      	ldr	r1, [pc, #48]	; (3a334 <preempt_ticker_cb+0x7c>)
   3a302:	480b      	ldr	r0, [pc, #44]	; (3a330 <preempt_ticker_cb+0x78>)
   3a304:	f44f 735c 	mov.w	r3, #880	; 0x370
   3a308:	f008 fadc 	bl	428c4 <printk>
   3a30c:	4040      	eors	r0, r0
   3a30e:	f380 8811 	msr	BASEPRI, r0
   3a312:	f04f 0003 	mov.w	r0, #3
   3a316:	df02      	svc	2
   3a318:	e7d5      	b.n	3a2c6 <preempt_ticker_cb+0xe>
   3a31a:	bf00      	nop
   3a31c:	20003c16 	.word	0x20003c16
   3a320:	20003c15 	.word	0x20003c15
   3a324:	20000790 	.word	0x20000790
   3a328:	0004a5a0 	.word	0x0004a5a0
   3a32c:	00049f00 	.word	0x00049f00
   3a330:	00049c68 	.word	0x00049c68
   3a334:	0004a654 	.word	0x0004a654

0003a338 <preempt_ticker_stop>:
{
   3a338:	b510      	push	{r4, lr}
	if ((preempt_stop_req != preempt_stop_ack) ||
   3a33a:	4917      	ldr	r1, [pc, #92]	; (3a398 <preempt_ticker_stop+0x60>)
   3a33c:	4a17      	ldr	r2, [pc, #92]	; (3a39c <preempt_ticker_stop+0x64>)
   3a33e:	780b      	ldrb	r3, [r1, #0]
   3a340:	7812      	ldrb	r2, [r2, #0]
   3a342:	429a      	cmp	r2, r3
{
   3a344:	b082      	sub	sp, #8
	if ((preempt_stop_req != preempt_stop_ack) ||
   3a346:	d122      	bne.n	3a38e <preempt_ticker_stop+0x56>
	    (preempt_req == preempt_ack)) {
   3a348:	4b15      	ldr	r3, [pc, #84]	; (3a3a0 <preempt_ticker_stop+0x68>)
   3a34a:	4a16      	ldr	r2, [pc, #88]	; (3a3a4 <preempt_ticker_stop+0x6c>)
   3a34c:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_stop_req != preempt_stop_ack) ||
   3a34e:	7812      	ldrb	r2, [r2, #0]
   3a350:	429a      	cmp	r2, r3
   3a352:	d01c      	beq.n	3a38e <preempt_ticker_stop+0x56>
	preempt_stop_req++;
   3a354:	7808      	ldrb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   3a356:	4b14      	ldr	r3, [pc, #80]	; (3a3a8 <preempt_ticker_stop+0x70>)
	preempt_stop_req++;
   3a358:	3001      	adds	r0, #1
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   3a35a:	2200      	movs	r2, #0
	preempt_stop_req++;
   3a35c:	b2c0      	uxtb	r0, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   3a35e:	9200      	str	r2, [sp, #0]
	preempt_stop_req++;
   3a360:	7008      	strb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   3a362:	4611      	mov	r1, r2
   3a364:	4610      	mov	r0, r2
   3a366:	f7f6 fe3f 	bl	30fe8 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   3a36a:	4604      	mov	r4, r0
   3a36c:	b178      	cbz	r0, 3a38e <preempt_ticker_stop+0x56>
   3a36e:	2802      	cmp	r0, #2
   3a370:	d00e      	beq.n	3a390 <preempt_ticker_stop+0x58>
   3a372:	4a0e      	ldr	r2, [pc, #56]	; (3a3ac <preempt_ticker_stop+0x74>)
   3a374:	490e      	ldr	r1, [pc, #56]	; (3a3b0 <preempt_ticker_stop+0x78>)
   3a376:	480f      	ldr	r0, [pc, #60]	; (3a3b4 <preempt_ticker_stop+0x7c>)
   3a378:	f240 3362 	movw	r3, #866	; 0x362
   3a37c:	f008 faa2 	bl	428c4 <printk>
   3a380:	4040      	eors	r0, r0
   3a382:	f380 8811 	msr	BASEPRI, r0
   3a386:	f04f 0003 	mov.w	r0, #3
   3a38a:	df02      	svc	2
   3a38c:	e000      	b.n	3a390 <preempt_ticker_stop+0x58>
		return TICKER_STATUS_SUCCESS;
   3a38e:	2400      	movs	r4, #0
}
   3a390:	4620      	mov	r0, r4
   3a392:	b002      	add	sp, #8
   3a394:	bd10      	pop	{r4, pc}
   3a396:	bf00      	nop
   3a398:	20003c18 	.word	0x20003c18
   3a39c:	20003c17 	.word	0x20003c17
   3a3a0:	20003c15 	.word	0x20003c15
   3a3a4:	20003c16 	.word	0x20003c16
   3a3a8:	0003a1b9 	.word	0x0003a1b9
   3a3ac:	0004a5a0 	.word	0x0004a5a0
   3a3b0:	00049fd4 	.word	0x00049fd4
   3a3b4:	00049c68 	.word	0x00049c68

0003a3b8 <preempt_ticker_start>:
{
   3a3b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull = HDR_LLL2ULL(p->param);
   3a3bc:	68cb      	ldr	r3, [r1, #12]
	preempt_anchor = p->ticks_at_expire;
   3a3be:	f8d1 8000 	ldr.w	r8, [r1]
	ull = HDR_LLL2ULL(p->param);
   3a3c2:	681a      	ldr	r2, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   3a3c4:	4b2a      	ldr	r3, [pc, #168]	; (3a470 <preempt_ticker_start+0xb8>)
   3a3c6:	4f2b      	ldr	r7, [pc, #172]	; (3a474 <preempt_ticker_start+0xbc>)
	preempt_to = MAX(ull->ticks_active_to_start,
   3a3c8:	68d6      	ldr	r6, [r2, #12]
{
   3a3ca:	460d      	mov	r5, r1
   3a3cc:	4604      	mov	r4, r0
	if ((preempt_start_req != preempt_start_ack) ||
   3a3ce:	7819      	ldrb	r1, [r3, #0]
	preempt_to = MAX(ull->ticks_active_to_start,
   3a3d0:	6890      	ldr	r0, [r2, #8]
   3a3d2:	6853      	ldr	r3, [r2, #4]
   3a3d4:	4298      	cmp	r0, r3
   3a3d6:	bf2c      	ite	cs
   3a3d8:	ebc6 0600 	rsbcs	r6, r6, r0
   3a3dc:	ebc6 0603 	rsbcc	r6, r6, r3
	if ((preempt_start_req != preempt_start_ack) ||
   3a3e0:	783b      	ldrb	r3, [r7, #0]
   3a3e2:	4299      	cmp	r1, r3
{
   3a3e4:	b08a      	sub	sp, #40	; 0x28
	ticks_at_preempt_new = preempt_anchor + preempt_to;
   3a3e6:	eb08 0906 	add.w	r9, r8, r6
	if ((preempt_start_req != preempt_start_ack) ||
   3a3ea:	d033      	beq.n	3a454 <preempt_ticker_start+0x9c>
		if (!prev || prev->is_aborted ||
   3a3ec:	2c00      	cmp	r4, #0
   3a3ee:	d03a      	beq.n	3a466 <preempt_ticker_start+0xae>
   3a3f0:	7f23      	ldrb	r3, [r4, #28]
   3a3f2:	079b      	lsls	r3, r3, #30
   3a3f4:	d437      	bmi.n	3a466 <preempt_ticker_start+0xae>
		diff = ticks_at_preempt_new - ticks_at_preempt;
   3a3f6:	f8df a080 	ldr.w	sl, [pc, #128]	; 3a478 <preempt_ticker_start+0xc0>
   3a3fa:	f8da 0000 	ldr.w	r0, [sl]
   3a3fe:	eba9 0000 	sub.w	r0, r9, r0
		if (!prev || prev->is_aborted ||
   3a402:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
   3a406:	d022      	beq.n	3a44e <preempt_ticker_start+0x96>
		preempt_ticker_stop();
   3a408:	f7ff ff96 	bl	3a338 <preempt_ticker_stop>
		prev->is_aborted = 1U;
   3a40c:	7f23      	ldrb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   3a40e:	68e1      	ldr	r1, [r4, #12]
		ticks_at_preempt = ticks_at_preempt_new;
   3a410:	f8ca 9000 	str.w	r9, [sl]
		prev->is_aborted = 1U;
   3a414:	f043 0302 	orr.w	r3, r3, #2
   3a418:	7723      	strb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   3a41a:	4620      	mov	r0, r4
   3a41c:	69a3      	ldr	r3, [r4, #24]
   3a41e:	4798      	blx	r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   3a420:	4b16      	ldr	r3, [pc, #88]	; (3a47c <preempt_ticker_start+0xc4>)
	ticks_at_preempt = ticks_at_preempt_new;
   3a422:	f8ca 9000 	str.w	r9, [sl]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   3a426:	e9cd 3507 	strd	r3, r5, [sp, #28]
   3a42a:	4b15      	ldr	r3, [pc, #84]	; (3a480 <preempt_ticker_start+0xc8>)
   3a42c:	9600      	str	r6, [sp, #0]
   3a42e:	2200      	movs	r2, #0
   3a430:	e9cd 3505 	strd	r3, r5, [sp, #20]
   3a434:	e9cd 2203 	strd	r2, r2, [sp, #12]
   3a438:	e9cd 2201 	strd	r2, r2, [sp, #4]
	preempt_start_req++;
   3a43c:	783c      	ldrb	r4, [r7, #0]
   3a43e:	3401      	adds	r4, #1
   3a440:	b2e4      	uxtb	r4, r4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   3a442:	4643      	mov	r3, r8
   3a444:	4611      	mov	r1, r2
   3a446:	4610      	mov	r0, r2
	preempt_start_req++;
   3a448:	703c      	strb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   3a44a:	f7f6 fd41 	bl	30ed0 <ticker_start>
}
   3a44e:	b00a      	add	sp, #40	; 0x28
   3a450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    (preempt_req != preempt_ack)) {
   3a454:	4b0b      	ldr	r3, [pc, #44]	; (3a484 <preempt_ticker_start+0xcc>)
   3a456:	4a0c      	ldr	r2, [pc, #48]	; (3a488 <preempt_ticker_start+0xd0>)
   3a458:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   3a45a:	7812      	ldrb	r2, [r2, #0]
   3a45c:	429a      	cmp	r2, r3
   3a45e:	d1c5      	bne.n	3a3ec <preempt_ticker_start+0x34>
   3a460:	f8df a014 	ldr.w	sl, [pc, #20]	; 3a478 <preempt_ticker_start+0xc0>
   3a464:	e7dc      	b.n	3a420 <preempt_ticker_start+0x68>
			return TICKER_STATUS_SUCCESS;
   3a466:	2000      	movs	r0, #0
}
   3a468:	b00a      	add	sp, #40	; 0x28
   3a46a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3a46e:	bf00      	nop
   3a470:	20003c19 	.word	0x20003c19
   3a474:	20003c1a 	.word	0x20003c1a
   3a478:	20002a20 	.word	0x20002a20
   3a47c:	0003a211 	.word	0x0003a211
   3a480:	0003a2b9 	.word	0x0003a2b9
   3a484:	20003c15 	.word	0x20003c15
   3a488:	20003c16 	.word	0x20003c16

0003a48c <preempt>:

static void preempt(void *param)
{
   3a48c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
   3a48e:	4e4b      	ldr	r6, [pc, #300]	; (3a5bc <preempt+0x130>)
   3a490:	68b3      	ldr	r3, [r6, #8]
{
   3a492:	b089      	sub	sp, #36	; 0x24
	if (!event.curr.abort_cb || !event.curr.param) {
   3a494:	b15b      	cbz	r3, 3a4ae <preempt+0x22>
   3a496:	6833      	ldr	r3, [r6, #0]
   3a498:	b14b      	cbz	r3, 3a4ae <preempt+0x22>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
   3a49a:	23ff      	movs	r3, #255	; 0xff
   3a49c:	4605      	mov	r5, r0
	next = ull_prepare_dequeue_iter(&idx);
   3a49e:	f10d 000a 	add.w	r0, sp, #10
	idx = UINT8_MAX;
   3a4a2:	f88d 300a 	strb.w	r3, [sp, #10]
	next = ull_prepare_dequeue_iter(&idx);
   3a4a6:	f7f9 f835 	bl	33514 <ull_prepare_dequeue_iter>
	if (!next) {
   3a4aa:	4601      	mov	r1, r0
   3a4ac:	b930      	cbnz	r0, 3a4bc <preempt+0x30>
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
	}
}
   3a4ae:	b009      	add	sp, #36	; 0x24
   3a4b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = ull_prepare_dequeue_iter(&idx);
   3a4b2:	f7f9 f82f 	bl	33514 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   3a4b6:	4601      	mov	r1, r0
   3a4b8:	2800      	cmp	r0, #0
   3a4ba:	d0f8      	beq.n	3a4ae <preempt+0x22>
   3a4bc:	7f0b      	ldrb	r3, [r1, #28]
   3a4be:	f013 0403 	ands.w	r4, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   3a4c2:	f10d 000a 	add.w	r0, sp, #10
	while (next && (next->is_aborted || next->is_resume)) {
   3a4c6:	d1f4      	bne.n	3a4b2 <preempt+0x26>
	if (next != param) {
   3a4c8:	428d      	cmp	r5, r1
   3a4ca:	d126      	bne.n	3a51a <preempt+0x8e>
	err = event.curr.is_abort_cb(next->prepare_param.param,
   3a4cc:	6873      	ldr	r3, [r6, #4]
   3a4ce:	6831      	ldr	r1, [r6, #0]
   3a4d0:	68e8      	ldr	r0, [r5, #12]
   3a4d2:	aa03      	add	r2, sp, #12
   3a4d4:	4798      	blx	r3
	if (!err) {
   3a4d6:	4607      	mov	r7, r0
   3a4d8:	b1b0      	cbz	r0, 3a508 <preempt+0x7c>
	event.curr.abort_cb(NULL, event.curr.param);
   3a4da:	68b3      	ldr	r3, [r6, #8]
   3a4dc:	6831      	ldr	r1, [r6, #0]
   3a4de:	4620      	mov	r0, r4
   3a4e0:	4798      	blx	r3
	if (err == -EAGAIN) {
   3a4e2:	f117 0f0b 	cmn.w	r7, #11
   3a4e6:	d02c      	beq.n	3a542 <preempt+0xb6>
		LL_ASSERT(err == -ECANCELED);
   3a4e8:	378c      	adds	r7, #140	; 0x8c
   3a4ea:	d0e0      	beq.n	3a4ae <preempt+0x22>
   3a4ec:	4a34      	ldr	r2, [pc, #208]	; (3a5c0 <preempt+0x134>)
   3a4ee:	4935      	ldr	r1, [pc, #212]	; (3a5c4 <preempt+0x138>)
   3a4f0:	4835      	ldr	r0, [pc, #212]	; (3a5c8 <preempt+0x13c>)
   3a4f2:	f44f 7374 	mov.w	r3, #976	; 0x3d0
   3a4f6:	f008 f9e5 	bl	428c4 <printk>
   3a4fa:	4040      	eors	r0, r0
   3a4fc:	f380 8811 	msr	BASEPRI, r0
   3a500:	f04f 0003 	mov.w	r0, #3
   3a504:	df02      	svc	2
   3a506:	e7d2      	b.n	3a4ae <preempt+0x22>
		next->is_aborted = 1;
   3a508:	7f2b      	ldrb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   3a50a:	69aa      	ldr	r2, [r5, #24]
   3a50c:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   3a50e:	f043 0302 	orr.w	r3, r3, #2
   3a512:	772b      	strb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   3a514:	4628      	mov	r0, r5
   3a516:	4790      	blx	r2
		return;
   3a518:	e7c9      	b.n	3a4ae <preempt+0x22>
		ret = preempt_ticker_start(NULL, next);
   3a51a:	4620      	mov	r0, r4
   3a51c:	f7ff ff4c 	bl	3a3b8 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   3a520:	f030 0302 	bics.w	r3, r0, #2
   3a524:	d0c3      	beq.n	3a4ae <preempt+0x22>
   3a526:	4a26      	ldr	r2, [pc, #152]	; (3a5c0 <preempt+0x134>)
   3a528:	4928      	ldr	r1, [pc, #160]	; (3a5cc <preempt+0x140>)
   3a52a:	4827      	ldr	r0, [pc, #156]	; (3a5c8 <preempt+0x13c>)
   3a52c:	f44f 7367 	mov.w	r3, #924	; 0x39c
   3a530:	f008 f9c8 	bl	428c4 <printk>
   3a534:	4040      	eors	r0, r0
   3a536:	f380 8811 	msr	BASEPRI, r0
   3a53a:	f04f 0003 	mov.w	r0, #3
   3a53e:	df02      	svc	2
   3a540:	e7b5      	b.n	3a4ae <preempt+0x22>
		iter_idx = UINT8_MAX;
   3a542:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   3a544:	f10d 000b 	add.w	r0, sp, #11
		iter_idx = UINT8_MAX;
   3a548:	f88d 400b 	strb.w	r4, [sp, #11]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   3a54c:	f7f8 ffe2 	bl	33514 <ull_prepare_dequeue_iter>
		while (iter) {
   3a550:	b928      	cbnz	r0, 3a55e <preempt+0xd2>
   3a552:	e013      	b.n	3a57c <preempt+0xf0>
			iter = ull_prepare_dequeue_iter(&iter_idx);
   3a554:	f10d 000b 	add.w	r0, sp, #11
   3a558:	f7f8 ffdc 	bl	33514 <ull_prepare_dequeue_iter>
		while (iter) {
   3a55c:	b170      	cbz	r0, 3a57c <preempt+0xf0>
			if (!iter->is_aborted &&
   3a55e:	7f03      	ldrb	r3, [r0, #28]
   3a560:	079a      	lsls	r2, r3, #30
   3a562:	d4f7      	bmi.n	3a554 <preempt+0xc8>
			    event.curr.param == iter->prepare_param.param) {
   3a564:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   3a566:	6831      	ldr	r1, [r6, #0]
   3a568:	4291      	cmp	r1, r2
   3a56a:	d1f3      	bne.n	3a554 <preempt+0xc8>
				iter->is_aborted = 1;
   3a56c:	f043 0302 	orr.w	r3, r3, #2
   3a570:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   3a572:	6983      	ldr	r3, [r0, #24]
   3a574:	4798      	blx	r3
				iter_idx = UINT8_MAX;
   3a576:	f88d 400b 	strb.w	r4, [sp, #11]
   3a57a:	e7eb      	b.n	3a554 <preempt+0xc8>
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   3a57c:	2301      	movs	r3, #1
	prepare_param.param = event.curr.param;
   3a57e:	6830      	ldr	r0, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   3a580:	9300      	str	r3, [sp, #0]
	struct lll_prepare_param prepare_param = {0};
   3a582:	2100      	movs	r1, #0
   3a584:	e9cd 1104 	strd	r1, r1, [sp, #16]
   3a588:	9106      	str	r1, [sp, #24]
	prepare_param.param = event.curr.param;
   3a58a:	9007      	str	r0, [sp, #28]
	event.curr.param = NULL;
   3a58c:	6031      	str	r1, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   3a58e:	9b03      	ldr	r3, [sp, #12]
   3a590:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   3a594:	aa04      	add	r2, sp, #16
   3a596:	f7f8 ff7d 	bl	33494 <ull_prepare_enqueue>
		LL_ASSERT(iter);
   3a59a:	2800      	cmp	r0, #0
   3a59c:	d187      	bne.n	3a4ae <preempt+0x22>
   3a59e:	4a08      	ldr	r2, [pc, #32]	; (3a5c0 <preempt+0x134>)
   3a5a0:	490b      	ldr	r1, [pc, #44]	; (3a5d0 <preempt+0x144>)
   3a5a2:	4809      	ldr	r0, [pc, #36]	; (3a5c8 <preempt+0x13c>)
   3a5a4:	f240 33ce 	movw	r3, #974	; 0x3ce
   3a5a8:	f008 f98c 	bl	428c4 <printk>
   3a5ac:	4040      	eors	r0, r0
   3a5ae:	f380 8811 	msr	BASEPRI, r0
   3a5b2:	f04f 0003 	mov.w	r0, #3
   3a5b6:	df02      	svc	2
   3a5b8:	e779      	b.n	3a4ae <preempt+0x22>
   3a5ba:	bf00      	nop
   3a5bc:	20002a28 	.word	0x20002a28
   3a5c0:	0004a5a0 	.word	0x0004a5a0
   3a5c4:	0004a678 	.word	0x0004a678
   3a5c8:	00049c68 	.word	0x00049c68
   3a5cc:	00049fd4 	.word	0x00049fd4
   3a5d0:	0004a670 	.word	0x0004a670

0003a5d4 <lll_init>:
{
   3a5d4:	b510      	push	{r4, lr}
   3a5d6:	4816      	ldr	r0, [pc, #88]	; (3a630 <lll_init+0x5c>)
   3a5d8:	f006 fbfc 	bl	40dd4 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   3a5dc:	4b15      	ldr	r3, [pc, #84]	; (3a634 <lll_init+0x60>)
   3a5de:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   3a5e0:	b310      	cbz	r0, 3a628 <lll_init+0x54>
	event.curr.abort_cb = NULL;
   3a5e2:	4b15      	ldr	r3, [pc, #84]	; (3a638 <lll_init+0x64>)
   3a5e4:	2400      	movs	r4, #0
   3a5e6:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   3a5e8:	f000 fb02 	bl	3abf0 <lll_clock_init>
	if (err < 0) {
   3a5ec:	2800      	cmp	r0, #0
   3a5ee:	db1a      	blt.n	3a626 <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   3a5f0:	4621      	mov	r1, r4
   3a5f2:	2001      	movs	r0, #1
   3a5f4:	4622      	mov	r2, r4
   3a5f6:	f7ef fdb9 	bl	2a16c <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   3a5fa:	4622      	mov	r2, r4
   3a5fc:	200b      	movs	r0, #11
   3a5fe:	2101      	movs	r1, #1
   3a600:	f7ef fdb4 	bl	2a16c <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   3a604:	4622      	mov	r2, r4
   3a606:	4621      	mov	r1, r4
   3a608:	2018      	movs	r0, #24
   3a60a:	f7ef fdaf 	bl	2a16c <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   3a60e:	2001      	movs	r0, #1
   3a610:	f7ef fd7c 	bl	2a10c <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   3a614:	200b      	movs	r0, #11
   3a616:	f7ef fd79 	bl	2a10c <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   3a61a:	2018      	movs	r0, #24
   3a61c:	f7ef fd76 	bl	2a10c <arch_irq_enable>
	radio_setup();
   3a620:	f001 fe80 	bl	3c324 <radio_setup>
	return 0;
   3a624:	4620      	mov	r0, r4
}
   3a626:	bd10      	pop	{r4, pc}
		return -ENODEV;
   3a628:	f06f 0012 	mvn.w	r0, #18
}
   3a62c:	bd10      	pop	{r4, pc}
   3a62e:	bf00      	nop
   3a630:	0004a684 	.word	0x0004a684
   3a634:	20002a24 	.word	0x20002a24
   3a638:	20002a28 	.word	0x20002a28

0003a63c <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   3a63c:	4a05      	ldr	r2, [pc, #20]	; (3a654 <lll_csrand_get+0x18>)
{
   3a63e:	b410      	push	{r4}
   3a640:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   3a642:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   3a644:	6884      	ldr	r4, [r0, #8]
   3a646:	6824      	ldr	r4, [r4, #0]
   3a648:	b28a      	uxth	r2, r1
   3a64a:	4619      	mov	r1, r3
   3a64c:	4623      	mov	r3, r4
}
   3a64e:	bc10      	pop	{r4}
   3a650:	4718      	bx	r3
   3a652:	bf00      	nop
   3a654:	20002a24 	.word	0x20002a24

0003a658 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   3a658:	4b08      	ldr	r3, [pc, #32]	; (3a67c <lll_csrand_isr_get+0x24>)
{
   3a65a:	b430      	push	{r4, r5}
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   3a65c:	681d      	ldr	r5, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   3a65e:	68ab      	ldr	r3, [r5, #8]
   3a660:	685c      	ldr	r4, [r3, #4]
   3a662:	b134      	cbz	r4, 3a672 <lll_csrand_isr_get+0x1a>
   3a664:	b28a      	uxth	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   3a666:	46a4      	mov	ip, r4
   3a668:	4601      	mov	r1, r0
   3a66a:	2300      	movs	r3, #0
   3a66c:	4628      	mov	r0, r5
}
   3a66e:	bc30      	pop	{r4, r5}
   3a670:	4760      	bx	ip
   3a672:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3a676:	bc30      	pop	{r4, r5}
   3a678:	4770      	bx	lr
   3a67a:	bf00      	nop
   3a67c:	20002a24 	.word	0x20002a24

0003a680 <lll_rand_isr_get>:
int lll_rand_isr_get(void *buf, size_t len)
   3a680:	4b08      	ldr	r3, [pc, #32]	; (3a6a4 <lll_rand_isr_get+0x24>)
   3a682:	b430      	push	{r4, r5}
   3a684:	681d      	ldr	r5, [r3, #0]
   3a686:	68ab      	ldr	r3, [r5, #8]
   3a688:	685c      	ldr	r4, [r3, #4]
   3a68a:	b134      	cbz	r4, 3a69a <lll_rand_isr_get+0x1a>
   3a68c:	b28a      	uxth	r2, r1
   3a68e:	46a4      	mov	ip, r4
   3a690:	4601      	mov	r1, r0
   3a692:	2300      	movs	r3, #0
   3a694:	4628      	mov	r0, r5
   3a696:	bc30      	pop	{r4, r5}
   3a698:	4760      	bx	ip
   3a69a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3a69e:	bc30      	pop	{r4, r5}
   3a6a0:	4770      	bx	lr
   3a6a2:	bf00      	nop
   3a6a4:	20002a24 	.word	0x20002a24

0003a6a8 <lll_reset>:
}
   3a6a8:	2000      	movs	r0, #0
   3a6aa:	4770      	bx	lr

0003a6ac <lll_disable>:
{
   3a6ac:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   3a6ae:	4604      	mov	r4, r0
{
   3a6b0:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   3a6b2:	b378      	cbz	r0, 3a714 <lll_disable+0x68>
   3a6b4:	4b23      	ldr	r3, [pc, #140]	; (3a744 <lll_disable+0x98>)
   3a6b6:	681a      	ldr	r2, [r3, #0]
   3a6b8:	4282      	cmp	r2, r0
   3a6ba:	d025      	beq.n	3a708 <lll_disable+0x5c>
		idx = UINT8_MAX;
   3a6bc:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   3a6be:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   3a6c2:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   3a6c6:	f7f8 ff25 	bl	33514 <ull_prepare_dequeue_iter>
		while (next) {
   3a6ca:	b938      	cbnz	r0, 3a6dc <lll_disable+0x30>
   3a6cc:	e01a      	b.n	3a704 <lll_disable+0x58>
			    (!param || (param == next->prepare_param.param))) {
   3a6ce:	42a1      	cmp	r1, r4
   3a6d0:	d00a      	beq.n	3a6e8 <lll_disable+0x3c>
			next = ull_prepare_dequeue_iter(&idx);
   3a6d2:	f10d 0007 	add.w	r0, sp, #7
   3a6d6:	f7f8 ff1d 	bl	33514 <ull_prepare_dequeue_iter>
		while (next) {
   3a6da:	b198      	cbz	r0, 3a704 <lll_disable+0x58>
			if (!next->is_aborted &&
   3a6dc:	7f03      	ldrb	r3, [r0, #28]
   3a6de:	079b      	lsls	r3, r3, #30
   3a6e0:	d4f7      	bmi.n	3a6d2 <lll_disable+0x26>
			    (!param || (param == next->prepare_param.param))) {
   3a6e2:	68c1      	ldr	r1, [r0, #12]
			if (!next->is_aborted &&
   3a6e4:	2c00      	cmp	r4, #0
   3a6e6:	d1f2      	bne.n	3a6ce <lll_disable+0x22>
				next->is_aborted = 1;
   3a6e8:	7f03      	ldrb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   3a6ea:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   3a6ec:	f043 0302 	orr.w	r3, r3, #2
   3a6f0:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   3a6f2:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   3a6f4:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   3a6f8:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   3a6fc:	f7f8 ff0a 	bl	33514 <ull_prepare_dequeue_iter>
		while (next) {
   3a700:	2800      	cmp	r0, #0
   3a702:	d1eb      	bne.n	3a6dc <lll_disable+0x30>
}
   3a704:	b003      	add	sp, #12
   3a706:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   3a708:	689b      	ldr	r3, [r3, #8]
   3a70a:	b16b      	cbz	r3, 3a728 <lll_disable+0x7c>
   3a70c:	4601      	mov	r1, r0
			event.curr.abort_cb(NULL, event.curr.param);
   3a70e:	2000      	movs	r0, #0
   3a710:	4798      	blx	r3
   3a712:	e7d3      	b.n	3a6bc <lll_disable+0x10>
		if (event.curr.abort_cb && event.curr.param) {
   3a714:	4a0b      	ldr	r2, [pc, #44]	; (3a744 <lll_disable+0x98>)
   3a716:	6893      	ldr	r3, [r2, #8]
   3a718:	2b00      	cmp	r3, #0
   3a71a:	d0cf      	beq.n	3a6bc <lll_disable+0x10>
   3a71c:	6811      	ldr	r1, [r2, #0]
   3a71e:	2900      	cmp	r1, #0
   3a720:	d0cc      	beq.n	3a6bc <lll_disable+0x10>
			event.curr.abort_cb(NULL, event.curr.param);
   3a722:	2000      	movs	r0, #0
   3a724:	4798      	blx	r3
   3a726:	e7c9      	b.n	3a6bc <lll_disable+0x10>
			LL_ASSERT(!param);
   3a728:	4a07      	ldr	r2, [pc, #28]	; (3a748 <lll_disable+0x9c>)
   3a72a:	4908      	ldr	r1, [pc, #32]	; (3a74c <lll_disable+0xa0>)
   3a72c:	4808      	ldr	r0, [pc, #32]	; (3a750 <lll_disable+0xa4>)
   3a72e:	23fd      	movs	r3, #253	; 0xfd
   3a730:	f008 f8c8 	bl	428c4 <printk>
   3a734:	4040      	eors	r0, r0
   3a736:	f380 8811 	msr	BASEPRI, r0
   3a73a:	f04f 0003 	mov.w	r0, #3
   3a73e:	df02      	svc	2
   3a740:	e7bc      	b.n	3a6bc <lll_disable+0x10>
   3a742:	bf00      	nop
   3a744:	20002a28 	.word	0x20002a28
   3a748:	0004a5a0 	.word	0x0004a5a0
   3a74c:	0004a688 	.word	0x0004a688
   3a750:	00049c68 	.word	0x00049c68

0003a754 <lll_prepare_done>:
}
   3a754:	2000      	movs	r0, #0
   3a756:	4770      	bx	lr

0003a758 <lll_done>:
{
   3a758:	b538      	push	{r3, r4, r5, lr}
   3a75a:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   3a75c:	f7f8 fecc 	bl	334f8 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   3a760:	b154      	cbz	r4, 3a778 <lll_done+0x20>
   3a762:	b310      	cbz	r0, 3a7aa <lll_done+0x52>
			ull = HDR_LLL2ULL(param);
   3a764:	6824      	ldr	r4, [r4, #0]
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   3a766:	2000      	movs	r0, #0
   3a768:	f7f8 fef4 	bl	33554 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   3a76c:	4620      	mov	r0, r4
   3a76e:	f7f8 ff55 	bl	3361c <ull_event_done>
	LL_ASSERT(evdone);
   3a772:	b158      	cbz	r0, 3a78c <lll_done+0x34>
}
   3a774:	2000      	movs	r0, #0
   3a776:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   3a778:	4d1a      	ldr	r5, [pc, #104]	; (3a7e4 <lll_done+0x8c>)
   3a77a:	68ab      	ldr	r3, [r5, #8]
   3a77c:	b31b      	cbz	r3, 3a7c6 <lll_done+0x6e>
		param = event.curr.param;
   3a77e:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   3a780:	2300      	movs	r3, #0
   3a782:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   3a784:	602b      	str	r3, [r5, #0]
		if (param) {
   3a786:	2c00      	cmp	r4, #0
   3a788:	d1ec      	bne.n	3a764 <lll_done+0xc>
   3a78a:	e7ec      	b.n	3a766 <lll_done+0xe>
	LL_ASSERT(evdone);
   3a78c:	4a16      	ldr	r2, [pc, #88]	; (3a7e8 <lll_done+0x90>)
   3a78e:	4917      	ldr	r1, [pc, #92]	; (3a7ec <lll_done+0x94>)
   3a790:	4817      	ldr	r0, [pc, #92]	; (3a7f0 <lll_done+0x98>)
   3a792:	f240 136d 	movw	r3, #365	; 0x16d
   3a796:	f008 f895 	bl	428c4 <printk>
   3a79a:	4040      	eors	r0, r0
   3a79c:	f380 8811 	msr	BASEPRI, r0
   3a7a0:	f04f 0003 	mov.w	r0, #3
   3a7a4:	df02      	svc	2
}
   3a7a6:	2000      	movs	r0, #0
   3a7a8:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   3a7aa:	4a0f      	ldr	r2, [pc, #60]	; (3a7e8 <lll_done+0x90>)
   3a7ac:	4911      	ldr	r1, [pc, #68]	; (3a7f4 <lll_done+0x9c>)
   3a7ae:	4810      	ldr	r0, [pc, #64]	; (3a7f0 <lll_done+0x98>)
   3a7b0:	f240 1337 	movw	r3, #311	; 0x137
   3a7b4:	f008 f886 	bl	428c4 <printk>
   3a7b8:	4040      	eors	r0, r0
   3a7ba:	f380 8811 	msr	BASEPRI, r0
   3a7be:	f04f 0003 	mov.w	r0, #3
   3a7c2:	df02      	svc	2
		ull = HDR_LLL2ULL(param);
   3a7c4:	e7ce      	b.n	3a764 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   3a7c6:	4a08      	ldr	r2, [pc, #32]	; (3a7e8 <lll_done+0x90>)
   3a7c8:	490b      	ldr	r1, [pc, #44]	; (3a7f8 <lll_done+0xa0>)
   3a7ca:	4809      	ldr	r0, [pc, #36]	; (3a7f0 <lll_done+0x98>)
   3a7cc:	f240 133d 	movw	r3, #317	; 0x13d
   3a7d0:	f008 f878 	bl	428c4 <printk>
   3a7d4:	4040      	eors	r0, r0
   3a7d6:	f380 8811 	msr	BASEPRI, r0
   3a7da:	f04f 0003 	mov.w	r0, #3
   3a7de:	df02      	svc	2
   3a7e0:	e7cd      	b.n	3a77e <lll_done+0x26>
   3a7e2:	bf00      	nop
   3a7e4:	20002a28 	.word	0x20002a28
   3a7e8:	0004a5a0 	.word	0x0004a5a0
   3a7ec:	0004a6b4 	.word	0x0004a6b4
   3a7f0:	00049c68 	.word	0x00049c68
   3a7f4:	0004a690 	.word	0x0004a690
   3a7f8:	0004a6a0 	.word	0x0004a6a0

0003a7fc <lll_is_abort_cb>:
}
   3a7fc:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   3a800:	4770      	bx	lr
   3a802:	bf00      	nop

0003a804 <lll_event_offset_get>:
		return MAX(ull->ticks_active_to_start,
   3a804:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   3a808:	2a00      	cmp	r2, #0
   3a80a:	db04      	blt.n	3a816 <lll_event_offset_get+0x12>
		return MAX(ull->ticks_active_to_start,
   3a80c:	429a      	cmp	r2, r3
   3a80e:	bf38      	it	cc
   3a810:	461a      	movcc	r2, r3
   3a812:	4610      	mov	r0, r2
}
   3a814:	4770      	bx	lr
		return MAX(ull->ticks_active_to_start,
   3a816:	68c0      	ldr	r0, [r0, #12]
   3a818:	4298      	cmp	r0, r3
   3a81a:	bf38      	it	cc
   3a81c:	4618      	movcc	r0, r3
   3a81e:	4770      	bx	lr

0003a820 <lll_preempt_calc>:
{
   3a820:	b510      	push	{r4, lr}
   3a822:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   3a824:	f7f6 fc22 	bl	3106c <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   3a828:	1b02      	subs	r2, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   3a82a:	0213      	lsls	r3, r2, #8
   3a82c:	d405      	bmi.n	3a83a <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   3a82e:	1cd0      	adds	r0, r2, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   3a830:	2809      	cmp	r0, #9
   3a832:	bf94      	ite	ls
   3a834:	2000      	movls	r0, #0
   3a836:	2001      	movhi	r0, #1
}
   3a838:	bd10      	pop	{r4, pc}
		return 0;
   3a83a:	2000      	movs	r0, #0
}
   3a83c:	bd10      	pop	{r4, pc}
   3a83e:	bf00      	nop

0003a840 <lll_chan_set>:
	switch (chan) {
   3a840:	2826      	cmp	r0, #38	; 0x26
{
   3a842:	b510      	push	{r4, lr}
   3a844:	4604      	mov	r4, r0
	switch (chan) {
   3a846:	d01c      	beq.n	3a882 <lll_chan_set+0x42>
   3a848:	2827      	cmp	r0, #39	; 0x27
   3a84a:	d012      	beq.n	3a872 <lll_chan_set+0x32>
   3a84c:	2825      	cmp	r0, #37	; 0x25
   3a84e:	d008      	beq.n	3a862 <lll_chan_set+0x22>
		if (chan < 11) {
   3a850:	280a      	cmp	r0, #10
   3a852:	d91e      	bls.n	3a892 <lll_chan_set+0x52>
		} else if (chan < 40) {
   3a854:	2827      	cmp	r0, #39	; 0x27
   3a856:	d821      	bhi.n	3a89c <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   3a858:	3003      	adds	r0, #3
   3a85a:	0040      	lsls	r0, r0, #1
   3a85c:	f001 fdbe 	bl	3c3dc <radio_freq_chan_set>
   3a860:	e002      	b.n	3a868 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   3a862:	2002      	movs	r0, #2
   3a864:	f001 fdba 	bl	3c3dc <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   3a868:	4620      	mov	r0, r4
}
   3a86a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   3a86e:	f001 bdbb 	b.w	3c3e8 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   3a872:	2050      	movs	r0, #80	; 0x50
   3a874:	f001 fdb2 	bl	3c3dc <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   3a878:	4620      	mov	r0, r4
}
   3a87a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   3a87e:	f001 bdb3 	b.w	3c3e8 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   3a882:	201a      	movs	r0, #26
   3a884:	f001 fdaa 	bl	3c3dc <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   3a888:	4620      	mov	r0, r4
}
   3a88a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   3a88e:	f001 bdab 	b.w	3c3e8 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   3a892:	3002      	adds	r0, #2
   3a894:	0040      	lsls	r0, r0, #1
   3a896:	f001 fda1 	bl	3c3dc <radio_freq_chan_set>
   3a89a:	e7e5      	b.n	3a868 <lll_chan_set+0x28>
			LL_ASSERT(0);
   3a89c:	4a06      	ldr	r2, [pc, #24]	; (3a8b8 <lll_chan_set+0x78>)
   3a89e:	4907      	ldr	r1, [pc, #28]	; (3a8bc <lll_chan_set+0x7c>)
   3a8a0:	4807      	ldr	r0, [pc, #28]	; (3a8c0 <lll_chan_set+0x80>)
   3a8a2:	f240 13df 	movw	r3, #479	; 0x1df
   3a8a6:	f008 f80d 	bl	428c4 <printk>
   3a8aa:	4040      	eors	r0, r0
   3a8ac:	f380 8811 	msr	BASEPRI, r0
   3a8b0:	f04f 0003 	mov.w	r0, #3
   3a8b4:	df02      	svc	2
   3a8b6:	e7d7      	b.n	3a868 <lll_chan_set+0x28>
   3a8b8:	0004a5a0 	.word	0x0004a5a0
   3a8bc:	00049cc8 	.word	0x00049cc8
   3a8c0:	00049c68 	.word	0x00049c68

0003a8c4 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   3a8c4:	f001 bdee 	b.w	3c4a4 <radio_rx_ready_delay_get>

0003a8c8 <lll_isr_tx_status_reset>:
{
   3a8c8:	b508      	push	{r3, lr}
	radio_status_reset();
   3a8ca:	f001 fe0d 	bl	3c4e8 <radio_status_reset>
}
   3a8ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   3a8d2:	f001 bf5b 	b.w	3c78c <radio_tmr_status_reset>
   3a8d6:	bf00      	nop

0003a8d8 <lll_isr_rx_status_reset>:
{
   3a8d8:	b508      	push	{r3, lr}
	radio_status_reset();
   3a8da:	f001 fe05 	bl	3c4e8 <radio_status_reset>
	radio_tmr_status_reset();
   3a8de:	f001 ff55 	bl	3c78c <radio_tmr_status_reset>
}
   3a8e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   3a8e6:	f001 befd 	b.w	3c6e4 <radio_rssi_status_reset>
   3a8ea:	bf00      	nop

0003a8ec <lll_isr_status_reset>:
{
   3a8ec:	b508      	push	{r3, lr}
	radio_status_reset();
   3a8ee:	f001 fdfb 	bl	3c4e8 <radio_status_reset>
	radio_tmr_status_reset();
   3a8f2:	f001 ff4b 	bl	3c78c <radio_tmr_status_reset>
	radio_filter_status_reset();
   3a8f6:	f001 ff31 	bl	3c75c <radio_filter_status_reset>
	radio_ar_status_reset();
   3a8fa:	f002 f911 	bl	3cb20 <radio_ar_status_reset>
}
   3a8fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   3a902:	f001 beef 	b.w	3c6e4 <radio_rssi_status_reset>
   3a906:	bf00      	nop

0003a908 <lll_isr_cleanup>:
{
   3a908:	b508      	push	{r3, lr}
   3a90a:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   3a90c:	4815      	ldr	r0, [pc, #84]	; (3a964 <lll_isr_cleanup+0x5c>)
   3a90e:	f001 fce9 	bl	3c2e4 <radio_isr_set>
	if (!radio_is_idle()) {
   3a912:	f001 fe09 	bl	3c528 <radio_is_idle>
   3a916:	b150      	cbz	r0, 3a92e <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   3a918:	f001 ffdc 	bl	3c8d4 <radio_tmr_stop>
	err = lll_hfclock_off();
   3a91c:	f000 f9ac 	bl	3ac78 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   3a920:	2800      	cmp	r0, #0
   3a922:	db0c      	blt.n	3a93e <lll_isr_cleanup+0x36>
}
   3a924:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   3a928:	2000      	movs	r0, #0
   3a92a:	f7ff bf15 	b.w	3a758 <lll_done>
		radio_disable();
   3a92e:	f001 fdc7 	bl	3c4c0 <radio_disable>
	radio_tmr_stop();
   3a932:	f001 ffcf 	bl	3c8d4 <radio_tmr_stop>
	err = lll_hfclock_off();
   3a936:	f000 f99f 	bl	3ac78 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   3a93a:	2800      	cmp	r0, #0
   3a93c:	daf2      	bge.n	3a924 <lll_isr_cleanup+0x1c>
   3a93e:	4a0a      	ldr	r2, [pc, #40]	; (3a968 <lll_isr_cleanup+0x60>)
   3a940:	490a      	ldr	r1, [pc, #40]	; (3a96c <lll_isr_cleanup+0x64>)
   3a942:	480b      	ldr	r0, [pc, #44]	; (3a970 <lll_isr_cleanup+0x68>)
   3a944:	f240 2342 	movw	r3, #578	; 0x242
   3a948:	f007 ffbc 	bl	428c4 <printk>
   3a94c:	4040      	eors	r0, r0
   3a94e:	f380 8811 	msr	BASEPRI, r0
   3a952:	f04f 0003 	mov.w	r0, #3
   3a956:	df02      	svc	2
	lll_done(NULL);
   3a958:	2000      	movs	r0, #0
}
   3a95a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   3a95e:	f7ff befb 	b.w	3a758 <lll_done>
   3a962:	bf00      	nop
   3a964:	0003a2b5 	.word	0x0003a2b5
   3a968:	0004a5a0 	.word	0x0004a5a0
   3a96c:	0004a6bc 	.word	0x0004a6bc
   3a970:	00049c68 	.word	0x00049c68

0003a974 <lll_isr_abort>:
{
   3a974:	b510      	push	{r4, lr}
   3a976:	4604      	mov	r4, r0
	radio_status_reset();
   3a978:	f001 fdb6 	bl	3c4e8 <radio_status_reset>
	radio_tmr_status_reset();
   3a97c:	f001 ff06 	bl	3c78c <radio_tmr_status_reset>
	radio_filter_status_reset();
   3a980:	f001 feec 	bl	3c75c <radio_filter_status_reset>
	radio_ar_status_reset();
   3a984:	f002 f8cc 	bl	3cb20 <radio_ar_status_reset>
	radio_rssi_status_reset();
   3a988:	f001 feac 	bl	3c6e4 <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   3a98c:	4620      	mov	r0, r4
}
   3a98e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   3a992:	f7ff bfb9 	b.w	3a908 <lll_isr_cleanup>
   3a996:	bf00      	nop

0003a998 <lll_isr_early_abort>:
{
   3a998:	b508      	push	{r3, lr}
   3a99a:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   3a99c:	4813      	ldr	r0, [pc, #76]	; (3a9ec <lll_isr_early_abort+0x54>)
   3a99e:	f001 fca1 	bl	3c2e4 <radio_isr_set>
	if (!radio_is_idle()) {
   3a9a2:	f001 fdc1 	bl	3c528 <radio_is_idle>
   3a9a6:	b140      	cbz	r0, 3a9ba <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   3a9a8:	f000 f966 	bl	3ac78 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   3a9ac:	2800      	cmp	r0, #0
   3a9ae:	db0a      	blt.n	3a9c6 <lll_isr_early_abort+0x2e>
}
   3a9b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   3a9b4:	2000      	movs	r0, #0
   3a9b6:	f7ff becf 	b.w	3a758 <lll_done>
		radio_disable();
   3a9ba:	f001 fd81 	bl	3c4c0 <radio_disable>
	err = lll_hfclock_off();
   3a9be:	f000 f95b 	bl	3ac78 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   3a9c2:	2800      	cmp	r0, #0
   3a9c4:	daf4      	bge.n	3a9b0 <lll_isr_early_abort+0x18>
   3a9c6:	4a0a      	ldr	r2, [pc, #40]	; (3a9f0 <lll_isr_early_abort+0x58>)
   3a9c8:	490a      	ldr	r1, [pc, #40]	; (3a9f4 <lll_isr_early_abort+0x5c>)
   3a9ca:	480b      	ldr	r0, [pc, #44]	; (3a9f8 <lll_isr_early_abort+0x60>)
   3a9cc:	f240 2351 	movw	r3, #593	; 0x251
   3a9d0:	f007 ff78 	bl	428c4 <printk>
   3a9d4:	4040      	eors	r0, r0
   3a9d6:	f380 8811 	msr	BASEPRI, r0
   3a9da:	f04f 0003 	mov.w	r0, #3
   3a9de:	df02      	svc	2
	lll_done(NULL);
   3a9e0:	2000      	movs	r0, #0
}
   3a9e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   3a9e6:	f7ff beb7 	b.w	3a758 <lll_done>
   3a9ea:	bf00      	nop
   3a9ec:	0003a2b5 	.word	0x0003a2b5
   3a9f0:	0004a5a0 	.word	0x0004a5a0
   3a9f4:	0004a6bc 	.word	0x0004a6bc
   3a9f8:	00049c68 	.word	0x00049c68

0003a9fc <lll_prepare_resolve>:
{
   3a9fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3aa00:	b084      	sub	sp, #16
   3aa02:	4606      	mov	r6, r0
   3aa04:	461d      	mov	r5, r3
	p = ull_prepare_dequeue_iter(&idx);
   3aa06:	f10d 000f 	add.w	r0, sp, #15
	idx = UINT8_MAX;
   3aa0a:	23ff      	movs	r3, #255	; 0xff
{
   3aa0c:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	idx = UINT8_MAX;
   3aa10:	f88d 300f 	strb.w	r3, [sp, #15]
{
   3aa14:	460f      	mov	r7, r1
   3aa16:	4690      	mov	r8, r2
	p = ull_prepare_dequeue_iter(&idx);
   3aa18:	f7f8 fd7c 	bl	33514 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   3aa1c:	4604      	mov	r4, r0
   3aa1e:	b928      	cbnz	r0, 3aa2c <lll_prepare_resolve+0x30>
   3aa20:	e050      	b.n	3aac4 <lll_prepare_resolve+0xc8>
		p = ull_prepare_dequeue_iter(&idx);
   3aa22:	f7f8 fd77 	bl	33514 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   3aa26:	4604      	mov	r4, r0
   3aa28:	2800      	cmp	r0, #0
   3aa2a:	d04b      	beq.n	3aac4 <lll_prepare_resolve+0xc8>
   3aa2c:	f894 c01c 	ldrb.w	ip, [r4, #28]
   3aa30:	f01c 0f03 	tst.w	ip, #3
		p = ull_prepare_dequeue_iter(&idx);
   3aa34:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   3aa38:	d1f3      	bne.n	3aa22 <lll_prepare_resolve+0x26>
	    event.curr.abort_cb ||
   3aa3a:	f8df a140 	ldr.w	sl, [pc, #320]	; 3ab7c <lll_prepare_resolve+0x180>
	if ((!is_dequeue && !is_done_sync()) ||
   3aa3e:	f8da 3008 	ldr.w	r3, [sl, #8]
   3aa42:	2b00      	cmp	r3, #0
   3aa44:	d145      	bne.n	3aad2 <lll_prepare_resolve+0xd6>
	    (p && is_resume)) {
   3aa46:	f1b9 0f00 	cmp.w	r9, #0
   3aa4a:	d16a      	bne.n	3ab22 <lll_prepare_resolve+0x126>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   3aa4c:	42ac      	cmp	r4, r5
   3aa4e:	d00c      	beq.n	3aa6a <lll_prepare_resolve+0x6e>
   3aa50:	4a4b      	ldr	r2, [pc, #300]	; (3ab80 <lll_prepare_resolve+0x184>)
   3aa52:	494c      	ldr	r1, [pc, #304]	; (3ab84 <lll_prepare_resolve+0x188>)
   3aa54:	484c      	ldr	r0, [pc, #304]	; (3ab88 <lll_prepare_resolve+0x18c>)
   3aa56:	f240 23be 	movw	r3, #702	; 0x2be
   3aa5a:	f007 ff33 	bl	428c4 <printk>
   3aa5e:	4040      	eors	r0, r0
   3aa60:	f380 8811 	msr	BASEPRI, r0
   3aa64:	f04f 0003 	mov.w	r0, #3
   3aa68:	df02      	svc	2
	event.curr.param = prepare_param->param;
   3aa6a:	68eb      	ldr	r3, [r5, #12]
   3aa6c:	f8ca 3000 	str.w	r3, [sl]
	event.curr.abort_cb = abort_cb;
   3aa70:	e9ca 6701 	strd	r6, r7, [sl, #4]
	err = prepare_cb(prepare_param);
   3aa74:	4628      	mov	r0, r5
   3aa76:	47c0      	blx	r8
   3aa78:	4604      	mov	r4, r0
	ret = preempt_ticker_stop();
   3aa7a:	f7ff fc5d 	bl	3a338 <preempt_ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   3aa7e:	f030 0302 	bics.w	r3, r0, #2
   3aa82:	d015      	beq.n	3aab0 <lll_prepare_resolve+0xb4>
   3aa84:	4a3e      	ldr	r2, [pc, #248]	; (3ab80 <lll_prepare_resolve+0x184>)
   3aa86:	4941      	ldr	r1, [pc, #260]	; (3ab8c <lll_prepare_resolve+0x190>)
   3aa88:	483f      	ldr	r0, [pc, #252]	; (3ab88 <lll_prepare_resolve+0x18c>)
   3aa8a:	f240 23cb 	movw	r3, #715	; 0x2cb
   3aa8e:	f007 ff19 	bl	428c4 <printk>
   3aa92:	4040      	eors	r0, r0
   3aa94:	f380 8811 	msr	BASEPRI, r0
   3aa98:	f04f 0003 	mov.w	r0, #3
   3aa9c:	df02      	svc	2
		p = ull_prepare_dequeue_iter(&idx);
   3aa9e:	f10d 000f 	add.w	r0, sp, #15
   3aaa2:	f7f8 fd37 	bl	33514 <ull_prepare_dequeue_iter>
		if (!p) {
   3aaa6:	b148      	cbz	r0, 3aabc <lll_prepare_resolve+0xc0>
	} while (p->is_aborted || p->is_resume);
   3aaa8:	7f03      	ldrb	r3, [r0, #28]
   3aaaa:	f013 0303 	ands.w	r3, r3, #3
   3aaae:	d020      	beq.n	3aaf2 <lll_prepare_resolve+0xf6>
		p = ull_prepare_dequeue_iter(&idx);
   3aab0:	f10d 000f 	add.w	r0, sp, #15
   3aab4:	f7f8 fd2e 	bl	33514 <ull_prepare_dequeue_iter>
		if (!p) {
   3aab8:	2800      	cmp	r0, #0
   3aaba:	d1f5      	bne.n	3aaa8 <lll_prepare_resolve+0xac>
}
   3aabc:	4620      	mov	r0, r4
   3aabe:	b004      	add	sp, #16
   3aac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    event.curr.abort_cb ||
   3aac4:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 3ab7c <lll_prepare_resolve+0x180>
	if ((!is_dequeue && !is_done_sync()) ||
   3aac8:	f8da 3008 	ldr.w	r3, [sl, #8]
   3aacc:	2b00      	cmp	r3, #0
   3aace:	d0cc      	beq.n	3aa6a <lll_prepare_resolve+0x6e>
{
   3aad0:	2400      	movs	r4, #0
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   3aad2:	4639      	mov	r1, r7
   3aad4:	f8cd 9000 	str.w	r9, [sp]
   3aad8:	4643      	mov	r3, r8
   3aada:	462a      	mov	r2, r5
   3aadc:	4630      	mov	r0, r6
   3aade:	f7f8 fcd9 	bl	33494 <ull_prepare_enqueue>
		LL_ASSERT(next);
   3aae2:	4601      	mov	r1, r0
   3aae4:	b338      	cbz	r0, 3ab36 <lll_prepare_resolve+0x13a>
		if (is_resume) {
   3aae6:	f1b9 0f00 	cmp.w	r9, #0
   3aaea:	d033      	beq.n	3ab54 <lll_prepare_resolve+0x158>
			return -EINPROGRESS;
   3aaec:	f06f 0476 	mvn.w	r4, #118	; 0x76
   3aaf0:	e7e4      	b.n	3aabc <lll_prepare_resolve+0xc0>
	ret = preempt_ticker_start(NULL, p);
   3aaf2:	4601      	mov	r1, r0
   3aaf4:	4618      	mov	r0, r3
   3aaf6:	f7ff fc5f 	bl	3a3b8 <preempt_ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   3aafa:	f030 0302 	bics.w	r3, r0, #2
   3aafe:	d0dd      	beq.n	3aabc <lll_prepare_resolve+0xc0>
   3ab00:	4a1f      	ldr	r2, [pc, #124]	; (3ab80 <lll_prepare_resolve+0x184>)
   3ab02:	4922      	ldr	r1, [pc, #136]	; (3ab8c <lll_prepare_resolve+0x190>)
   3ab04:	4820      	ldr	r0, [pc, #128]	; (3ab88 <lll_prepare_resolve+0x18c>)
   3ab06:	f44f 7336 	mov.w	r3, #728	; 0x2d8
   3ab0a:	f007 fedb 	bl	428c4 <printk>
   3ab0e:	4040      	eors	r0, r0
   3ab10:	f380 8811 	msr	BASEPRI, r0
   3ab14:	f04f 0003 	mov.w	r0, #3
   3ab18:	df02      	svc	2
}
   3ab1a:	4620      	mov	r0, r4
   3ab1c:	b004      	add	sp, #16
   3ab1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   3ab22:	f8cd 9000 	str.w	r9, [sp]
   3ab26:	4643      	mov	r3, r8
   3ab28:	462a      	mov	r2, r5
   3ab2a:	4639      	mov	r1, r7
   3ab2c:	4630      	mov	r0, r6
   3ab2e:	f7f8 fcb1 	bl	33494 <ull_prepare_enqueue>
		LL_ASSERT(next);
   3ab32:	2800      	cmp	r0, #0
   3ab34:	d1da      	bne.n	3aaec <lll_prepare_resolve+0xf0>
   3ab36:	4a12      	ldr	r2, [pc, #72]	; (3ab80 <lll_prepare_resolve+0x184>)
   3ab38:	4915      	ldr	r1, [pc, #84]	; (3ab90 <lll_prepare_resolve+0x194>)
   3ab3a:	4813      	ldr	r0, [pc, #76]	; (3ab88 <lll_prepare_resolve+0x18c>)
   3ab3c:	f240 238d 	movw	r3, #653	; 0x28d
   3ab40:	f007 fec0 	bl	428c4 <printk>
   3ab44:	4040      	eors	r0, r0
   3ab46:	f380 8811 	msr	BASEPRI, r0
   3ab4a:	f04f 0003 	mov.w	r0, #3
   3ab4e:	df02      	svc	2
   3ab50:	2100      	movs	r1, #0
   3ab52:	e7c8      	b.n	3aae6 <lll_prepare_resolve+0xea>
		ret  = preempt_ticker_start(p, next);
   3ab54:	4620      	mov	r0, r4
   3ab56:	f7ff fc2f 	bl	3a3b8 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   3ab5a:	f030 0302 	bics.w	r3, r0, #2
   3ab5e:	d0c5      	beq.n	3aaec <lll_prepare_resolve+0xf0>
   3ab60:	4a07      	ldr	r2, [pc, #28]	; (3ab80 <lll_prepare_resolve+0x184>)
   3ab62:	490a      	ldr	r1, [pc, #40]	; (3ab8c <lll_prepare_resolve+0x190>)
   3ab64:	4808      	ldr	r0, [pc, #32]	; (3ab88 <lll_prepare_resolve+0x18c>)
   3ab66:	f44f 7326 	mov.w	r3, #664	; 0x298
   3ab6a:	f007 feab 	bl	428c4 <printk>
   3ab6e:	4040      	eors	r0, r0
   3ab70:	f380 8811 	msr	BASEPRI, r0
   3ab74:	f04f 0003 	mov.w	r0, #3
   3ab78:	df02      	svc	2
   3ab7a:	e7b7      	b.n	3aaec <lll_prepare_resolve+0xf0>
   3ab7c:	20002a28 	.word	0x20002a28
   3ab80:	0004a5a0 	.word	0x0004a5a0
   3ab84:	0004a6d0 	.word	0x0004a6d0
   3ab88:	00049c68 	.word	0x00049c68
   3ab8c:	00049fd4 	.word	0x00049fd4
   3ab90:	0004a6c8 	.word	0x0004a6c8

0003ab94 <clock_ready>:
	z_impl_k_sem_give(sem);
   3ab94:	f101 0010 	add.w	r0, r1, #16
   3ab98:	f006 bce4 	b.w	41564 <z_impl_k_sem_give>

0003ab9c <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   3ab9c:	b570      	push	{r4, r5, r6, lr}
   3ab9e:	4605      	mov	r5, r0
   3aba0:	b08a      	sub	sp, #40	; 0x28
   3aba2:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   3aba4:	2201      	movs	r2, #1
   3aba6:	2100      	movs	r1, #0
   3aba8:	a804      	add	r0, sp, #16
   3abaa:	f00d fdd0 	bl	4874e <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   3abae:	4b0f      	ldr	r3, [pc, #60]	; (3abec <blocking_on+0x50>)
   3abb0:	9301      	str	r3, [sp, #4]
   3abb2:	2600      	movs	r6, #0
   3abb4:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   3abb6:	4669      	mov	r1, sp
   3abb8:	4628      	mov	r0, r5
   3abba:	9603      	str	r6, [sp, #12]
   3abbc:	9302      	str	r3, [sp, #8]
   3abbe:	f007 ff19 	bl	429f4 <onoff_request>
	if (err < 0) {
   3abc2:	2800      	cmp	r0, #0
   3abc4:	db10      	blt.n	3abe8 <blocking_on+0x4c>
   3abc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   3abca:	4631      	mov	r1, r6
   3abcc:	f240 30e7 	movw	r0, #999	; 0x3e7
   3abd0:	fbe4 0103 	umlal	r0, r1, r4, r3
   3abd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3abd8:	2300      	movs	r3, #0
   3abda:	f7eb fa91 	bl	26100 <__aeabi_uldivmod>
   3abde:	4602      	mov	r2, r0
   3abe0:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   3abe2:	a804      	add	r0, sp, #16
   3abe4:	f006 fce4 	bl	415b0 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   3abe8:	b00a      	add	sp, #40	; 0x28
   3abea:	bd70      	pop	{r4, r5, r6, pc}
   3abec:	0003ab95 	.word	0x0003ab95

0003abf0 <lll_clock_init>:

int lll_clock_init(void)
{
   3abf0:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   3abf2:	2001      	movs	r0, #1
   3abf4:	f003 fb0e 	bl	3e214 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   3abf8:	4904      	ldr	r1, [pc, #16]	; (3ac0c <lll_clock_init+0x1c>)
   3abfa:	2300      	movs	r3, #0
   3abfc:	2401      	movs	r4, #1
   3abfe:	608c      	str	r4, [r1, #8]
   3ac00:	604b      	str	r3, [r1, #4]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   3ac02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3ac06:	60cb      	str	r3, [r1, #12]
	return onoff_request(mgr, &lf_cli);
   3ac08:	f007 bef4 	b.w	429f4 <onoff_request>
   3ac0c:	20002a38 	.word	0x20002a38

0003ac10 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   3ac10:	4b0c      	ldr	r3, [pc, #48]	; (3ac44 <lll_clock_wait+0x34>)
   3ac12:	781a      	ldrb	r2, [r3, #0]
   3ac14:	b10a      	cbz	r2, 3ac1a <lll_clock_wait+0xa>
		return 0;
   3ac16:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   3ac18:	4770      	bx	lr
{
   3ac1a:	b510      	push	{r4, lr}
	done = true;
   3ac1c:	2001      	movs	r0, #1
   3ac1e:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   3ac20:	f003 faf8 	bl	3e214 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   3ac24:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   3ac28:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   3ac2a:	f7ff ffb7 	bl	3ab9c <blocking_on>
	if (err) {
   3ac2e:	b938      	cbnz	r0, 3ac40 <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   3ac30:	4620      	mov	r0, r4
   3ac32:	f007 ff37 	bl	42aa4 <onoff_release>
	if (err != ONOFF_STATE_ON) {
   3ac36:	2802      	cmp	r0, #2
		return 0;
   3ac38:	bf0c      	ite	eq
   3ac3a:	2000      	moveq	r0, #0
		return -EIO;
   3ac3c:	f06f 0004 	mvnne.w	r0, #4
}
   3ac40:	bd10      	pop	{r4, pc}
   3ac42:	bf00      	nop
   3ac44:	20003c1b 	.word	0x20003c1b

0003ac48 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   3ac48:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   3ac4a:	4b0a      	ldr	r3, [pc, #40]	; (3ac74 <lll_hfclock_on+0x2c>)
   3ac4c:	f3bf 8f5b 	dmb	ish
   3ac50:	e853 2f00 	ldrex	r2, [r3]
   3ac54:	1c51      	adds	r1, r2, #1
   3ac56:	e843 1000 	strex	r0, r1, [r3]
   3ac5a:	2800      	cmp	r0, #0
   3ac5c:	d1f8      	bne.n	3ac50 <lll_hfclock_on+0x8>
   3ac5e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   3ac62:	2a00      	cmp	r2, #0
   3ac64:	dd01      	ble.n	3ac6a <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   3ac66:	2000      	movs	r0, #0
   3ac68:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   3ac6a:	f003 fadb 	bl	3e224 <z_nrf_clock_bt_ctlr_hf_request>
}
   3ac6e:	2000      	movs	r0, #0
   3ac70:	bd08      	pop	{r3, pc}
   3ac72:	bf00      	nop
   3ac74:	20002a34 	.word	0x20002a34

0003ac78 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   3ac78:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   3ac7a:	4b0c      	ldr	r3, [pc, #48]	; (3acac <lll_hfclock_off+0x34>)
   3ac7c:	681a      	ldr	r2, [r3, #0]
   3ac7e:	2a00      	cmp	r2, #0
   3ac80:	dd11      	ble.n	3aca6 <lll_hfclock_off+0x2e>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   3ac82:	f3bf 8f5b 	dmb	ish
   3ac86:	e853 2f00 	ldrex	r2, [r3]
   3ac8a:	1e51      	subs	r1, r2, #1
   3ac8c:	e843 1000 	strex	r0, r1, [r3]
   3ac90:	2800      	cmp	r0, #0
   3ac92:	d1f8      	bne.n	3ac86 <lll_hfclock_off+0xe>
   3ac94:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   3ac98:	2a01      	cmp	r2, #1
   3ac9a:	dd01      	ble.n	3aca0 <lll_hfclock_off+0x28>
		return 0;
   3ac9c:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   3ac9e:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   3aca0:	f003 fad6 	bl	3e250 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   3aca4:	e7fa      	b.n	3ac9c <lll_hfclock_off+0x24>
		return -EALREADY;
   3aca6:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   3acaa:	bd08      	pop	{r3, pc}
   3acac:	20002a34 	.word	0x20002a34

0003acb0 <lll_clock_ppm_local_get>:
}

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   3acb0:	2032      	movs	r0, #50	; 0x32
   3acb2:	4770      	bx	lr

0003acb4 <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   3acb4:	4b01      	ldr	r3, [pc, #4]	; (3acbc <lll_clock_ppm_get+0x8>)
}
   3acb6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   3acba:	4770      	bx	lr
   3acbc:	0004a6fc 	.word	0x0004a6fc

0003acc0 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   3acc0:	b510      	push	{r4, lr}
   3acc2:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   3acc4:	f7ff fe12 	bl	3a8ec <lll_isr_status_reset>

	radio_filter_disable();
   3acc8:	f001 fd3e 	bl	3c748 <radio_filter_disable>

	lll_isr_cleanup(param);
   3accc:	4620      	mov	r0, r4
}
   3acce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   3acd2:	f7ff be19 	b.w	3a908 <lll_isr_cleanup>
   3acd6:	bf00      	nop

0003acd8 <isr_tx>:
{
   3acd8:	b530      	push	{r4, r5, lr}
   3acda:	b083      	sub	sp, #12
   3acdc:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   3acde:	f7ff fdf3 	bl	3a8c8 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   3ace2:	2096      	movs	r0, #150	; 0x96
   3ace4:	f001 fd62 	bl	3c7ac <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, phy_flags);
   3ace8:	2300      	movs	r3, #0
   3acea:	4618      	mov	r0, r3
   3acec:	461a      	mov	r2, r3
   3acee:	4619      	mov	r1, r3
   3acf0:	f001 fc8a 	bl	3c608 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   3acf4:	2001      	movs	r0, #1
   3acf6:	f7f8 fb7f 	bl	333f8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   3acfa:	4604      	mov	r4, r0
   3acfc:	2800      	cmp	r0, #0
   3acfe:	d043      	beq.n	3ad88 <isr_tx+0xb0>
	radio_pkt_rx_set(node_rx->pdu);
   3ad00:	f104 001c 	add.w	r0, r4, #28
   3ad04:	f001 fbc0 	bl	3c488 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   3ad08:	f001 fbfa 	bl	3c500 <radio_is_ready>
   3ad0c:	b9e0      	cbnz	r0, 3ad48 <isr_tx+0x70>
	radio_isr_set(isr_rx, param);
   3ad0e:	4825      	ldr	r0, [pc, #148]	; (3ada4 <isr_tx+0xcc>)
   3ad10:	4629      	mov	r1, r5
   3ad12:	f001 fae7 	bl	3c2e4 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   3ad16:	f7ff fa1d 	bl	3a154 <ull_filter_lll_rl_enabled>
   3ad1a:	bb50      	cbnz	r0, 3ad72 <isr_tx+0x9a>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   3ad1c:	f001 fe2e 	bl	3c97c <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   3ad20:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   3ad22:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   3ad24:	4608      	mov	r0, r1
   3ad26:	f001 fbbf 	bl	3c4a8 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   3ad2a:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   3ad2c:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   3ad2e:	4608      	mov	r0, r1
   3ad30:	f001 fbb6 	bl	3c4a0 <radio_tx_chain_delay_get>
   3ad34:	442c      	add	r4, r5
   3ad36:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   3ad38:	1a20      	subs	r0, r4, r0
   3ad3a:	f001 fdd7 	bl	3c8ec <radio_tmr_hcto_configure>
}
   3ad3e:	b003      	add	sp, #12
   3ad40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_tmr_end_capture();
   3ad44:	f001 be0c 	b.w	3c960 <radio_tmr_end_capture>
	LL_ASSERT(!radio_is_ready());
   3ad48:	4a17      	ldr	r2, [pc, #92]	; (3ada8 <isr_tx+0xd0>)
   3ad4a:	4918      	ldr	r1, [pc, #96]	; (3adac <isr_tx+0xd4>)
   3ad4c:	4818      	ldr	r0, [pc, #96]	; (3adb0 <isr_tx+0xd8>)
   3ad4e:	f240 4345 	movw	r3, #1093	; 0x445
   3ad52:	f007 fdb7 	bl	428c4 <printk>
   3ad56:	4040      	eors	r0, r0
   3ad58:	f380 8811 	msr	BASEPRI, r0
   3ad5c:	f04f 0003 	mov.w	r0, #3
   3ad60:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   3ad62:	4810      	ldr	r0, [pc, #64]	; (3ada4 <isr_tx+0xcc>)
   3ad64:	4629      	mov	r1, r5
   3ad66:	f001 fabd 	bl	3c2e4 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   3ad6a:	f7ff f9f3 	bl	3a154 <ull_filter_lll_rl_enabled>
   3ad6e:	2800      	cmp	r0, #0
   3ad70:	d0d4      	beq.n	3ad1c <isr_tx+0x44>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   3ad72:	f10d 0007 	add.w	r0, sp, #7
   3ad76:	f7ff f927 	bl	39fc8 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   3ad7a:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   3ad7c:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   3ad7e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   3ad82:	f001 fe93 	bl	3caac <radio_ar_configure>
   3ad86:	e7c9      	b.n	3ad1c <isr_tx+0x44>
	LL_ASSERT(node_rx);
   3ad88:	4a07      	ldr	r2, [pc, #28]	; (3ada8 <isr_tx+0xd0>)
   3ad8a:	490a      	ldr	r1, [pc, #40]	; (3adb4 <isr_tx+0xdc>)
   3ad8c:	4808      	ldr	r0, [pc, #32]	; (3adb0 <isr_tx+0xd8>)
   3ad8e:	f240 4341 	movw	r3, #1089	; 0x441
   3ad92:	f007 fd97 	bl	428c4 <printk>
   3ad96:	4040      	eors	r0, r0
   3ad98:	f380 8811 	msr	BASEPRI, r0
   3ad9c:	f04f 0003 	mov.w	r0, #3
   3ada0:	df02      	svc	2
   3ada2:	e7ad      	b.n	3ad00 <isr_tx+0x28>
   3ada4:	0003b541 	.word	0x0003b541
   3ada8:	0004a70c 	.word	0x0004a70c
   3adac:	0004a760 	.word	0x0004a760
   3adb0:	00049c68 	.word	0x00049c68
   3adb4:	0004a758 	.word	0x0004a758

0003adb8 <is_abort_cb>:
	if (next != curr) {
   3adb8:	4281      	cmp	r1, r0
{
   3adba:	b508      	push	{r3, lr}
	if (next != curr) {
   3adbc:	d00e      	beq.n	3addc <is_abort_cb+0x24>
		} else if (lll->is_hdcd) {
   3adbe:	7a0b      	ldrb	r3, [r1, #8]
   3adc0:	07db      	lsls	r3, r3, #31
   3adc2:	d402      	bmi.n	3adca <is_abort_cb+0x12>
			return -ECANCELED;
   3adc4:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   3adc8:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   3adca:	4b12      	ldr	r3, [pc, #72]	; (3ae14 <is_abort_cb+0x5c>)
   3adcc:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   3adce:	f7ff ff3b 	bl	3ac48 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   3add2:	2800      	cmp	r0, #0
   3add4:	db0f      	blt.n	3adf6 <is_abort_cb+0x3e>
{
   3add6:	f06f 000a 	mvn.w	r0, #10
}
   3adda:	bd08      	pop	{r3, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   3addc:	7b0b      	ldrb	r3, [r1, #12]
   3adde:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   3ade2:	690b      	ldr	r3, [r1, #16]
   3ade4:	781b      	ldrb	r3, [r3, #0]
   3ade6:	f003 030f 	and.w	r3, r3, #15
		return 0;
   3adea:	2b01      	cmp	r3, #1
   3adec:	bf14      	ite	ne
   3adee:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   3adf2:	2000      	moveq	r0, #0
}
   3adf4:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   3adf6:	4a08      	ldr	r2, [pc, #32]	; (3ae18 <is_abort_cb+0x60>)
   3adf8:	4908      	ldr	r1, [pc, #32]	; (3ae1c <is_abort_cb+0x64>)
   3adfa:	4809      	ldr	r0, [pc, #36]	; (3ae20 <is_abort_cb+0x68>)
   3adfc:	f240 33fa 	movw	r3, #1018	; 0x3fa
   3ae00:	f007 fd60 	bl	428c4 <printk>
   3ae04:	4040      	eors	r0, r0
   3ae06:	f380 8811 	msr	BASEPRI, r0
   3ae0a:	f04f 0003 	mov.w	r0, #3
   3ae0e:	df02      	svc	2
   3ae10:	e7e1      	b.n	3add6 <is_abort_cb+0x1e>
   3ae12:	bf00      	nop
   3ae14:	0003b351 	.word	0x0003b351
   3ae18:	0004a70c 	.word	0x0004a70c
   3ae1c:	0004a6bc 	.word	0x0004a6bc
   3ae20:	00049c68 	.word	0x00049c68

0003ae24 <abort_cb>:
{
   3ae24:	b510      	push	{r4, lr}
	if (!prepare_param) {
   3ae26:	b1d8      	cbz	r0, 3ae60 <abort_cb+0x3c>
	err = lll_hfclock_off();
   3ae28:	460c      	mov	r4, r1
   3ae2a:	f7ff ff25 	bl	3ac78 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   3ae2e:	2800      	cmp	r0, #0
   3ae30:	db04      	blt.n	3ae3c <abort_cb+0x18>
	lll_done(param);
   3ae32:	4620      	mov	r0, r4
}
   3ae34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   3ae38:	f7ff bc8e 	b.w	3a758 <lll_done>
	LL_ASSERT(err >= 0);
   3ae3c:	4a0c      	ldr	r2, [pc, #48]	; (3ae70 <abort_cb+0x4c>)
   3ae3e:	490d      	ldr	r1, [pc, #52]	; (3ae74 <abort_cb+0x50>)
   3ae40:	480d      	ldr	r0, [pc, #52]	; (3ae78 <abort_cb+0x54>)
   3ae42:	f44f 6384 	mov.w	r3, #1056	; 0x420
   3ae46:	f007 fd3d 	bl	428c4 <printk>
   3ae4a:	4040      	eors	r0, r0
   3ae4c:	f380 8811 	msr	BASEPRI, r0
   3ae50:	f04f 0003 	mov.w	r0, #3
   3ae54:	df02      	svc	2
	lll_done(param);
   3ae56:	4620      	mov	r0, r4
}
   3ae58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   3ae5c:	f7ff bc7c 	b.w	3a758 <lll_done>
		radio_isr_set(isr_abort, param);
   3ae60:	4806      	ldr	r0, [pc, #24]	; (3ae7c <abort_cb+0x58>)
   3ae62:	f001 fa3f 	bl	3c2e4 <radio_isr_set>
}
   3ae66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   3ae6a:	f001 bb29 	b.w	3c4c0 <radio_disable>
   3ae6e:	bf00      	nop
   3ae70:	0004a70c 	.word	0x0004a70c
   3ae74:	0004a6bc 	.word	0x0004a6bc
   3ae78:	00049c68 	.word	0x00049c68
   3ae7c:	0003acc1 	.word	0x0003acc1

0003ae80 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   3ae80:	4b08      	ldr	r3, [pc, #32]	; (3aea4 <lll_adv_init+0x24>)
   3ae82:	2204      	movs	r2, #4
{
   3ae84:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   3ae86:	1898      	adds	r0, r3, r2
   3ae88:	2128      	movs	r1, #40	; 0x28
   3ae8a:	f7f4 fd77 	bl	2f97c <mem_init>
	MFIFO_INIT(pdu_free);
   3ae8e:	4b06      	ldr	r3, [pc, #24]	; (3aea8 <lll_adv_init+0x28>)
   3ae90:	2400      	movs	r4, #0
   3ae92:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   3ae94:	2202      	movs	r2, #2
   3ae96:	4621      	mov	r1, r4
   3ae98:	4804      	ldr	r0, [pc, #16]	; (3aeac <lll_adv_init+0x2c>)
   3ae9a:	f00d fc58 	bl	4874e <z_impl_k_sem_init>
}
   3ae9e:	4620      	mov	r0, r4
   3aea0:	bd10      	pop	{r4, pc}
   3aea2:	bf00      	nop
   3aea4:	20002a60 	.word	0x20002a60
   3aea8:	200007a0 	.word	0x200007a0
   3aeac:	20002a48 	.word	0x20002a48

0003aeb0 <lll_adv_reset>:
int lll_adv_reset(void)
   3aeb0:	4b08      	ldr	r3, [pc, #32]	; (3aed4 <lll_adv_reset+0x24>)
   3aeb2:	2204      	movs	r2, #4
   3aeb4:	b510      	push	{r4, lr}
   3aeb6:	1898      	adds	r0, r3, r2
   3aeb8:	2128      	movs	r1, #40	; 0x28
   3aeba:	f7f4 fd5f 	bl	2f97c <mem_init>
   3aebe:	4b06      	ldr	r3, [pc, #24]	; (3aed8 <lll_adv_reset+0x28>)
   3aec0:	2400      	movs	r4, #0
   3aec2:	805c      	strh	r4, [r3, #2]
   3aec4:	2202      	movs	r2, #2
   3aec6:	4621      	mov	r1, r4
   3aec8:	4804      	ldr	r0, [pc, #16]	; (3aedc <lll_adv_reset+0x2c>)
   3aeca:	f00d fc40 	bl	4874e <z_impl_k_sem_init>
   3aece:	4620      	mov	r0, r4
   3aed0:	bd10      	pop	{r4, pc}
   3aed2:	bf00      	nop
   3aed4:	20002a60 	.word	0x20002a60
   3aed8:	200007a0 	.word	0x200007a0
   3aedc:	20002a48 	.word	0x20002a48

0003aee0 <lll_adv_data_init>:
{
   3aee0:	b510      	push	{r4, lr}
   3aee2:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   3aee4:	4805      	ldr	r0, [pc, #20]	; (3aefc <lll_adv_data_init+0x1c>)
   3aee6:	f7f4 fd79 	bl	2f9dc <mem_acquire>
	if (!p) {
   3aeea:	b120      	cbz	r0, 3aef6 <lll_adv_data_init+0x16>
   3aeec:	4603      	mov	r3, r0
	p->len = 0U;
   3aeee:	2000      	movs	r0, #0
   3aef0:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   3aef2:	6063      	str	r3, [r4, #4]
}
   3aef4:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   3aef6:	f06f 000b 	mvn.w	r0, #11
}
   3aefa:	bd10      	pop	{r4, pc}
   3aefc:	20002a60 	.word	0x20002a60

0003af00 <lll_adv_data_reset>:
{
   3af00:	4603      	mov	r3, r0
	pdu->first = 0U;
   3af02:	2000      	movs	r0, #0
   3af04:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   3af06:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   3af08:	6098      	str	r0, [r3, #8]
}
   3af0a:	4770      	bx	lr

0003af0c <lll_adv_pdu_alloc_pdu_adv>:
{
   3af0c:	b538      	push	{r3, r4, r5, lr}
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   3af0e:	4c35      	ldr	r4, [pc, #212]	; (3afe4 <lll_adv_pdu_alloc_pdu_adv+0xd8>)
   3af10:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   3af12:	78e1      	ldrb	r1, [r4, #3]
   3af14:	7823      	ldrb	r3, [r4, #0]
   3af16:	4291      	cmp	r1, r2
   3af18:	d003      	beq.n	3af22 <lll_adv_pdu_alloc_pdu_adv+0x16>
	return *((void **)(fifo + first * size));
   3af1a:	fb02 4303 	mla	r3, r2, r3, r4
   3af1e:	685d      	ldr	r5, [r3, #4]
	if (p) {
   3af20:	b935      	cbnz	r5, 3af30 <lll_adv_pdu_alloc_pdu_adv+0x24>
	p = mem_acquire(&mem_pdu.free);
   3af22:	4831      	ldr	r0, [pc, #196]	; (3afe8 <lll_adv_pdu_alloc_pdu_adv+0xdc>)
   3af24:	f7f4 fd5a 	bl	2f9dc <mem_acquire>
	if (p) {
   3af28:	4605      	mov	r5, r0
   3af2a:	b1a0      	cbz	r0, 3af56 <lll_adv_pdu_alloc_pdu_adv+0x4a>
}
   3af2c:	4628      	mov	r0, r5
   3af2e:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_sem_take(sem, timeout);
   3af30:	482e      	ldr	r0, [pc, #184]	; (3afec <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   3af32:	2200      	movs	r2, #0
   3af34:	2300      	movs	r3, #0
   3af36:	f006 fb3b 	bl	415b0 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   3af3a:	bb40      	cbnz	r0, 3af8e <lll_adv_pdu_alloc_pdu_adv+0x82>
	uint8_t _first = *first; /* Copy read-index */
   3af3c:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   3af3e:	78e2      	ldrb	r2, [r4, #3]
		MFIFO_DEQUEUE(pdu_free);
   3af40:	7861      	ldrb	r1, [r4, #1]
   3af42:	429a      	cmp	r2, r3
   3af44:	d0f2      	beq.n	3af2c <lll_adv_pdu_alloc_pdu_adv+0x20>
	_first += 1U;
   3af46:	3301      	adds	r3, #1
   3af48:	b2db      	uxtb	r3, r3
		_first = 0U;
   3af4a:	4299      	cmp	r1, r3
   3af4c:	bf08      	it	eq
   3af4e:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   3af50:	70a3      	strb	r3, [r4, #2]
}
   3af52:	4628      	mov	r0, r5
   3af54:	bd38      	pop	{r3, r4, r5, pc}
   3af56:	4825      	ldr	r0, [pc, #148]	; (3afec <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   3af58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3af5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3af60:	f006 fb26 	bl	415b0 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   3af64:	bb08      	cbnz	r0, 3afaa <lll_adv_pdu_alloc_pdu_adv+0x9e>
	uint8_t _first = *first; /* Copy read-index */
   3af66:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   3af68:	78e1      	ldrb	r1, [r4, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   3af6a:	7822      	ldrb	r2, [r4, #0]
   3af6c:	7860      	ldrb	r0, [r4, #1]
   3af6e:	4299      	cmp	r1, r3
   3af70:	d029      	beq.n	3afc6 <lll_adv_pdu_alloc_pdu_adv+0xba>
	mem = *((void **)(fifo + _first * size));
   3af72:	fb13 f202 	smulbb	r2, r3, r2
   3af76:	491e      	ldr	r1, [pc, #120]	; (3aff0 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
	_first += 1U;
   3af78:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   3af7a:	588a      	ldr	r2, [r1, r2]
	_first += 1U;
   3af7c:	b2db      	uxtb	r3, r3
		_first = 0U;
   3af7e:	4298      	cmp	r0, r3
   3af80:	bf08      	it	eq
   3af82:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   3af84:	70a3      	strb	r3, [r4, #2]
	LL_ASSERT(p);
   3af86:	b1f2      	cbz	r2, 3afc6 <lll_adv_pdu_alloc_pdu_adv+0xba>
   3af88:	4615      	mov	r5, r2
}
   3af8a:	4628      	mov	r0, r5
   3af8c:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!err);
   3af8e:	4a19      	ldr	r2, [pc, #100]	; (3aff4 <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   3af90:	4919      	ldr	r1, [pc, #100]	; (3aff8 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   3af92:	481a      	ldr	r0, [pc, #104]	; (3affc <lll_adv_pdu_alloc_pdu_adv+0xf0>)
   3af94:	f240 1397 	movw	r3, #407	; 0x197
   3af98:	f007 fc94 	bl	428c4 <printk>
   3af9c:	4040      	eors	r0, r0
   3af9e:	f380 8811 	msr	BASEPRI, r0
   3afa2:	f04f 0003 	mov.w	r0, #3
   3afa6:	df02      	svc	2
   3afa8:	e7c8      	b.n	3af3c <lll_adv_pdu_alloc_pdu_adv+0x30>
	LL_ASSERT(!err);
   3afaa:	4a12      	ldr	r2, [pc, #72]	; (3aff4 <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   3afac:	4912      	ldr	r1, [pc, #72]	; (3aff8 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   3afae:	4813      	ldr	r0, [pc, #76]	; (3affc <lll_adv_pdu_alloc_pdu_adv+0xf0>)
   3afb0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
   3afb4:	f007 fc86 	bl	428c4 <printk>
   3afb8:	4040      	eors	r0, r0
   3afba:	f380 8811 	msr	BASEPRI, r0
   3afbe:	f04f 0003 	mov.w	r0, #3
   3afc2:	df02      	svc	2
   3afc4:	e7cf      	b.n	3af66 <lll_adv_pdu_alloc_pdu_adv+0x5a>
	LL_ASSERT(p);
   3afc6:	4a0b      	ldr	r2, [pc, #44]	; (3aff4 <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   3afc8:	490d      	ldr	r1, [pc, #52]	; (3b000 <lll_adv_pdu_alloc_pdu_adv+0xf4>)
   3afca:	480c      	ldr	r0, [pc, #48]	; (3affc <lll_adv_pdu_alloc_pdu_adv+0xf0>)
   3afcc:	f240 13ad 	movw	r3, #429	; 0x1ad
   3afd0:	f007 fc78 	bl	428c4 <printk>
   3afd4:	4040      	eors	r0, r0
   3afd6:	f380 8811 	msr	BASEPRI, r0
   3afda:	f04f 0003 	mov.w	r0, #3
   3afde:	df02      	svc	2
   3afe0:	e7a4      	b.n	3af2c <lll_adv_pdu_alloc_pdu_adv+0x20>
   3afe2:	bf00      	nop
   3afe4:	200007a0 	.word	0x200007a0
   3afe8:	20002a60 	.word	0x20002a60
   3afec:	20002a48 	.word	0x20002a48
   3aff0:	200007a4 	.word	0x200007a4
   3aff4:	0004a70c 	.word	0x0004a70c
   3aff8:	00049e04 	.word	0x00049e04
   3affc:	00049c68 	.word	0x00049c68
   3b000:	0004a774 	.word	0x0004a774

0003b004 <lll_adv_pdu_alloc>:
{
   3b004:	b510      	push	{r4, lr}
	first = pdu->first;
   3b006:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   3b008:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   3b00a:	429a      	cmp	r2, r3
   3b00c:	d014      	beq.n	3b038 <lll_adv_pdu_alloc+0x34>
		pdu->last = first;
   3b00e:	b2d4      	uxtb	r4, r2
   3b010:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   3b012:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   3b014:	4294      	cmp	r4, r2
   3b016:	d004      	beq.n	3b022 <lll_adv_pdu_alloc+0x1e>
			last++;
   3b018:	1c5a      	adds	r2, r3, #1
			pdu->last = last;
   3b01a:	7043      	strb	r3, [r0, #1]
			last++;
   3b01c:	b2d3      	uxtb	r3, r2
			if (last == DOUBLE_BUFFER_SIZE) {
   3b01e:	2b02      	cmp	r3, #2
   3b020:	d00e      	beq.n	3b040 <lll_adv_pdu_alloc+0x3c>
	p = (void *)pdu->pdu[last];
   3b022:	461a      	mov	r2, r3
	*idx = last;
   3b024:	eb00 0482 	add.w	r4, r0, r2, lsl #2
   3b028:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   3b02a:	6860      	ldr	r0, [r4, #4]
	if (p) {
   3b02c:	b100      	cbz	r0, 3b030 <lll_adv_pdu_alloc+0x2c>
}
   3b02e:	bd10      	pop	{r4, pc}
	p = lll_adv_pdu_alloc_pdu_adv();
   3b030:	f7ff ff6c 	bl	3af0c <lll_adv_pdu_alloc_pdu_adv>
	pdu->pdu[last] = (void *)p;
   3b034:	6060      	str	r0, [r4, #4]
}
   3b036:	bd10      	pop	{r4, pc}
		last++;
   3b038:	3301      	adds	r3, #1
   3b03a:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   3b03c:	2b02      	cmp	r3, #2
   3b03e:	d1f0      	bne.n	3b022 <lll_adv_pdu_alloc+0x1e>
{
   3b040:	2200      	movs	r2, #0
			last = 0U;
   3b042:	4613      	mov	r3, r2
   3b044:	e7ee      	b.n	3b024 <lll_adv_pdu_alloc+0x20>
   3b046:	bf00      	nop

0003b048 <lll_adv_pdu_latest_get>:
{
   3b048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	first = pdu->first;
   3b04a:	7802      	ldrb	r2, [r0, #0]
	if (first != pdu->last) {
   3b04c:	7843      	ldrb	r3, [r0, #1]
   3b04e:	4293      	cmp	r3, r2
{
   3b050:	4604      	mov	r4, r0
	if (first != pdu->last) {
   3b052:	d02c      	beq.n	3b0ae <lll_adv_pdu_latest_get+0x66>
		pdu_idx = first;
   3b054:	b2d5      	uxtb	r5, r2
			if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   3b056:	4a18      	ldr	r2, [pc, #96]	; (3b0b8 <lll_adv_pdu_latest_get+0x70>)
   3b058:	f892 e003 	ldrb.w	lr, [r2, #3]
   3b05c:	eb00 0785 	add.w	r7, r0, r5, lsl #2
	last = last + 1;
   3b060:	f10e 0301 	add.w	r3, lr, #1
	if (last == count) {
   3b064:	7850      	ldrb	r0, [r2, #1]
	last = last + 1;
   3b066:	b2db      	uxtb	r3, r3
		last = 0U;
   3b068:	4298      	cmp	r0, r3
   3b06a:	bf08      	it	eq
   3b06c:	2300      	moveq	r3, #0
   3b06e:	7890      	ldrb	r0, [r2, #2]
	if (last == first) {
   3b070:	4298      	cmp	r0, r3
   3b072:	460e      	mov	r6, r1
		p = pdu->pdu[pdu_idx];
   3b074:	6879      	ldr	r1, [r7, #4]
   3b076:	d00b      	beq.n	3b090 <lll_adv_pdu_latest_get+0x48>
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   3b078:	4694      	mov	ip, r2
   3b07a:	f81c 0b04 	ldrb.w	r0, [ip], #4
   3b07e:	fb10 f00e 	smulbb	r0, r0, lr
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   3b082:	f84c 1000 	str.w	r1, [ip, r0]
	*last = idx; /* Commit: Update write index */
   3b086:	70d3      	strb	r3, [r2, #3]
	z_impl_k_sem_give(sem);
   3b088:	480c      	ldr	r0, [pc, #48]	; (3b0bc <lll_adv_pdu_latest_get+0x74>)
   3b08a:	f006 fa6b 	bl	41564 <z_impl_k_sem_give>
			p = next;
   3b08e:	2100      	movs	r1, #0
		first += 1U;
   3b090:	1c6b      	adds	r3, r5, #1
   3b092:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   3b094:	2b02      	cmp	r3, #2
   3b096:	bf0a      	itet	eq
   3b098:	2200      	moveq	r2, #0
	return (void *)pdu->pdu[first];
   3b09a:	461a      	movne	r2, r3
			first = 0U;
   3b09c:	4613      	moveq	r3, r2
		pdu->pdu[pdu_idx] = p;
   3b09e:	6079      	str	r1, [r7, #4]
		pdu->first = first;
   3b0a0:	7023      	strb	r3, [r4, #0]
		*is_modified = 1U;
   3b0a2:	2101      	movs	r1, #1
	return (void *)pdu->pdu[first];
   3b0a4:	eb04 0482 	add.w	r4, r4, r2, lsl #2
		*is_modified = 1U;
   3b0a8:	7031      	strb	r1, [r6, #0]
}
   3b0aa:	6860      	ldr	r0, [r4, #4]
   3b0ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = pdu->pdu[pdu_idx];
   3b0ae:	461a      	mov	r2, r3
	return (void *)pdu->pdu[first];
   3b0b0:	eb04 0482 	add.w	r4, r4, r2, lsl #2
}
   3b0b4:	6860      	ldr	r0, [r4, #4]
   3b0b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b0b8:	200007a0 	.word	0x200007a0
   3b0bc:	20002a48 	.word	0x20002a48

0003b0c0 <chan_prepare.isra.0>:

static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   3b0c0:	b570      	push	{r4, r5, r6, lr}
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   3b0c2:	7a03      	ldrb	r3, [r0, #8]
   3b0c4:	f3c3 1302 	ubfx	r3, r3, #4, #3
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   3b0c8:	4604      	mov	r4, r0
   3b0ca:	2b00      	cmp	r3, #0
   3b0cc:	fa93 f0a3 	rbit	r0, r3
   3b0d0:	fab0 f080 	clz	r0, r0
   3b0d4:	bf08      	it	eq
   3b0d6:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
   3b0da:	b082      	sub	sp, #8
   3b0dc:	f100 0501 	add.w	r5, r0, #1
	LL_ASSERT(chan);
   3b0e0:	d045      	beq.n	3b16e <chan_prepare.isra.0+0xae>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   3b0e2:	7a21      	ldrb	r1, [r4, #8]
   3b0e4:	1e5a      	subs	r2, r3, #1
   3b0e6:	4013      	ands	r3, r2
   3b0e8:	f363 1106 	bfi	r1, r3, #4, #3

	lll_chan_set(36 + chan);
   3b0ec:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   3b0f0:	7221      	strb	r1, [r4, #8]
	lll_chan_set(36 + chan);
   3b0f2:	f7ff fba5 	bl	3a840 <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   3b0f6:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   3b0f8:	f10d 0107 	add.w	r1, sp, #7
   3b0fc:	f104 000c 	add.w	r0, r4, #12
   3b100:	f88d 3007 	strb.w	r3, [sp, #7]
   3b104:	f7ff ffa0 	bl	3b048 <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   3b108:	4605      	mov	r5, r0
   3b10a:	2800      	cmp	r0, #0
   3b10c:	d040      	beq.n	3b190 <chan_prepare.isra.0+0xd0>

	radio_pkt_tx_set(pdu);
   3b10e:	4628      	mov	r0, r5
   3b110:	f001 f9c0 	bl	3c494 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   3b114:	782b      	ldrb	r3, [r5, #0]
   3b116:	f003 030f 	and.w	r3, r3, #15
   3b11a:	2b02      	cmp	r3, #2
   3b11c:	d01e      	beq.n	3b15c <chan_prepare.isra.0+0x9c>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   3b11e:	f10d 0107 	add.w	r1, sp, #7
   3b122:	f104 0018 	add.w	r0, r4, #24
   3b126:	f7ff ff8f 	bl	3b048 <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   3b12a:	4606      	mov	r6, r0
   3b12c:	2800      	cmp	r0, #0
   3b12e:	d03d      	beq.n	3b1ac <chan_prepare.isra.0+0xec>

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
   3b130:	f89d 3007 	ldrb.w	r3, [sp, #7]
   3b134:	b963      	cbnz	r3, 3b150 <chan_prepare.isra.0+0x90>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   3b136:	4621      	mov	r1, r4
   3b138:	4823      	ldr	r0, [pc, #140]	; (3b1c8 <chan_prepare.isra.0+0x108>)
   3b13a:	f001 f8d3 	bl	3c2e4 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   3b13e:	2096      	movs	r0, #150	; 0x96
   3b140:	f001 fb34 	bl	3c7ac <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   3b144:	2000      	movs	r0, #0
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   3b146:	b002      	add	sp, #8
   3b148:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_switch_complete_and_rx(0);
   3b14c:	f001 ba14 	b.w	3c578 <radio_switch_complete_and_rx>
			memcpy(&scan_pdu->scan_rsp.addr[0],
   3b150:	2206      	movs	r2, #6
   3b152:	1ca9      	adds	r1, r5, #2
   3b154:	1cb0      	adds	r0, r6, #2
   3b156:	f009 fcb4 	bl	44ac2 <memcpy>
   3b15a:	e7ec      	b.n	3b136 <chan_prepare.isra.0+0x76>
		radio_isr_set(isr_done, lll);
   3b15c:	481b      	ldr	r0, [pc, #108]	; (3b1cc <chan_prepare.isra.0+0x10c>)
   3b15e:	4621      	mov	r1, r4
   3b160:	f001 f8c0 	bl	3c2e4 <radio_isr_set>
}
   3b164:	b002      	add	sp, #8
   3b166:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_switch_complete_and_disable();
   3b16a:	f001 baad 	b.w	3c6c8 <radio_switch_complete_and_disable>
	LL_ASSERT(chan);
   3b16e:	4a18      	ldr	r2, [pc, #96]	; (3b1d0 <chan_prepare.isra.0+0x110>)
   3b170:	4918      	ldr	r1, [pc, #96]	; (3b1d4 <chan_prepare.isra.0+0x114>)
   3b172:	4819      	ldr	r0, [pc, #100]	; (3b1d8 <chan_prepare.isra.0+0x118>)
   3b174:	f240 5337 	movw	r3, #1335	; 0x537
   3b178:	f007 fba4 	bl	428c4 <printk>
   3b17c:	4040      	eors	r0, r0
   3b17e:	f380 8811 	msr	BASEPRI, r0
   3b182:	f04f 0003 	mov.w	r0, #3
   3b186:	df02      	svc	2
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   3b188:	7a23      	ldrb	r3, [r4, #8]
   3b18a:	f3c3 1302 	ubfx	r3, r3, #4, #3
   3b18e:	e7a8      	b.n	3b0e2 <chan_prepare.isra.0+0x22>
	LL_ASSERT(pdu);
   3b190:	4a0f      	ldr	r2, [pc, #60]	; (3b1d0 <chan_prepare.isra.0+0x110>)
   3b192:	4912      	ldr	r1, [pc, #72]	; (3b1dc <chan_prepare.isra.0+0x11c>)
   3b194:	4810      	ldr	r0, [pc, #64]	; (3b1d8 <chan_prepare.isra.0+0x118>)
   3b196:	f44f 63a8 	mov.w	r3, #1344	; 0x540
   3b19a:	f007 fb93 	bl	428c4 <printk>
   3b19e:	4040      	eors	r0, r0
   3b1a0:	f380 8811 	msr	BASEPRI, r0
   3b1a4:	f04f 0003 	mov.w	r0, #3
   3b1a8:	df02      	svc	2
   3b1aa:	e7b0      	b.n	3b10e <chan_prepare.isra.0+0x4e>
		LL_ASSERT(scan_pdu);
   3b1ac:	4a08      	ldr	r2, [pc, #32]	; (3b1d0 <chan_prepare.isra.0+0x110>)
   3b1ae:	490c      	ldr	r1, [pc, #48]	; (3b1e0 <chan_prepare.isra.0+0x120>)
   3b1b0:	4809      	ldr	r0, [pc, #36]	; (3b1d8 <chan_prepare.isra.0+0x118>)
   3b1b2:	f240 534a 	movw	r3, #1354	; 0x54a
   3b1b6:	f007 fb85 	bl	428c4 <printk>
   3b1ba:	4040      	eors	r0, r0
   3b1bc:	f380 8811 	msr	BASEPRI, r0
   3b1c0:	f04f 0003 	mov.w	r0, #3
   3b1c4:	df02      	svc	2
   3b1c6:	e7b3      	b.n	3b130 <chan_prepare.isra.0+0x70>
   3b1c8:	0003acd9 	.word	0x0003acd9
   3b1cc:	0003b1e5 	.word	0x0003b1e5
   3b1d0:	0004a70c 	.word	0x0004a70c
   3b1d4:	0004a778 	.word	0x0004a778
   3b1d8:	00049c68 	.word	0x00049c68
   3b1dc:	0004a780 	.word	0x0004a780
   3b1e0:	0004a784 	.word	0x0004a784

0003b1e4 <isr_done>:
{
   3b1e4:	b510      	push	{r4, lr}
   3b1e6:	4604      	mov	r4, r0
	lll_isr_status_reset();
   3b1e8:	f7ff fb80 	bl	3a8ec <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   3b1ec:	7a23      	ldrb	r3, [r4, #8]
   3b1ee:	f003 0271 	and.w	r2, r3, #113	; 0x71
   3b1f2:	2a01      	cmp	r2, #1
   3b1f4:	d105      	bne.n	3b202 <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   3b1f6:	f3c3 0242 	ubfx	r2, r3, #1, #3
   3b1fa:	f362 1306 	bfi	r3, r2, #4, #3
   3b1fe:	7223      	strb	r3, [r4, #8]
	if (lll->chan_map_curr &&
   3b200:	b2db      	uxtb	r3, r3
   3b202:	f013 0f70 	tst.w	r3, #112	; 0x70
   3b206:	d005      	beq.n	3b214 <isr_done+0x30>
	    (!lll->conn || !lll->conn->periph.cancelled) &&
   3b208:	6863      	ldr	r3, [r4, #4]
   3b20a:	b153      	cbz	r3, 3b222 <isr_done+0x3e>
   3b20c:	f893 3020 	ldrb.w	r3, [r3, #32]
   3b210:	079b      	lsls	r3, r3, #30
   3b212:	d506      	bpl.n	3b222 <isr_done+0x3e>
	radio_filter_disable();
   3b214:	f001 fa98 	bl	3c748 <radio_filter_disable>
	lll_isr_cleanup(param);
   3b218:	4620      	mov	r0, r4
}
   3b21a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   3b21e:	f7ff bb73 	b.w	3a908 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   3b222:	4620      	mov	r0, r4
   3b224:	f7ff ff4c 	bl	3b0c0 <chan_prepare.isra.0>
		radio_tx_enable();
   3b228:	f001 f944 	bl	3c4b4 <radio_tx_enable>
}
   3b22c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   3b230:	f001 bb96 	b.w	3c960 <radio_tmr_end_capture>

0003b234 <prepare_cb>:
{
   3b234:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   3b236:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->conn &&
   3b238:	6863      	ldr	r3, [r4, #4]
{
   3b23a:	b083      	sub	sp, #12
   3b23c:	4605      	mov	r5, r0
	if (unlikely(lll->conn &&
   3b23e:	2b00      	cmp	r3, #0
   3b240:	d16d      	bne.n	3b31e <prepare_cb+0xea>
	radio_reset();
   3b242:	f001 f891 	bl	3c368 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   3b246:	2000      	movs	r0, #0
   3b248:	f001 f8c2 	bl	3c3d0 <radio_tx_power_set>
	radio_phy_set(0, 0);
   3b24c:	2100      	movs	r1, #0
   3b24e:	4608      	mov	r0, r1
   3b250:	f001 f8ae 	bl	3c3b0 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   3b254:	2200      	movs	r2, #0
   3b256:	2125      	movs	r1, #37	; 0x25
   3b258:	2008      	movs	r0, #8
   3b25a:	f001 f8ef 	bl	3c43c <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   3b25e:	4b35      	ldr	r3, [pc, #212]	; (3b334 <prepare_cb+0x100>)
   3b260:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   3b262:	a801      	add	r0, sp, #4
   3b264:	f001 f8d2 	bl	3c40c <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   3b268:	4933      	ldr	r1, [pc, #204]	; (3b338 <prepare_cb+0x104>)
   3b26a:	f240 605b 	movw	r0, #1627	; 0x65b
   3b26e:	f001 f965 	bl	3c53c <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   3b272:	7a23      	ldrb	r3, [r4, #8]
   3b274:	f3c3 0242 	ubfx	r2, r3, #1, #3
   3b278:	f362 1306 	bfi	r3, r2, #4, #3
	pdu = chan_prepare(lll);
   3b27c:	4620      	mov	r0, r4
	lll->chan_map_curr = lll->chan_map;
   3b27e:	7223      	strb	r3, [r4, #8]
	pdu = chan_prepare(lll);
   3b280:	f7ff ff1e 	bl	3b0c0 <chan_prepare.isra.0>
	if (ull_filter_lll_rl_enabled()) {
   3b284:	f7fe ff66 	bl	3a154 <ull_filter_lll_rl_enabled>
   3b288:	bb98      	cbnz	r0, 3b2f2 <prepare_cb+0xbe>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   3b28a:	7a63      	ldrb	r3, [r4, #9]
   3b28c:	079b      	lsls	r3, r3, #30
   3b28e:	d127      	bne.n	3b2e0 <prepare_cb+0xac>
	ull = HDR_LLL2ULL(lll);
   3b290:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   3b292:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   3b294:	4638      	mov	r0, r7
   3b296:	f7ff fab5 	bl	3a804 <lll_event_offset_get>
   3b29a:	4406      	add	r6, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   3b29c:	686a      	ldr	r2, [r5, #4]
   3b29e:	f106 0109 	add.w	r1, r6, #9
   3b2a2:	2001      	movs	r0, #1
   3b2a4:	f001 fa8e 	bl	3c7c4 <radio_tmr_start>
	radio_tmr_end_capture();
   3b2a8:	f001 fb5a 	bl	3c960 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   3b2ac:	4620      	mov	r0, r4
   3b2ae:	f7f9 f80f 	bl	342d0 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_ADV_BASE +
   3b2b2:	1c81      	adds	r1, r0, #2
   3b2b4:	4632      	mov	r2, r6
   3b2b6:	b2c9      	uxtb	r1, r1
   3b2b8:	4638      	mov	r0, r7
   3b2ba:	f7ff fab1 	bl	3a820 <lll_preempt_calc>
   3b2be:	b930      	cbnz	r0, 3b2ce <prepare_cb+0x9a>
		ret = lll_prepare_done(lll);
   3b2c0:	4620      	mov	r0, r4
   3b2c2:	f7ff fa47 	bl	3a754 <lll_prepare_done>
		LL_ASSERT(!ret);
   3b2c6:	b9d0      	cbnz	r0, 3b2fe <prepare_cb+0xca>
}
   3b2c8:	2000      	movs	r0, #0
   3b2ca:	b003      	add	sp, #12
   3b2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   3b2ce:	481b      	ldr	r0, [pc, #108]	; (3b33c <prepare_cb+0x108>)
   3b2d0:	4621      	mov	r1, r4
   3b2d2:	f001 f807 	bl	3c2e4 <radio_isr_set>
		radio_disable();
   3b2d6:	f001 f8f3 	bl	3c4c0 <radio_disable>
}
   3b2da:	2000      	movs	r0, #0
   3b2dc:	b003      	add	sp, #12
   3b2de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct lll_filter *fal = ull_filter_lll_get(true);
   3b2e0:	2001      	movs	r0, #1
   3b2e2:	f7fe fbb5 	bl	39a50 <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   3b2e6:	7841      	ldrb	r1, [r0, #1]
   3b2e8:	1c82      	adds	r2, r0, #2
   3b2ea:	7800      	ldrb	r0, [r0, #0]
   3b2ec:	f001 fa0c 	bl	3c708 <radio_filter_configure>
   3b2f0:	e7ce      	b.n	3b290 <prepare_cb+0x5c>
			ull_filter_lll_get(!!(lll->filter_policy));
   3b2f2:	7a60      	ldrb	r0, [r4, #9]
   3b2f4:	f010 0003 	ands.w	r0, r0, #3
   3b2f8:	bf18      	it	ne
   3b2fa:	2001      	movne	r0, #1
   3b2fc:	e7f1      	b.n	3b2e2 <prepare_cb+0xae>
		LL_ASSERT(!ret);
   3b2fe:	4a10      	ldr	r2, [pc, #64]	; (3b340 <prepare_cb+0x10c>)
   3b300:	4910      	ldr	r1, [pc, #64]	; (3b344 <prepare_cb+0x110>)
   3b302:	4811      	ldr	r0, [pc, #68]	; (3b348 <prepare_cb+0x114>)
   3b304:	f240 33d1 	movw	r3, #977	; 0x3d1
   3b308:	f007 fadc 	bl	428c4 <printk>
   3b30c:	4040      	eors	r0, r0
   3b30e:	f380 8811 	msr	BASEPRI, r0
   3b312:	f04f 0003 	mov.w	r0, #3
   3b316:	df02      	svc	2
}
   3b318:	2000      	movs	r0, #0
   3b31a:	b003      	add	sp, #12
   3b31c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (unlikely(lll->conn &&
   3b31e:	f893 3020 	ldrb.w	r3, [r3, #32]
   3b322:	079a      	lsls	r2, r3, #30
   3b324:	d08d      	beq.n	3b242 <prepare_cb+0xe>
		radio_isr_set(lll_isr_early_abort, lll);
   3b326:	4809      	ldr	r0, [pc, #36]	; (3b34c <prepare_cb+0x118>)
   3b328:	4621      	mov	r1, r4
   3b32a:	f000 ffdb 	bl	3c2e4 <radio_isr_set>
		radio_disable();
   3b32e:	f001 f8c7 	bl	3c4c0 <radio_disable>
		return 0;
   3b332:	e7c9      	b.n	3b2c8 <prepare_cb+0x94>
   3b334:	8e89bed6 	.word	0x8e89bed6
   3b338:	00555555 	.word	0x00555555
   3b33c:	0003acc1 	.word	0x0003acc1
   3b340:	0004a70c 	.word	0x0004a70c
   3b344:	00049f00 	.word	0x00049f00
   3b348:	00049c68 	.word	0x00049c68
   3b34c:	0003a999 	.word	0x0003a999

0003b350 <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   3b350:	68c3      	ldr	r3, [r0, #12]
{
   3b352:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   3b354:	681e      	ldr	r6, [r3, #0]
{
   3b356:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   3b358:	f7f5 fe88 	bl	3106c <ticker_ticks_now_get>
   3b35c:	4605      	mov	r5, r0
   3b35e:	4630      	mov	r0, r6
   3b360:	f7ff fa50 	bl	3a804 <lll_event_offset_get>
	p->remainder = 0;
   3b364:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   3b366:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   3b368:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   3b36c:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   3b36e:	4620      	mov	r0, r4
}
   3b370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   3b374:	f7ff bf5e 	b.w	3b234 <prepare_cb>

0003b378 <lll_adv_prepare>:
{
   3b378:	b510      	push	{r4, lr}
   3b37a:	b082      	sub	sp, #8
   3b37c:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   3b37e:	f7ff fc63 	bl	3ac48 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   3b382:	2800      	cmp	r0, #0
   3b384:	db1a      	blt.n	3b3bc <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   3b386:	4a14      	ldr	r2, [pc, #80]	; (3b3d8 <lll_adv_prepare+0x60>)
   3b388:	4914      	ldr	r1, [pc, #80]	; (3b3dc <lll_adv_prepare+0x64>)
   3b38a:	4815      	ldr	r0, [pc, #84]	; (3b3e0 <lll_adv_prepare+0x68>)
   3b38c:	9400      	str	r4, [sp, #0]
   3b38e:	2300      	movs	r3, #0
   3b390:	f7f8 fb4e 	bl	33a30 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   3b394:	b108      	cbz	r0, 3b39a <lll_adv_prepare+0x22>
   3b396:	3077      	adds	r0, #119	; 0x77
   3b398:	d101      	bne.n	3b39e <lll_adv_prepare+0x26>
}
   3b39a:	b002      	add	sp, #8
   3b39c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   3b39e:	4a11      	ldr	r2, [pc, #68]	; (3b3e4 <lll_adv_prepare+0x6c>)
   3b3a0:	4911      	ldr	r1, [pc, #68]	; (3b3e8 <lll_adv_prepare+0x70>)
   3b3a2:	4812      	ldr	r0, [pc, #72]	; (3b3ec <lll_adv_prepare+0x74>)
   3b3a4:	f240 239d 	movw	r3, #669	; 0x29d
   3b3a8:	f007 fa8c 	bl	428c4 <printk>
   3b3ac:	4040      	eors	r0, r0
   3b3ae:	f380 8811 	msr	BASEPRI, r0
   3b3b2:	f04f 0003 	mov.w	r0, #3
   3b3b6:	df02      	svc	2
}
   3b3b8:	b002      	add	sp, #8
   3b3ba:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   3b3bc:	4a09      	ldr	r2, [pc, #36]	; (3b3e4 <lll_adv_prepare+0x6c>)
   3b3be:	490c      	ldr	r1, [pc, #48]	; (3b3f0 <lll_adv_prepare+0x78>)
   3b3c0:	480a      	ldr	r0, [pc, #40]	; (3b3ec <lll_adv_prepare+0x74>)
   3b3c2:	f240 239a 	movw	r3, #666	; 0x29a
   3b3c6:	f007 fa7d 	bl	428c4 <printk>
   3b3ca:	4040      	eors	r0, r0
   3b3cc:	f380 8811 	msr	BASEPRI, r0
   3b3d0:	f04f 0003 	mov.w	r0, #3
   3b3d4:	df02      	svc	2
   3b3d6:	e7d6      	b.n	3b386 <lll_adv_prepare+0xe>
   3b3d8:	0003b235 	.word	0x0003b235
   3b3dc:	0003ae25 	.word	0x0003ae25
   3b3e0:	0003adb9 	.word	0x0003adb9
   3b3e4:	0004a70c 	.word	0x0004a70c
   3b3e8:	0004a790 	.word	0x0004a790
   3b3ec:	00049c68 	.word	0x00049c68
   3b3f0:	0004a6bc 	.word	0x0004a6bc

0003b3f4 <lll_adv_scan_req_check>:
{
   3b3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   3b3f8:	f890 c009 	ldrb.w	ip, [r0, #9]
{
   3b3fc:	f89d 8018 	ldrb.w	r8, [sp, #24]
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   3b400:	f01c 0f01 	tst.w	ip, #1
{
   3b404:	460f      	mov	r7, r1
   3b406:	4616      	mov	r6, r2
   3b408:	461d      	mov	r5, r3
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   3b40a:	d009      	beq.n	3b420 <lll_adv_scan_req_check+0x2c>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   3b40c:	f1b8 0f00 	cmp.w	r8, #0
   3b410:	d016      	beq.n	3b440 <lll_adv_scan_req_check+0x4c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   3b412:	783b      	ldrb	r3, [r7, #0]
   3b414:	ebb6 1fd3 	cmp.w	r6, r3, lsr #7
   3b418:	d019      	beq.n	3b44e <lll_adv_scan_req_check+0x5a>
{
   3b41a:	2000      	movs	r0, #0
}
   3b41c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3b420:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   3b422:	f811 0b02 	ldrb.w	r0, [r1], #2
   3b426:	9a07      	ldr	r2, [sp, #28]
   3b428:	f3c0 1080 	ubfx	r0, r0, #6, #1
   3b42c:	f7fe fe58 	bl	3a0e0 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   3b430:	2800      	cmp	r0, #0
   3b432:	d1ee      	bne.n	3b412 <lll_adv_scan_req_check+0x1e>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   3b434:	7a63      	ldrb	r3, [r4, #9]
						rl_idx)) ||
   3b436:	07db      	lsls	r3, r3, #31
   3b438:	d5ef      	bpl.n	3b41a <lll_adv_scan_req_check+0x26>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   3b43a:	f1b8 0f00 	cmp.w	r8, #0
   3b43e:	d1e8      	bne.n	3b412 <lll_adv_scan_req_check+0x1e>
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   3b440:	9b07      	ldr	r3, [sp, #28]
   3b442:	7818      	ldrb	r0, [r3, #0]
   3b444:	f7fe fe1c 	bl	3a080 <ull_filter_lll_irk_in_fal>
   3b448:	2800      	cmp	r0, #0
   3b44a:	d1e2      	bne.n	3b412 <lll_adv_scan_req_check+0x1e>
   3b44c:	e7e5      	b.n	3b41a <lll_adv_scan_req_check+0x26>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   3b44e:	2206      	movs	r2, #6
   3b450:	f107 0108 	add.w	r1, r7, #8
   3b454:	4628      	mov	r0, r5
   3b456:	f009 fb24 	bl	44aa2 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   3b45a:	fab0 f080 	clz	r0, r0
   3b45e:	0940      	lsrs	r0, r0, #5
}
   3b460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003b464 <lll_adv_connect_ind_check>:
{
   3b464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3b468:	461f      	mov	r7, r3
	if (tgt_addr) {
   3b46a:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
   3b46c:	f89d 9020 	ldrb.w	r9, [sp, #32]
   3b470:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   3b474:	4605      	mov	r5, r0
   3b476:	460c      	mov	r4, r1
   3b478:	4690      	mov	r8, r2
	if (tgt_addr) {
   3b47a:	b96b      	cbnz	r3, 3b498 <lll_adv_connect_ind_check+0x34>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) &&
   3b47c:	7a41      	ldrb	r1, [r0, #9]
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   3b47e:	f001 0103 	and.w	r1, r1, #3
   3b482:	2901      	cmp	r1, #1
   3b484:	d92b      	bls.n	3b4de <lll_adv_connect_ind_check+0x7a>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   3b486:	2e00      	cmp	r6, #0
   3b488:	d03a      	beq.n	3b500 <lll_adv_connect_ind_check+0x9c>
	return (tx_addr == sr->rx_addr) &&
   3b48a:	7823      	ldrb	r3, [r4, #0]
   3b48c:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   3b490:	d03d      	beq.n	3b50e <lll_adv_connect_ind_check+0xaa>
{
   3b492:	2000      	movs	r0, #0
}
   3b494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						      ci->connect_ind.init_addr,
   3b498:	468a      	mov	sl, r1
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   3b49a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   3b49c:	f81a 0b02 	ldrb.w	r0, [sl], #2
   3b4a0:	f3c0 1080 	ubfx	r0, r0, #6, #1
   3b4a4:	4651      	mov	r1, sl
   3b4a6:	f7fe fe1b 	bl	3a0e0 <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   3b4aa:	2800      	cmp	r0, #0
   3b4ac:	d0f1      	beq.n	3b492 <lll_adv_connect_ind_check+0x2e>
	return (tx_addr == sr->rx_addr) &&
   3b4ae:	7823      	ldrb	r3, [r4, #0]
   3b4b0:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   3b4b4:	d1ed      	bne.n	3b492 <lll_adv_connect_ind_check+0x2e>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   3b4b6:	4638      	mov	r0, r7
   3b4b8:	2206      	movs	r2, #6
   3b4ba:	f104 0108 	add.w	r1, r4, #8
   3b4be:	f009 faf0 	bl	44aa2 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   3b4c2:	2800      	cmp	r0, #0
   3b4c4:	d1e5      	bne.n	3b492 <lll_adv_connect_ind_check+0x2e>
		       isr_rx_ci_tgta_check(lll, rx_addr, tgt_addr, ci,
   3b4c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3b4c8:	7818      	ldrb	r0, [r3, #0]
static inline bool isr_rx_ci_tgta_check(struct lll_adv *lll,
					uint8_t rx_addr, uint8_t *tgt_addr,
					struct pdu_adv *ci, uint8_t rl_idx)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   3b4ca:	28ff      	cmp	r0, #255	; 0xff
   3b4cc:	d029      	beq.n	3b522 <lll_adv_connect_ind_check+0xbe>
   3b4ce:	7aab      	ldrb	r3, [r5, #10]
   3b4d0:	2bff      	cmp	r3, #255	; 0xff
   3b4d2:	d026      	beq.n	3b522 <lll_adv_connect_ind_check+0xbe>
		return rl_idx == lll->rl_idx;
   3b4d4:	1ac0      	subs	r0, r0, r3
   3b4d6:	fab0 f080 	clz	r0, r0
   3b4da:	0940      	lsrs	r0, r0, #5
   3b4dc:	e7da      	b.n	3b494 <lll_adv_connect_ind_check+0x30>
						ci->connect_ind.init_addr,
   3b4de:	4621      	mov	r1, r4
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   3b4e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   3b4e2:	f811 0b02 	ldrb.w	r0, [r1], #2
   3b4e6:	f3c0 1080 	ubfx	r0, r0, #6, #1
   3b4ea:	f7fe fdf9 	bl	3a0e0 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) &&
   3b4ee:	2800      	cmp	r0, #0
   3b4f0:	d1cb      	bne.n	3b48a <lll_adv_connect_ind_check+0x26>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   3b4f2:	7a6b      	ldrb	r3, [r5, #9]
						rl_idx)) ||
   3b4f4:	f003 0303 	and.w	r3, r3, #3
   3b4f8:	2b01      	cmp	r3, #1
   3b4fa:	d9ca      	bls.n	3b492 <lll_adv_connect_ind_check+0x2e>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   3b4fc:	2e00      	cmp	r6, #0
   3b4fe:	d1c4      	bne.n	3b48a <lll_adv_connect_ind_check+0x26>
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   3b500:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3b502:	7818      	ldrb	r0, [r3, #0]
   3b504:	f7fe fdbc 	bl	3a080 <ull_filter_lll_irk_in_fal>
   3b508:	2800      	cmp	r0, #0
   3b50a:	d1be      	bne.n	3b48a <lll_adv_connect_ind_check+0x26>
   3b50c:	e7c1      	b.n	3b492 <lll_adv_connect_ind_check+0x2e>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   3b50e:	2206      	movs	r2, #6
   3b510:	f104 0108 	add.w	r1, r4, #8
   3b514:	4638      	mov	r0, r7
   3b516:	f009 fac4 	bl	44aa2 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   3b51a:	fab0 f080 	clz	r0, r0
   3b51e:	0940      	lsrs	r0, r0, #5
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   3b520:	e7b8      	b.n	3b494 <lll_adv_connect_ind_check+0x30>
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	return (rx_addr == ci->tx_addr) &&
   3b522:	7823      	ldrb	r3, [r4, #0]
   3b524:	f3c3 1380 	ubfx	r3, r3, #6, #1
   3b528:	454b      	cmp	r3, r9
   3b52a:	d1b2      	bne.n	3b492 <lll_adv_connect_ind_check+0x2e>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   3b52c:	9809      	ldr	r0, [sp, #36]	; 0x24
   3b52e:	2206      	movs	r2, #6
   3b530:	4651      	mov	r1, sl
   3b532:	f009 fab6 	bl	44aa2 <memcmp>
	return (rx_addr == ci->tx_addr) &&
   3b536:	fab0 f080 	clz	r0, r0
   3b53a:	0940      	lsrs	r0, r0, #5
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   3b53c:	e7aa      	b.n	3b494 <lll_adv_connect_ind_check+0x30>
   3b53e:	bf00      	nop

0003b540 <isr_rx>:
{
   3b540:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3b544:	b08b      	sub	sp, #44	; 0x2c
   3b546:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   3b548:	f000 ffe4 	bl	3c514 <radio_is_done>
	if (trx_done) {
   3b54c:	b2c0      	uxtb	r0, r0
   3b54e:	b950      	cbnz	r0, 3b566 <isr_rx+0x26>
	lll_isr_status_reset();
   3b550:	f7ff f9cc 	bl	3a8ec <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   3b554:	487c      	ldr	r0, [pc, #496]	; (3b748 <isr_rx+0x208>)
   3b556:	4621      	mov	r1, r4
   3b558:	f000 fec4 	bl	3c2e4 <radio_isr_set>
}
   3b55c:	b00b      	add	sp, #44	; 0x2c
   3b55e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	radio_disable();
   3b562:	f000 bfad 	b.w	3c4c0 <radio_disable>
		crc_ok = radio_crc_is_valid();
   3b566:	f000 fff5 	bl	3c554 <radio_crc_is_valid>
   3b56a:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   3b56c:	f001 f8fe 	bl	3c76c <radio_filter_has_match>
   3b570:	4681      	mov	r9, r0
		devmatch_id = radio_filter_match_get();
   3b572:	f001 f905 	bl	3c780 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   3b576:	f001 fae9 	bl	3cb4c <radio_ar_has_match>
   3b57a:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
   3b57c:	f001 faca 	bl	3cb14 <radio_ar_match_get>
	if (crc_ok) {
   3b580:	b2ed      	uxtb	r5, r5
		irkmatch_id = radio_ar_match_get();
   3b582:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   3b584:	f001 f8b6 	bl	3c6f4 <radio_rssi_is_ready>
	lll_isr_status_reset();
   3b588:	f7ff f9b0 	bl	3a8ec <lll_isr_status_reset>
	if (crc_ok) {
   3b58c:	2d00      	cmp	r5, #0
   3b58e:	d0e1      	beq.n	3b554 <isr_rx+0x14>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   3b590:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   3b594:	d17a      	bne.n	3b68c <isr_rx+0x14c>
   3b596:	23ff      	movs	r3, #255	; 0xff
	node_rx = ull_pdu_rx_alloc_peek(1);
   3b598:	2001      	movs	r0, #1
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   3b59a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	node_rx = ull_pdu_rx_alloc_peek(1);
   3b59e:	f7f7 ff2b 	bl	333f8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   3b5a2:	4605      	mov	r5, r0
   3b5a4:	2800      	cmp	r0, #0
   3b5a6:	f000 80a2 	beq.w	3b6ee <isr_rx+0x1ae>
   3b5aa:	7b23      	ldrb	r3, [r4, #12]
   3b5ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	pdu_rx = (void *)node_rx->pdu;
   3b5b0:	f105 011c 	add.w	r1, r5, #28
   3b5b4:	691f      	ldr	r7, [r3, #16]
	addr = pdu_adv->adv_ind.addr;
   3b5b6:	463b      	mov	r3, r7
		devmatch_ok = radio_filter_has_match();
   3b5b8:	fa5f f989 	uxtb.w	r9, r9
	tx_addr = pdu_adv->tx_addr;
   3b5bc:	f813 0b02 	ldrb.w	r0, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   3b5c0:	f000 0c0f 	and.w	ip, r0, #15
   3b5c4:	f1bc 0f01 	cmp.w	ip, #1
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   3b5c8:	bf08      	it	eq
   3b5ca:	f107 0808 	addeq.w	r8, r7, #8
	tx_addr = pdu_adv->tx_addr;
   3b5ce:	f3c0 1280 	ubfx	r2, r0, #6, #1
	rx_addr = pdu_adv->rx_addr;
   3b5d2:	ea4f 17d0 	mov.w	r7, r0, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   3b5d6:	7f28      	ldrb	r0, [r5, #28]
   3b5d8:	f000 000f 	and.w	r0, r0, #15
		tgt_addr = NULL;
   3b5dc:	bf18      	it	ne
   3b5de:	f04f 0800 	movne.w	r8, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   3b5e2:	2803      	cmp	r0, #3
   3b5e4:	d05a      	beq.n	3b69c <isr_rx+0x15c>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   3b5e6:	2805      	cmp	r0, #5
   3b5e8:	d1b4      	bne.n	3b554 <isr_rx+0x14>
   3b5ea:	7f68      	ldrb	r0, [r5, #29]
   3b5ec:	2822      	cmp	r0, #34	; 0x22
   3b5ee:	d1b1      	bne.n	3b554 <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   3b5f0:	6860      	ldr	r0, [r4, #4]
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   3b5f2:	2800      	cmp	r0, #0
   3b5f4:	d0ae      	beq.n	3b554 <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   3b5f6:	f890 0020 	ldrb.w	r0, [r0, #32]
   3b5fa:	0780      	lsls	r0, r0, #30
   3b5fc:	d4aa      	bmi.n	3b554 <isr_rx+0x14>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   3b5fe:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   3b602:	9003      	str	r0, [sp, #12]
   3b604:	e9cd 8901 	strd	r8, r9, [sp, #4]
   3b608:	9700      	str	r7, [sp, #0]
   3b60a:	4620      	mov	r0, r4
   3b60c:	f7ff ff2a 	bl	3b464 <lll_adv_connect_ind_check>
		   lll->conn && !lll->conn->periph.cancelled &&
   3b610:	2800      	cmp	r0, #0
   3b612:	d09f      	beq.n	3b554 <isr_rx+0x14>
			rx = ull_pdu_rx_alloc_peek(4);
   3b614:	2004      	movs	r0, #4
   3b616:	f7f7 feef 	bl	333f8 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   3b61a:	2800      	cmp	r0, #0
   3b61c:	d09a      	beq.n	3b554 <isr_rx+0x14>
		radio_isr_set(isr_abort, lll);
   3b61e:	484b      	ldr	r0, [pc, #300]	; (3b74c <isr_rx+0x20c>)
   3b620:	4621      	mov	r1, r4
   3b622:	f000 fe5f 	bl	3c2e4 <radio_isr_set>
		radio_disable();
   3b626:	f000 ff4b 	bl	3c4c0 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   3b62a:	f000 ff69 	bl	3c500 <radio_is_ready>
   3b62e:	2800      	cmp	r0, #0
   3b630:	d14f      	bne.n	3b6d2 <isr_rx+0x192>
		lll->conn->periph.initiated = 1;
   3b632:	6862      	ldr	r2, [r4, #4]
   3b634:	f892 3020 	ldrb.w	r3, [r2, #32]
   3b638:	f043 0301 	orr.w	r3, r3, #1
   3b63c:	f882 3020 	strb.w	r3, [r2, #32]
		rx = ull_pdu_rx_alloc();
   3b640:	f7f7 fefa 	bl	33438 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   3b644:	2216      	movs	r2, #22
		rx->hdr.handle = 0xffff;
   3b646:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   3b64a:	7102      	strb	r2, [r0, #4]
		rx->hdr.handle = 0xffff;
   3b64c:	80c3      	strh	r3, [r0, #6]
		ftr->param = lll;
   3b64e:	6084      	str	r4, [r0, #8]
		rx = ull_pdu_rx_alloc();
   3b650:	4605      	mov	r5, r0
		ftr->ticks_anchor = radio_tmr_start_get();
   3b652:	f001 f939 	bl	3c8c8 <radio_tmr_start_get>
   3b656:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   3b658:	f001 f98a 	bl	3c970 <radio_tmr_end_get>
				    radio_rx_chain_delay_get(0, 0);
   3b65c:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   3b65e:	4604      	mov	r4, r0
				    radio_rx_chain_delay_get(0, 0);
   3b660:	4608      	mov	r0, r1
   3b662:	f000 ff21 	bl	3c4a8 <radio_rx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   3b666:	1a24      	subs	r4, r4, r0
   3b668:	616c      	str	r4, [r5, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   3b66a:	b1ae      	cbz	r6, 3b698 <isr_rx+0x158>
   3b66c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   3b670:	766b      	strb	r3, [r5, #25]
			ftr->extra = ull_pdu_rx_alloc();
   3b672:	f7f7 fee1 	bl	33438 <ull_pdu_rx_alloc>
   3b676:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
   3b678:	4629      	mov	r1, r5
   3b67a:	6828      	ldr	r0, [r5, #0]
			ftr->extra = ull_pdu_rx_alloc();
   3b67c:	60eb      	str	r3, [r5, #12]
		ull_rx_put(rx->hdr.link, rx);
   3b67e:	f7f7 fef1 	bl	33464 <ull_rx_put>
		ull_rx_sched();
   3b682:	f7f7 feff 	bl	33484 <ull_rx_sched>
}
   3b686:	b00b      	add	sp, #44	; 0x2c
   3b688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   3b68c:	fa5f f088 	uxtb.w	r0, r8
   3b690:	f7fe fca4 	bl	39fdc <ull_filter_lll_rl_irk_idx>
   3b694:	4603      	mov	r3, r0
   3b696:	e77f      	b.n	3b598 <isr_rx+0x58>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   3b698:	23ff      	movs	r3, #255	; 0xff
   3b69a:	e7e9      	b.n	3b670 <isr_rx+0x130>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   3b69c:	7f68      	ldrb	r0, [r5, #29]
   3b69e:	280c      	cmp	r0, #12
   3b6a0:	f47f af58 	bne.w	3b554 <isr_rx+0x14>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   3b6a4:	f1b8 0f00 	cmp.w	r8, #0
   3b6a8:	f47f af54 	bne.w	3b554 <isr_rx+0x14>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   3b6ac:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   3b6b0:	9001      	str	r0, [sp, #4]
   3b6b2:	f8cd 9000 	str.w	r9, [sp]
   3b6b6:	4620      	mov	r0, r4
   3b6b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   3b6bc:	9105      	str	r1, [sp, #20]
   3b6be:	f7ff fe99 	bl	3b3f4 <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   3b6c2:	bb10      	cbnz	r0, 3b70a <isr_rx+0x1ca>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   3b6c4:	7f28      	ldrb	r0, [r5, #28]
   3b6c6:	9b07      	ldr	r3, [sp, #28]
   3b6c8:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
   3b6cc:	f000 000f 	and.w	r0, r0, #15
   3b6d0:	e789      	b.n	3b5e6 <isr_rx+0xa6>
		LL_ASSERT(!radio_is_ready());
   3b6d2:	4a1f      	ldr	r2, [pc, #124]	; (3b750 <isr_rx+0x210>)
   3b6d4:	491f      	ldr	r1, [pc, #124]	; (3b754 <isr_rx+0x214>)
   3b6d6:	4820      	ldr	r0, [pc, #128]	; (3b758 <isr_rx+0x218>)
   3b6d8:	f240 53da 	movw	r3, #1498	; 0x5da
   3b6dc:	f007 f8f2 	bl	428c4 <printk>
   3b6e0:	4040      	eors	r0, r0
   3b6e2:	f380 8811 	msr	BASEPRI, r0
   3b6e6:	f04f 0003 	mov.w	r0, #3
   3b6ea:	df02      	svc	2
   3b6ec:	e7a1      	b.n	3b632 <isr_rx+0xf2>
	LL_ASSERT(node_rx);
   3b6ee:	4a18      	ldr	r2, [pc, #96]	; (3b750 <isr_rx+0x210>)
   3b6f0:	491a      	ldr	r1, [pc, #104]	; (3b75c <isr_rx+0x21c>)
   3b6f2:	4819      	ldr	r0, [pc, #100]	; (3b758 <isr_rx+0x218>)
   3b6f4:	f240 537a 	movw	r3, #1402	; 0x57a
   3b6f8:	f007 f8e4 	bl	428c4 <printk>
   3b6fc:	4040      	eors	r0, r0
   3b6fe:	f380 8811 	msr	BASEPRI, r0
   3b702:	f04f 0003 	mov.w	r0, #3
   3b706:	df02      	svc	2
   3b708:	e74f      	b.n	3b5aa <isr_rx+0x6a>
		radio_isr_set(isr_done, lll);
   3b70a:	480f      	ldr	r0, [pc, #60]	; (3b748 <isr_rx+0x208>)
   3b70c:	4621      	mov	r1, r4
   3b70e:	f000 fde9 	bl	3c2e4 <radio_isr_set>
		radio_switch_complete_and_disable();
   3b712:	f000 ffd9 	bl	3c6c8 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   3b716:	7e23      	ldrb	r3, [r4, #24]
   3b718:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   3b71c:	69d8      	ldr	r0, [r3, #28]
   3b71e:	f000 feb9 	bl	3c494 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   3b722:	f000 feed 	bl	3c500 <radio_is_ready>
   3b726:	2800      	cmp	r0, #0
   3b728:	d0ad      	beq.n	3b686 <isr_rx+0x146>
   3b72a:	4a09      	ldr	r2, [pc, #36]	; (3b750 <isr_rx+0x210>)
   3b72c:	4909      	ldr	r1, [pc, #36]	; (3b754 <isr_rx+0x214>)
   3b72e:	480a      	ldr	r0, [pc, #40]	; (3b758 <isr_rx+0x218>)
   3b730:	f240 5393 	movw	r3, #1427	; 0x593
   3b734:	f007 f8c6 	bl	428c4 <printk>
   3b738:	4040      	eors	r0, r0
   3b73a:	f380 8811 	msr	BASEPRI, r0
   3b73e:	f04f 0003 	mov.w	r0, #3
   3b742:	df02      	svc	2
		if (!err) {
   3b744:	e79f      	b.n	3b686 <isr_rx+0x146>
   3b746:	bf00      	nop
   3b748:	0003b1e5 	.word	0x0003b1e5
   3b74c:	0003acc1 	.word	0x0003acc1
   3b750:	0004a70c 	.word	0x0004a70c
   3b754:	0004a760 	.word	0x0004a760
   3b758:	00049c68 	.word	0x00049c68
   3b75c:	0004a758 	.word	0x0004a758

0003b760 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   3b760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b762:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   3b764:	f7ff f8c2 	bl	3a8ec <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   3b768:	f7f7 ff48 	bl	335fc <ull_event_done_extra_get>
	LL_ASSERT(e);
   3b76c:	4604      	mov	r4, r0
   3b76e:	2800      	cmp	r0, #0
   3b770:	d036      	beq.n	3b7e0 <isr_done+0x80>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
	e->crc_valid = crc_valid;
   3b772:	4922      	ldr	r1, [pc, #136]	; (3b7fc <isr_done+0x9c>)
   3b774:	79a2      	ldrb	r2, [r4, #6]
   3b776:	7808      	ldrb	r0, [r1, #0]
	e->trx_cnt = trx_cnt;
   3b778:	4b21      	ldr	r3, [pc, #132]	; (3b800 <isr_done+0xa0>)
	e->crc_valid = crc_valid;
   3b77a:	f360 0200 	bfi	r2, r0, #0, #1
   3b77e:	71a2      	strb	r2, [r4, #6]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   3b780:	4a20      	ldr	r2, [pc, #128]	; (3b804 <isr_done+0xa4>)
	e->trx_cnt = trx_cnt;
   3b782:	881b      	ldrh	r3, [r3, #0]
	e->mic_state = mic_state;
   3b784:	7812      	ldrb	r2, [r2, #0]
	e->trx_cnt = trx_cnt;
   3b786:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   3b788:	2101      	movs	r1, #1
   3b78a:	7021      	strb	r1, [r4, #0]
	e->mic_state = mic_state;
   3b78c:	71e2      	strb	r2, [r4, #7]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   3b78e:	b11b      	cbz	r3, 3b798 <isr_done+0x38>
		struct lll_conn *lll = param;

		if (lll->role) {
   3b790:	f995 301d 	ldrsb.w	r3, [r5, #29]
   3b794:	2b00      	cmp	r3, #0
   3b796:	db04      	blt.n	3b7a2 <isr_done+0x42>
			lll->periph.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   3b798:	4628      	mov	r0, r5
}
   3b79a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   3b79e:	f7ff b8b3 	b.w	3a908 <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   3b7a2:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
   3b7a6:	f003 0307 	and.w	r3, r3, #7
 */
#define HCTO_START_DELAY_US 1U

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   3b7aa:	2b02      	cmp	r3, #2
   3b7ac:	d016      	beq.n	3b7dc <isr_done+0x7c>
	default:
	case BIT(0):
		return 40;
   3b7ae:	2b04      	cmp	r3, #4
   3b7b0:	bf0c      	ite	eq
   3b7b2:	f44f 77bc 	moveq.w	r7, #376	; 0x178
   3b7b6:	2728      	movne	r7, #40	; 0x28
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   3b7b8:	f001 f8c6 	bl	3c948 <radio_tmr_aa_restore>
   3b7bc:	4606      	mov	r6, r0
   3b7be:	f001 f8c9 	bl	3c954 <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   3b7c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   3b7c4:	6127      	str	r7, [r4, #16]
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   3b7c6:	1a36      	subs	r6, r6, r0
			e->drift.window_widening_event_us =
   3b7c8:	e9c4 6302 	strd	r6, r3, [r4, #8]
			lll->periph.window_widening_event_us = 0;
   3b7cc:	2300      	movs	r3, #0
   3b7ce:	632b      	str	r3, [r5, #48]	; 0x30
			lll->periph.window_size_event_us = 0;
   3b7d0:	63ab      	str	r3, [r5, #56]	; 0x38
	lll_isr_cleanup(param);
   3b7d2:	4628      	mov	r0, r5
}
   3b7d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   3b7d8:	f7ff b896 	b.w	3a908 <lll_isr_cleanup>
	switch (phy) {
   3b7dc:	2718      	movs	r7, #24
   3b7de:	e7eb      	b.n	3b7b8 <isr_done+0x58>
	LL_ASSERT(e);
   3b7e0:	4a09      	ldr	r2, [pc, #36]	; (3b808 <isr_done+0xa8>)
   3b7e2:	490a      	ldr	r1, [pc, #40]	; (3b80c <isr_done+0xac>)
   3b7e4:	480a      	ldr	r0, [pc, #40]	; (3b810 <isr_done+0xb0>)
   3b7e6:	f240 3317 	movw	r3, #791	; 0x317
   3b7ea:	f007 f86b 	bl	428c4 <printk>
   3b7ee:	4040      	eors	r0, r0
   3b7f0:	f380 8811 	msr	BASEPRI, r0
   3b7f4:	f04f 0003 	mov.w	r0, #3
   3b7f8:	df02      	svc	2
   3b7fa:	e7ba      	b.n	3b772 <isr_done+0x12>
   3b7fc:	20003c1d 	.word	0x20003c1d
   3b800:	20003b0e 	.word	0x20003b0e
   3b804:	20003c1c 	.word	0x20003c1c
   3b808:	0004a7a4 	.word	0x0004a7a4
   3b80c:	0004a000 	.word	0x0004a000
   3b810:	00049c68 	.word	0x00049c68

0003b814 <lll_conn_init>:
{
   3b814:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   3b816:	f000 fea7 	bl	3c568 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   3b81a:	7802      	ldrb	r2, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   3b81c:	4603      	mov	r3, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   3b81e:	2101      	movs	r1, #1
   3b820:	f361 0201 	bfi	r2, r1, #0, #2
}
   3b824:	2000      	movs	r0, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   3b826:	701a      	strb	r2, [r3, #0]
}
   3b828:	bd08      	pop	{r3, pc}
   3b82a:	bf00      	nop

0003b82c <lll_conn_reset>:
}
   3b82c:	2000      	movs	r0, #0
   3b82e:	4770      	bx	lr

0003b830 <lll_conn_flush>:
}
   3b830:	4770      	bx	lr
   3b832:	bf00      	nop

0003b834 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   3b834:	4805      	ldr	r0, [pc, #20]	; (3b84c <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   3b836:	4906      	ldr	r1, [pc, #24]	; (3b850 <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   3b838:	4a06      	ldr	r2, [pc, #24]	; (3b854 <lll_conn_prepare_reset+0x20>)
{
   3b83a:	b410      	push	{r4}
	trx_cnt = 0U;
   3b83c:	2300      	movs	r3, #0
   3b83e:	4c06      	ldr	r4, [pc, #24]	; (3b858 <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   3b840:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   3b842:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   3b844:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   3b846:	8023      	strh	r3, [r4, #0]
}
   3b848:	bc10      	pop	{r4}
   3b84a:	4770      	bx	lr
   3b84c:	20003c1d 	.word	0x20003c1d
   3b850:	20003c1e 	.word	0x20003c1e
   3b854:	20003c1c 	.word	0x20003c1c
   3b858:	20003b0e 	.word	0x20003b0e

0003b85c <lll_conn_abort_cb>:
{
   3b85c:	b538      	push	{r3, r4, r5, lr}
	if (!prepare_param) {
   3b85e:	b1e8      	cbz	r0, 3b89c <lll_conn_abort_cb+0x40>
	err = lll_hfclock_off();
   3b860:	460d      	mov	r5, r1
   3b862:	4604      	mov	r4, r0
   3b864:	f7ff fa08 	bl	3ac78 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   3b868:	2800      	cmp	r0, #0
   3b86a:	db0a      	blt.n	3b882 <lll_conn_abort_cb+0x26>
	lll = prepare_param->param;
   3b86c:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   3b86e:	8923      	ldrh	r3, [r4, #8]
   3b870:	8a51      	ldrh	r1, [r2, #18]
   3b872:	3301      	adds	r3, #1
   3b874:	440b      	add	r3, r1
   3b876:	8253      	strh	r3, [r2, #18]
	lll_done(param);
   3b878:	4628      	mov	r0, r5
}
   3b87a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   3b87e:	f7fe bf6b 	b.w	3a758 <lll_done>
	LL_ASSERT(err >= 0);
   3b882:	4a0a      	ldr	r2, [pc, #40]	; (3b8ac <lll_conn_abort_cb+0x50>)
   3b884:	490a      	ldr	r1, [pc, #40]	; (3b8b0 <lll_conn_abort_cb+0x54>)
   3b886:	480b      	ldr	r0, [pc, #44]	; (3b8b4 <lll_conn_abort_cb+0x58>)
   3b888:	23aa      	movs	r3, #170	; 0xaa
   3b88a:	f007 f81b 	bl	428c4 <printk>
   3b88e:	4040      	eors	r0, r0
   3b890:	f380 8811 	msr	BASEPRI, r0
   3b894:	f04f 0003 	mov.w	r0, #3
   3b898:	df02      	svc	2
   3b89a:	e7e7      	b.n	3b86c <lll_conn_abort_cb+0x10>
		radio_isr_set(isr_done, param);
   3b89c:	4806      	ldr	r0, [pc, #24]	; (3b8b8 <lll_conn_abort_cb+0x5c>)
   3b89e:	f000 fd21 	bl	3c2e4 <radio_isr_set>
}
   3b8a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   3b8a6:	f000 be0b 	b.w	3c4c0 <radio_disable>
   3b8aa:	bf00      	nop
   3b8ac:	0004a7a4 	.word	0x0004a7a4
   3b8b0:	0004a6bc 	.word	0x0004a6bc
   3b8b4:	00049c68 	.word	0x00049c68
   3b8b8:	0003b761 	.word	0x0003b761

0003b8bc <lll_conn_rx_pkt_set>:
{
   3b8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b8be:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   3b8c0:	2001      	movs	r0, #1
   3b8c2:	f7f7 fd99 	bl	333f8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   3b8c6:	4604      	mov	r4, r0
   3b8c8:	b348      	cbz	r0, 3b91e <lll_conn_rx_pkt_set+0x62>
	phy = lll->phy_rx;
   3b8ca:	f895 6045 	ldrb.w	r6, [r5, #69]	; 0x45
	max_rx_octets = lll->max_rx_octets;
   3b8ce:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
	phy = lll->phy_rx;
   3b8d0:	f006 0607 	and.w	r6, r6, #7
	radio_phy_set(phy, 0);
   3b8d4:	2100      	movs	r1, #0
   3b8d6:	4630      	mov	r0, r6
   3b8d8:	f000 fd6a 	bl	3c3b0 <radio_phy_set>
	} else if (lll->enc_rx) {
   3b8dc:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
				    RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   3b8e0:	0072      	lsls	r2, r6, #1
	} else if (lll->enc_rx) {
   3b8e2:	071b      	lsls	r3, r3, #28
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   3b8e4:	b2f9      	uxtb	r1, r7
   3b8e6:	f042 0201 	orr.w	r2, r2, #1
						      node_rx->pdu));
   3b8ea:	f104 041c 	add.w	r4, r4, #28
	} else if (lll->enc_rx) {
   3b8ee:	d50e      	bpl.n	3b90e <lll_conn_rx_pkt_set+0x52>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   3b8f0:	3104      	adds	r1, #4
   3b8f2:	b2c9      	uxtb	r1, r1
   3b8f4:	2008      	movs	r0, #8
   3b8f6:	f000 fda1 	bl	3c43c <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   3b8fa:	4622      	mov	r2, r4
   3b8fc:	4631      	mov	r1, r6
   3b8fe:	f105 005f 	add.w	r0, r5, #95	; 0x5f
   3b902:	f001 f841 	bl	3c988 <radio_ccm_rx_pkt_set>
}
   3b906:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   3b90a:	f000 bdbd 	b.w	3c488 <radio_pkt_rx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_rx_octets,
   3b90e:	2008      	movs	r0, #8
   3b910:	f000 fd94 	bl	3c43c <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   3b914:	4620      	mov	r0, r4
}
   3b916:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   3b91a:	f000 bdb5 	b.w	3c488 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   3b91e:	4a07      	ldr	r2, [pc, #28]	; (3b93c <lll_conn_rx_pkt_set+0x80>)
   3b920:	4907      	ldr	r1, [pc, #28]	; (3b940 <lll_conn_rx_pkt_set+0x84>)
   3b922:	4808      	ldr	r0, [pc, #32]	; (3b944 <lll_conn_rx_pkt_set+0x88>)
   3b924:	f240 235a 	movw	r3, #602	; 0x25a
   3b928:	f006 ffcc 	bl	428c4 <printk>
   3b92c:	4040      	eors	r0, r0
   3b92e:	f380 8811 	msr	BASEPRI, r0
   3b932:	f04f 0003 	mov.w	r0, #3
   3b936:	df02      	svc	2
   3b938:	e7c7      	b.n	3b8ca <lll_conn_rx_pkt_set+0xe>
   3b93a:	bf00      	nop
   3b93c:	0004a7a4 	.word	0x0004a7a4
   3b940:	0004a758 	.word	0x0004a758
   3b944:	00049c68 	.word	0x00049c68

0003b948 <lll_conn_isr_tx>:
{
   3b948:	b538      	push	{r3, r4, r5, lr}
   3b94a:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   3b94c:	f7fe ffbc 	bl	3a8c8 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   3b950:	2096      	movs	r0, #150	; 0x96
   3b952:	f000 ff2b 	bl	3c7ac <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   3b956:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   3b95a:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   3b95e:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   3b962:	f000 0007 	and.w	r0, r0, #7
   3b966:	f002 0207 	and.w	r2, r2, #7
   3b96a:	2100      	movs	r1, #0
   3b96c:	f000 fe4c 	bl	3c608 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   3b970:	4620      	mov	r0, r4
   3b972:	f7ff ffa3 	bl	3b8bc <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   3b976:	f000 fdc3 	bl	3c500 <radio_is_ready>
   3b97a:	bb58      	cbnz	r0, 3b9d4 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + (EVENT_CLOCK_JITTER_US << 1) +
   3b97c:	f000 fffe 	bl	3c97c <radio_tmr_tifs_base_get>
   3b980:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   3b982:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   3b986:	2101      	movs	r1, #1
   3b988:	f000 0007 	and.w	r0, r0, #7
   3b98c:	f000 fd8c 	bl	3c4a8 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   3b990:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   3b994:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   3b998:	4405      	add	r5, r0
   3b99a:	2b02      	cmp	r3, #2
   3b99c:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   3b9a0:	d016      	beq.n	3b9d0 <lll_conn_isr_tx+0x88>
		return 40;
   3b9a2:	2b04      	cmp	r3, #4
   3b9a4:	bf0c      	ite	eq
   3b9a6:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   3b9aa:	2328      	movne	r3, #40	; 0x28
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   3b9ac:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
   3b9b0:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   3b9b4:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   3b9b8:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   3b9ba:	f000 fd71 	bl	3c4a0 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   3b9be:	1a28      	subs	r0, r5, r0
   3b9c0:	f000 ff94 	bl	3c8ec <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   3b9c4:	4621      	mov	r1, r4
   3b9c6:	480a      	ldr	r0, [pc, #40]	; (3b9f0 <lll_conn_isr_tx+0xa8>)
}
   3b9c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   3b9cc:	f000 bc8a 	b.w	3c2e4 <radio_isr_set>
	switch (phy) {
   3b9d0:	2318      	movs	r3, #24
   3b9d2:	e7eb      	b.n	3b9ac <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   3b9d4:	4a07      	ldr	r2, [pc, #28]	; (3b9f4 <lll_conn_isr_tx+0xac>)
   3b9d6:	4908      	ldr	r1, [pc, #32]	; (3b9f8 <lll_conn_isr_tx+0xb0>)
   3b9d8:	4808      	ldr	r0, [pc, #32]	; (3b9fc <lll_conn_isr_tx+0xb4>)
   3b9da:	f240 2313 	movw	r3, #531	; 0x213
   3b9de:	f006 ff71 	bl	428c4 <printk>
   3b9e2:	4040      	eors	r0, r0
   3b9e4:	f380 8811 	msr	BASEPRI, r0
   3b9e8:	f04f 0003 	mov.w	r0, #3
   3b9ec:	df02      	svc	2
   3b9ee:	e7c5      	b.n	3b97c <lll_conn_isr_tx+0x34>
   3b9f0:	0003bb25 	.word	0x0003bb25
   3b9f4:	0004a7a4 	.word	0x0004a7a4
   3b9f8:	0004a760 	.word	0x0004a760
   3b9fc:	00049c68 	.word	0x00049c68

0003ba00 <lll_conn_tx_pkt_set>:
{
   3ba00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ba02:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   3ba04:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
	max_tx_octets = lll->max_tx_octets;
   3ba08:	8f86      	ldrh	r6, [r0, #60]	; 0x3c
	phy = lll->phy_tx;
   3ba0a:	f001 0407 	and.w	r4, r1, #7
{
   3ba0e:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   3ba10:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   3ba14:	4620      	mov	r0, r4
   3ba16:	f000 fccb 	bl	3c3b0 <radio_phy_set>
	} else if (lll->enc_tx) {
   3ba1a:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   3ba1e:	0062      	lsls	r2, r4, #1
	} else if (lll->enc_tx) {
   3ba20:	06db      	lsls	r3, r3, #27
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   3ba22:	f042 0201 	orr.w	r2, r2, #1
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   3ba26:	b2f1      	uxtb	r1, r6
	} else if (lll->enc_tx) {
   3ba28:	d50d      	bpl.n	3ba46 <lll_conn_tx_pkt_set+0x46>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   3ba2a:	3104      	adds	r1, #4
   3ba2c:	b2c9      	uxtb	r1, r1
   3ba2e:	2008      	movs	r0, #8
   3ba30:	f000 fd04 	bl	3c43c <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   3ba34:	4639      	mov	r1, r7
   3ba36:	f105 0080 	add.w	r0, r5, #128	; 0x80
   3ba3a:	f000 ffe3 	bl	3ca04 <radio_ccm_tx_pkt_set>
}
   3ba3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   3ba42:	f000 bd27 	b.w	3c494 <radio_pkt_tx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_tx_octets, pkt_flags);
   3ba46:	2008      	movs	r0, #8
   3ba48:	f000 fcf8 	bl	3c43c <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   3ba4c:	4638      	mov	r0, r7
}
   3ba4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   3ba52:	f000 bd1f 	b.w	3c494 <radio_pkt_tx_set>
   3ba56:	bf00      	nop

0003ba58 <lll_conn_pdu_tx_prep>:
{
   3ba58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3ba5c:	4604      	mov	r4, r0
   3ba5e:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   3ba60:	aa01      	add	r2, sp, #4
   3ba62:	6c80      	ldr	r0, [r0, #72]	; 0x48
{
   3ba64:	460f      	mov	r7, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   3ba66:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   3ba68:	f7f4 f826 	bl	2fab8 <memq_peek>
	if (lll->empty || !link) {
   3ba6c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3ba70:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   3ba72:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   3ba74:	d43f      	bmi.n	3baf6 <lll_conn_pdu_tx_prep+0x9e>
   3ba76:	b378      	cbz	r0, 3bad8 <lll_conn_pdu_tx_prep+0x80>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   3ba78:	9b01      	ldr	r3, [sp, #4]
   3ba7a:	f894 805d 	ldrb.w	r8, [r4, #93]	; 0x5d
   3ba7e:	f103 0904 	add.w	r9, r3, #4
		if (!lll->packet_tx_head_len) {
   3ba82:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   3ba86:	eb09 0508 	add.w	r5, r9, r8
		if (!lll->packet_tx_head_len) {
   3ba8a:	b913      	cbnz	r3, 3ba92 <lll_conn_pdu_tx_prep+0x3a>
			lll->packet_tx_head_len = p->len;
   3ba8c:	786b      	ldrb	r3, [r5, #1]
   3ba8e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		if (lll->packet_tx_head_offset) {
   3ba92:	f1b8 0f00 	cmp.w	r8, #0
   3ba96:	d006      	beq.n	3baa6 <lll_conn_pdu_tx_prep+0x4e>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   3ba98:	f819 2008 	ldrb.w	r2, [r9, r8]
   3ba9c:	2101      	movs	r1, #1
   3ba9e:	f361 0201 	bfi	r2, r1, #0, #2
   3baa2:	f809 2008 	strb.w	r2, [r9, r8]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   3baa6:	eba3 0308 	sub.w	r3, r3, r8
   3baaa:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   3baac:	4620      	mov	r0, r4
   3baae:	f7fd f97d 	bl	38dac <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   3bab2:	786b      	ldrb	r3, [r5, #1]
   3bab4:	4283      	cmp	r3, r0
   3bab6:	d92f      	bls.n	3bb18 <lll_conn_pdu_tx_prep+0xc0>
			p->len = max_tx_octets;
   3bab8:	7068      	strb	r0, [r5, #1]
{
   3baba:	2201      	movs	r2, #1
			p->md = 1U;
   3babc:	f819 3008 	ldrb.w	r3, [r9, r8]
   3bac0:	f003 030f 	and.w	r3, r3, #15
   3bac4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   3bac8:	f809 3008 	strb.w	r3, [r9, r8]
		p->resv = 0U;
   3bacc:	2300      	movs	r3, #0
   3bace:	70ab      	strb	r3, [r5, #2]
	*pdu_data_tx = p;
   3bad0:	603d      	str	r5, [r7, #0]
}
   3bad2:	b003      	add	sp, #12
   3bad4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   3bad8:	f043 0304 	orr.w	r3, r3, #4
   3badc:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   3bae0:	f000 fd42 	bl	3c568 <radio_pkt_empty_get>
   3bae4:	4605      	mov	r5, r0
			p->md = 0U;
   3bae6:	782b      	ldrb	r3, [r5, #0]
   3bae8:	f36f 1304 	bfc	r3, #4, #1
   3baec:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   3baee:	603d      	str	r5, [r7, #0]
}
   3baf0:	b003      	add	sp, #12
   3baf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   3baf6:	f043 0304 	orr.w	r3, r3, #4
   3bafa:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   3bafe:	f000 fd33 	bl	3c568 <radio_pkt_empty_get>
   3bb02:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   3bb04:	2e00      	cmp	r6, #0
   3bb06:	d0ee      	beq.n	3bae6 <lll_conn_pdu_tx_prep+0x8e>
			p->md = 1U;
   3bb08:	7803      	ldrb	r3, [r0, #0]
   3bb0a:	f043 0310 	orr.w	r3, r3, #16
   3bb0e:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   3bb10:	603d      	str	r5, [r7, #0]
}
   3bb12:	b003      	add	sp, #12
   3bb14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   3bb18:	6832      	ldr	r2, [r6, #0]
   3bb1a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   3bb1c:	429a      	cmp	r2, r3
   3bb1e:	d1cc      	bne.n	3baba <lll_conn_pdu_tx_prep+0x62>
   3bb20:	2200      	movs	r2, #0
   3bb22:	e7cb      	b.n	3babc <lll_conn_pdu_tx_prep+0x64>

0003bb24 <lll_conn_isr_rx>:
{
   3bb24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3bb28:	b082      	sub	sp, #8
   3bb2a:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   3bb2c:	f000 fcf2 	bl	3c514 <radio_is_done>
	if (trx_done) {
   3bb30:	b2c0      	uxtb	r0, r0
   3bb32:	b950      	cbnz	r0, 3bb4a <lll_conn_isr_rx+0x26>
	lll_isr_rx_status_reset();
   3bb34:	f7fe fed0 	bl	3a8d8 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   3bb38:	48b7      	ldr	r0, [pc, #732]	; (3be18 <lll_conn_isr_rx+0x2f4>)
   3bb3a:	4621      	mov	r1, r4
   3bb3c:	f000 fbd2 	bl	3c2e4 <radio_isr_set>
}
   3bb40:	b002      	add	sp, #8
   3bb42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		radio_disable();
   3bb46:	f000 bcbb 	b.w	3c4c0 <radio_disable>
		crc_ok = radio_crc_is_valid();
   3bb4a:	f000 fd03 	bl	3c554 <radio_crc_is_valid>
   3bb4e:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   3bb50:	f000 fdd0 	bl	3c6f4 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   3bb54:	f7fe fec0 	bl	3a8d8 <lll_isr_rx_status_reset>
	trx_cnt++;
   3bb58:	4ab0      	ldr	r2, [pc, #704]	; (3be1c <lll_conn_isr_rx+0x2f8>)
   3bb5a:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   3bb5c:	2001      	movs	r0, #1
	trx_cnt++;
   3bb5e:	4403      	add	r3, r0
   3bb60:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   3bb62:	f7f7 fc49 	bl	333f8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   3bb66:	4607      	mov	r7, r0
   3bb68:	2800      	cmp	r0, #0
   3bb6a:	f000 80cf 	beq.w	3bd0c <lll_conn_isr_rx+0x1e8>
	if (crc_ok) {
   3bb6e:	2d00      	cmp	r5, #0
   3bb70:	d14c      	bne.n	3bc0c <lll_conn_isr_rx+0xe8>
		if (crc_expire == 0U) {
   3bb72:	4bab      	ldr	r3, [pc, #684]	; (3be20 <lll_conn_isr_rx+0x2fc>)
   3bb74:	781e      	ldrb	r6, [r3, #0]
   3bb76:	2e00      	cmp	r6, #0
   3bb78:	f040 80a6 	bne.w	3bcc8 <lll_conn_isr_rx+0x1a4>
		crc_expire--;
   3bb7c:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   3bb7e:	a901      	add	r1, sp, #4
   3bb80:	4620      	mov	r0, r4
		crc_expire--;
   3bb82:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   3bb84:	f7ff ff68 	bl	3ba58 <lll_conn_pdu_tx_prep>
	pdu_data_tx->sn = lll->sn;
   3bb88:	2600      	movs	r6, #0
   3bb8a:	f8dd 8004 	ldr.w	r8, [sp, #4]
   3bb8e:	4635      	mov	r5, r6
		radio_tmr_tifs_set(EVENT_IFS_US);
   3bb90:	2096      	movs	r0, #150	; 0x96
   3bb92:	f000 fe0b 	bl	3c7ac <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   3bb96:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   3bb9a:	f000 0007 	and.w	r0, r0, #7
   3bb9e:	f000 fceb 	bl	3c578 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   3bba2:	48a0      	ldr	r0, [pc, #640]	; (3be24 <lll_conn_isr_rx+0x300>)
   3bba4:	4621      	mov	r1, r4
   3bba6:	f000 fb9d 	bl	3c2e4 <radio_isr_set>
		radio_tmr_end_capture();
   3bbaa:	f000 fed9 	bl	3c960 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   3bbae:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
	pdu_data_tx->nesn = lll->nesn;
   3bbb2:	f898 1000 	ldrb.w	r1, [r8]
   3bbb6:	f3c2 0340 	ubfx	r3, r2, #1, #1
   3bbba:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   3bbbc:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   3bbc0:	f021 010c 	bic.w	r1, r1, #12
   3bbc4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   3bbc8:	430b      	orrs	r3, r1
   3bbca:	f888 3000 	strb.w	r3, [r8]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   3bbce:	4641      	mov	r1, r8
   3bbd0:	4620      	mov	r0, r4
   3bbd2:	f7ff ff15 	bl	3ba00 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   3bbd6:	f000 fc93 	bl	3c500 <radio_is_ready>
   3bbda:	2800      	cmp	r0, #0
   3bbdc:	f040 80c8 	bne.w	3bd70 <lll_conn_isr_rx+0x24c>
	if (!radio_tmr_aa_restore()) {
   3bbe0:	f000 feb2 	bl	3c948 <radio_tmr_aa_restore>
   3bbe4:	2800      	cmp	r0, #0
   3bbe6:	d065      	beq.n	3bcb4 <lll_conn_isr_rx+0x190>
	if (tx_release) {
   3bbe8:	2d00      	cmp	r5, #0
   3bbea:	d069      	beq.n	3bcc0 <lll_conn_isr_rx+0x19c>
		LL_ASSERT(lll->handle != 0xFFFF);
   3bbec:	89a0      	ldrh	r0, [r4, #12]
   3bbee:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3bbf2:	4298      	cmp	r0, r3
   3bbf4:	f000 80cb 	beq.w	3bd8e <lll_conn_isr_rx+0x26a>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   3bbf8:	4629      	mov	r1, r5
   3bbfa:	f7fc ff47 	bl	38a8c <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   3bbfe:	2e00      	cmp	r6, #0
   3bc00:	d175      	bne.n	3bcee <lll_conn_isr_rx+0x1ca>
}
   3bc02:	b002      	add	sp, #8
   3bc04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		ull_rx_sched();
   3bc08:	f7f7 bc3c 	b.w	33484 <ull_rx_sched>
	if (pdu_data_rx->nesn != lll->sn) {
   3bc0c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3bc10:	7f3a      	ldrb	r2, [r7, #28]
   3bc12:	f003 0101 	and.w	r1, r3, #1
   3bc16:	f3c2 0080 	ubfx	r0, r2, #2, #1
   3bc1a:	4288      	cmp	r0, r1
   3bc1c:	f000 8086 	beq.w	3bd2c <lll_conn_isr_rx+0x208>
		if (lll->role) {
   3bc20:	f994 201d 	ldrsb.w	r2, [r4, #29]
		lll->sn++;
   3bc24:	f081 0101 	eor.w	r1, r1, #1
   3bc28:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   3bc2c:	2a00      	cmp	r2, #0
		lll->sn++;
   3bc2e:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (lll->role) {
   3bc32:	da05      	bge.n	3bc40 <lll_conn_isr_rx+0x11c>
			lll->periph.latency_enabled = 1;
   3bc34:	f894 3020 	ldrb.w	r3, [r4, #32]
   3bc38:	f043 0304 	orr.w	r3, r3, #4
   3bc3c:	f884 3020 	strb.w	r3, [r4, #32]
		if (!lll->empty) {
   3bc40:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3bc44:	075d      	lsls	r5, r3, #29
   3bc46:	f100 80b4 	bmi.w	3bdb2 <lll_conn_isr_rx+0x28e>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   3bc4a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3bc4e:	aa01      	add	r2, sp, #4
   3bc50:	f7f3 ff32 	bl	2fab8 <memq_peek>
		if (link) {
   3bc54:	4605      	mov	r5, r0
   3bc56:	2800      	cmp	r0, #0
   3bc58:	f000 80b1 	beq.w	3bdbe <lll_conn_isr_rx+0x29a>
					       lll->packet_tx_head_offset);
   3bc5c:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
			pdu_data_tx_len = pdu_data_tx->len;
   3bc60:	9b01      	ldr	r3, [sp, #4]
   3bc62:	4413      	add	r3, r2
   3bc64:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   3bc66:	b171      	cbz	r1, 3bc86 <lll_conn_isr_rx+0x162>
				if (lll->enc_tx) {
   3bc68:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3bc6c:	06d8      	lsls	r0, r3, #27
   3bc6e:	d50a      	bpl.n	3bc86 <lll_conn_isr_rx+0x162>
					lll->ccm_tx.counter++;
   3bc70:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   3bc74:	3301      	adds	r3, #1
   3bc76:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   3bc7a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   3bc7e:	f143 0300 	adc.w	r3, r3, #0
   3bc82:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
			if (offset < lll->packet_tx_head_len) {
   3bc86:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   3bc8a:	440a      	add	r2, r1
   3bc8c:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   3bc8e:	429a      	cmp	r2, r3
   3bc90:	f0c0 809a 	bcc.w	3bdc8 <lll_conn_isr_rx+0x2a4>
			} else if (offset == lll->packet_tx_head_len) {
   3bc94:	f000 80af 	beq.w	3bdf6 <lll_conn_isr_rx+0x2d2>
				LL_ASSERT(0);
   3bc98:	4a63      	ldr	r2, [pc, #396]	; (3be28 <lll_conn_isr_rx+0x304>)
   3bc9a:	4964      	ldr	r1, [pc, #400]	; (3be2c <lll_conn_isr_rx+0x308>)
   3bc9c:	4864      	ldr	r0, [pc, #400]	; (3be30 <lll_conn_isr_rx+0x30c>)
   3bc9e:	f240 33a3 	movw	r3, #931	; 0x3a3
   3bca2:	f006 fe0f 	bl	428c4 <printk>
   3bca6:	4040      	eors	r0, r0
   3bca8:	f380 8811 	msr	BASEPRI, r0
   3bcac:	f04f 0003 	mov.w	r0, #3
   3bcb0:	df02      	svc	2
   3bcb2:	e084      	b.n	3bdbe <lll_conn_isr_rx+0x29a>
		radio_tmr_aa_save(radio_tmr_aa_get());
   3bcb4:	f000 fe3c 	bl	3c930 <radio_tmr_aa_get>
   3bcb8:	f000 fe40 	bl	3c93c <radio_tmr_aa_save>
	if (tx_release) {
   3bcbc:	2d00      	cmp	r5, #0
   3bcbe:	d195      	bne.n	3bbec <lll_conn_isr_rx+0xc8>
	if (is_rx_enqueue) {
   3bcc0:	b9ae      	cbnz	r6, 3bcee <lll_conn_isr_rx+0x1ca>
}
   3bcc2:	b002      	add	sp, #8
   3bcc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		crc_expire--;
   3bcc8:	3e01      	subs	r6, #1
   3bcca:	b2f6      	uxtb	r6, r6
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   3bccc:	a901      	add	r1, sp, #4
   3bcce:	4620      	mov	r0, r4
		crc_expire--;
   3bcd0:	701e      	strb	r6, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   3bcd2:	f7ff fec1 	bl	3ba58 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   3bcd6:	2e00      	cmp	r6, #0
   3bcd8:	f47f af56 	bne.w	3bb88 <lll_conn_isr_rx+0x64>
	pdu_data_tx->sn = lll->sn;
   3bcdc:	f8dd 8004 	ldr.w	r8, [sp, #4]
		radio_isr_set(isr_done, param);
   3bce0:	484d      	ldr	r0, [pc, #308]	; (3be18 <lll_conn_isr_rx+0x2f4>)
   3bce2:	4621      	mov	r1, r4
   3bce4:	f000 fafe 	bl	3c2e4 <radio_isr_set>
			radio_switch_complete_and_disable();
   3bce8:	f000 fcee 	bl	3c6c8 <radio_switch_complete_and_disable>
   3bcec:	e75f      	b.n	3bbae <lll_conn_isr_rx+0x8a>
		ull_pdu_rx_alloc();
   3bcee:	f7f7 fba3 	bl	33438 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3bcf2:	2303      	movs	r3, #3
   3bcf4:	713b      	strb	r3, [r7, #4]
		node_rx->hdr.handle = lll->handle;
   3bcf6:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   3bcf8:	6838      	ldr	r0, [r7, #0]
		node_rx->hdr.handle = lll->handle;
   3bcfa:	80fb      	strh	r3, [r7, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   3bcfc:	4639      	mov	r1, r7
   3bcfe:	f7f7 fbb1 	bl	33464 <ull_rx_put>
}
   3bd02:	b002      	add	sp, #8
   3bd04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		ull_rx_sched();
   3bd08:	f7f7 bbbc 	b.w	33484 <ull_rx_sched>
	LL_ASSERT(node_rx);
   3bd0c:	4a46      	ldr	r2, [pc, #280]	; (3be28 <lll_conn_isr_rx+0x304>)
   3bd0e:	4949      	ldr	r1, [pc, #292]	; (3be34 <lll_conn_isr_rx+0x310>)
   3bd10:	4847      	ldr	r0, [pc, #284]	; (3be30 <lll_conn_isr_rx+0x30c>)
   3bd12:	23f2      	movs	r3, #242	; 0xf2
   3bd14:	f006 fdd6 	bl	428c4 <printk>
   3bd18:	4040      	eors	r0, r0
   3bd1a:	f380 8811 	msr	BASEPRI, r0
   3bd1e:	f04f 0003 	mov.w	r0, #3
   3bd22:	df02      	svc	2
	if (crc_ok) {
   3bd24:	2d00      	cmp	r5, #0
   3bd26:	f43f af24 	beq.w	3bb72 <lll_conn_isr_rx+0x4e>
   3bd2a:	e76f      	b.n	3bc0c <lll_conn_isr_rx+0xe8>
	tx_release = NULL;
   3bd2c:	2500      	movs	r5, #0
	if ((pdu_data_rx->sn == lll->nesn) &&
   3bd2e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   3bd32:	f3c3 0340 	ubfx	r3, r3, #1, #1
   3bd36:	429a      	cmp	r2, r3
   3bd38:	d049      	beq.n	3bdce <lll_conn_isr_rx+0x2aa>
	is_rx_enqueue = 0U;
   3bd3a:	2600      	movs	r6, #0
		crc_expire = 0U;
   3bd3c:	4a38      	ldr	r2, [pc, #224]	; (3be20 <lll_conn_isr_rx+0x2fc>)
		crc_valid = 1U;
   3bd3e:	4b3e      	ldr	r3, [pc, #248]	; (3be38 <lll_conn_isr_rx+0x314>)
		crc_expire = 0U;
   3bd40:	2100      	movs	r1, #0
   3bd42:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   3bd44:	4620      	mov	r0, r4
		crc_valid = 1U;
   3bd46:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   3bd48:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   3bd4a:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   3bd4c:	f7ff fe84 	bl	3ba58 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   3bd50:	7f3b      	ldrb	r3, [r7, #28]
   3bd52:	06da      	lsls	r2, r3, #27
   3bd54:	d42a      	bmi.n	3bdac <lll_conn_isr_rx+0x288>
			      (pdu_data_tx->md == 0) &&
   3bd56:	f8dd 8004 	ldr.w	r8, [sp, #4]
   3bd5a:	f898 3000 	ldrb.w	r3, [r8]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   3bd5e:	06db      	lsls	r3, r3, #27
   3bd60:	f53f af16 	bmi.w	3bb90 <lll_conn_isr_rx+0x6c>
			      (pdu_data_tx->md == 0) &&
   3bd64:	f898 3001 	ldrb.w	r3, [r8, #1]
   3bd68:	2b00      	cmp	r3, #0
   3bd6a:	f47f af11 	bne.w	3bb90 <lll_conn_isr_rx+0x6c>
   3bd6e:	e7b7      	b.n	3bce0 <lll_conn_isr_rx+0x1bc>
	LL_ASSERT(!radio_is_ready());
   3bd70:	4a2d      	ldr	r2, [pc, #180]	; (3be28 <lll_conn_isr_rx+0x304>)
   3bd72:	4932      	ldr	r1, [pc, #200]	; (3be3c <lll_conn_isr_rx+0x318>)
   3bd74:	482e      	ldr	r0, [pc, #184]	; (3be30 <lll_conn_isr_rx+0x30c>)
   3bd76:	f240 1369 	movw	r3, #361	; 0x169
   3bd7a:	f006 fda3 	bl	428c4 <printk>
   3bd7e:	4040      	eors	r0, r0
   3bd80:	f380 8811 	msr	BASEPRI, r0
   3bd84:	f04f 0003 	mov.w	r0, #3
   3bd88:	df02      	svc	2
   3bd8a:	e729      	b.n	3bbe0 <lll_conn_isr_rx+0xbc>
	is_rx_enqueue = 0U;
   3bd8c:	2600      	movs	r6, #0
		LL_ASSERT(lll->handle != 0xFFFF);
   3bd8e:	4a26      	ldr	r2, [pc, #152]	; (3be28 <lll_conn_isr_rx+0x304>)
   3bd90:	492b      	ldr	r1, [pc, #172]	; (3be40 <lll_conn_isr_rx+0x31c>)
   3bd92:	4827      	ldr	r0, [pc, #156]	; (3be30 <lll_conn_isr_rx+0x30c>)
   3bd94:	f44f 73bc 	mov.w	r3, #376	; 0x178
   3bd98:	f006 fd94 	bl	428c4 <printk>
   3bd9c:	4040      	eors	r0, r0
   3bd9e:	f380 8811 	msr	BASEPRI, r0
   3bda2:	f04f 0003 	mov.w	r0, #3
   3bda6:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   3bda8:	89a0      	ldrh	r0, [r4, #12]
   3bdaa:	e725      	b.n	3bbf8 <lll_conn_isr_rx+0xd4>
			      (pdu_data_tx->md == 0) &&
   3bdac:	f8dd 8004 	ldr.w	r8, [sp, #4]
   3bdb0:	e6ee      	b.n	3bb90 <lll_conn_isr_rx+0x6c>
			lll->empty = 0;
   3bdb2:	f36f 0382 	bfc	r3, #2, #1
   3bdb6:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			pdu_data_tx = (void *)radio_pkt_empty_get();
   3bdba:	f000 fbd5 	bl	3c568 <radio_pkt_empty_get>
		if (link) {
   3bdbe:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3bdc2:	7f3a      	ldrb	r2, [r7, #28]
	tx_release = NULL;
   3bdc4:	2500      	movs	r5, #0
   3bdc6:	e7b2      	b.n	3bd2e <lll_conn_isr_rx+0x20a>
				lll->packet_tx_head_offset = offset;
   3bdc8:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
   3bdcc:	e7f7      	b.n	3bdbe <lll_conn_isr_rx+0x29a>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   3bdce:	2003      	movs	r0, #3
   3bdd0:	f7f7 fb12 	bl	333f8 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   3bdd4:	2800      	cmp	r0, #0
   3bdd6:	d0b0      	beq.n	3bd3a <lll_conn_isr_rx+0x216>
		lll->nesn++;
   3bdd8:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3bddc:	f083 0302 	eor.w	r3, r3, #2
   3bde0:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (pdu_data_rx->len != 0) {
   3bde4:	7f7b      	ldrb	r3, [r7, #29]
   3bde6:	2b00      	cmp	r3, #0
   3bde8:	d0a7      	beq.n	3bd3a <lll_conn_isr_rx+0x216>
			if (lll->enc_rx) {
   3bdea:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3bdee:	0719      	lsls	r1, r3, #28
   3bdf0:	d428      	bmi.n	3be44 <lll_conn_isr_rx+0x320>
			*is_rx_enqueue = 1U;
   3bdf2:	2601      	movs	r6, #1
   3bdf4:	e7a2      	b.n	3bd3c <lll_conn_isr_rx+0x218>
				lll->packet_tx_head_len = 0;
   3bdf6:	2200      	movs	r2, #0
   3bdf8:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				memq_dequeue(lll->memq_tx.tail,
   3bdfc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   3bdfe:	f104 0148 	add.w	r1, r4, #72	; 0x48
   3be02:	f7f3 fe61 	bl	2fac8 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   3be06:	9b01      	ldr	r3, [sp, #4]
   3be08:	681a      	ldr	r2, [r3, #0]
   3be0a:	602a      	str	r2, [r5, #0]
				tx->next = link;
   3be0c:	601d      	str	r5, [r3, #0]
				*tx_release = tx;
   3be0e:	9d01      	ldr	r5, [sp, #4]
				FORCE_MD_CNT_SET();
   3be10:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3be14:	7f3a      	ldrb	r2, [r7, #28]
   3be16:	e78a      	b.n	3bd2e <lll_conn_isr_rx+0x20a>
   3be18:	0003b761 	.word	0x0003b761
   3be1c:	20003b0e 	.word	0x20003b0e
   3be20:	20003c1e 	.word	0x20003c1e
   3be24:	0003b949 	.word	0x0003b949
   3be28:	0004a7a4 	.word	0x0004a7a4
   3be2c:	00049cc8 	.word	0x00049cc8
   3be30:	00049c68 	.word	0x00049c68
   3be34:	0004a758 	.word	0x0004a758
   3be38:	20003c1d 	.word	0x20003c1d
   3be3c:	0004a760 	.word	0x0004a760
   3be40:	0004a7f8 	.word	0x0004a7f8
				done = radio_ccm_is_done();
   3be44:	f000 fe06 	bl	3ca54 <radio_ccm_is_done>
				LL_ASSERT(done);
   3be48:	2800      	cmp	r0, #0
   3be4a:	d047      	beq.n	3bedc <lll_conn_isr_rx+0x3b8>
				bool mic_failure = !radio_ccm_mic_is_valid();
   3be4c:	f000 fe24 	bl	3ca98 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   3be50:	bba0      	cbnz	r0, 3bebc <lll_conn_isr_rx+0x398>
				    lll->ccm_rx.counter == 0 &&
   3be52:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   3be56:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
				if (mic_failure &&
   3be5a:	4313      	orrs	r3, r2
   3be5c:	d104      	bne.n	3be68 <lll_conn_isr_rx+0x344>
				    (pdu_data_rx->ll_id ==
   3be5e:	7f3b      	ldrb	r3, [r7, #28]
				    lll->ccm_rx.counter == 0 &&
   3be60:	f003 0303 	and.w	r3, r3, #3
   3be64:	2b03      	cmp	r3, #3
   3be66:	d012      	beq.n	3be8e <lll_conn_isr_rx+0x36a>
					mic_state = LLL_CONN_MIC_FAIL;
   3be68:	4b27      	ldr	r3, [pc, #156]	; (3bf08 <lll_conn_isr_rx+0x3e4>)
   3be6a:	2202      	movs	r2, #2
   3be6c:	701a      	strb	r2, [r3, #0]
	if (!radio_tmr_aa_restore()) {
   3be6e:	f000 fd6b 	bl	3c948 <radio_tmr_aa_restore>
   3be72:	2800      	cmp	r0, #0
   3be74:	d040      	beq.n	3bef8 <lll_conn_isr_rx+0x3d4>
	if (tx_release) {
   3be76:	2d00      	cmp	r5, #0
   3be78:	f43f af23 	beq.w	3bcc2 <lll_conn_isr_rx+0x19e>
		LL_ASSERT(lll->handle != 0xFFFF);
   3be7c:	89a0      	ldrh	r0, [r4, #12]
   3be7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3be82:	4298      	cmp	r0, r3
   3be84:	d082      	beq.n	3bd8c <lll_conn_isr_rx+0x268>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   3be86:	4629      	mov	r1, r5
   3be88:	f7fc fe00 	bl	38a8c <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   3be8c:	e6b9      	b.n	3bc02 <lll_conn_isr_rx+0xde>
						radio_pkt_scratch_get();
   3be8e:	f000 fb6f 	bl	3c570 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   3be92:	7843      	ldrb	r3, [r0, #1]
   3be94:	2b27      	cmp	r3, #39	; 0x27
						radio_pkt_scratch_get();
   3be96:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   3be98:	d8e6      	bhi.n	3be68 <lll_conn_isr_rx+0x344>
						memcpy(pdu_data_rx,
   3be9a:	3303      	adds	r3, #3
   3be9c:	b2da      	uxtb	r2, r3
   3be9e:	f107 001c 	add.w	r0, r7, #28
   3bea2:	f008 fe0e 	bl	44ac2 <memcpy>
						lll->ccm_rx.counter--;
   3bea6:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   3beaa:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
   3beae:	3b01      	subs	r3, #1
   3beb0:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   3beb4:	f142 33ff 	adc.w	r3, r2, #4294967295	; 0xffffffff
   3beb8:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
				lll->ccm_rx.counter++;
   3bebc:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
				mic_state = LLL_CONN_MIC_PASS;
   3bec0:	4a11      	ldr	r2, [pc, #68]	; (3bf08 <lll_conn_isr_rx+0x3e4>)
				lll->ccm_rx.counter++;
   3bec2:	3301      	adds	r3, #1
   3bec4:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   3bec8:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
						lll->ccm_rx.counter--;
   3becc:	f104 016f 	add.w	r1, r4, #111	; 0x6f
				lll->ccm_rx.counter++;
   3bed0:	f143 0300 	adc.w	r3, r3, #0
   3bed4:	604b      	str	r3, [r1, #4]
				mic_state = LLL_CONN_MIC_PASS;
   3bed6:	2301      	movs	r3, #1
   3bed8:	7013      	strb	r3, [r2, #0]
		if (err) {
   3beda:	e78a      	b.n	3bdf2 <lll_conn_isr_rx+0x2ce>
				LL_ASSERT(done);
   3bedc:	4a0b      	ldr	r2, [pc, #44]	; (3bf0c <lll_conn_isr_rx+0x3e8>)
   3bede:	490c      	ldr	r1, [pc, #48]	; (3bf10 <lll_conn_isr_rx+0x3ec>)
   3bee0:	480c      	ldr	r0, [pc, #48]	; (3bf14 <lll_conn_isr_rx+0x3f0>)
   3bee2:	f240 33be 	movw	r3, #958	; 0x3be
   3bee6:	f006 fced 	bl	428c4 <printk>
   3beea:	4040      	eors	r0, r0
   3beec:	f380 8811 	msr	BASEPRI, r0
   3bef0:	f04f 0003 	mov.w	r0, #3
   3bef4:	df02      	svc	2
   3bef6:	e7a9      	b.n	3be4c <lll_conn_isr_rx+0x328>
		radio_tmr_aa_save(radio_tmr_aa_get());
   3bef8:	f000 fd1a 	bl	3c930 <radio_tmr_aa_get>
   3befc:	f000 fd1e 	bl	3c93c <radio_tmr_aa_save>
	if (tx_release) {
   3bf00:	2d00      	cmp	r5, #0
   3bf02:	d1bb      	bne.n	3be7c <lll_conn_isr_rx+0x358>
   3bf04:	e6dd      	b.n	3bcc2 <lll_conn_isr_rx+0x19e>
   3bf06:	bf00      	nop
   3bf08:	20003c1c 	.word	0x20003c1c
   3bf0c:	0004a7a4 	.word	0x0004a7a4
   3bf10:	0004a7f0 	.word	0x0004a7f0
   3bf14:	00049c68 	.word	0x00049c68

0003bf18 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   3bf18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   3bf1c:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   3bf1e:	89a2      	ldrh	r2, [r4, #12]
   3bf20:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3bf24:	429a      	cmp	r2, r3
{
   3bf26:	b082      	sub	sp, #8
	if (unlikely(lll->handle == 0xFFFF)) {
   3bf28:	f000 80d2 	beq.w	3c0d0 <prepare_cb+0x1b8>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   3bf2c:	4605      	mov	r5, r0
   3bf2e:	f7ff fc81 	bl	3b834 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   3bf32:	892b      	ldrh	r3, [r5, #8]
   3bf34:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   3bf36:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   3bf38:	441a      	add	r2, r3
   3bf3a:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   3bf3c:	4410      	add	r0, r2
	lll->event_counter = (event_counter + 1);

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   3bf3e:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare + p->lazy;
   3bf40:	82a2      	strh	r2, [r4, #20]
	event_counter = lll->event_counter + lll->latency_event;
   3bf42:	b280      	uxth	r0, r0
	lll->event_counter = (event_counter + 1);
   3bf44:	1c41      	adds	r1, r0, #1
   3bf46:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   3bf48:	065e      	lsls	r6, r3, #25
	lll->latency_prepare = 0;
   3bf4a:	f04f 0100 	mov.w	r1, #0
   3bf4e:	8261      	strh	r1, [r4, #18]
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   3bf50:	f104 0118 	add.w	r1, r4, #24
	if (lll->data_chan_sel) {
   3bf54:	f100 808e 	bmi.w	3c074 <prepare_cb+0x15c>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   3bf58:	f003 003f 	and.w	r0, r3, #63	; 0x3f
   3bf5c:	460b      	mov	r3, r1
   3bf5e:	7fa1      	ldrb	r1, [r4, #30]
   3bf60:	9000      	str	r0, [sp, #0]
   3bf62:	f104 001f 	add.w	r0, r4, #31
   3bf66:	f7fd f871 	bl	3904c <lll_chan_sel_1>
   3bf6a:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->periph.window_widening_event_us +=
   3bf6c:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
   3bf70:	4413      	add	r3, r2
		lll->periph.window_widening_event_us =
			lll->periph.window_widening_max_us;
	}

	/* current window size */
	lll->periph.window_size_event_us +=
   3bf72:	e9d4 020d 	ldrd	r0, r2, [r4, #52]	; 0x34
	lll->periph.window_widening_prepare_us = 0;
   3bf76:	2100      	movs	r1, #0
	lll->periph.window_size_event_us +=
   3bf78:	4402      	add	r2, r0
	lll->periph.window_widening_prepare_us = 0;
   3bf7a:	62e1      	str	r1, [r4, #44]	; 0x2c
		lll->periph.window_size_prepare_us;
	lll->periph.window_size_prepare_us = 0;
   3bf7c:	6361      	str	r1, [r4, #52]	; 0x34
   3bf7e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	lll->periph.window_size_event_us +=
   3bf80:	63a2      	str	r2, [r4, #56]	; 0x38
	/* Ensure that empty flag reflects the state of the Tx queue, as a
	 * peripheral if this is the first connection event and as no prior PDU
	 * is transmitted, an incorrect acknowledgment by peer should not
	 * dequeue a PDU that has not been transmitted on air.
	 */
	if (!lll->empty) {
   3bf82:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
   3bf86:	428b      	cmp	r3, r1
   3bf88:	bf28      	it	cs
   3bf8a:	460b      	movcs	r3, r1
   3bf8c:	f012 0204 	ands.w	r2, r2, #4
   3bf90:	6323      	str	r3, [r4, #48]	; 0x30
   3bf92:	f000 808f 	beq.w	3c0b4 <prepare_cb+0x19c>
			lll->empty = 1U;
		}
	}

	/* Start setting up Radio h/w */
	radio_reset();
   3bf96:	f000 f9e7 	bl	3c368 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   3bf9a:	2000      	movs	r0, #0
   3bf9c:	f000 fa18 	bl	3c3d0 <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   3bfa0:	4620      	mov	r0, r4
   3bfa2:	f7ff fc8b 	bl	3b8bc <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   3bfa6:	1d20      	adds	r0, r4, #4
   3bfa8:	f000 fa30 	bl	3c40c <radio_aa_set>
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
   3bfac:	8923      	ldrh	r3, [r4, #8]
   3bfae:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   3bfb0:	f240 605b 	movw	r0, #1627	; 0x65b
   3bfb4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   3bfb8:	f000 fac0 	bl	3c53c <radio_crc_configure>
				sys_get_le24(lll->crc_init));

	lll_chan_set(data_chan_use);
   3bfbc:	4630      	mov	r0, r6
   3bfbe:	f7fe fc3f 	bl	3a840 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   3bfc2:	4621      	mov	r1, r4
   3bfc4:	4847      	ldr	r0, [pc, #284]	; (3c0e4 <prepare_cb+0x1cc>)
   3bfc6:	f000 f98d 	bl	3c2e4 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   3bfca:	2096      	movs	r0, #150	; 0x96
   3bfcc:	f000 fbee 	bl	3c7ac <radio_tmr_tifs_set>
	 * - CTE RX is not enabled,
	 * - SOC does not require compensation for PHYEND event delay.
	 */
	if (!IS_ENABLED(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)) {
#if defined(CONFIG_BT_CTLR_PHY)
		radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   3bfd0:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   3bfd4:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   3bfd8:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   3bfdc:	2100      	movs	r1, #0
   3bfde:	f002 0207 	and.w	r2, r2, #7
   3bfe2:	f000 0007 	and.w	r0, r0, #7
   3bfe6:	f000 fb0f 	bl	3c608 <radio_switch_complete_and_tx>
		radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */
	}

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   3bfea:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   3bfec:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   3bfee:	4638      	mov	r0, r7
   3bff0:	f7fe fc08 	bl	3a804 <lll_event_offset_get>
   3bff4:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   3bff6:	686a      	ldr	r2, [r5, #4]
   3bff8:	f106 0109 	add.w	r1, r6, #9
   3bffc:	2000      	movs	r0, #0
   3bffe:	f000 fbe1 	bl	3c7c4 <radio_tmr_start>
   3c002:	4680      	mov	r8, r0

	radio_tmr_aa_capture();
   3c004:	f000 fc80 	bl	3c908 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   3c008:	2000      	movs	r0, #0
   3c00a:	f000 fc97 	bl	3c93c <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   3c00e:	6b23      	ldr	r3, [r4, #48]	; 0x30
		 lll->periph.window_widening_event_us) << 1) +
	       lll->periph.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   3c010:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   3c014:	f103 0230 	add.w	r2, r3, #48	; 0x30
	hcto = remainder_us +
   3c018:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   3c01a:	f000 0007 	and.w	r0, r0, #7
   3c01e:	2101      	movs	r1, #1
	hcto = remainder_us +
   3c020:	eb03 0542 	add.w	r5, r3, r2, lsl #1
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   3c024:	f000 fa3e 	bl	3c4a4 <radio_rx_ready_delay_get>
	hcto = remainder_us +
   3c028:	4445      	add	r5, r8
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   3c02a:	4405      	add	r5, r0
	hcto += addr_us_get(lll->phy_rx);
   3c02c:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   3c030:	f000 0007 	and.w	r0, r0, #7
   3c034:	2802      	cmp	r0, #2
   3c036:	d03b      	beq.n	3c0b0 <prepare_cb+0x198>
		return 40;
   3c038:	2804      	cmp	r0, #4
   3c03a:	bf0c      	ite	eq
   3c03c:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   3c040:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   3c042:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   3c044:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   3c046:	f000 fa2f 	bl	3c4a8 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   3c04a:	4428      	add	r0, r5
   3c04c:	f000 fc4e 	bl	3c8ec <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   3c050:	89a1      	ldrh	r1, [r4, #12]
   3c052:	3103      	adds	r1, #3
   3c054:	4632      	mov	r2, r6
   3c056:	b2c9      	uxtb	r1, r1
   3c058:	4638      	mov	r0, r7
   3c05a:	f7fe fbe1 	bl	3a820 <lll_preempt_calc>
   3c05e:	b188      	cbz	r0, 3c084 <prepare_cb+0x16c>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   3c060:	4821      	ldr	r0, [pc, #132]	; (3c0e8 <prepare_cb+0x1d0>)
   3c062:	4621      	mov	r1, r4
   3c064:	f000 f93e 	bl	3c2e4 <radio_isr_set>
		radio_disable();
   3c068:	f000 fa2a 	bl	3c4c0 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   3c06c:	2000      	movs	r0, #0
   3c06e:	b002      	add	sp, #8
   3c070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   3c074:	460a      	mov	r2, r1
   3c076:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3c07a:	8be1      	ldrh	r1, [r4, #30]
   3c07c:	f7fd f832 	bl	390e4 <lll_chan_sel_2>
   3c080:	4606      	mov	r6, r0
   3c082:	e773      	b.n	3bf6c <prepare_cb+0x54>
		ret = lll_prepare_done(lll);
   3c084:	4620      	mov	r0, r4
   3c086:	f7fe fb65 	bl	3a754 <lll_prepare_done>
		LL_ASSERT(!ret);
   3c08a:	2800      	cmp	r0, #0
   3c08c:	d0ee      	beq.n	3c06c <prepare_cb+0x154>
   3c08e:	4a17      	ldr	r2, [pc, #92]	; (3c0ec <prepare_cb+0x1d4>)
   3c090:	4917      	ldr	r1, [pc, #92]	; (3c0f0 <prepare_cb+0x1d8>)
   3c092:	4818      	ldr	r0, [pc, #96]	; (3c0f4 <prepare_cb+0x1dc>)
   3c094:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   3c098:	f006 fc14 	bl	428c4 <printk>
   3c09c:	4040      	eors	r0, r0
   3c09e:	f380 8811 	msr	BASEPRI, r0
   3c0a2:	f04f 0003 	mov.w	r0, #3
   3c0a6:	df02      	svc	2
}
   3c0a8:	2000      	movs	r0, #0
   3c0aa:	b002      	add	sp, #8
   3c0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (phy) {
   3c0b0:	2318      	movs	r3, #24
   3c0b2:	e7c6      	b.n	3c042 <prepare_cb+0x12a>
		link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL);
   3c0b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3c0b8:	f7f3 fcfe 	bl	2fab8 <memq_peek>
		if (!link) {
   3c0bc:	2800      	cmp	r0, #0
   3c0be:	f47f af6a 	bne.w	3bf96 <prepare_cb+0x7e>
			lll->empty = 1U;
   3c0c2:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3c0c6:	f043 0304 	orr.w	r3, r3, #4
   3c0ca:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
   3c0ce:	e762      	b.n	3bf96 <prepare_cb+0x7e>
		radio_isr_set(lll_isr_early_abort, lll);
   3c0d0:	4809      	ldr	r0, [pc, #36]	; (3c0f8 <prepare_cb+0x1e0>)
   3c0d2:	4621      	mov	r1, r4
   3c0d4:	f000 f906 	bl	3c2e4 <radio_isr_set>
		radio_disable();
   3c0d8:	f000 f9f2 	bl	3c4c0 <radio_disable>
}
   3c0dc:	2000      	movs	r0, #0
   3c0de:	b002      	add	sp, #8
   3c0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3c0e4:	0003bb25 	.word	0x0003bb25
   3c0e8:	0003a975 	.word	0x0003a975
   3c0ec:	0004a810 	.word	0x0004a810
   3c0f0:	00049f00 	.word	0x00049f00
   3c0f4:	00049c68 	.word	0x00049c68
   3c0f8:	0003a999 	.word	0x0003a999

0003c0fc <lll_periph_prepare>:
{
   3c0fc:	b510      	push	{r4, lr}
   3c0fe:	b082      	sub	sp, #8
   3c100:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   3c102:	f7fe fda1 	bl	3ac48 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   3c106:	2800      	cmp	r0, #0
   3c108:	db25      	blt.n	3c156 <lll_periph_prepare+0x5a>
	lll = p->param;
   3c10a:	68e1      	ldr	r1, [r4, #12]
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   3c10c:	8920      	ldrh	r0, [r4, #8]
   3c10e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	lll->periph.window_widening_prepare_us +=
   3c110:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   3c112:	fb00 3303 	mla	r3, r0, r3, r3
   3c116:	6a88      	ldr	r0, [r1, #40]	; 0x28
	lll->periph.window_widening_prepare_us +=
   3c118:	4413      	add	r3, r2
   3c11a:	4283      	cmp	r3, r0
   3c11c:	bf28      	it	cs
   3c11e:	4603      	movcs	r3, r0
   3c120:	62cb      	str	r3, [r1, #44]	; 0x2c
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   3c122:	4a13      	ldr	r2, [pc, #76]	; (3c170 <lll_periph_prepare+0x74>)
   3c124:	4913      	ldr	r1, [pc, #76]	; (3c174 <lll_periph_prepare+0x78>)
   3c126:	4814      	ldr	r0, [pc, #80]	; (3c178 <lll_periph_prepare+0x7c>)
   3c128:	9400      	str	r4, [sp, #0]
   3c12a:	2300      	movs	r3, #0
   3c12c:	f7f7 fc80 	bl	33a30 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   3c130:	b108      	cbz	r0, 3c136 <lll_periph_prepare+0x3a>
   3c132:	3077      	adds	r0, #119	; 0x77
   3c134:	d101      	bne.n	3c13a <lll_periph_prepare+0x3e>
}
   3c136:	b002      	add	sp, #8
   3c138:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   3c13a:	4a10      	ldr	r2, [pc, #64]	; (3c17c <lll_periph_prepare+0x80>)
   3c13c:	4910      	ldr	r1, [pc, #64]	; (3c180 <lll_periph_prepare+0x84>)
   3c13e:	4811      	ldr	r0, [pc, #68]	; (3c184 <lll_periph_prepare+0x88>)
   3c140:	235e      	movs	r3, #94	; 0x5e
   3c142:	f006 fbbf 	bl	428c4 <printk>
   3c146:	4040      	eors	r0, r0
   3c148:	f380 8811 	msr	BASEPRI, r0
   3c14c:	f04f 0003 	mov.w	r0, #3
   3c150:	df02      	svc	2
}
   3c152:	b002      	add	sp, #8
   3c154:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   3c156:	4a09      	ldr	r2, [pc, #36]	; (3c17c <lll_periph_prepare+0x80>)
   3c158:	490b      	ldr	r1, [pc, #44]	; (3c188 <lll_periph_prepare+0x8c>)
   3c15a:	480a      	ldr	r0, [pc, #40]	; (3c184 <lll_periph_prepare+0x88>)
   3c15c:	234d      	movs	r3, #77	; 0x4d
   3c15e:	f006 fbb1 	bl	428c4 <printk>
   3c162:	4040      	eors	r0, r0
   3c164:	f380 8811 	msr	BASEPRI, r0
   3c168:	f04f 0003 	mov.w	r0, #3
   3c16c:	df02      	svc	2
   3c16e:	e7cc      	b.n	3c10a <lll_periph_prepare+0xe>
   3c170:	0003bf19 	.word	0x0003bf19
   3c174:	0003b85d 	.word	0x0003b85d
   3c178:	0003a7fd 	.word	0x0003a7fd
   3c17c:	0004a810 	.word	0x0004a810
   3c180:	0004a790 	.word	0x0004a790
   3c184:	00049c68 	.word	0x00049c68
   3c188:	0004a6bc 	.word	0x0004a6bc

0003c18c <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   3c18c:	4b05      	ldr	r3, [pc, #20]	; (3c1a4 <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   3c18e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   3c192:	2100      	movs	r1, #0
   3c194:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   3c198:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   3c19c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   3c1a0:	4770      	bx	lr
   3c1a2:	bf00      	nop
   3c1a4:	4000b000 	.word	0x4000b000

0003c1a8 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   3c1a8:	4b05      	ldr	r3, [pc, #20]	; (3c1c0 <cntr_start+0x18>)
   3c1aa:	7818      	ldrb	r0, [r3, #0]
   3c1ac:	1c42      	adds	r2, r0, #1
   3c1ae:	701a      	strb	r2, [r3, #0]
   3c1b0:	b918      	cbnz	r0, 3c1ba <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   3c1b2:	4b04      	ldr	r3, [pc, #16]	; (3c1c4 <cntr_start+0x1c>)
   3c1b4:	2201      	movs	r2, #1
   3c1b6:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   3c1b8:	4770      	bx	lr
		return 1;
   3c1ba:	2001      	movs	r0, #1
}
   3c1bc:	4770      	bx	lr
   3c1be:	bf00      	nop
   3c1c0:	20003c1f 	.word	0x20003c1f
   3c1c4:	4000b000 	.word	0x4000b000

0003c1c8 <cntr_stop>:

uint32_t cntr_stop(void)
{
   3c1c8:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   3c1ca:	4c0d      	ldr	r4, [pc, #52]	; (3c200 <cntr_stop+0x38>)
   3c1cc:	7820      	ldrb	r0, [r4, #0]
   3c1ce:	b148      	cbz	r0, 3c1e4 <cntr_stop+0x1c>

	if (--_refcount) {
   3c1d0:	3801      	subs	r0, #1
   3c1d2:	b2c0      	uxtb	r0, r0
   3c1d4:	7020      	strb	r0, [r4, #0]
   3c1d6:	b918      	cbnz	r0, 3c1e0 <cntr_stop+0x18>
   3c1d8:	4b0a      	ldr	r3, [pc, #40]	; (3c204 <cntr_stop+0x3c>)
   3c1da:	2201      	movs	r2, #1
   3c1dc:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   3c1de:	bd10      	pop	{r4, pc}
		return 1;
   3c1e0:	2001      	movs	r0, #1
}
   3c1e2:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   3c1e4:	4a08      	ldr	r2, [pc, #32]	; (3c208 <cntr_stop+0x40>)
   3c1e6:	4909      	ldr	r1, [pc, #36]	; (3c20c <cntr_stop+0x44>)
   3c1e8:	4809      	ldr	r0, [pc, #36]	; (3c210 <cntr_stop+0x48>)
   3c1ea:	232d      	movs	r3, #45	; 0x2d
   3c1ec:	f006 fb6a 	bl	428c4 <printk>
   3c1f0:	4040      	eors	r0, r0
   3c1f2:	f380 8811 	msr	BASEPRI, r0
   3c1f6:	f04f 0003 	mov.w	r0, #3
   3c1fa:	df02      	svc	2
	if (--_refcount) {
   3c1fc:	7820      	ldrb	r0, [r4, #0]
   3c1fe:	e7e7      	b.n	3c1d0 <cntr_stop+0x8>
   3c200:	20003c1f 	.word	0x20003c1f
   3c204:	4000b000 	.word	0x4000b000
   3c208:	0004a864 	.word	0x0004a864
   3c20c:	0004a8b0 	.word	0x0004a8b0
   3c210:	00049c68 	.word	0x00049c68

0003c214 <cntr_cnt_get>:
     return p_reg->COUNTER;
   3c214:	4b01      	ldr	r3, [pc, #4]	; (3c21c <cntr_cnt_get+0x8>)
   3c216:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   3c21a:	4770      	bx	lr
   3c21c:	4000b000 	.word	0x4000b000

0003c220 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   3c220:	4b02      	ldr	r3, [pc, #8]	; (3c22c <cntr_cmp_set+0xc>)
   3c222:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   3c226:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   3c22a:	4770      	bx	lr
   3c22c:	4000b000 	.word	0x4000b000

0003c230 <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3c230:	4b12      	ldr	r3, [pc, #72]	; (3c27c <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   3c232:	b430      	push	{r4, r5}
   3c234:	2101      	movs	r1, #1
   3c236:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   3c238:	2000      	movs	r0, #0
   3c23a:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   3c23c:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   3c240:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   3c244:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   3c248:	6019      	str	r1, [r3, #0]
}
   3c24a:	e005      	b.n	3c258 <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   3c24c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   3c250:	b932      	cbnz	r2, 3c260 <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   3c252:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   3c256:	b11a      	cbz	r2, 3c260 <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   3c258:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   3c25c:	2a00      	cmp	r2, #0
   3c25e:	d0f5      	beq.n	3c24c <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3c260:	6059      	str	r1, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   3c262:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   3c266:	2a00      	cmp	r2, #0
   3c268:	d1e7      	bne.n	3c23a <do_ecb+0xa>
   3c26a:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   3c26e:	2d00      	cmp	r5, #0
   3c270:	d0e3      	beq.n	3c23a <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
}
   3c272:	bc30      	pop	{r4, r5}
	NRF_ECB->ECBDATAPTR = 0;
   3c274:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   3c278:	4770      	bx	lr
   3c27a:	bf00      	nop
   3c27c:	4000e000 	.word	0x4000e000

0003c280 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   3c280:	b570      	push	{r4, r5, r6, lr}
   3c282:	b08c      	sub	sp, #48	; 0x30
   3c284:	460e      	mov	r6, r1
   3c286:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   3c288:	4601      	mov	r1, r0
   3c28a:	2210      	movs	r2, #16
   3c28c:	4668      	mov	r0, sp
{
   3c28e:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   3c290:	f7f3 fbe0 	bl	2fa54 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   3c294:	2210      	movs	r2, #16
   3c296:	eb0d 0002 	add.w	r0, sp, r2
   3c29a:	4631      	mov	r1, r6
   3c29c:	f7f3 fbda 	bl	2fa54 <mem_rcopy>

	do_ecb(&ecb);
   3c2a0:	4668      	mov	r0, sp
   3c2a2:	f7ff ffc5 	bl	3c230 <do_ecb>

	if (cipher_text_le) {
   3c2a6:	b125      	cbz	r5, 3c2b2 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   3c2a8:	2210      	movs	r2, #16
   3c2aa:	a908      	add	r1, sp, #32
   3c2ac:	4628      	mov	r0, r5
   3c2ae:	f7f3 fbd1 	bl	2fa54 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   3c2b2:	b124      	cbz	r4, 3c2be <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   3c2b4:	2210      	movs	r2, #16
   3c2b6:	a908      	add	r1, sp, #32
   3c2b8:	4620      	mov	r0, r4
   3c2ba:	f008 fc02 	bl	44ac2 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   3c2be:	b00c      	add	sp, #48	; 0x30
   3c2c0:	bd70      	pop	{r4, r5, r6, pc}
   3c2c2:	bf00      	nop

0003c2c4 <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   3c2c4:	4b04      	ldr	r3, [pc, #16]	; (3c2d8 <isr_radio+0x14>)
   3c2c6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   3c2ca:	b123      	cbz	r3, 3c2d6 <isr_radio+0x12>
		isr_cb(isr_cb_param);
   3c2cc:	4a03      	ldr	r2, [pc, #12]	; (3c2dc <isr_radio+0x18>)
   3c2ce:	4b04      	ldr	r3, [pc, #16]	; (3c2e0 <isr_radio+0x1c>)
   3c2d0:	6810      	ldr	r0, [r2, #0]
   3c2d2:	681b      	ldr	r3, [r3, #0]
   3c2d4:	4718      	bx	r3
}
   3c2d6:	4770      	bx	lr
   3c2d8:	40001000 	.word	0x40001000
   3c2dc:	20002d20 	.word	0x20002d20
   3c2e0:	20002d24 	.word	0x20002d24

0003c2e4 <radio_isr_set>:
{
   3c2e4:	b538      	push	{r3, r4, r5, lr}
   3c2e6:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   3c2e8:	2001      	movs	r0, #1
{
   3c2ea:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   3c2ec:	f7ed ff1c 	bl	2a128 <arch_irq_disable>
	isr_cb = cb;
   3c2f0:	4b08      	ldr	r3, [pc, #32]	; (3c314 <radio_isr_set+0x30>)
	isr_cb_param = param;
   3c2f2:	4a09      	ldr	r2, [pc, #36]	; (3c318 <radio_isr_set+0x34>)
	isr_cb = cb;
   3c2f4:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   3c2f6:	4909      	ldr	r1, [pc, #36]	; (3c31c <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   3c2f8:	4b09      	ldr	r3, [pc, #36]	; (3c320 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   3c2fa:	6015      	str	r5, [r2, #0]
   3c2fc:	2010      	movs	r0, #16
   3c2fe:	2202      	movs	r2, #2
   3c300:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   3c304:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   3c308:	2001      	movs	r0, #1
}
   3c30a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   3c30e:	f7ed befd 	b.w	2a10c <arch_irq_enable>
   3c312:	bf00      	nop
   3c314:	20002d24 	.word	0x20002d24
   3c318:	20002d20 	.word	0x20002d20
   3c31c:	40001000 	.word	0x40001000
   3c320:	e000e100 	.word	0xe000e100

0003c324 <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   3c324:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3c328:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   3c32c:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   3c32e:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   3c332:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   3c336:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   3c33a:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   3c33e:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   3c342:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   3c346:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   3c34a:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   3c34e:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   3c352:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   3c356:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   3c35a:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   3c35e:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   3c362:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   3c366:	4770      	bx	lr

0003c368 <radio_reset>:
{
   3c368:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   3c36a:	2001      	movs	r0, #1
   3c36c:	f7ed fedc 	bl	2a128 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
   3c370:	4a0d      	ldr	r2, [pc, #52]	; (3c3a8 <radio_reset+0x40>)
   3c372:	2100      	movs	r1, #0
   3c374:	2301      	movs	r3, #1
   3c376:	f8c2 1ffc 	str.w	r1, [r2, #4092]	; 0xffc
   3c37a:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   3c37e:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   3c382:	490a      	ldr	r1, [pc, #40]	; (3c3ac <radio_reset+0x44>)
					 0xfffffffe) | 0x01000000;
   3c384:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   3c388:	f023 0301 	bic.w	r3, r3, #1
   3c38c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   3c390:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PHYEND_DELAY_COMPENSATION_PPI(0)) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   3c394:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   3c398:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   3c39c:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   3c3a0:	f8c1 0804 	str.w	r0, [r1, #2052]	; 0x804
}
   3c3a4:	bd10      	pop	{r4, pc}
   3c3a6:	bf00      	nop
   3c3a8:	40001000 	.word	0x40001000
   3c3ac:	4001f000 	.word	0x4001f000

0003c3b0 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   3c3b0:	4b06      	ldr	r3, [pc, #24]	; (3c3cc <radio_phy_set+0x1c>)
	uint32_t mode;

	switch (phy) {
	case BIT(0):
	default:
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   3c3b2:	2802      	cmp	r0, #2
   3c3b4:	bf0c      	ite	eq
   3c3b6:	2204      	moveq	r2, #4
   3c3b8:	2203      	movne	r2, #3
   3c3ba:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   3c3be:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   3c3c2:	f042 0201 	orr.w	r2, r2, #1
   3c3c6:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   3c3ca:	4770      	bx	lr
   3c3cc:	40001000 	.word	0x40001000

0003c3d0 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   3c3d0:	4b01      	ldr	r3, [pc, #4]	; (3c3d8 <radio_tx_power_set+0x8>)
   3c3d2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   3c3d6:	4770      	bx	lr
   3c3d8:	40001000 	.word	0x40001000

0003c3dc <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   3c3dc:	4b01      	ldr	r3, [pc, #4]	; (3c3e4 <radio_freq_chan_set+0x8>)
   3c3de:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   3c3e2:	4770      	bx	lr
   3c3e4:	40001000 	.word	0x40001000

0003c3e8 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   3c3e8:	4b07      	ldr	r3, [pc, #28]	; (3c408 <radio_whiten_iv_set+0x20>)
   3c3ea:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   3c3ee:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   3c3f2:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   3c3f6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   3c3fa:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   3c3fe:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   3c402:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   3c406:	4770      	bx	lr
   3c408:	40001000 	.word	0x40001000

0003c40c <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   3c40c:	4a0a      	ldr	r2, [pc, #40]	; (3c438 <radio_aa_set+0x2c>)
   3c40e:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   3c410:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   3c412:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   3c416:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   3c41a:	78c3      	ldrb	r3, [r0, #3]
   3c41c:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   3c420:	7843      	ldrb	r3, [r0, #1]
   3c422:	f890 c002 	ldrb.w	ip, [r0, #2]
   3c426:	7801      	ldrb	r1, [r0, #0]
   3c428:	041b      	lsls	r3, r3, #16
   3c42a:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   3c42e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   3c432:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   3c436:	4770      	bx	lr
   3c438:	40001000 	.word	0x40001000

0003c43c <radio_pkt_configure>:
	switch (phy) {
   3c43c:	f3c2 0342 	ubfx	r3, r2, #1, #3
   3c440:	f1a3 0302 	sub.w	r3, r3, #2
   3c444:	fab3 f383 	clz	r3, r3
   3c448:	095b      	lsrs	r3, r3, #5
   3c44a:	061b      	lsls	r3, r3, #24
	if (pdu_type == RADIO_PKT_CONF_PDU_TYPE_DC) {
   3c44c:	07d2      	lsls	r2, r2, #31
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   3c44e:	bf48      	it	mi
   3c450:	f443 1380 	orrmi.w	r3, r3, #1048576	; 0x100000
		((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) & RADIO_PCNF0_LFLEN_Msk) |
   3c454:	f000 000f 	and.w	r0, r0, #15
	NRF_RADIO->PCNF0 =
   3c458:	4a09      	ldr	r2, [pc, #36]	; (3c480 <radio_pkt_configure+0x44>)
		((((uint32_t)bits_s1) << RADIO_PCNF0_S1LEN_Pos) & RADIO_PCNF0_S1LEN_Msk) | extra;
   3c45a:	4318      	orrs	r0, r3
   3c45c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
	NRF_RADIO->PCNF0 =
   3c460:	f8c2 0514 	str.w	r0, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   3c464:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   3c468:	4b06      	ldr	r3, [pc, #24]	; (3c484 <radio_pkt_configure+0x48>)
   3c46a:	4003      	ands	r3, r0
   3c46c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |=
   3c470:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   3c474:	4319      	orrs	r1, r3
   3c476:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   3c47a:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   3c47e:	4770      	bx	lr
   3c480:	40001000 	.word	0x40001000
   3c484:	fef80000 	.word	0xfef80000

0003c488 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   3c488:	4b01      	ldr	r3, [pc, #4]	; (3c490 <radio_pkt_rx_set+0x8>)
   3c48a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   3c48e:	4770      	bx	lr
   3c490:	40001000 	.word	0x40001000

0003c494 <radio_pkt_tx_set>:
void radio_pkt_tx_set(void *tx_packet)
   3c494:	4b01      	ldr	r3, [pc, #4]	; (3c49c <radio_pkt_tx_set+0x8>)
   3c496:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   3c49a:	4770      	bx	lr
   3c49c:	40001000 	.word	0x40001000

0003c4a0 <radio_tx_chain_delay_get>:
}
   3c4a0:	2001      	movs	r0, #1
   3c4a2:	4770      	bx	lr

0003c4a4 <radio_rx_ready_delay_get>:
}
   3c4a4:	2029      	movs	r0, #41	; 0x29
   3c4a6:	4770      	bx	lr

0003c4a8 <radio_rx_chain_delay_get>:
static inline uint32_t hal_radio_rx_chain_delay_us_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
   3c4a8:	2802      	cmp	r0, #2
}
   3c4aa:	bf0c      	ite	eq
   3c4ac:	2005      	moveq	r0, #5
   3c4ae:	200a      	movne	r0, #10
   3c4b0:	4770      	bx	lr
   3c4b2:	bf00      	nop

0003c4b4 <radio_tx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3c4b4:	4b01      	ldr	r3, [pc, #4]	; (3c4bc <radio_tx_enable+0x8>)
   3c4b6:	2201      	movs	r2, #1
   3c4b8:	601a      	str	r2, [r3, #0]
}
   3c4ba:	4770      	bx	lr
   3c4bc:	40001000 	.word	0x40001000

0003c4c0 <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   3c4c0:	4a07      	ldr	r2, [pc, #28]	; (3c4e0 <radio_disable+0x20>)
	NRF_RADIO->SHORTS = 0;
   3c4c2:	4908      	ldr	r1, [pc, #32]	; (3c4e4 <radio_disable+0x24>)
{
   3c4c4:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   3c4c6:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   3c4c8:	f44f 6410 	mov.w	r4, #2304	; 0x900
	NRF_RADIO->SHORTS = 0;
   3c4cc:	2000      	movs	r0, #0
   3c4ce:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   3c4d2:	6053      	str	r3, [r2, #4]
}
   3c4d4:	bc10      	pop	{r4}
   3c4d6:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   3c4d8:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   3c4dc:	610b      	str	r3, [r1, #16]
}
   3c4de:	4770      	bx	lr
   3c4e0:	4001f000 	.word	0x4001f000
   3c4e4:	40001000 	.word	0x40001000

0003c4e8 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   3c4e8:	4b04      	ldr	r3, [pc, #16]	; (3c4fc <radio_status_reset+0x14>)
   3c4ea:	2200      	movs	r2, #0
   3c4ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   3c4f0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   3c4f4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   3c4f8:	4770      	bx	lr
   3c4fa:	bf00      	nop
   3c4fc:	40001000 	.word	0x40001000

0003c500 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   3c500:	4b03      	ldr	r3, [pc, #12]	; (3c510 <radio_is_ready+0x10>)
   3c502:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   3c506:	3800      	subs	r0, #0
   3c508:	bf18      	it	ne
   3c50a:	2001      	movne	r0, #1
   3c50c:	4770      	bx	lr
   3c50e:	bf00      	nop
   3c510:	40001000 	.word	0x40001000

0003c514 <radio_is_done>:
	return (NRF_RADIO->NRF_RADIO_TXRX_END_EVENT != 0);
   3c514:	4b03      	ldr	r3, [pc, #12]	; (3c524 <radio_is_done+0x10>)
   3c516:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   3c51a:	3800      	subs	r0, #0
   3c51c:	bf18      	it	ne
   3c51e:	2001      	movne	r0, #1
   3c520:	4770      	bx	lr
   3c522:	bf00      	nop
   3c524:	40001000 	.word	0x40001000

0003c528 <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   3c528:	4b03      	ldr	r3, [pc, #12]	; (3c538 <radio_is_idle+0x10>)
   3c52a:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   3c52e:	fab0 f080 	clz	r0, r0
   3c532:	0940      	lsrs	r0, r0, #5
   3c534:	4770      	bx	lr
   3c536:	bf00      	nop
   3c538:	40001000 	.word	0x40001000

0003c53c <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   3c53c:	4b04      	ldr	r3, [pc, #16]	; (3c550 <radio_crc_configure+0x14>)
   3c53e:	f240 1203 	movw	r2, #259	; 0x103
   3c542:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   3c546:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   3c54a:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   3c54e:	4770      	bx	lr
   3c550:	40001000 	.word	0x40001000

0003c554 <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   3c554:	4b03      	ldr	r3, [pc, #12]	; (3c564 <radio_crc_is_valid+0x10>)
   3c556:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   3c55a:	3800      	subs	r0, #0
   3c55c:	bf18      	it	ne
   3c55e:	2001      	movne	r0, #1
   3c560:	4770      	bx	lr
   3c562:	bf00      	nop
   3c564:	40001000 	.word	0x40001000

0003c568 <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   3c568:	4800      	ldr	r0, [pc, #0]	; (3c56c <radio_pkt_empty_get+0x4>)
   3c56a:	4770      	bx	lr
   3c56c:	20002d1c 	.word	0x20002d1c

0003c570 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   3c570:	4800      	ldr	r0, [pc, #0]	; (3c574 <radio_pkt_scratch_get+0x4>)
   3c572:	4770      	bx	lr
   3c574:	20002c18 	.word	0x20002c18

0003c578 <radio_switch_complete_and_rx>:
	sw_tifs_toggle &= 1U;
}
#endif /* CONFIG_BT_CTLR_TIFS_HW */

void radio_switch_complete_and_rx(uint8_t phy_rx)
{
   3c578:	b4f0      	push	{r4, r5, r6, r7}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   3c57a:	4b1d      	ldr	r3, [pc, #116]	; (3c5f0 <radio_switch_complete_and_rx+0x78>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   3c57c:	4d1d      	ldr	r5, [pc, #116]	; (3c5f4 <radio_switch_complete_and_rx+0x7c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3c57e:	4e1e      	ldr	r6, [pc, #120]	; (3c5f8 <radio_switch_complete_and_rx+0x80>)
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   3c580:	4c1e      	ldr	r4, [pc, #120]	; (3c5fc <radio_switch_complete_and_rx+0x84>)
   3c582:	4f1f      	ldr	r7, [pc, #124]	; (3c600 <radio_switch_complete_and_rx+0x88>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   3c584:	2203      	movs	r2, #3
   3c586:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   3c58a:	782a      	ldrb	r2, [r5, #0]
   3c58c:	f8c6 7568 	str.w	r7, [r6, #1384]	; 0x568
   3c590:	f102 030c 	add.w	r3, r2, #12
   3c594:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   3c596:	00d0      	lsls	r0, r2, #3
   3c598:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   3c59a:	0091      	lsls	r1, r2, #2
   3c59c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   3c5a0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   3c5a4:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   3c5a8:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3c5ac:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   3c5b0:	f8c6 056c 	str.w	r0, [r6, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   3c5b4:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   3c5b8:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3c5bc:	4811      	ldr	r0, [pc, #68]	; (3c604 <radio_switch_complete_and_rx+0x8c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3c5be:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3c5c2:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   3c5c6:	f8d1 3540 	ldr.w	r3, [r1, #1344]	; 0x540
   3c5ca:	2b2d      	cmp	r3, #45	; 0x2d
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   3c5cc:	bf8a      	itet	hi
   3c5ce:	f8d1 3540 	ldrhi.w	r3, [r1, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   3c5d2:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   3c5d4:	3b2d      	subhi	r3, #45	; 0x2d
   3c5d6:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   3c5da:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   3c5dc:	4b06      	ldr	r3, [pc, #24]	; (3c5f8 <radio_switch_complete_and_rx+0x80>)
   3c5de:	f44f 6110 	mov.w	r1, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   3c5e2:	f002 0201 	and.w	r2, r2, #1
   3c5e6:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   3c5ea:	702a      	strb	r2, [r5, #0]
	 *       calculations.
	 */
	sw_switch(SW_SWITCH_TX, SW_SWITCH_RX, SW_SWITCH_PHY_1M, SW_SWITCH_FLAGS_DONTCARE, phy_rx,
		  SW_SWITCH_FLAGS_DONTCARE, END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   3c5ec:	bcf0      	pop	{r4, r5, r6, r7}
   3c5ee:	4770      	bx	lr
   3c5f0:	40001000 	.word	0x40001000
   3c5f4:	20003c20 	.word	0x20003c20
   3c5f8:	4001f000 	.word	0x4001f000
   3c5fc:	40009140 	.word	0x40009140
   3c600:	4000110c 	.word	0x4000110c
   3c604:	40001004 	.word	0x40001004

0003c608 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   3c608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   3c60c:	4e28      	ldr	r6, [pc, #160]	; (3c6b0 <radio_switch_complete_and_tx+0xa8>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   3c60e:	4c29      	ldr	r4, [pc, #164]	; (3c6b4 <radio_switch_complete_and_tx+0xac>)
   3c610:	4f29      	ldr	r7, [pc, #164]	; (3c6b8 <radio_switch_complete_and_tx+0xb0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3c612:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 3c6bc <radio_switch_complete_and_tx+0xb4>
   3c616:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 3c6c0 <radio_switch_complete_and_tx+0xb8>
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   3c61a:	2303      	movs	r3, #3
   3c61c:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   3c620:	7821      	ldrb	r1, [r4, #0]
   3c622:	f8ce 8568 	str.w	r8, [lr, #1384]	; 0x568
   3c626:	f101 030c 	add.w	r3, r1, #12
   3c62a:	b2db      	uxtb	r3, r3
   3c62c:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   3c62e:	00cd      	lsls	r5, r1, #3
   3c630:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3c634:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   3c638:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   3c63c:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   3c640:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3c644:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3c648:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   3c64c:	f24a 15b8 	movw	r5, #41400	; 0xa1b8
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3c650:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
   3c654:	f649 6334 	movw	r3, #40500	; 0x9e34
   3c658:	2a02      	cmp	r2, #2
   3c65a:	bf18      	it	ne
   3c65c:	462b      	movne	r3, r5
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   3c65e:	ea4f 0c81 	mov.w	ip, r1, lsl #2
static inline uint32_t hal_radio_rx_chain_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
   3c662:	f241 3288 	movw	r2, #5000	; 0x1388
   3c666:	f242 45b8 	movw	r5, #9400	; 0x24b8
   3c66a:	2802      	cmp	r0, #2
   3c66c:	bf18      	it	ne
   3c66e:	462a      	movne	r2, r5
   3c670:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   3c674:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
			delay = HAL_RADIO_NS2US_ROUND(
   3c678:	4413      	add	r3, r2
   3c67a:	4a12      	ldr	r2, [pc, #72]	; (3c6c4 <radio_switch_complete_and_tx+0xbc>)
   3c67c:	fba2 2303 	umull	r2, r3, r2, r3
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   3c680:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
   3c684:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
   3c688:	bf85      	ittet	hi
   3c68a:	0998      	lsrhi	r0, r3, #6
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   3c68c:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540
   3c690:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   3c692:	1a1b      	subhi	r3, r3, r0
   3c694:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   3c698:	3101      	adds	r1, #1
    p_reg->CHENSET = mask;
   3c69a:	4b08      	ldr	r3, [pc, #32]	; (3c6bc <radio_switch_complete_and_tx+0xb4>)
   3c69c:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   3c6a0:	f001 0101 	and.w	r1, r1, #1
   3c6a4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   3c6a8:	7021      	strb	r1, [r4, #0]

	sw_switch(SW_SWITCH_RX, SW_SWITCH_TX, phy_rx, flags_rx, phy_tx, flags_tx,
		  END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   3c6aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3c6ae:	bf00      	nop
   3c6b0:	40001000 	.word	0x40001000
   3c6b4:	20003c20 	.word	0x20003c20
   3c6b8:	40009140 	.word	0x40009140
   3c6bc:	4001f000 	.word	0x4001f000
   3c6c0:	4000110c 	.word	0x4000110c
   3c6c4:	10624dd3 	.word	0x10624dd3

0003c6c8 <radio_switch_complete_and_disable>:
void radio_switch_complete_and_disable(void)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);
#else /* CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE);
   3c6c8:	4904      	ldr	r1, [pc, #16]	; (3c6dc <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   3c6ca:	4b05      	ldr	r3, [pc, #20]	; (3c6e0 <radio_switch_complete_and_disable+0x18>)
   3c6cc:	2003      	movs	r0, #3
   3c6ce:	f44f 6210 	mov.w	r2, #2304	; 0x900
   3c6d2:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   3c6d6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   3c6da:	4770      	bx	lr
   3c6dc:	40001000 	.word	0x40001000
   3c6e0:	4001f000 	.word	0x4001f000

0003c6e4 <radio_rssi_status_reset>:
	return NRF_RADIO->RSSISAMPLE;
}

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   3c6e4:	4b02      	ldr	r3, [pc, #8]	; (3c6f0 <radio_rssi_status_reset+0xc>)
   3c6e6:	2200      	movs	r2, #0
   3c6e8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   3c6ec:	4770      	bx	lr
   3c6ee:	bf00      	nop
   3c6f0:	40001000 	.word	0x40001000

0003c6f4 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   3c6f4:	4b03      	ldr	r3, [pc, #12]	; (3c704 <radio_rssi_is_ready+0x10>)
   3c6f6:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   3c6fa:	3800      	subs	r0, #0
   3c6fc:	bf18      	it	ne
   3c6fe:	2001      	movne	r0, #1
   3c700:	4770      	bx	lr
   3c702:	bf00      	nop
   3c704:	40001000 	.word	0x40001000

0003c708 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   3c708:	b410      	push	{r4}
   3c70a:	f04f 0c00 	mov.w	ip, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   3c70e:	ea4f 038c 	mov.w	r3, ip, lsl #2
   3c712:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3c716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   3c71a:	6814      	ldr	r4, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   3c71c:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
	for (index = 0U; index < 8; index++) {
   3c720:	f10c 0c01 	add.w	ip, ip, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   3c724:	8894      	ldrh	r4, [r2, #4]
   3c726:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   3c72a:	f1bc 0f08 	cmp.w	ip, #8
		bdaddr += 6;
   3c72e:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   3c732:	d1ec      	bne.n	3c70e <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   3c734:	4b03      	ldr	r3, [pc, #12]	; (3c744 <radio_filter_configure+0x3c>)
}
   3c736:	bc10      	pop	{r4}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   3c738:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   3c73c:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   3c740:	4770      	bx	lr
   3c742:	bf00      	nop
   3c744:	40001000 	.word	0x40001000

0003c748 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   3c748:	4a03      	ldr	r2, [pc, #12]	; (3c758 <radio_filter_disable+0x10>)
   3c74a:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   3c74e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   3c752:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   3c756:	4770      	bx	lr
   3c758:	40001000 	.word	0x40001000

0003c75c <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   3c75c:	4b02      	ldr	r3, [pc, #8]	; (3c768 <radio_filter_status_reset+0xc>)
   3c75e:	2200      	movs	r2, #0
   3c760:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   3c764:	4770      	bx	lr
   3c766:	bf00      	nop
   3c768:	40001000 	.word	0x40001000

0003c76c <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   3c76c:	4b03      	ldr	r3, [pc, #12]	; (3c77c <radio_filter_has_match+0x10>)
   3c76e:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   3c772:	3800      	subs	r0, #0
   3c774:	bf18      	it	ne
   3c776:	2001      	movne	r0, #1
   3c778:	4770      	bx	lr
   3c77a:	bf00      	nop
   3c77c:	40001000 	.word	0x40001000

0003c780 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   3c780:	4b01      	ldr	r3, [pc, #4]	; (3c788 <radio_filter_match_get+0x8>)
   3c782:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   3c786:	4770      	bx	lr
   3c788:	40001000 	.word	0x40001000

0003c78c <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   3c78c:	4904      	ldr	r1, [pc, #16]	; (3c7a0 <radio_tmr_status_reset+0x14>)
   3c78e:	4b05      	ldr	r3, [pc, #20]	; (3c7a4 <radio_tmr_status_reset+0x18>)
   3c790:	4a05      	ldr	r2, [pc, #20]	; (3c7a8 <radio_tmr_status_reset+0x1c>)
   3c792:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   3c796:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   3c79a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
#endif /* CONFIG_BT_CTLR_PHY_CODED */
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
			BIT(HAL_SW_SWITCH_TIMER_PHYEND_DELAY_COMPENSATION_DISABLE_PPI) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   3c79e:	4770      	bx	lr
   3c7a0:	4000b000 	.word	0x4000b000
   3c7a4:	4001f000 	.word	0x4001f000
   3c7a8:	0e7000c0 	.word	0x0e7000c0

0003c7ac <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   3c7ac:	4b03      	ldr	r3, [pc, #12]	; (3c7bc <radio_tmr_tifs_set+0x10>)
   3c7ae:	4a04      	ldr	r2, [pc, #16]	; (3c7c0 <radio_tmr_tifs_set+0x14>)
   3c7b0:	781b      	ldrb	r3, [r3, #0]
   3c7b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   3c7b6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   3c7ba:	4770      	bx	lr
   3c7bc:	20003c20 	.word	0x20003c20
   3c7c0:	40009000 	.word	0x40009000

0003c7c4 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   3c7c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   3c7c8:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   3c7cc:	4d31      	ldr	r5, [pc, #196]	; (3c894 <radio_tmr_start+0xd0>)
   3c7ce:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   3c7d2:	42ab      	cmp	r3, r5
{
   3c7d4:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   3c7d6:	d906      	bls.n	3c7e6 <radio_tmr_start+0x22>
		ticks_start--;
		remainder += 30517578UL;
   3c7d8:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   3c7dc:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   3c7e0:	3901      	subs	r1, #1
		remainder += 30517578UL;
   3c7e2:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3c7e6:	4b2c      	ldr	r3, [pc, #176]	; (3c898 <radio_tmr_start+0xd4>)
	}
	remainder /= 1000000UL;
   3c7e8:	482c      	ldr	r0, [pc, #176]	; (3c89c <radio_tmr_start+0xd8>)
    p_reg->CC[ch] = cc_val;
   3c7ea:	4d2d      	ldr	r5, [pc, #180]	; (3c8a0 <radio_tmr_start+0xdc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3c7ec:	4e2d      	ldr	r6, [pc, #180]	; (3c8a4 <radio_tmr_start+0xe0>)
   3c7ee:	2701      	movs	r7, #1
   3c7f0:	60df      	str	r7, [r3, #12]

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   3c7f2:	2700      	movs	r7, #0
   3c7f4:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	remainder /= 1000000UL;
   3c7f8:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   3c7fc:	2704      	movs	r7, #4
   3c7fe:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   3c802:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   3c804:	2702      	movs	r7, #2
   3c806:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   3c80a:	4a27      	ldr	r2, [pc, #156]	; (3c8a8 <radio_tmr_start+0xe4>)
    p_reg->CC[cc_channel] = cc_value;
   3c80c:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   3c810:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   3c814:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   3c818:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   3c81c:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3c81e:	f8c2 6540 	str.w	r6, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3c822:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   3c826:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   3c82a:	b364      	cbz	r4, 3c886 <radio_tmr_start+0xc2>
    p_reg->CHENCLR = mask;
   3c82c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   3c830:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   3c834:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   3c838:	4b1b      	ldr	r3, [pc, #108]	; (3c8a8 <radio_tmr_start+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3c83a:	4a1c      	ldr	r2, [pc, #112]	; (3c8ac <radio_tmr_start+0xe8>)
   3c83c:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   3c840:	2101      	movs	r1, #1
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   3c842:	2400      	movs	r4, #0
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3c844:	f8df 8068 	ldr.w	r8, [pc, #104]	; 3c8b0 <radio_tmr_start+0xec>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3c848:	f8df e068 	ldr.w	lr, [pc, #104]	; 3c8b4 <radio_tmr_start+0xf0>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3c84c:	f8df c068 	ldr.w	ip, [pc, #104]	; 3c8b8 <radio_tmr_start+0xf4>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3c850:	4f1a      	ldr	r7, [pc, #104]	; (3c8bc <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3c852:	4e1b      	ldr	r6, [pc, #108]	; (3c8c0 <radio_tmr_start+0xfc>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3c854:	4d1b      	ldr	r5, [pc, #108]	; (3c8c4 <radio_tmr_start+0x100>)
   3c856:	60d1      	str	r1, [r2, #12]
	SW_SWITCH_TIMER->PRESCALER = 4;
   3c858:	f04f 0904 	mov.w	r9, #4
	SW_SWITCH_TIMER->MODE = 0;
   3c85c:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   3c860:	f8c2 9510 	str.w	r9, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   3c864:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   3c868:	6011      	str	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3c86a:	f8c3 8550 	str.w	r8, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3c86e:	f8c3 e554 	str.w	lr, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3c872:	f8c3 c558 	str.w	ip, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3c876:	f8c3 755c 	str.w	r7, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3c87a:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3c87e:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   3c882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->CHENCLR = mask;
   3c886:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   3c88a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   3c88e:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
   3c892:	e7d1      	b.n	3c838 <radio_tmr_start+0x74>
   3c894:	7ff0bdbf 	.word	0x7ff0bdbf
   3c898:	40008000 	.word	0x40008000
   3c89c:	431bde83 	.word	0x431bde83
   3c8a0:	4000b000 	.word	0x4000b000
   3c8a4:	4000b148 	.word	0x4000b148
   3c8a8:	4001f000 	.word	0x4001f000
   3c8ac:	40009000 	.word	0x40009000
   3c8b0:	4000110c 	.word	0x4000110c
   3c8b4:	4000900c 	.word	0x4000900c
   3c8b8:	40009140 	.word	0x40009140
   3c8bc:	4001f004 	.word	0x4001f004
   3c8c0:	40009144 	.word	0x40009144
   3c8c4:	4001f00c 	.word	0x4001f00c

0003c8c8 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   3c8c8:	4b01      	ldr	r3, [pc, #4]	; (3c8d0 <radio_tmr_start_get+0x8>)
   3c8ca:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   3c8ce:	4770      	bx	lr
   3c8d0:	4000b000 	.word	0x4000b000

0003c8d4 <radio_tmr_stop>:
   3c8d4:	4903      	ldr	r1, [pc, #12]	; (3c8e4 <radio_tmr_stop+0x10>)
   3c8d6:	4a04      	ldr	r2, [pc, #16]	; (3c8e8 <radio_tmr_stop+0x14>)
   3c8d8:	2301      	movs	r3, #1
   3c8da:	604b      	str	r3, [r1, #4]
   3c8dc:	610b      	str	r3, [r1, #16]
   3c8de:	6053      	str	r3, [r2, #4]
   3c8e0:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   3c8e2:	4770      	bx	lr
   3c8e4:	40008000 	.word	0x40008000
   3c8e8:	40009000 	.word	0x40009000

0003c8ec <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   3c8ec:	4904      	ldr	r1, [pc, #16]	; (3c900 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   3c8ee:	4b05      	ldr	r3, [pc, #20]	; (3c904 <radio_tmr_hcto_configure+0x18>)
   3c8f0:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   3c8f4:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   3c8f8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   3c8fc:	4770      	bx	lr
   3c8fe:	bf00      	nop
   3c900:	40008000 	.word	0x40008000
   3c904:	4001f000 	.word	0x4001f000

0003c908 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3c908:	4b05      	ldr	r3, [pc, #20]	; (3c920 <radio_tmr_aa_capture+0x18>)
   3c90a:	4806      	ldr	r0, [pc, #24]	; (3c924 <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3c90c:	4906      	ldr	r1, [pc, #24]	; (3c928 <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   3c90e:	4a07      	ldr	r2, [pc, #28]	; (3c92c <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3c910:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3c914:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   3c918:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   3c91c:	4770      	bx	lr
   3c91e:	bf00      	nop
   3c920:	4001f000 	.word	0x4001f000
   3c924:	40001100 	.word	0x40001100
   3c928:	40008040 	.word	0x40008040
   3c92c:	04000080 	.word	0x04000080

0003c930 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   3c930:	4b01      	ldr	r3, [pc, #4]	; (3c938 <radio_tmr_aa_get+0x8>)
   3c932:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   3c936:	4770      	bx	lr
   3c938:	40008000 	.word	0x40008000

0003c93c <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   3c93c:	4b01      	ldr	r3, [pc, #4]	; (3c944 <radio_tmr_aa_save+0x8>)
   3c93e:	6018      	str	r0, [r3, #0]
}
   3c940:	4770      	bx	lr
   3c942:	bf00      	nop
   3c944:	20002c14 	.word	0x20002c14

0003c948 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   3c948:	4b01      	ldr	r3, [pc, #4]	; (3c950 <radio_tmr_aa_restore+0x8>)
}
   3c94a:	6818      	ldr	r0, [r3, #0]
   3c94c:	4770      	bx	lr
   3c94e:	bf00      	nop
   3c950:	20002c14 	.word	0x20002c14

0003c954 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   3c954:	4b01      	ldr	r3, [pc, #4]	; (3c95c <radio_tmr_ready_get+0x8>)
   3c956:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   3c95a:	4770      	bx	lr
   3c95c:	40008000 	.word	0x40008000

0003c960 <radio_tmr_end_capture>:
   3c960:	4b02      	ldr	r3, [pc, #8]	; (3c96c <radio_tmr_end_capture+0xc>)
   3c962:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   3c966:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X ||
	* (CONFIG_SOC_SERIES_NRF53X && !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	*/
}
   3c96a:	4770      	bx	lr
   3c96c:	4001f000 	.word	0x4001f000

0003c970 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   3c970:	4b01      	ldr	r3, [pc, #4]	; (3c978 <radio_tmr_end_get+0x8>)
   3c972:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   3c976:	4770      	bx	lr
   3c978:	40008000 	.word	0x40008000

0003c97c <radio_tmr_tifs_base_get>:

uint32_t radio_tmr_tifs_base_get(void)
   3c97c:	4b01      	ldr	r3, [pc, #4]	; (3c984 <radio_tmr_tifs_base_get+0x8>)
   3c97e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   3c982:	4770      	bx	lr
   3c984:	40008000 	.word	0x40008000

0003c988 <radio_ccm_rx_pkt_set>:

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   3c988:	4b17      	ldr	r3, [pc, #92]	; (3c9e8 <radio_ccm_rx_pkt_set+0x60>)
{
   3c98a:	b470      	push	{r4, r5, r6}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   3c98c:	2400      	movs	r4, #0
{
   3c98e:	4605      	mov	r5, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   3c990:	2602      	movs	r6, #2
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   3c992:	4816      	ldr	r0, [pc, #88]	; (3c9ec <radio_ccm_rx_pkt_set+0x64>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   3c994:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   3c998:	f8c3 6500 	str.w	r6, [r3, #1280]	; 0x500
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   3c99c:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   3c9a0:	4e13      	ldr	r6, [pc, #76]	; (3c9f0 <radio_ccm_rx_pkt_set+0x68>)
   3c9a2:	b2c0      	uxtb	r0, r0
			RADIO_PCNF1_MAXLEN_Pos;

	NRF_CCM->MAXPACKETSIZE = max_len;
   3c9a4:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   3c9a8:	4812      	ldr	r0, [pc, #72]	; (3c9f4 <radio_ccm_rx_pkt_set+0x6c>)
   3c9aa:	2902      	cmp	r1, #2
   3c9ac:	bf18      	it	ne
   3c9ae:	4630      	movne	r0, r6
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
   3c9b0:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   3c9b4:	4810      	ldr	r0, [pc, #64]	; (3c9f8 <radio_ccm_rx_pkt_set+0x70>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   3c9b6:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   3c9ba:	4910      	ldr	r1, [pc, #64]	; (3c9fc <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   3c9bc:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   3c9c0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   3c9c4:	4a0e      	ldr	r2, [pc, #56]	; (3ca00 <radio_ccm_rx_pkt_set+0x78>)
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   3c9c6:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
   3c9ca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->SHORTS = 0;
   3c9ce:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   3c9d2:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   3c9d6:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   3c9da:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3c9de:	2201      	movs	r2, #1
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   3c9e0:	bc70      	pop	{r4, r5, r6}
   3c9e2:	601a      	str	r2, [r3, #0]
   3c9e4:	4770      	bx	lr
   3c9e6:	bf00      	nop
   3c9e8:	4000f000 	.word	0x4000f000
   3c9ec:	40001000 	.word	0x40001000
   3c9f0:	01000001 	.word	0x01000001
   3c9f4:	01010001 	.word	0x01010001
   3c9f8:	20002c18 	.word	0x20002c18
   3c9fc:	20002b08 	.word	0x20002b08
   3ca00:	4001f000 	.word	0x4001f000

0003ca04 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   3ca04:	4b0f      	ldr	r3, [pc, #60]	; (3ca44 <radio_ccm_tx_pkt_set+0x40>)
{
   3ca06:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   3ca08:	2200      	movs	r2, #0
{
   3ca0a:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   3ca0c:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   3ca0e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   3ca12:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   3ca16:	480c      	ldr	r0, [pc, #48]	; (3ca48 <radio_ccm_tx_pkt_set+0x44>)
   3ca18:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   3ca1c:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   3ca20:	480a      	ldr	r0, [pc, #40]	; (3ca4c <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   3ca22:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   3ca26:	4c0a      	ldr	r4, [pc, #40]	; (3ca50 <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   3ca28:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   3ca2c:	2101      	movs	r1, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   3ca2e:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   3ca32:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   3ca36:	bc10      	pop	{r4}
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   3ca38:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   3ca3c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   3ca40:	6019      	str	r1, [r3, #0]
}
   3ca42:	4770      	bx	lr
   3ca44:	4000f000 	.word	0x4000f000
   3ca48:	01010000 	.word	0x01010000
   3ca4c:	20002c18 	.word	0x20002c18
   3ca50:	20002b08 	.word	0x20002b08

0003ca54 <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   3ca54:	4a0e      	ldr	r2, [pc, #56]	; (3ca90 <radio_ccm_is_done+0x3c>)
   3ca56:	2302      	movs	r3, #2
   3ca58:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   3ca5c:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   3ca60:	b933      	cbnz	r3, 3ca70 <radio_ccm_is_done+0x1c>
		__WFE();
   3ca62:	bf20      	wfe
		__SEV();
   3ca64:	bf40      	sev
		__WFE();
   3ca66:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   3ca68:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   3ca6c:	2b00      	cmp	r3, #0
   3ca6e:	d0f8      	beq.n	3ca62 <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   3ca70:	4b07      	ldr	r3, [pc, #28]	; (3ca90 <radio_ccm_is_done+0x3c>)
   3ca72:	4a08      	ldr	r2, [pc, #32]	; (3ca94 <radio_ccm_is_done+0x40>)
   3ca74:	2002      	movs	r0, #2
   3ca76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   3ca7a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   3ca7e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   3ca82:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   3ca86:	fab0 f080 	clz	r0, r0
   3ca8a:	0940      	lsrs	r0, r0, #5
   3ca8c:	4770      	bx	lr
   3ca8e:	bf00      	nop
   3ca90:	4000f000 	.word	0x4000f000
   3ca94:	e000e100 	.word	0xe000e100

0003ca98 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   3ca98:	4b03      	ldr	r3, [pc, #12]	; (3caa8 <radio_ccm_mic_is_valid+0x10>)
   3ca9a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   3ca9e:	3800      	subs	r0, #0
   3caa0:	bf18      	it	ne
   3caa2:	2001      	movne	r0, #1
   3caa4:	4770      	bx	lr
   3caa6:	bf00      	nop
   3caa8:	4000f000 	.word	0x4000f000

0003caac <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   3caac:	4a15      	ldr	r2, [pc, #84]	; (3cb04 <radio_ar_configure+0x58>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   3caae:	4b16      	ldr	r3, [pc, #88]	; (3cb08 <radio_ar_configure+0x5c>)
{
   3cab0:	b4f0      	push	{r4, r5, r6, r7}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   3cab2:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   3cab6:	4e15      	ldr	r6, [pc, #84]	; (3cb0c <radio_ar_configure+0x60>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   3cab8:	2703      	movs	r7, #3
   3caba:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500

	NRF_AAR->EVENTS_END = 0;
   3cabe:	2400      	movs	r4, #0
	NRF_AAR->NIRK = nirk;
   3cac0:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		addrptr = NRF_RADIO->PACKETPTR - 1;
   3cac4:	3d01      	subs	r5, #1
	NRF_AAR->IRKPTR = (uint32_t)irk;
   3cac6:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->BCC = radio_bcc;
   3caca:	2140      	movs	r1, #64	; 0x40
	NRF_AAR->ADDRPTR = addrptr;
   3cacc:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   3cad0:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   3cad4:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   3cad8:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   3cadc:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   3cae0:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   3cae4:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   3cae8:	4909      	ldr	r1, [pc, #36]	; (3cb10 <radio_ar_configure+0x64>)
   3caea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3caee:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   3caf2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   3caf6:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   3cafa:	bcf0      	pop	{r4, r5, r6, r7}
   3cafc:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   3cb00:	4770      	bx	lr
   3cb02:	bf00      	nop
   3cb04:	40001000 	.word	0x40001000
   3cb08:	4000f000 	.word	0x4000f000
   3cb0c:	20002b04 	.word	0x20002b04
   3cb10:	4001f000 	.word	0x4001f000

0003cb14 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   3cb14:	4b01      	ldr	r3, [pc, #4]	; (3cb1c <radio_ar_match_get+0x8>)
   3cb16:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   3cb1a:	4770      	bx	lr
   3cb1c:	4000f000 	.word	0x4000f000

0003cb20 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   3cb20:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   3cb22:	4807      	ldr	r0, [pc, #28]	; (3cb40 <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   3cb24:	4c07      	ldr	r4, [pc, #28]	; (3cb44 <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   3cb26:	4a08      	ldr	r2, [pc, #32]	; (3cb48 <radio_ar_status_reset+0x28>)
   3cb28:	2300      	movs	r3, #0
   3cb2a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   3cb2e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   3cb32:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   3cb36:	bc10      	pop	{r4}
   3cb38:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   3cb3c:	4770      	bx	lr
   3cb3e:	bf00      	nop
   3cb40:	4000f000 	.word	0x4000f000
   3cb44:	40001000 	.word	0x40001000
   3cb48:	4001f000 	.word	0x4001f000

0003cb4c <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   3cb4c:	4b08      	ldr	r3, [pc, #32]	; (3cb70 <radio_ar_has_match+0x24>)
   3cb4e:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   3cb52:	b160      	cbz	r0, 3cb6e <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   3cb54:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   3cb58:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   3cb5c:	b138      	cbz	r0, 3cb6e <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   3cb5e:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   3cb62:	b120      	cbz	r0, 3cb6e <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   3cb64:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   3cb68:	fab0 f080 	clz	r0, r0
   3cb6c:	0940      	lsrs	r0, r0, #5
}
   3cb6e:	4770      	bx	lr
   3cb70:	40001000 	.word	0x40001000

0003cb74 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   3cb74:	2902      	cmp	r1, #2
{
   3cb76:	b510      	push	{r4, lr}
   3cb78:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   3cb7a:	d00b      	beq.n	3cb94 <mayfly_enable_cb+0x20>
   3cb7c:	4a0a      	ldr	r2, [pc, #40]	; (3cba8 <mayfly_enable_cb+0x34>)
   3cb7e:	490b      	ldr	r1, [pc, #44]	; (3cbac <mayfly_enable_cb+0x38>)
   3cb80:	480b      	ldr	r0, [pc, #44]	; (3cbb0 <mayfly_enable_cb+0x3c>)
   3cb82:	231e      	movs	r3, #30
   3cb84:	f005 fe9e 	bl	428c4 <printk>
   3cb88:	4040      	eors	r0, r0
   3cb8a:	f380 8811 	msr	BASEPRI, r0
   3cb8e:	f04f 0003 	mov.w	r0, #3
   3cb92:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   3cb94:	200b      	movs	r0, #11
	if (enable) {
   3cb96:	b11c      	cbz	r4, 3cba0 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   3cb98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   3cb9c:	f7ed bab6 	b.w	2a10c <arch_irq_enable>
}
   3cba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   3cba4:	f7ed bac0 	b.w	2a128 <arch_irq_disable>
   3cba8:	0004a8bc 	.word	0x0004a8bc
   3cbac:	0004a90c 	.word	0x0004a90c
   3cbb0:	00049c68 	.word	0x00049c68

0003cbb4 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   3cbb4:	b129      	cbz	r1, 3cbc2 <mayfly_is_enabled+0xe>
   3cbb6:	3901      	subs	r1, #1
   3cbb8:	2901      	cmp	r1, #1
   3cbba:	d805      	bhi.n	3cbc8 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   3cbbc:	200b      	movs	r0, #11
   3cbbe:	f7ed bac7 	b.w	2a150 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   3cbc2:	2018      	movs	r0, #24
   3cbc4:	f7ed bac4 	b.w	2a150 <arch_irq_is_enabled>
{
   3cbc8:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   3cbca:	4a07      	ldr	r2, [pc, #28]	; (3cbe8 <mayfly_is_enabled+0x34>)
   3cbcc:	4907      	ldr	r1, [pc, #28]	; (3cbec <mayfly_is_enabled+0x38>)
   3cbce:	4808      	ldr	r0, [pc, #32]	; (3cbf0 <mayfly_is_enabled+0x3c>)
   3cbd0:	2336      	movs	r3, #54	; 0x36
   3cbd2:	f005 fe77 	bl	428c4 <printk>
   3cbd6:	4040      	eors	r0, r0
   3cbd8:	f380 8811 	msr	BASEPRI, r0
   3cbdc:	f04f 0003 	mov.w	r0, #3
   3cbe0:	df02      	svc	2
		break;
	}

	return 0;
}
   3cbe2:	2000      	movs	r0, #0
   3cbe4:	bd08      	pop	{r3, pc}
   3cbe6:	bf00      	nop
   3cbe8:	0004a8bc 	.word	0x0004a8bc
   3cbec:	00049cc8 	.word	0x00049cc8
   3cbf0:	00049c68 	.word	0x00049c68

0003cbf4 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   3cbf4:	4288      	cmp	r0, r1
   3cbf6:	d00f      	beq.n	3cc18 <mayfly_prio_is_equal+0x24>
	return (caller_id == callee_id) ||
   3cbf8:	2801      	cmp	r0, #1
   3cbfa:	d007      	beq.n	3cc0c <mayfly_prio_is_equal+0x18>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   3cbfc:	2802      	cmp	r0, #2
   3cbfe:	d10d      	bne.n	3cc1c <mayfly_prio_is_equal+0x28>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   3cc00:	f1a1 0001 	sub.w	r0, r1, #1
   3cc04:	fab0 f080 	clz	r0, r0
   3cc08:	0940      	lsrs	r0, r0, #5
   3cc0a:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   3cc0c:	f1a1 0002 	sub.w	r0, r1, #2
   3cc10:	fab0 f080 	clz	r0, r0
   3cc14:	0940      	lsrs	r0, r0, #5
   3cc16:	4770      	bx	lr
   3cc18:	2001      	movs	r0, #1
   3cc1a:	4770      	bx	lr
   3cc1c:	2000      	movs	r0, #0
#endif
	       0;
}
   3cc1e:	4770      	bx	lr

0003cc20 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   3cc20:	2901      	cmp	r1, #1
{
   3cc22:	b508      	push	{r3, lr}
	switch (callee_id) {
   3cc24:	d00f      	beq.n	3cc46 <mayfly_pend+0x26>
   3cc26:	2902      	cmp	r1, #2
   3cc28:	d00d      	beq.n	3cc46 <mayfly_pend+0x26>
   3cc2a:	b191      	cbz	r1, 3cc52 <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   3cc2c:	4a0c      	ldr	r2, [pc, #48]	; (3cc60 <mayfly_pend+0x40>)
   3cc2e:	490d      	ldr	r1, [pc, #52]	; (3cc64 <mayfly_pend+0x44>)
   3cc30:	480d      	ldr	r0, [pc, #52]	; (3cc68 <mayfly_pend+0x48>)
   3cc32:	2367      	movs	r3, #103	; 0x67
   3cc34:	f005 fe46 	bl	428c4 <printk>
   3cc38:	4040      	eors	r0, r0
   3cc3a:	f380 8811 	msr	BASEPRI, r0
   3cc3e:	f04f 0003 	mov.w	r0, #3
   3cc42:	df02      	svc	2
		break;
	}
}
   3cc44:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   3cc46:	4b09      	ldr	r3, [pc, #36]	; (3cc6c <mayfly_pend+0x4c>)
   3cc48:	f44f 6200 	mov.w	r2, #2048	; 0x800
   3cc4c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   3cc50:	bd08      	pop	{r3, pc}
   3cc52:	4b06      	ldr	r3, [pc, #24]	; (3cc6c <mayfly_pend+0x4c>)
   3cc54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   3cc58:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   3cc5c:	bd08      	pop	{r3, pc}
   3cc5e:	bf00      	nop
   3cc60:	0004a8bc 	.word	0x0004a8bc
   3cc64:	00049cc8 	.word	0x00049cc8
   3cc68:	00049c68 	.word	0x00049c68
   3cc6c:	e000e100 	.word	0xe000e100

0003cc70 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   3cc70:	2803      	cmp	r0, #3
{
   3cc72:	b510      	push	{r4, lr}
   3cc74:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   3cc76:	d804      	bhi.n	3cc82 <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   3cc78:	4b11      	ldr	r3, [pc, #68]	; (3ccc0 <hal_ticker_instance0_caller_id_get+0x50>)
   3cc7a:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   3cc7c:	b18c      	cbz	r4, 3cca2 <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   3cc7e:	4620      	mov	r0, r4
   3cc80:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   3cc82:	4a10      	ldr	r2, [pc, #64]	; (3ccc4 <hal_ticker_instance0_caller_id_get+0x54>)
   3cc84:	4910      	ldr	r1, [pc, #64]	; (3ccc8 <hal_ticker_instance0_caller_id_get+0x58>)
   3cc86:	4811      	ldr	r0, [pc, #68]	; (3cccc <hal_ticker_instance0_caller_id_get+0x5c>)
   3cc88:	232b      	movs	r3, #43	; 0x2b
   3cc8a:	f005 fe1b 	bl	428c4 <printk>
   3cc8e:	4040      	eors	r0, r0
   3cc90:	f380 8811 	msr	BASEPRI, r0
   3cc94:	f04f 0003 	mov.w	r0, #3
   3cc98:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   3cc9a:	4b09      	ldr	r3, [pc, #36]	; (3ccc0 <hal_ticker_instance0_caller_id_get+0x50>)
   3cc9c:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   3cc9e:	2c00      	cmp	r4, #0
   3cca0:	d1ed      	bne.n	3cc7e <hal_ticker_instance0_caller_id_get+0xe>
   3cca2:	4a08      	ldr	r2, [pc, #32]	; (3ccc4 <hal_ticker_instance0_caller_id_get+0x54>)
   3cca4:	490a      	ldr	r1, [pc, #40]	; (3ccd0 <hal_ticker_instance0_caller_id_get+0x60>)
   3cca6:	4809      	ldr	r0, [pc, #36]	; (3cccc <hal_ticker_instance0_caller_id_get+0x5c>)
   3cca8:	232e      	movs	r3, #46	; 0x2e
   3ccaa:	f005 fe0b 	bl	428c4 <printk>
   3ccae:	4040      	eors	r0, r0
   3ccb0:	f380 8811 	msr	BASEPRI, r0
   3ccb4:	f04f 0003 	mov.w	r0, #3
   3ccb8:	df02      	svc	2
}
   3ccba:	4620      	mov	r0, r4
   3ccbc:	bd10      	pop	{r4, pc}
   3ccbe:	bf00      	nop
   3ccc0:	0004a99c 	.word	0x0004a99c
   3ccc4:	0004a91c 	.word	0x0004a91c
   3ccc8:	0004a96c 	.word	0x0004a96c
   3cccc:	00049c68 	.word	0x00049c68
   3ccd0:	0004a98c 	.word	0x0004a98c

0003ccd4 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   3ccd4:	3801      	subs	r0, #1
{
   3ccd6:	b510      	push	{r4, lr}
   3ccd8:	461c      	mov	r4, r3
	switch (caller_id) {
   3ccda:	2804      	cmp	r0, #4
   3ccdc:	f200 8082 	bhi.w	3cde4 <hal_ticker_instance0_sched+0x110>
   3cce0:	e8df f000 	tbb	[pc, r0]
   3cce4:	3f302112 	.word	0x3f302112
   3cce8:	03          	.byte	0x03
   3cce9:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   3ccea:	2904      	cmp	r1, #4
   3ccec:	d04a      	beq.n	3cd84 <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   3ccee:	4a44      	ldr	r2, [pc, #272]	; (3ce00 <hal_ticker_instance0_sched+0x12c>)
   3ccf0:	4944      	ldr	r1, [pc, #272]	; (3ce04 <hal_ticker_instance0_sched+0x130>)
   3ccf2:	4845      	ldr	r0, [pc, #276]	; (3ce08 <hal_ticker_instance0_sched+0x134>)
   3ccf4:	23ba      	movs	r3, #186	; 0xba
   3ccf6:	f005 fde5 	bl	428c4 <printk>
   3ccfa:	4040      	eors	r0, r0
   3ccfc:	f380 8811 	msr	BASEPRI, r0
   3cd00:	f04f 0003 	mov.w	r0, #3
   3cd04:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   3cd06:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   3cd08:	2904      	cmp	r1, #4
   3cd0a:	d043      	beq.n	3cd94 <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   3cd0c:	4a3c      	ldr	r2, [pc, #240]	; (3ce00 <hal_ticker_instance0_sched+0x12c>)
   3cd0e:	493d      	ldr	r1, [pc, #244]	; (3ce04 <hal_ticker_instance0_sched+0x130>)
   3cd10:	483d      	ldr	r0, [pc, #244]	; (3ce08 <hal_ticker_instance0_sched+0x134>)
   3cd12:	234e      	movs	r3, #78	; 0x4e
   3cd14:	f005 fdd6 	bl	428c4 <printk>
   3cd18:	4040      	eors	r0, r0
   3cd1a:	f380 8811 	msr	BASEPRI, r0
   3cd1e:	f04f 0003 	mov.w	r0, #3
   3cd22:	df02      	svc	2
}
   3cd24:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   3cd26:	2903      	cmp	r1, #3
   3cd28:	d03c      	beq.n	3cda4 <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   3cd2a:	4a35      	ldr	r2, [pc, #212]	; (3ce00 <hal_ticker_instance0_sched+0x12c>)
   3cd2c:	4935      	ldr	r1, [pc, #212]	; (3ce04 <hal_ticker_instance0_sched+0x130>)
   3cd2e:	4836      	ldr	r0, [pc, #216]	; (3ce08 <hal_ticker_instance0_sched+0x134>)
   3cd30:	2365      	movs	r3, #101	; 0x65
   3cd32:	f005 fdc7 	bl	428c4 <printk>
   3cd36:	4040      	eors	r0, r0
   3cd38:	f380 8811 	msr	BASEPRI, r0
   3cd3c:	f04f 0003 	mov.w	r0, #3
   3cd40:	df02      	svc	2
}
   3cd42:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   3cd44:	2904      	cmp	r1, #4
   3cd46:	d035      	beq.n	3cdb4 <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   3cd48:	4a2d      	ldr	r2, [pc, #180]	; (3ce00 <hal_ticker_instance0_sched+0x12c>)
   3cd4a:	492e      	ldr	r1, [pc, #184]	; (3ce04 <hal_ticker_instance0_sched+0x130>)
   3cd4c:	482e      	ldr	r0, [pc, #184]	; (3ce08 <hal_ticker_instance0_sched+0x134>)
   3cd4e:	237c      	movs	r3, #124	; 0x7c
   3cd50:	f005 fdb8 	bl	428c4 <printk>
   3cd54:	4040      	eors	r0, r0
   3cd56:	f380 8811 	msr	BASEPRI, r0
   3cd5a:	f04f 0003 	mov.w	r0, #3
   3cd5e:	df02      	svc	2
}
   3cd60:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   3cd62:	2903      	cmp	r1, #3
   3cd64:	d036      	beq.n	3cdd4 <hal_ticker_instance0_sched+0x100>
   3cd66:	2904      	cmp	r1, #4
   3cd68:	d02c      	beq.n	3cdc4 <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   3cd6a:	4a25      	ldr	r2, [pc, #148]	; (3ce00 <hal_ticker_instance0_sched+0x12c>)
   3cd6c:	4925      	ldr	r1, [pc, #148]	; (3ce04 <hal_ticker_instance0_sched+0x130>)
   3cd6e:	4826      	ldr	r0, [pc, #152]	; (3ce08 <hal_ticker_instance0_sched+0x134>)
   3cd70:	23a2      	movs	r3, #162	; 0xa2
   3cd72:	f005 fda7 	bl	428c4 <printk>
   3cd76:	4040      	eors	r0, r0
   3cd78:	f380 8811 	msr	BASEPRI, r0
   3cd7c:	f04f 0003 	mov.w	r0, #3
   3cd80:	df02      	svc	2
}
   3cd82:	bd10      	pop	{r4, pc}
			m.param = instance;
   3cd84:	4b21      	ldr	r3, [pc, #132]	; (3ce0c <hal_ticker_instance0_sched+0x138>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   3cd86:	2102      	movs	r1, #2
			m.param = instance;
   3cd88:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   3cd8a:	2003      	movs	r0, #3
}
   3cd8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   3cd90:	f7f2 befe 	b.w	2fb90 <mayfly_enqueue>
			m.param = instance;
   3cd94:	4b1e      	ldr	r3, [pc, #120]	; (3ce10 <hal_ticker_instance0_sched+0x13c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   3cd96:	2102      	movs	r1, #2
			m.param = instance;
   3cd98:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   3cd9a:	2000      	movs	r0, #0
}
   3cd9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   3cda0:	f7f2 bef6 	b.w	2fb90 <mayfly_enqueue>
			m.param = instance;
   3cda4:	4b1b      	ldr	r3, [pc, #108]	; (3ce14 <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   3cda6:	2101      	movs	r1, #1
			m.param = instance;
   3cda8:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   3cdaa:	4608      	mov	r0, r1
}
   3cdac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   3cdb0:	f7f2 beee 	b.w	2fb90 <mayfly_enqueue>
			m.param = instance;
   3cdb4:	4b18      	ldr	r3, [pc, #96]	; (3ce18 <hal_ticker_instance0_sched+0x144>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   3cdb6:	2102      	movs	r1, #2
			m.param = instance;
   3cdb8:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   3cdba:	2001      	movs	r0, #1
}
   3cdbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   3cdc0:	f7f2 bee6 	b.w	2fb90 <mayfly_enqueue>
			m.param = instance;
   3cdc4:	4b15      	ldr	r3, [pc, #84]	; (3ce1c <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   3cdc6:	2102      	movs	r1, #2
			m.param = instance;
   3cdc8:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   3cdca:	4608      	mov	r0, r1
}
   3cdcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   3cdd0:	f7f2 bede 	b.w	2fb90 <mayfly_enqueue>
			m.param = instance;
   3cdd4:	4b12      	ldr	r3, [pc, #72]	; (3ce20 <hal_ticker_instance0_sched+0x14c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   3cdd6:	2101      	movs	r1, #1
			m.param = instance;
   3cdd8:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   3cdda:	2002      	movs	r0, #2
}
   3cddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   3cde0:	f7f2 bed6 	b.w	2fb90 <mayfly_enqueue>
		LL_ASSERT(0);
   3cde4:	4a06      	ldr	r2, [pc, #24]	; (3ce00 <hal_ticker_instance0_sched+0x12c>)
   3cde6:	4907      	ldr	r1, [pc, #28]	; (3ce04 <hal_ticker_instance0_sched+0x130>)
   3cde8:	4807      	ldr	r0, [pc, #28]	; (3ce08 <hal_ticker_instance0_sched+0x134>)
   3cdea:	23c0      	movs	r3, #192	; 0xc0
   3cdec:	f005 fd6a 	bl	428c4 <printk>
   3cdf0:	4040      	eors	r0, r0
   3cdf2:	f380 8811 	msr	BASEPRI, r0
   3cdf6:	f04f 0003 	mov.w	r0, #3
   3cdfa:	df02      	svc	2
}
   3cdfc:	bd10      	pop	{r4, pc}
   3cdfe:	bf00      	nop
   3ce00:	0004a91c 	.word	0x0004a91c
   3ce04:	00049cc8 	.word	0x00049cc8
   3ce08:	00049c68 	.word	0x00049c68
   3ce0c:	200007b0 	.word	0x200007b0
   3ce10:	20000800 	.word	0x20000800
   3ce14:	200007f0 	.word	0x200007f0
   3ce18:	200007e0 	.word	0x200007e0
   3ce1c:	200007c0 	.word	0x200007c0
   3ce20:	200007d0 	.word	0x200007d0

0003ce24 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   3ce24:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   3ce26:	2000      	movs	r0, #0
   3ce28:	f7ff b9fa 	b.w	3c220 <cntr_cmp_set>

0003ce2c <hci_vendor_read_static_addr>:

#include <soc.h>

uint8_t hci_vendor_read_static_addr(struct bt_hci_vs_static_addr addrs[],
				 uint8_t size)
{
   3ce2c:	b508      	push	{r3, lr}
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   3ce2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
   3ce32:	4684      	mov	ip, r0
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   3ce34:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   3ce38:	3201      	adds	r2, #1
   3ce3a:	d03e      	beq.n	3ceba <hci_vendor_read_static_addr+0x8e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   3ce3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   3ce40:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   3ce44:	f010 0001 	ands.w	r0, r0, #1
   3ce48:	d100      	bne.n	3ce4c <hci_vendor_read_static_addr+0x20>

		return 1;
	}

	return 0;
}
   3ce4a:	bd08      	pop	{r3, pc}
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   3ce4c:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
   3ce50:	f8cc 3000 	str.w	r3, [ip]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   3ce54:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
   3ce58:	f88c 3004 	strb.w	r3, [ip, #4]
	dst[1] = val >> 8;
   3ce5c:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   3ce60:	f063 033f 	orn	r3, r3, #63	; 0x3f
   3ce64:	f88c 3005 	strb.w	r3, [ip, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   3ce68:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   3ce6c:	3301      	adds	r3, #1
   3ce6e:	d01c      	beq.n	3ceaa <hci_vendor_read_static_addr+0x7e>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   3ce70:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   3ce74:	3301      	adds	r3, #1
   3ce76:	d018      	beq.n	3ceaa <hci_vendor_read_static_addr+0x7e>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   3ce78:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   3ce7c:	3301      	adds	r3, #1
   3ce7e:	d014      	beq.n	3ceaa <hci_vendor_read_static_addr+0x7e>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   3ce80:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   3ce84:	3301      	adds	r3, #1
   3ce86:	d010      	beq.n	3ceaa <hci_vendor_read_static_addr+0x7e>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   3ce88:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   3ce8c:	f8cc 3006 	str.w	r3, [ip, #6]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   3ce90:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   3ce94:	f8cc 300a 	str.w	r3, [ip, #10]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   3ce98:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   3ce9c:	f8cc 300e 	str.w	r3, [ip, #14]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   3cea0:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   3cea4:	f8cc 3012 	str.w	r3, [ip, #18]
}
   3cea8:	e005      	b.n	3ceb6 <hci_vendor_read_static_addr+0x8a>
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   3ceaa:	2210      	movs	r2, #16
   3ceac:	2100      	movs	r1, #0
   3ceae:	f10c 0006 	add.w	r0, ip, #6
   3ceb2:	f007 fe11 	bl	44ad8 <memset>
		return 1;
   3ceb6:	2001      	movs	r0, #1
}
   3ceb8:	bd08      	pop	{r3, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   3ceba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   3cebe:	f64f 72ff 	movw	r2, #65535	; 0xffff
   3cec2:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   3cec4:	4293      	cmp	r3, r2
   3cec6:	d1b9      	bne.n	3ce3c <hci_vendor_read_static_addr+0x10>
	return 0;
   3cec8:	2000      	movs	r0, #0
}
   3ceca:	bd08      	pop	{r3, pc}

0003cecc <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   3cecc:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   3cece:	2210      	movs	r2, #16
{
   3ced0:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   3ced2:	2100      	movs	r1, #0
   3ced4:	f007 fe00 	bl	44ad8 <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   3ced8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3cedc:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   3cee0:	3201      	adds	r2, #1
   3cee2:	d018      	beq.n	3cf16 <hci_vendor_read_key_hierarchy_roots+0x4a>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   3cee4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   3cee8:	3201      	adds	r2, #1
   3ceea:	d014      	beq.n	3cf16 <hci_vendor_read_key_hierarchy_roots+0x4a>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   3ceec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   3cef0:	3201      	adds	r2, #1
   3cef2:	d010      	beq.n	3cf16 <hci_vendor_read_key_hierarchy_roots+0x4a>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   3cef4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   3cef8:	3201      	adds	r2, #1
   3cefa:	d00c      	beq.n	3cf16 <hci_vendor_read_key_hierarchy_roots+0x4a>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   3cefc:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   3cf00:	6022      	str	r2, [r4, #0]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   3cf02:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   3cf06:	6062      	str	r2, [r4, #4]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   3cf08:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   3cf0c:	60a2      	str	r2, [r4, #8]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   3cf0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   3cf12:	60e3      	str	r3, [r4, #12]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   3cf14:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   3cf16:	4620      	mov	r0, r4
   3cf18:	2210      	movs	r2, #16
}
   3cf1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   3cf1e:	2100      	movs	r1, #0
   3cf20:	f007 bdda 	b.w	44ad8 <memset>

0003cf24 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   3cf24:	4b02      	ldr	r3, [pc, #8]	; (3cf30 <net_buf_pool_get+0xc>)
   3cf26:	222c      	movs	r2, #44	; 0x2c
   3cf28:	fb02 3000 	mla	r0, r2, r0, r3
   3cf2c:	4770      	bx	lr
   3cf2e:	bf00      	nop
   3cf30:	20000c1c 	.word	0x20000c1c

0003cf34 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   3cf34:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   3cf36:	4b06      	ldr	r3, [pc, #24]	; (3cf50 <net_buf_id+0x1c>)
   3cf38:	212c      	movs	r1, #44	; 0x2c
   3cf3a:	fb01 3302 	mla	r3, r1, r2, r3
   3cf3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   3cf40:	7f1b      	ldrb	r3, [r3, #28]
   3cf42:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   3cf44:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   3cf46:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   3cf4a:	fbb0 f0f3 	udiv	r0, r0, r3
   3cf4e:	4770      	bx	lr
   3cf50:	20000c1c 	.word	0x20000c1c

0003cf54 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   3cf54:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   3cf56:	4b0a      	ldr	r3, [pc, #40]	; (3cf80 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   3cf58:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   3cf5a:	242c      	movs	r4, #44	; 0x2c
   3cf5c:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   3cf60:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   3cf62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   3cf64:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   3cf66:	681a      	ldr	r2, [r3, #0]
   3cf68:	4294      	cmp	r4, r2
   3cf6a:	bf94      	ite	ls
   3cf6c:	600c      	strls	r4, [r1, #0]
   3cf6e:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   3cf70:	e9d3 5400 	ldrd	r5, r4, [r3]
   3cf74:	f7ff ffde 	bl	3cf34 <net_buf_id>
}
   3cf78:	fb05 4000 	mla	r0, r5, r0, r4
   3cf7c:	bd38      	pop	{r3, r4, r5, pc}
   3cf7e:	bf00      	nop
   3cf80:	20000c1c 	.word	0x20000c1c

0003cf84 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   3cf84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3cf88:	4605      	mov	r5, r0
   3cf8a:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   3cf8c:	4610      	mov	r0, r2
   3cf8e:	4619      	mov	r1, r3
{
   3cf90:	4691      	mov	r9, r2
   3cf92:	4698      	mov	r8, r3
   3cf94:	4617      	mov	r7, r2
   3cf96:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   3cf98:	f00b fe31 	bl	48bfe <sys_clock_timeout_end_calc>
   3cf9c:	4682      	mov	sl, r0
   3cf9e:	468b      	mov	fp, r1
	__asm__ volatile(
   3cfa0:	f04f 0320 	mov.w	r3, #32
   3cfa4:	f3ef 8111 	mrs	r1, BASEPRI
   3cfa8:	f383 8812 	msr	BASEPRI_MAX, r3
   3cfac:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   3cfb0:	8b6b      	ldrh	r3, [r5, #26]
   3cfb2:	2b00      	cmp	r3, #0
   3cfb4:	d058      	beq.n	3d068 <net_buf_alloc_len+0xe4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   3cfb6:	8b2a      	ldrh	r2, [r5, #24]
   3cfb8:	429a      	cmp	r2, r3
   3cfba:	d93c      	bls.n	3d036 <net_buf_alloc_len+0xb2>
   3cfbc:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   3cfbe:	2200      	movs	r2, #0
   3cfc0:	2300      	movs	r3, #0
   3cfc2:	4628      	mov	r0, r5
   3cfc4:	f004 fa9a 	bl	414fc <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   3cfc8:	9900      	ldr	r1, [sp, #0]
   3cfca:	4604      	mov	r4, r0
   3cfcc:	2800      	cmp	r0, #0
   3cfce:	d032      	beq.n	3d036 <net_buf_alloc_len+0xb2>
	__asm__ volatile(
   3cfd0:	f381 8811 	msr	BASEPRI, r1
   3cfd4:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   3cfd8:	9b01      	ldr	r3, [sp, #4]
   3cfda:	2b00      	cmp	r3, #0
   3cfdc:	d055      	beq.n	3d08a <net_buf_alloc_len+0x106>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   3cfde:	ea58 0309 	orrs.w	r3, r8, r9
   3cfe2:	d00f      	beq.n	3d004 <net_buf_alloc_len+0x80>
   3cfe4:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   3cfe8:	bf08      	it	eq
   3cfea:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   3cfee:	d009      	beq.n	3d004 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   3cff0:	f005 f97c 	bl	422ec <sys_clock_tick_get>
   3cff4:	ebba 0700 	subs.w	r7, sl, r0
   3cff8:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
   3cffc:	2e00      	cmp	r6, #0
   3cffe:	bfbc      	itt	lt
   3d000:	2700      	movlt	r7, #0
   3d002:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   3d004:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   3d006:	4d26      	ldr	r5, [pc, #152]	; (3d0a0 <net_buf_alloc_len+0x11c>)
   3d008:	f04f 082c 	mov.w	r8, #44	; 0x2c
   3d00c:	fb08 5303 	mla	r3, r8, r3, r5
   3d010:	463a      	mov	r2, r7
   3d012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   3d014:	681b      	ldr	r3, [r3, #0]
   3d016:	a901      	add	r1, sp, #4
   3d018:	f8d3 9000 	ldr.w	r9, [r3]
   3d01c:	4620      	mov	r0, r4
   3d01e:	4633      	mov	r3, r6
   3d020:	47c8      	blx	r9
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   3d022:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   3d024:	2800      	cmp	r0, #0
   3d026:	d131      	bne.n	3d08c <net_buf_alloc_len+0x108>
	k_lifo_put(&pool->free, buf);
   3d028:	79a0      	ldrb	r0, [r4, #6]
   3d02a:	4621      	mov	r1, r4
   3d02c:	fb00 5008 	mla	r0, r0, r8, r5
   3d030:	f00b fb44 	bl	486bc <k_queue_prepend>
}
   3d034:	e024      	b.n	3d080 <net_buf_alloc_len+0xfc>
		uninit_count = pool->uninit_count--;
   3d036:	8b68      	ldrh	r0, [r5, #26]
   3d038:	1e43      	subs	r3, r0, #1
   3d03a:	836b      	strh	r3, [r5, #26]
   3d03c:	f381 8811 	msr	BASEPRI, r1
   3d040:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   3d044:	7f2a      	ldrb	r2, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   3d046:	8b29      	ldrh	r1, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   3d048:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   3d04a:	f102 0317 	add.w	r3, r2, #23
   3d04e:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   3d052:	1a09      	subs	r1, r1, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   3d054:	fb01 4403 	mla	r4, r1, r3, r4
	return pool - _net_buf_pool_list;
   3d058:	4b11      	ldr	r3, [pc, #68]	; (3d0a0 <net_buf_alloc_len+0x11c>)
   3d05a:	4912      	ldr	r1, [pc, #72]	; (3d0a4 <net_buf_alloc_len+0x120>)
	buf->user_data_size = pool->user_data_size;
   3d05c:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   3d05e:	1aeb      	subs	r3, r5, r3
   3d060:	109b      	asrs	r3, r3, #2
   3d062:	434b      	muls	r3, r1
	buf->pool_id = pool_id(pool);
   3d064:	71a3      	strb	r3, [r4, #6]
		goto success;
   3d066:	e7b7      	b.n	3cfd8 <net_buf_alloc_len+0x54>
   3d068:	f381 8811 	msr	BASEPRI, r1
   3d06c:	f3bf 8f6f 	isb	sy
   3d070:	464a      	mov	r2, r9
   3d072:	4643      	mov	r3, r8
   3d074:	4628      	mov	r0, r5
   3d076:	f004 fa41 	bl	414fc <z_impl_k_queue_get>
	if (!buf) {
   3d07a:	4604      	mov	r4, r0
   3d07c:	2800      	cmp	r0, #0
   3d07e:	d1ab      	bne.n	3cfd8 <net_buf_alloc_len+0x54>
		return NULL;
   3d080:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   3d082:	4620      	mov	r0, r4
   3d084:	b003      	add	sp, #12
   3d086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   3d08a:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   3d08c:	2300      	movs	r3, #0
	buf->ref   = 1U;
   3d08e:	2201      	movs	r2, #1
	buf->frags = NULL;
   3d090:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   3d092:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   3d094:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   3d096:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   3d098:	6923      	ldr	r3, [r4, #16]
   3d09a:	81e2      	strh	r2, [r4, #14]
   3d09c:	60a3      	str	r3, [r4, #8]
	return buf;
   3d09e:	e7f0      	b.n	3d082 <net_buf_alloc_len+0xfe>
   3d0a0:	20000c1c 	.word	0x20000c1c
   3d0a4:	ba2e8ba3 	.word	0xba2e8ba3

0003d0a8 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   3d0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3d0ac:	4d16      	ldr	r5, [pc, #88]	; (3d108 <net_buf_unref+0x60>)
   3d0ae:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   3d0b0:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   3d0b2:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   3d0b4:	b90c      	cbnz	r4, 3d0ba <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   3d0b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   3d0ba:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   3d0bc:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   3d0c0:	3b01      	subs	r3, #1
   3d0c2:	b2db      	uxtb	r3, r3
   3d0c4:	7123      	strb	r3, [r4, #4]
   3d0c6:	2b00      	cmp	r3, #0
   3d0c8:	d1f5      	bne.n	3d0b6 <net_buf_unref+0xe>
		if (buf->__buf) {
   3d0ca:	6921      	ldr	r1, [r4, #16]
   3d0cc:	b159      	cbz	r1, 3d0e6 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   3d0ce:	7963      	ldrb	r3, [r4, #5]
   3d0d0:	079b      	lsls	r3, r3, #30
   3d0d2:	d407      	bmi.n	3d0e4 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   3d0d4:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   3d0d6:	fb07 5303 	mla	r3, r7, r3, r5
   3d0da:	4620      	mov	r0, r4
   3d0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   3d0de:	681b      	ldr	r3, [r3, #0]
   3d0e0:	689b      	ldr	r3, [r3, #8]
   3d0e2:	4798      	blx	r3
			buf->__buf = NULL;
   3d0e4:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   3d0e6:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   3d0e8:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   3d0ea:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   3d0ee:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   3d0f0:	6a1b      	ldr	r3, [r3, #32]
   3d0f2:	b11b      	cbz	r3, 3d0fc <net_buf_unref+0x54>
			pool->destroy(buf);
   3d0f4:	4620      	mov	r0, r4
   3d0f6:	4798      	blx	r3
{
   3d0f8:	4644      	mov	r4, r8
   3d0fa:	e7db      	b.n	3d0b4 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   3d0fc:	4621      	mov	r1, r4
   3d0fe:	fb00 5007 	mla	r0, r0, r7, r5
   3d102:	f00b fadb 	bl	486bc <k_queue_prepend>
}
   3d106:	e7f7      	b.n	3d0f8 <net_buf_unref+0x50>
   3d108:	20000c1c 	.word	0x20000c1c

0003d10c <endpoint_ctx>:

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
   3d10c:	0602      	lsls	r2, r0, #24
	uint8_t ep_num = USB_EP_GET_IDX(ep);
   3d10e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (NRF_USBD_EPIN_CHECK(ep)) {
   3d112:	d512      	bpl.n	3d13a <endpoint_ctx+0x2e>
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   3d114:	2b08      	cmp	r3, #8
   3d116:	d105      	bne.n	3d124 <endpoint_ctx+0x18>

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   3d118:	0701      	lsls	r1, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
   3d11a:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   3d11e:	d506      	bpl.n	3d12e <endpoint_ctx+0x22>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
   3d120:	480e      	ldr	r0, [pc, #56]	; (3d15c <endpoint_ctx+0x50>)
   3d122:	4770      	bx	lr
			if (ep_num >= CFG_EPIN_CNT) {
   3d124:	f010 0f78 	tst.w	r0, #120	; 0x78
   3d128:	d112      	bne.n	3d150 <endpoint_ctx+0x44>
	ep_num = NRF_USBD_EP_NR_GET(ep);
   3d12a:	f000 030f 	and.w	r3, r0, #15
		} else {
			return &ctx->ep_ctx[ep_num];
   3d12e:	204c      	movs	r0, #76	; 0x4c
   3d130:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   3d134:	4b0a      	ldr	r3, [pc, #40]	; (3d160 <endpoint_ctx+0x54>)
   3d136:	4418      	add	r0, r3
   3d138:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   3d13a:	2b08      	cmp	r3, #8
   3d13c:	d105      	bne.n	3d14a <endpoint_ctx+0x3e>
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   3d13e:	0702      	lsls	r2, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
   3d140:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   3d144:	d506      	bpl.n	3d154 <endpoint_ctx+0x48>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
   3d146:	4807      	ldr	r0, [pc, #28]	; (3d164 <endpoint_ctx+0x58>)
   3d148:	4770      	bx	lr
			if (ep_num >= CFG_EPOUT_CNT) {
   3d14a:	f010 0f78 	tst.w	r0, #120	; 0x78
   3d14e:	d0f6      	beq.n	3d13e <endpoint_ctx+0x32>
		return NULL;
   3d150:	2000      	movs	r0, #0
					    ep_num];
		}
	}

	return NULL;
}
   3d152:	4770      	bx	lr
			return &ctx->ep_ctx[CFG_EPIN_CNT +
   3d154:	4804      	ldr	r0, [pc, #16]	; (3d168 <endpoint_ctx+0x5c>)
   3d156:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   3d15a:	4770      	bx	lr
   3d15c:	20002ea4 	.word	0x20002ea4
   3d160:	20002d58 	.word	0x20002d58
   3d164:	20002fc4 	.word	0x20002fc4
   3d168:	20002ec4 	.word	0x20002ec4

0003d16c <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
   3d16c:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
   3d16e:	4801      	ldr	r0, [pc, #4]	; (3d174 <usbd_evt_put+0x8>)
   3d170:	f00b ba99 	b.w	486a6 <k_queue_append>
   3d174:	20000c04 	.word	0x20000c04

0003d178 <usbd_work_schedule>:
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   3d178:	4901      	ldr	r1, [pc, #4]	; (3d180 <usbd_work_schedule+0x8>)
   3d17a:	4802      	ldr	r0, [pc, #8]	; (3d184 <usbd_work_schedule+0xc>)
   3d17c:	f00b bb70 	b.w	48860 <k_work_submit_to_queue>
   3d180:	20002d80 	.word	0x20002d80
   3d184:	20001700 	.word	0x20001700

0003d188 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
   3d188:	b513      	push	{r0, r1, r4, lr}
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
   3d18a:	480b      	ldr	r0, [pc, #44]	; (3d1b8 <usb_init+0x30>)
   3d18c:	f002 fd3c 	bl	3fc08 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
   3d190:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
   3d192:	480a      	ldr	r0, [pc, #40]	; (3d1bc <usb_init+0x34>)
   3d194:	f002 fd7c 	bl	3fc90 <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
   3d198:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3d19c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   3d1a0:	4907      	ldr	r1, [pc, #28]	; (3d1c0 <usb_init+0x38>)
   3d1a2:	4808      	ldr	r0, [pc, #32]	; (3d1c4 <usb_init+0x3c>)
   3d1a4:	9400      	str	r4, [sp, #0]
   3d1a6:	f004 fb67 	bl	41878 <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
   3d1aa:	4907      	ldr	r1, [pc, #28]	; (3d1c8 <usb_init+0x40>)
   3d1ac:	4807      	ldr	r0, [pc, #28]	; (3d1cc <usb_init+0x44>)
   3d1ae:	f00b fb4e 	bl	4884e <k_work_init>

	return 0;
}
   3d1b2:	4620      	mov	r0, r4
   3d1b4:	b002      	add	sp, #8
   3d1b6:	bd10      	pop	{r4, pc}
   3d1b8:	0004b124 	.word	0x0004b124
   3d1bc:	0004a9ac 	.word	0x0004a9ac
   3d1c0:	20005158 	.word	0x20005158
   3d1c4:	20001700 	.word	0x20001700
   3d1c8:	0003d4e1 	.word	0x0003d4e1
   3d1cc:	20002d80 	.word	0x20002d80

0003d1d0 <usbd_evt_get>:
   3d1d0:	4802      	ldr	r0, [pc, #8]	; (3d1dc <usbd_evt_get+0xc>)
   3d1d2:	2200      	movs	r2, #0
   3d1d4:	2300      	movs	r3, #0
   3d1d6:	f004 b991 	b.w	414fc <z_impl_k_queue_get>
   3d1da:	bf00      	nop
   3d1dc:	20000c04 	.word	0x20000c04

0003d1e0 <usbd_evt_flush>:
{
   3d1e0:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   3d1e2:	4c05      	ldr	r4, [pc, #20]	; (3d1f8 <usbd_evt_flush+0x18>)
		ev = usbd_evt_get();
   3d1e4:	f7ff fff4 	bl	3d1d0 <usbd_evt_get>
		if (ev) {
   3d1e8:	b120      	cbz	r0, 3d1f4 <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   3d1ea:	1d01      	adds	r1, r0, #4
   3d1ec:	4620      	mov	r0, r4
   3d1ee:	f00b f992 	bl	48516 <k_mem_slab_free>
	} while (ev != NULL);
   3d1f2:	e7f7      	b.n	3d1e4 <usbd_evt_flush+0x4>
}
   3d1f4:	bd10      	pop	{r4, pc}
   3d1f6:	bf00      	nop
   3d1f8:	20000ab8 	.word	0x20000ab8

0003d1fc <usbd_evt_alloc>:
{
   3d1fc:	b507      	push	{r0, r1, r2, lr}
	if (k_mem_slab_alloc(&fifo_elem_slab,
   3d1fe:	2300      	movs	r3, #0
   3d200:	480e      	ldr	r0, [pc, #56]	; (3d23c <usbd_evt_alloc+0x40>)
   3d202:	2200      	movs	r2, #0
   3d204:	a901      	add	r1, sp, #4
   3d206:	f003 ff0d 	bl	41024 <k_mem_slab_alloc>
   3d20a:	b190      	cbz	r0, 3d232 <usbd_evt_alloc+0x36>
		usbd_evt_flush();
   3d20c:	f7ff ffe8 	bl	3d1e0 <usbd_evt_flush>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   3d210:	480a      	ldr	r0, [pc, #40]	; (3d23c <usbd_evt_alloc+0x40>)
   3d212:	2200      	movs	r2, #0
   3d214:	2300      	movs	r3, #0
   3d216:	a901      	add	r1, sp, #4
   3d218:	f003 ff04 	bl	41024 <k_mem_slab_alloc>
   3d21c:	b938      	cbnz	r0, 3d22e <usbd_evt_alloc+0x32>
		ev = (struct usbd_event *)block.data;
   3d21e:	9801      	ldr	r0, [sp, #4]
		ev->evt_type = USBD_EVT_REINIT;
   3d220:	2304      	movs	r3, #4
		ev->block = block;
   3d222:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
   3d224:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
   3d226:	f7ff ffa1 	bl	3d16c <usbd_evt_put>
		usbd_work_schedule();
   3d22a:	f7ff ffa5 	bl	3d178 <usbd_work_schedule>
		return NULL;
   3d22e:	2000      	movs	r0, #0
   3d230:	e001      	b.n	3d236 <usbd_evt_alloc+0x3a>
	ev = (struct usbd_event *)block.data;
   3d232:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
   3d234:	6040      	str	r0, [r0, #4]
}
   3d236:	b003      	add	sp, #12
   3d238:	f85d fb04 	ldr.w	pc, [sp], #4
   3d23c:	20000ab8 	.word	0x20000ab8

0003d240 <usbd_event_transfer_data>:
{
   3d240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		endpoint_ctx(p_event->data.eptransfer.ep);
   3d242:	7887      	ldrb	r7, [r0, #2]
{
   3d244:	4606      	mov	r6, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
   3d246:	4638      	mov	r0, r7
   3d248:	f7ff ff60 	bl	3d10c <endpoint_ctx>
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   3d24c:	063b      	lsls	r3, r7, #24
		switch (p_event->data.eptransfer.status) {
   3d24e:	78f5      	ldrb	r5, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
   3d250:	4604      	mov	r4, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   3d252:	d512      	bpl.n	3d27a <usbd_event_transfer_data+0x3a>
		switch (p_event->data.eptransfer.status) {
   3d254:	2d00      	cmp	r5, #0
   3d256:	d143      	bne.n	3d2e0 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
   3d258:	f7ff ffd0 	bl	3d1fc <usbd_evt_alloc>
			if (!ev) {
   3d25c:	4603      	mov	r3, r0
   3d25e:	2800      	cmp	r0, #0
   3d260:	d03e      	beq.n	3d2e0 <usbd_event_transfer_data+0xa0>
			ev->evt_type = USBD_EVT_EP;
   3d262:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   3d264:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
   3d266:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   3d268:	2203      	movs	r2, #3
   3d26a:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   3d26c:	609c      	str	r4, [r3, #8]
			usbd_evt_put(ev);
   3d26e:	f7ff ff7d 	bl	3d16c <usbd_evt_put>
}
   3d272:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			usbd_work_schedule();
   3d276:	f7ff bf7f 	b.w	3d178 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
   3d27a:	b14d      	cbz	r5, 3d290 <usbd_event_transfer_data+0x50>
   3d27c:	2d01      	cmp	r5, #1
   3d27e:	d12f      	bne.n	3d2e0 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
   3d280:	f7ff ffbc 	bl	3d1fc <usbd_evt_alloc>
			if (!ev) {
   3d284:	4603      	mov	r3, r0
   3d286:	b358      	cbz	r0, 3d2e0 <usbd_event_transfer_data+0xa0>
			ep_ctx->read_pending = true;
   3d288:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
   3d28a:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   3d28c:	7305      	strb	r5, [r0, #12]
   3d28e:	e7ed      	b.n	3d26c <usbd_event_transfer_data+0x2c>
			struct usbd_event *ev = usbd_evt_alloc();
   3d290:	f7ff ffb4 	bl	3d1fc <usbd_evt_alloc>
			if (!ev) {
   3d294:	b320      	cbz	r0, 3d2e0 <usbd_event_transfer_data+0xa0>
				p_event->data.eptransfer.ep);
   3d296:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
   3d298:	4b12      	ldr	r3, [pc, #72]	; (3d2e4 <usbd_event_transfer_data+0xa4>)
   3d29a:	f012 0f80 	tst.w	r2, #128	; 0x80
   3d29e:	f002 0108 	and.w	r1, r2, #8
   3d2a2:	d011      	beq.n	3d2c8 <usbd_event_transfer_data+0x88>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   3d2a4:	b141      	cbz	r1, 3d2b8 <usbd_event_transfer_data+0x78>
        {
            ret = p_reg->ISOIN.AMOUNT;
   3d2a6:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
   3d2aa:	60e3      	str	r3, [r4, #12]
			ev->evt_type = USBD_EVT_EP;
   3d2ac:	2301      	movs	r3, #1
   3d2ae:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   3d2b0:	2302      	movs	r3, #2
   3d2b2:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   3d2b4:	6084      	str	r4, [r0, #8]
   3d2b6:	e7da      	b.n	3d26e <usbd_event_transfer_data+0x2e>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
   3d2b8:	f002 020f 	and.w	r2, r2, #15
   3d2bc:	2114      	movs	r1, #20
   3d2be:	fb01 3302 	mla	r3, r1, r2, r3
   3d2c2:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   3d2c6:	e7f0      	b.n	3d2aa <usbd_event_transfer_data+0x6a>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   3d2c8:	b111      	cbz	r1, 3d2d0 <usbd_event_transfer_data+0x90>
        {
            ret = p_reg->ISOOUT.AMOUNT;
   3d2ca:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
   3d2ce:	e7ec      	b.n	3d2aa <usbd_event_transfer_data+0x6a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
   3d2d0:	f002 020f 	and.w	r2, r2, #15
   3d2d4:	2114      	movs	r1, #20
   3d2d6:	fb01 3302 	mla	r3, r1, r2, r3
   3d2da:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
   3d2de:	e7e4      	b.n	3d2aa <usbd_event_transfer_data+0x6a>
}
   3d2e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3d2e2:	bf00      	nop
   3d2e4:	40027000 	.word	0x40027000

0003d2e8 <usb_dc_power_event_handler>:
	switch (event) {
   3d2e8:	2802      	cmp	r0, #2
{
   3d2ea:	b510      	push	{r4, lr}
   3d2ec:	d811      	bhi.n	3d312 <usb_dc_power_event_handler+0x2a>
   3d2ee:	4b09      	ldr	r3, [pc, #36]	; (3d314 <usb_dc_power_event_handler+0x2c>)
   3d2f0:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
   3d2f2:	f7ff ff83 	bl	3d1fc <usbd_evt_alloc>
	if (!ev) {
   3d2f6:	b160      	cbz	r0, 3d312 <usb_dc_power_event_handler+0x2a>
	ev->evt_type = USBD_EVT_POWER;
   3d2f8:	2200      	movs	r2, #0
   3d2fa:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
   3d2fc:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
   3d2fe:	f7ff ff35 	bl	3d16c <usbd_evt_put>
	if (usbd_ctx.attached) {
   3d302:	4b05      	ldr	r3, [pc, #20]	; (3d318 <usb_dc_power_event_handler+0x30>)
   3d304:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   3d308:	b11b      	cbz	r3, 3d312 <usb_dc_power_event_handler+0x2a>
}
   3d30a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
   3d30e:	f7ff bf33 	b.w	3d178 <usbd_work_schedule>
}
   3d312:	bd10      	pop	{r4, pc}
   3d314:	0004b121 	.word	0x0004b121
   3d318:	20002d58 	.word	0x20002d58

0003d31c <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
   3d31c:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   3d31e:	490e      	ldr	r1, [pc, #56]	; (3d358 <hfxo_stop.constprop.0.isra.0+0x3c>)
   3d320:	f3bf 8f5b 	dmb	ish
   3d324:	2300      	movs	r3, #0
   3d326:	e851 2f00 	ldrex	r2, [r1]
   3d32a:	2a01      	cmp	r2, #1
   3d32c:	d103      	bne.n	3d336 <hfxo_stop.constprop.0.isra.0+0x1a>
   3d32e:	e841 3000 	strex	r0, r3, [r1]
   3d332:	2800      	cmp	r0, #0
   3d334:	d1f7      	bne.n	3d326 <hfxo_stop.constprop.0.isra.0+0xa>
   3d336:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
   3d33a:	d10c      	bne.n	3d356 <hfxo_stop.constprop.0.isra.0+0x3a>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
   3d33c:	f851 4c04 	ldr.w	r4, [r1, #-4]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
   3d340:	3914      	subs	r1, #20
   3d342:	4620      	mov	r0, r4
   3d344:	f005 fbd3 	bl	42aee <onoff_cancel>

	if (rv == -EALREADY) {
   3d348:	3078      	adds	r0, #120	; 0x78
   3d34a:	d104      	bne.n	3d356 <hfxo_stop.constprop.0.isra.0+0x3a>
		rv = onoff_release(mgr);
   3d34c:	4620      	mov	r0, r4
}
   3d34e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3d352:	f005 bba7 	b.w	42aa4 <onoff_release>
   3d356:	bd10      	pop	{r4, pc}
   3d358:	20002d78 	.word	0x20002d78

0003d35c <usbd_event_handler>:
{
   3d35c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3d35e:	4606      	mov	r6, r0
   3d360:	b089      	sub	sp, #36	; 0x24
	struct usbd_event evt = {0};
   3d362:	2214      	movs	r2, #20
   3d364:	2100      	movs	r1, #0
   3d366:	a803      	add	r0, sp, #12
   3d368:	f007 fbb6 	bl	44ad8 <memset>
	switch (p_event->type) {
   3d36c:	7833      	ldrb	r3, [r6, #0]
   3d36e:	3b01      	subs	r3, #1
   3d370:	2b05      	cmp	r3, #5
   3d372:	d821      	bhi.n	3d3b8 <usbd_event_handler+0x5c>
   3d374:	e8df f003 	tbb	[pc, r3]
   3d378:	1414037a 	.word	0x1414037a
   3d37c:	166a      	.short	0x166a
   3d37e:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
   3d380:	f88d 3014 	strb.w	r3, [sp, #20]
		evt.evt_type = USBD_EVT_POWER;
   3d384:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
   3d386:	f7ff ff39 	bl	3d1fc <usbd_evt_alloc>
		if (!ev) {
   3d38a:	4603      	mov	r3, r0
   3d38c:	b1a0      	cbz	r0, 3d3b8 <usbd_event_handler+0x5c>
		ev->evt_type = evt.evt_type;
   3d38e:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
   3d390:	f100 0208 	add.w	r2, r0, #8
   3d394:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
   3d398:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
   3d39c:	4618      	mov	r0, r3
   3d39e:	e01d      	b.n	3d3dc <usbd_event_handler+0x80>
	switch (p_event->type) {
   3d3a0:	2304      	movs	r3, #4
   3d3a2:	e7ed      	b.n	3d380 <usbd_event_handler+0x24>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   3d3a4:	78b7      	ldrb	r7, [r6, #2]
   3d3a6:	4638      	mov	r0, r7
   3d3a8:	f7ff feb0 	bl	3d10c <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
   3d3ac:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   3d3ae:	4604      	mov	r4, r0
		switch (ep_ctx->cfg.type) {
   3d3b0:	b123      	cbz	r3, 3d3bc <usbd_event_handler+0x60>
   3d3b2:	3b01      	subs	r3, #1
   3d3b4:	2b02      	cmp	r3, #2
   3d3b6:	d943      	bls.n	3d440 <usbd_event_handler+0xe4>
}
   3d3b8:	b009      	add	sp, #36	; 0x24
   3d3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   3d3bc:	063b      	lsls	r3, r7, #24
		switch (p_event->data.eptransfer.status) {
   3d3be:	78f5      	ldrb	r5, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   3d3c0:	d513      	bpl.n	3d3ea <usbd_event_handler+0x8e>
		switch (p_event->data.eptransfer.status) {
   3d3c2:	2d00      	cmp	r5, #0
   3d3c4:	d1f8      	bne.n	3d3b8 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
   3d3c6:	f7ff ff19 	bl	3d1fc <usbd_evt_alloc>
			if (!ev) {
   3d3ca:	4603      	mov	r3, r0
   3d3cc:	2800      	cmp	r0, #0
   3d3ce:	d0f3      	beq.n	3d3b8 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
   3d3d0:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   3d3d2:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
   3d3d4:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   3d3d6:	2203      	movs	r2, #3
   3d3d8:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   3d3da:	609c      	str	r4, [r3, #8]
		usbd_evt_put(ev);
   3d3dc:	f7ff fec6 	bl	3d16c <usbd_evt_put>
}
   3d3e0:	b009      	add	sp, #36	; 0x24
   3d3e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		usbd_work_schedule();
   3d3e6:	f7ff bec7 	b.w	3d178 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
   3d3ea:	b155      	cbz	r5, 3d402 <usbd_event_handler+0xa6>
   3d3ec:	2d01      	cmp	r5, #1
   3d3ee:	d1e3      	bne.n	3d3b8 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
   3d3f0:	f7ff ff04 	bl	3d1fc <usbd_evt_alloc>
			if (!ev) {
   3d3f4:	4603      	mov	r3, r0
   3d3f6:	2800      	cmp	r0, #0
   3d3f8:	d0de      	beq.n	3d3b8 <usbd_event_handler+0x5c>
			ep_ctx->read_pending = true;
   3d3fa:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
   3d3fc:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   3d3fe:	7305      	strb	r5, [r0, #12]
   3d400:	e7eb      	b.n	3d3da <usbd_event_handler+0x7e>
			struct usbd_event *ev = usbd_evt_alloc();
   3d402:	f7ff fefb 	bl	3d1fc <usbd_evt_alloc>
			if (!ev) {
   3d406:	4607      	mov	r7, r0
   3d408:	2800      	cmp	r0, #0
   3d40a:	d0d5      	beq.n	3d3b8 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
   3d40c:	2301      	movs	r3, #1
   3d40e:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   3d410:	2302      	movs	r3, #2
   3d412:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   3d414:	6084      	str	r4, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
   3d416:	f104 010c 	add.w	r1, r4, #12
   3d41a:	78b0      	ldrb	r0, [r6, #2]
   3d41c:	f00a fdf8 	bl	48010 <nrfx_usbd_ep_status_get>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
   3d420:	4a13      	ldr	r2, [pc, #76]	; (3d470 <usbd_event_handler+0x114>)
   3d422:	68e1      	ldr	r1, [r4, #12]
   3d424:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
   3d428:	428b      	cmp	r3, r1
   3d42a:	d906      	bls.n	3d43a <usbd_event_handler+0xde>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
   3d42c:	1a5b      	subs	r3, r3, r1
   3d42e:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
   3d432:	f003 f97d 	bl	40730 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
   3d436:	4638      	mov	r0, r7
   3d438:	e7d0      	b.n	3d3dc <usbd_event_handler+0x80>
				ctx->ctrl_read_len = 0U;
   3d43a:	f8a2 528c 	strh.w	r5, [r2, #652]	; 0x28c
   3d43e:	e7fa      	b.n	3d436 <usbd_event_handler+0xda>
			usbd_event_transfer_data(p_event);
   3d440:	4630      	mov	r0, r6
}
   3d442:	b009      	add	sp, #36	; 0x24
   3d444:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			usbd_event_transfer_data(p_event);
   3d448:	f7ff befa 	b.w	3d240 <usbd_event_transfer_data>
		nrfx_usbd_setup_get(&drv_setup);
   3d44c:	a801      	add	r0, sp, #4
   3d44e:	f003 f949 	bl	406e4 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
   3d452:	f89d 3005 	ldrb.w	r3, [sp, #5]
   3d456:	2b05      	cmp	r3, #5
   3d458:	d104      	bne.n	3d464 <usbd_event_handler+0x108>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
   3d45a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   3d45e:	f013 0f60 	tst.w	r3, #96	; 0x60
   3d462:	d0a9      	beq.n	3d3b8 <usbd_event_handler+0x5c>
			evt.evt.ep_evt.ep = ep_ctx;
   3d464:	4b03      	ldr	r3, [pc, #12]	; (3d474 <usbd_event_handler+0x118>)
   3d466:	9305      	str	r3, [sp, #20]
			evt.evt_type = USBD_EVT_EP;
   3d468:	2401      	movs	r4, #1
   3d46a:	e78c      	b.n	3d386 <usbd_event_handler+0x2a>
	switch (p_event->type) {
   3d46c:	2402      	movs	r4, #2
   3d46e:	e78a      	b.n	3d386 <usbd_event_handler+0x2a>
   3d470:	20002d58 	.word	0x20002d58
   3d474:	20002ec4 	.word	0x20002ec4

0003d478 <eps_ctx_init>:
{
   3d478:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   3d47a:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   3d47c:	f064 007f 	orn	r0, r4, #127	; 0x7f
   3d480:	b2c0      	uxtb	r0, r0
   3d482:	f7ff fe43 	bl	3d10c <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   3d486:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   3d488:	f00a fa91 	bl	479ae <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   3d48c:	2c08      	cmp	r4, #8
   3d48e:	d1f5      	bne.n	3d47c <eps_ctx_init+0x4>
   3d490:	4d0e      	ldr	r5, [pc, #56]	; (3d4cc <eps_ctx_init+0x54>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   3d492:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   3d494:	b2e0      	uxtb	r0, r4
   3d496:	f7ff fe39 	bl	3d10c <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
   3d49a:	6903      	ldr	r3, [r0, #16]
   3d49c:	b903      	cbnz	r3, 3d4a0 <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
   3d49e:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   3d4a0:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   3d4a2:	f00a fa84 	bl	479ae <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   3d4a6:	2c08      	cmp	r4, #8
   3d4a8:	f105 0540 	add.w	r5, r5, #64	; 0x40
   3d4ac:	d1f2      	bne.n	3d494 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
   3d4ae:	4808      	ldr	r0, [pc, #32]	; (3d4d0 <eps_ctx_init+0x58>)
   3d4b0:	f00a fa7d 	bl	479ae <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
   3d4b4:	4b07      	ldr	r3, [pc, #28]	; (3d4d4 <eps_ctx_init+0x5c>)
   3d4b6:	f8d3 227c 	ldr.w	r2, [r3, #636]	; 0x27c
   3d4ba:	b912      	cbnz	r2, 3d4c2 <eps_ctx_init+0x4a>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
   3d4bc:	4a06      	ldr	r2, [pc, #24]	; (3d4d8 <eps_ctx_init+0x60>)
   3d4be:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
   3d4c2:	4806      	ldr	r0, [pc, #24]	; (3d4dc <eps_ctx_init+0x64>)
   3d4c4:	f00a fa73 	bl	479ae <ep_ctx_reset>
}
   3d4c8:	2000      	movs	r0, #0
   3d4ca:	bd38      	pop	{r3, r4, r5, pc}
   3d4cc:	200033e8 	.word	0x200033e8
   3d4d0:	20002ea4 	.word	0x20002ea4
   3d4d4:	20002d58 	.word	0x20002d58
   3d4d8:	20002fe8 	.word	0x20002fe8
   3d4dc:	20002fc4 	.word	0x20002fc4

0003d4e0 <usbd_work_handler>:
{
   3d4e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->ready;
   3d4e4:	4ca7      	ldr	r4, [pc, #668]	; (3d784 <usbd_work_handler+0x2a4>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   3d4e6:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 3d788 <usbd_work_handler+0x2a8>
{
   3d4ea:	b085      	sub	sp, #20
   3d4ec:	4607      	mov	r7, r0
	while ((ev = usbd_evt_get()) != NULL) {
   3d4ee:	f7ff fe6f 	bl	3d1d0 <usbd_evt_get>
   3d4f2:	b910      	cbnz	r0, 3d4fa <usbd_work_handler+0x1a>
}
   3d4f4:	b005      	add	sp, #20
   3d4f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return get_usbd_ctx()->ready;
   3d4fa:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   3d4fe:	7c02      	ldrb	r2, [r0, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   3d500:	f100 0904 	add.w	r9, r0, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   3d504:	b93b      	cbnz	r3, 3d516 <usbd_work_handler+0x36>
   3d506:	2a00      	cmp	r2, #0
   3d508:	f000 8088 	beq.w	3d61c <usbd_work_handler+0x13c>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   3d50c:	489e      	ldr	r0, [pc, #632]	; (3d788 <usbd_work_handler+0x2a8>)
   3d50e:	4649      	mov	r1, r9
   3d510:	f00b f801 	bl	48516 <k_mem_slab_free>
}
   3d514:	e7eb      	b.n	3d4ee <usbd_work_handler+0xe>
		switch (ev->evt_type) {
   3d516:	2a04      	cmp	r2, #4
   3d518:	d844      	bhi.n	3d5a4 <usbd_work_handler+0xc4>
   3d51a:	e8df f012 	tbh	[pc, r2, lsl #1]
   3d51e:	007f      	.short	0x007f
   3d520:	01020005 	.word	0x01020005
   3d524:	01410118 	.word	0x01410118
	switch (ep_evt->evt_type) {
   3d528:	7b03      	ldrb	r3, [r0, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
   3d52a:	6885      	ldr	r5, [r0, #8]
	switch (ep_evt->evt_type) {
   3d52c:	2b03      	cmp	r3, #3
   3d52e:	d839      	bhi.n	3d5a4 <usbd_work_handler+0xc4>
   3d530:	e8df f003 	tbb	[pc, r3]
   3d534:	615c3f02 	.word	0x615c3f02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
   3d538:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
   3d53a:	2208      	movs	r2, #8
   3d53c:	2100      	movs	r1, #0
   3d53e:	4630      	mov	r0, r6
   3d540:	f007 faca 	bl	44ad8 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   3d544:	4b91      	ldr	r3, [pc, #580]	; (3d78c <usbd_work_handler+0x2ac>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   3d546:	4892      	ldr	r0, [pc, #584]	; (3d790 <usbd_work_handler+0x2b0>)
   3d548:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   3d54c:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
   3d54e:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   3d552:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
   3d554:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   3d558:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   3d55c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
   3d560:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
   3d562:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   3d566:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   3d56a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
   3d56e:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
   3d570:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   3d574:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   3d578:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   3d57c:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
   3d57e:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   3d580:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   3d582:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   3d584:	f007 fa9d 	bl	44ac2 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
   3d588:	682b      	ldr	r3, [r5, #0]
   3d58a:	7a68      	ldrb	r0, [r5, #9]
   3d58c:	2100      	movs	r1, #0
   3d58e:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
   3d590:	f996 3000 	ldrsb.w	r3, [r6]
   3d594:	2b00      	cmp	r3, #0
   3d596:	db08      	blt.n	3d5aa <usbd_work_handler+0xca>
   3d598:	88f3      	ldrh	r3, [r6, #6]
   3d59a:	b133      	cbz	r3, 3d5aa <usbd_work_handler+0xca>
		ctx->ctrl_read_len = usbd_setup->wLength;
   3d59c:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
   3d5a0:	f003 f8c6 	bl	40730 <nrfx_usbd_setup_data_clear>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   3d5a4:	4649      	mov	r1, r9
   3d5a6:	4640      	mov	r0, r8
   3d5a8:	e7b2      	b.n	3d510 <usbd_work_handler+0x30>
		ctx->ctrl_read_len = 0U;
   3d5aa:	2300      	movs	r3, #0
   3d5ac:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
   3d5b0:	e7f8      	b.n	3d5a4 <usbd_work_handler+0xc4>
	if (!ep_ctx->read_pending) {
   3d5b2:	7f6b      	ldrb	r3, [r5, #29]
   3d5b4:	2b00      	cmp	r3, #0
   3d5b6:	d0f5      	beq.n	3d5a4 <usbd_work_handler+0xc4>
	if (!ep_ctx->read_complete) {
   3d5b8:	7f2b      	ldrb	r3, [r5, #28]
   3d5ba:	2b00      	cmp	r3, #0
   3d5bc:	d0f2      	beq.n	3d5a4 <usbd_work_handler+0xc4>
	ep_ctx->read_pending = false;
   3d5be:	2600      	movs	r6, #0
   3d5c0:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   3d5c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3d5c6:	4873      	ldr	r0, [pc, #460]	; (3d794 <usbd_work_handler+0x2b4>)
	ep_ctx->read_complete = false;
   3d5c8:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   3d5ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3d5ce:	f00a fa01 	bl	479d4 <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
   3d5d2:	696b      	ldr	r3, [r5, #20]
   3d5d4:	9301      	str	r3, [sp, #4]
   3d5d6:	686b      	ldr	r3, [r5, #4]
   3d5d8:	e9cd 3602 	strd	r3, r6, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
   3d5dc:	a901      	add	r1, sp, #4
   3d5de:	7a68      	ldrb	r0, [r5, #9]
   3d5e0:	f002 feac 	bl	4033c <nrfx_usbd_ep_transfer>
	k_mutex_unlock(&ctx->drv_lock);
   3d5e4:	486b      	ldr	r0, [pc, #428]	; (3d794 <usbd_work_handler+0x2b4>)
   3d5e6:	f00a f9f7 	bl	479d8 <k_mutex_unlock.isra.0>
   3d5ea:	e7db      	b.n	3d5a4 <usbd_work_handler+0xc4>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   3d5ec:	682b      	ldr	r3, [r5, #0]
   3d5ee:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   3d5f0:	7a68      	ldrb	r0, [r5, #9]
   3d5f2:	4798      	blx	r3
		break;
   3d5f4:	e7d6      	b.n	3d5a4 <usbd_work_handler+0xc4>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
   3d5f6:	7aab      	ldrb	r3, [r5, #10]
   3d5f8:	b96b      	cbnz	r3, 3d616 <usbd_work_handler+0x136>
   3d5fa:	7feb      	ldrb	r3, [r5, #31]
   3d5fc:	b95b      	cbnz	r3, 3d616 <usbd_work_handler+0x136>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   3d5fe:	4865      	ldr	r0, [pc, #404]	; (3d794 <usbd_work_handler+0x2b4>)
   3d600:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3d604:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3d608:	f00a f9e4 	bl	479d4 <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
   3d60c:	f003 f8c0 	bl	40790 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
   3d610:	4860      	ldr	r0, [pc, #384]	; (3d794 <usbd_work_handler+0x2b4>)
   3d612:	f00a f9e1 	bl	479d8 <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   3d616:	682b      	ldr	r3, [r5, #0]
   3d618:	2102      	movs	r1, #2
   3d61a:	e7e9      	b.n	3d5f0 <usbd_work_handler+0x110>
	switch (pwr_evt->state) {
   3d61c:	7a02      	ldrb	r2, [r0, #8]
   3d61e:	2a04      	cmp	r2, #4
   3d620:	d8c0      	bhi.n	3d5a4 <usbd_work_handler+0xc4>
   3d622:	e8df f002 	tbb	[pc, r2]
   3d626:	0359      	.short	0x0359
   3d628:	6723      	.short	0x6723
   3d62a:	73          	.byte	0x73
   3d62b:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
   3d62c:	f002 fe3a 	bl	402a4 <nrfx_usbd_is_enabled>
   3d630:	4605      	mov	r5, r0
   3d632:	2800      	cmp	r0, #0
   3d634:	d1b6      	bne.n	3d5a4 <usbd_work_handler+0xc4>
			nrfx_usbd_enable();
   3d636:	f002 fd71 	bl	4011c <nrfx_usbd_enable>
   3d63a:	f3bf 8f5b 	dmb	ish
   3d63e:	4956      	ldr	r1, [pc, #344]	; (3d798 <usbd_work_handler+0x2b8>)
   3d640:	2301      	movs	r3, #1
   3d642:	e851 2f00 	ldrex	r2, [r1]
   3d646:	2a00      	cmp	r2, #0
   3d648:	d103      	bne.n	3d652 <usbd_work_handler+0x172>
   3d64a:	e841 3000 	strex	r0, r3, [r1]
   3d64e:	2800      	cmp	r0, #0
   3d650:	d1f7      	bne.n	3d642 <usbd_work_handler+0x162>
   3d652:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
   3d656:	d1a5      	bne.n	3d5a4 <usbd_work_handler+0xc4>
   3d658:	f841 5c10 	str.w	r5, [r1, #-16]
   3d65c:	f841 5c08 	str.w	r5, [r1, #-8]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
   3d660:	69e0      	ldr	r0, [r4, #28]
   3d662:	6163      	str	r3, [r4, #20]
   3d664:	3914      	subs	r1, #20
   3d666:	f005 f9c5 	bl	429f4 <onoff_request>
   3d66a:	e79b      	b.n	3d5a4 <usbd_work_handler+0xc4>
	switch (pwr_evt->state) {
   3d66c:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   3d66e:	f065 007f 	orn	r0, r5, #127	; 0x7f
   3d672:	b2c0      	uxtb	r0, r0
   3d674:	f7ff fd4a 	bl	3d10c <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   3d678:	7a03      	ldrb	r3, [r0, #8]
   3d67a:	b113      	cbz	r3, 3d682 <usbd_work_handler+0x1a2>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   3d67c:	7a40      	ldrb	r0, [r0, #9]
   3d67e:	f003 fa6b 	bl	40b58 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   3d682:	3501      	adds	r5, #1
   3d684:	2d08      	cmp	r5, #8
   3d686:	d1f2      	bne.n	3d66e <usbd_work_handler+0x18e>
		if (ep_ctx->cfg.en) {
   3d688:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
   3d68c:	b11b      	cbz	r3, 3d696 <usbd_work_handler+0x1b6>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   3d68e:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
   3d692:	f003 fa61 	bl	40b58 <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
   3d696:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   3d698:	b2e8      	uxtb	r0, r5
   3d69a:	f7ff fd37 	bl	3d10c <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   3d69e:	7a03      	ldrb	r3, [r0, #8]
   3d6a0:	b113      	cbz	r3, 3d6a8 <usbd_work_handler+0x1c8>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   3d6a2:	7a40      	ldrb	r0, [r0, #9]
   3d6a4:	f003 fa58 	bl	40b58 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
   3d6a8:	3501      	adds	r5, #1
   3d6aa:	2d08      	cmp	r5, #8
   3d6ac:	d1f4      	bne.n	3d698 <usbd_work_handler+0x1b8>
		if (ep_ctx->cfg.en) {
   3d6ae:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   3d6b2:	b11b      	cbz	r3, 3d6bc <usbd_work_handler+0x1dc>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   3d6b4:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
   3d6b8:	f003 fa4e 	bl	40b58 <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
   3d6bc:	2001      	movs	r0, #1
   3d6be:	f002 fdd3 	bl	40268 <nrfx_usbd_start>
		ctx->ready = true;
   3d6c2:	2301      	movs	r3, #1
   3d6c4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
   3d6c8:	6823      	ldr	r3, [r4, #0]
   3d6ca:	2b00      	cmp	r3, #0
   3d6cc:	f43f af6a 	beq.w	3d5a4 <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
   3d6d0:	2100      	movs	r1, #0
   3d6d2:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_SOF, NULL);
   3d6d4:	4798      	blx	r3
   3d6d6:	e765      	b.n	3d5a4 <usbd_work_handler+0xc4>
		ctx->ready = false;
   3d6d8:	2500      	movs	r5, #0
   3d6da:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
   3d6de:	f003 f9c9 	bl	40a74 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
   3d6e2:	f7ff fe1b 	bl	3d31c <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
   3d6e6:	6823      	ldr	r3, [r4, #0]
   3d6e8:	2b00      	cmp	r3, #0
   3d6ea:	f43f af5b 	beq.w	3d5a4 <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
   3d6ee:	4629      	mov	r1, r5
   3d6f0:	2004      	movs	r0, #4
   3d6f2:	e7ef      	b.n	3d6d4 <usbd_work_handler+0x1f4>
		if (dev_ready()) {
   3d6f4:	2b00      	cmp	r3, #0
   3d6f6:	f43f af55 	beq.w	3d5a4 <usbd_work_handler+0xc4>
			nrfx_usbd_suspend();
   3d6fa:	f003 f9d3 	bl	40aa4 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
   3d6fe:	6823      	ldr	r3, [r4, #0]
   3d700:	2b00      	cmp	r3, #0
   3d702:	f43f af4f 	beq.w	3d5a4 <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
   3d706:	2100      	movs	r1, #0
   3d708:	2005      	movs	r0, #5
   3d70a:	e7e3      	b.n	3d6d4 <usbd_work_handler+0x1f4>
		if (ctx->status_cb && dev_ready()) {
   3d70c:	6822      	ldr	r2, [r4, #0]
   3d70e:	2a00      	cmp	r2, #0
   3d710:	f43f af48 	beq.w	3d5a4 <usbd_work_handler+0xc4>
   3d714:	2b00      	cmp	r3, #0
   3d716:	f43f af45 	beq.w	3d5a4 <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_RESUME, NULL);
   3d71a:	2100      	movs	r1, #0
   3d71c:	2006      	movs	r0, #6
   3d71e:	4790      	blx	r2
   3d720:	e740      	b.n	3d5a4 <usbd_work_handler+0xc4>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   3d722:	f107 0510 	add.w	r5, r7, #16
   3d726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3d72a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3d72e:	4628      	mov	r0, r5
   3d730:	f00a f950 	bl	479d4 <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
   3d734:	f7ff fea0 	bl	3d478 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
   3d738:	4628      	mov	r0, r5
   3d73a:	f00a f94d 	bl	479d8 <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
   3d73e:	f857 3c28 	ldr.w	r3, [r7, #-40]
   3d742:	2b00      	cmp	r3, #0
   3d744:	f43f af2e 	beq.w	3d5a4 <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_RESET, NULL);
   3d748:	2100      	movs	r1, #0
   3d74a:	2001      	movs	r0, #1
   3d74c:	e7c2      	b.n	3d6d4 <usbd_work_handler+0x1f4>
	if (ep_ctx->cfg.en) {
   3d74e:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   3d752:	b17b      	cbz	r3, 3d774 <usbd_work_handler+0x294>
		ep_ctx->read_pending = true;
   3d754:	2501      	movs	r5, #1
   3d756:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
   3d75a:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
   3d75e:	f7ff fd4d 	bl	3d1fc <usbd_evt_alloc>
		if (!ev) {
   3d762:	b138      	cbz	r0, 3d774 <usbd_work_handler+0x294>
		ev->evt.ep_evt.ep = ep_ctx;
   3d764:	4a0d      	ldr	r2, [pc, #52]	; (3d79c <usbd_work_handler+0x2bc>)
		ev->evt_type = USBD_EVT_EP;
   3d766:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   3d768:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
   3d76a:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
   3d76c:	f7ff fcfe 	bl	3d16c <usbd_evt_put>
		usbd_work_schedule();
   3d770:	f7ff fd02 	bl	3d178 <usbd_work_schedule>
			if (ctx->status_cb) {
   3d774:	f857 3c28 	ldr.w	r3, [r7, #-40]
   3d778:	2b00      	cmp	r3, #0
   3d77a:	f43f af13 	beq.w	3d5a4 <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_SOF, NULL);
   3d77e:	2100      	movs	r1, #0
   3d780:	200a      	movs	r0, #10
   3d782:	e7a7      	b.n	3d6d4 <usbd_work_handler+0x1f4>
   3d784:	20002d58 	.word	0x20002d58
   3d788:	20000ab8 	.word	0x20000ab8
   3d78c:	40027000 	.word	0x40027000
   3d790:	20002d5c 	.word	0x20002d5c
   3d794:	20002d90 	.word	0x20002d90
   3d798:	20002d78 	.word	0x20002d78
   3d79c:	20002fc4 	.word	0x20002fc4
	nrfx_power_usbevt_disable();
   3d7a0:	f00a fbae 	bl	47f00 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
   3d7a4:	f003 f966 	bl	40a74 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
   3d7a8:	f002 fcae 	bl	40108 <nrfx_usbd_uninit>
	usbd_evt_flush();
   3d7ac:	f7ff fd18 	bl	3d1e0 <usbd_evt_flush>
	ret = eps_ctx_init();
   3d7b0:	f7ff fe62 	bl	3d478 <eps_ctx_init>
	nrfx_power_usbevt_enable();
   3d7b4:	f00a fb9d 	bl	47ef2 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
   3d7b8:	4801      	ldr	r0, [pc, #4]	; (3d7c0 <usbd_work_handler+0x2e0>)
   3d7ba:	f002 fd7d 	bl	402b8 <nrfx_usbd_init>
}
   3d7be:	e6f1      	b.n	3d5a4 <usbd_work_handler+0xc4>
   3d7c0:	0003d35d 	.word	0x0003d35d

0003d7c4 <usb_dc_attach>:
{
   3d7c4:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
   3d7c6:	4d1a      	ldr	r5, [pc, #104]	; (3d830 <usb_dc_attach+0x6c>)
   3d7c8:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
   3d7cc:	bb5c      	cbnz	r4, 3d826 <usb_dc_attach+0x62>
	return z_impl_k_mutex_init(mutex);
   3d7ce:	f105 0038 	add.w	r0, r5, #56	; 0x38
   3d7d2:	f00a fee3 	bl	4859c <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
   3d7d6:	4620      	mov	r0, r4
   3d7d8:	f000 fd1c 	bl	3e214 <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   3d7dc:	4622      	mov	r2, r4
	ctx->hfxo_mgr =
   3d7de:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   3d7e0:	2101      	movs	r1, #1
   3d7e2:	2027      	movs	r0, #39	; 0x27
   3d7e4:	f7ec fcc2 	bl	2a16c <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
   3d7e8:	4812      	ldr	r0, [pc, #72]	; (3d834 <usb_dc_attach+0x70>)
   3d7ea:	f002 fd65 	bl	402b8 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
   3d7ee:	4b12      	ldr	r3, [pc, #72]	; (3d838 <usb_dc_attach+0x74>)
   3d7f0:	4298      	cmp	r0, r3
   3d7f2:	d11a      	bne.n	3d82a <usb_dc_attach+0x66>
	nrfx_power_usbevt_enable();
   3d7f4:	f00a fb7d 	bl	47ef2 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
   3d7f8:	f7ff fe3e 	bl	3d478 <eps_ctx_init>
	if (ret == 0) {
   3d7fc:	4604      	mov	r4, r0
   3d7fe:	b910      	cbnz	r0, 3d806 <usb_dc_attach+0x42>
		ctx->attached = true;
   3d800:	2301      	movs	r3, #1
   3d802:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   3d806:	4b0d      	ldr	r3, [pc, #52]	; (3d83c <usb_dc_attach+0x78>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
   3d808:	681b      	ldr	r3, [r3, #0]
   3d80a:	b10b      	cbz	r3, 3d810 <usb_dc_attach+0x4c>
		usbd_work_schedule();
   3d80c:	f7ff fcb4 	bl	3d178 <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
   3d810:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3d814:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
   3d818:	07db      	lsls	r3, r3, #31
   3d81a:	d502      	bpl.n	3d822 <usb_dc_attach+0x5e>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
   3d81c:	2000      	movs	r0, #0
   3d81e:	f7ff fd63 	bl	3d2e8 <usb_dc_power_event_handler>
}
   3d822:	4620      	mov	r0, r4
   3d824:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   3d826:	2400      	movs	r4, #0
   3d828:	e7fb      	b.n	3d822 <usb_dc_attach+0x5e>
		return -EIO;
   3d82a:	f06f 0404 	mvn.w	r4, #4
   3d82e:	e7f8      	b.n	3d822 <usb_dc_attach+0x5e>
   3d830:	20002d58 	.word	0x20002d58
   3d834:	0003d35d 	.word	0x0003d35d
   3d838:	0bad0000 	.word	0x0bad0000
   3d83c:	20000c04 	.word	0x20000c04

0003d840 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
   3d840:	4b07      	ldr	r3, [pc, #28]	; (3d860 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
   3d842:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   3d846:	b13a      	cbz	r2, 3d858 <usb_dc_set_address+0x18>
   3d848:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		return -ENODEV;
   3d84c:	2b00      	cmp	r3, #0
   3d84e:	bf14      	ite	ne
   3d850:	2000      	movne	r0, #0
   3d852:	f06f 0012 	mvneq.w	r0, #18
   3d856:	4770      	bx	lr
   3d858:	f06f 0012 	mvn.w	r0, #18
}
   3d85c:	4770      	bx	lr
   3d85e:	bf00      	nop
   3d860:	20002d58 	.word	0x20002d58

0003d864 <usb_dc_ep_configure>:
{
   3d864:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   3d866:	4b0f      	ldr	r3, [pc, #60]	; (3d8a4 <usb_dc_ep_configure+0x40>)
	if (!dev_attached()) {
   3d868:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
   3d86c:	4604      	mov	r4, r0
	if (!dev_attached()) {
   3d86e:	b1b3      	cbz	r3, 3d89e <usb_dc_ep_configure+0x3a>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
   3d870:	7805      	ldrb	r5, [r0, #0]
   3d872:	4628      	mov	r0, r5
   3d874:	f7ff fc4a 	bl	3d10c <endpoint_ctx>
	if (!ep_ctx) {
   3d878:	b910      	cbnz	r0, 3d880 <usb_dc_ep_configure+0x1c>
		return -EINVAL;
   3d87a:	f06f 0015 	mvn.w	r0, #21
}
   3d87e:	bd38      	pop	{r3, r4, r5, pc}
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
   3d880:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
   3d882:	7923      	ldrb	r3, [r4, #4]
   3d884:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
   3d886:	8861      	ldrh	r1, [r4, #2]
   3d888:	6041      	str	r1, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
   3d88a:	072b      	lsls	r3, r5, #28
   3d88c:	d402      	bmi.n	3d894 <usb_dc_ep_configure+0x30>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
   3d88e:	1e4b      	subs	r3, r1, #1
   3d890:	420b      	tst	r3, r1
   3d892:	d1f2      	bne.n	3d87a <usb_dc_ep_configure+0x16>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
   3d894:	4628      	mov	r0, r5
   3d896:	f00a fbb6 	bl	48006 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
   3d89a:	2000      	movs	r0, #0
   3d89c:	e7ef      	b.n	3d87e <usb_dc_ep_configure+0x1a>
		return -ENODEV;
   3d89e:	f06f 0012 	mvn.w	r0, #18
   3d8a2:	e7ec      	b.n	3d87e <usb_dc_ep_configure+0x1a>
   3d8a4:	20002d58 	.word	0x20002d58

0003d8a8 <usb_dc_ep_set_stall>:
{
   3d8a8:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   3d8aa:	4b12      	ldr	r3, [pc, #72]	; (3d8f4 <usb_dc_ep_set_stall+0x4c>)
	if (!dev_attached() || !dev_ready()) {
   3d8ac:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   3d8b0:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
   3d8b2:	b1ca      	cbz	r2, 3d8e8 <usb_dc_ep_set_stall+0x40>
   3d8b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   3d8b8:	b1b3      	cbz	r3, 3d8e8 <usb_dc_ep_set_stall+0x40>
	ep_ctx = endpoint_ctx(ep);
   3d8ba:	f7ff fc27 	bl	3d10c <endpoint_ctx>
	if (!ep_ctx) {
   3d8be:	4604      	mov	r4, r0
   3d8c0:	b1a8      	cbz	r0, 3d8ee <usb_dc_ep_set_stall+0x46>
	switch (ep_ctx->cfg.type) {
   3d8c2:	7a83      	ldrb	r3, [r0, #10]
   3d8c4:	2b01      	cmp	r3, #1
   3d8c6:	d012      	beq.n	3d8ee <usb_dc_ep_set_stall+0x46>
   3d8c8:	d907      	bls.n	3d8da <usb_dc_ep_set_stall+0x32>
   3d8ca:	3b02      	subs	r3, #2
   3d8cc:	2b01      	cmp	r3, #1
   3d8ce:	d907      	bls.n	3d8e0 <usb_dc_ep_set_stall+0x38>
	ep_ctx->buf.curr = ep_ctx->buf.data;
   3d8d0:	6963      	ldr	r3, [r4, #20]
   3d8d2:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
   3d8d4:	2000      	movs	r0, #0
   3d8d6:	60e0      	str	r0, [r4, #12]
}
   3d8d8:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_usbd_setup_stall();
   3d8da:	f002 ff61 	bl	407a0 <nrfx_usbd_setup_stall>
		break;
   3d8de:	e7f7      	b.n	3d8d0 <usb_dc_ep_set_stall+0x28>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
   3d8e0:	4628      	mov	r0, r5
   3d8e2:	f002 fed1 	bl	40688 <nrfx_usbd_ep_stall>
		break;
   3d8e6:	e7f3      	b.n	3d8d0 <usb_dc_ep_set_stall+0x28>
		return -ENODEV;
   3d8e8:	f06f 0012 	mvn.w	r0, #18
   3d8ec:	e7f4      	b.n	3d8d8 <usb_dc_ep_set_stall+0x30>
	switch (ep_ctx->cfg.type) {
   3d8ee:	f06f 0015 	mvn.w	r0, #21
   3d8f2:	e7f1      	b.n	3d8d8 <usb_dc_ep_set_stall+0x30>
   3d8f4:	20002d58 	.word	0x20002d58

0003d8f8 <usb_dc_ep_clear_stall>:
{
   3d8f8:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   3d8fa:	4b0e      	ldr	r3, [pc, #56]	; (3d934 <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
   3d8fc:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   3d900:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
   3d902:	b182      	cbz	r2, 3d926 <usb_dc_ep_clear_stall+0x2e>
   3d904:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   3d908:	b16b      	cbz	r3, 3d926 <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
   3d90a:	f7ff fbff 	bl	3d10c <endpoint_ctx>
	if (!ep_ctx) {
   3d90e:	b168      	cbz	r0, 3d92c <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
   3d910:	f015 0408 	ands.w	r4, r5, #8
   3d914:	d10a      	bne.n	3d92c <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   3d916:	4628      	mov	r0, r5
   3d918:	f002 fed8 	bl	406cc <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   3d91c:	4628      	mov	r0, r5
   3d91e:	f003 f96f 	bl	40c00 <nrfx_usbd_ep_stall_clear>
	return 0;
   3d922:	4620      	mov	r0, r4
}
   3d924:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   3d926:	f06f 0012 	mvn.w	r0, #18
   3d92a:	e7fb      	b.n	3d924 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
   3d92c:	f06f 0015 	mvn.w	r0, #21
   3d930:	e7f8      	b.n	3d924 <usb_dc_ep_clear_stall+0x2c>
   3d932:	bf00      	nop
   3d934:	20002d58 	.word	0x20002d58

0003d938 <usb_dc_ep_is_stalled>:
{
   3d938:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   3d93a:	4b0c      	ldr	r3, [pc, #48]	; (3d96c <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
   3d93c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   3d940:	4605      	mov	r5, r0
   3d942:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
   3d944:	b162      	cbz	r2, 3d960 <usb_dc_ep_is_stalled+0x28>
   3d946:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   3d94a:	b14b      	cbz	r3, 3d960 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
   3d94c:	f7ff fbde 	bl	3d10c <endpoint_ctx>
	if (!ep_ctx) {
   3d950:	b148      	cbz	r0, 3d966 <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
   3d952:	b144      	cbz	r4, 3d966 <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
   3d954:	4628      	mov	r0, r5
   3d956:	f002 fe9f 	bl	40698 <nrfx_usbd_ep_stall_check>
   3d95a:	7020      	strb	r0, [r4, #0]
	return 0;
   3d95c:	2000      	movs	r0, #0
}
   3d95e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   3d960:	f06f 0012 	mvn.w	r0, #18
   3d964:	e7fb      	b.n	3d95e <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
   3d966:	f06f 0015 	mvn.w	r0, #21
   3d96a:	e7f8      	b.n	3d95e <usb_dc_ep_is_stalled+0x26>
   3d96c:	20002d58 	.word	0x20002d58

0003d970 <usb_dc_ep_enable>:
{
   3d970:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
   3d972:	4e13      	ldr	r6, [pc, #76]	; (3d9c0 <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
   3d974:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
{
   3d978:	4604      	mov	r4, r0
	if (!dev_attached()) {
   3d97a:	b1c3      	cbz	r3, 3d9ae <usb_dc_ep_enable+0x3e>
	ep_ctx = endpoint_ctx(ep);
   3d97c:	f7ff fbc6 	bl	3d10c <endpoint_ctx>
	if (!ep_ctx) {
   3d980:	4605      	mov	r5, r0
   3d982:	b1b8      	cbz	r0, 3d9b4 <usb_dc_ep_enable+0x44>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
   3d984:	0723      	lsls	r3, r4, #28
   3d986:	d405      	bmi.n	3d994 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   3d988:	4620      	mov	r0, r4
   3d98a:	f002 fe9f 	bl	406cc <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   3d98e:	4620      	mov	r0, r4
   3d990:	f003 f936 	bl	40c00 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
   3d994:	7a2b      	ldrb	r3, [r5, #8]
   3d996:	b983      	cbnz	r3, 3d9ba <usb_dc_ep_enable+0x4a>
	ep_ctx->cfg.en = true;
   3d998:	2301      	movs	r3, #1
   3d99a:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
   3d99c:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
   3d9a0:	b90b      	cbnz	r3, 3d9a6 <usb_dc_ep_enable+0x36>
	return 0;
   3d9a2:	2000      	movs	r0, #0
}
   3d9a4:	bd70      	pop	{r4, r5, r6, pc}
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
   3d9a6:	4620      	mov	r0, r4
   3d9a8:	f003 f8d6 	bl	40b58 <nrfx_usbd_ep_enable>
   3d9ac:	e7f9      	b.n	3d9a2 <usb_dc_ep_enable+0x32>
		return -ENODEV;
   3d9ae:	f06f 0012 	mvn.w	r0, #18
   3d9b2:	e7f7      	b.n	3d9a4 <usb_dc_ep_enable+0x34>
		return -EINVAL;
   3d9b4:	f06f 0015 	mvn.w	r0, #21
   3d9b8:	e7f4      	b.n	3d9a4 <usb_dc_ep_enable+0x34>
		return -EALREADY;
   3d9ba:	f06f 0077 	mvn.w	r0, #119	; 0x77
   3d9be:	e7f1      	b.n	3d9a4 <usb_dc_ep_enable+0x34>
   3d9c0:	20002d58 	.word	0x20002d58

0003d9c4 <usb_dc_ep_disable>:
{
   3d9c4:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   3d9c6:	4b11      	ldr	r3, [pc, #68]	; (3da0c <usb_dc_ep_disable+0x48>)
	if (!dev_attached() || !dev_ready()) {
   3d9c8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   3d9cc:	4604      	mov	r4, r0
	if (!dev_attached() || !dev_ready()) {
   3d9ce:	b19a      	cbz	r2, 3d9f8 <usb_dc_ep_disable+0x34>
   3d9d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   3d9d4:	b183      	cbz	r3, 3d9f8 <usb_dc_ep_disable+0x34>
	ep_ctx = endpoint_ctx(ep);
   3d9d6:	f7ff fb99 	bl	3d10c <endpoint_ctx>
	if (!ep_ctx) {
   3d9da:	4605      	mov	r5, r0
   3d9dc:	b178      	cbz	r0, 3d9fe <usb_dc_ep_disable+0x3a>
	if (!ep_ctx->cfg.en) {
   3d9de:	7a03      	ldrb	r3, [r0, #8]
   3d9e0:	b183      	cbz	r3, 3da04 <usb_dc_ep_disable+0x40>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   3d9e2:	4620      	mov	r0, r4
	ep_ctx->write_in_progress = false;
   3d9e4:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   3d9e6:	f003 f88b 	bl	40b00 <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
   3d9ea:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
   3d9ec:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
   3d9ee:	f009 ffde 	bl	479ae <ep_ctx_reset>
	ep_ctx->cfg.en = false;
   3d9f2:	722c      	strb	r4, [r5, #8]
	return 0;
   3d9f4:	4620      	mov	r0, r4
}
   3d9f6:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   3d9f8:	f06f 0012 	mvn.w	r0, #18
   3d9fc:	e7fb      	b.n	3d9f6 <usb_dc_ep_disable+0x32>
		return -EINVAL;
   3d9fe:	f06f 0015 	mvn.w	r0, #21
   3da02:	e7f8      	b.n	3d9f6 <usb_dc_ep_disable+0x32>
		return -EALREADY;
   3da04:	f06f 0077 	mvn.w	r0, #119	; 0x77
   3da08:	e7f5      	b.n	3d9f6 <usb_dc_ep_disable+0x32>
   3da0a:	bf00      	nop
   3da0c:	20002d58 	.word	0x20002d58

0003da10 <usb_dc_ep_write>:
{
   3da10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->attached;
   3da14:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 3dafc <usb_dc_ep_write+0xec>
{
   3da18:	461e      	mov	r6, r3
	if (!dev_attached() || !dev_ready()) {
   3da1a:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
{
   3da1e:	b085      	sub	sp, #20
   3da20:	4607      	mov	r7, r0
   3da22:	4689      	mov	r9, r1
   3da24:	4615      	mov	r5, r2
	if (!dev_attached() || !dev_ready()) {
   3da26:	2b00      	cmp	r3, #0
   3da28:	d061      	beq.n	3daee <usb_dc_ep_write+0xde>
   3da2a:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
   3da2e:	2b00      	cmp	r3, #0
   3da30:	d05d      	beq.n	3daee <usb_dc_ep_write+0xde>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
   3da32:	0603      	lsls	r3, r0, #24
   3da34:	d55e      	bpl.n	3daf4 <usb_dc_ep_write+0xe4>
	ep_ctx = endpoint_ctx(ep);
   3da36:	f7ff fb69 	bl	3d10c <endpoint_ctx>
	if (!ep_ctx) {
   3da3a:	4604      	mov	r4, r0
   3da3c:	2800      	cmp	r0, #0
   3da3e:	d059      	beq.n	3daf4 <usb_dc_ep_write+0xe4>
	if (!ep_ctx->cfg.en) {
   3da40:	7a03      	ldrb	r3, [r0, #8]
   3da42:	2b00      	cmp	r3, #0
   3da44:	d056      	beq.n	3daf4 <usb_dc_ep_write+0xe4>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   3da46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3da4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3da4e:	f108 0038 	add.w	r0, r8, #56	; 0x38
   3da52:	f009 ffbf 	bl	479d4 <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
   3da56:	7fa3      	ldrb	r3, [r4, #30]
   3da58:	b14b      	cbz	r3, 3da6e <usb_dc_ep_write+0x5e>
		k_mutex_unlock(&ctx->drv_lock);
   3da5a:	f108 0038 	add.w	r0, r8, #56	; 0x38
   3da5e:	f009 ffbb 	bl	479d8 <k_mutex_unlock.isra.0>
		return -EAGAIN;
   3da62:	f06f 040a 	mvn.w	r4, #10
}
   3da66:	4620      	mov	r0, r4
   3da68:	b005      	add	sp, #20
   3da6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   3da6e:	7aa3      	ldrb	r3, [r4, #10]
	if (!data_len && ep_ctx->trans_zlp) {
   3da70:	b1c5      	cbz	r5, 3daa4 <usb_dc_ep_write+0x94>
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   3da72:	b33b      	cbz	r3, 3dac4 <usb_dc_ep_write+0xb4>
	ep_ctx->write_in_progress = true;
   3da74:	2301      	movs	r3, #1
   3da76:	77a3      	strb	r3, [r4, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   3da78:	f04f 0800 	mov.w	r8, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   3da7c:	a901      	add	r1, sp, #4
   3da7e:	4638      	mov	r0, r7
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   3da80:	e9cd 9501 	strd	r9, r5, [sp, #4]
   3da84:	f8cd 800c 	str.w	r8, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   3da88:	f002 fc58 	bl	4033c <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
   3da8c:	4b1c      	ldr	r3, [pc, #112]	; (3db00 <usb_dc_ep_write+0xf0>)
   3da8e:	4298      	cmp	r0, r3
   3da90:	d029      	beq.n	3dae6 <usb_dc_ep_write+0xd6>
		ep_ctx->write_in_progress = false;
   3da92:	f884 801e 	strb.w	r8, [r4, #30]
		if (ret_bytes) {
   3da96:	bb1e      	cbnz	r6, 3dae0 <usb_dc_ep_write+0xd0>
		result = -EIO;
   3da98:	f06f 0404 	mvn.w	r4, #4
	k_mutex_unlock(&ctx->drv_lock);
   3da9c:	4819      	ldr	r0, [pc, #100]	; (3db04 <usb_dc_ep_write+0xf4>)
   3da9e:	f009 ff9b 	bl	479d8 <k_mutex_unlock.isra.0>
	return result;
   3daa2:	e7e0      	b.n	3da66 <usb_dc_ep_write+0x56>
	if (!data_len && ep_ctx->trans_zlp) {
   3daa4:	7fe2      	ldrb	r2, [r4, #31]
   3daa6:	b102      	cbz	r2, 3daaa <usb_dc_ep_write+0x9a>
		ep_ctx->trans_zlp = false;
   3daa8:	77e5      	strb	r5, [r4, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   3daaa:	2b00      	cmp	r3, #0
   3daac:	d1e2      	bne.n	3da74 <usb_dc_ep_write+0x64>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
   3daae:	f002 fe7f 	bl	407b0 <nrfx_usbd_last_setup_dir_get>
   3dab2:	42b8      	cmp	r0, r7
   3dab4:	d0de      	beq.n	3da74 <usb_dc_ep_write+0x64>
		nrfx_usbd_setup_clear();
   3dab6:	f002 fe6b 	bl	40790 <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
   3daba:	4812      	ldr	r0, [pc, #72]	; (3db04 <usb_dc_ep_write+0xf4>)
   3dabc:	f009 ff8c 	bl	479d8 <k_mutex_unlock.isra.0>
		return 0;
   3dac0:	2400      	movs	r4, #0
   3dac2:	e7d0      	b.n	3da66 <usb_dc_ep_write+0x56>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   3dac4:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   3dac8:	42ab      	cmp	r3, r5
   3daca:	d9f0      	bls.n	3daae <usb_dc_ep_write+0x9e>
		    !(data_len % ep_ctx->cfg.max_sz)) {
   3dacc:	6862      	ldr	r2, [r4, #4]
   3dace:	fbb5 f3f2 	udiv	r3, r5, r2
   3dad2:	fb02 5313 	mls	r3, r2, r3, r5
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   3dad6:	2b00      	cmp	r3, #0
   3dad8:	d1e9      	bne.n	3daae <usb_dc_ep_write+0x9e>
			ep_ctx->trans_zlp = true;
   3dada:	2301      	movs	r3, #1
   3dadc:	77e3      	strb	r3, [r4, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
   3dade:	e7e6      	b.n	3daae <usb_dc_ep_write+0x9e>
			*ret_bytes = 0;
   3dae0:	f8c6 8000 	str.w	r8, [r6]
   3dae4:	e7d8      	b.n	3da98 <usb_dc_ep_write+0x88>
		if (ret_bytes) {
   3dae6:	b106      	cbz	r6, 3daea <usb_dc_ep_write+0xda>
			*ret_bytes = data_len;
   3dae8:	6035      	str	r5, [r6, #0]
	int result = 0;
   3daea:	2400      	movs	r4, #0
   3daec:	e7d6      	b.n	3da9c <usb_dc_ep_write+0x8c>
		return -ENODEV;
   3daee:	f06f 0412 	mvn.w	r4, #18
   3daf2:	e7b8      	b.n	3da66 <usb_dc_ep_write+0x56>
		return -EINVAL;
   3daf4:	f06f 0415 	mvn.w	r4, #21
   3daf8:	e7b5      	b.n	3da66 <usb_dc_ep_write+0x56>
   3dafa:	bf00      	nop
   3dafc:	20002d58 	.word	0x20002d58
   3db00:	0bad0000 	.word	0x0bad0000
   3db04:	20002d90 	.word	0x20002d90

0003db08 <usb_dc_ep_read_wait>:
{
   3db08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3db0c:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
   3db0e:	4b20      	ldr	r3, [pc, #128]	; (3db90 <usb_dc_ep_read_wait+0x88>)
{
   3db10:	4617      	mov	r7, r2
	if (!dev_attached() || !dev_ready()) {
   3db12:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   3db16:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
   3db18:	2a00      	cmp	r2, #0
   3db1a:	d033      	beq.n	3db84 <usb_dc_ep_read_wait+0x7c>
   3db1c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   3db20:	b383      	cbz	r3, 3db84 <usb_dc_ep_read_wait+0x7c>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   3db22:	0603      	lsls	r3, r0, #24
   3db24:	d431      	bmi.n	3db8a <usb_dc_ep_read_wait+0x82>
	if (!data && max_data_len) {
   3db26:	b901      	cbnz	r1, 3db2a <usb_dc_ep_read_wait+0x22>
   3db28:	bb7f      	cbnz	r7, 3db8a <usb_dc_ep_read_wait+0x82>
	ep_ctx = endpoint_ctx(ep);
   3db2a:	f7ff faef 	bl	3d10c <endpoint_ctx>
	if (!ep_ctx) {
   3db2e:	4604      	mov	r4, r0
   3db30:	b358      	cbz	r0, 3db8a <usb_dc_ep_read_wait+0x82>
	if (!ep_ctx->cfg.en) {
   3db32:	7a03      	ldrb	r3, [r0, #8]
   3db34:	b34b      	cbz	r3, 3db8a <usb_dc_ep_read_wait+0x82>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   3db36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3db3a:	4816      	ldr	r0, [pc, #88]	; (3db94 <usb_dc_ep_read_wait+0x8c>)
   3db3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3db40:	f009 ff48 	bl	479d4 <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
   3db44:	68e3      	ldr	r3, [r4, #12]
   3db46:	429f      	cmp	r7, r3
   3db48:	46b8      	mov	r8, r7
   3db4a:	bf28      	it	cs
   3db4c:	4698      	movcs	r8, r3
	if (!data && !max_data_len) {
   3db4e:	b946      	cbnz	r6, 3db62 <usb_dc_ep_read_wait+0x5a>
   3db50:	b93f      	cbnz	r7, 3db62 <usb_dc_ep_read_wait+0x5a>
		if (read_bytes) {
   3db52:	b105      	cbz	r5, 3db56 <usb_dc_ep_read_wait+0x4e>
			*read_bytes = ep_ctx->buf.len;
   3db54:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
   3db56:	480f      	ldr	r0, [pc, #60]	; (3db94 <usb_dc_ep_read_wait+0x8c>)
   3db58:	f009 ff3e 	bl	479d8 <k_mutex_unlock.isra.0>
		return 0;
   3db5c:	2000      	movs	r0, #0
}
   3db5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
   3db62:	69a1      	ldr	r1, [r4, #24]
   3db64:	4642      	mov	r2, r8
   3db66:	4630      	mov	r0, r6
   3db68:	f006 ffab 	bl	44ac2 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
   3db6c:	69a3      	ldr	r3, [r4, #24]
   3db6e:	4443      	add	r3, r8
   3db70:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
   3db72:	68e3      	ldr	r3, [r4, #12]
   3db74:	eba3 0308 	sub.w	r3, r3, r8
   3db78:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
   3db7a:	2d00      	cmp	r5, #0
   3db7c:	d0eb      	beq.n	3db56 <usb_dc_ep_read_wait+0x4e>
		*read_bytes = bytes_to_copy;
   3db7e:	f8c5 8000 	str.w	r8, [r5]
   3db82:	e7e8      	b.n	3db56 <usb_dc_ep_read_wait+0x4e>
		return -ENODEV;
   3db84:	f06f 0012 	mvn.w	r0, #18
   3db88:	e7e9      	b.n	3db5e <usb_dc_ep_read_wait+0x56>
		return -EINVAL;
   3db8a:	f06f 0015 	mvn.w	r0, #21
   3db8e:	e7e6      	b.n	3db5e <usb_dc_ep_read_wait+0x56>
   3db90:	20002d58 	.word	0x20002d58
   3db94:	20002d90 	.word	0x20002d90

0003db98 <usb_dc_ep_read_continue>:
{
   3db98:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
   3db9a:	4d1e      	ldr	r5, [pc, #120]	; (3dc14 <usb_dc_ep_read_continue+0x7c>)
	if (!dev_attached() || !dev_ready()) {
   3db9c:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
{
   3dba0:	4603      	mov	r3, r0
	if (!dev_attached() || !dev_ready()) {
   3dba2:	b382      	cbz	r2, 3dc06 <usb_dc_ep_read_continue+0x6e>
   3dba4:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
   3dba8:	b36a      	cbz	r2, 3dc06 <usb_dc_ep_read_continue+0x6e>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   3dbaa:	061b      	lsls	r3, r3, #24
   3dbac:	d42e      	bmi.n	3dc0c <usb_dc_ep_read_continue+0x74>
	ep_ctx = endpoint_ctx(ep);
   3dbae:	f7ff faad 	bl	3d10c <endpoint_ctx>
	if (!ep_ctx) {
   3dbb2:	4604      	mov	r4, r0
   3dbb4:	b350      	cbz	r0, 3dc0c <usb_dc_ep_read_continue+0x74>
	if (!ep_ctx->cfg.en) {
   3dbb6:	7a03      	ldrb	r3, [r0, #8]
   3dbb8:	b343      	cbz	r3, 3dc0c <usb_dc_ep_read_continue+0x74>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   3dbba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3dbbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3dbc2:	f105 0038 	add.w	r0, r5, #56	; 0x38
   3dbc6:	f009 ff05 	bl	479d4 <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
   3dbca:	68e3      	ldr	r3, [r4, #12]
   3dbcc:	b9b3      	cbnz	r3, 3dbfc <usb_dc_ep_read_continue+0x64>
		ep_ctx->read_complete = true;
   3dbce:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
   3dbd0:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
   3dbd2:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
   3dbd4:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
   3dbd6:	7f63      	ldrb	r3, [r4, #29]
   3dbd8:	b183      	cbz	r3, 3dbfc <usb_dc_ep_read_continue+0x64>
			struct usbd_event *ev = usbd_evt_alloc();
   3dbda:	f7ff fb0f 	bl	3d1fc <usbd_evt_alloc>
			if (!ev) {
   3dbde:	b930      	cbnz	r0, 3dbee <usb_dc_ep_read_continue+0x56>
				k_mutex_unlock(&ctx->drv_lock);
   3dbe0:	f105 0038 	add.w	r0, r5, #56	; 0x38
   3dbe4:	f009 fef8 	bl	479d8 <k_mutex_unlock.isra.0>
				return -ENOMEM;
   3dbe8:	f06f 000b 	mvn.w	r0, #11
}
   3dbec:	bd70      	pop	{r4, r5, r6, pc}
			ev->evt_type = USBD_EVT_EP;
   3dbee:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
   3dbf0:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   3dbf2:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
   3dbf4:	f7ff faba 	bl	3d16c <usbd_evt_put>
			usbd_work_schedule();
   3dbf8:	f7ff fabe 	bl	3d178 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
   3dbfc:	4806      	ldr	r0, [pc, #24]	; (3dc18 <usb_dc_ep_read_continue+0x80>)
   3dbfe:	f009 feeb 	bl	479d8 <k_mutex_unlock.isra.0>
	return 0;
   3dc02:	2000      	movs	r0, #0
   3dc04:	e7f2      	b.n	3dbec <usb_dc_ep_read_continue+0x54>
		return -ENODEV;
   3dc06:	f06f 0012 	mvn.w	r0, #18
   3dc0a:	e7ef      	b.n	3dbec <usb_dc_ep_read_continue+0x54>
		return -EINVAL;
   3dc0c:	f06f 0015 	mvn.w	r0, #21
   3dc10:	e7ec      	b.n	3dbec <usb_dc_ep_read_continue+0x54>
   3dc12:	bf00      	nop
   3dc14:	20002d58 	.word	0x20002d58
   3dc18:	20002d90 	.word	0x20002d90

0003dc1c <usb_dc_ep_set_callback>:
	return get_usbd_ctx()->attached;
   3dc1c:	4b08      	ldr	r3, [pc, #32]	; (3dc40 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
   3dc1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
   3dc22:	b510      	push	{r4, lr}
   3dc24:	460c      	mov	r4, r1
	if (!dev_attached()) {
   3dc26:	b12b      	cbz	r3, 3dc34 <usb_dc_ep_set_callback+0x18>
	ep_ctx = endpoint_ctx(ep);
   3dc28:	f7ff fa70 	bl	3d10c <endpoint_ctx>
	if (!ep_ctx) {
   3dc2c:	b128      	cbz	r0, 3dc3a <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
   3dc2e:	6004      	str	r4, [r0, #0]
	return 0;
   3dc30:	2000      	movs	r0, #0
}
   3dc32:	bd10      	pop	{r4, pc}
		return -ENODEV;
   3dc34:	f06f 0012 	mvn.w	r0, #18
   3dc38:	e7fb      	b.n	3dc32 <usb_dc_ep_set_callback+0x16>
		return -EINVAL;
   3dc3a:	f06f 0015 	mvn.w	r0, #21
   3dc3e:	e7f8      	b.n	3dc32 <usb_dc_ep_set_callback+0x16>
   3dc40:	20002d58 	.word	0x20002d58

0003dc44 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
   3dc44:	4b01      	ldr	r3, [pc, #4]	; (3dc4c <usb_dc_set_status_callback+0x8>)
   3dc46:	6018      	str	r0, [r3, #0]
}
   3dc48:	4770      	bx	lr
   3dc4a:	bf00      	nop
   3dc4c:	20002d58 	.word	0x20002d58

0003dc50 <usb_dc_ep_mps>:
{
   3dc50:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   3dc52:	4b07      	ldr	r3, [pc, #28]	; (3dc70 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
   3dc54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   3dc58:	b123      	cbz	r3, 3dc64 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
   3dc5a:	f7ff fa57 	bl	3d10c <endpoint_ctx>
	if (!ep_ctx) {
   3dc5e:	b120      	cbz	r0, 3dc6a <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
   3dc60:	6840      	ldr	r0, [r0, #4]
}
   3dc62:	bd08      	pop	{r3, pc}
		return -ENODEV;
   3dc64:	f06f 0012 	mvn.w	r0, #18
   3dc68:	e7fb      	b.n	3dc62 <usb_dc_ep_mps+0x12>
		return -EINVAL;
   3dc6a:	f06f 0015 	mvn.w	r0, #21
   3dc6e:	e7f8      	b.n	3dc62 <usb_dc_ep_mps+0x12>
   3dc70:	20002d58 	.word	0x20002d58

0003dc74 <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
   3dc74:	2811      	cmp	r0, #17
   3dc76:	d80e      	bhi.n	3dc96 <adc_gain_invert+0x22>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
   3dc78:	4a08      	ldr	r2, [pc, #32]	; (3dc9c <adc_gain_invert+0x28>)
   3dc7a:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
   3dc7e:	b153      	cbz	r3, 3dc96 <adc_gain_invert+0x22>
   3dc80:	eb02 0240 	add.w	r2, r2, r0, lsl #1
   3dc84:	7852      	ldrb	r2, [r2, #1]
   3dc86:	b132      	cbz	r2, 3dc96 <adc_gain_invert+0x22>
			*value = (gdp->mul * *value) / gdp->div;
   3dc88:	6808      	ldr	r0, [r1, #0]
   3dc8a:	4343      	muls	r3, r0
			rv = 0;
   3dc8c:	2000      	movs	r0, #0
			*value = (gdp->mul * *value) / gdp->div;
   3dc8e:	fb93 f3f2 	sdiv	r3, r3, r2
   3dc92:	600b      	str	r3, [r1, #0]
			rv = 0;
   3dc94:	4770      	bx	lr
	int rv = -EINVAL;
   3dc96:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
   3dc9a:	4770      	bx	lr
   3dc9c:	0004b125 	.word	0x0004b125

0003dca0 <adc_nrfx_channel_setup>:
	nrf_saadc_channel_config_t config = {
		.resistor_p = NRF_SAADC_RESISTOR_DISABLED,
		.resistor_n = NRF_SAADC_RESISTOR_DISABLED,
		.burst      = NRF_SAADC_BURST_DISABLED,
	};
	uint8_t channel_id = channel_cfg->channel_id;
   3dca0:	7908      	ldrb	r0, [r1, #4]
{
   3dca2:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   3dca4:	f000 041f 	and.w	r4, r0, #31

	if (channel_id >= SAADC_CH_NUM) {
   3dca8:	2c07      	cmp	r4, #7
   3dcaa:	d81f      	bhi.n	3dcec <adc_nrfx_channel_setup+0x4c>
		return -EINVAL;
	}

	switch (channel_cfg->gain) {
   3dcac:	780b      	ldrb	r3, [r1, #0]
   3dcae:	2b09      	cmp	r3, #9
   3dcb0:	d81c      	bhi.n	3dcec <adc_nrfx_channel_setup+0x4c>
   3dcb2:	e8df f003 	tbb	[pc, r3]
   3dcb6:	0606      	.short	0x0606
   3dcb8:	1b060606 	.word	0x1b060606
   3dcbc:	201b1e05 	.word	0x201b1e05
		break;
	case ADC_GAIN_1_2:
		config.gain = NRF_SAADC_GAIN1_2;
		break;
	case ADC_GAIN_1:
		config.gain = NRF_SAADC_GAIN1;
   3dcc0:	2305      	movs	r3, #5
	default:
		LOG_ERR("Selected ADC gain is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->reference) {
   3dcc2:	784a      	ldrb	r2, [r1, #1]
   3dcc4:	2a03      	cmp	r2, #3
   3dcc6:	d018      	beq.n	3dcfa <adc_nrfx_channel_setup+0x5a>
   3dcc8:	2a04      	cmp	r2, #4
   3dcca:	d10f      	bne.n	3dcec <adc_nrfx_channel_setup+0x4c>
	nrf_saadc_channel_config_t config = {
   3dccc:	2500      	movs	r5, #0
	default:
		LOG_ERR("Selected ADC reference is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->acquisition_time) {
   3dcce:	884a      	ldrh	r2, [r1, #2]
   3dcd0:	f244 060a 	movw	r6, #16394	; 0x400a
   3dcd4:	42b2      	cmp	r2, r6
   3dcd6:	d044      	beq.n	3dd62 <adc_nrfx_channel_setup+0xc2>
   3dcd8:	d811      	bhi.n	3dcfe <adc_nrfx_channel_setup+0x5e>
   3dcda:	f244 0603 	movw	r6, #16387	; 0x4003
   3dcde:	42b2      	cmp	r2, r6
   3dce0:	d03b      	beq.n	3dd5a <adc_nrfx_channel_setup+0xba>
   3dce2:	f244 0605 	movw	r6, #16389	; 0x4005
   3dce6:	42b2      	cmp	r2, r6
   3dce8:	d039      	beq.n	3dd5e <adc_nrfx_channel_setup+0xbe>
   3dcea:	b3d2      	cbz	r2, 3dd62 <adc_nrfx_channel_setup+0xc2>
   3dcec:	f06f 0015 	mvn.w	r0, #21
   3dcf0:	e032      	b.n	3dd58 <adc_nrfx_channel_setup+0xb8>
		config.gain = NRF_SAADC_GAIN2;
   3dcf2:	2306      	movs	r3, #6
		break;
   3dcf4:	e7e5      	b.n	3dcc2 <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
   3dcf6:	2307      	movs	r3, #7
		break;
   3dcf8:	e7e3      	b.n	3dcc2 <adc_nrfx_channel_setup+0x22>
	switch (channel_cfg->reference) {
   3dcfa:	2501      	movs	r5, #1
   3dcfc:	e7e7      	b.n	3dcce <adc_nrfx_channel_setup+0x2e>
	switch (channel_cfg->acquisition_time) {
   3dcfe:	f244 0614 	movw	r6, #16404	; 0x4014
   3dd02:	42b2      	cmp	r2, r6
   3dd04:	d02f      	beq.n	3dd66 <adc_nrfx_channel_setup+0xc6>
   3dd06:	f244 0628 	movw	r6, #16424	; 0x4028
   3dd0a:	42b2      	cmp	r2, r6
   3dd0c:	d02d      	beq.n	3dd6a <adc_nrfx_channel_setup+0xca>
   3dd0e:	f244 060f 	movw	r6, #16399	; 0x400f
   3dd12:	42b2      	cmp	r2, r6
   3dd14:	d1ea      	bne.n	3dcec <adc_nrfx_channel_setup+0x4c>
	case ADC_ACQ_TIME_DEFAULT:
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 10):
		config.acq_time = NRF_SAADC_ACQTIME_10US;
		break;
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 15):
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   3dd16:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   3dd18:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   3dd1c:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   3dd1e:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
   3dd22:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   3dd26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   3dd2a:	0122      	lsls	r2, r4, #4
   3dd2c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   3dd30:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
   3dd34:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   3dd36:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   3dd3a:	0123      	lsls	r3, r4, #4
   3dd3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3dd40:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
   3dd44:	798a      	ldrb	r2, [r1, #6]
   3dd46:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   3dd4a:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510

	/* Store the positive input selection in a dedicated array,
	 * to get it later when the channel is selected for a sampling
	 * and to mark the channel as configured (ready to be selected).
	 */
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   3dd4e:	4b08      	ldr	r3, [pc, #32]	; (3dd70 <adc_nrfx_channel_setup+0xd0>)
   3dd50:	794a      	ldrb	r2, [r1, #5]
   3dd52:	4423      	add	r3, r4
   3dd54:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

	return 0;
}
   3dd58:	bd70      	pop	{r4, r5, r6, pc}
	nrf_saadc_channel_config_t config = {
   3dd5a:	2200      	movs	r2, #0
   3dd5c:	e7dc      	b.n	3dd18 <adc_nrfx_channel_setup+0x78>
	switch (channel_cfg->acquisition_time) {
   3dd5e:	2201      	movs	r2, #1
   3dd60:	e7da      	b.n	3dd18 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   3dd62:	2202      	movs	r2, #2
   3dd64:	e7d8      	b.n	3dd18 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   3dd66:	2204      	movs	r2, #4
   3dd68:	e7d6      	b.n	3dd18 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   3dd6a:	2205      	movs	r2, #5
   3dd6c:	e7d4      	b.n	3dd18 <adc_nrfx_channel_setup+0x78>
   3dd6e:	bf00      	nop
   3dd70:	20000168 	.word	0x20000168

0003dd74 <adc_context_start_sampling.isra.0>:
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   3dd74:	4b04      	ldr	r3, [pc, #16]	; (3dd88 <adc_context_start_sampling.isra.0+0x14>)
   3dd76:	2201      	movs	r2, #1
   3dd78:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   3dd7c:	b108      	cbz	r0, 3dd82 <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3dd7e:	60da      	str	r2, [r3, #12]
}
   3dd80:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3dd82:	601a      	str	r2, [r3, #0]
   3dd84:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   3dd86:	4770      	bx	lr
   3dd88:	40007000 	.word	0x40007000

0003dd8c <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
   3dd8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3dd8e:	460d      	mov	r5, r1
	return z_impl_k_sem_take(sem, timeout);
   3dd90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3dd94:	4856      	ldr	r0, [pc, #344]	; (3def0 <adc_nrfx_read+0x164>)
   3dd96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3dd9a:	f003 fc09 	bl	415b0 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   3dd9e:	686e      	ldr	r6, [r5, #4]
	if (!selected_channels ||
   3dda0:	1e73      	subs	r3, r6, #1
   3dda2:	2bfe      	cmp	r3, #254	; 0xfe
   3dda4:	d83c      	bhi.n	3de20 <adc_nrfx_read+0x94>
   3dda6:	2300      	movs	r3, #0
    p_reg->CH[channel].PSELP = pselp;
   3dda8:	4852      	ldr	r0, [pc, #328]	; (3def4 <adc_nrfx_read+0x168>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   3ddaa:	4f53      	ldr	r7, [pc, #332]	; (3def8 <adc_nrfx_read+0x16c>)
	active_channels = 0U;
   3ddac:	461a      	mov	r2, r3
		if (selected_channels & BIT(channel_id)) {
   3ddae:	fa26 f103 	lsr.w	r1, r6, r3
   3ddb2:	f011 0101 	ands.w	r1, r1, #1
   3ddb6:	d026      	beq.n	3de06 <adc_nrfx_read+0x7a>
			if (m_data.positive_inputs[channel_id] == 0U) {
   3ddb8:	f817 c003 	ldrb.w	ip, [r7, r3]
   3ddbc:	f1bc 0f00 	cmp.w	ip, #0
   3ddc0:	d02e      	beq.n	3de20 <adc_nrfx_read+0x94>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   3ddc2:	eb00 1e03 	add.w	lr, r0, r3, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   3ddc6:	7c6c      	ldrb	r4, [r5, #17]
   3ddc8:	f8de 1518 	ldr.w	r1, [lr, #1304]	; 0x518
   3ddcc:	3c00      	subs	r4, #0
   3ddce:	bf18      	it	ne
   3ddd0:	2401      	movne	r4, #1
   3ddd2:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
   3ddd6:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
   3ddda:	f8ce 1518 	str.w	r1, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   3ddde:	f103 0151 	add.w	r1, r3, #81	; 0x51
   3dde2:	0109      	lsls	r1, r1, #4
			++active_channels;
   3dde4:	3201      	adds	r2, #1
   3dde6:	f840 c001 	str.w	ip, [r0, r1]
   3ddea:	b2d2      	uxtb	r2, r2
	} while (++channel_id < SAADC_CH_NUM);
   3ddec:	3301      	adds	r3, #1
   3ddee:	2b08      	cmp	r3, #8
   3ddf0:	d1dd      	bne.n	3ddae <adc_nrfx_read+0x22>
	switch (sequence->resolution) {
   3ddf2:	7c2b      	ldrb	r3, [r5, #16]
   3ddf4:	3b08      	subs	r3, #8
   3ddf6:	2b06      	cmp	r3, #6
   3ddf8:	d812      	bhi.n	3de20 <adc_nrfx_read+0x94>
   3ddfa:	e8df f003 	tbb	[pc, r3]
   3ddfe:	1109      	.short	0x1109
   3de00:	1119111d 	.word	0x1119111d
   3de04:	1b          	.byte	0x1b
   3de05:	00          	.byte	0x00
   3de06:	f103 0451 	add.w	r4, r3, #81	; 0x51
   3de0a:	0124      	lsls	r4, r4, #4
   3de0c:	5101      	str	r1, [r0, r4]
}
   3de0e:	e7ed      	b.n	3ddec <adc_nrfx_read+0x60>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   3de10:	2300      	movs	r3, #0
    p_reg->RESOLUTION = resolution;
   3de12:	4938      	ldr	r1, [pc, #224]	; (3def4 <adc_nrfx_read+0x168>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   3de14:	2a01      	cmp	r2, #1
   3de16:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   3de1a:	7c6b      	ldrb	r3, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   3de1c:	d90e      	bls.n	3de3c <adc_nrfx_read+0xb0>
   3de1e:	b17b      	cbz	r3, 3de40 <adc_nrfx_read+0xb4>
		return -EINVAL;
   3de20:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
   3de24:	4832      	ldr	r0, [pc, #200]	; (3def0 <adc_nrfx_read+0x164>)
   3de26:	f003 fb9d 	bl	41564 <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
   3de2a:	4620      	mov	r0, r4
   3de2c:	b003      	add	sp, #12
   3de2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   3de30:	2302      	movs	r3, #2
		break;
   3de32:	e7ee      	b.n	3de12 <adc_nrfx_read+0x86>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   3de34:	2303      	movs	r3, #3
		break;
   3de36:	e7ec      	b.n	3de12 <adc_nrfx_read+0x86>
	switch (sequence->resolution) {
   3de38:	2301      	movs	r3, #1
   3de3a:	e7ea      	b.n	3de12 <adc_nrfx_read+0x86>
	switch (sequence->oversampling) {
   3de3c:	2b08      	cmp	r3, #8
   3de3e:	d8ef      	bhi.n	3de20 <adc_nrfx_read+0x94>
    p_reg->OVERSAMPLE = oversample;
   3de40:	f8c1 35f4 	str.w	r3, [r1, #1524]	; 0x5f4
	if (sequence->options) {
   3de44:	6829      	ldr	r1, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   3de46:	0053      	lsls	r3, r2, #1
	if (sequence->options) {
   3de48:	b111      	cbz	r1, 3de50 <adc_nrfx_read+0xc4>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   3de4a:	8989      	ldrh	r1, [r1, #12]
   3de4c:	fb01 3303 	mla	r3, r1, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
   3de50:	68e9      	ldr	r1, [r5, #12]
   3de52:	4299      	cmp	r1, r3
   3de54:	d349      	bcc.n	3deea <adc_nrfx_read+0x15e>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   3de56:	4b27      	ldr	r3, [pc, #156]	; (3def4 <adc_nrfx_read+0x168>)
   3de58:	68a9      	ldr	r1, [r5, #8]
   3de5a:	f8c3 162c 	str.w	r1, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   3de5e:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
   3de60:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
   3de64:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   3de66:	4c25      	ldr	r4, [pc, #148]	; (3defc <adc_nrfx_read+0x170>)
   3de68:	f104 0674 	add.w	r6, r4, #116	; 0x74
   3de6c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   3de6e:	683b      	ldr	r3, [r7, #0]
   3de70:	6033      	str	r3, [r6, #0]
	ctx->status = 0;

	if (sequence->options) {
   3de72:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
   3de74:	2600      	movs	r6, #0
   3de76:	6726      	str	r6, [r4, #112]	; 0x70
	if (sequence->options) {
   3de78:	4627      	mov	r7, r4
   3de7a:	b38b      	cbz	r3, 3dee0 <adc_nrfx_read+0x154>
		ctx->options = *sequence->options;
   3de7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   3de7e:	f104 0588 	add.w	r5, r4, #136	; 0x88
   3de82:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   3de86:	6765      	str	r5, [r4, #116]	; 0x74
		ctx->sampling_index = 0U;
   3de88:	f8a4 6098 	strh.w	r6, [r4, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
   3de8c:	b340      	cbz	r0, 3dee0 <adc_nrfx_read+0x154>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   3de8e:	f3bf 8f5b 	dmb	ish
   3de92:	e857 3f00 	ldrex	r3, [r7]
   3de96:	e847 6200 	strex	r2, r6, [r7]
   3de9a:	2a00      	cmp	r2, #0
   3de9c:	d1f9      	bne.n	3de92 <adc_nrfx_read+0x106>
   3de9e:	f3bf 8f5b 	dmb	ish
   3dea2:	4917      	ldr	r1, [pc, #92]	; (3df00 <adc_nrfx_read+0x174>)
   3dea4:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
   3dea8:	4a16      	ldr	r2, [pc, #88]	; (3df04 <adc_nrfx_read+0x178>)
   3deaa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   3deae:	460f      	mov	r7, r1
   3deb0:	4631      	mov	r1, r6
   3deb2:	fbe5 7100 	umlal	r7, r1, r5, r0
   3deb6:	2300      	movs	r3, #0
   3deb8:	4638      	mov	r0, r7
   3deba:	f7e8 f921 	bl	26100 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   3debe:	2200      	movs	r2, #0
   3dec0:	e9cd 0100 	strd	r0, r1, [sp]
   3dec4:	2300      	movs	r3, #0
   3dec6:	f104 0008 	add.w	r0, r4, #8
   3deca:	f004 fa6d 	bl	423a8 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   3dece:	480e      	ldr	r0, [pc, #56]	; (3df08 <adc_nrfx_read+0x17c>)
   3ded0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3ded4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3ded8:	f003 fb6a 	bl	415b0 <z_impl_k_sem_take>
	return ctx->status;
   3dedc:	6f24      	ldr	r4, [r4, #112]	; 0x70
	return error;
   3dede:	e7a1      	b.n	3de24 <adc_nrfx_read+0x98>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   3dee0:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
   3dee4:	f7ff ff46 	bl	3dd74 <adc_context_start_sampling.isra.0>
   3dee8:	e7f1      	b.n	3dece <adc_nrfx_read+0x142>
		return -ENOMEM;
   3deea:	f06f 040b 	mvn.w	r4, #11
   3deee:	e799      	b.n	3de24 <adc_nrfx_read+0x98>
   3def0:	200001a8 	.word	0x200001a8
   3def4:	40007000 	.word	0x40007000
   3def8:	20000208 	.word	0x20000208
   3defc:	20000168 	.word	0x20000168
   3df00:	000f423f 	.word	0x000f423f
   3df04:	000f4240 	.word	0x000f4240
   3df08:	200001c0 	.word	0x200001c0

0003df0c <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3df0c:	4b0e      	ldr	r3, [pc, #56]	; (3df48 <init_saadc+0x3c>)
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   3df0e:	b510      	push	{r4, lr}
   3df10:	2400      	movs	r4, #0
   3df12:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   3df16:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   3df1a:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   3df1e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   3df22:	2212      	movs	r2, #18
   3df24:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   3df28:	2007      	movs	r0, #7
   3df2a:	f7ec f8ef 	bl	2a10c <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   3df2e:	4622      	mov	r2, r4
   3df30:	2101      	movs	r1, #1
   3df32:	2007      	movs	r0, #7
   3df34:	f7ec f91a 	bl	2a16c <z_arm_irq_priority_set>
	return sem->count;
   3df38:	4804      	ldr	r0, [pc, #16]	; (3df4c <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   3df3a:	6c83      	ldr	r3, [r0, #72]	; 0x48
   3df3c:	b913      	cbnz	r3, 3df44 <init_saadc+0x38>
	z_impl_k_sem_give(sem);
   3df3e:	3040      	adds	r0, #64	; 0x40
   3df40:	f003 fb10 	bl	41564 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   3df44:	2000      	movs	r0, #0
   3df46:	bd10      	pop	{r4, pc}
   3df48:	40007000 	.word	0x40007000
   3df4c:	20000168 	.word	0x20000168

0003df50 <saadc_irq_handler>:
{
   3df50:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3df52:	4b30      	ldr	r3, [pc, #192]	; (3e014 <saadc_irq_handler+0xc4>)
   3df54:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   3df58:	2a00      	cmp	r2, #0
   3df5a:	d04d      	beq.n	3dff8 <saadc_irq_handler+0xa8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3df5c:	2200      	movs	r2, #0
   3df5e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   3df62:	4c2d      	ldr	r4, [pc, #180]	; (3e018 <saadc_irq_handler+0xc8>)
   3df64:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3df68:	2101      	movs	r1, #1
   3df6a:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   3df6c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   3df70:	6f63      	ldr	r3, [r4, #116]	; 0x74
   3df72:	4625      	mov	r5, r4
   3df74:	b3db      	cbz	r3, 3dfee <saadc_irq_handler+0x9e>
		adc_sequence_callback callback = ctx->options.callback;
   3df76:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
   3df7a:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
		if (callback) {
   3df7e:	b133      	cbz	r3, 3df8e <saadc_irq_handler+0x3e>
			action = callback(dev,
   3df80:	f104 0174 	add.w	r1, r4, #116	; 0x74
   3df84:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   3df86:	2801      	cmp	r0, #1
   3df88:	d014      	beq.n	3dfb4 <saadc_irq_handler+0x64>
   3df8a:	2802      	cmp	r0, #2
   3df8c:	d029      	beq.n	3dfe2 <saadc_irq_handler+0x92>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   3df8e:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   3df92:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   3df96:	429a      	cmp	r2, r3
   3df98:	d923      	bls.n	3dfe2 <saadc_irq_handler+0x92>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   3df9a:	3301      	adds	r3, #1
   3df9c:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   3dfa0:	4b1c      	ldr	r3, [pc, #112]	; (3e014 <saadc_irq_handler+0xc4>)
   3dfa2:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   3dfa6:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   3dfaa:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   3dfac:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   3dfb0:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   3dfb4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   3dfb8:	b92b      	cbnz	r3, 3dfc6 <saadc_irq_handler+0x76>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
   3dfba:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
}
   3dfbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3dfc2:	f7ff bed7 	b.w	3dd74 <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   3dfc6:	f3bf 8f5b 	dmb	ish
   3dfca:	e855 3f00 	ldrex	r3, [r5]
   3dfce:	1e5a      	subs	r2, r3, #1
   3dfd0:	e845 2100 	strex	r1, r2, [r5]
   3dfd4:	2900      	cmp	r1, #0
   3dfd6:	d1f8      	bne.n	3dfca <saadc_irq_handler+0x7a>
   3dfd8:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   3dfdc:	2b01      	cmp	r3, #1
   3dfde:	dcec      	bgt.n	3dfba <saadc_irq_handler+0x6a>
   3dfe0:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   3dfe2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   3dfe6:	b113      	cbz	r3, 3dfee <saadc_irq_handler+0x9e>
	z_impl_k_timer_stop(timer);
   3dfe8:	480c      	ldr	r0, [pc, #48]	; (3e01c <saadc_irq_handler+0xcc>)
   3dfea:	f00a fe2a 	bl	48c42 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   3dfee:	480c      	ldr	r0, [pc, #48]	; (3e020 <saadc_irq_handler+0xd0>)
   3dff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3dff4:	f003 bab6 	b.w	41564 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3dff8:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   3dffc:	2900      	cmp	r1, #0
   3dffe:	d0ef      	beq.n	3dfe0 <saadc_irq_handler+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3e000:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   3e004:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3e008:	2201      	movs	r2, #1
   3e00a:	609a      	str	r2, [r3, #8]
   3e00c:	601a      	str	r2, [r3, #0]
   3e00e:	605a      	str	r2, [r3, #4]
}
   3e010:	e7e6      	b.n	3dfe0 <saadc_irq_handler+0x90>
   3e012:	bf00      	nop
   3e014:	40007000 	.word	0x40007000
   3e018:	20000168 	.word	0x20000168
   3e01c:	20000170 	.word	0x20000170
   3e020:	200001c0 	.word	0x200001c0

0003e024 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   3e024:	4b08      	ldr	r3, [pc, #32]	; (3e048 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   3e026:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   3e028:	1ac3      	subs	r3, r0, r3
{
   3e02a:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   3e02c:	4907      	ldr	r1, [pc, #28]	; (3e04c <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   3e02e:	109b      	asrs	r3, r3, #2
{
   3e030:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   3e032:	4359      	muls	r1, r3
   3e034:	4806      	ldr	r0, [pc, #24]	; (3e050 <onoff_stop+0x2c>)
   3e036:	2240      	movs	r2, #64	; 0x40
   3e038:	f009 fd2c 	bl	47a94 <stop>
	notify(mgr, res);
   3e03c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   3e03e:	4601      	mov	r1, r0
	notify(mgr, res);
   3e040:	4620      	mov	r0, r4
}
   3e042:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   3e046:	4718      	bx	r3
   3e048:	200035fc 	.word	0x200035fc
   3e04c:	b6db6db7 	.word	0xb6db6db7
   3e050:	00049034 	.word	0x00049034

0003e054 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   3e054:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   3e056:	4c0c      	ldr	r4, [pc, #48]	; (3e088 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   3e058:	4a0c      	ldr	r2, [pc, #48]	; (3e08c <onoff_start+0x38>)
   3e05a:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   3e05c:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   3e05e:	9300      	str	r3, [sp, #0]
{
   3e060:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   3e062:	460b      	mov	r3, r1
   3e064:	490a      	ldr	r1, [pc, #40]	; (3e090 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   3e066:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   3e068:	4361      	muls	r1, r4
{
   3e06a:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   3e06c:	4809      	ldr	r0, [pc, #36]	; (3e094 <onoff_start+0x40>)
   3e06e:	f009 fd3e 	bl	47aee <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   3e072:	1e01      	subs	r1, r0, #0
   3e074:	da05      	bge.n	3e082 <onoff_start+0x2e>
		notify(mgr, err);
   3e076:	4630      	mov	r0, r6
   3e078:	462b      	mov	r3, r5
	}
}
   3e07a:	b002      	add	sp, #8
   3e07c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   3e080:	4718      	bx	r3
}
   3e082:	b002      	add	sp, #8
   3e084:	bd70      	pop	{r4, r5, r6, pc}
   3e086:	bf00      	nop
   3e088:	200035fc 	.word	0x200035fc
   3e08c:	00047b5b 	.word	0x00047b5b
   3e090:	b6db6db7 	.word	0xb6db6db7
   3e094:	00049034 	.word	0x00049034

0003e098 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   3e098:	2200      	movs	r2, #0
{
   3e09a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   3e09c:	2101      	movs	r1, #1
{
   3e09e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   3e0a0:	4610      	mov	r0, r2
   3e0a2:	f7ec f863 	bl	2a16c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   3e0a6:	2000      	movs	r0, #0
   3e0a8:	f7ec f830 	bl	2a10c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   3e0ac:	480f      	ldr	r0, [pc, #60]	; (3e0ec <clk_init+0x54>)
   3e0ae:	f001 f97d 	bl	3f3ac <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   3e0b2:	4b0f      	ldr	r3, [pc, #60]	; (3e0f0 <clk_init+0x58>)
   3e0b4:	4298      	cmp	r0, r3
   3e0b6:	d115      	bne.n	3e0e4 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   3e0b8:	f001 f988 	bl	3f3cc <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   3e0bc:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   3e0be:	490d      	ldr	r1, [pc, #52]	; (3e0f4 <clk_init+0x5c>)
   3e0c0:	4630      	mov	r0, r6
   3e0c2:	f004 fc84 	bl	429ce <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   3e0c6:	2800      	cmp	r0, #0
   3e0c8:	db0b      	blt.n	3e0e2 <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
   3e0ca:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   3e0cc:	4909      	ldr	r1, [pc, #36]	; (3e0f4 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   3e0ce:	2501      	movs	r5, #1
   3e0d0:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   3e0d2:	f104 001c 	add.w	r0, r4, #28
   3e0d6:	f004 fc7a 	bl	429ce <onoff_manager_init>
		if (err < 0) {
   3e0da:	2800      	cmp	r0, #0
   3e0dc:	db01      	blt.n	3e0e2 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   3e0de:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   3e0e0:	2000      	movs	r0, #0
}
   3e0e2:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   3e0e4:	f06f 0004 	mvn.w	r0, #4
   3e0e8:	e7fb      	b.n	3e0e2 <clk_init+0x4a>
   3e0ea:	bf00      	nop
   3e0ec:	0003e12d 	.word	0x0003e12d
   3e0f0:	0bad0000 	.word	0x0bad0000
   3e0f4:	0004a9bc 	.word	0x0004a9bc

0003e0f8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   3e0f8:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   3e0fa:	230c      	movs	r3, #12
   3e0fc:	4809      	ldr	r0, [pc, #36]	; (3e124 <clkstarted_handle.constprop.0+0x2c>)
   3e0fe:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   3e100:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   3e102:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   3e104:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   3e108:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   3e10a:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   3e10c:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   3e10e:	4418      	add	r0, r3
   3e110:	f009 fcad 	bl	47a6e <set_on_state>
	if (callback) {
   3e114:	b12d      	cbz	r5, 3e122 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   3e116:	4632      	mov	r2, r6
   3e118:	462b      	mov	r3, r5
   3e11a:	4803      	ldr	r0, [pc, #12]	; (3e128 <clkstarted_handle.constprop.0+0x30>)
}
   3e11c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   3e120:	4718      	bx	r3
}
   3e122:	bd70      	pop	{r4, r5, r6, pc}
   3e124:	200035fc 	.word	0x200035fc
   3e128:	00049034 	.word	0x00049034

0003e12c <clock_event_handler>:
	switch (event) {
   3e12c:	b110      	cbz	r0, 3e134 <clock_event_handler+0x8>
   3e12e:	2801      	cmp	r0, #1
   3e130:	d004      	beq.n	3e13c <clock_event_handler+0x10>
   3e132:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   3e134:	4b03      	ldr	r3, [pc, #12]	; (3e144 <clock_event_handler+0x18>)
   3e136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   3e138:	075b      	lsls	r3, r3, #29
   3e13a:	d101      	bne.n	3e140 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   3e13c:	f7ff bfdc 	b.w	3e0f8 <clkstarted_handle.constprop.0>
}
   3e140:	4770      	bx	lr
   3e142:	bf00      	nop
   3e144:	200035fc 	.word	0x200035fc

0003e148 <generic_hfclk_start>:
{
   3e148:	b508      	push	{r3, lr}
	__asm__ volatile(
   3e14a:	f04f 0320 	mov.w	r3, #32
   3e14e:	f3ef 8111 	mrs	r1, BASEPRI
   3e152:	f383 8812 	msr	BASEPRI_MAX, r3
   3e156:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   3e15a:	4a12      	ldr	r2, [pc, #72]	; (3e1a4 <generic_hfclk_start+0x5c>)
   3e15c:	6813      	ldr	r3, [r2, #0]
   3e15e:	f043 0002 	orr.w	r0, r3, #2
   3e162:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   3e164:	07da      	lsls	r2, r3, #31
   3e166:	d408      	bmi.n	3e17a <generic_hfclk_start+0x32>
	__asm__ volatile(
   3e168:	f381 8811 	msr	BASEPRI, r1
   3e16c:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   3e170:	2001      	movs	r0, #1
}
   3e172:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3e176:	f009 be1e 	b.w	47db6 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   3e17a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3e17e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   3e182:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   3e186:	07d3      	lsls	r3, r2, #31
   3e188:	d5ee      	bpl.n	3e168 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   3e18a:	4807      	ldr	r0, [pc, #28]	; (3e1a8 <generic_hfclk_start+0x60>)
   3e18c:	f009 fc6f 	bl	47a6e <set_on_state>
   3e190:	f381 8811 	msr	BASEPRI, r1
   3e194:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   3e198:	2000      	movs	r0, #0
}
   3e19a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   3e19e:	f7ff bfab 	b.w	3e0f8 <clkstarted_handle.constprop.0>
   3e1a2:	bf00      	nop
   3e1a4:	2000364c 	.word	0x2000364c
   3e1a8:	2000363c 	.word	0x2000363c

0003e1ac <api_blocking_start>:
{
   3e1ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   3e1ae:	2200      	movs	r2, #0
   3e1b0:	2301      	movs	r3, #1
   3e1b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   3e1b6:	ab04      	add	r3, sp, #16
   3e1b8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   3e1bc:	4a09      	ldr	r2, [pc, #36]	; (3e1e4 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   3e1be:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   3e1c2:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   3e1c4:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   3e1c8:	f009 fcc0 	bl	47b4c <api_start>
	if (err < 0) {
   3e1cc:	2800      	cmp	r0, #0
   3e1ce:	db05      	blt.n	3e1dc <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   3e1d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   3e1d4:	2300      	movs	r3, #0
   3e1d6:	4668      	mov	r0, sp
   3e1d8:	f003 f9ea 	bl	415b0 <z_impl_k_sem_take>
}
   3e1dc:	b007      	add	sp, #28
   3e1de:	f85d fb04 	ldr.w	pc, [sp], #4
   3e1e2:	bf00      	nop
   3e1e4:	00047b79 	.word	0x00047b79

0003e1e8 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3e1e8:	4b09      	ldr	r3, [pc, #36]	; (3e210 <generic_hfclk_stop+0x28>)
   3e1ea:	f3bf 8f5b 	dmb	ish
   3e1ee:	e853 2f00 	ldrex	r2, [r3]
   3e1f2:	f022 0102 	bic.w	r1, r2, #2
   3e1f6:	e843 1000 	strex	r0, r1, [r3]
   3e1fa:	2800      	cmp	r0, #0
   3e1fc:	d1f7      	bne.n	3e1ee <generic_hfclk_stop+0x6>
   3e1fe:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   3e202:	07d3      	lsls	r3, r2, #31
   3e204:	d402      	bmi.n	3e20c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   3e206:	2001      	movs	r0, #1
   3e208:	f001 b8ee 	b.w	3f3e8 <nrfx_clock_stop>
}
   3e20c:	4770      	bx	lr
   3e20e:	bf00      	nop
   3e210:	2000364c 	.word	0x2000364c

0003e214 <z_nrf_clock_control_get_onoff>:
}
   3e214:	4a02      	ldr	r2, [pc, #8]	; (3e220 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   3e216:	b2c3      	uxtb	r3, r0
}
   3e218:	201c      	movs	r0, #28
   3e21a:	fb03 2000 	mla	r0, r3, r0, r2
   3e21e:	4770      	bx	lr
   3e220:	200035fc 	.word	0x200035fc

0003e224 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3e224:	4b09      	ldr	r3, [pc, #36]	; (3e24c <z_nrf_clock_bt_ctlr_hf_request+0x28>)
   3e226:	f3bf 8f5b 	dmb	ish
   3e22a:	e853 2f00 	ldrex	r2, [r3]
   3e22e:	f042 0101 	orr.w	r1, r2, #1
   3e232:	e843 1000 	strex	r0, r1, [r3]
   3e236:	2800      	cmp	r0, #0
   3e238:	d1f7      	bne.n	3e22a <z_nrf_clock_bt_ctlr_hf_request+0x6>
   3e23a:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
   3e23e:	0793      	lsls	r3, r2, #30
   3e240:	d402      	bmi.n	3e248 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   3e242:	2001      	movs	r0, #1
   3e244:	f009 bdb7 	b.w	47db6 <nrfx_clock_start>
}
   3e248:	4770      	bx	lr
   3e24a:	bf00      	nop
   3e24c:	2000364c 	.word	0x2000364c

0003e250 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3e250:	4b09      	ldr	r3, [pc, #36]	; (3e278 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
   3e252:	f3bf 8f5b 	dmb	ish
   3e256:	e853 2f00 	ldrex	r2, [r3]
   3e25a:	f022 0101 	bic.w	r1, r2, #1
   3e25e:	e843 1000 	strex	r0, r1, [r3]
   3e262:	2800      	cmp	r0, #0
   3e264:	d1f7      	bne.n	3e256 <z_nrf_clock_bt_ctlr_hf_release+0x6>
   3e266:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
   3e26a:	0793      	lsls	r3, r2, #30
   3e26c:	d402      	bmi.n	3e274 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   3e26e:	2001      	movs	r0, #1
   3e270:	f001 b8ba 	b.w	3f3e8 <nrfx_clock_stop>
}
   3e274:	4770      	bx	lr
   3e276:	bf00      	nop
   3e278:	2000364c 	.word	0x2000364c

0003e27c <z_nrf_clock_control_lf_on>:
{
   3e27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   3e280:	4938      	ldr	r1, [pc, #224]	; (3e364 <z_nrf_clock_control_lf_on+0xe8>)
   3e282:	f3bf 8f5b 	dmb	ish
   3e286:	4607      	mov	r7, r0
   3e288:	2201      	movs	r2, #1
   3e28a:	e851 3f00 	ldrex	r3, [r1]
   3e28e:	e841 2000 	strex	r0, r2, [r1]
   3e292:	2800      	cmp	r0, #0
   3e294:	d1f9      	bne.n	3e28a <z_nrf_clock_control_lf_on+0xe>
   3e296:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   3e29a:	b933      	cbnz	r3, 3e2aa <z_nrf_clock_control_lf_on+0x2e>
   3e29c:	4932      	ldr	r1, [pc, #200]	; (3e368 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
   3e29e:	4833      	ldr	r0, [pc, #204]	; (3e36c <z_nrf_clock_control_lf_on+0xf0>)
   3e2a0:	604b      	str	r3, [r1, #4]
   3e2a2:	60cb      	str	r3, [r1, #12]
   3e2a4:	608a      	str	r2, [r1, #8]
   3e2a6:	f004 fba5 	bl	429f4 <onoff_request>
	switch (start_mode) {
   3e2aa:	1e7b      	subs	r3, r7, #1
   3e2ac:	2b01      	cmp	r3, #1
   3e2ae:	d82b      	bhi.n	3e308 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   3e2b0:	2f01      	cmp	r7, #1
   3e2b2:	d107      	bne.n	3e2c4 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   3e2b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3e2b8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   3e2bc:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   3e2c0:	2b01      	cmp	r3, #1
   3e2c2:	d021      	beq.n	3e308 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   3e2c4:	f00a f950 	bl	48568 <k_is_in_isr>
   3e2c8:	4605      	mov	r5, r0
   3e2ca:	b9f8      	cbnz	r0, 3e30c <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
   3e2cc:	4b28      	ldr	r3, [pc, #160]	; (3e370 <z_nrf_clock_control_lf_on+0xf4>)
   3e2ce:	781b      	ldrb	r3, [r3, #0]
   3e2d0:	b1e3      	cbz	r3, 3e30c <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
   3e2d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3e2d6:	2202      	movs	r2, #2
   3e2d8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   3e2dc:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   3e2de:	f8df 8094 	ldr.w	r8, [pc, #148]	; 3e374 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   3e2e2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   3e2e6:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   3e2ea:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   3e2ee:	03d2      	lsls	r2, r2, #15
   3e2f0:	d516      	bpl.n	3e320 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   3e2f2:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   3e2f6:	2b01      	cmp	r3, #1
   3e2f8:	d001      	beq.n	3e2fe <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   3e2fa:	2f01      	cmp	r7, #1
   3e2fc:	d110      	bne.n	3e320 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
   3e2fe:	b35d      	cbz	r5, 3e358 <z_nrf_clock_control_lf_on+0xdc>
   3e300:	f386 8811 	msr	BASEPRI, r6
   3e304:	f3bf 8f6f 	isb	sy
}
   3e308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   3e30c:	f04f 0320 	mov.w	r3, #32
   3e310:	f3ef 8611 	mrs	r6, BASEPRI
   3e314:	f383 8812 	msr	BASEPRI_MAX, r3
   3e318:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   3e31c:	2501      	movs	r5, #1
   3e31e:	e7de      	b.n	3e2de <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   3e320:	b1ad      	cbz	r5, 3e34e <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   3e322:	4630      	mov	r0, r6
   3e324:	f7eb fee8 	bl	2a0f8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   3e328:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   3e32c:	2b00      	cmp	r3, #0
   3e32e:	d1da      	bne.n	3e2e6 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   3e330:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   3e334:	2a00      	cmp	r2, #0
   3e336:	d0d6      	beq.n	3e2e6 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3e338:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   3e33c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   3e340:	2301      	movs	r3, #1
   3e342:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   3e346:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3e34a:	60a3      	str	r3, [r4, #8]
}
   3e34c:	e7cb      	b.n	3e2e6 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
   3e34e:	2100      	movs	r1, #0
   3e350:	2021      	movs	r0, #33	; 0x21
   3e352:	f003 fdf7 	bl	41f44 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   3e356:	e7e7      	b.n	3e328 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
   3e358:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3e35c:	2202      	movs	r2, #2
   3e35e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3e362:	e7d1      	b.n	3e308 <z_nrf_clock_control_lf_on+0x8c>
   3e364:	200035f8 	.word	0x200035f8
   3e368:	200035e8 	.word	0x200035e8
   3e36c:	20003618 	.word	0x20003618
   3e370:	20003c28 	.word	0x20003c28
   3e374:	e000e100 	.word	0xe000e100

0003e378 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   3e378:	b530      	push	{r4, r5, lr}
	return port->config;
   3e37a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   3e37c:	7b05      	ldrb	r5, [r0, #12]
   3e37e:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
   3e382:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
{
   3e386:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   3e388:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   3e38c:	d104      	bne.n	3e398 <gpio_nrfx_pin_interrupt_configure+0x20>
		nrfx_gpiote_trigger_disable(abs_pin);
   3e38e:	4620      	mov	r0, r4
   3e390:	f001 fad6 	bl	3f940 <nrfx_gpiote_trigger_disable>

		return 0;
   3e394:	2000      	movs	r0, #0
   3e396:	e04a      	b.n	3e42e <gpio_nrfx_pin_interrupt_configure+0xb6>
	}

	nrfx_gpiote_trigger_config_t trigger_config = {
   3e398:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   3e39a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   3e39e:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   3e3a2:	d114      	bne.n	3e3ce <gpio_nrfx_pin_interrupt_configure+0x56>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   3e3a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
	nrfx_gpiote_trigger_config_t trigger_config = {
   3e3a8:	bf0c      	ite	eq
   3e3aa:	2304      	moveq	r3, #4
   3e3ac:	2305      	movne	r3, #5
   3e3ae:	f88d 3008 	strb.w	r3, [sp, #8]
		}

		trigger_config.p_in_channel = &ch;
	}

	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   3e3b2:	2300      	movs	r3, #0
   3e3b4:	4619      	mov	r1, r3
   3e3b6:	aa02      	add	r2, sp, #8
   3e3b8:	4620      	mov	r0, r4
   3e3ba:	f001 f901 	bl	3f5c0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   3e3be:	4b20      	ldr	r3, [pc, #128]	; (3e440 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   3e3c0:	4298      	cmp	r0, r3
   3e3c2:	d13a      	bne.n	3e43a <gpio_nrfx_pin_interrupt_configure+0xc2>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);
   3e3c4:	2101      	movs	r1, #1
   3e3c6:	4620      	mov	r0, r4
   3e3c8:	f001 fa72 	bl	3f8b0 <nrfx_gpiote_trigger_enable>

	return 0;
   3e3cc:	e7e2      	b.n	3e394 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   3e3ce:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   3e3d2:	d02e      	beq.n	3e432 <gpio_nrfx_pin_interrupt_configure+0xba>
   3e3d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   3e3d8:	bf14      	ite	ne
   3e3da:	2301      	movne	r3, #1
   3e3dc:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   3e3de:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   3e3e2:	6883      	ldr	r3, [r0, #8]
   3e3e4:	40cb      	lsrs	r3, r1
   3e3e6:	07d9      	lsls	r1, r3, #31
   3e3e8:	d4e3      	bmi.n	3e3b2 <gpio_nrfx_pin_interrupt_configure+0x3a>
   3e3ea:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   3e3ee:	d1e0      	bne.n	3e3b2 <gpio_nrfx_pin_interrupt_configure+0x3a>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   3e3f0:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
   3e3f2:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   3e3f4:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
   3e3f8:	4a12      	ldr	r2, [pc, #72]	; (3e444 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   3e3fa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   3e3fe:	bf18      	it	ne
   3e400:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   3e404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   3e408:	07db      	lsls	r3, r3, #31
   3e40a:	d4d2      	bmi.n	3e3b2 <gpio_nrfx_pin_interrupt_configure+0x3a>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   3e40c:	f10d 0507 	add.w	r5, sp, #7
   3e410:	4629      	mov	r1, r5
   3e412:	4620      	mov	r0, r4
   3e414:	f001 f9f8 	bl	3f808 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   3e418:	4b0b      	ldr	r3, [pc, #44]	; (3e448 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   3e41a:	4298      	cmp	r0, r3
   3e41c:	d10b      	bne.n	3e436 <gpio_nrfx_pin_interrupt_configure+0xbe>
			err = nrfx_gpiote_channel_alloc(&ch);
   3e41e:	4628      	mov	r0, r5
   3e420:	f001 fa40 	bl	3f8a4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   3e424:	4b06      	ldr	r3, [pc, #24]	; (3e440 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   3e426:	4298      	cmp	r0, r3
   3e428:	d005      	beq.n	3e436 <gpio_nrfx_pin_interrupt_configure+0xbe>
				return -ENOMEM;
   3e42a:	f06f 000b 	mvn.w	r0, #11
}
   3e42e:	b005      	add	sp, #20
   3e430:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   3e432:	2303      	movs	r3, #3
   3e434:	e7d3      	b.n	3e3de <gpio_nrfx_pin_interrupt_configure+0x66>
		trigger_config.p_in_channel = &ch;
   3e436:	9503      	str	r5, [sp, #12]
   3e438:	e7bb      	b.n	3e3b2 <gpio_nrfx_pin_interrupt_configure+0x3a>
		return -EIO;
   3e43a:	f06f 0004 	mvn.w	r0, #4
   3e43e:	e7f6      	b.n	3e42e <gpio_nrfx_pin_interrupt_configure+0xb6>
   3e440:	0bad0000 	.word	0x0bad0000
   3e444:	50000300 	.word	0x50000300
   3e448:	0bad0004 	.word	0x0bad0004

0003e44c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   3e44c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   3e44e:	f001 fa19 	bl	3f884 <nrfx_gpiote_is_init>
   3e452:	4604      	mov	r4, r0
   3e454:	b968      	cbnz	r0, 3e472 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   3e456:	f001 f9ed 	bl	3f834 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   3e45a:	4b08      	ldr	r3, [pc, #32]	; (3e47c <gpio_nrfx_init+0x30>)
   3e45c:	4298      	cmp	r0, r3
   3e45e:	d10a      	bne.n	3e476 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   3e460:	4807      	ldr	r0, [pc, #28]	; (3e480 <gpio_nrfx_init+0x34>)
   3e462:	4621      	mov	r1, r4
   3e464:	f001 f9ca 	bl	3f7fc <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   3e468:	4622      	mov	r2, r4
   3e46a:	2105      	movs	r1, #5
   3e46c:	2006      	movs	r0, #6
   3e46e:	f7eb fe7d 	bl	2a16c <z_arm_irq_priority_set>
		return 0;
   3e472:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   3e474:	bd10      	pop	{r4, pc}
		return -EIO;
   3e476:	f06f 0004 	mvn.w	r0, #4
   3e47a:	e7fb      	b.n	3e474 <gpio_nrfx_init+0x28>
   3e47c:	0bad0000 	.word	0x0bad0000
   3e480:	0003e485 	.word	0x0003e485

0003e484 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   3e484:	0942      	lsrs	r2, r0, #5
{
   3e486:	b570      	push	{r4, r5, r6, lr}
   3e488:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   3e48a:	d002      	beq.n	3e492 <nrfx_gpio_handler+0xe>
   3e48c:	2a01      	cmp	r2, #1
   3e48e:	d017      	beq.n	3e4c0 <nrfx_gpio_handler+0x3c>
}
   3e490:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   3e492:	4e0d      	ldr	r6, [pc, #52]	; (3e4c8 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
   3e494:	6932      	ldr	r2, [r6, #16]
   3e496:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   3e498:	2900      	cmp	r1, #0
   3e49a:	d0f9      	beq.n	3e490 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   3e49c:	f003 031f 	and.w	r3, r3, #31
   3e4a0:	2501      	movs	r5, #1
   3e4a2:	680c      	ldr	r4, [r1, #0]
   3e4a4:	409d      	lsls	r5, r3
   3e4a6:	2900      	cmp	r1, #0
   3e4a8:	d0f2      	beq.n	3e490 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   3e4aa:	688a      	ldr	r2, [r1, #8]
   3e4ac:	402a      	ands	r2, r5
   3e4ae:	d002      	beq.n	3e4b6 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   3e4b0:	684b      	ldr	r3, [r1, #4]
   3e4b2:	4630      	mov	r0, r6
   3e4b4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   3e4b6:	b12c      	cbz	r4, 3e4c4 <nrfx_gpio_handler+0x40>
   3e4b8:	6823      	ldr	r3, [r4, #0]
   3e4ba:	4621      	mov	r1, r4
   3e4bc:	461c      	mov	r4, r3
   3e4be:	e7f2      	b.n	3e4a6 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   3e4c0:	4e02      	ldr	r6, [pc, #8]	; (3e4cc <nrfx_gpio_handler+0x48>)
   3e4c2:	e7e7      	b.n	3e494 <nrfx_gpio_handler+0x10>
   3e4c4:	4623      	mov	r3, r4
   3e4c6:	e7f8      	b.n	3e4ba <nrfx_gpio_handler+0x36>
   3e4c8:	00049064 	.word	0x00049064
   3e4cc:	0004904c 	.word	0x0004904c

0003e4d0 <gpio_nrfx_pin_configure>:
{
   3e4d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   3e4d4:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   3e4d6:	7b3b      	ldrb	r3, [r7, #12]
   3e4d8:	f001 051f 	and.w	r5, r1, #31
{
   3e4dc:	b085      	sub	sp, #20
   3e4de:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   3e4e0:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   3e4e4:	4614      	mov	r4, r2
   3e4e6:	b9d2      	cbnz	r2, 3e51e <gpio_nrfx_pin_configure+0x4e>
	err = nrfx_gpiote_channel_get(pin, &ch);
   3e4e8:	a902      	add	r1, sp, #8
   3e4ea:	4628      	mov	r0, r5
   3e4ec:	f001 f98c 	bl	3f808 <nrfx_gpiote_channel_get>
   3e4f0:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   3e4f2:	4628      	mov	r0, r5
   3e4f4:	f001 fa4c 	bl	3f990 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   3e4f8:	4b44      	ldr	r3, [pc, #272]	; (3e60c <gpio_nrfx_pin_configure+0x13c>)
   3e4fa:	4298      	cmp	r0, r3
   3e4fc:	d004      	beq.n	3e508 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   3e4fe:	f06f 0004 	mvn.w	r0, #4
}
   3e502:	b005      	add	sp, #20
   3e504:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   3e508:	4284      	cmp	r4, r0
   3e50a:	d001      	beq.n	3e510 <gpio_nrfx_pin_configure+0x40>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   3e50c:	2000      	movs	r0, #0
   3e50e:	e7f8      	b.n	3e502 <gpio_nrfx_pin_configure+0x32>
		err = nrfx_gpiote_channel_free(ch);
   3e510:	f89d 0008 	ldrb.w	r0, [sp, #8]
   3e514:	f001 f9c0 	bl	3f898 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   3e518:	42a0      	cmp	r0, r4
   3e51a:	d0f7      	beq.n	3e50c <gpio_nrfx_pin_configure+0x3c>
   3e51c:	e7ef      	b.n	3e4fe <gpio_nrfx_pin_configure+0x2e>
	nrfx_gpiote_trigger_config_t trigger_config = {
   3e51e:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   3e522:	f10d 0103 	add.w	r1, sp, #3
   3e526:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   3e528:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   3e52c:	f001 f96c 	bl	3f808 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   3e530:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   3e532:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   3e534:	aa02      	add	r2, sp, #8
   3e536:	4649      	mov	r1, r9
   3e538:	4628      	mov	r0, r5
   3e53a:	f001 f841 	bl	3f5c0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   3e53e:	4b33      	ldr	r3, [pc, #204]	; (3e60c <gpio_nrfx_pin_configure+0x13c>)
   3e540:	4298      	cmp	r0, r3
   3e542:	d002      	beq.n	3e54a <gpio_nrfx_pin_configure+0x7a>
		return NRF_GPIO_PIN_PULLUP;
   3e544:	f06f 0015 	mvn.w	r0, #21
   3e548:	e7db      	b.n	3e502 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   3e54a:	4580      	cmp	r8, r0
   3e54c:	d103      	bne.n	3e556 <gpio_nrfx_pin_configure+0x86>
		err = nrfx_gpiote_channel_free(ch);
   3e54e:	f89d 0003 	ldrb.w	r0, [sp, #3]
   3e552:	f001 f9a1 	bl	3f898 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   3e556:	05a3      	lsls	r3, r4, #22
   3e558:	d549      	bpl.n	3e5ee <gpio_nrfx_pin_configure+0x11e>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   3e55a:	4b2d      	ldr	r3, [pc, #180]	; (3e610 <gpio_nrfx_pin_configure+0x140>)
   3e55c:	4a2d      	ldr	r2, [pc, #180]	; (3e614 <gpio_nrfx_pin_configure+0x144>)
   3e55e:	4023      	ands	r3, r4
   3e560:	4293      	cmp	r3, r2
   3e562:	d018      	beq.n	3e596 <gpio_nrfx_pin_configure+0xc6>
   3e564:	d80c      	bhi.n	3e580 <gpio_nrfx_pin_configure+0xb0>
   3e566:	2b06      	cmp	r3, #6
   3e568:	d016      	beq.n	3e598 <gpio_nrfx_pin_configure+0xc8>
   3e56a:	d804      	bhi.n	3e576 <gpio_nrfx_pin_configure+0xa6>
   3e56c:	b1a3      	cbz	r3, 3e598 <gpio_nrfx_pin_configure+0xc8>
   3e56e:	2b02      	cmp	r3, #2
   3e570:	d1e8      	bne.n	3e544 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_D0S1;
   3e572:	2304      	movs	r3, #4
   3e574:	e010      	b.n	3e598 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   3e576:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   3e57a:	d1e3      	bne.n	3e544 <gpio_nrfx_pin_configure+0x74>
   3e57c:	2301      	movs	r3, #1
   3e57e:	e00b      	b.n	3e598 <gpio_nrfx_pin_configure+0xc8>
   3e580:	4a25      	ldr	r2, [pc, #148]	; (3e618 <gpio_nrfx_pin_configure+0x148>)
   3e582:	4293      	cmp	r3, r2
   3e584:	d027      	beq.n	3e5d6 <gpio_nrfx_pin_configure+0x106>
   3e586:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   3e58a:	d026      	beq.n	3e5da <gpio_nrfx_pin_configure+0x10a>
   3e58c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   3e590:	d1d8      	bne.n	3e544 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_S0H1;
   3e592:	2302      	movs	r3, #2
   3e594:	e000      	b.n	3e598 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0D1;
   3e596:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   3e598:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   3e59c:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   3e5a0:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   3e5a4:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   3e5a6:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   3e5aa:	bf54      	ite	pl
   3e5ac:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   3e5b0:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   3e5b2:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   3e5b4:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   3e5b8:	d511      	bpl.n	3e5de <gpio_nrfx_pin_configure+0x10e>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   3e5ba:	687a      	ldr	r2, [r7, #4]
   3e5bc:	2301      	movs	r3, #1
   3e5be:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   3e5c0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   3e5c4:	2200      	movs	r2, #0
   3e5c6:	a901      	add	r1, sp, #4
   3e5c8:	4628      	mov	r0, r5
   3e5ca:	f001 f8a7 	bl	3f71c <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   3e5ce:	4b0f      	ldr	r3, [pc, #60]	; (3e60c <gpio_nrfx_pin_configure+0x13c>)
   3e5d0:	4298      	cmp	r0, r3
   3e5d2:	d09b      	beq.n	3e50c <gpio_nrfx_pin_configure+0x3c>
   3e5d4:	e7b6      	b.n	3e544 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_D0H1;
   3e5d6:	2305      	movs	r3, #5
   3e5d8:	e7de      	b.n	3e598 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
   3e5da:	2303      	movs	r3, #3
   3e5dc:	e7dc      	b.n	3e598 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   3e5de:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   3e5e0:	bf41      	itttt	mi
   3e5e2:	2301      	movmi	r3, #1
   3e5e4:	687a      	ldrmi	r2, [r7, #4]
   3e5e6:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   3e5e8:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   3e5ec:	e7ea      	b.n	3e5c4 <gpio_nrfx_pin_configure+0xf4>
	if (flags & GPIO_PULL_UP) {
   3e5ee:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   3e5f0:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   3e5f4:	bf54      	ite	pl
   3e5f6:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   3e5fa:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   3e5fc:	461a      	mov	r2, r3
   3e5fe:	a901      	add	r1, sp, #4
   3e600:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   3e602:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   3e606:	f000 ffdb 	bl	3f5c0 <nrfx_gpiote_input_configure>
   3e60a:	e7e0      	b.n	3e5ce <gpio_nrfx_pin_configure+0xfe>
   3e60c:	0bad0000 	.word	0x0bad0000
   3e610:	00f00006 	.word	0x00f00006
   3e614:	00100006 	.word	0x00100006
   3e618:	00400002 	.word	0x00400002

0003e61c <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   3e61c:	4b02      	ldr	r3, [pc, #8]	; (3e628 <flash_nrf_pages_layout+0xc>)
   3e61e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   3e620:	2301      	movs	r3, #1
   3e622:	6013      	str	r3, [r2, #0]
}
   3e624:	4770      	bx	lr
   3e626:	bf00      	nop
   3e628:	20003668 	.word	0x20003668

0003e62c <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   3e62c:	4800      	ldr	r0, [pc, #0]	; (3e630 <flash_nrf_get_parameters+0x4>)
   3e62e:	4770      	bx	lr
   3e630:	0004aa48 	.word	0x0004aa48

0003e634 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   3e634:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   3e636:	2201      	movs	r2, #1
   3e638:	4611      	mov	r1, r2
   3e63a:	4807      	ldr	r0, [pc, #28]	; (3e658 <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   3e63c:	4c07      	ldr	r4, [pc, #28]	; (3e65c <nrf_flash_init+0x28>)
   3e63e:	f00a f886 	bl	4874e <z_impl_k_sem_init>
	nrf_flash_sync_init();
   3e642:	f000 f9c1 	bl	3e9c8 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   3e646:	f009 fc44 	bl	47ed2 <nrfx_nvmc_flash_page_count_get>
   3e64a:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   3e64c:	f009 fc3d 	bl	47eca <nrfx_nvmc_flash_page_size_get>
   3e650:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   3e652:	2000      	movs	r0, #0
   3e654:	bd10      	pop	{r4, pc}
   3e656:	bf00      	nop
   3e658:	20003670 	.word	0x20003670
   3e65c:	20003668 	.word	0x20003668

0003e660 <restore_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
   3e660:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   3e664:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
   3e668:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   3e66c:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   3e670:	f023 031f 	bic.w	r3, r3, #31
   3e674:	430b      	orrs	r3, r1
    pofcon |=
   3e676:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   3e67a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
   3e67e:	4b02      	ldr	r3, [pc, #8]	; (3e688 <restore_pofwarn.part.0+0x28>)
   3e680:	2200      	movs	r2, #0
   3e682:	701a      	strb	r2, [r3, #0]
	}
}
   3e684:	4770      	bx	lr
   3e686:	bf00      	nop
   3e688:	20003c21 	.word	0x20003c21

0003e68c <suspend_pofwarn>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   3e68c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   3e690:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   3e694:	2b08      	cmp	r3, #8
   3e696:	d120      	bne.n	3e6da <suspend_pofwarn+0x4e>
    uint32_t pofcon = p_reg->POFCON;
   3e698:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   3e69c:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
	if (enabled) {
   3e6a0:	07cb      	lsls	r3, r1, #31
   3e6a2:	d51a      	bpl.n	3e6da <suspend_pofwarn+0x4e>
    uint32_t pofcon = p_reg->POFCON;
   3e6a4:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   3e6a8:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   3e6ac:	f023 031f 	bic.w	r3, r3, #31
    pofcon |=
   3e6b0:	430b      	orrs	r3, r1
    p_reg->POFCON = pofcon;
   3e6b2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3e6b6:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   3e6ba:	b15b      	cbz	r3, 3e6d4 <suspend_pofwarn+0x48>
    uint32_t pofcon = p_reg->POFCON;
   3e6bc:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   3e6c0:	f023 031f 	bic.w	r3, r3, #31
   3e6c4:	430b      	orrs	r3, r1
    pofcon |=
   3e6c6:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   3e6ca:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			return -ECANCELED;
   3e6ce:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   3e6d2:	4770      	bx	lr
		pofcon_enabled = enabled;
   3e6d4:	4b02      	ldr	r3, [pc, #8]	; (3e6e0 <suspend_pofwarn+0x54>)
   3e6d6:	2201      	movs	r2, #1
   3e6d8:	701a      	strb	r2, [r3, #0]
		return 0;
   3e6da:	2000      	movs	r0, #0
}
   3e6dc:	4770      	bx	lr
   3e6de:	bf00      	nop
   3e6e0:	20003c21 	.word	0x20003c21

0003e6e4 <erase_op>:
{
   3e6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3e6e6:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   3e6e8:	f009 fbef 	bl	47eca <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   3e6ec:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   3e6ee:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   3e6f0:	b10b      	cbz	r3, 3e6f6 <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   3e6f2:	f000 f97b 	bl	3e9ec <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   3e6f6:	4f13      	ldr	r7, [pc, #76]	; (3e744 <erase_op+0x60>)
{
   3e6f8:	2600      	movs	r6, #0
		if (SUSPEND_POFWARN()) {
   3e6fa:	f7ff ffc7 	bl	3e68c <suspend_pofwarn>
   3e6fe:	b9e8      	cbnz	r0, 3e73c <erase_op+0x58>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   3e700:	6860      	ldr	r0, [r4, #4]
   3e702:	f001 fa53 	bl	3fbac <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   3e706:	68a3      	ldr	r3, [r4, #8]
   3e708:	1b5b      	subs	r3, r3, r5
   3e70a:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   3e70c:	6863      	ldr	r3, [r4, #4]
   3e70e:	442b      	add	r3, r5
   3e710:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   3e712:	783b      	ldrb	r3, [r7, #0]
   3e714:	b10b      	cbz	r3, 3e71a <erase_op+0x36>
   3e716:	f7ff ffa3 	bl	3e660 <restore_pofwarn.part.0>
		if (e_ctx->enable_time_limit) {
   3e71a:	7b23      	ldrb	r3, [r4, #12]
		i++;
   3e71c:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   3e71e:	b93b      	cbnz	r3, 3e730 <erase_op+0x4c>
	} while (e_ctx->len > 0);
   3e720:	68a3      	ldr	r3, [r4, #8]
   3e722:	2b00      	cmp	r3, #0
   3e724:	d1e9      	bne.n	3e6fa <erase_op+0x16>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   3e726:	68a0      	ldr	r0, [r4, #8]
   3e728:	3800      	subs	r0, #0
   3e72a:	bf18      	it	ne
   3e72c:	2001      	movne	r0, #1
}
   3e72e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   3e730:	4630      	mov	r0, r6
   3e732:	f7e9 f881 	bl	27838 <nrf_flash_sync_check_time_limit>
   3e736:	2800      	cmp	r0, #0
   3e738:	d0f2      	beq.n	3e720 <erase_op+0x3c>
   3e73a:	e7f4      	b.n	3e726 <erase_op+0x42>
			return -ECANCELED;
   3e73c:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   3e740:	e7f5      	b.n	3e72e <erase_op+0x4a>
   3e742:	bf00      	nop
   3e744:	20003c21 	.word	0x20003c21

0003e748 <flash_nrf_erase>:
{
   3e748:	b5f0      	push	{r4, r5, r6, r7, lr}
   3e74a:	b087      	sub	sp, #28
   3e74c:	460e      	mov	r6, r1
   3e74e:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   3e750:	f009 fbbb 	bl	47eca <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   3e754:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   3e756:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   3e758:	4630      	mov	r0, r6
   3e75a:	f009 fa98 	bl	47c8e <is_regular_addr_valid>
   3e75e:	b3c8      	cbz	r0, 3e7d4 <flash_nrf_erase+0x8c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   3e760:	fbb6 f3f7 	udiv	r3, r6, r7
   3e764:	fb07 6313 	mls	r3, r7, r3, r6
   3e768:	bba3      	cbnz	r3, 3e7d4 <flash_nrf_erase+0x8c>
   3e76a:	fbb5 f4f7 	udiv	r4, r5, r7
   3e76e:	fb07 5414 	mls	r4, r7, r4, r5
   3e772:	bb7c      	cbnz	r4, 3e7d4 <flash_nrf_erase+0x8c>
		if (!n_pages) {
   3e774:	42bd      	cmp	r5, r7
   3e776:	d322      	bcc.n	3e7be <flash_nrf_erase+0x76>
	return z_impl_k_sem_take(sem, timeout);
   3e778:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3e77c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3e780:	4816      	ldr	r0, [pc, #88]	; (3e7dc <flash_nrf_erase+0x94>)
   3e782:	f002 ff15 	bl	415b0 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   3e786:	f009 faa7 	bl	47cd8 <nrf_flash_sync_is_required>
   3e78a:	ab02      	add	r3, sp, #8
   3e78c:	4601      	mov	r1, r0
	struct flash_context context = {
   3e78e:	2210      	movs	r2, #16
	if (nrf_flash_sync_is_required()) {
   3e790:	b1c0      	cbz	r0, 3e7c4 <flash_nrf_erase+0x7c>
	struct flash_context context = {
   3e792:	4621      	mov	r1, r4
   3e794:	4618      	mov	r0, r3
   3e796:	f006 f99f 	bl	44ad8 <memset>
   3e79a:	2201      	movs	r2, #1
   3e79c:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   3e7a0:	4a0f      	ldr	r2, [pc, #60]	; (3e7e0 <flash_nrf_erase+0x98>)
   3e7a2:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   3e7a6:	480f      	ldr	r0, [pc, #60]	; (3e7e4 <flash_nrf_erase+0x9c>)
	struct flash_context context = {
   3e7a8:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   3e7ac:	f000 f916 	bl	3e9dc <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   3e7b0:	4668      	mov	r0, sp
   3e7b2:	f7e8 ffc5 	bl	27740 <nrf_flash_sync_exe>
	return	erase_op(&context);
   3e7b6:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   3e7b8:	4808      	ldr	r0, [pc, #32]	; (3e7dc <flash_nrf_erase+0x94>)
   3e7ba:	f002 fed3 	bl	41564 <z_impl_k_sem_give>
}
   3e7be:	4620      	mov	r0, r4
   3e7c0:	b007      	add	sp, #28
   3e7c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct flash_context context = {
   3e7c4:	4618      	mov	r0, r3
   3e7c6:	f006 f987 	bl	44ad8 <memset>
   3e7ca:	e9cd 6503 	strd	r6, r5, [sp, #12]
	return	erase_op(&context);
   3e7ce:	f7ff ff89 	bl	3e6e4 <erase_op>
   3e7d2:	e7f0      	b.n	3e7b6 <flash_nrf_erase+0x6e>
			return -EINVAL;
   3e7d4:	f06f 0415 	mvn.w	r4, #21
   3e7d8:	e7f1      	b.n	3e7be <flash_nrf_erase+0x76>
   3e7da:	bf00      	nop
   3e7dc:	20003670 	.word	0x20003670
   3e7e0:	0003e6e5 	.word	0x0003e6e5
   3e7e4:	00015e64 	.word	0x00015e64

0003e7e8 <write_op>:
{
   3e7e8:	b570      	push	{r4, r5, r6, lr}
	if (w_ctx->enable_time_limit) {
   3e7ea:	7b03      	ldrb	r3, [r0, #12]
{
   3e7ec:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   3e7ee:	b10b      	cbz	r3, 3e7f4 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   3e7f0:	f000 f8fc 	bl	3e9ec <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   3e7f4:	4e19      	ldr	r6, [pc, #100]	; (3e85c <write_op+0x74>)
{
   3e7f6:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   3e7f8:	68a3      	ldr	r3, [r4, #8]
   3e7fa:	2b03      	cmp	r3, #3
   3e7fc:	d806      	bhi.n	3e80c <write_op+0x24>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   3e7fe:	4a18      	ldr	r2, [pc, #96]	; (3e860 <write_op+0x78>)
   3e800:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   3e804:	07db      	lsls	r3, r3, #31
   3e806:	d5fb      	bpl.n	3e800 <write_op+0x18>
	return FLASH_OP_DONE;
   3e808:	2000      	movs	r0, #0
}
   3e80a:	bd70      	pop	{r4, r5, r6, pc}
		if (SUSPEND_POFWARN()) {
   3e80c:	f7ff ff3e 	bl	3e68c <suspend_pofwarn>
   3e810:	bb08      	cbnz	r0, 3e856 <write_op+0x6e>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   3e812:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   3e814:	6860      	ldr	r0, [r4, #4]
   3e816:	6819      	ldr	r1, [r3, #0]
   3e818:	f001 f9e8 	bl	3fbec <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   3e81c:	7833      	ldrb	r3, [r6, #0]
   3e81e:	b10b      	cbz	r3, 3e824 <write_op+0x3c>
   3e820:	f7ff ff1e 	bl	3e660 <restore_pofwarn.part.0>
	w_ctx->flash_addr += shift;
   3e824:	6863      	ldr	r3, [r4, #4]
   3e826:	3304      	adds	r3, #4
   3e828:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   3e82a:	6823      	ldr	r3, [r4, #0]
   3e82c:	3304      	adds	r3, #4
   3e82e:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   3e830:	68a3      	ldr	r3, [r4, #8]
   3e832:	3b04      	subs	r3, #4
   3e834:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   3e836:	7b23      	ldrb	r3, [r4, #12]
		i++;
   3e838:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   3e83a:	2b00      	cmp	r3, #0
   3e83c:	d0dc      	beq.n	3e7f8 <write_op+0x10>
			if (nrf_flash_sync_check_time_limit(i)) {
   3e83e:	4628      	mov	r0, r5
   3e840:	f7e8 fffa 	bl	27838 <nrf_flash_sync_check_time_limit>
   3e844:	2800      	cmp	r0, #0
   3e846:	d0d7      	beq.n	3e7f8 <write_op+0x10>
   3e848:	4a05      	ldr	r2, [pc, #20]	; (3e860 <write_op+0x78>)
   3e84a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   3e84e:	07d9      	lsls	r1, r3, #31
   3e850:	d5fb      	bpl.n	3e84a <write_op+0x62>
				return FLASH_OP_ONGOING;
   3e852:	2001      	movs	r0, #1
   3e854:	e7d9      	b.n	3e80a <write_op+0x22>
			return -ECANCELED;
   3e856:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   3e85a:	e7d6      	b.n	3e80a <write_op+0x22>
   3e85c:	20003c21 	.word	0x20003c21
   3e860:	4001e000 	.word	0x4001e000

0003e864 <flash_nrf_write>:
{
   3e864:	b570      	push	{r4, r5, r6, lr}
   3e866:	460d      	mov	r5, r1
   3e868:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   3e86a:	4619      	mov	r1, r3
   3e86c:	4628      	mov	r0, r5
{
   3e86e:	4616      	mov	r6, r2
   3e870:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   3e872:	f009 fa0c 	bl	47c8e <is_regular_addr_valid>
   3e876:	b360      	cbz	r0, 3e8d2 <flash_nrf_write+0x6e>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   3e878:	ea45 0304 	orr.w	r3, r5, r4
   3e87c:	079b      	lsls	r3, r3, #30
   3e87e:	d128      	bne.n	3e8d2 <flash_nrf_write+0x6e>
	if (!len) {
   3e880:	b1fc      	cbz	r4, 3e8c2 <flash_nrf_write+0x5e>
	return z_impl_k_sem_take(sem, timeout);
   3e882:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3e886:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3e88a:	4813      	ldr	r0, [pc, #76]	; (3e8d8 <flash_nrf_write+0x74>)
   3e88c:	f002 fe90 	bl	415b0 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   3e890:	f009 fa22 	bl	47cd8 <nrf_flash_sync_is_required>
   3e894:	4603      	mov	r3, r0
	struct flash_context context = {
   3e896:	e9cd 6502 	strd	r6, r5, [sp, #8]
   3e89a:	a802      	add	r0, sp, #8
   3e89c:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   3e89e:	b19b      	cbz	r3, 3e8c8 <flash_nrf_write+0x64>
	struct flash_context context = {
   3e8a0:	2301      	movs	r3, #1
   3e8a2:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   3e8a6:	4b0d      	ldr	r3, [pc, #52]	; (3e8dc <flash_nrf_write+0x78>)
   3e8a8:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   3e8ac:	f641 504c 	movw	r0, #7500	; 0x1d4c
   3e8b0:	f000 f894 	bl	3e9dc <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   3e8b4:	4668      	mov	r0, sp
   3e8b6:	f7e8 ff43 	bl	27740 <nrf_flash_sync_exe>
	return write_op(&context);
   3e8ba:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   3e8bc:	4806      	ldr	r0, [pc, #24]	; (3e8d8 <flash_nrf_write+0x74>)
   3e8be:	f002 fe51 	bl	41564 <z_impl_k_sem_give>
}
   3e8c2:	4620      	mov	r0, r4
   3e8c4:	b006      	add	sp, #24
   3e8c6:	bd70      	pop	{r4, r5, r6, pc}
	struct flash_context context = {
   3e8c8:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   3e8cc:	f7ff ff8c 	bl	3e7e8 <write_op>
   3e8d0:	e7f3      	b.n	3e8ba <flash_nrf_write+0x56>
		return -EINVAL;
   3e8d2:	f06f 0415 	mvn.w	r4, #21
   3e8d6:	e7f4      	b.n	3e8c2 <flash_nrf_write+0x5e>
   3e8d8:	20003670 	.word	0x20003670
   3e8dc:	0003e7e9 	.word	0x0003e7e9

0003e8e0 <time_slot_callback_work>:
{
   3e8e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   3e8e2:	9b07      	ldr	r3, [sp, #28]
	rc = op_desc->handler(op_desc->context);
   3e8e4:	e9d3 2000 	ldrd	r2, r0, [r3]
   3e8e8:	4790      	blx	r2
	if (rc != FLASH_OP_ONGOING) {
   3e8ea:	2801      	cmp	r0, #1
	rc = op_desc->handler(op_desc->context);
   3e8ec:	4604      	mov	r4, r0
	if (rc != FLASH_OP_ONGOING) {
   3e8ee:	d013      	beq.n	3e918 <time_slot_callback_work+0x38>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   3e8f0:	f10d 010f 	add.w	r1, sp, #15
   3e8f4:	f10d 000e 	add.w	r0, sp, #14
   3e8f8:	f7f4 fc74 	bl	331e4 <ll_timeslice_ticker_id_get>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   3e8fc:	2300      	movs	r3, #0
   3e8fe:	9300      	str	r3, [sp, #0]
   3e900:	4619      	mov	r1, r3
   3e902:	f89d 200f 	ldrb.w	r2, [sp, #15]
   3e906:	f89d 000e 	ldrb.w	r0, [sp, #14]
   3e90a:	f7f2 fb6d 	bl	30fe8 <ticker_stop>
		_ticker_sync_context.result = (rc == FLASH_OP_DONE) ? 0 : rc;
   3e90e:	4b03      	ldr	r3, [pc, #12]	; (3e91c <time_slot_callback_work+0x3c>)
   3e910:	60dc      	str	r4, [r3, #12]
   3e912:	4803      	ldr	r0, [pc, #12]	; (3e920 <time_slot_callback_work+0x40>)
   3e914:	f002 fe26 	bl	41564 <z_impl_k_sem_give>
}
   3e918:	b004      	add	sp, #16
   3e91a:	bd10      	pop	{r4, pc}
   3e91c:	200036a0 	.word	0x200036a0
   3e920:	20003688 	.word	0x20003688

0003e924 <time_slot_delay>:
{
   3e924:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3e928:	b08d      	sub	sp, #52	; 0x34
   3e92a:	4606      	mov	r6, r0
   3e92c:	460f      	mov	r7, r1
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   3e92e:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   3e932:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
{
   3e936:	4690      	mov	r8, r2
   3e938:	4699      	mov	r9, r3
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   3e93a:	f7f4 fc53 	bl	331e4 <ll_timeslice_ticker_id_get>
	err = ticker_start(instance_index, /* Radio instance ticker */
   3e93e:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   3e942:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   3e946:	9700      	str	r7, [sp, #0]
   3e948:	2400      	movs	r4, #0
   3e94a:	3501      	adds	r5, #1
   3e94c:	4633      	mov	r3, r6
   3e94e:	e9cd 4407 	strd	r4, r4, [sp, #28]
   3e952:	e9cd 8905 	strd	r8, r9, [sp, #20]
   3e956:	e9cd 4403 	strd	r4, r4, [sp, #12]
   3e95a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   3e95e:	b2ea      	uxtb	r2, r5
   3e960:	2101      	movs	r1, #1
   3e962:	f7f2 fab5 	bl	30ed0 <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   3e966:	f030 0302 	bics.w	r3, r0, #2
   3e96a:	d00d      	beq.n	3e988 <time_slot_delay+0x64>
		_ticker_sync_context.result = 0;
   3e96c:	4b08      	ldr	r3, [pc, #32]	; (3e990 <time_slot_delay+0x6c>)
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   3e96e:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
		_ticker_sync_context.result = 0;
   3e972:	60dc      	str	r4, [r3, #12]
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   3e974:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   3e978:	9400      	str	r4, [sp, #0]
   3e97a:	4623      	mov	r3, r4
   3e97c:	4621      	mov	r1, r4
   3e97e:	f7f2 fb33 	bl	30fe8 <ticker_stop>
   3e982:	4804      	ldr	r0, [pc, #16]	; (3e994 <time_slot_delay+0x70>)
   3e984:	f002 fdee 	bl	41564 <z_impl_k_sem_give>
}
   3e988:	b00d      	add	sp, #52	; 0x34
   3e98a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3e98e:	bf00      	nop
   3e990:	200036a0 	.word	0x200036a0
   3e994:	20003688 	.word	0x20003688

0003e998 <time_slot_callback_prepare>:
	time_slot_delay(ticks_at_expire,
   3e998:	9b01      	ldr	r3, [sp, #4]
   3e99a:	4a02      	ldr	r2, [pc, #8]	; (3e9a4 <time_slot_callback_prepare+0xc>)
   3e99c:	2131      	movs	r1, #49	; 0x31
   3e99e:	f7ff bfc1 	b.w	3e924 <time_slot_delay>
   3e9a2:	bf00      	nop
   3e9a4:	0003e9a9 	.word	0x0003e9a9

0003e9a8 <time_slot_callback_abort>:
{
   3e9a8:	b570      	push	{r4, r5, r6, lr}
   3e9aa:	9d05      	ldr	r5, [sp, #20]
   3e9ac:	4604      	mov	r4, r0
	ll_radio_state_abort();
   3e9ae:	f7f4 fc1f 	bl	331f0 <ll_radio_state_abort>
	time_slot_delay(ticks_at_expire,
   3e9b2:	462b      	mov	r3, r5
   3e9b4:	4620      	mov	r0, r4
   3e9b6:	4a03      	ldr	r2, [pc, #12]	; (3e9c4 <time_slot_callback_abort+0x1c>)
}
   3e9b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	time_slot_delay(ticks_at_expire,
   3e9bc:	2106      	movs	r1, #6
   3e9be:	f7ff bfb1 	b.w	3e924 <time_slot_delay>
   3e9c2:	bf00      	nop
   3e9c4:	0003e8e1 	.word	0x0003e8e1

0003e9c8 <nrf_flash_sync_init>:
{
   3e9c8:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   3e9ca:	2201      	movs	r2, #1
   3e9cc:	2100      	movs	r1, #0
   3e9ce:	4802      	ldr	r0, [pc, #8]	; (3e9d8 <nrf_flash_sync_init+0x10>)
   3e9d0:	f009 febd 	bl	4874e <z_impl_k_sem_init>
}
   3e9d4:	2000      	movs	r0, #0
   3e9d6:	bd08      	pop	{r3, pc}
   3e9d8:	20003688 	.word	0x20003688

0003e9dc <nrf_flash_sync_set_context>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
   3e9dc:	4b02      	ldr	r3, [pc, #8]	; (3e9e8 <nrf_flash_sync_set_context+0xc>)
   3e9de:	f2a0 62a4 	subw	r2, r0, #1700	; 0x6a4
	_ticker_sync_context.slot = duration;
   3e9e2:	e9c3 2000 	strd	r2, r0, [r3]
}
   3e9e6:	4770      	bx	lr
   3e9e8:	200036a0 	.word	0x200036a0

0003e9ec <nrf_flash_sync_get_timestamp_begin>:
{
   3e9ec:	b508      	push	{r3, lr}
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
   3e9ee:	f7f2 fb3d 	bl	3106c <ticker_ticks_now_get>
   3e9f2:	4b01      	ldr	r3, [pc, #4]	; (3e9f8 <nrf_flash_sync_get_timestamp_begin+0xc>)
   3e9f4:	6098      	str	r0, [r3, #8]
}
   3e9f6:	bd08      	pop	{r3, pc}
   3e9f8:	200036a0 	.word	0x200036a0

0003e9fc <random_byte_get>:
   3e9fc:	f04f 0320 	mov.w	r3, #32
   3ea00:	f3ef 8211 	mrs	r2, BASEPRI
   3ea04:	f383 8812 	msr	BASEPRI_MAX, r3
   3ea08:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   3ea0c:	4b09      	ldr	r3, [pc, #36]	; (3ea34 <random_byte_get+0x38>)
   3ea0e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   3ea12:	b161      	cbz	r1, 3ea2e <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   3ea14:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   3ea16:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   3ea1a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   3ea1e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   3ea22:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   3ea24:	f382 8811 	msr	BASEPRI, r2
   3ea28:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   3ea2c:	4770      	bx	lr
	int retval = -EAGAIN;
   3ea2e:	f06f 000a 	mvn.w	r0, #10
   3ea32:	e7f7      	b.n	3ea24 <random_byte_get+0x28>
   3ea34:	4000d000 	.word	0x4000d000

0003ea38 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   3ea38:	b5f0      	push	{r4, r5, r6, r7, lr}
   3ea3a:	4603      	mov	r3, r0
   3ea3c:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
   3ea3e:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
   3ea40:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
   3ea44:	f04f 0520 	mov.w	r5, #32
   3ea48:	f3ef 8211 	mrs	r2, BASEPRI
   3ea4c:	f385 8812 	msr	BASEPRI_MAX, r5
   3ea50:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   3ea54:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   3ea56:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   3ea5a:	1be4      	subs	r4, r4, r7
   3ea5c:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
   3ea60:	42a0      	cmp	r0, r4
		len = available;
   3ea62:	bf88      	it	hi
   3ea64:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   3ea66:	183e      	adds	r6, r7, r0
   3ea68:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
   3ea6c:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
   3ea6e:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
   3ea70:	f382 8811 	msr	BASEPRI, r2
   3ea74:	f3bf 8f6f 	isb	sy
   3ea78:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
   3ea7a:	428a      	cmp	r2, r1
   3ea7c:	d117      	bne.n	3eaae <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   3ea7e:	4577      	cmp	r7, lr
   3ea80:	d10d      	bne.n	3ea9e <rng_pool_get+0x66>
	__asm__ volatile(
   3ea82:	f04f 0120 	mov.w	r1, #32
   3ea86:	f3ef 8211 	mrs	r2, BASEPRI
   3ea8a:	f381 8812 	msr	BASEPRI_MAX, r1
   3ea8e:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   3ea92:	7819      	ldrb	r1, [r3, #0]
   3ea94:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
   3ea96:	f382 8811 	msr	BASEPRI, r2
   3ea9a:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
   3ea9e:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
   3eaa0:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   3eaa2:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   3eaa4:	bf22      	ittt	cs
   3eaa6:	4b06      	ldrcs	r3, [pc, #24]	; (3eac0 <rng_pool_get+0x88>)
   3eaa8:	2201      	movcs	r2, #1
   3eaaa:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   3eaac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   3eaae:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
   3eab0:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   3eab2:	7976      	ldrb	r6, [r6, #5]
   3eab4:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
   3eab8:	ea05 050c 	and.w	r5, r5, ip
   3eabc:	e7dd      	b.n	3ea7a <rng_pool_get+0x42>
   3eabe:	bf00      	nop
   3eac0:	4000d000 	.word	0x4000d000

0003eac4 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   3eac4:	43db      	mvns	r3, r3
{
   3eac6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   3eaca:	f013 0501 	ands.w	r5, r3, #1
{
   3eace:	460e      	mov	r6, r1
   3ead0:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   3ead2:	d004      	beq.n	3eade <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   3ead4:	4821      	ldr	r0, [pc, #132]	; (3eb5c <entropy_nrf5_get_entropy_isr+0x98>)
   3ead6:	f7ff ffaf 	bl	3ea38 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   3eada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   3eade:	b3a2      	cbz	r2, 3eb4a <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   3eae0:	f04f 0320 	mov.w	r3, #32
   3eae4:	f3ef 8811 	mrs	r8, BASEPRI
   3eae8:	f383 8812 	msr	BASEPRI_MAX, r3
   3eaec:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   3eaf0:	200d      	movs	r0, #13
   3eaf2:	f7eb fb2d 	bl	2a150 <arch_irq_is_enabled>
   3eaf6:	4607      	mov	r7, r0
		irq_disable(IRQN);
   3eaf8:	200d      	movs	r0, #13
   3eafa:	f7eb fb15 	bl	2a128 <arch_irq_disable>
	__asm__ volatile(
   3eafe:	f388 8811 	msr	BASEPRI, r8
   3eb02:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   3eb06:	f8df 8058 	ldr.w	r8, [pc, #88]	; 3eb60 <entropy_nrf5_get_entropy_isr+0x9c>
   3eb0a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 3eb64 <entropy_nrf5_get_entropy_isr+0xa0>
   3eb0e:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   3eb12:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   3eb16:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   3eb1a:	2301      	movs	r3, #1
   3eb1c:	f8c8 3000 	str.w	r3, [r8]
   3eb20:	4625      	mov	r5, r4
   3eb22:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   3eb26:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   3eb2a:	b183      	cbz	r3, 3eb4e <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   3eb2c:	f7ff ff66 	bl	3e9fc <random_byte_get>
			if (byte < 0) {
   3eb30:	1e03      	subs	r3, r0, #0
   3eb32:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   3eb36:	dbf6      	blt.n	3eb26 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   3eb38:	3d01      	subs	r5, #1
   3eb3a:	b2ad      	uxth	r5, r5
   3eb3c:	5573      	strb	r3, [r6, r5]
		} while (len);
   3eb3e:	2d00      	cmp	r5, #0
   3eb40:	d1f1      	bne.n	3eb26 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   3eb42:	b117      	cbz	r7, 3eb4a <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   3eb44:	200d      	movs	r0, #13
   3eb46:	f7eb fae1 	bl	2a10c <arch_irq_enable>
	return cnt;
   3eb4a:	4620      	mov	r0, r4
   3eb4c:	e7c5      	b.n	3eada <entropy_nrf5_get_entropy_isr+0x16>
   3eb4e:	f3bf 8f4f 	dsb	sy
				__WFE();
   3eb52:	bf20      	wfe
				__SEV();
   3eb54:	bf40      	sev
				__WFE();
   3eb56:	bf20      	wfe
   3eb58:	e7e5      	b.n	3eb26 <entropy_nrf5_get_entropy_isr+0x62>
   3eb5a:	bf00      	nop
   3eb5c:	200036e0 	.word	0x200036e0
   3eb60:	4000d000 	.word	0x4000d000
   3eb64:	e000e100 	.word	0xe000e100

0003eb68 <entropy_nrf5_get_entropy>:
{
   3eb68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   3eb6c:	4f12      	ldr	r7, [pc, #72]	; (3ebb8 <entropy_nrf5_get_entropy+0x50>)
   3eb6e:	460d      	mov	r5, r1
   3eb70:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   3eb72:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
   3eb76:	b914      	cbnz	r4, 3eb7e <entropy_nrf5_get_entropy+0x16>
}
   3eb78:	4620      	mov	r0, r4
   3eb7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3eb7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3eb82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3eb86:	4638      	mov	r0, r7
   3eb88:	f002 fd12 	bl	415b0 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   3eb8c:	4622      	mov	r2, r4
   3eb8e:	4629      	mov	r1, r5
   3eb90:	4640      	mov	r0, r8
   3eb92:	f7ff ff51 	bl	3ea38 <rng_pool_get>
   3eb96:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   3eb98:	4638      	mov	r0, r7
   3eb9a:	f002 fce3 	bl	41564 <z_impl_k_sem_give>
		if (bytes == 0U) {
   3eb9e:	b93e      	cbnz	r6, 3ebb0 <entropy_nrf5_get_entropy+0x48>
	return z_impl_k_sem_take(sem, timeout);
   3eba0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3eba4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3eba8:	4804      	ldr	r0, [pc, #16]	; (3ebbc <entropy_nrf5_get_entropy+0x54>)
   3ebaa:	f002 fd01 	bl	415b0 <z_impl_k_sem_take>
	while (len) {
   3ebae:	e7e6      	b.n	3eb7e <entropy_nrf5_get_entropy+0x16>
		len -= bytes;
   3ebb0:	1ba4      	subs	r4, r4, r6
   3ebb2:	b2a4      	uxth	r4, r4
		buf += bytes;
   3ebb4:	4435      	add	r5, r6
   3ebb6:	e7de      	b.n	3eb76 <entropy_nrf5_get_entropy+0xe>
   3ebb8:	200036b0 	.word	0x200036b0
   3ebbc:	200036c8 	.word	0x200036c8

0003ebc0 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   3ebc0:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   3ebc2:	4c19      	ldr	r4, [pc, #100]	; (3ec28 <entropy_nrf5_init+0x68>)
   3ebc4:	2201      	movs	r2, #1
   3ebc6:	4611      	mov	r1, r2
   3ebc8:	4620      	mov	r0, r4
   3ebca:	f009 fdc0 	bl	4874e <z_impl_k_sem_init>
   3ebce:	2201      	movs	r2, #1
   3ebd0:	2100      	movs	r1, #0
   3ebd2:	f104 0018 	add.w	r0, r4, #24
   3ebd6:	f009 fdba 	bl	4874e <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   3ebda:	f240 4307 	movw	r3, #1031	; 0x407
   3ebde:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   3ebe2:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   3ebe6:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   3ebe8:	230c      	movs	r3, #12
   3ebea:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   3ebee:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   3ebf0:	4b0e      	ldr	r3, [pc, #56]	; (3ec2c <entropy_nrf5_init+0x6c>)
   3ebf2:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   3ebf6:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   3ebfa:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   3ebfe:	f042 0201 	orr.w	r2, r2, #1
   3ec02:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   3ec06:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   3ec08:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   3ec0c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   3ec10:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   3ec14:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   3ec16:	6019      	str	r1, [r3, #0]
   3ec18:	200d      	movs	r0, #13
   3ec1a:	f7eb faa7 	bl	2a16c <z_arm_irq_priority_set>
	irq_enable(IRQN);
   3ec1e:	200d      	movs	r0, #13
   3ec20:	f7eb fa74 	bl	2a10c <arch_irq_enable>

	return 0;
}
   3ec24:	4628      	mov	r0, r5
   3ec26:	bd38      	pop	{r3, r4, r5, pc}
   3ec28:	200036b0 	.word	0x200036b0
   3ec2c:	4000d000 	.word	0x4000d000

0003ec30 <isr>:
{
   3ec30:	b510      	push	{r4, lr}
	byte = random_byte_get();
   3ec32:	f7ff fee3 	bl	3e9fc <random_byte_get>
	if (byte < 0) {
   3ec36:	2800      	cmp	r0, #0
   3ec38:	db20      	blt.n	3ec7c <isr+0x4c>
	uint8_t last  = rngp->last;
   3ec3a:	4b17      	ldr	r3, [pc, #92]	; (3ec98 <isr+0x68>)
   3ec3c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   3ec40:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   3ec44:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   3ec48:	1b14      	subs	r4, r2, r4
   3ec4a:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   3ec4e:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   3ec50:	d10d      	bne.n	3ec6e <isr+0x3e>
	uint8_t last  = rngp->last;
   3ec52:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   3ec56:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   3ec5a:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   3ec5e:	1b14      	subs	r4, r2, r4
   3ec60:	ea31 0404 	bics.w	r4, r1, r4
   3ec64:	d10b      	bne.n	3ec7e <isr+0x4e>
   3ec66:	4b0d      	ldr	r3, [pc, #52]	; (3ec9c <isr+0x6c>)
   3ec68:	2201      	movs	r2, #1
   3ec6a:	605a      	str	r2, [r3, #4]
}
   3ec6c:	e00e      	b.n	3ec8c <isr+0x5c>
	rngp->buffer[last] = byte;
   3ec6e:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   3ec70:	3201      	adds	r2, #1
   3ec72:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   3ec74:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   3ec78:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   3ec7c:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   3ec7e:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   3ec80:	3201      	adds	r2, #1
   3ec82:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   3ec84:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   3ec88:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   3ec8c:	4804      	ldr	r0, [pc, #16]	; (3eca0 <isr+0x70>)
}
   3ec8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3ec92:	f002 bc67 	b.w	41564 <z_impl_k_sem_give>
   3ec96:	bf00      	nop
   3ec98:	200036b0 	.word	0x200036b0
   3ec9c:	4000d000 	.word	0x4000d000
   3eca0:	200036c8 	.word	0x200036c8

0003eca4 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   3eca4:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   3eca6:	2301      	movs	r3, #1
   3eca8:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3ecaa:	4a0e      	ldr	r2, [pc, #56]	; (3ece4 <compare_int_lock+0x40>)
   3ecac:	f3bf 8f5b 	dmb	ish
   3ecb0:	43dc      	mvns	r4, r3
   3ecb2:	e852 1f00 	ldrex	r1, [r2]
   3ecb6:	ea01 0504 	and.w	r5, r1, r4
   3ecba:	e842 5600 	strex	r6, r5, [r2]
   3ecbe:	2e00      	cmp	r6, #0
   3ecc0:	d1f7      	bne.n	3ecb2 <compare_int_lock+0xe>
   3ecc2:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   3ecc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   3ecca:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   3eccc:	4806      	ldr	r0, [pc, #24]	; (3ece8 <compare_int_lock+0x44>)
   3ecce:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   3ecd2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   3ecd6:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   3ecda:	420b      	tst	r3, r1
}
   3ecdc:	bf14      	ite	ne
   3ecde:	2001      	movne	r0, #1
   3ece0:	2000      	moveq	r0, #0
   3ece2:	bd70      	pop	{r4, r5, r6, pc}
   3ece4:	20003708 	.word	0x20003708
   3ece8:	40011000 	.word	0x40011000

0003ecec <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   3ecec:	491b      	ldr	r1, [pc, #108]	; (3ed5c <sys_clock_timeout_handler+0x70>)
{
   3ecee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ecf0:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   3ecf2:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   3ecf6:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   3ecf8:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   3ecfc:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   3ed00:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   3ed02:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   3ed06:	d30f      	bcc.n	3ed28 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   3ed08:	f003 fa94 	bl	42234 <sys_clock_announce>
    return p_reg->CC[ch];
   3ed0c:	00a3      	lsls	r3, r4, #2
   3ed0e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3ed12:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   3ed16:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   3ed1a:	4295      	cmp	r5, r2
   3ed1c:	d11d      	bne.n	3ed5a <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
   3ed1e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   3ed22:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
   3ed26:	e012      	b.n	3ed4e <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   3ed28:	4b0d      	ldr	r3, [pc, #52]	; (3ed60 <sys_clock_timeout_handler+0x74>)
   3ed2a:	681b      	ldr	r3, [r3, #0]
   3ed2c:	0a1a      	lsrs	r2, r3, #8
   3ed2e:	061b      	lsls	r3, r3, #24
   3ed30:	195e      	adds	r6, r3, r5
   3ed32:	4b0c      	ldr	r3, [pc, #48]	; (3ed64 <sys_clock_timeout_handler+0x78>)
   3ed34:	f142 0700 	adc.w	r7, r2, #0
   3ed38:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   3ed3c:	f003 fa7a 	bl	42234 <sys_clock_announce>
    return p_reg->CC[ch];
   3ed40:	4a09      	ldr	r2, [pc, #36]	; (3ed68 <sys_clock_timeout_handler+0x7c>)
   3ed42:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   3ed46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
   3ed4a:	429d      	cmp	r5, r3
   3ed4c:	d105      	bne.n	3ed5a <sys_clock_timeout_handler+0x6e>
    p_reg->EVTENSET = mask;
   3ed4e:	4a06      	ldr	r2, [pc, #24]	; (3ed68 <sys_clock_timeout_handler+0x7c>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   3ed50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   3ed54:	40a3      	lsls	r3, r4
   3ed56:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   3ed5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3ed5c:	200017b0 	.word	0x200017b0
   3ed60:	2000370c 	.word	0x2000370c
   3ed64:	200017b8 	.word	0x200017b8
   3ed68:	40011000 	.word	0x40011000

0003ed6c <compare_int_unlock>:
	if (key) {
   3ed6c:	b311      	cbz	r1, 3edb4 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3ed6e:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   3ed72:	2301      	movs	r3, #1
   3ed74:	4a10      	ldr	r2, [pc, #64]	; (3edb8 <compare_int_unlock+0x4c>)
   3ed76:	4083      	lsls	r3, r0
   3ed78:	e852 cf00 	ldrex	ip, [r2]
   3ed7c:	ea4c 0c03 	orr.w	ip, ip, r3
   3ed80:	e842 c100 	strex	r1, ip, [r2]
   3ed84:	2900      	cmp	r1, #0
   3ed86:	d1f7      	bne.n	3ed78 <compare_int_unlock+0xc>
   3ed88:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   3ed8c:	4a0b      	ldr	r2, [pc, #44]	; (3edbc <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   3ed8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   3ed92:	4083      	lsls	r3, r0
   3ed94:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3ed98:	4b09      	ldr	r3, [pc, #36]	; (3edc0 <compare_int_unlock+0x54>)
   3ed9a:	f3bf 8f5b 	dmb	ish
   3ed9e:	681b      	ldr	r3, [r3, #0]
   3eda0:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   3eda4:	40c3      	lsrs	r3, r0
   3eda6:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   3eda8:	bf42      	ittt	mi
   3edaa:	4b06      	ldrmi	r3, [pc, #24]	; (3edc4 <compare_int_unlock+0x58>)
   3edac:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   3edb0:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   3edb4:	4770      	bx	lr
   3edb6:	bf00      	nop
   3edb8:	20003708 	.word	0x20003708
   3edbc:	40011000 	.word	0x40011000
   3edc0:	20003704 	.word	0x20003704
   3edc4:	e000e100 	.word	0xe000e100

0003edc8 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   3edc8:	4b0d      	ldr	r3, [pc, #52]	; (3ee00 <z_nrf_rtc_timer_read+0x38>)
   3edca:	6818      	ldr	r0, [r3, #0]
   3edcc:	0a01      	lsrs	r1, r0, #8
   3edce:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   3edd0:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   3edd4:	4b0b      	ldr	r3, [pc, #44]	; (3ee04 <z_nrf_rtc_timer_read+0x3c>)
   3edd6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   3edda:	1818      	adds	r0, r3, r0
   3eddc:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   3ede0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   3ede4:	d20a      	bcs.n	3edfc <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   3ede6:	4b08      	ldr	r3, [pc, #32]	; (3ee08 <z_nrf_rtc_timer_read+0x40>)
   3ede8:	e9d3 2300 	ldrd	r2, r3, [r3]
   3edec:	4290      	cmp	r0, r2
   3edee:	eb71 0303 	sbcs.w	r3, r1, r3
   3edf2:	d203      	bcs.n	3edfc <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   3edf4:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   3edf8:	f141 0100 	adc.w	r1, r1, #0
}
   3edfc:	4770      	bx	lr
   3edfe:	bf00      	nop
   3ee00:	2000370c 	.word	0x2000370c
   3ee04:	40011000 	.word	0x40011000
   3ee08:	200017b8 	.word	0x200017b8

0003ee0c <compare_set>:
{
   3ee0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ee10:	4614      	mov	r4, r2
   3ee12:	461d      	mov	r5, r3
   3ee14:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
   3ee16:	f7ff ff45 	bl	3eca4 <compare_int_lock>
   3ee1a:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   3ee1c:	f7ff ffd4 	bl	3edc8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   3ee20:	42a0      	cmp	r0, r4
   3ee22:	eb71 0305 	sbcs.w	r3, r1, r5
   3ee26:	d27a      	bcs.n	3ef1e <compare_set+0x112>
		if (target_time - curr_time > COUNTER_SPAN) {
   3ee28:	4b46      	ldr	r3, [pc, #280]	; (3ef44 <compare_set+0x138>)
   3ee2a:	1a20      	subs	r0, r4, r0
   3ee2c:	eb65 0101 	sbc.w	r1, r5, r1
   3ee30:	4298      	cmp	r0, r3
   3ee32:	f171 0100 	sbcs.w	r1, r1, #0
   3ee36:	f080 8081 	bcs.w	3ef3c <compare_set+0x130>
		if (target_time != cc_data[chan].target_time) {
   3ee3a:	4b43      	ldr	r3, [pc, #268]	; (3ef48 <compare_set+0x13c>)
   3ee3c:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   3ee40:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   3ee44:	429d      	cmp	r5, r3
   3ee46:	bf08      	it	eq
   3ee48:	4294      	cmpeq	r4, r2
   3ee4a:	d053      	beq.n	3eef4 <compare_set+0xe8>
   3ee4c:	ea4f 0a87 	mov.w	sl, r7, lsl #2
   3ee50:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   3ee54:	f107 0950 	add.w	r9, r7, #80	; 0x50
   3ee58:	f50a 3a88 	add.w	sl, sl, #69632	; 0x11000
   3ee5c:	ea4f 0989 	mov.w	r9, r9, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   3ee60:	fa1f f989 	uxth.w	r9, r9
	return absolute_time & COUNTER_MAX;
   3ee64:	f024 487f 	bic.w	r8, r4, #4278190080	; 0xff000000
   3ee68:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   3ee6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    return p_reg->CC[ch];
   3ee70:	f8da 0540 	ldr.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
   3ee74:	4a35      	ldr	r2, [pc, #212]	; (3ef4c <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   3ee76:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   3ee7a:	40bb      	lsls	r3, r7
	uint32_t cc_val = abs_val & COUNTER_MAX;
   3ee7c:	4646      	mov	r6, r8
     return p_reg->COUNTER;
   3ee7e:	f8d2 b504 	ldr.w	fp, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   3ee82:	eba0 000b 	sub.w	r0, r0, fp
   3ee86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   3ee8a:	f02b 417f 	bic.w	r1, fp, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   3ee8e:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   3ee90:	f8ca 1540 	str.w	r1, [sl, #1344]	; 0x540
   3ee94:	d105      	bne.n	3eea2 <compare_set+0x96>
   3ee96:	9301      	str	r3, [sp, #4]
	z_impl_k_busy_wait(usec_to_wait);
   3ee98:	2013      	movs	r0, #19
   3ee9a:	f009 feac 	bl	48bf6 <z_impl_k_busy_wait>
   3ee9e:	4a2b      	ldr	r2, [pc, #172]	; (3ef4c <compare_set+0x140>)
   3eea0:	9b01      	ldr	r3, [sp, #4]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   3eea2:	f10b 0c02 	add.w	ip, fp, #2
	return (a - b) & COUNTER_MAX;
   3eea6:	eba6 000c 	sub.w	r0, r6, ip
   3eeaa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   3eeae:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   3eeb2:	bf88      	it	hi
   3eeb4:	4666      	movhi	r6, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   3eeb6:	2000      	movs	r0, #0
   3eeb8:	f8c9 0000 	str.w	r0, [r9]
   3eebc:	f8d9 0000 	ldr.w	r0, [r9]
    p_reg->EVTENSET = mask;
   3eec0:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   3eec4:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   3eec8:	f8ca 0540 	str.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
   3eecc:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	} while ((now2 != now) &&
   3eed0:	4583      	cmp	fp, r0
   3eed2:	d006      	beq.n	3eee2 <compare_set+0xd6>
	return (a - b) & COUNTER_MAX;
   3eed4:	1a30      	subs	r0, r6, r0
   3eed6:	3802      	subs	r0, #2
   3eed8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   3eedc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   3eee0:	d81b      	bhi.n	3ef1a <compare_set+0x10e>
	return (a - b) & COUNTER_MAX;
   3eee2:	eba6 0608 	sub.w	r6, r6, r8
   3eee6:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   3eeea:	1936      	adds	r6, r6, r4
   3eeec:	f145 0300 	adc.w	r3, r5, #0
   3eef0:	4634      	mov	r4, r6
   3eef2:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
   3eef4:	4914      	ldr	r1, [pc, #80]	; (3ef48 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   3eef6:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   3eef8:	013b      	lsls	r3, r7, #4
   3eefa:	eb01 1207 	add.w	r2, r1, r7, lsl #4
	cc_data[chan].callback = handler;
   3eefe:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   3ef00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   3ef02:	6053      	str	r3, [r2, #4]
	cc_data[chan].target_time = target_time;
   3ef04:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
   3ef08:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   3ef0a:	4638      	mov	r0, r7
   3ef0c:	9900      	ldr	r1, [sp, #0]
   3ef0e:	f7ff ff2d 	bl	3ed6c <compare_int_unlock>
}
   3ef12:	4620      	mov	r0, r4
   3ef14:	b003      	add	sp, #12
   3ef16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ef1a:	4630      	mov	r0, r6
   3ef1c:	e7af      	b.n	3ee7e <compare_set+0x72>
		atomic_or(&force_isr_mask, BIT(chan));
   3ef1e:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3ef20:	4a0b      	ldr	r2, [pc, #44]	; (3ef50 <compare_set+0x144>)
   3ef22:	f3bf 8f5b 	dmb	ish
   3ef26:	40bb      	lsls	r3, r7
   3ef28:	e852 0f00 	ldrex	r0, [r2]
   3ef2c:	4318      	orrs	r0, r3
   3ef2e:	e842 0100 	strex	r1, r0, [r2]
   3ef32:	2900      	cmp	r1, #0
   3ef34:	d1f8      	bne.n	3ef28 <compare_set+0x11c>
   3ef36:	f3bf 8f5b 	dmb	ish
   3ef3a:	e7db      	b.n	3eef4 <compare_set+0xe8>
			return -EINVAL;
   3ef3c:	f06f 0415 	mvn.w	r4, #21
   3ef40:	e7e3      	b.n	3ef0a <compare_set+0xfe>
   3ef42:	bf00      	nop
   3ef44:	01000001 	.word	0x01000001
   3ef48:	200017a0 	.word	0x200017a0
   3ef4c:	40011000 	.word	0x40011000
   3ef50:	20003704 	.word	0x20003704

0003ef54 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   3ef54:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   3ef56:	4b19      	ldr	r3, [pc, #100]	; (3efbc <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   3ef58:	4d19      	ldr	r5, [pc, #100]	; (3efc0 <sys_clock_driver_init+0x6c>)
   3ef5a:	2400      	movs	r4, #0
   3ef5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3ef60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   3ef64:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   3ef68:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   3ef6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   3ef70:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   3ef74:	4b13      	ldr	r3, [pc, #76]	; (3efc4 <sys_clock_driver_init+0x70>)
   3ef76:	2602      	movs	r6, #2
   3ef78:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   3ef7c:	2101      	movs	r1, #1
   3ef7e:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   3ef82:	2011      	movs	r0, #17
   3ef84:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   3ef88:	4622      	mov	r2, r4
   3ef8a:	f7eb f8ef 	bl	2a16c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   3ef8e:	2011      	movs	r0, #17
   3ef90:	f7eb f8bc 	bl	2a10c <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   3ef94:	4a0c      	ldr	r2, [pc, #48]	; (3efc8 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   3ef96:	2301      	movs	r3, #1
   3ef98:	60ab      	str	r3, [r5, #8]
   3ef9a:	602b      	str	r3, [r5, #0]
   3ef9c:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   3ef9e:	4b0b      	ldr	r3, [pc, #44]	; (3efcc <sys_clock_driver_init+0x78>)
   3efa0:	4a0b      	ldr	r2, [pc, #44]	; (3efd0 <sys_clock_driver_init+0x7c>)
   3efa2:	9300      	str	r3, [sp, #0]
   3efa4:	9401      	str	r4, [sp, #4]
   3efa6:	2300      	movs	r3, #0
   3efa8:	4620      	mov	r0, r4
   3efaa:	f7ff ff2f 	bl	3ee0c <compare_set>

	z_nrf_clock_control_lf_on(mode);
   3efae:	4630      	mov	r0, r6
   3efb0:	f7ff f964 	bl	3e27c <z_nrf_clock_control_lf_on>

	return 0;
}
   3efb4:	4620      	mov	r0, r4
   3efb6:	b002      	add	sp, #8
   3efb8:	bd70      	pop	{r4, r5, r6, pc}
   3efba:	bf00      	nop
   3efbc:	200017a0 	.word	0x200017a0
   3efc0:	40011000 	.word	0x40011000
   3efc4:	e000e100 	.word	0xe000e100
   3efc8:	20003708 	.word	0x20003708
   3efcc:	0003eced 	.word	0x0003eced
   3efd0:	007fffff 	.word	0x007fffff

0003efd4 <rtc_nrf_isr>:
{
   3efd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   3efd8:	4c33      	ldr	r4, [pc, #204]	; (3f0a8 <rtc_nrf_isr+0xd4>)
   3efda:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   3efde:	079a      	lsls	r2, r3, #30
   3efe0:	d50b      	bpl.n	3effa <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3efe2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   3efe6:	b143      	cbz	r3, 3effa <rtc_nrf_isr+0x26>
		overflow_cnt++;
   3efe8:	4a30      	ldr	r2, [pc, #192]	; (3f0ac <rtc_nrf_isr+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   3efea:	2300      	movs	r3, #0
   3efec:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   3eff0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   3eff4:	6813      	ldr	r3, [r2, #0]
   3eff6:	3301      	adds	r3, #1
   3eff8:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   3effa:	f04f 0320 	mov.w	r3, #32
   3effe:	f3ef 8211 	mrs	r2, BASEPRI
   3f002:	f383 8812 	msr	BASEPRI_MAX, r3
   3f006:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   3f00a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   3f00e:	03db      	lsls	r3, r3, #15
   3f010:	d529      	bpl.n	3f066 <rtc_nrf_isr+0x92>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3f012:	f3bf 8f5b 	dmb	ish
   3f016:	4b26      	ldr	r3, [pc, #152]	; (3f0b0 <rtc_nrf_isr+0xdc>)
   3f018:	e853 1f00 	ldrex	r1, [r3]
   3f01c:	f021 0001 	bic.w	r0, r1, #1
   3f020:	e843 0500 	strex	r5, r0, [r3]
   3f024:	2d00      	cmp	r5, #0
   3f026:	d1f7      	bne.n	3f018 <rtc_nrf_isr+0x44>
   3f028:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   3f02c:	b911      	cbnz	r1, 3f034 <rtc_nrf_isr+0x60>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3f02e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   3f032:	b1c3      	cbz	r3, 3f066 <rtc_nrf_isr+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   3f034:	2500      	movs	r5, #0
   3f036:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   3f03a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
	__asm__ volatile(
   3f03e:	f382 8811 	msr	BASEPRI, r2
   3f042:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
   3f046:	f7ff febf 	bl	3edc8 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   3f04a:	f04f 0320 	mov.w	r3, #32
   3f04e:	f3ef 8211 	mrs	r2, BASEPRI
   3f052:	f383 8812 	msr	BASEPRI_MAX, r3
   3f056:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   3f05a:	4b16      	ldr	r3, [pc, #88]	; (3f0b4 <rtc_nrf_isr+0xe0>)
   3f05c:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   3f060:	42b0      	cmp	r0, r6
   3f062:	41b9      	sbcs	r1, r7
   3f064:	d206      	bcs.n	3f074 <rtc_nrf_isr+0xa0>
	__asm__ volatile(
   3f066:	f382 8811 	msr	BASEPRI, r2
   3f06a:	f3bf 8f6f 	isb	sy
}
   3f06e:	b003      	add	sp, #12
   3f070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   3f074:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   3f078:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
   3f07c:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   3f080:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
   3f084:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
   3f086:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   3f08a:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
   3f08e:	f382 8811 	msr	BASEPRI, r2
   3f092:	f3bf 8f6f 	isb	sy
		if (handler) {
   3f096:	2900      	cmp	r1, #0
   3f098:	d0e9      	beq.n	3f06e <rtc_nrf_isr+0x9a>
			handler(chan, expire_time, user_context);
   3f09a:	9000      	str	r0, [sp, #0]
   3f09c:	4632      	mov	r2, r6
   3f09e:	463b      	mov	r3, r7
   3f0a0:	4628      	mov	r0, r5
   3f0a2:	4788      	blx	r1
}
   3f0a4:	e7e3      	b.n	3f06e <rtc_nrf_isr+0x9a>
   3f0a6:	bf00      	nop
   3f0a8:	40011000 	.word	0x40011000
   3f0ac:	2000370c 	.word	0x2000370c
   3f0b0:	20003704 	.word	0x20003704
   3f0b4:	200017a0 	.word	0x200017a0

0003f0b8 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   3f0b8:	1c43      	adds	r3, r0, #1
{
   3f0ba:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   3f0bc:	d021      	beq.n	3f102 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   3f0be:	2801      	cmp	r0, #1
   3f0c0:	dd21      	ble.n	3f106 <sys_clock_set_timeout+0x4e>
   3f0c2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   3f0c6:	da20      	bge.n	3f10a <sys_clock_set_timeout+0x52>
   3f0c8:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   3f0ca:	f7ff fe7d 	bl	3edc8 <z_nrf_rtc_timer_read>
   3f0ce:	4b10      	ldr	r3, [pc, #64]	; (3f110 <sys_clock_set_timeout+0x58>)
   3f0d0:	e9d3 1300 	ldrd	r1, r3, [r3]
   3f0d4:	1a42      	subs	r2, r0, r1
		ticks = 0;
   3f0d6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
	if (cyc > MAX_CYCLES) {
   3f0da:	480e      	ldr	r0, [pc, #56]	; (3f114 <sys_clock_set_timeout+0x5c>)
		ticks = 0;
   3f0dc:	bf28      	it	cs
   3f0de:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   3f0e0:	3201      	adds	r2, #1
   3f0e2:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
   3f0e4:	4282      	cmp	r2, r0
   3f0e6:	bf28      	it	cs
   3f0e8:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
   3f0ea:	1852      	adds	r2, r2, r1
   3f0ec:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   3f0f0:	4909      	ldr	r1, [pc, #36]	; (3f118 <sys_clock_set_timeout+0x60>)
   3f0f2:	9001      	str	r0, [sp, #4]
   3f0f4:	9100      	str	r1, [sp, #0]
   3f0f6:	f143 0300 	adc.w	r3, r3, #0
   3f0fa:	f7ff fe87 	bl	3ee0c <compare_set>
}
   3f0fe:	b002      	add	sp, #8
   3f100:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   3f102:	4804      	ldr	r0, [pc, #16]	; (3f114 <sys_clock_set_timeout+0x5c>)
   3f104:	e7e0      	b.n	3f0c8 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   3f106:	2400      	movs	r4, #0
   3f108:	e7df      	b.n	3f0ca <sys_clock_set_timeout+0x12>
   3f10a:	4c02      	ldr	r4, [pc, #8]	; (3f114 <sys_clock_set_timeout+0x5c>)
   3f10c:	e7dd      	b.n	3f0ca <sys_clock_set_timeout+0x12>
   3f10e:	bf00      	nop
   3f110:	200017b0 	.word	0x200017b0
   3f114:	007fffff 	.word	0x007fffff
   3f118:	0003eced 	.word	0x0003eced

0003f11c <sys_clock_elapsed>:
{
   3f11c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   3f11e:	f7ff fe53 	bl	3edc8 <z_nrf_rtc_timer_read>
   3f122:	4b02      	ldr	r3, [pc, #8]	; (3f12c <sys_clock_elapsed+0x10>)
   3f124:	681b      	ldr	r3, [r3, #0]
}
   3f126:	1ac0      	subs	r0, r0, r3
   3f128:	bd08      	pop	{r3, pc}
   3f12a:	bf00      	nop
   3f12c:	200017b0 	.word	0x200017b0

0003f130 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   3f130:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   3f134:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   3f138:	2a08      	cmp	r2, #8
   3f13a:	d106      	bne.n	3f14a <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   3f13c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   3f140:	2b05      	cmp	r3, #5
   3f142:	d802      	bhi.n	3f14a <nrf52_errata_103+0x1a>
   3f144:	4a02      	ldr	r2, [pc, #8]	; (3f150 <nrf52_errata_103+0x20>)
   3f146:	5cd0      	ldrb	r0, [r2, r3]
   3f148:	4770      	bx	lr
                        return false;
   3f14a:	2000      	movs	r0, #0
}
   3f14c:	4770      	bx	lr
   3f14e:	bf00      	nop
   3f150:	0004b15f 	.word	0x0004b15f

0003f154 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   3f154:	4a02      	ldr	r2, [pc, #8]	; (3f160 <nvmc_wait+0xc>)
   3f156:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   3f15a:	2b00      	cmp	r3, #0
   3f15c:	d0fb      	beq.n	3f156 <nvmc_wait+0x2>
}
   3f15e:	4770      	bx	lr
   3f160:	4001e000 	.word	0x4001e000

0003f164 <SystemInit>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   3f164:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   3f168:	b510      	push	{r4, lr}
            if (var1 == 0x08)
   3f16a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   3f16e:	2a08      	cmp	r2, #8
   3f170:	d14e      	bne.n	3f210 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
   3f172:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   3f176:	2100      	movs	r1, #0
   3f178:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   3f17c:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   3f180:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   3f184:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
   3f188:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
   3f18c:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   3f190:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
   3f194:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   3f198:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
   3f19c:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   3f1a0:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   3f1a4:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   3f1a8:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
   3f1ac:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   3f1b0:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   3f1b4:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   3f1b8:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
   3f1bc:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   3f1c0:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
   3f1c4:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   3f1c8:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
   3f1cc:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   3f1d0:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
   3f1d4:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   3f1d8:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
   3f1dc:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   3f1e0:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
   3f1e4:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   3f1e8:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
   3f1ec:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   3f1f0:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
   3f1f4:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   3f1f8:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
   3f1fc:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   3f200:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
   3f204:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   3f208:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
   3f20c:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   3f210:	f7ff ff8e 	bl	3f130 <nrf52_errata_103>
   3f214:	b118      	cbz	r0, 3f21e <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   3f216:	4b3b      	ldr	r3, [pc, #236]	; (3f304 <__kernel_ram_size+0x8c>)
   3f218:	4a3b      	ldr	r2, [pc, #236]	; (3f308 <__kernel_ram_size+0x90>)
   3f21a:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   3f21e:	f7ff ff87 	bl	3f130 <nrf52_errata_103>
   3f222:	b118      	cbz	r0, 3f22c <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   3f224:	4b39      	ldr	r3, [pc, #228]	; (3f30c <__kernel_ram_size+0x94>)
   3f226:	22fb      	movs	r2, #251	; 0xfb
   3f228:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   3f22c:	f7ff ff80 	bl	3f130 <nrf52_errata_103>
   3f230:	b170      	cbz	r0, 3f250 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   3f232:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   3f236:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3f23a:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   3f23e:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   3f242:	f022 020f 	bic.w	r2, r2, #15
   3f246:	f003 030f 	and.w	r3, r3, #15
   3f24a:	4313      	orrs	r3, r2
   3f24c:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   3f250:	f7ff ff6e 	bl	3f130 <nrf52_errata_103>
   3f254:	b120      	cbz	r0, 3f260 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   3f256:	4b2e      	ldr	r3, [pc, #184]	; (3f310 <__kernel_ram_size+0x98>)
   3f258:	f44f 7200 	mov.w	r2, #512	; 0x200
   3f25c:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   3f260:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   3f264:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   3f268:	2b08      	cmp	r3, #8
   3f26a:	d11a      	bne.n	3f2a2 <__kernel_ram_size+0x2a>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   3f26c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3f270:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   3f274:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   3f276:	bf44      	itt	mi
   3f278:	f06f 0201 	mvnmi.w	r2, #1
   3f27c:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   3f280:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3f284:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
   3f288:	2b05      	cmp	r3, #5
   3f28a:	d802      	bhi.n	3f292 <__kernel_ram_size+0x1a>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   3f28c:	4a21      	ldr	r2, [pc, #132]	; (3f314 <__kernel_ram_size+0x9c>)
   3f28e:	5cd3      	ldrb	r3, [r2, r3]
   3f290:	b13b      	cbz	r3, 3f2a2 <__kernel_ram_size+0x2a>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   3f292:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   3f296:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   3f29a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3f29e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   3f2a2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   3f2a6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   3f2aa:	2a00      	cmp	r2, #0
   3f2ac:	db03      	blt.n	3f2b6 <__kernel_ram_size+0x3e>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   3f2ae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   3f2b2:	2b00      	cmp	r3, #0
   3f2b4:	da22      	bge.n	3f2fc <__kernel_ram_size+0x84>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   3f2b6:	4918      	ldr	r1, [pc, #96]	; (3f318 <__kernel_ram_size+0xa0>)
   3f2b8:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   3f2ba:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   3f2be:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   3f2c2:	2412      	movs	r4, #18
    nvmc_wait();
   3f2c4:	f7ff ff46 	bl	3f154 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   3f2c8:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   3f2cc:	f7ff ff42 	bl	3f154 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   3f2d0:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   3f2d4:	f7ff ff3e 	bl	3f154 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   3f2d8:	2300      	movs	r3, #0
   3f2da:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   3f2de:	f7ff ff39 	bl	3f154 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   3f2e2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   3f2e6:	490d      	ldr	r1, [pc, #52]	; (3f31c <__kernel_ram_size+0xa4>)
   3f2e8:	4b0d      	ldr	r3, [pc, #52]	; (3f320 <__kernel_ram_size+0xa8>)
   3f2ea:	68ca      	ldr	r2, [r1, #12]
   3f2ec:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   3f2f0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   3f2f2:	60cb      	str	r3, [r1, #12]
   3f2f4:	f3bf 8f4f 	dsb	sy
    __NOP();
   3f2f8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   3f2fa:	e7fd      	b.n	3f2f8 <__kernel_ram_size+0x80>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   3f2fc:	4b09      	ldr	r3, [pc, #36]	; (3f324 <__kernel_ram_size+0xac>)
   3f2fe:	4a0a      	ldr	r2, [pc, #40]	; (3f328 <__kernel_ram_size+0xb0>)
   3f300:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   3f302:	bd10      	pop	{r4, pc}
   3f304:	40005000 	.word	0x40005000
   3f308:	00038148 	.word	0x00038148
   3f30c:	4000f000 	.word	0x4000f000
   3f310:	40029000 	.word	0x40029000
   3f314:	0004b159 	.word	0x0004b159
   3f318:	4001e000 	.word	0x4001e000
   3f31c:	e000ed00 	.word	0xe000ed00
   3f320:	05fa0004 	.word	0x05fa0004
   3f324:	20000810 	.word	0x20000810
   3f328:	03d09000 	.word	0x03d09000

0003f32c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   3f32c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   3f32e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   3f330:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   3f332:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   3f336:	fab2 f382 	clz	r3, r2
   3f33a:	f1c3 031f 	rsb	r3, r3, #31
   3f33e:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   3f340:	fa05 f403 	lsl.w	r4, r5, r3
   3f344:	ea22 0404 	bic.w	r4, r2, r4
   3f348:	e850 6f00 	ldrex	r6, [r0]
   3f34c:	4296      	cmp	r6, r2
   3f34e:	d104      	bne.n	3f35a <nrfx_flag32_alloc+0x2e>
   3f350:	e840 4c00 	strex	ip, r4, [r0]
   3f354:	f1bc 0f00 	cmp.w	ip, #0
   3f358:	d1f6      	bne.n	3f348 <nrfx_flag32_alloc+0x1c>
   3f35a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   3f35e:	d1e7      	bne.n	3f330 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   3f360:	4801      	ldr	r0, [pc, #4]	; (3f368 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   3f362:	700b      	strb	r3, [r1, #0]
}
   3f364:	bd70      	pop	{r4, r5, r6, pc}
   3f366:	bf00      	nop
   3f368:	0bad0000 	.word	0x0bad0000

0003f36c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   3f36c:	6803      	ldr	r3, [r0, #0]
   3f36e:	40cb      	lsrs	r3, r1
   3f370:	07db      	lsls	r3, r3, #31
{
   3f372:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   3f374:	d414      	bmi.n	3f3a0 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   3f376:	2301      	movs	r3, #1
   3f378:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   3f37a:	6802      	ldr	r2, [r0, #0]
   3f37c:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   3f380:	ea43 0102 	orr.w	r1, r3, r2
   3f384:	e850 4f00 	ldrex	r4, [r0]
   3f388:	4294      	cmp	r4, r2
   3f38a:	d104      	bne.n	3f396 <nrfx_flag32_free+0x2a>
   3f38c:	e840 1c00 	strex	ip, r1, [r0]
   3f390:	f1bc 0f00 	cmp.w	ip, #0
   3f394:	d1f6      	bne.n	3f384 <nrfx_flag32_free+0x18>
   3f396:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   3f39a:	d1ee      	bne.n	3f37a <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   3f39c:	4801      	ldr	r0, [pc, #4]	; (3f3a4 <nrfx_flag32_free+0x38>)
}
   3f39e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   3f3a0:	4801      	ldr	r0, [pc, #4]	; (3f3a8 <nrfx_flag32_free+0x3c>)
   3f3a2:	e7fc      	b.n	3f39e <nrfx_flag32_free+0x32>
   3f3a4:	0bad0000 	.word	0x0bad0000
   3f3a8:	0bad0004 	.word	0x0bad0004

0003f3ac <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   3f3ac:	4b04      	ldr	r3, [pc, #16]	; (3f3c0 <nrfx_clock_init+0x14>)
   3f3ae:	791a      	ldrb	r2, [r3, #4]
   3f3b0:	b922      	cbnz	r2, 3f3bc <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   3f3b2:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   3f3b4:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   3f3b6:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   3f3b8:	4802      	ldr	r0, [pc, #8]	; (3f3c4 <nrfx_clock_init+0x18>)
   3f3ba:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   3f3bc:	4802      	ldr	r0, [pc, #8]	; (3f3c8 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   3f3be:	4770      	bx	lr
   3f3c0:	20003710 	.word	0x20003710
   3f3c4:	0bad0000 	.word	0x0bad0000
   3f3c8:	0bad000c 	.word	0x0bad000c

0003f3cc <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   3f3cc:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   3f3ce:	2000      	movs	r0, #0
   3f3d0:	f7ea febe 	bl	2a150 <arch_irq_is_enabled>
   3f3d4:	b908      	cbnz	r0, 3f3da <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   3f3d6:	f7ea fe99 	bl	2a10c <arch_irq_enable>
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
   3f3da:	4b02      	ldr	r3, [pc, #8]	; (3f3e4 <nrfx_clock_enable+0x18>)
   3f3dc:	2201      	movs	r2, #1
   3f3de:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   3f3e0:	bd08      	pop	{r3, pc}
   3f3e2:	bf00      	nop
   3f3e4:	20003c22 	.word	0x20003c22

0003f3e8 <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   3f3e8:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   3f3ea:	b110      	cbz	r0, 3f3f2 <nrfx_clock_stop+0xa>
   3f3ec:	2801      	cmp	r0, #1
   3f3ee:	d017      	beq.n	3f420 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   3f3f0:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   3f3f2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   3f3f6:	2302      	movs	r3, #2
   3f3f8:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3f3fc:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   3f400:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3f404:	2301      	movs	r3, #1
   3f406:	60e3      	str	r3, [r4, #12]
   3f408:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   3f40c:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   3f410:	03db      	lsls	r3, r3, #15
   3f412:	d5ed      	bpl.n	3f3f0 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   3f414:	2001      	movs	r0, #1
   3f416:	f008 fccc 	bl	47db2 <nrfx_busy_wait>
   3f41a:	3d01      	subs	r5, #1
   3f41c:	d1f6      	bne.n	3f40c <nrfx_clock_stop+0x24>
   3f41e:	e7e7      	b.n	3f3f0 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   3f420:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3f424:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   3f426:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3f42a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   3f42e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3f432:	6060      	str	r0, [r4, #4]
   3f434:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   3f438:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   3f43c:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   3f440:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   3f442:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   3f446:	d505      	bpl.n	3f454 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   3f448:	b123      	cbz	r3, 3f454 <nrfx_clock_stop+0x6c>
   3f44a:	2001      	movs	r0, #1
   3f44c:	f008 fcb1 	bl	47db2 <nrfx_busy_wait>
   3f450:	3d01      	subs	r5, #1
   3f452:	d1f1      	bne.n	3f438 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
   3f454:	4b01      	ldr	r3, [pc, #4]	; (3f45c <nrfx_clock_stop+0x74>)
   3f456:	2200      	movs	r2, #0
   3f458:	715a      	strb	r2, [r3, #5]
   3f45a:	e7c9      	b.n	3f3f0 <nrfx_clock_stop+0x8>
   3f45c:	20003710 	.word	0x20003710

0003f460 <nrfx_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   3f460:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   3f464:	b510      	push	{r4, lr}
   3f466:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   3f46a:	b16a      	cbz	r2, 3f488 <nrfx_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3f46c:	2200      	movs	r2, #0
   3f46e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   3f472:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   3f476:	2201      	movs	r2, #1
   3f478:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   3f47c:	4b11      	ldr	r3, [pc, #68]	; (3f4c4 <nrfx_clock_irq_handler+0x64>)
   3f47e:	7958      	ldrb	r0, [r3, #5]
   3f480:	b910      	cbnz	r0, 3f488 <nrfx_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   3f482:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   3f484:	681b      	ldr	r3, [r3, #0]
   3f486:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   3f488:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3f48c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   3f490:	b172      	cbz	r2, 3f4b0 <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3f492:	2200      	movs	r2, #0
   3f494:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   3f498:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   3f49c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   3f4a0:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   3f4a4:	0792      	lsls	r2, r2, #30
   3f4a6:	d104      	bne.n	3f4b2 <nrfx_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   3f4a8:	2201      	movs	r2, #1
   3f4aa:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3f4ae:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   3f4b0:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   3f4b2:	2202      	movs	r2, #2
   3f4b4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   3f4b8:	4b02      	ldr	r3, [pc, #8]	; (3f4c4 <nrfx_clock_irq_handler+0x64>)
}
   3f4ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   3f4be:	681b      	ldr	r3, [r3, #0]
   3f4c0:	2001      	movs	r0, #1
   3f4c2:	4718      	bx	r3
   3f4c4:	20003710 	.word	0x20003710

0003f4c8 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   3f4c8:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   3f4ca:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   3f4ce:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
   3f4d0:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   3f4d2:	6002      	str	r2, [r0, #0]
}
   3f4d4:	4802      	ldr	r0, [pc, #8]	; (3f4e0 <nrf_gpio_pin_port_decode+0x18>)
   3f4d6:	bf18      	it	ne
   3f4d8:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   3f4dc:	4770      	bx	lr
   3f4de:	bf00      	nop
   3f4e0:	50000300 	.word	0x50000300

0003f4e4 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   3f4e4:	4b03      	ldr	r3, [pc, #12]	; (3f4f4 <pin_in_use_by_te+0x10>)
   3f4e6:	3008      	adds	r0, #8
   3f4e8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   3f4ec:	f3c0 1040 	ubfx	r0, r0, #5, #1
   3f4f0:	4770      	bx	lr
   3f4f2:	bf00      	nop
   3f4f4:	20000814 	.word	0x20000814

0003f4f8 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   3f4f8:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   3f4fa:	f100 0308 	add.w	r3, r0, #8
   3f4fe:	4c0c      	ldr	r4, [pc, #48]	; (3f530 <call_handler+0x38>)
   3f500:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   3f504:	05da      	lsls	r2, r3, #23
{
   3f506:	4605      	mov	r5, r0
   3f508:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   3f50a:	d507      	bpl.n	3f51c <call_handler+0x24>
   3f50c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   3f510:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   3f514:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   3f518:	6852      	ldr	r2, [r2, #4]
   3f51a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   3f51c:	68a3      	ldr	r3, [r4, #8]
   3f51e:	b12b      	cbz	r3, 3f52c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   3f520:	68e2      	ldr	r2, [r4, #12]
   3f522:	4631      	mov	r1, r6
   3f524:	4628      	mov	r0, r5
    }
}
   3f526:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   3f52a:	4718      	bx	r3
}
   3f52c:	bd70      	pop	{r4, r5, r6, pc}
   3f52e:	bf00      	nop
   3f530:	20000814 	.word	0x20000814

0003f534 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   3f534:	4a12      	ldr	r2, [pc, #72]	; (3f580 <release_handler+0x4c>)
   3f536:	3008      	adds	r0, #8
{
   3f538:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   3f53a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   3f53e:	05d9      	lsls	r1, r3, #23
   3f540:	d51b      	bpl.n	3f57a <release_handler+0x46>
   3f542:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   3f546:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   3f54a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   3f54e:	f102 040e 	add.w	r4, r2, #14
   3f552:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   3f554:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   3f558:	f413 7f80 	tst.w	r3, #256	; 0x100
   3f55c:	d003      	beq.n	3f566 <release_handler+0x32>
   3f55e:	f3c3 2343 	ubfx	r3, r3, #9, #4
   3f562:	4299      	cmp	r1, r3
   3f564:	d009      	beq.n	3f57a <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   3f566:	3001      	adds	r0, #1
   3f568:	2830      	cmp	r0, #48	; 0x30
   3f56a:	d1f3      	bne.n	3f554 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   3f56c:	2300      	movs	r3, #0
   3f56e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   3f572:	4804      	ldr	r0, [pc, #16]	; (3f584 <release_handler+0x50>)
}
   3f574:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   3f576:	f7ff bef9 	b.w	3f36c <nrfx_flag32_free>
}
   3f57a:	bc10      	pop	{r4}
   3f57c:	4770      	bx	lr
   3f57e:	bf00      	nop
   3f580:	20000814 	.word	0x20000814
   3f584:	20000888 	.word	0x20000888

0003f588 <pin_handler_trigger_uninit>:
{
   3f588:	b538      	push	{r3, r4, r5, lr}
   3f58a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   3f58c:	f7ff ffaa 	bl	3f4e4 <pin_in_use_by_te>
   3f590:	4c09      	ldr	r4, [pc, #36]	; (3f5b8 <pin_handler_trigger_uninit+0x30>)
   3f592:	f102 0508 	add.w	r5, r2, #8
   3f596:	b140      	cbz	r0, 3f5aa <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   3f598:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   3f59c:	4907      	ldr	r1, [pc, #28]	; (3f5bc <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   3f59e:	0b5b      	lsrs	r3, r3, #13
   3f5a0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   3f5a4:	2000      	movs	r0, #0
   3f5a6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   3f5aa:	4610      	mov	r0, r2
   3f5ac:	f7ff ffc2 	bl	3f534 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   3f5b0:	2300      	movs	r3, #0
   3f5b2:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   3f5b6:	bd38      	pop	{r3, r4, r5, pc}
   3f5b8:	20000814 	.word	0x20000814
   3f5bc:	40006000 	.word	0x40006000

0003f5c0 <nrfx_gpiote_input_configure>:
{
   3f5c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3f5c4:	4604      	mov	r4, r0
   3f5c6:	b085      	sub	sp, #20
   3f5c8:	4690      	mov	r8, r2
   3f5ca:	461d      	mov	r5, r3
    if (p_input_config)
   3f5cc:	b1f1      	cbz	r1, 3f60c <nrfx_gpiote_input_configure+0x4c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3f5ce:	4f4e      	ldr	r7, [pc, #312]	; (3f708 <nrfx_gpiote_input_configure+0x148>)
   3f5d0:	f100 0908 	add.w	r9, r0, #8
   3f5d4:	f837 6019 	ldrh.w	r6, [r7, r9, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   3f5d8:	07b3      	lsls	r3, r6, #30
   3f5da:	d502      	bpl.n	3f5e2 <nrfx_gpiote_input_configure+0x22>
   3f5dc:	f7ff ff82 	bl	3f4e4 <pin_in_use_by_te>
   3f5e0:	bb18      	cbnz	r0, 3f62a <nrfx_gpiote_input_configure+0x6a>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   3f5e2:	2300      	movs	r3, #0
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   3f5e4:	f026 0602 	bic.w	r6, r6, #2
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   3f5e8:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   3f5ec:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   3f5f0:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   3f5f4:	f10d 020f 	add.w	r2, sp, #15
   3f5f8:	460b      	mov	r3, r1
   3f5fa:	4620      	mov	r0, r4
   3f5fc:	f10d 010e 	add.w	r1, sp, #14
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   3f600:	f046 0601 	orr.w	r6, r6, #1
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   3f604:	f008 fc03 	bl	47e0e <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   3f608:	f827 6019 	strh.w	r6, [r7, r9, lsl #1]
    if (p_trigger_config)
   3f60c:	f1b8 0f00 	cmp.w	r8, #0
   3f610:	d026      	beq.n	3f660 <nrfx_gpiote_input_configure+0xa0>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3f612:	4b3d      	ldr	r3, [pc, #244]	; (3f708 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   3f614:	f898 7000 	ldrb.w	r7, [r8]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   3f618:	f8d8 2004 	ldr.w	r2, [r8, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3f61c:	f104 0608 	add.w	r6, r4, #8
   3f620:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        if (pin_is_output(pin))
   3f624:	0788      	lsls	r0, r1, #30
   3f626:	d502      	bpl.n	3f62e <nrfx_gpiote_input_configure+0x6e>
            if (use_evt)
   3f628:	b192      	cbz	r2, 3f650 <nrfx_gpiote_input_configure+0x90>
            return NRFX_ERROR_INVALID_PARAM;
   3f62a:	4838      	ldr	r0, [pc, #224]	; (3f70c <nrfx_gpiote_input_configure+0x14c>)
   3f62c:	e01a      	b.n	3f664 <nrfx_gpiote_input_configure+0xa4>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   3f62e:	f021 0120 	bic.w	r1, r1, #32
   3f632:	04c9      	lsls	r1, r1, #19
   3f634:	0cc9      	lsrs	r1, r1, #19
   3f636:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
   3f63a:	b14a      	cbz	r2, 3f650 <nrfx_gpiote_input_configure+0x90>
                if (!edge)
   3f63c:	2f03      	cmp	r7, #3
   3f63e:	d8f4      	bhi.n	3f62a <nrfx_gpiote_input_configure+0x6a>
                uint8_t ch = *p_trigger_config->p_in_channel;
   3f640:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   3f644:	b98f      	cbnz	r7, 3f66a <nrfx_gpiote_input_configure+0xaa>
   3f646:	4a32      	ldr	r2, [pc, #200]	; (3f710 <nrfx_gpiote_input_configure+0x150>)
   3f648:	f50c 7ca2 	add.w	ip, ip, #324	; 0x144
   3f64c:	f842 702c 	str.w	r7, [r2, ip, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   3f650:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
   3f654:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   3f658:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
   3f65c:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
    if (p_handler_config)
   3f660:	bb4d      	cbnz	r5, 3f6b6 <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
   3f662:	482c      	ldr	r0, [pc, #176]	; (3f714 <nrfx_gpiote_input_configure+0x154>)
}
   3f664:	b005      	add	sp, #20
   3f666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   3f66a:	ea4f 028c 	mov.w	r2, ip, lsl #2
   3f66e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   3f672:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   3f676:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   3f67a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   3f67e:	f020 0003 	bic.w	r0, r0, #3
   3f682:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   3f686:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   3f68a:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   3f68e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   3f692:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3f696:	0220      	lsls	r0, r4, #8
   3f698:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   3f69c:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
   3f6a0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   3f6a4:	ea40 000e 	orr.w	r0, r0, lr
   3f6a8:	f041 0120 	orr.w	r1, r1, #32
   3f6ac:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
   3f6b0:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   3f6b4:	e7cc      	b.n	3f650 <nrfx_gpiote_input_configure+0x90>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   3f6b6:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   3f6ba:	4620      	mov	r0, r4
   3f6bc:	f7ff ff3a 	bl	3f534 <release_handler>
    if (!handler)
   3f6c0:	2e00      	cmp	r6, #0
   3f6c2:	d0ce      	beq.n	3f662 <nrfx_gpiote_input_configure+0xa2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   3f6c4:	4d10      	ldr	r5, [pc, #64]	; (3f708 <nrfx_gpiote_input_configure+0x148>)
   3f6c6:	e9d5 2300 	ldrd	r2, r3, [r5]
   3f6ca:	4296      	cmp	r6, r2
   3f6cc:	d101      	bne.n	3f6d2 <nrfx_gpiote_input_configure+0x112>
   3f6ce:	429f      	cmp	r7, r3
   3f6d0:	d018      	beq.n	3f704 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   3f6d2:	4811      	ldr	r0, [pc, #68]	; (3f718 <nrfx_gpiote_input_configure+0x158>)
   3f6d4:	f10d 010f 	add.w	r1, sp, #15
   3f6d8:	f7ff fe28 	bl	3f32c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   3f6dc:	4b0d      	ldr	r3, [pc, #52]	; (3f714 <nrfx_gpiote_input_configure+0x154>)
   3f6de:	4298      	cmp	r0, r3
   3f6e0:	d1c0      	bne.n	3f664 <nrfx_gpiote_input_configure+0xa4>
        handler_id = (int32_t)id;
   3f6e2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   3f6e6:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   3f6ea:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   3f6ee:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   3f6f0:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   3f6f2:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   3f6f6:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   3f6fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   3f6fe:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   3f702:	e7ae      	b.n	3f662 <nrfx_gpiote_input_configure+0xa2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   3f704:	2200      	movs	r2, #0
   3f706:	e7ee      	b.n	3f6e6 <nrfx_gpiote_input_configure+0x126>
   3f708:	20000814 	.word	0x20000814
   3f70c:	0bad0004 	.word	0x0bad0004
   3f710:	40006000 	.word	0x40006000
   3f714:	0bad0000 	.word	0x0bad0000
   3f718:	20000888 	.word	0x20000888

0003f71c <nrfx_gpiote_output_configure>:
{
   3f71c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   3f720:	4604      	mov	r4, r0
   3f722:	4615      	mov	r5, r2
    if (p_config)
   3f724:	b309      	cbz	r1, 3f76a <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3f726:	4f32      	ldr	r7, [pc, #200]	; (3f7f0 <nrfx_gpiote_output_configure+0xd4>)
   3f728:	f100 0808 	add.w	r8, r0, #8
   3f72c:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   3f730:	07b2      	lsls	r2, r6, #30
   3f732:	d403      	bmi.n	3f73c <nrfx_gpiote_output_configure+0x20>
   3f734:	f7ff fed6 	bl	3f4e4 <pin_in_use_by_te>
   3f738:	2800      	cmp	r0, #0
   3f73a:	d157      	bne.n	3f7ec <nrfx_gpiote_output_configure+0xd0>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   3f73c:	f016 0f1c 	tst.w	r6, #28
   3f740:	d002      	beq.n	3f748 <nrfx_gpiote_output_configure+0x2c>
   3f742:	784b      	ldrb	r3, [r1, #1]
   3f744:	2b01      	cmp	r3, #1
   3f746:	d051      	beq.n	3f7ec <nrfx_gpiote_output_configure+0xd0>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   3f748:	2301      	movs	r3, #1
   3f74a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   3f74e:	2300      	movs	r3, #0
   3f750:	e9cd 1300 	strd	r1, r3, [sp]
   3f754:	1c4a      	adds	r2, r1, #1
   3f756:	1c8b      	adds	r3, r1, #2
   3f758:	4620      	mov	r0, r4
   3f75a:	f10d 010f 	add.w	r1, sp, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   3f75e:	f046 0603 	orr.w	r6, r6, #3
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   3f762:	f008 fb54 	bl	47e0e <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   3f766:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    if (p_task_config)
   3f76a:	b91d      	cbnz	r5, 3f774 <nrfx_gpiote_output_configure+0x58>
    return NRFX_SUCCESS;
   3f76c:	4821      	ldr	r0, [pc, #132]	; (3f7f4 <nrfx_gpiote_output_configure+0xd8>)
}
   3f76e:	b004      	add	sp, #16
   3f770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3f774:	4e1e      	ldr	r6, [pc, #120]	; (3f7f0 <nrfx_gpiote_output_configure+0xd4>)
   3f776:	f104 0708 	add.w	r7, r4, #8
   3f77a:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   3f77e:	0783      	lsls	r3, r0, #30
   3f780:	d534      	bpl.n	3f7ec <nrfx_gpiote_output_configure+0xd0>
        uint32_t ch = p_task_config->task_ch;
   3f782:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   3f786:	4661      	mov	r1, ip
   3f788:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   3f78a:	f020 0020 	bic.w	r0, r0, #32
   3f78e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   3f792:	04c0      	lsls	r0, r0, #19
   3f794:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   3f798:	0cc0      	lsrs	r0, r0, #19
   3f79a:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   3f79e:	2300      	movs	r3, #0
   3f7a0:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   3f7a4:	786a      	ldrb	r2, [r5, #1]
   3f7a6:	2a00      	cmp	r2, #0
   3f7a8:	d0e0      	beq.n	3f76c <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   3f7aa:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   3f7ae:	78ad      	ldrb	r5, [r5, #2]
   3f7b0:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   3f7b4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   3f7b8:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3f7bc:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   3f7c0:	0223      	lsls	r3, r4, #8
   3f7c2:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   3f7c6:	0412      	lsls	r2, r2, #16
   3f7c8:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3f7cc:	ea43 030e 	orr.w	r3, r3, lr
   3f7d0:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   3f7d2:	052a      	lsls	r2, r5, #20
   3f7d4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   3f7d8:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3f7dc:	4313      	orrs	r3, r2
   3f7de:	f040 0020 	orr.w	r0, r0, #32
   3f7e2:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   3f7e6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   3f7ea:	e7bf      	b.n	3f76c <nrfx_gpiote_output_configure+0x50>
{
   3f7ec:	4802      	ldr	r0, [pc, #8]	; (3f7f8 <nrfx_gpiote_output_configure+0xdc>)
   3f7ee:	e7be      	b.n	3f76e <nrfx_gpiote_output_configure+0x52>
   3f7f0:	20000814 	.word	0x20000814
   3f7f4:	0bad0000 	.word	0x0bad0000
   3f7f8:	0bad0004 	.word	0x0bad0004

0003f7fc <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   3f7fc:	4b01      	ldr	r3, [pc, #4]	; (3f804 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   3f7fe:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   3f802:	4770      	bx	lr
   3f804:	20000814 	.word	0x20000814

0003f808 <nrfx_gpiote_channel_get>:
{
   3f808:	b508      	push	{r3, lr}
   3f80a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   3f80c:	f7ff fe6a 	bl	3f4e4 <pin_in_use_by_te>
   3f810:	b138      	cbz	r0, 3f822 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   3f812:	4b05      	ldr	r3, [pc, #20]	; (3f828 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   3f814:	4805      	ldr	r0, [pc, #20]	; (3f82c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   3f816:	3208      	adds	r2, #8
   3f818:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   3f81c:	0b5b      	lsrs	r3, r3, #13
   3f81e:	700b      	strb	r3, [r1, #0]
}
   3f820:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   3f822:	4803      	ldr	r0, [pc, #12]	; (3f830 <nrfx_gpiote_channel_get+0x28>)
   3f824:	e7fc      	b.n	3f820 <nrfx_gpiote_channel_get+0x18>
   3f826:	bf00      	nop
   3f828:	20000814 	.word	0x20000814
   3f82c:	0bad0000 	.word	0x0bad0000
   3f830:	0bad0004 	.word	0x0bad0004

0003f834 <nrfx_gpiote_init>:
{
   3f834:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   3f836:	4c0f      	ldr	r4, [pc, #60]	; (3f874 <nrfx_gpiote_init+0x40>)
   3f838:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   3f83c:	b9bd      	cbnz	r5, 3f86e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   3f83e:	2260      	movs	r2, #96	; 0x60
   3f840:	4629      	mov	r1, r5
   3f842:	f104 0010 	add.w	r0, r4, #16
   3f846:	f005 f947 	bl	44ad8 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   3f84a:	2006      	movs	r0, #6
   3f84c:	f7ea fc5e 	bl	2a10c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   3f850:	4b09      	ldr	r3, [pc, #36]	; (3f878 <nrfx_gpiote_init+0x44>)
    return err_code;
   3f852:	480a      	ldr	r0, [pc, #40]	; (3f87c <nrfx_gpiote_init+0x48>)
   3f854:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   3f858:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   3f85c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   3f860:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   3f864:	2301      	movs	r3, #1
   3f866:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   3f86a:	6763      	str	r3, [r4, #116]	; 0x74
}
   3f86c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   3f86e:	4804      	ldr	r0, [pc, #16]	; (3f880 <nrfx_gpiote_init+0x4c>)
   3f870:	e7fc      	b.n	3f86c <nrfx_gpiote_init+0x38>
   3f872:	bf00      	nop
   3f874:	20000814 	.word	0x20000814
   3f878:	40006000 	.word	0x40006000
   3f87c:	0bad0000 	.word	0x0bad0000
   3f880:	0bad0005 	.word	0x0bad0005

0003f884 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   3f884:	4b03      	ldr	r3, [pc, #12]	; (3f894 <nrfx_gpiote_is_init+0x10>)
   3f886:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   3f88a:	3800      	subs	r0, #0
   3f88c:	bf18      	it	ne
   3f88e:	2001      	movne	r0, #1
   3f890:	4770      	bx	lr
   3f892:	bf00      	nop
   3f894:	20000814 	.word	0x20000814

0003f898 <nrfx_gpiote_channel_free>:
{
   3f898:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   3f89a:	4801      	ldr	r0, [pc, #4]	; (3f8a0 <nrfx_gpiote_channel_free+0x8>)
   3f89c:	f7ff bd66 	b.w	3f36c <nrfx_flag32_free>
   3f8a0:	20000884 	.word	0x20000884

0003f8a4 <nrfx_gpiote_channel_alloc>:
{
   3f8a4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   3f8a6:	4801      	ldr	r0, [pc, #4]	; (3f8ac <nrfx_gpiote_channel_alloc+0x8>)
   3f8a8:	f7ff bd40 	b.w	3f32c <nrfx_flag32_alloc>
   3f8ac:	20000884 	.word	0x20000884

0003f8b0 <nrfx_gpiote_trigger_enable>:
{
   3f8b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3f8b2:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   3f8b4:	f7ff fe16 	bl	3f4e4 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3f8b8:	f104 0208 	add.w	r2, r4, #8
   3f8bc:	4b1e      	ldr	r3, [pc, #120]	; (3f938 <nrfx_gpiote_trigger_enable+0x88>)
   3f8be:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   3f8c2:	b1e8      	cbz	r0, 3f900 <nrfx_gpiote_trigger_enable+0x50>
   3f8c4:	f013 0502 	ands.w	r5, r3, #2
   3f8c8:	d11a      	bne.n	3f900 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   3f8ca:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   3f8cc:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   3f8ce:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   3f8d2:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   3f8d6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   3f8da:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   3f8de:	6005      	str	r5, [r0, #0]
   3f8e0:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   3f8e2:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   3f8e6:	f040 0001 	orr.w	r0, r0, #1
   3f8ea:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   3f8ee:	b129      	cbz	r1, 3f8fc <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   3f8f0:	2201      	movs	r2, #1
   3f8f2:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   3f8f6:	4a11      	ldr	r2, [pc, #68]	; (3f93c <nrfx_gpiote_trigger_enable+0x8c>)
   3f8f8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   3f8fc:	b003      	add	sp, #12
   3f8fe:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   3f900:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   3f904:	2b04      	cmp	r3, #4
   3f906:	d012      	beq.n	3f92e <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   3f908:	2b05      	cmp	r3, #5
   3f90a:	d012      	beq.n	3f932 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3f90c:	a801      	add	r0, sp, #4
   3f90e:	9401      	str	r4, [sp, #4]
   3f910:	f7ff fdda 	bl	3f4c8 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   3f914:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   3f916:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   3f91a:	40d9      	lsrs	r1, r3
   3f91c:	f001 0101 	and.w	r1, r1, #1
   3f920:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   3f922:	4620      	mov	r0, r4
}
   3f924:	b003      	add	sp, #12
   3f926:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   3f92a:	f008 bab9 	b.w	47ea0 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   3f92e:	2103      	movs	r1, #3
   3f930:	e7f7      	b.n	3f922 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   3f932:	2102      	movs	r1, #2
   3f934:	e7f5      	b.n	3f922 <nrfx_gpiote_trigger_enable+0x72>
   3f936:	bf00      	nop
   3f938:	20000814 	.word	0x20000814
   3f93c:	40006000 	.word	0x40006000

0003f940 <nrfx_gpiote_trigger_disable>:
{
   3f940:	b508      	push	{r3, lr}
   3f942:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   3f944:	f7ff fdce 	bl	3f4e4 <pin_in_use_by_te>
   3f948:	b1c0      	cbz	r0, 3f97c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3f94a:	f102 0108 	add.w	r1, r2, #8
   3f94e:	4b0e      	ldr	r3, [pc, #56]	; (3f988 <nrfx_gpiote_trigger_disable+0x48>)
   3f950:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   3f954:	0799      	lsls	r1, r3, #30
   3f956:	d411      	bmi.n	3f97c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   3f958:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   3f95a:	2201      	movs	r2, #1
   3f95c:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   3f95e:	009b      	lsls	r3, r3, #2
   3f960:	490a      	ldr	r1, [pc, #40]	; (3f98c <nrfx_gpiote_trigger_disable+0x4c>)
   3f962:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3f966:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   3f96a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   3f96e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   3f972:	f022 0203 	bic.w	r2, r2, #3
   3f976:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   3f97a:	bd08      	pop	{r3, pc}
   3f97c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   3f980:	2100      	movs	r1, #0
   3f982:	4610      	mov	r0, r2
   3f984:	f008 ba8c 	b.w	47ea0 <nrf_gpio_cfg_sense_set>
   3f988:	20000814 	.word	0x20000814
   3f98c:	40006000 	.word	0x40006000

0003f990 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   3f990:	4b0e      	ldr	r3, [pc, #56]	; (3f9cc <nrfx_gpiote_pin_uninit+0x3c>)
   3f992:	f100 0208 	add.w	r2, r0, #8
{
   3f996:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   3f998:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   3f99c:	07db      	lsls	r3, r3, #31
{
   3f99e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   3f9a0:	d511      	bpl.n	3f9c6 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   3f9a2:	f7ff ffcd 	bl	3f940 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   3f9a6:	4620      	mov	r0, r4
   3f9a8:	f7ff fdee 	bl	3f588 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3f9ac:	a801      	add	r0, sp, #4
   3f9ae:	9401      	str	r4, [sp, #4]
   3f9b0:	f7ff fd8a 	bl	3f4c8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   3f9b4:	9b01      	ldr	r3, [sp, #4]
   3f9b6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   3f9ba:	2202      	movs	r2, #2
   3f9bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   3f9c0:	4803      	ldr	r0, [pc, #12]	; (3f9d0 <nrfx_gpiote_pin_uninit+0x40>)
}
   3f9c2:	b002      	add	sp, #8
   3f9c4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   3f9c6:	4803      	ldr	r0, [pc, #12]	; (3f9d4 <nrfx_gpiote_pin_uninit+0x44>)
   3f9c8:	e7fb      	b.n	3f9c2 <nrfx_gpiote_pin_uninit+0x32>
   3f9ca:	bf00      	nop
   3f9cc:	20000814 	.word	0x20000814
   3f9d0:	0bad0000 	.word	0x0bad0000
   3f9d4:	0bad0004 	.word	0x0bad0004

0003f9d8 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   3f9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f9dc:	4b68      	ldr	r3, [pc, #416]	; (3fb80 <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
   3f9de:	4869      	ldr	r0, [pc, #420]	; (3fb84 <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   3f9e0:	4969      	ldr	r1, [pc, #420]	; (3fb88 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
   3f9e2:	2600      	movs	r6, #0
{
   3f9e4:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   3f9e6:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   3f9e8:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3f9ea:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   3f9ec:	b135      	cbz	r5, 3f9fc <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   3f9ee:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   3f9f2:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   3f9f4:	bf1e      	ittt	ne
   3f9f6:	601c      	strne	r4, [r3, #0]
   3f9f8:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   3f9fa:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   3f9fc:	3304      	adds	r3, #4
   3f9fe:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   3fa00:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   3fa04:	d1f1      	bne.n	3f9ea <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3fa06:	f8df 917c 	ldr.w	r9, [pc, #380]	; 3fb84 <nrfx_gpiote_irq_handler+0x1ac>
   3fa0a:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   3fa0e:	2b00      	cmp	r3, #0
   3fa10:	f000 8099 	beq.w	3fb46 <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
   3fa14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   3fa18:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   3fa1c:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   3fa1e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   3fa22:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   3fa26:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   3fa28:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   3fa2c:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
   3fa30:	f10d 0a10 	add.w	sl, sp, #16
   3fa34:	ea4f 1348 	mov.w	r3, r8, lsl #5
   3fa38:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   3fa3a:	f04f 0b01 	mov.w	fp, #1
   3fa3e:	e049      	b.n	3fad4 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
   3fa40:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   3fa42:	4a52      	ldr	r2, [pc, #328]	; (3fb8c <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   3fa44:	fa94 f4a4 	rbit	r4, r4
   3fa48:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   3fa4c:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   3fa4e:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   3fa50:	f104 0308 	add.w	r3, r4, #8
   3fa54:	9403      	str	r4, [sp, #12]
   3fa56:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   3fa5a:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
   3fa5e:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   3fa62:	fa0b f202 	lsl.w	r2, fp, r2
   3fa66:	ea23 0302 	bic.w	r3, r3, r2
   3fa6a:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3fa6e:	a803      	add	r0, sp, #12
   3fa70:	f7ff fd2a 	bl	3f4c8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   3fa74:	9b03      	ldr	r3, [sp, #12]
   3fa76:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   3fa7a:	08b9      	lsrs	r1, r7, #2
   3fa7c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   3fa80:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   3fa84:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   3fa86:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   3fa88:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   3fa8c:	d52c      	bpl.n	3fae8 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
   3fa8e:	4620      	mov	r0, r4
   3fa90:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   3fa92:	b2dd      	uxtb	r5, r3
   3fa94:	f7ff fd30 	bl	3f4f8 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3fa98:	a803      	add	r0, sp, #12
   3fa9a:	9403      	str	r4, [sp, #12]
   3fa9c:	f7ff fd14 	bl	3f4c8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   3faa0:	9b03      	ldr	r3, [sp, #12]
   3faa2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   3faa6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   3faaa:	f3c3 4301 	ubfx	r3, r3, #16, #2
   3faae:	429d      	cmp	r5, r3
   3fab0:	d107      	bne.n	3fac2 <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   3fab2:	2100      	movs	r1, #0
   3fab4:	4620      	mov	r0, r4
   3fab6:	f008 f9f3 	bl	47ea0 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   3faba:	4629      	mov	r1, r5
   3fabc:	4620      	mov	r0, r4
   3fabe:	f008 f9ef 	bl	47ea0 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3fac2:	a803      	add	r0, sp, #12
   3fac4:	9403      	str	r4, [sp, #12]
   3fac6:	f7ff fcff 	bl	3f4c8 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   3faca:	9b03      	ldr	r3, [sp, #12]
   3facc:	fa0b f303 	lsl.w	r3, fp, r3
   3fad0:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   3fad4:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
   3fad8:	2c00      	cmp	r4, #0
   3fada:	d1b1      	bne.n	3fa40 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   3fadc:	f1b8 0f00 	cmp.w	r8, #0
   3fae0:	d11d      	bne.n	3fb1e <nrfx_gpiote_irq_handler+0x146>
   3fae2:	f04f 0801 	mov.w	r8, #1
   3fae6:	e7a5      	b.n	3fa34 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   3fae8:	2b02      	cmp	r3, #2
   3faea:	d10c      	bne.n	3fb06 <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   3faec:	2103      	movs	r1, #3
   3faee:	4620      	mov	r0, r4
   3faf0:	f008 f9d6 	bl	47ea0 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   3faf4:	f005 0305 	and.w	r3, r5, #5
   3faf8:	2b01      	cmp	r3, #1
   3fafa:	d1e2      	bne.n	3fac2 <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
   3fafc:	4639      	mov	r1, r7
   3fafe:	4620      	mov	r0, r4
   3fb00:	f7ff fcfa 	bl	3f4f8 <call_handler>
   3fb04:	e7dd      	b.n	3fac2 <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   3fb06:	2102      	movs	r1, #2
   3fb08:	4620      	mov	r0, r4
   3fb0a:	9301      	str	r3, [sp, #4]
   3fb0c:	f008 f9c8 	bl	47ea0 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   3fb10:	2d03      	cmp	r5, #3
   3fb12:	d0f3      	beq.n	3fafc <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   3fb14:	9b01      	ldr	r3, [sp, #4]
   3fb16:	2b03      	cmp	r3, #3
   3fb18:	d1d3      	bne.n	3fac2 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   3fb1a:	2d02      	cmp	r5, #2
   3fb1c:	e7ed      	b.n	3fafa <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
   3fb1e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   3fb22:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
   3fb26:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
   3fb2a:	4919      	ldr	r1, [pc, #100]	; (3fb90 <nrfx_gpiote_irq_handler+0x1b8>)
   3fb2c:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   3fb30:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   3fb32:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   3fb36:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
   3fb3a:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
   3fb3c:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
   3fb3e:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
   3fb42:	f47f af73 	bne.w	3fa2c <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   3fb46:	2401      	movs	r4, #1
    while (mask)
   3fb48:	b916      	cbnz	r6, 3fb50 <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   3fb4a:	b007      	add	sp, #28
   3fb4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   3fb50:	fa96 f3a6 	rbit	r3, r6
   3fb54:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   3fb58:	fa04 f203 	lsl.w	r2, r4, r3
   3fb5c:	009b      	lsls	r3, r3, #2
   3fb5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3fb62:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   3fb66:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   3fb6a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   3fb6e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   3fb72:	f3c0 2005 	ubfx	r0, r0, #8, #6
   3fb76:	f3c1 4101 	ubfx	r1, r1, #16, #2
   3fb7a:	f7ff fcbd 	bl	3f4f8 <call_handler>
   3fb7e:	e7e3      	b.n	3fb48 <nrfx_gpiote_irq_handler+0x170>
   3fb80:	40006100 	.word	0x40006100
   3fb84:	40006000 	.word	0x40006000
   3fb88:	40006120 	.word	0x40006120
   3fb8c:	20000814 	.word	0x20000814
   3fb90:	50000300 	.word	0x50000300

0003fb94 <nvmc_word_write>:
   3fb94:	4a04      	ldr	r2, [pc, #16]	; (3fba8 <nvmc_word_write+0x14>)
   3fb96:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   3fb9a:	07db      	lsls	r3, r3, #31
   3fb9c:	d5fb      	bpl.n	3fb96 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   3fb9e:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   3fba0:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   3fba4:	4770      	bx	lr
   3fba6:	bf00      	nop
   3fba8:	4001e000 	.word	0x4001e000

0003fbac <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   3fbac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3fbb0:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   3fbb2:	fbb0 f3f2 	udiv	r3, r0, r2
   3fbb6:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   3fbba:	b973      	cbnz	r3, 3fbda <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   3fbbc:	4b08      	ldr	r3, [pc, #32]	; (3fbe0 <nrfx_nvmc_page_erase+0x34>)
   3fbbe:	2202      	movs	r2, #2
   3fbc0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   3fbc4:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   3fbc8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   3fbcc:	07d2      	lsls	r2, r2, #31
   3fbce:	d5fb      	bpl.n	3fbc8 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   3fbd0:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   3fbd2:	4804      	ldr	r0, [pc, #16]	; (3fbe4 <nrfx_nvmc_page_erase+0x38>)
   3fbd4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   3fbd8:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   3fbda:	4803      	ldr	r0, [pc, #12]	; (3fbe8 <nrfx_nvmc_page_erase+0x3c>)
}
   3fbdc:	4770      	bx	lr
   3fbde:	bf00      	nop
   3fbe0:	4001e000 	.word	0x4001e000
   3fbe4:	0bad0000 	.word	0x0bad0000
   3fbe8:	0bad000a 	.word	0x0bad000a

0003fbec <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   3fbec:	b510      	push	{r4, lr}
   3fbee:	4c05      	ldr	r4, [pc, #20]	; (3fc04 <nrfx_nvmc_word_write+0x18>)
   3fbf0:	2301      	movs	r3, #1
   3fbf2:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   3fbf6:	f7ff ffcd 	bl	3fb94 <nvmc_word_write>
   3fbfa:	2300      	movs	r3, #0
   3fbfc:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   3fc00:	bd10      	pop	{r4, pc}
   3fc02:	bf00      	nop
   3fc04:	4001e000 	.word	0x4001e000

0003fc08 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
   3fc08:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
   3fc0a:	4c17      	ldr	r4, [pc, #92]	; (3fc68 <nrfx_power_init+0x60>)
   3fc0c:	7823      	ldrb	r3, [r4, #0]
   3fc0e:	bb4b      	cbnz	r3, 3fc64 <nrfx_power_init+0x5c>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
   3fc10:	7803      	ldrb	r3, [r0, #0]
    if (enable && nrf52_errata_197())
   3fc12:	0799      	lsls	r1, r3, #30
   3fc14:	f3c3 0240 	ubfx	r2, r3, #1, #1
   3fc18:	d512      	bpl.n	3fc40 <nrfx_power_init+0x38>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   3fc1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
            if (var1 == 0x08)
   3fc1e:	f8d2 1130 	ldr.w	r1, [r2, #304]	; 0x130
   3fc22:	2908      	cmp	r1, #8
   3fc24:	d10b      	bne.n	3fc3e <nrfx_power_init+0x36>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   3fc26:	f8d2 2134 	ldr.w	r2, [r2, #308]	; 0x134
                switch(var2)
   3fc2a:	2a05      	cmp	r2, #5
   3fc2c:	d807      	bhi.n	3fc3e <nrfx_power_init+0x36>
   3fc2e:	490f      	ldr	r1, [pc, #60]	; (3fc6c <nrfx_power_init+0x64>)
   3fc30:	5c8a      	ldrb	r2, [r1, r2]
   3fc32:	b122      	cbz	r2, 3fc3e <nrfx_power_init+0x36>
        *(volatile uint32_t *)0x40000638ul = 1ul;
   3fc34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   3fc38:	2101      	movs	r1, #1
   3fc3a:	f8c2 1638 	str.w	r1, [r2, #1592]	; 0x638
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   3fc3e:	2201      	movs	r2, #1
   3fc40:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   3fc44:	f003 0301 	and.w	r3, r3, #1
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   3fc48:	f8c1 2580 	str.w	r2, [r1, #1408]	; 0x580
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   3fc4c:	2000      	movs	r0, #0
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   3fc4e:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
   3fc52:	f7ea fa7d 	bl	2a150 <arch_irq_is_enabled>
   3fc56:	b908      	cbnz	r0, 3fc5c <nrfx_power_init+0x54>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   3fc58:	f7ea fa58 	bl	2a10c <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
   3fc5c:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
   3fc5e:	4804      	ldr	r0, [pc, #16]	; (3fc70 <nrfx_power_init+0x68>)
    m_initialized = true;
   3fc60:	7023      	strb	r3, [r4, #0]
}
   3fc62:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   3fc64:	4803      	ldr	r0, [pc, #12]	; (3fc74 <nrfx_power_init+0x6c>)
   3fc66:	e7fc      	b.n	3fc62 <nrfx_power_init+0x5a>
   3fc68:	20003c23 	.word	0x20003c23
   3fc6c:	0004b165 	.word	0x0004b165
   3fc70:	0bad0000 	.word	0x0bad0000
   3fc74:	0bad000c 	.word	0x0bad000c

0003fc78 <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
   3fc78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3fc7c:	f44f 7260 	mov.w	r2, #896	; 0x380
   3fc80:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
   3fc84:	4b01      	ldr	r3, [pc, #4]	; (3fc8c <nrfx_power_usbevt_uninit+0x14>)
   3fc86:	2200      	movs	r2, #0
   3fc88:	601a      	str	r2, [r3, #0]
}
   3fc8a:	4770      	bx	lr
   3fc8c:	20003718 	.word	0x20003718

0003fc90 <nrfx_power_usbevt_init>:
{
   3fc90:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
   3fc92:	f7ff fff1 	bl	3fc78 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
   3fc96:	6803      	ldr	r3, [r0, #0]
   3fc98:	b10b      	cbz	r3, 3fc9e <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
   3fc9a:	4a01      	ldr	r2, [pc, #4]	; (3fca0 <nrfx_power_usbevt_init+0x10>)
   3fc9c:	6013      	str	r3, [r2, #0]
}
   3fc9e:	bd08      	pop	{r3, pc}
   3fca0:	20003718 	.word	0x20003718

0003fca4 <nrfx_power_irq_handler>:
    return p_reg->INTENSET;
   3fca4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
   3fca8:	b510      	push	{r4, lr}
   3fcaa:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   3fcae:	0762      	lsls	r2, r4, #29
   3fcb0:	d507      	bpl.n	3fcc2 <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
   3fcb2:	f44f 7084 	mov.w	r0, #264	; 0x108
   3fcb6:	f008 f910 	bl	47eda <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   3fcba:	b110      	cbz	r0, 3fcc2 <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
   3fcbc:	4b1e      	ldr	r3, [pc, #120]	; (3fd38 <nrfx_power_irq_handler+0x94>)
   3fcbe:	681b      	ldr	r3, [r3, #0]
   3fcc0:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   3fcc2:	06a3      	lsls	r3, r4, #26
   3fcc4:	d508      	bpl.n	3fcd8 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
   3fcc6:	f44f 708a 	mov.w	r0, #276	; 0x114
   3fcca:	f008 f906 	bl	47eda <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   3fcce:	b118      	cbz	r0, 3fcd8 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
   3fcd0:	4b1a      	ldr	r3, [pc, #104]	; (3fd3c <nrfx_power_irq_handler+0x98>)
   3fcd2:	2000      	movs	r0, #0
   3fcd4:	681b      	ldr	r3, [r3, #0]
   3fcd6:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   3fcd8:	0660      	lsls	r0, r4, #25
   3fcda:	d508      	bpl.n	3fcee <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
   3fcdc:	f44f 708c 	mov.w	r0, #280	; 0x118
   3fce0:	f008 f8fb 	bl	47eda <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   3fce4:	b118      	cbz	r0, 3fcee <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
   3fce6:	4b15      	ldr	r3, [pc, #84]	; (3fd3c <nrfx_power_irq_handler+0x98>)
   3fce8:	2001      	movs	r0, #1
   3fcea:	681b      	ldr	r3, [r3, #0]
   3fcec:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   3fcee:	0621      	lsls	r1, r4, #24
   3fcf0:	d508      	bpl.n	3fd04 <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
   3fcf2:	f44f 708e 	mov.w	r0, #284	; 0x11c
   3fcf6:	f008 f8f0 	bl	47eda <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   3fcfa:	b118      	cbz	r0, 3fd04 <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
   3fcfc:	4b10      	ldr	r3, [pc, #64]	; (3fd40 <nrfx_power_irq_handler+0x9c>)
   3fcfe:	2000      	movs	r0, #0
   3fd00:	681b      	ldr	r3, [r3, #0]
   3fd02:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   3fd04:	05e2      	lsls	r2, r4, #23
   3fd06:	d508      	bpl.n	3fd1a <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
   3fd08:	f44f 7090 	mov.w	r0, #288	; 0x120
   3fd0c:	f008 f8e5 	bl	47eda <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   3fd10:	b118      	cbz	r0, 3fd1a <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
   3fd12:	4b0b      	ldr	r3, [pc, #44]	; (3fd40 <nrfx_power_irq_handler+0x9c>)
   3fd14:	2001      	movs	r0, #1
   3fd16:	681b      	ldr	r3, [r3, #0]
   3fd18:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   3fd1a:	05a3      	lsls	r3, r4, #22
   3fd1c:	d50a      	bpl.n	3fd34 <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
   3fd1e:	f44f 7092 	mov.w	r0, #292	; 0x124
   3fd22:	f008 f8da 	bl	47eda <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   3fd26:	b128      	cbz	r0, 3fd34 <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   3fd28:	4b05      	ldr	r3, [pc, #20]	; (3fd40 <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
   3fd2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   3fd2e:	681b      	ldr	r3, [r3, #0]
   3fd30:	2002      	movs	r0, #2
   3fd32:	4718      	bx	r3
}
   3fd34:	bd10      	pop	{r4, pc}
   3fd36:	bf00      	nop
   3fd38:	20003720 	.word	0x20003720
   3fd3c:	2000371c 	.word	0x2000371c
   3fd40:	20003718 	.word	0x20003718

0003fd44 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   3fd44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   3fd48:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   3fd4c:	2a08      	cmp	r2, #8
   3fd4e:	d106      	bne.n	3fd5e <nrf52_errata_187+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   3fd50:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   3fd54:	2b05      	cmp	r3, #5
   3fd56:	d804      	bhi.n	3fd62 <nrf52_errata_187+0x1e>
   3fd58:	4a03      	ldr	r2, [pc, #12]	; (3fd68 <nrf52_errata_187+0x24>)
   3fd5a:	5cd0      	ldrb	r0, [r2, r3]
   3fd5c:	4770      	bx	lr
                        return false;
   3fd5e:	2000      	movs	r0, #0
   3fd60:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   3fd62:	2001      	movs	r0, #1
}
   3fd64:	4770      	bx	lr
   3fd66:	bf00      	nop
   3fd68:	0004b16b 	.word	0x0004b16b

0003fd6c <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   3fd6c:	4b05      	ldr	r3, [pc, #20]	; (3fd84 <ep_state_access+0x18>)
   3fd6e:	f010 0f80 	tst.w	r0, #128	; 0x80
   3fd72:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
   3fd76:	bf08      	it	eq
   3fd78:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
   3fd7a:	f000 000f 	and.w	r0, r0, #15
}
   3fd7e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   3fd82:	4770      	bx	lr
   3fd84:	200038cc 	.word	0x200038cc

0003fd88 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
   3fd88:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
   3fd8a:	4a07      	ldr	r2, [pc, #28]	; (3fda8 <ev_usbreset_handler+0x20>)
   3fd8c:	2300      	movs	r3, #0
   3fd8e:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   3fd90:	4a06      	ldr	r2, [pc, #24]	; (3fdac <ev_usbreset_handler+0x24>)
   3fd92:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
   3fd94:	2301      	movs	r3, #1
   3fd96:	9301      	str	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
   3fd98:	4b05      	ldr	r3, [pc, #20]	; (3fdb0 <ev_usbreset_handler+0x28>)
   3fd9a:	a801      	add	r0, sp, #4
   3fd9c:	681b      	ldr	r3, [r3, #0]
   3fd9e:	4798      	blx	r3
}
   3fda0:	b003      	add	sp, #12
   3fda2:	f85d fb04 	ldr.w	pc, [sp], #4
   3fda6:	bf00      	nop
   3fda8:	20003c26 	.word	0x20003c26
   3fdac:	20003c25 	.word	0x20003c25
   3fdb0:	20003964 	.word	0x20003964

0003fdb4 <ev_usbevent_handler>:
    return p_reg->EVENTCAUSE;
   3fdb4:	4b19      	ldr	r3, [pc, #100]	; (3fe1c <ev_usbevent_handler+0x68>)
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
   3fdb6:	b513      	push	{r0, r1, r4, lr}
   3fdb8:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
   3fdbc:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
   3fdc0:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
   3fdc2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   3fdc6:	d508      	bpl.n	3fdda <ev_usbevent_handler+0x26>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
   3fdc8:	4b15      	ldr	r3, [pc, #84]	; (3fe20 <ev_usbevent_handler+0x6c>)
   3fdca:	2201      	movs	r2, #1
   3fdcc:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   3fdce:	2302      	movs	r3, #2
   3fdd0:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
   3fdd2:	4b14      	ldr	r3, [pc, #80]	; (3fe24 <ev_usbevent_handler+0x70>)
   3fdd4:	a801      	add	r0, sp, #4
   3fdd6:	681b      	ldr	r3, [r3, #0]
   3fdd8:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   3fdda:	05a2      	lsls	r2, r4, #22
   3fddc:	d508      	bpl.n	3fdf0 <ev_usbevent_handler+0x3c>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
   3fdde:	4b10      	ldr	r3, [pc, #64]	; (3fe20 <ev_usbevent_handler+0x6c>)
   3fde0:	2200      	movs	r2, #0
   3fde2:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   3fde4:	2303      	movs	r3, #3
   3fde6:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
   3fde8:	4b0e      	ldr	r3, [pc, #56]	; (3fe24 <ev_usbevent_handler+0x70>)
   3fdea:	a801      	add	r0, sp, #4
   3fdec:	681b      	ldr	r3, [r3, #0]
   3fdee:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
   3fdf0:	0563      	lsls	r3, r4, #21
   3fdf2:	d510      	bpl.n	3fe16 <ev_usbevent_handler+0x62>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
   3fdf4:	4b0a      	ldr	r3, [pc, #40]	; (3fe20 <ev_usbevent_handler+0x6c>)
   3fdf6:	781a      	ldrb	r2, [r3, #0]
   3fdf8:	b16a      	cbz	r2, 3fe16 <ev_usbevent_handler+0x62>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
   3fdfa:	2200      	movs	r2, #0
   3fdfc:	701a      	strb	r2, [r3, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
   3fdfe:	4b07      	ldr	r3, [pc, #28]	; (3fe1c <ev_usbevent_handler+0x68>)
   3fe00:	2201      	movs	r2, #1
   3fe02:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   3fe06:	659a      	str	r2, [r3, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   3fe08:	6d9b      	ldr	r3, [r3, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
   3fe0a:	2304      	movs	r3, #4
   3fe0c:	9301      	str	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
   3fe0e:	4b05      	ldr	r3, [pc, #20]	; (3fe24 <ev_usbevent_handler+0x70>)
   3fe10:	a801      	add	r0, sp, #4
   3fe12:	681b      	ldr	r3, [r3, #0]
   3fe14:	4798      	blx	r3
        }
    }
}
   3fe16:	b002      	add	sp, #8
   3fe18:	bd10      	pop	{r4, pc}
   3fe1a:	bf00      	nop
   3fe1c:	40027000 	.word	0x40027000
   3fe20:	20003c26 	.word	0x20003c26
   3fe24:	20003964 	.word	0x20003964

0003fe28 <usbd_errata_187_211_begin>:
	__asm__ volatile(
   3fe28:	f04f 0320 	mov.w	r3, #32
   3fe2c:	f3ef 8011 	mrs	r0, BASEPRI
   3fe30:	f383 8812 	msr	BASEPRI_MAX, r3
   3fe34:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   3fe38:	4b0a      	ldr	r3, [pc, #40]	; (3fe64 <usbd_errata_187_211_begin+0x3c>)
   3fe3a:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   3fe3e:	2203      	movs	r2, #3
   3fe40:	b961      	cbnz	r1, 3fe5c <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   3fe42:	f249 3175 	movw	r1, #37749	; 0x9375
   3fe46:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   3fe4a:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   3fe4e:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   3fe52:	f380 8811 	msr	BASEPRI, r0
   3fe56:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   3fe5a:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   3fe5c:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   3fe60:	e7f7      	b.n	3fe52 <usbd_errata_187_211_begin+0x2a>
   3fe62:	bf00      	nop
   3fe64:	4006e000 	.word	0x4006e000

0003fe68 <usbd_errata_187_211_end>:
	__asm__ volatile(
   3fe68:	f04f 0320 	mov.w	r3, #32
   3fe6c:	f3ef 8011 	mrs	r0, BASEPRI
   3fe70:	f383 8812 	msr	BASEPRI_MAX, r3
   3fe74:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   3fe78:	4b0a      	ldr	r3, [pc, #40]	; (3fea4 <usbd_errata_187_211_end+0x3c>)
   3fe7a:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   3fe7e:	b961      	cbnz	r1, 3fe9a <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   3fe80:	f249 3275 	movw	r2, #37749	; 0x9375
   3fe84:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   3fe88:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   3fe8c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   3fe90:	f380 8811 	msr	BASEPRI, r0
   3fe94:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   3fe98:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   3fe9a:	2200      	movs	r2, #0
   3fe9c:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   3fea0:	e7f6      	b.n	3fe90 <usbd_errata_187_211_end+0x28>
   3fea2:	bf00      	nop
   3fea4:	4006e000 	.word	0x4006e000

0003fea8 <nrfx_usbd_feeder_flash>:
{
   3fea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3feaa:	684b      	ldr	r3, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   3feac:	4f0b      	ldr	r7, [pc, #44]	; (3fedc <nrfx_usbd_feeder_flash+0x34>)
{
   3feae:	460c      	mov	r4, r1
   3feb0:	429a      	cmp	r2, r3
   3feb2:	bf28      	it	cs
   3feb4:	461a      	movcs	r2, r3
   3feb6:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   3feb8:	6809      	ldr	r1, [r1, #0]
   3feba:	4638      	mov	r0, r7
   3febc:	4615      	mov	r5, r2
   3febe:	f004 fe00 	bl	44ac2 <memcpy>
    p_transfer->size -= tx_size;
   3fec2:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   3fec4:	6823      	ldr	r3, [r4, #0]
    p_transfer->size -= tx_size;
   3fec6:	1b40      	subs	r0, r0, r5
    p_next->size = tx_size;
   3fec8:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->p_data.addr += tx_size;
   3fecc:	442b      	add	r3, r5
    p_transfer->size -= tx_size;
   3fece:	6060      	str	r0, [r4, #4]
}
   3fed0:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   3fed2:	6023      	str	r3, [r4, #0]
}
   3fed4:	bf18      	it	ne
   3fed6:	2001      	movne	r0, #1
   3fed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3feda:	bf00      	nop
   3fedc:	20003724 	.word	0x20003724

0003fee0 <nrfx_usbd_feeder_flash_zlp>:
    if (tx_size > ep_size)
   3fee0:	684b      	ldr	r3, [r1, #4]
   3fee2:	429a      	cmp	r2, r3
   3fee4:	bf28      	it	cs
   3fee6:	461a      	movcs	r2, r3
{
   3fee8:	b570      	push	{r4, r5, r6, lr}
   3feea:	4606      	mov	r6, r0
   3feec:	460d      	mov	r5, r1
   3feee:	4614      	mov	r4, r2
    if (tx_size != 0)
   3fef0:	b182      	cbz	r2, 3ff14 <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   3fef2:	6809      	ldr	r1, [r1, #0]
   3fef4:	4808      	ldr	r0, [pc, #32]	; (3ff18 <nrfx_usbd_feeder_flash_zlp+0x38>)
   3fef6:	f004 fde4 	bl	44ac2 <memcpy>
        p_next->p_data.tx = p_buffer;
   3fefa:	4b07      	ldr	r3, [pc, #28]	; (3ff18 <nrfx_usbd_feeder_flash_zlp+0x38>)
    p_next->size = tx_size;
   3fefc:	e9c6 3400 	strd	r3, r4, [r6]
    p_transfer->size -= tx_size;
   3ff00:	686b      	ldr	r3, [r5, #4]
   3ff02:	1b1b      	subs	r3, r3, r4
   3ff04:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
   3ff06:	682b      	ldr	r3, [r5, #0]
}
   3ff08:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
   3ff0a:	4423      	add	r3, r4
   3ff0c:	602b      	str	r3, [r5, #0]
}
   3ff0e:	bf18      	it	ne
   3ff10:	2001      	movne	r0, #1
   3ff12:	bd70      	pop	{r4, r5, r6, pc}
   3ff14:	4613      	mov	r3, r2
   3ff16:	e7f1      	b.n	3fefc <nrfx_usbd_feeder_flash_zlp+0x1c>
   3ff18:	20003724 	.word	0x20003724

0003ff1c <ev_sof_handler>:
{
   3ff1c:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
   3ff1e:	2300      	movs	r3, #0
   3ff20:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
   3ff24:	4b0b      	ldr	r3, [pc, #44]	; (3ff54 <ev_sof_handler+0x38>)
   3ff26:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
   3ff2a:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
   3ff2e:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
   3ff32:	4a09      	ldr	r2, [pc, #36]	; (3ff58 <ev_sof_handler+0x3c>)
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
   3ff34:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
   3ff36:	6813      	ldr	r3, [r2, #0]
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
   3ff38:	bf14      	ite	ne
   3ff3a:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
   3ff3e:	f44f 7180 	moveq.w	r1, #256	; 0x100
    m_ep_ready |= iso_ready_mask;
   3ff42:	430b      	orrs	r3, r1
   3ff44:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
   3ff46:	4b05      	ldr	r3, [pc, #20]	; (3ff5c <ev_sof_handler+0x40>)
   3ff48:	a801      	add	r0, sp, #4
   3ff4a:	681b      	ldr	r3, [r3, #0]
   3ff4c:	4798      	blx	r3
}
   3ff4e:	b003      	add	sp, #12
   3ff50:	f85d fb04 	ldr.w	pc, [sp], #4
   3ff54:	40027000 	.word	0x40027000
   3ff58:	20003960 	.word	0x20003960
   3ff5c:	20003964 	.word	0x20003964

0003ff60 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3ff60:	4b06      	ldr	r3, [pc, #24]	; (3ff7c <atomic_and.constprop.0.isra.0+0x1c>)
   3ff62:	f3bf 8f5b 	dmb	ish
   3ff66:	e853 1f00 	ldrex	r1, [r3]
   3ff6a:	4001      	ands	r1, r0
   3ff6c:	e843 1200 	strex	r2, r1, [r3]
   3ff70:	2a00      	cmp	r2, #0
   3ff72:	d1f8      	bne.n	3ff66 <atomic_and.constprop.0.isra.0+0x6>
   3ff74:	f3bf 8f5b 	dmb	ish
}
   3ff78:	4770      	bx	lr
   3ff7a:	bf00      	nop
   3ff7c:	2000395c 	.word	0x2000395c

0003ff80 <usbd_dma_pending_clear>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   3ff80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   3ff84:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   3ff88:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   3ff8a:	bf02      	ittt	eq
   3ff8c:	4b03      	ldreq	r3, [pc, #12]	; (3ff9c <usbd_dma_pending_clear+0x1c>)
   3ff8e:	2200      	moveq	r2, #0
   3ff90:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = false;
   3ff94:	4b02      	ldr	r3, [pc, #8]	; (3ffa0 <usbd_dma_pending_clear+0x20>)
   3ff96:	2200      	movs	r2, #0
   3ff98:	701a      	strb	r2, [r3, #0]
}
   3ff9a:	4770      	bx	lr
   3ff9c:	40027000 	.word	0x40027000
   3ffa0:	20003c24 	.word	0x20003c24

0003ffa4 <nrf_usbd_ep0in_dma_handler>:
{
   3ffa4:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
   3ffa6:	f7ff ffeb 	bl	3ff80 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   3ffaa:	4b08      	ldr	r3, [pc, #32]	; (3ffcc <nrf_usbd_ep0in_dma_handler+0x28>)
   3ffac:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
   3ffb0:	2a03      	cmp	r2, #3
   3ffb2:	d105      	bne.n	3ffc0 <nrf_usbd_ep0in_dma_handler+0x1c>
}
   3ffb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   3ffb8:	f06f 0001 	mvn.w	r0, #1
   3ffbc:	f7ff bfd0 	b.w	3ff60 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   3ffc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   3ffc4:	2b00      	cmp	r3, #0
   3ffc6:	d0f5      	beq.n	3ffb4 <nrf_usbd_ep0in_dma_handler+0x10>
}
   3ffc8:	bd08      	pop	{r3, pc}
   3ffca:	bf00      	nop
   3ffcc:	2000383c 	.word	0x2000383c

0003ffd0 <usbd_ep_data_handler>:
    m_ep_ready |= (1U << bitpos);
   3ffd0:	2201      	movs	r2, #1
{
   3ffd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
   3ffd4:	fa02 f501 	lsl.w	r5, r2, r1
   3ffd8:	491c      	ldr	r1, [pc, #112]	; (4004c <usbd_ep_data_handler+0x7c>)
   3ffda:	4e1d      	ldr	r6, [pc, #116]	; (40050 <usbd_ep_data_handler+0x80>)
   3ffdc:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   3ffde:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
   3ffe2:	ea43 0305 	orr.w	r3, r3, r5
{
   3ffe6:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
   3ffe8:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   3ffea:	d024      	beq.n	40036 <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   3ffec:	f000 020f 	and.w	r2, r0, #15
   3fff0:	4b18      	ldr	r3, [pc, #96]	; (40054 <usbd_ep_data_handler+0x84>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   3fff2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   3fff6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3fffa:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   3fffe:	681a      	ldr	r2, [r3, #0]
    if (ret)
   40000:	b132      	cbz	r2, 40010 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   40002:	2200      	movs	r2, #0
   40004:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
   40006:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   40008:	681b      	ldr	r3, [r3, #0]
   4000a:	d011      	beq.n	40030 <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
   4000c:	f007 ffcc 	bl	47fa8 <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   40010:	6833      	ldr	r3, [r6, #0]
   40012:	402b      	ands	r3, r5
   40014:	d10a      	bne.n	4002c <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   40016:	2206      	movs	r2, #6
   40018:	f88d 2004 	strb.w	r2, [sp, #4]
   4001c:	f88d 4006 	strb.w	r4, [sp, #6]
   40020:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   40024:	4b0c      	ldr	r3, [pc, #48]	; (40058 <usbd_ep_data_handler+0x88>)
   40026:	a801      	add	r0, sp, #4
   40028:	681b      	ldr	r3, [r3, #0]
   4002a:	4798      	blx	r3
}
   4002c:	b002      	add	sp, #8
   4002e:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
   40030:	f7ff ffb8 	bl	3ffa4 <nrf_usbd_ep0in_dma_handler>
   40034:	e7ec      	b.n	40010 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   40036:	6833      	ldr	r3, [r6, #0]
   40038:	421d      	tst	r5, r3
   4003a:	d1f7      	bne.n	4002c <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
   4003c:	2306      	movs	r3, #6
   4003e:	f88d 3004 	strb.w	r3, [sp, #4]
   40042:	f88d 0006 	strb.w	r0, [sp, #6]
   40046:	f88d 2007 	strb.w	r2, [sp, #7]
   4004a:	e7eb      	b.n	40024 <usbd_ep_data_handler+0x54>
   4004c:	20003960 	.word	0x20003960
   40050:	2000395c 	.word	0x2000395c
   40054:	0004ab96 	.word	0x0004ab96
   40058:	20003964 	.word	0x20003964

0004005c <ev_setup_data_handler>:
{
   4005c:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   4005e:	4b05      	ldr	r3, [pc, #20]	; (40074 <ev_setup_data_handler+0x18>)
   40060:	781a      	ldrb	r2, [r3, #0]
   40062:	4610      	mov	r0, r2
   40064:	f007 ff97 	bl	47f96 <ep2bit>
}
   40068:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   4006c:	4601      	mov	r1, r0
   4006e:	4610      	mov	r0, r2
   40070:	f7ff bfae 	b.w	3ffd0 <usbd_ep_data_handler>
   40074:	20003c25 	.word	0x20003c25

00040078 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   40078:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   4007a:	f7ff ff81 	bl	3ff80 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   4007e:	4b0c      	ldr	r3, [pc, #48]	; (400b0 <ev_dma_epout8_handler+0x38>)
   40080:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
   40084:	2a03      	cmp	r2, #3
   40086:	d010      	beq.n	400aa <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
   40088:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   4008c:	b96b      	cbnz	r3, 400aa <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   4008e:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
   40092:	f7ff ff65 	bl	3ff60 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   40096:	2306      	movs	r3, #6
   40098:	f88d 3004 	strb.w	r3, [sp, #4]
   4009c:	2308      	movs	r3, #8
   4009e:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   400a2:	4b04      	ldr	r3, [pc, #16]	; (400b4 <ev_dma_epout8_handler+0x3c>)
   400a4:	a801      	add	r0, sp, #4
   400a6:	681b      	ldr	r3, [r3, #0]
   400a8:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   400aa:	b003      	add	sp, #12
   400ac:	f85d fb04 	ldr.w	pc, [sp], #4
   400b0:	2000383c 	.word	0x2000383c
   400b4:	20003964 	.word	0x20003964

000400b8 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   400b8:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   400ba:	f7ff ff61 	bl	3ff80 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   400be:	4b10      	ldr	r3, [pc, #64]	; (40100 <ev_dma_epin8_handler+0x48>)
   400c0:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
   400c4:	2a03      	cmp	r2, #3
   400c6:	d106      	bne.n	400d6 <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   400c8:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   400cc:	b003      	add	sp, #12
   400ce:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   400d2:	f7ff bf45 	b.w	3ff60 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   400d6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   400da:	b96b      	cbnz	r3, 400f8 <ev_dma_epin8_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   400dc:	f46f 7080 	mvn.w	r0, #256	; 0x100
   400e0:	f7ff ff3e 	bl	3ff60 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   400e4:	2306      	movs	r3, #6
   400e6:	f88d 3004 	strb.w	r3, [sp, #4]
   400ea:	2388      	movs	r3, #136	; 0x88
   400ec:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   400f0:	4b04      	ldr	r3, [pc, #16]	; (40104 <ev_dma_epin8_handler+0x4c>)
   400f2:	a801      	add	r0, sp, #4
   400f4:	681b      	ldr	r3, [r3, #0]
   400f6:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   400f8:	b003      	add	sp, #12
   400fa:	f85d fb04 	ldr.w	pc, [sp], #4
   400fe:	bf00      	nop
   40100:	2000383c 	.word	0x2000383c
   40104:	20003964 	.word	0x20003964

00040108 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
   40108:	4a02      	ldr	r2, [pc, #8]	; (40114 <nrfx_usbd_uninit+0xc>)
   4010a:	2300      	movs	r3, #0
   4010c:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
   4010e:	4a02      	ldr	r2, [pc, #8]	; (40118 <nrfx_usbd_uninit+0x10>)
   40110:	7013      	strb	r3, [r2, #0]
    return;
}
   40112:	4770      	bx	lr
   40114:	20003964 	.word	0x20003964
   40118:	20003c27 	.word	0x20003c27

0004011c <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
   4011c:	b508      	push	{r3, lr}
    p_reg->EVENTCAUSE = flags;
   4011e:	4b4c      	ldr	r3, [pc, #304]	; (40250 <nrfx_usbd_enable+0x134>)
   40120:	f44f 6200 	mov.w	r2, #2048	; 0x800
   40124:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   40128:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
}

/* Errata: USB cannot be enabled. **/
static inline bool nrfx_usbd_errata_187(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   4012c:	f7ff fe0a 	bl	3fd44 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   40130:	b108      	cbz	r0, 40136 <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
   40132:	f7ff fe79 	bl	3fe28 <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   40136:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   4013a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   4013e:	2b08      	cmp	r3, #8
   40140:	d119      	bne.n	40176 <nrfx_usbd_enable+0x5a>
	__asm__ volatile(
   40142:	f04f 0320 	mov.w	r3, #32
   40146:	f3ef 8011 	mrs	r0, BASEPRI
   4014a:	f383 8812 	msr	BASEPRI_MAX, r3
   4014e:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   40152:	4b40      	ldr	r3, [pc, #256]	; (40254 <nrfx_usbd_enable+0x138>)
   40154:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   40158:	22c0      	movs	r2, #192	; 0xc0
   4015a:	2900      	cmp	r1, #0
   4015c:	d170      	bne.n	40240 <nrfx_usbd_enable+0x124>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   4015e:	f249 3175 	movw	r1, #37749	; 0x9375
   40162:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   40166:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   4016a:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   4016e:	f380 8811 	msr	BASEPRI, r0
   40172:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
   40176:	4b36      	ldr	r3, [pc, #216]	; (40250 <nrfx_usbd_enable+0x134>)
   40178:	2201      	movs	r2, #1
   4017a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   4017e:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
   40182:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
   40186:	0512      	lsls	r2, r2, #20
   40188:	d5fb      	bpl.n	40182 <nrfx_usbd_enable+0x66>
    p_reg->EVENTCAUSE = flags;
   4018a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   4018e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   40192:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   40196:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   4019a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   4019e:	2b08      	cmp	r3, #8
   401a0:	d118      	bne.n	401d4 <nrfx_usbd_enable+0xb8>
	__asm__ volatile(
   401a2:	f04f 0320 	mov.w	r3, #32
   401a6:	f3ef 8011 	mrs	r0, BASEPRI
   401aa:	f383 8812 	msr	BASEPRI_MAX, r3
   401ae:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   401b2:	4b28      	ldr	r3, [pc, #160]	; (40254 <nrfx_usbd_enable+0x138>)
   401b4:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   401b8:	2900      	cmp	r1, #0
   401ba:	d144      	bne.n	40246 <nrfx_usbd_enable+0x12a>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   401bc:	f249 3275 	movw	r2, #37749	; 0x9375
   401c0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   401c4:	f8c3 1c14 	str.w	r1, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   401c8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   401cc:	f380 8811 	msr	BASEPRI, r0
   401d0:	f3bf 8f6f 	isb	sy
   401d4:	f7ff fdb6 	bl	3fd44 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   401d8:	b130      	cbz	r0, 401e8 <nrfx_usbd_enable+0xcc>
        usbd_errata_187_211_end();
   401da:	f7ff fe45 	bl	3fe68 <usbd_errata_187_211_end>
   401de:	f7ff fdb1 	bl	3fd44 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   401e2:	b108      	cbz	r0, 401e8 <nrfx_usbd_enable+0xcc>
#endif
    {
        usbd_errata_187_211_begin();
   401e4:	f7ff fe20 	bl	3fe28 <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   401e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   401ec:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   401f0:	2b08      	cmp	r3, #8
   401f2:	4b17      	ldr	r3, [pc, #92]	; (40250 <nrfx_usbd_enable+0x134>)
   401f4:	d10a      	bne.n	4020c <nrfx_usbd_enable+0xf0>
    }

    if (nrfx_usbd_errata_166())
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
   401f6:	f240 72e3 	movw	r2, #2019	; 0x7e3
   401fa:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
   401fe:	2240      	movs	r2, #64	; 0x40
   40200:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
   40204:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   40208:	f3bf 8f4f 	dsb	sy
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   4020c:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
   4020e:	2280      	movs	r2, #128	; 0x80
   40210:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   40214:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   40218:	4b0f      	ldr	r3, [pc, #60]	; (40258 <nrfx_usbd_enable+0x13c>)
   4021a:	f240 12ff 	movw	r2, #511	; 0x1ff
   4021e:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
   40220:	4b0e      	ldr	r3, [pc, #56]	; (4025c <nrfx_usbd_enable+0x140>)
   40222:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
   40224:	f7ff feac 	bl	3ff80 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   40228:	4b0d      	ldr	r3, [pc, #52]	; (40260 <nrfx_usbd_enable+0x144>)
   4022a:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
   4022c:	4b0d      	ldr	r3, [pc, #52]	; (40264 <nrfx_usbd_enable+0x148>)
   4022e:	2202      	movs	r2, #2
   40230:	701a      	strb	r2, [r3, #0]
   40232:	f7ff fd87 	bl	3fd44 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   40236:	b150      	cbz	r0, 4024e <nrfx_usbd_enable+0x132>
#endif
    {
        usbd_errata_187_211_end();
    }
}
   40238:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
   4023c:	f7ff be14 	b.w	3fe68 <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   40240:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   40244:	e793      	b.n	4016e <nrfx_usbd_enable+0x52>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   40246:	2200      	movs	r2, #0
   40248:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   4024c:	e7be      	b.n	401cc <nrfx_usbd_enable+0xb0>
}
   4024e:	bd08      	pop	{r3, pc}
   40250:	40027000 	.word	0x40027000
   40254:	4006e000 	.word	0x4006e000
   40258:	20003960 	.word	0x20003960
   4025c:	2000395c 	.word	0x2000395c
   40260:	20003c25 	.word	0x20003c25
   40264:	20003c27 	.word	0x20003c27

00040268 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
   40268:	4b0a      	ldr	r3, [pc, #40]	; (40294 <nrfx_usbd_start+0x2c>)
   4026a:	2200      	movs	r2, #0
{
   4026c:	b510      	push	{r4, lr}
    m_bus_suspend = false;
   4026e:	701a      	strb	r2, [r3, #0]

    uint32_t ints_to_enable =
   40270:	4a09      	ldr	r2, [pc, #36]	; (40298 <nrfx_usbd_start+0x30>)
   40272:	4b0a      	ldr	r3, [pc, #40]	; (4029c <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
   40274:	4c0a      	ldr	r4, [pc, #40]	; (402a0 <nrfx_usbd_start+0x38>)
   40276:	2800      	cmp	r0, #0
   40278:	bf08      	it	eq
   4027a:	4613      	moveq	r3, r2
   4027c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
   40280:	2027      	movs	r0, #39	; 0x27
   40282:	f7e9 ff43 	bl	2a10c <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
   40286:	2301      	movs	r3, #1
   40288:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
   4028c:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
   40290:	bd10      	pop	{r4, pc}
   40292:	bf00      	nop
   40294:	20003c26 	.word	0x20003c26
   40298:	01c01407 	.word	0x01c01407
   4029c:	01e01407 	.word	0x01e01407
   402a0:	40027000 	.word	0x40027000

000402a4 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
   402a4:	4b03      	ldr	r3, [pc, #12]	; (402b4 <nrfx_usbd_is_enabled+0x10>)
   402a6:	7818      	ldrb	r0, [r3, #0]
}
   402a8:	2801      	cmp	r0, #1
   402aa:	bf94      	ite	ls
   402ac:	2000      	movls	r0, #0
   402ae:	2001      	movhi	r0, #1
   402b0:	4770      	bx	lr
   402b2:	bf00      	nop
   402b4:	20003c27 	.word	0x20003c27

000402b8 <nrfx_usbd_init>:
{
   402b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
   402ba:	4b1c      	ldr	r3, [pc, #112]	; (4032c <nrfx_usbd_init+0x74>)
   402bc:	781c      	ldrb	r4, [r3, #0]
   402be:	bb94      	cbnz	r4, 40326 <nrfx_usbd_init+0x6e>
    m_event_handler = event_handler;
   402c0:	4a1b      	ldr	r2, [pc, #108]	; (40330 <nrfx_usbd_init+0x78>)
   402c2:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   402c4:	2201      	movs	r2, #1
   402c6:	701a      	strb	r2, [r3, #0]
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   402c8:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
   402cc:	4626      	mov	r6, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   402ce:	f064 057f 	orn	r5, r4, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   402d2:	f014 0f08 	tst.w	r4, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   402d6:	b2ed      	uxtb	r5, r5
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   402d8:	bf14      	ite	ne
   402da:	4639      	movne	r1, r7
   402dc:	2140      	moveq	r1, #64	; 0x40
   402de:	4628      	mov	r0, r5
   402e0:	f007 fe91 	bl	48006 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   402e4:	4628      	mov	r0, r5
   402e6:	f7ff fd41 	bl	3fd6c <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   402ea:	3401      	adds	r4, #1
   402ec:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
   402ee:	7386      	strb	r6, [r0, #14]
        p_state->handler.feeder = NULL;
   402f0:	6006      	str	r6, [r0, #0]
        p_state->transfer_cnt = 0;
   402f2:	6086      	str	r6, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   402f4:	d1eb      	bne.n	402ce <nrfx_usbd_init+0x16>
   402f6:	2400      	movs	r4, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   402f8:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
   402fc:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   402fe:	f014 0f08 	tst.w	r4, #8
   40302:	b2e6      	uxtb	r6, r4
   40304:	bf14      	ite	ne
   40306:	4639      	movne	r1, r7
   40308:	2140      	moveq	r1, #64	; 0x40
   4030a:	4630      	mov	r0, r6
   4030c:	f007 fe7b 	bl	48006 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   40310:	4630      	mov	r0, r6
   40312:	f7ff fd2b 	bl	3fd6c <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   40316:	3401      	adds	r4, #1
   40318:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
   4031a:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
   4031c:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
   4031e:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   40320:	d1ed      	bne.n	402fe <nrfx_usbd_init+0x46>
    return NRFX_SUCCESS;
   40322:	4804      	ldr	r0, [pc, #16]	; (40334 <nrfx_usbd_init+0x7c>)
}
   40324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_STATE;
   40326:	4804      	ldr	r0, [pc, #16]	; (40338 <nrfx_usbd_init+0x80>)
   40328:	e7fc      	b.n	40324 <nrfx_usbd_init+0x6c>
   4032a:	bf00      	nop
   4032c:	20003c27 	.word	0x20003c27
   40330:	20003964 	.word	0x20003964
   40334:	0bad0000 	.word	0x0bad0000
   40338:	0bad0005 	.word	0x0bad0005

0004033c <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
   4033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   40340:	4604      	mov	r4, r0
	__asm__ volatile(
   40342:	f04f 0320 	mov.w	r3, #32
   40346:	f3ef 8811 	mrs	r8, BASEPRI
   4034a:	f383 8812 	msr	BASEPRI_MAX, r3
   4034e:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
   40352:	f010 0a0f 	ands.w	sl, r0, #15
   40356:	d103      	bne.n	40360 <nrfx_usbd_ep_transfer+0x24>
   40358:	4b27      	ldr	r3, [pc, #156]	; (403f8 <nrfx_usbd_ep_transfer+0xbc>)
   4035a:	781b      	ldrb	r3, [r3, #0]
   4035c:	4283      	cmp	r3, r0
   4035e:	d146      	bne.n	403ee <nrfx_usbd_ep_transfer+0xb2>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   40360:	4b26      	ldr	r3, [pc, #152]	; (403fc <nrfx_usbd_ep_transfer+0xc0>)
   40362:	4e27      	ldr	r6, [pc, #156]	; (40400 <nrfx_usbd_ep_transfer+0xc4>)
   40364:	681a      	ldr	r2, [r3, #0]
   40366:	6837      	ldr	r7, [r6, #0]
    const uint8_t ep_bitpos = ep2bit(ep);
   40368:	4620      	mov	r0, r4
   4036a:	f007 fe14 	bl	47f96 <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   4036e:	43d2      	mvns	r2, r2
   40370:	b292      	uxth	r2, r2
   40372:	f04f 0901 	mov.w	r9, #1
   40376:	433a      	orrs	r2, r7
   40378:	fa09 f900 	lsl.w	r9, r9, r0
   4037c:	ea12 0f09 	tst.w	r2, r9
   40380:	d137      	bne.n	403f2 <nrfx_usbd_ep_transfer+0xb6>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   40382:	4620      	mov	r0, r4
   40384:	f7ff fcf2 	bl	3fd6c <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   40388:	230c      	movs	r3, #12
        if (NRF_USBD_EPIN_CHECK(ep))
   4038a:	0622      	lsls	r2, r4, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   4038c:	4605      	mov	r5, r0
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   4038e:	fb03 f30a 	mul.w	r3, r3, sl
        if (NRF_USBD_EPIN_CHECK(ep))
   40392:	d528      	bpl.n	403e6 <nrfx_usbd_ep_transfer+0xaa>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   40394:	680a      	ldr	r2, [r1, #0]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   40396:	6888      	ldr	r0, [r1, #8]
   40398:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   4039c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   403a0:	f000 0001 	and.w	r0, r0, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   403a4:	d11c      	bne.n	403e0 <nrfx_usbd_ep_transfer+0xa4>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   403a6:	4a17      	ldr	r2, [pc, #92]	; (40404 <nrfx_usbd_ep_transfer+0xc8>)
   403a8:	4c17      	ldr	r4, [pc, #92]	; (40408 <nrfx_usbd_ep_transfer+0xcc>)
   403aa:	2800      	cmp	r0, #0
   403ac:	bf08      	it	eq
   403ae:	4622      	moveq	r2, r4
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   403b0:	4816      	ldr	r0, [pc, #88]	; (4040c <nrfx_usbd_ep_transfer+0xd0>)
   403b2:	4403      	add	r3, r0
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
   403b4:	602a      	str	r2, [r5, #0]
        }
        *p_context = *p_transfer;
   403b6:	c907      	ldmia	r1, {r0, r1, r2}
   403b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
   403bc:	606b      	str	r3, [r5, #4]

        p_state->transfer_cnt = 0;
   403be:	2300      	movs	r3, #0
   403c0:	60ab      	str	r3, [r5, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
   403c2:	73ab      	strb	r3, [r5, #14]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   403c4:	4b12      	ldr	r3, [pc, #72]	; (40410 <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
        ret = NRFX_SUCCESS;
   403c6:	4813      	ldr	r0, [pc, #76]	; (40414 <nrfx_usbd_ep_transfer+0xd8>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
   403c8:	ea49 0707 	orr.w	r7, r9, r7
   403cc:	2280      	movs	r2, #128	; 0x80
   403ce:	6037      	str	r7, [r6, #0]
   403d0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
   403d4:	f388 8811 	msr	BASEPRI, r8
   403d8:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
   403dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   403e0:	4a0d      	ldr	r2, [pc, #52]	; (40418 <nrfx_usbd_ep_transfer+0xdc>)
   403e2:	4c0e      	ldr	r4, [pc, #56]	; (4041c <nrfx_usbd_ep_transfer+0xe0>)
   403e4:	e7e1      	b.n	403aa <nrfx_usbd_ep_transfer+0x6e>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
   403e6:	4a0e      	ldr	r2, [pc, #56]	; (40420 <nrfx_usbd_ep_transfer+0xe4>)
   403e8:	4413      	add	r3, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
   403ea:	4a0e      	ldr	r2, [pc, #56]	; (40424 <nrfx_usbd_ep_transfer+0xe8>)
   403ec:	e7e2      	b.n	403b4 <nrfx_usbd_ep_transfer+0x78>
        ret = NRFX_ERROR_INVALID_ADDR;
   403ee:	480e      	ldr	r0, [pc, #56]	; (40428 <nrfx_usbd_ep_transfer+0xec>)
   403f0:	e7f0      	b.n	403d4 <nrfx_usbd_ep_transfer+0x98>
        ret = NRFX_ERROR_BUSY;
   403f2:	480e      	ldr	r0, [pc, #56]	; (4042c <nrfx_usbd_ep_transfer+0xf0>)
   403f4:	e7ee      	b.n	403d4 <nrfx_usbd_ep_transfer+0x98>
   403f6:	bf00      	nop
   403f8:	20003c25 	.word	0x20003c25
   403fc:	20003960 	.word	0x20003960
   40400:	2000395c 	.word	0x2000395c
   40404:	00047f6d 	.word	0x00047f6d
   40408:	00047f4b 	.word	0x00047f4b
   4040c:	200037d0 	.word	0x200037d0
   40410:	e000e100 	.word	0xe000e100
   40414:	0bad0000 	.word	0x0bad0000
   40418:	0003fee1 	.word	0x0003fee1
   4041c:	0003fea9 	.word	0x0003fea9
   40420:	20003764 	.word	0x20003764
   40424:	00047f1d 	.word	0x00047f1d
   40428:	0bad000a 	.word	0x0bad000a
   4042c:	0bad000b 	.word	0x0bad000b

00040430 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
   40430:	f010 0f08 	tst.w	r0, #8
   40434:	4b07      	ldr	r3, [pc, #28]	; (40454 <nrfx_usbd_epout_size_get+0x24>)
   40436:	d006      	beq.n	40446 <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
   40438:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
   4043c:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   40440:	bf18      	it	ne
   40442:	2000      	movne	r0, #0
   40444:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   40446:	f000 000f 	and.w	r0, r0, #15
   4044a:	f500 7094 	add.w	r0, r0, #296	; 0x128
   4044e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
   40452:	4770      	bx	lr
   40454:	40027000 	.word	0x40027000

00040458 <usbd_dmareq_process>:
{
   40458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
   4045c:	4e59      	ldr	r6, [pc, #356]	; (405c4 <usbd_dmareq_process+0x16c>)
   4045e:	7833      	ldrb	r3, [r6, #0]
{
   40460:	b085      	sub	sp, #20
    if (!m_dma_pending)
   40462:	2b00      	cmp	r3, #0
   40464:	d173      	bne.n	4054e <usbd_dmareq_process+0xf6>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
   40466:	f8df 8160 	ldr.w	r8, [pc, #352]	; 405c8 <usbd_dmareq_process+0x170>
   4046a:	4d58      	ldr	r5, [pc, #352]	; (405cc <usbd_dmareq_process+0x174>)
   4046c:	f8d8 4000 	ldr.w	r4, [r8]
   40470:	682b      	ldr	r3, [r5, #0]
   40472:	401c      	ands	r4, r3
   40474:	d06b      	beq.n	4054e <usbd_dmareq_process+0xf6>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
   40476:	f014 2301 	ands.w	r3, r4, #16777472	; 0x1000100
    return NRF_CTZ(req);
   4047a:	bf14      	ite	ne
   4047c:	fa93 f4a3 	rbitne	r4, r3
   40480:	fa94 f4a4 	rbiteq	r4, r4
   40484:	fab4 f484 	clz	r4, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   40488:	f04f 0901 	mov.w	r9, #1
   4048c:	fa09 f904 	lsl.w	r9, r9, r4
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   40490:	2c0f      	cmp	r4, #15
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   40492:	ea6f 0909 	mvn.w	r9, r9
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   40496:	d95d      	bls.n	40554 <usbd_dmareq_process+0xfc>
   40498:	3c10      	subs	r4, #16
   4049a:	b2e4      	uxtb	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
   4049c:	4620      	mov	r0, r4
   4049e:	f7ff fc65 	bl	3fd6c <ep_state_access>
   404a2:	4682      	mov	sl, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   404a4:	4620      	mov	r0, r4
   404a6:	f7ff ffc3 	bl	40430 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
   404aa:	f8da 7000 	ldr.w	r7, [sl]
   404ae:	f8ba 200c 	ldrh.w	r2, [sl, #12]
   404b2:	f8da 1004 	ldr.w	r1, [sl, #4]
   404b6:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   404b8:	4683      	mov	fp, r0
                continue_transfer = p_state->handler.consumer(
   404ba:	a802      	add	r0, sp, #8
   404bc:	47b8      	blx	r7
                if (transfer.p_data.rx == NULL)
   404be:	9b02      	ldr	r3, [sp, #8]
   404c0:	2b00      	cmp	r3, #0
   404c2:	d153      	bne.n	4056c <usbd_dmareq_process+0x114>
                if (!continue_transfer)
   404c4:	b908      	cbnz	r0, 404ca <usbd_dmareq_process+0x72>
                    p_state->handler.consumer = NULL;
   404c6:	f8ca 0000 	str.w	r0, [sl]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   404ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (NRF_USBD_EPIN_CHECK(ep))
   404ce:	b261      	sxtb	r1, r4
            if (var1 == 0x08)
   404d0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   404d4:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
   404d6:	bf02      	ittt	eq
   404d8:	4b3d      	ldreq	r3, [pc, #244]	; (405d0 <usbd_dmareq_process+0x178>)
   404da:	2282      	moveq	r2, #130	; 0x82
   404dc:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
   404e0:	2301      	movs	r3, #1
   404e2:	7033      	strb	r3, [r6, #0]
            m_ep_ready &= ~(1U << pos);
   404e4:	682b      	ldr	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
   404e6:	9a03      	ldr	r2, [sp, #12]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
   404e8:	9802      	ldr	r0, [sp, #8]
            m_ep_ready &= ~(1U << pos);
   404ea:	ea03 0309 	and.w	r3, r3, r9
   404ee:	602b      	str	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
   404f0:	f8da 3008 	ldr.w	r3, [sl, #8]
    if (NRF_USBD_EPIN_CHECK(ep))
   404f4:	2900      	cmp	r1, #0
   404f6:	4413      	add	r3, r2
   404f8:	f8ca 3008 	str.w	r3, [sl, #8]
   404fc:	f004 0508 	and.w	r5, r4, #8
   40500:	4b33      	ldr	r3, [pc, #204]	; (405d0 <usbd_dmareq_process+0x178>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   40502:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   40506:	da4e      	bge.n	405a6 <usbd_dmareq_process+0x14e>
        if (NRF_USBD_EPISO_CHECK(ep))
   40508:	2d00      	cmp	r5, #0
   4050a:	d044      	beq.n	40596 <usbd_dmareq_process+0x13e>
            p_reg->ISOIN.PTR    = ptr;
   4050c:	f8c3 06a0 	str.w	r0, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
   40510:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
   40514:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   40516:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   4051a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   4051e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   40522:	2201      	movs	r2, #1
   40524:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   40526:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   40528:	4a2a      	ldr	r2, [pc, #168]	; (405d4 <usbd_dmareq_process+0x17c>)
   4052a:	4b2b      	ldr	r3, [pc, #172]	; (405d8 <usbd_dmareq_process+0x180>)
   4052c:	ea13 0321 	ands.w	r3, r3, r1, asr #32
   40530:	bf38      	it	cc
   40532:	4613      	movcc	r3, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   40534:	4926      	ldr	r1, [pc, #152]	; (405d0 <usbd_dmareq_process+0x178>)
   40536:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   4053a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   4053e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   40542:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
   40544:	b91a      	cbnz	r2, 4054e <usbd_dmareq_process+0xf6>
   40546:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   4054a:	2a00      	cmp	r2, #0
   4054c:	d0f9      	beq.n	40542 <usbd_dmareq_process+0xea>
}
   4054e:	b005      	add	sp, #20
   40550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   40554:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            usbd_ep_state_t * p_state = ep_state_access(ep);
   40558:	4620      	mov	r0, r4
   4055a:	f7ff fc07 	bl	3fd6c <ep_state_access>
                continue_transfer = p_state->handler.feeder(
   4055e:	6803      	ldr	r3, [r0, #0]
   40560:	8982      	ldrh	r2, [r0, #12]
   40562:	6841      	ldr	r1, [r0, #4]
            usbd_ep_state_t * p_state = ep_state_access(ep);
   40564:	4682      	mov	sl, r0
                continue_transfer = p_state->handler.feeder(
   40566:	a802      	add	r0, sp, #8
   40568:	4798      	blx	r3
   4056a:	e7ab      	b.n	404c4 <usbd_dmareq_process+0x6c>
                else if (transfer.size < rx_size)
   4056c:	9b03      	ldr	r3, [sp, #12]
   4056e:	459b      	cmp	fp, r3
   40570:	d9a8      	bls.n	404c4 <usbd_dmareq_process+0x6c>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   40572:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   40574:	4648      	mov	r0, r9
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   40576:	f88a 700e 	strb.w	r7, [sl, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   4057a:	f7ff fcf1 	bl	3ff60 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   4057e:	2306      	movs	r3, #6
   40580:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
   40584:	4b15      	ldr	r3, [pc, #84]	; (405dc <usbd_dmareq_process+0x184>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   40586:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
   4058a:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   4058c:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
   40590:	a801      	add	r0, sp, #4
   40592:	4798      	blx	r3
                    continue;
   40594:	e76a      	b.n	4046c <usbd_dmareq_process+0x14>
            p_reg->EPIN[epnr].PTR    = ptr;
   40596:	2514      	movs	r5, #20
   40598:	fb05 3304 	mla	r3, r5, r4, r3
   4059c:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
   405a0:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    return (nrf_usbd_task_t)(
   405a4:	e7b6      	b.n	40514 <usbd_dmareq_process+0xbc>
        if (NRF_USBD_EPISO_CHECK(ep))
   405a6:	b12d      	cbz	r5, 405b4 <usbd_dmareq_process+0x15c>
            p_reg->ISOOUT.PTR    = ptr;
   405a8:	f8c3 07a0 	str.w	r0, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
   405ac:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
   405b0:	2328      	movs	r3, #40	; 0x28
   405b2:	e7b0      	b.n	40516 <usbd_dmareq_process+0xbe>
            p_reg->EPOUT[epnr].PTR    = ptr;
   405b4:	2514      	movs	r5, #20
   405b6:	fb05 3304 	mla	r3, r5, r4, r3
   405ba:	f8c3 0700 	str.w	r0, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
   405be:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
   405c2:	e7f5      	b.n	405b0 <usbd_dmareq_process+0x158>
   405c4:	20003c24 	.word	0x20003c24
   405c8:	2000395c 	.word	0x2000395c
   405cc:	20003960 	.word	0x20003960
   405d0:	40027000 	.word	0x40027000
   405d4:	0004ab84 	.word	0x0004ab84
   405d8:	0004ab96 	.word	0x0004ab96
   405dc:	20003964 	.word	0x20003964

000405e0 <ev_epdata_handler>:
{
   405e0:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
   405e2:	4b0f      	ldr	r3, [pc, #60]	; (40620 <ev_epdata_handler+0x40>)
   405e4:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
   405e8:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
   405ec:	2501      	movs	r5, #1
    while (dataepstatus)
   405ee:	b91c      	cbnz	r4, 405f8 <ev_epdata_handler+0x18>
}
   405f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
   405f4:	f7ff bf30 	b.w	40458 <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   405f8:	fa94 f3a4 	rbit	r3, r4
   405fc:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   40600:	2b0f      	cmp	r3, #15
   40602:	bfc8      	it	gt
   40604:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   40608:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   4060a:	bfd4      	ite	le
   4060c:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
   40610:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
   40612:	fa05 f303 	lsl.w	r3, r5, r3
   40616:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
   4061a:	f7ff fcd9 	bl	3ffd0 <usbd_ep_data_handler>
   4061e:	e7e6      	b.n	405ee <ev_epdata_handler+0xe>
   40620:	40027000 	.word	0x40027000

00040624 <nrf_usbd_epout_dma_handler>:
{
   40624:	b537      	push	{r0, r1, r2, r4, r5, lr}
    usbd_dma_pending_clear();
   40626:	f7ff fcab 	bl	3ff80 <usbd_dma_pending_clear>
{
   4062a:	4604      	mov	r4, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
   4062c:	f7ff fb9e 	bl	3fd6c <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   40630:	7b83      	ldrb	r3, [r0, #14]
   40632:	2b03      	cmp	r3, #3
   40634:	d10d      	bne.n	40652 <nrf_usbd_epout_dma_handler+0x2e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   40636:	4620      	mov	r0, r4
   40638:	f007 fcad 	bl	47f96 <ep2bit>
   4063c:	2301      	movs	r3, #1
   4063e:	fa03 f000 	lsl.w	r0, r3, r0
   40642:	43c0      	mvns	r0, r0
   40644:	f7ff fc8c 	bl	3ff60 <atomic_and.constprop.0.isra.0>
}
   40648:	b003      	add	sp, #12
   4064a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
   4064e:	f7ff bf03 	b.w	40458 <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
   40652:	6805      	ldr	r5, [r0, #0]
   40654:	2d00      	cmp	r5, #0
   40656:	d1f7      	bne.n	40648 <nrf_usbd_epout_dma_handler+0x24>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   40658:	4620      	mov	r0, r4
   4065a:	f007 fc9c 	bl	47f96 <ep2bit>
   4065e:	2301      	movs	r3, #1
   40660:	fa03 f000 	lsl.w	r0, r3, r0
   40664:	43c0      	mvns	r0, r0
   40666:	f7ff fc7b 	bl	3ff60 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   4066a:	2306      	movs	r3, #6
   4066c:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   40670:	4b04      	ldr	r3, [pc, #16]	; (40684 <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   40672:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
   40676:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   40678:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
   4067c:	a801      	add	r0, sp, #4
   4067e:	4798      	blx	r3
   40680:	e7e2      	b.n	40648 <nrf_usbd_epout_dma_handler+0x24>
   40682:	bf00      	nop
   40684:	20003964 	.word	0x20003964

00040688 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
   40688:	4b02      	ldr	r3, [pc, #8]	; (40694 <nrfx_usbd_ep_stall+0xc>)
   4068a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   4068e:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
   40692:	4770      	bx	lr
   40694:	40027000 	.word	0x40027000

00040698 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
   40698:	0702      	lsls	r2, r0, #28
   4069a:	d413      	bmi.n	406c4 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
   4069c:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   406a0:	f010 0f80 	tst.w	r0, #128	; 0x80
   406a4:	4a08      	ldr	r2, [pc, #32]	; (406c8 <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
   406a6:	bf0b      	itete	eq
   406a8:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
   406ac:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
   406b0:	eb02 0283 	addeq.w	r2, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
   406b4:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
   406b8:	bf08      	it	eq
   406ba:	6850      	ldreq	r0, [r2, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
   406bc:	1e43      	subs	r3, r0, #1
   406be:	4258      	negs	r0, r3
   406c0:	4158      	adcs	r0, r3
   406c2:	4770      	bx	lr
        return false;
   406c4:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
   406c6:	4770      	bx	lr
   406c8:	40027000 	.word	0x40027000

000406cc <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
   406cc:	4b04      	ldr	r3, [pc, #16]	; (406e0 <nrfx_usbd_ep_dtoggle_clear+0x14>)
   406ce:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
   406d2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   406d6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
   406da:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
   406de:	4770      	bx	lr
   406e0:	40027000 	.word	0x40027000

000406e4 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
   406e4:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   406e6:	2208      	movs	r2, #8
   406e8:	2100      	movs	r1, #0
{
   406ea:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   406ec:	f004 f9f4 	bl	44ad8 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   406f0:	4b0e      	ldr	r3, [pc, #56]	; (4072c <nrfx_usbd_setup_get+0x48>)
   406f2:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   406f6:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
   406f8:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   406fc:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
   406fe:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   40702:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   40706:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
   4070a:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
   4070c:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   40710:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   40714:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
   40718:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
   4071a:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   4071e:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   40722:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
   40726:	80e3      	strh	r3, [r4, #6]
}
   40728:	bd10      	pop	{r4, pc}
   4072a:	bf00      	nop
   4072c:	40027000 	.word	0x40027000

00040730 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   40730:	4b02      	ldr	r3, [pc, #8]	; (4073c <nrfx_usbd_setup_data_clear+0xc>)
   40732:	2201      	movs	r2, #1
   40734:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   40736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
   40738:	4770      	bx	lr
   4073a:	bf00      	nop
   4073c:	40027000 	.word	0x40027000

00040740 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   40740:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
   40742:	f7ff fc1d 	bl	3ff80 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   40746:	4b10      	ldr	r3, [pc, #64]	; (40788 <ev_dma_epout0_handler+0x48>)
   40748:	7b9a      	ldrb	r2, [r3, #14]
   4074a:	2a03      	cmp	r2, #3
   4074c:	d106      	bne.n	4075c <ev_dma_epout0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   4074e:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   40752:	b002      	add	sp, #8
   40754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   40758:	f7ff bc02 	b.w	3ff60 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
   4075c:	681c      	ldr	r4, [r3, #0]
   4075e:	b974      	cbnz	r4, 4077e <ev_dma_epout0_handler+0x3e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   40760:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
   40764:	f7ff fbfc 	bl	3ff60 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   40768:	2306      	movs	r3, #6
   4076a:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   4076e:	4b07      	ldr	r3, [pc, #28]	; (4078c <ev_dma_epout0_handler+0x4c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   40770:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
   40774:	681b      	ldr	r3, [r3, #0]
   40776:	a801      	add	r0, sp, #4
   40778:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   4077a:	b002      	add	sp, #8
   4077c:	bd10      	pop	{r4, pc}
   4077e:	b002      	add	sp, #8
   40780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
   40784:	f7ff bfd4 	b.w	40730 <nrfx_usbd_setup_data_clear>
   40788:	2000383c 	.word	0x2000383c
   4078c:	20003964 	.word	0x20003964

00040790 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   40790:	4b02      	ldr	r3, [pc, #8]	; (4079c <nrfx_usbd_setup_clear+0xc>)
   40792:	2201      	movs	r2, #1
   40794:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   40796:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
   40798:	4770      	bx	lr
   4079a:	bf00      	nop
   4079c:	40027000 	.word	0x40027000

000407a0 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   407a0:	4b02      	ldr	r3, [pc, #8]	; (407ac <nrfx_usbd_setup_stall+0xc>)
   407a2:	2201      	movs	r2, #1
   407a4:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   407a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
   407a8:	4770      	bx	lr
   407aa:	bf00      	nop
   407ac:	40027000 	.word	0x40027000

000407b0 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
   407b0:	4b01      	ldr	r3, [pc, #4]	; (407b8 <nrfx_usbd_last_setup_dir_get+0x8>)
   407b2:	7818      	ldrb	r0, [r3, #0]
   407b4:	4770      	bx	lr
   407b6:	bf00      	nop
   407b8:	20003c25 	.word	0x20003c25

000407bc <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
   407bc:	b510      	push	{r4, lr}
   407be:	4602      	mov	r2, r0
	__asm__ volatile(
   407c0:	f04f 0320 	mov.w	r3, #32
   407c4:	f3ef 8411 	mrs	r4, BASEPRI
   407c8:	f383 8812 	msr	BASEPRI_MAX, r3
   407cc:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
   407d0:	f007 fbe1 	bl	47f96 <ep2bit>
   407d4:	490d      	ldr	r1, [pc, #52]	; (4080c <nrfx_usbd_transfer_out_drop+0x50>)
   407d6:	2301      	movs	r3, #1
   407d8:	fa03 f000 	lsl.w	r0, r3, r0
   407dc:	680b      	ldr	r3, [r1, #0]
   407de:	ea23 0300 	bic.w	r3, r3, r0
   407e2:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
   407e4:	f012 0108 	ands.w	r1, r2, #8
   407e8:	d10a      	bne.n	40800 <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
   407ea:	f002 030f 	and.w	r3, r2, #15
   407ee:	009b      	lsls	r3, r3, #2
   407f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   407f4:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
   407f8:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   407fc:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
   40800:	f384 8811 	msr	BASEPRI, r4
   40804:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   40808:	bd10      	pop	{r4, pc}
   4080a:	bf00      	nop
   4080c:	20003960 	.word	0x20003960

00040810 <usbd_ep_abort>:
{
   40810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   40812:	4601      	mov	r1, r0
	__asm__ volatile(
   40814:	f04f 0320 	mov.w	r3, #32
   40818:	f3ef 8511 	mrs	r5, BASEPRI
   4081c:	f383 8812 	msr	BASEPRI_MAX, r3
   40820:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
   40824:	f7ff faa2 	bl	3fd6c <ep_state_access>
   40828:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   4082a:	4608      	mov	r0, r1
   4082c:	f007 fbb3 	bl	47f96 <ep2bit>
   40830:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
   40832:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   40836:	fa02 f200 	lsl.w	r2, r2, r0
   4083a:	482e      	ldr	r0, [pc, #184]	; (408f4 <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
   4083c:	d118      	bne.n	40870 <usbd_ep_abort+0x60>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   4083e:	6803      	ldr	r3, [r0, #0]
   40840:	ea32 0403 	bics.w	r4, r2, r3
   40844:	d00a      	beq.n	4085c <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
   40846:	4608      	mov	r0, r1
   40848:	f7ff ffb8 	bl	407bc <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
   4084c:	2303      	movs	r3, #3
   4084e:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
   40850:	f385 8811 	msr	BASEPRI, r5
   40854:	f3bf 8f6f 	isb	sy
}
   40858:	b003      	add	sp, #12
   4085a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_ep_ready &= ~(1U << ep2bit(ep));
   4085c:	4926      	ldr	r1, [pc, #152]	; (408f8 <usbd_ep_abort+0xe8>)
            p_state->handler.consumer = NULL;
   4085e:	6034      	str	r4, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   40860:	ea23 0302 	bic.w	r3, r3, r2
   40864:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   40866:	680b      	ldr	r3, [r1, #0]
   40868:	ea23 0302 	bic.w	r3, r3, r2
   4086c:	600b      	str	r3, [r1, #0]
   4086e:	e7ed      	b.n	4084c <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
   40870:	070b      	lsls	r3, r1, #28
   40872:	d415      	bmi.n	408a0 <usbd_ep_abort+0x90>
            if(ep != NRFX_USBD_EPIN0)
   40874:	2980      	cmp	r1, #128	; 0x80
   40876:	4b21      	ldr	r3, [pc, #132]	; (408fc <usbd_ep_abort+0xec>)
   40878:	d02f      	beq.n	408da <usbd_ep_abort+0xca>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
   4087a:	f001 040f 	and.w	r4, r1, #15
   4087e:	f204 34da 	addw	r4, r4, #986	; 0x3da
   40882:	0064      	lsls	r4, r4, #1
   40884:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   40888:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   4088c:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   40890:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   40892:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   40896:	433c      	orrs	r4, r7
   40898:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   4089c:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   408a0:	4f15      	ldr	r7, [pc, #84]	; (408f8 <usbd_ep_abort+0xe8>)
   408a2:	6804      	ldr	r4, [r0, #0]
   408a4:	683b      	ldr	r3, [r7, #0]
   408a6:	ea64 0c03 	orn	ip, r4, r3
   408aa:	ea1c 0f02 	tst.w	ip, r2
   408ae:	d0cf      	beq.n	40850 <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
   408b0:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   408b2:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
   408b6:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
   408b8:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   408ba:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
   408bc:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
   408be:	2303      	movs	r3, #3
   408c0:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   408c2:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   408c6:	4b0e      	ldr	r3, [pc, #56]	; (40900 <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   408c8:	f88d 1006 	strb.w	r1, [sp, #6]
   408cc:	2206      	movs	r2, #6
            m_event_handler(&evt);
   408ce:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   408d0:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
   408d4:	a801      	add	r0, sp, #4
   408d6:	4798      	blx	r3
   408d8:	e7ba      	b.n	40850 <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
   408da:	f240 74b4 	movw	r4, #1972	; 0x7b4
   408de:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   408e2:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   408e6:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   408ea:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   408ec:	f044 0404 	orr.w	r4, r4, #4
   408f0:	e7d1      	b.n	40896 <usbd_ep_abort+0x86>
   408f2:	bf00      	nop
   408f4:	2000395c 	.word	0x2000395c
   408f8:	20003960 	.word	0x20003960
   408fc:	40027000 	.word	0x40027000
   40900:	20003964 	.word	0x20003964

00040904 <ev_setup_handler>:
{
   40904:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   40906:	4b14      	ldr	r3, [pc, #80]	; (40958 <ev_setup_handler+0x54>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   40908:	4c14      	ldr	r4, [pc, #80]	; (4095c <ev_setup_handler+0x58>)
   4090a:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
   4090e:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
   40910:	4e13      	ldr	r6, [pc, #76]	; (40960 <ev_setup_handler+0x5c>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   40912:	43da      	mvns	r2, r3
   40914:	4b13      	ldr	r3, [pc, #76]	; (40964 <ev_setup_handler+0x60>)
        & (1U <<ep2bit(m_last_setup_dir)))
   40916:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   40918:	681b      	ldr	r3, [r3, #0]
   4091a:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
   4091c:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   4091e:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
   40920:	f007 fb39 	bl	47f96 <ep2bit>
   40924:	2301      	movs	r3, #1
   40926:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   40928:	4213      	tst	r3, r2
   4092a:	d002      	beq.n	40932 <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
   4092c:	4608      	mov	r0, r1
   4092e:	f7ff ff6f 	bl	40810 <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
   40932:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    (void)(NRFX_ATOMIC_FETCH_AND(
   40936:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
   4093a:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
   4093c:	f7ff fb10 	bl	3ff60 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
   40940:	6823      	ldr	r3, [r4, #0]
   40942:	f043 0301 	orr.w	r3, r3, #1
   40946:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
   40948:	2305      	movs	r3, #5
   4094a:	9301      	str	r3, [sp, #4]
    m_event_handler(&evt);
   4094c:	4b06      	ldr	r3, [pc, #24]	; (40968 <ev_setup_handler+0x64>)
   4094e:	a801      	add	r0, sp, #4
   40950:	681b      	ldr	r3, [r3, #0]
   40952:	4798      	blx	r3
}
   40954:	b002      	add	sp, #8
   40956:	bd70      	pop	{r4, r5, r6, pc}
   40958:	40027000 	.word	0x40027000
   4095c:	20003960 	.word	0x20003960
   40960:	20003c25 	.word	0x20003c25
   40964:	2000395c 	.word	0x2000395c
   40968:	20003964 	.word	0x20003964

0004096c <nrfx_usbd_irq_handler>:
    return p_reg->INTENSET;
   4096c:	4b1b      	ldr	r3, [pc, #108]	; (409dc <nrfx_usbd_irq_handler+0x70>)
   4096e:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
   40972:	2300      	movs	r3, #0
{
   40974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            active |= 1UL << event_nr;
   40978:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   4097a:	461d      	mov	r5, r3
    while (to_process)
   4097c:	b970      	cbnz	r0, 4099c <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
   4097e:	4f18      	ldr	r7, [pc, #96]	; (409e0 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
   40980:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
   40984:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
   40988:	f04f 0801 	mov.w	r8, #1
    while (active)
   4098c:	b9bc      	cbnz	r4, 409be <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
   4098e:	f7ff fd63 	bl	40458 <usbd_dmareq_process>
    if (setup_active)
   40992:	b306      	cbz	r6, 409d6 <nrfx_usbd_irq_handler+0x6a>
}
   40994:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
   40998:	f7ff bfb4 	b.w	40904 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
   4099c:	fa90 f2a0 	rbit	r2, r0
   409a0:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   409a4:	490f      	ldr	r1, [pc, #60]	; (409e4 <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
   409a6:	0096      	lsls	r6, r2, #2
   409a8:	4431      	add	r1, r6
            active |= 1UL << event_nr;
   409aa:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   409ae:	680e      	ldr	r6, [r1, #0]
    if (ret)
   409b0:	b116      	cbz	r6, 409b8 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   409b2:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   409b4:	6809      	ldr	r1, [r1, #0]
   409b6:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
   409b8:	ea20 0002 	bic.w	r0, r0, r2
   409bc:	e7de      	b.n	4097c <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
   409be:	fa94 f5a4 	rbit	r5, r4
   409c2:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
   409c6:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
   409ca:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
   409ce:	4798      	blx	r3
        active &= ~(1UL << event_nr);
   409d0:	ea24 0405 	bic.w	r4, r4, r5
   409d4:	e7da      	b.n	4098c <nrfx_usbd_irq_handler+0x20>
}
   409d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   409da:	bf00      	nop
   409dc:	40027000 	.word	0x40027000
   409e0:	0004aa58 	.word	0x0004aa58
   409e4:	40027100 	.word	0x40027100

000409e8 <usbd_ep_abort_all>:
{
   409e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
   409ea:	4e11      	ldr	r6, [pc, #68]	; (40a30 <usbd_ep_abort_all+0x48>)
   409ec:	4b11      	ldr	r3, [pc, #68]	; (40a34 <usbd_ep_abort_all+0x4c>)
   409ee:	6834      	ldr	r4, [r6, #0]
   409f0:	681b      	ldr	r3, [r3, #0]
   409f2:	0c24      	lsrs	r4, r4, #16
   409f4:	0424      	lsls	r4, r4, #16
   409f6:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
   409f8:	2701      	movs	r7, #1
    while (0 != ep_waiting)
   409fa:	b91c      	cbnz	r4, 40a04 <usbd_ep_abort_all+0x1c>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   409fc:	f240 13ff 	movw	r3, #511	; 0x1ff
   40a00:	6033      	str	r3, [r6, #0]
}
   40a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   40a04:	fa94 f5a4 	rbit	r5, r4
   40a08:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   40a0c:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   40a0e:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   40a10:	bfc6      	itte	gt
   40a12:	f1a5 0010 	subgt.w	r0, r5, #16
   40a16:	b2c0      	uxtbgt	r0, r0
   40a18:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
   40a1c:	0703      	lsls	r3, r0, #28
   40a1e:	d401      	bmi.n	40a24 <usbd_ep_abort_all+0x3c>
            usbd_ep_abort(bit2ep(bitpos));
   40a20:	f7ff fef6 	bl	40810 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
   40a24:	fa07 f505 	lsl.w	r5, r7, r5
   40a28:	ea24 0405 	bic.w	r4, r4, r5
   40a2c:	e7e5      	b.n	409fa <usbd_ep_abort_all+0x12>
   40a2e:	bf00      	nop
   40a30:	20003960 	.word	0x20003960
   40a34:	2000395c 	.word	0x2000395c

00040a38 <nrfx_usbd_stop>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   40a38:	4b0c      	ldr	r3, [pc, #48]	; (40a6c <nrfx_usbd_stop+0x34>)
   40a3a:	2280      	movs	r2, #128	; 0x80
{
   40a3c:	b510      	push	{r4, lr}
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
   40a3e:	2027      	movs	r0, #39	; 0x27
   40a40:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   40a44:	f7e9 fb84 	bl	2a150 <arch_irq_is_enabled>
   40a48:	b170      	cbz	r0, 40a68 <nrfx_usbd_stop+0x30>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
   40a4a:	4c09      	ldr	r4, [pc, #36]	; (40a70 <nrfx_usbd_stop+0x38>)
        usbd_ep_abort_all();
   40a4c:	f7ff ffcc 	bl	409e8 <usbd_ep_abort_all>
   40a50:	2300      	movs	r3, #0
   40a52:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
   40a56:	2027      	movs	r0, #39	; 0x27
    (void) p_reg->USBPULLUP;
   40a58:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   40a5c:	f7e9 fb64 	bl	2a128 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   40a60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   40a64:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
   40a68:	bd10      	pop	{r4, pc}
   40a6a:	bf00      	nop
   40a6c:	e000e100 	.word	0xe000e100
   40a70:	40027000 	.word	0x40027000

00040a74 <nrfx_usbd_disable>:
{
   40a74:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
   40a76:	f7ff ffdf 	bl	40a38 <nrfx_usbd_stop>
    return p_reg->INTENSET;
   40a7a:	4b08      	ldr	r3, [pc, #32]	; (40a9c <nrfx_usbd_disable+0x28>)
   40a7c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
   40a80:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
   40a84:	2200      	movs	r2, #0
   40a86:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   40a8a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
   40a8e:	f7ff fa77 	bl	3ff80 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   40a92:	4b03      	ldr	r3, [pc, #12]	; (40aa0 <nrfx_usbd_disable+0x2c>)
   40a94:	2201      	movs	r2, #1
   40a96:	701a      	strb	r2, [r3, #0]
}
   40a98:	bd08      	pop	{r3, pc}
   40a9a:	bf00      	nop
   40a9c:	40027000 	.word	0x40027000
   40aa0:	20003c27 	.word	0x20003c27

00040aa4 <nrfx_usbd_suspend>:
{
   40aa4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   40aa6:	f04f 0320 	mov.w	r3, #32
   40aaa:	f3ef 8511 	mrs	r5, BASEPRI
   40aae:	f383 8812 	msr	BASEPRI_MAX, r3
   40ab2:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
   40ab6:	4b10      	ldr	r3, [pc, #64]	; (40af8 <nrfx_usbd_suspend+0x54>)
   40ab8:	781b      	ldrb	r3, [r3, #0]
   40aba:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   40abe:	b1a3      	cbz	r3, 40aea <nrfx_usbd_suspend+0x46>
        usbd_ep_abort_all();
   40ac0:	f7ff ff92 	bl	409e8 <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
   40ac4:	4b0d      	ldr	r3, [pc, #52]	; (40afc <nrfx_usbd_suspend+0x58>)
   40ac6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
   40aca:	f412 7200 	ands.w	r2, r2, #512	; 0x200
   40ace:	d10c      	bne.n	40aea <nrfx_usbd_suspend+0x46>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
   40ad0:	2101      	movs	r1, #1
   40ad2:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   40ad6:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
   40ada:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   40ade:	0589      	lsls	r1, r1, #22
   40ae0:	d504      	bpl.n	40aec <nrfx_usbd_suspend+0x48>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
   40ae2:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   40ae6:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
   40aea:	2400      	movs	r4, #0
	__asm__ volatile(
   40aec:	f385 8811 	msr	BASEPRI, r5
   40af0:	f3bf 8f6f 	isb	sy
}
   40af4:	4620      	mov	r0, r4
   40af6:	bd38      	pop	{r3, r4, r5, pc}
   40af8:	20003c26 	.word	0x20003c26
   40afc:	40027000 	.word	0x40027000

00040b00 <nrfx_usbd_ep_disable>:
{
   40b00:	b510      	push	{r4, lr}
   40b02:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
   40b04:	f7ff fe84 	bl	40810 <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   40b08:	4a10      	ldr	r2, [pc, #64]	; (40b4c <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
   40b0a:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   40b0e:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
   40b12:	f04f 0301 	mov.w	r3, #1
   40b16:	bf14      	ite	ne
   40b18:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   40b1c:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
   40b20:	fa03 f300 	lsl.w	r3, r3, r0
   40b24:	ea6f 0303 	mvn.w	r3, r3
   40b28:	bf15      	itete	ne
   40b2a:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
   40b2c:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
   40b2e:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   40b32:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   40b36:	bf14      	ite	ne
   40b38:	4b05      	ldrne	r3, [pc, #20]	; (40b50 <nrfx_usbd_ep_disable+0x50>)
   40b3a:	4b06      	ldreq	r3, [pc, #24]	; (40b54 <nrfx_usbd_ep_disable+0x54>)
   40b3c:	5c1a      	ldrb	r2, [r3, r0]
   40b3e:	2301      	movs	r3, #1
   40b40:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
   40b42:	4a02      	ldr	r2, [pc, #8]	; (40b4c <nrfx_usbd_ep_disable+0x4c>)
   40b44:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   40b48:	bd10      	pop	{r4, pc}
   40b4a:	bf00      	nop
   40b4c:	40027000 	.word	0x40027000
   40b50:	0004b17a 	.word	0x0004b17a
   40b54:	0004b171 	.word	0x0004b171

00040b58 <nrfx_usbd_ep_enable>:
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   40b58:	f010 0f80 	tst.w	r0, #128	; 0x80
{
   40b5c:	b570      	push	{r4, r5, r6, lr}
   40b5e:	4924      	ldr	r1, [pc, #144]	; (40bf0 <nrfx_usbd_ep_enable+0x98>)
   40b60:	4604      	mov	r4, r0
   40b62:	f000 030f 	and.w	r3, r0, #15
   40b66:	f04f 0501 	mov.w	r5, #1
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   40b6a:	d012      	beq.n	40b92 <nrfx_usbd_ep_enable+0x3a>
   40b6c:	4a21      	ldr	r2, [pc, #132]	; (40bf4 <nrfx_usbd_ep_enable+0x9c>)
   40b6e:	5cd2      	ldrb	r2, [r2, r3]
   40b70:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
   40b74:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPINEN & (1UL << epnr));
   40b78:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   40b7c:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   40b7e:	07d0      	lsls	r0, r2, #31
   40b80:	d406      	bmi.n	40b90 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPINEN |= 1UL << epnr;
   40b82:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   40b86:	fa05 f303 	lsl.w	r3, r5, r3
   40b8a:	4313      	orrs	r3, r2
   40b8c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
}
   40b90:	bd70      	pop	{r4, r5, r6, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   40b92:	4a19      	ldr	r2, [pc, #100]	; (40bf8 <nrfx_usbd_ep_enable+0xa0>)
   40b94:	5cd2      	ldrb	r2, [r2, r3]
   40b96:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
   40b9a:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
   40b9e:	f8d1 2514 	ldr.w	r2, [r1, #1300]	; 0x514
   40ba2:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   40ba4:	07d2      	lsls	r2, r2, #31
   40ba6:	d4f3      	bmi.n	40b90 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPOUTEN |= 1UL << epnr;
   40ba8:	f8d1 6514 	ldr.w	r6, [r1, #1300]	; 0x514
   40bac:	fa05 f203 	lsl.w	r2, r5, r3
   40bb0:	4332      	orrs	r2, r6
   40bb2:	f8c1 2514 	str.w	r2, [r1, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
   40bb6:	2b00      	cmp	r3, #0
   40bb8:	d0ea      	beq.n	40b90 <nrfx_usbd_ep_enable+0x38>
        NRF_USBD_EPOUT_CHECK(ep) &&
   40bba:	0703      	lsls	r3, r0, #28
   40bbc:	d4e8      	bmi.n	40b90 <nrfx_usbd_ep_enable+0x38>
	__asm__ volatile(
   40bbe:	f04f 0320 	mov.w	r3, #32
   40bc2:	f3ef 8611 	mrs	r6, BASEPRI
   40bc6:	f383 8812 	msr	BASEPRI_MAX, r3
   40bca:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
   40bce:	f7ff fdf5 	bl	407bc <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   40bd2:	4620      	mov	r0, r4
   40bd4:	f007 f9df 	bl	47f96 <ep2bit>
   40bd8:	4a08      	ldr	r2, [pc, #32]	; (40bfc <nrfx_usbd_ep_enable+0xa4>)
   40bda:	6813      	ldr	r3, [r2, #0]
   40bdc:	fa05 f000 	lsl.w	r0, r5, r0
   40be0:	ea23 0300 	bic.w	r3, r3, r0
   40be4:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   40be6:	f386 8811 	msr	BASEPRI, r6
   40bea:	f3bf 8f6f 	isb	sy
}
   40bee:	e7cf      	b.n	40b90 <nrfx_usbd_ep_enable+0x38>
   40bf0:	40027000 	.word	0x40027000
   40bf4:	0004b17a 	.word	0x0004b17a
   40bf8:	0004b171 	.word	0x0004b171
   40bfc:	2000395c 	.word	0x2000395c

00040c00 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   40c00:	0603      	lsls	r3, r0, #24
{
   40c02:	b510      	push	{r4, lr}
   40c04:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   40c06:	d405      	bmi.n	40c14 <nrfx_usbd_ep_stall_clear+0x14>
   40c08:	f7ff fd46 	bl	40698 <nrfx_usbd_ep_stall_check>
   40c0c:	b110      	cbz	r0, 40c14 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
   40c0e:	4620      	mov	r0, r4
   40c10:	f7ff fdd4 	bl	407bc <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
   40c14:	4b01      	ldr	r3, [pc, #4]	; (40c1c <nrfx_usbd_ep_stall_clear+0x1c>)
   40c16:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
   40c1a:	bd10      	pop	{r4, pc}
   40c1c:	40027000 	.word	0x40027000

00040c20 <kscan_direct_init>:
    }

    return 0;
}

static int kscan_direct_init(const struct device *dev) {
   40c20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    struct kscan_direct_data *data = dev->data;
   40c24:	f8d0 8010 	ldr.w	r8, [r0, #16]
    const struct kscan_direct_config *config = dev->config;
   40c28:	6847      	ldr	r7, [r0, #4]

    data->dev = dev;
   40c2a:	f8c8 0000 	str.w	r0, [r8]
static int kscan_direct_init(const struct device *dev) {
   40c2e:	4605      	mov	r5, r0
    for (int i = 0; i < config->inputs.len; i++) {
   40c30:	2400      	movs	r4, #0
    gpio_init_callback(&irq->callback, kscan_direct_irq_callback_handler, BIT(gpio->pin));
   40c32:	f04f 0a01 	mov.w	sl, #1
    for (int i = 0; i < config->inputs.len; i++) {
   40c36:	687b      	ldr	r3, [r7, #4]
   40c38:	42a3      	cmp	r3, r4
   40c3a:	d808      	bhi.n	40c4e <kscan_direct_init+0x2e>

    kscan_direct_init_inputs(dev);

    k_work_init_delayable(&data->work, kscan_direct_work_handler);
   40c3c:	f108 0008 	add.w	r0, r8, #8
   40c40:	4922      	ldr	r1, [pc, #136]	; (40ccc <kscan_direct_init+0xac>)
   40c42:	f007 fe2a 	bl	4889a <k_work_init_delayable>

    return 0;
}
   40c46:	2000      	movs	r0, #0
   40c48:	b003      	add	sp, #12
   40c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        const struct gpio_dt_spec *gpio = &config->inputs.gpios[i];
   40c4e:	683e      	ldr	r6, [r7, #0]
        int err = kscan_direct_init_input_inst(dev, gpio, i, config->toggle_mode);
   40c50:	7e3a      	ldrb	r2, [r7, #24]
    if (!device_is_ready(gpio->port)) {
   40c52:	f856 0034 	ldr.w	r0, [r6, r4, lsl #3]
        int err = kscan_direct_init_input_inst(dev, gpio, i, config->toggle_mode);
   40c56:	9201      	str	r2, [sp, #4]
        const struct gpio_dt_spec *gpio = &config->inputs.gpios[i];
   40c58:	ea4f 09c4 	mov.w	r9, r4, lsl #3
   40c5c:	eb06 0bc4 	add.w	fp, r6, r4, lsl #3
   40c60:	f007 fbc2 	bl	483e8 <z_device_is_ready>
    if (!device_is_ready(gpio->port)) {
   40c64:	9a01      	ldr	r2, [sp, #4]
   40c66:	2800      	cmp	r0, #0
   40c68:	d0e8      	beq.n	40c3c <kscan_direct_init+0x1c>
    int err = gpio_pin_configure_dt(
   40c6a:	f89b c005 	ldrb.w	ip, [fp, #5]
   40c6e:	b352      	cbz	r2, 40cc6 <kscan_direct_init+0xa6>
        return ((BIT(0) & gpio->dt_flags) ? GPIO_PULL_UP : GPIO_PULL_DOWN);
   40c70:	f01c 0f01 	tst.w	ip, #1
   40c74:	bf0c      	ite	eq
   40c76:	2220      	moveq	r2, #32
   40c78:	2210      	movne	r2, #16
    int err = gpio_pin_configure_dt(
   40c7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
	return gpio_pin_configure(spec->port,
   40c7e:	f856 0009 	ldr.w	r0, [r6, r9]
				  spec->pin,
   40c82:	f89b 1004 	ldrb.w	r1, [fp, #4]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   40c86:	ea4c 0202 	orr.w	r2, ip, r2
   40c8a:	f007 fa2b 	bl	480e4 <z_impl_gpio_pin_configure>
    if (err) {
   40c8e:	2800      	cmp	r0, #0
   40c90:	d1d4      	bne.n	40c3c <kscan_direct_init+0x1c>
    struct kscan_direct_irq_callback *irq = &data->irqs[index];
   40c92:	692a      	ldr	r2, [r5, #16]
   40c94:	0121      	lsls	r1, r4, #4
   40c96:	6b90      	ldr	r0, [r2, #56]	; 0x38
    irq->dev = dev;
   40c98:	5045      	str	r5, [r0, r1]
    gpio_init_callback(&irq->callback, kscan_direct_irq_callback_handler, BIT(gpio->pin));
   40c9a:	f89b 3004 	ldrb.w	r3, [fp, #4]
    struct kscan_direct_irq_callback *irq = &data->irqs[index];
   40c9e:	eb00 1204 	add.w	r2, r0, r4, lsl #4
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   40ca2:	480b      	ldr	r0, [pc, #44]	; (40cd0 <kscan_direct_init+0xb0>)
    gpio_init_callback(&irq->callback, kscan_direct_irq_callback_handler, BIT(gpio->pin));
   40ca4:	fa0a f303 	lsl.w	r3, sl, r3
	callback->pin_mask = pin_mask;
   40ca8:	e9c2 0302 	strd	r0, r3, [r2, #8]
    err = gpio_add_callback(gpio->port, &irq->callback);
   40cac:	f856 0009 	ldr.w	r0, [r6, r9]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   40cb0:	6883      	ldr	r3, [r0, #8]
   40cb2:	69db      	ldr	r3, [r3, #28]
    gpio_init_callback(&irq->callback, kscan_direct_irq_callback_handler, BIT(gpio->pin));
   40cb4:	1d11      	adds	r1, r2, #4
   40cb6:	2b00      	cmp	r3, #0
   40cb8:	d0c0      	beq.n	40c3c <kscan_direct_init+0x1c>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   40cba:	2201      	movs	r2, #1
   40cbc:	4798      	blx	r3
        if (err) {
   40cbe:	2800      	cmp	r0, #0
   40cc0:	d1bc      	bne.n	40c3c <kscan_direct_init+0x1c>
    for (int i = 0; i < config->inputs.len; i++) {
   40cc2:	3401      	adds	r4, #1
   40cc4:	e7b7      	b.n	40c36 <kscan_direct_init+0x16>
    int err = gpio_pin_configure_dt(
   40cc6:	f44f 7280 	mov.w	r2, #256	; 0x100
   40cca:	e7d8      	b.n	40c7e <kscan_direct_init+0x5e>
   40ccc:	00048365 	.word	0x00048365
   40cd0:	00048183 	.word	0x00048183

00040cd4 <vddh_sample_fetch>:
    struct adc_channel_cfg acc;
    struct adc_sequence as;
    struct battery_value value;
};

static int vddh_sample_fetch(const struct device *dev, enum sensor_channel chan) {
   40cd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   40cd6:	3927      	subs	r1, #39	; 0x27
   40cd8:	b289      	uxth	r1, r1
   40cda:	2912      	cmp	r1, #18
   40cdc:	d827      	bhi.n	40d2e <vddh_sample_fetch+0x5a>
   40cde:	4b15      	ldr	r3, [pc, #84]	; (40d34 <vddh_sample_fetch+0x60>)
   40ce0:	40cb      	lsrs	r3, r1
   40ce2:	07db      	lsls	r3, r3, #31
   40ce4:	d523      	bpl.n	40d2e <vddh_sample_fetch+0x5a>
        chan != SENSOR_CHAN_ALL) {
        LOG_DBG("Selected channel is not supported: %d.", chan);
        return -ENOTSUP;
    }

    struct vddh_data *drv_data = dev->data;
   40ce6:	6905      	ldr	r5, [r0, #16]
		       const struct adc_sequence *sequence);

static inline int z_impl_adc_read(const struct device *dev,
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
   40ce8:	4813      	ldr	r0, [pc, #76]	; (40d38 <vddh_sample_fetch+0x64>)
   40cea:	6886      	ldr	r6, [r0, #8]
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
   40cec:	f105 0108 	add.w	r1, r5, #8
   40cf0:	6873      	ldr	r3, [r6, #4]
   40cf2:	4798      	blx	r3
    struct adc_sequence *as = &drv_data->as;

    int rc = adc_read(adc, as);
    as->calibrate = false;
   40cf4:	2300      	movs	r3, #0
   40cf6:	76ab      	strb	r3, [r5, #26]

    if (rc != 0) {
   40cf8:	4604      	mov	r4, r0
   40cfa:	b9a8      	cbnz	r0, 40d28 <vddh_sample_fetch+0x54>
        LOG_ERR("Failed to read ADC: %d", rc);
        return rc;
    }

    int32_t val = drv_data->value.adc_raw;
   40cfc:	8bab      	ldrh	r3, [r5, #28]
    rc = adc_raw_to_millivolts(adc_ref_internal(adc), drv_data->acc.gain, as->resolution, &val);
   40cfe:	8932      	ldrh	r2, [r6, #8]
   40d00:	7828      	ldrb	r0, [r5, #0]
   40d02:	7e2f      	ldrb	r7, [r5, #24]
	int32_t adc_mv = *valp * ref_mv;
   40d04:	4353      	muls	r3, r2
	int ret = adc_gain_invert(gain, &adc_mv);
   40d06:	a901      	add	r1, sp, #4
	int32_t adc_mv = *valp * ref_mv;
   40d08:	9301      	str	r3, [sp, #4]
	int ret = adc_gain_invert(gain, &adc_mv);
   40d0a:	f7fc ffb3 	bl	3dc74 <adc_gain_invert>
	if (ret == 0) {
   40d0e:	4604      	mov	r4, r0
   40d10:	b950      	cbnz	r0, 40d28 <vddh_sample_fetch+0x54>
		*valp = (adc_mv >> resolution);
   40d12:	9801      	ldr	r0, [sp, #4]
   40d14:	4138      	asrs	r0, r7
    if (rc != 0) {
        LOG_ERR("Failed to convert raw ADC to mV: %d", rc);
        return rc;
    }

    drv_data->value.millivolts = val * VDDHDIV;
   40d16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   40d1a:	b280      	uxth	r0, r0
   40d1c:	83e8      	strh	r0, [r5, #30]
    drv_data->value.state_of_charge = lithium_ion_mv_to_pct(drv_data->value.millivolts);
   40d1e:	b200      	sxth	r0, r0
   40d20:	f007 fb4a 	bl	483b8 <lithium_ion_mv_to_pct>
   40d24:	f885 0020 	strb.w	r0, [r5, #32]

    LOG_DBG("ADC raw %d ~ %d mV => %d%%", drv_data->value.adc_raw, drv_data->value.millivolts,
            drv_data->value.state_of_charge);

    return rc;
}
   40d28:	4620      	mov	r0, r4
   40d2a:	b003      	add	sp, #12
   40d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
static int vddh_sample_fetch(const struct device *dev, enum sensor_channel chan) {
   40d2e:	f06f 0485 	mvn.w	r4, #133	; 0x85
   40d32:	e7f9      	b.n	40d28 <vddh_sample_fetch+0x54>
   40d34:	00040021 	.word	0x00040021
   40d38:	00049094 	.word	0x00049094

00040d3c <vddh_init>:
static const struct sensor_driver_api vddh_api = {
    .sample_fetch = vddh_sample_fetch,
    .channel_get = vddh_channel_get,
};

static int vddh_init(const struct device *dev) {
   40d3c:	b570      	push	{r4, r5, r6, lr}
    struct vddh_data *drv_data = dev->data;
   40d3e:	6904      	ldr	r4, [r0, #16]
   40d40:	4d12      	ldr	r5, [pc, #72]	; (40d8c <vddh_init+0x50>)
   40d42:	4628      	mov	r0, r5
   40d44:	f007 fb50 	bl	483e8 <z_device_is_ready>

    if (!device_is_ready(adc)) {
   40d48:	b1e0      	cbz	r0, 40d84 <vddh_init+0x48>
        LOG_ERR("ADC device is not ready %s", adc->name);
        return -ENODEV;
    }

    drv_data->as = (struct adc_sequence){
   40d4a:	2214      	movs	r2, #20
   40d4c:	2100      	movs	r1, #0
   40d4e:	f104 0008 	add.w	r0, r4, #8
   40d52:	f003 fec1 	bl	44ad8 <memset>
        .channels = BIT(0),
        .buffer = &drv_data->value.adc_raw,
   40d56:	f104 021c 	add.w	r2, r4, #28
        .oversampling = 4,
        .calibrate = true,
    };

#ifdef CONFIG_ADC_NRFX_SAADC
    drv_data->acc = (struct adc_channel_cfg){
   40d5a:	490d      	ldr	r1, [pc, #52]	; (40d90 <vddh_init+0x54>)
    drv_data->as = (struct adc_sequence){
   40d5c:	6122      	str	r2, [r4, #16]
    drv_data->acc = (struct adc_channel_cfg){
   40d5e:	f44f 6250 	mov.w	r2, #3328	; 0xd00
   40d62:	e9c4 1200 	strd	r1, r2, [r4]
    drv_data->as = (struct adc_sequence){
   40d66:	2202      	movs	r2, #2
   40d68:	2301      	movs	r3, #1
   40d6a:	6162      	str	r2, [r4, #20]
        .reference = ADC_REF_INTERNAL,
        .acquisition_time = ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 40),
        .input_positive = SAADC_CH_PSELN_PSELN_VDDHDIV5,
    };

    drv_data->as.resolution = 12;
   40d6c:	f240 420c 	movw	r2, #1036	; 0x40c
    drv_data->as = (struct adc_sequence){
   40d70:	60e3      	str	r3, [r4, #12]
    drv_data->as.resolution = 12;
   40d72:	8322      	strh	r2, [r4, #24]
    drv_data->as = (struct adc_sequence){
   40d74:	76a3      	strb	r3, [r4, #26]
	return api->channel_setup(dev, channel_cfg);
   40d76:	68ab      	ldr	r3, [r5, #8]
   40d78:	4621      	mov	r1, r4
   40d7a:	4628      	mov	r0, r5
   40d7c:	681b      	ldr	r3, [r3, #0]

    const int rc = adc_channel_setup(adc, &drv_data->acc);
    LOG_DBG("VDDHDIV5 setup returned %d", rc);

    return rc;
}
   40d7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   40d82:	4718      	bx	r3
   40d84:	f06f 0012 	mvn.w	r0, #18
   40d88:	bd70      	pop	{r4, r5, r6, pc}
   40d8a:	bf00      	nop
   40d8c:	00049094 	.word	0x00049094
   40d90:	40280401 	.word	0x40280401

00040d94 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   40d94:	4b0e      	ldr	r3, [pc, #56]	; (40dd0 <z_sys_init_run_level+0x3c>)
{
   40d96:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   40d98:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   40d9c:	3001      	adds	r0, #1
   40d9e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   40da2:	42a6      	cmp	r6, r4
   40da4:	d800      	bhi.n	40da8 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   40da6:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   40da8:	e9d4 3500 	ldrd	r3, r5, [r4]
   40dac:	4628      	mov	r0, r5
   40dae:	4798      	blx	r3
		if (dev != NULL) {
   40db0:	b165      	cbz	r5, 40dcc <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   40db2:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   40db4:	b130      	cbz	r0, 40dc4 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   40db6:	2800      	cmp	r0, #0
   40db8:	bfb8      	it	lt
   40dba:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   40dbc:	28ff      	cmp	r0, #255	; 0xff
   40dbe:	bfa8      	it	ge
   40dc0:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   40dc2:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   40dc4:	785a      	ldrb	r2, [r3, #1]
   40dc6:	f042 0201 	orr.w	r2, r2, #1
   40dca:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   40dcc:	3408      	adds	r4, #8
   40dce:	e7e8      	b.n	40da2 <z_sys_init_run_level+0xe>
   40dd0:	0004ab6c 	.word	0x0004ab6c

00040dd4 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   40dd4:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   40dd6:	4605      	mov	r5, r0
   40dd8:	b910      	cbnz	r0, 40de0 <z_impl_device_get_binding+0xc>
		return NULL;
   40dda:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   40ddc:	4620      	mov	r0, r4
   40dde:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   40de0:	7803      	ldrb	r3, [r0, #0]
   40de2:	2b00      	cmp	r3, #0
   40de4:	d0f9      	beq.n	40dda <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   40de6:	4c0e      	ldr	r4, [pc, #56]	; (40e20 <z_impl_device_get_binding+0x4c>)
   40de8:	4e0e      	ldr	r6, [pc, #56]	; (40e24 <z_impl_device_get_binding+0x50>)
   40dea:	42b4      	cmp	r4, r6
   40dec:	d108      	bne.n	40e00 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   40dee:	4c0c      	ldr	r4, [pc, #48]	; (40e20 <z_impl_device_get_binding+0x4c>)
   40df0:	42b4      	cmp	r4, r6
   40df2:	d0f2      	beq.n	40dda <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   40df4:	4620      	mov	r0, r4
   40df6:	f007 faf7 	bl	483e8 <z_device_is_ready>
   40dfa:	b950      	cbnz	r0, 40e12 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   40dfc:	3418      	adds	r4, #24
   40dfe:	e7f7      	b.n	40df0 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   40e00:	4620      	mov	r0, r4
   40e02:	f007 faf1 	bl	483e8 <z_device_is_ready>
   40e06:	b110      	cbz	r0, 40e0e <z_impl_device_get_binding+0x3a>
   40e08:	6823      	ldr	r3, [r4, #0]
   40e0a:	42ab      	cmp	r3, r5
   40e0c:	d0e6      	beq.n	40ddc <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   40e0e:	3418      	adds	r4, #24
   40e10:	e7eb      	b.n	40dea <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   40e12:	6821      	ldr	r1, [r4, #0]
   40e14:	4628      	mov	r0, r5
   40e16:	f003 fe24 	bl	44a62 <strcmp>
   40e1a:	2800      	cmp	r0, #0
   40e1c:	d1ee      	bne.n	40dfc <z_impl_device_get_binding+0x28>
   40e1e:	e7dd      	b.n	40ddc <z_impl_device_get_binding+0x8>
   40e20:	00049034 	.word	0x00049034
   40e24:	0004913c 	.word	0x0004913c

00040e28 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   40e28:	4b01      	ldr	r3, [pc, #4]	; (40e30 <z_impl_z_errno+0x8>)
   40e2a:	6898      	ldr	r0, [r3, #8]
}
   40e2c:	3064      	adds	r0, #100	; 0x64
   40e2e:	4770      	bx	lr
   40e30:	20003aac 	.word	0x20003aac

00040e34 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   40e34:	b510      	push	{r4, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   40e36:	2300      	movs	r3, #0
{
   40e38:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   40e3a:	2201      	movs	r2, #1
   40e3c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   40e40:	220f      	movs	r2, #15
   40e42:	e9cd 3202 	strd	r3, r2, [sp, #8]
   40e46:	9301      	str	r3, [sp, #4]
	struct k_thread *thread = &z_idle_threads[i];
   40e48:	4c0b      	ldr	r4, [pc, #44]	; (40e78 <init_idle_thread+0x44>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   40e4a:	4b0c      	ldr	r3, [pc, #48]	; (40e7c <init_idle_thread+0x48>)
	z_setup_new_thread(thread, stack,
   40e4c:	490c      	ldr	r1, [pc, #48]	; (40e80 <init_idle_thread+0x4c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   40e4e:	2218      	movs	r2, #24
	struct k_thread *thread = &z_idle_threads[i];
   40e50:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   40e54:	fb02 3300 	mla	r3, r2, r0, r3
	z_setup_new_thread(thread, stack,
   40e58:	f44f 72a0 	mov.w	r2, #320	; 0x140
   40e5c:	9300      	str	r3, [sp, #0]
   40e5e:	fb02 1100 	mla	r1, r2, r0, r1
   40e62:	4b08      	ldr	r3, [pc, #32]	; (40e84 <init_idle_thread+0x50>)
   40e64:	4620      	mov	r0, r4
   40e66:	f000 f90b 	bl	41080 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   40e6a:	7b63      	ldrb	r3, [r4, #13]
   40e6c:	f023 0304 	bic.w	r3, r3, #4
   40e70:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   40e72:	b006      	add	sp, #24
   40e74:	bd10      	pop	{r4, pc}
   40e76:	bf00      	nop
   40e78:	200017c0 	.word	0x200017c0
   40e7c:	20003aac 	.word	0x20003aac
   40e80:	20005d58 	.word	0x20005d58
   40e84:	000411f1 	.word	0x000411f1

00040e88 <bg_thread_main>:
{
   40e88:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   40e8a:	4b0a      	ldr	r3, [pc, #40]	; (40eb4 <bg_thread_main+0x2c>)
   40e8c:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   40e8e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   40e90:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   40e92:	f7ff ff7f 	bl	40d94 <z_sys_init_run_level>
	boot_banner();
   40e96:	f008 f85d 	bl	48f54 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   40e9a:	2003      	movs	r0, #3
   40e9c:	f7ff ff7a 	bl	40d94 <z_sys_init_run_level>
	z_init_static_threads();
   40ea0:	f000 f94a 	bl	41138 <z_init_static_threads>
	main();
   40ea4:	f7e7 f820 	bl	27ee8 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   40ea8:	4a03      	ldr	r2, [pc, #12]	; (40eb8 <bg_thread_main+0x30>)
   40eaa:	7b13      	ldrb	r3, [r2, #12]
   40eac:	f023 0301 	bic.w	r3, r3, #1
   40eb0:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   40eb2:	bd08      	pop	{r3, pc}
   40eb4:	20003c28 	.word	0x20003c28
   40eb8:	20001840 	.word	0x20001840

00040ebc <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   40ebc:	4802      	ldr	r0, [pc, #8]	; (40ec8 <z_bss_zero+0xc>)
   40ebe:	4a03      	ldr	r2, [pc, #12]	; (40ecc <z_bss_zero+0x10>)
   40ec0:	2100      	movs	r1, #0
   40ec2:	1a12      	subs	r2, r2, r0
   40ec4:	f003 be08 	b.w	44ad8 <memset>
   40ec8:	20000d88 	.word	0x20000d88
   40ecc:	20003c2c 	.word	0x20003c2c

00040ed0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   40ed0:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   40ed2:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 40f9c <z_cstart+0xcc>
   40ed6:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   40ed8:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   40edc:	4d30      	ldr	r5, [pc, #192]	; (40fa0 <z_cstart+0xd0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   40ede:	4e31      	ldr	r6, [pc, #196]	; (40fa4 <z_cstart+0xd4>)
   40ee0:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   40ee2:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 40fa8 <z_cstart+0xd8>
   40ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   40eea:	2400      	movs	r4, #0
   40eec:	616b      	str	r3, [r5, #20]
   40eee:	23e0      	movs	r3, #224	; 0xe0
   40ef0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   40ef4:	77ec      	strb	r4, [r5, #31]
   40ef6:	762c      	strb	r4, [r5, #24]
   40ef8:	766c      	strb	r4, [r5, #25]
   40efa:	76ac      	strb	r4, [r5, #26]
   40efc:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   40f00:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   40f02:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   40f06:	626b      	str	r3, [r5, #36]	; 0x24
   40f08:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   40f0c:	f7e9 fae8 	bl	2a4e0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   40f10:	f7e9 f8de 	bl	2a0d0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   40f14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   40f18:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   40f1a:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
   40f1c:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   40f1e:	f7e9 fb97 	bl	2a650 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   40f22:	f7e9 fb25 	bl	2a570 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   40f26:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   40f2a:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   40f2c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   40f30:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   40f34:	f001 fb10 	bl	42558 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   40f38:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   40f3a:	f007 fa54 	bl	483e6 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   40f3e:	4620      	mov	r0, r4
   40f40:	f7ff ff28 	bl	40d94 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   40f44:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   40f46:	4d19      	ldr	r5, [pc, #100]	; (40fac <z_cstart+0xdc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   40f48:	f7ff ff24 	bl	40d94 <z_sys_init_run_level>
	z_sched_init();
   40f4c:	f000 ff6c 	bl	41e28 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   40f50:	4b17      	ldr	r3, [pc, #92]	; (40fb0 <z_cstart+0xe0>)
   40f52:	9305      	str	r3, [sp, #20]
   40f54:	2301      	movs	r3, #1
   40f56:	4917      	ldr	r1, [pc, #92]	; (40fb4 <z_cstart+0xe4>)
   40f58:	9400      	str	r4, [sp, #0]
   40f5a:	e9cd 4303 	strd	r4, r3, [sp, #12]
   40f5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   40f62:	464b      	mov	r3, r9
   40f64:	e9cd 4401 	strd	r4, r4, [sp, #4]
   40f68:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   40f6a:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   40f6c:	f000 f888 	bl	41080 <z_setup_new_thread>
   40f70:	7b6a      	ldrb	r2, [r5, #13]
   40f72:	4607      	mov	r7, r0
   40f74:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   40f78:	4628      	mov	r0, r5
   40f7a:	736a      	strb	r2, [r5, #13]
   40f7c:	f007 fd43 	bl	48a06 <z_ready_thread>
		init_idle_thread(i);
   40f80:	4620      	mov	r0, r4
   40f82:	f7ff ff57 	bl	40e34 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   40f86:	4b0c      	ldr	r3, [pc, #48]	; (40fb8 <z_cstart+0xe8>)
   40f88:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   40f8a:	464a      	mov	r2, r9
   40f8c:	4639      	mov	r1, r7
   40f8e:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   40f90:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   40f92:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   40f96:	f7e9 f9a1 	bl	2a2dc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   40f9a:	bf00      	nop
   40f9c:	20005d58 	.word	0x20005d58
   40fa0:	e000ed00 	.word	0xe000ed00
   40fa4:	20003aac 	.word	0x20003aac
   40fa8:	00040e89 	.word	0x00040e89
   40fac:	20001840 	.word	0x20001840
   40fb0:	0004b18b 	.word	0x0004b18b
   40fb4:	20005e98 	.word	0x20005e98
   40fb8:	200017c0 	.word	0x200017c0

00040fbc <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   40fbc:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   40fbe:	4c06      	ldr	r4, [pc, #24]	; (40fd8 <statics_init+0x1c>)
   40fc0:	4d06      	ldr	r5, [pc, #24]	; (40fdc <statics_init+0x20>)
   40fc2:	42ac      	cmp	r4, r5
   40fc4:	d301      	bcc.n	40fca <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   40fc6:	2000      	movs	r0, #0
   40fc8:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   40fca:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   40fce:	4620      	mov	r0, r4
   40fd0:	f007 fa3b 	bl	4844a <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   40fd4:	3414      	adds	r4, #20
   40fd6:	e7f4      	b.n	40fc2 <statics_init+0x6>
   40fd8:	20000af0 	.word	0x20000af0
   40fdc:	20000b04 	.word	0x20000b04

00040fe0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   40fe0:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   40fe2:	4b0e      	ldr	r3, [pc, #56]	; (4101c <init_mem_slab_module+0x3c>)
   40fe4:	4c0e      	ldr	r4, [pc, #56]	; (41020 <init_mem_slab_module+0x40>)
   40fe6:	42a3      	cmp	r3, r4
   40fe8:	d301      	bcc.n	40fee <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   40fea:	2000      	movs	r0, #0
	return rc;
}
   40fec:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   40fee:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   40ff2:	ea41 0200 	orr.w	r2, r1, r0
   40ff6:	f012 0203 	ands.w	r2, r2, #3
   40ffa:	d10b      	bne.n	41014 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   40ffc:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   40ffe:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   41000:	42aa      	cmp	r2, r5
   41002:	d101      	bne.n	41008 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   41004:	331c      	adds	r3, #28
   41006:	e7ee      	b.n	40fe6 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   41008:	695e      	ldr	r6, [r3, #20]
   4100a:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   4100c:	3201      	adds	r2, #1
		slab->free_list = p;
   4100e:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   41010:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   41012:	e7f5      	b.n	41000 <init_mem_slab_module+0x20>
	return rc;
   41014:	f06f 0015 	mvn.w	r0, #21
   41018:	e7e8      	b.n	40fec <init_mem_slab_module+0xc>
   4101a:	bf00      	nop
   4101c:	20000a80 	.word	0x20000a80
   41020:	20000af0 	.word	0x20000af0

00041024 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   41024:	b573      	push	{r0, r1, r4, r5, r6, lr}
   41026:	460c      	mov	r4, r1
	__asm__ volatile(
   41028:	f04f 0520 	mov.w	r5, #32
   4102c:	f3ef 8111 	mrs	r1, BASEPRI
   41030:	f385 8812 	msr	BASEPRI_MAX, r5
   41034:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   41038:	6945      	ldr	r5, [r0, #20]
   4103a:	b15d      	cbz	r5, 41054 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   4103c:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   4103e:	682b      	ldr	r3, [r5, #0]
   41040:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   41042:	6983      	ldr	r3, [r0, #24]
   41044:	3301      	adds	r3, #1
   41046:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   41048:	2000      	movs	r0, #0
	__asm__ volatile(
   4104a:	f381 8811 	msr	BASEPRI, r1
   4104e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   41052:	e011      	b.n	41078 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   41054:	ea52 0603 	orrs.w	r6, r2, r3
   41058:	d103      	bne.n	41062 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   4105a:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   4105c:	f06f 000b 	mvn.w	r0, #11
   41060:	e7f3      	b.n	4104a <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   41062:	e9cd 2300 	strd	r2, r3, [sp]
   41066:	4602      	mov	r2, r0
   41068:	3008      	adds	r0, #8
   4106a:	f000 fdf1 	bl	41c50 <z_pend_curr>
		if (result == 0) {
   4106e:	b918      	cbnz	r0, 41078 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   41070:	4b02      	ldr	r3, [pc, #8]	; (4107c <k_mem_slab_alloc+0x58>)
   41072:	689b      	ldr	r3, [r3, #8]
   41074:	695b      	ldr	r3, [r3, #20]
   41076:	6023      	str	r3, [r4, #0]
}
   41078:	b002      	add	sp, #8
   4107a:	bd70      	pop	{r4, r5, r6, pc}
   4107c:	20003aac 	.word	0x20003aac

00041080 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   41080:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   41084:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   41086:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   41088:	2604      	movs	r6, #4
   4108a:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   4108c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   4108e:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   41090:	f100 0558 	add.w	r5, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   41094:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   41096:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   4109a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   4109c:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   4109e:	f026 0607 	bic.w	r6, r6, #7
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   410a2:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   410a6:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   410aa:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   410ac:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   410ae:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   410b0:	9202      	str	r2, [sp, #8]
   410b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   410b4:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   410b6:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   410ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   410bc:	9200      	str	r2, [sp, #0]
   410be:	4642      	mov	r2, r8
{
   410c0:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   410c2:	f7e9 f8ef 	bl	2a2a4 <arch_new_thread>
	if (!_current) {
   410c6:	4b05      	ldr	r3, [pc, #20]	; (410dc <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   410c8:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   410ca:	689b      	ldr	r3, [r3, #8]
   410cc:	b103      	cbz	r3, 410d0 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   410ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   410d0:	6763      	str	r3, [r4, #116]	; 0x74
}
   410d2:	4640      	mov	r0, r8
   410d4:	b004      	add	sp, #16
   410d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   410da:	bf00      	nop
   410dc:	20003aac 	.word	0x20003aac

000410e0 <z_impl_k_thread_create>:
{
   410e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   410e2:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   410e4:	2500      	movs	r5, #0
   410e6:	9505      	str	r5, [sp, #20]
   410e8:	9d10      	ldr	r5, [sp, #64]	; 0x40
   410ea:	9504      	str	r5, [sp, #16]
   410ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   410ee:	9503      	str	r5, [sp, #12]
   410f0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   410f2:	9502      	str	r5, [sp, #8]
{
   410f4:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   410f8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   410fa:	9501      	str	r5, [sp, #4]
   410fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   410fe:	9500      	str	r5, [sp, #0]
{
   41100:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   41102:	f7ff ffbd 	bl	41080 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   41106:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   4110a:	bf08      	it	eq
   4110c:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
   41110:	d005      	beq.n	4111e <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   41112:	ea56 0307 	orrs.w	r3, r6, r7
   41116:	d105      	bne.n	41124 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   41118:	4620      	mov	r0, r4
   4111a:	f000 fe05 	bl	41d28 <z_sched_start>
}
   4111e:	4620      	mov	r0, r4
   41120:	b007      	add	sp, #28
   41122:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   41124:	4903      	ldr	r1, [pc, #12]	; (41134 <z_impl_k_thread_create+0x54>)
   41126:	463a      	mov	r2, r7
   41128:	4633      	mov	r3, r6
   4112a:	f104 0018 	add.w	r0, r4, #24
   4112e:	f001 f803 	bl	42138 <z_add_timeout>
   41132:	e7f4      	b.n	4111e <z_impl_k_thread_create+0x3e>
   41134:	00048973 	.word	0x00048973

00041138 <z_init_static_threads>:
{
   41138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4113c:	4c29      	ldr	r4, [pc, #164]	; (411e4 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   4113e:	4d2a      	ldr	r5, [pc, #168]	; (411e8 <z_init_static_threads+0xb0>)
{
   41140:	b087      	sub	sp, #28
   41142:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   41144:	42ae      	cmp	r6, r5
   41146:	f104 0430 	add.w	r4, r4, #48	; 0x30
   4114a:	d30f      	bcc.n	4116c <z_init_static_threads+0x34>
	k_sched_lock();
   4114c:	f000 fe3c 	bl	41dc8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   41150:	4c24      	ldr	r4, [pc, #144]	; (411e4 <z_init_static_threads+0xac>)
   41152:	f8df 9098 	ldr.w	r9, [pc, #152]	; 411ec <z_init_static_threads+0xb4>
   41156:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   4115a:	f240 37e7 	movw	r7, #999	; 0x3e7
   4115e:	42ac      	cmp	r4, r5
   41160:	d320      	bcc.n	411a4 <z_init_static_threads+0x6c>
}
   41162:	b007      	add	sp, #28
   41164:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   41168:	f000 be42 	b.w	41df0 <k_sched_unlock>
		z_setup_new_thread(
   4116c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   41170:	9305      	str	r3, [sp, #20]
   41172:	f854 3c10 	ldr.w	r3, [r4, #-16]
   41176:	9304      	str	r3, [sp, #16]
   41178:	f854 3c14 	ldr.w	r3, [r4, #-20]
   4117c:	9303      	str	r3, [sp, #12]
   4117e:	f854 3c18 	ldr.w	r3, [r4, #-24]
   41182:	9302      	str	r3, [sp, #8]
   41184:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   41188:	9301      	str	r3, [sp, #4]
   4118a:	f854 3c20 	ldr.w	r3, [r4, #-32]
   4118e:	9300      	str	r3, [sp, #0]
   41190:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   41194:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   41198:	f7ff ff72 	bl	41080 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   4119c:	f854 3c30 	ldr.w	r3, [r4, #-48]
   411a0:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   411a2:	e7ce      	b.n	41142 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   411a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   411a6:	1c5a      	adds	r2, r3, #1
   411a8:	d00d      	beq.n	411c6 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   411aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   411ae:	2100      	movs	r1, #0
   411b0:	4638      	mov	r0, r7
   411b2:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   411b6:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   411ba:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   411be:	d104      	bne.n	411ca <z_init_static_threads+0x92>
	z_sched_start(thread);
   411c0:	4640      	mov	r0, r8
   411c2:	f000 fdb1 	bl	41d28 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   411c6:	3430      	adds	r4, #48	; 0x30
   411c8:	e7c9      	b.n	4115e <z_init_static_threads+0x26>
   411ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   411ce:	2300      	movs	r3, #0
   411d0:	f7e4 ff96 	bl	26100 <__aeabi_uldivmod>
   411d4:	4602      	mov	r2, r0
   411d6:	460b      	mov	r3, r1
   411d8:	f108 0018 	add.w	r0, r8, #24
   411dc:	4649      	mov	r1, r9
   411de:	f000 ffab 	bl	42138 <z_add_timeout>
   411e2:	e7f0      	b.n	411c6 <z_init_static_threads+0x8e>
   411e4:	20000a10 	.word	0x20000a10
   411e8:	20000a10 	.word	0x20000a10
   411ec:	00048973 	.word	0x00048973

000411f0 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   411f0:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   411f2:	4c0b      	ldr	r4, [pc, #44]	; (41220 <idle+0x30>)
	return !z_sys_post_kernel;
   411f4:	4d0b      	ldr	r5, [pc, #44]	; (41224 <idle+0x34>)
	__asm__ volatile(
   411f6:	f04f 0220 	mov.w	r2, #32
   411fa:	f3ef 8311 	mrs	r3, BASEPRI
   411fe:	f382 8812 	msr	BASEPRI_MAX, r2
   41202:	f3bf 8f6f 	isb	sy
   41206:	f007 fcc4 	bl	48b92 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   4120a:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   4120c:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   4120e:	b913      	cbnz	r3, 41216 <idle+0x26>
	arch_cpu_idle();
   41210:	f7e8 ff64 	bl	2a0dc <arch_cpu_idle>
}
   41214:	e7ef      	b.n	411f6 <idle+0x6>
   41216:	f7e8 fd63 	bl	29ce0 <pm_system_suspend>
   4121a:	2800      	cmp	r0, #0
   4121c:	d1eb      	bne.n	411f6 <idle+0x6>
   4121e:	e7f7      	b.n	41210 <idle+0x20>
   41220:	20003aac 	.word	0x20003aac
   41224:	20003c28 	.word	0x20003c28

00041228 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   41228:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   4122c:	4604      	mov	r4, r0
   4122e:	460e      	mov	r6, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   41230:	f100 0808 	add.w	r8, r0, #8
   41234:	f04f 0120 	mov.w	r1, #32
   41238:	f3ef 8711 	mrs	r7, BASEPRI
   4123c:	f381 8812 	msr	BASEPRI_MAX, r1
   41240:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   41244:	6a05      	ldr	r5, [r0, #32]
   41246:	68c1      	ldr	r1, [r0, #12]
   41248:	428d      	cmp	r5, r1
   4124a:	d22f      	bcs.n	412ac <z_impl_k_msgq_put+0x84>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   4124c:	f007 fc12 	bl	48a74 <z_unpend_first_thread>
		if (pending_thread != NULL) {
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, 0);

			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   41250:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
   41252:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
   41254:	4631      	mov	r1, r6
		if (pending_thread != NULL) {
   41256:	b178      	cbz	r0, 41278 <z_impl_k_msgq_put+0x50>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   41258:	2400      	movs	r4, #0
			(void)memcpy(pending_thread->base.swap_data, data,
   4125a:	6940      	ldr	r0, [r0, #20]
   4125c:	f003 fc31 	bl	44ac2 <memcpy>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   41260:	4628      	mov	r0, r5
   41262:	67ec      	str	r4, [r5, #124]	; 0x7c
   41264:	f007 fbcf 	bl	48a06 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   41268:	4640      	mov	r0, r8
   4126a:	4639      	mov	r1, r7
   4126c:	f000 fd4a 	bl	41d04 <z_reschedule>
			return 0;
   41270:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   41272:	b002      	add	sp, #8
   41274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   41278:	69e0      	ldr	r0, [r4, #28]
   4127a:	f003 fc22 	bl	44ac2 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   4127e:	69e3      	ldr	r3, [r4, #28]
   41280:	68a2      	ldr	r2, [r4, #8]
   41282:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   41284:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   41286:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   41288:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   4128a:	bf04      	itt	eq
   4128c:	6923      	ldreq	r3, [r4, #16]
   4128e:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   41290:	6a23      	ldr	r3, [r4, #32]
   41292:	3301      	adds	r3, #1
	z_handle_obj_poll_events(&msgq->poll_events, state);
   41294:	f104 0024 	add.w	r0, r4, #36	; 0x24
			msgq->used_msgs++;
   41298:	6223      	str	r3, [r4, #32]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   4129a:	2110      	movs	r1, #16
   4129c:	f007 fe2e 	bl	48efc <z_handle_obj_poll_events>
		result = 0;
   412a0:	2000      	movs	r0, #0
	__asm__ volatile(
   412a2:	f387 8811 	msr	BASEPRI, r7
   412a6:	f3bf 8f6f 	isb	sy
	return result;
   412aa:	e7e2      	b.n	41272 <z_impl_k_msgq_put+0x4a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   412ac:	ea52 0103 	orrs.w	r1, r2, r3
   412b0:	d00a      	beq.n	412c8 <z_impl_k_msgq_put+0xa0>
		_current->base.swap_data = (void *) data;
   412b2:	4907      	ldr	r1, [pc, #28]	; (412d0 <z_impl_k_msgq_put+0xa8>)
   412b4:	6889      	ldr	r1, [r1, #8]
   412b6:	614e      	str	r6, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   412b8:	e9cd 2300 	strd	r2, r3, [sp]
   412bc:	4639      	mov	r1, r7
   412be:	4602      	mov	r2, r0
   412c0:	4640      	mov	r0, r8
   412c2:	f000 fcc5 	bl	41c50 <z_pend_curr>
		return result;
   412c6:	e7d4      	b.n	41272 <z_impl_k_msgq_put+0x4a>
		result = -ENOMSG;
   412c8:	f06f 0022 	mvn.w	r0, #34	; 0x22
   412cc:	e7e9      	b.n	412a2 <z_impl_k_msgq_put+0x7a>
   412ce:	bf00      	nop
   412d0:	20003aac 	.word	0x20003aac

000412d4 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   412d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   412d6:	4604      	mov	r4, r0

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   412d8:	f104 0708 	add.w	r7, r4, #8
{
   412dc:	4608      	mov	r0, r1
	__asm__ volatile(
   412de:	f04f 0120 	mov.w	r1, #32
   412e2:	f3ef 8611 	mrs	r6, BASEPRI
   412e6:	f381 8812 	msr	BASEPRI_MAX, r1
   412ea:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   412ee:	6a21      	ldr	r1, [r4, #32]
   412f0:	2900      	cmp	r1, #0
   412f2:	d031      	beq.n	41358 <z_impl_k_msgq_get+0x84>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   412f4:	68a2      	ldr	r2, [r4, #8]
   412f6:	69a1      	ldr	r1, [r4, #24]
   412f8:	f003 fbe3 	bl	44ac2 <memcpy>
		msgq->read_ptr += msgq->msg_size;
   412fc:	69a3      	ldr	r3, [r4, #24]
   412fe:	68a2      	ldr	r2, [r4, #8]
   41300:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   41302:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   41304:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   41306:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   41308:	bf04      	itt	eq
   4130a:	6923      	ldreq	r3, [r4, #16]
   4130c:	61a3      	streq	r3, [r4, #24]
		}
		msgq->used_msgs--;
   4130e:	6a23      	ldr	r3, [r4, #32]
   41310:	3b01      	subs	r3, #1
   41312:	6223      	str	r3, [r4, #32]

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   41314:	4620      	mov	r0, r4
   41316:	f007 fbad 	bl	48a74 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   4131a:	4605      	mov	r5, r0
   4131c:	b360      	cbz	r0, 41378 <z_impl_k_msgq_get+0xa4>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   4131e:	6941      	ldr	r1, [r0, #20]
   41320:	68a2      	ldr	r2, [r4, #8]
   41322:	69e0      	ldr	r0, [r4, #28]
   41324:	f003 fbcd 	bl	44ac2 <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   41328:	69e3      	ldr	r3, [r4, #28]
   4132a:	68a2      	ldr	r2, [r4, #8]
   4132c:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   4132e:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   41330:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   41332:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   41334:	bf04      	itt	eq
   41336:	6923      	ldreq	r3, [r4, #16]
   41338:	61e3      	streq	r3, [r4, #28]
			}
			msgq->used_msgs++;
   4133a:	6a23      	ldr	r3, [r4, #32]
   4133c:	3301      	adds	r3, #1
   4133e:	6223      	str	r3, [r4, #32]
   41340:	2400      	movs	r4, #0

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   41342:	4628      	mov	r0, r5
   41344:	67ec      	str	r4, [r5, #124]	; 0x7c
   41346:	f007 fb5e 	bl	48a06 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   4134a:	4638      	mov	r0, r7
   4134c:	4631      	mov	r1, r6
   4134e:	f000 fcd9 	bl	41d04 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
   41352:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   41354:	b003      	add	sp, #12
   41356:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   41358:	ea52 0103 	orrs.w	r1, r2, r3
   4135c:	d00a      	beq.n	41374 <z_impl_k_msgq_get+0xa0>
		_current->base.swap_data = data;
   4135e:	4909      	ldr	r1, [pc, #36]	; (41384 <z_impl_k_msgq_get+0xb0>)
   41360:	6889      	ldr	r1, [r1, #8]
   41362:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   41364:	e9cd 2300 	strd	r2, r3, [sp]
   41368:	4631      	mov	r1, r6
   4136a:	4622      	mov	r2, r4
   4136c:	4638      	mov	r0, r7
   4136e:	f000 fc6f 	bl	41c50 <z_pend_curr>
		return result;
   41372:	e7ef      	b.n	41354 <z_impl_k_msgq_get+0x80>
		result = -ENOMSG;
   41374:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   41378:	f386 8811 	msr	BASEPRI, r6
   4137c:	f3bf 8f6f 	isb	sy
	return result;
   41380:	e7e8      	b.n	41354 <z_impl_k_msgq_get+0x80>
   41382:	bf00      	nop
   41384:	20003aac 	.word	0x20003aac

00041388 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   41388:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   4138c:	4604      	mov	r4, r0
   4138e:	4617      	mov	r7, r2
   41390:	461e      	mov	r6, r3
	__asm__ volatile(
   41392:	f04f 0320 	mov.w	r3, #32
   41396:	f3ef 8811 	mrs	r8, BASEPRI
   4139a:	f383 8812 	msr	BASEPRI_MAX, r3
   4139e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   413a2:	68c3      	ldr	r3, [r0, #12]
   413a4:	4a32      	ldr	r2, [pc, #200]	; (41470 <z_impl_k_mutex_lock+0xe8>)
   413a6:	b17b      	cbz	r3, 413c8 <z_impl_k_mutex_lock+0x40>
   413a8:	6880      	ldr	r0, [r0, #8]
   413aa:	6891      	ldr	r1, [r2, #8]
   413ac:	4288      	cmp	r0, r1
   413ae:	d019      	beq.n	413e4 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   413b0:	ea57 0306 	orrs.w	r3, r7, r6
   413b4:	d118      	bne.n	413e8 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   413b6:	f388 8811 	msr	BASEPRI, r8
   413ba:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   413be:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   413c2:	b002      	add	sp, #8
   413c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   413c8:	6891      	ldr	r1, [r2, #8]
   413ca:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   413ce:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   413d0:	3301      	adds	r3, #1
   413d2:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   413d4:	6893      	ldr	r3, [r2, #8]
   413d6:	60a3      	str	r3, [r4, #8]
   413d8:	f388 8811 	msr	BASEPRI, r8
   413dc:	f3bf 8f6f 	isb	sy
		return 0;
   413e0:	2000      	movs	r0, #0
   413e2:	e7ee      	b.n	413c2 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   413e4:	6921      	ldr	r1, [r4, #16]
   413e6:	e7f2      	b.n	413ce <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   413e8:	f991 100e 	ldrsb.w	r1, [r1, #14]
   413ec:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   413f0:	4299      	cmp	r1, r3
   413f2:	bfa8      	it	ge
   413f4:	4619      	movge	r1, r3
   413f6:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   413fa:	4291      	cmp	r1, r2
   413fc:	bfb8      	it	lt
   413fe:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   41400:	428b      	cmp	r3, r1
   41402:	dd2e      	ble.n	41462 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   41404:	f007 f8c2 	bl	4858c <adjust_owner_prio.isra.0>
   41408:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   4140a:	e9cd 7600 	strd	r7, r6, [sp]
   4140e:	4819      	ldr	r0, [pc, #100]	; (41474 <z_impl_k_mutex_lock+0xec>)
   41410:	4622      	mov	r2, r4
   41412:	4641      	mov	r1, r8
   41414:	f000 fc1c 	bl	41c50 <z_pend_curr>
	if (got_mutex == 0) {
   41418:	2800      	cmp	r0, #0
   4141a:	d0e1      	beq.n	413e0 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   4141c:	f04f 0320 	mov.w	r3, #32
   41420:	f3ef 8611 	mrs	r6, BASEPRI
   41424:	f383 8812 	msr	BASEPRI_MAX, r3
   41428:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   4142c:	6823      	ldr	r3, [r4, #0]
   4142e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   41430:	429c      	cmp	r4, r3
   41432:	d00a      	beq.n	4144a <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   41434:	b14b      	cbz	r3, 4144a <z_impl_k_mutex_lock+0xc2>
   41436:	f993 300e 	ldrsb.w	r3, [r3, #14]
   4143a:	4299      	cmp	r1, r3
   4143c:	bfa8      	it	ge
   4143e:	4619      	movge	r1, r3
   41440:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   41444:	4299      	cmp	r1, r3
   41446:	bfb8      	it	lt
   41448:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   4144a:	68a0      	ldr	r0, [r4, #8]
   4144c:	f007 f89e 	bl	4858c <adjust_owner_prio.isra.0>
   41450:	b948      	cbnz	r0, 41466 <z_impl_k_mutex_lock+0xde>
   41452:	b945      	cbnz	r5, 41466 <z_impl_k_mutex_lock+0xde>
	__asm__ volatile(
   41454:	f386 8811 	msr	BASEPRI, r6
   41458:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   4145c:	f06f 000a 	mvn.w	r0, #10
   41460:	e7af      	b.n	413c2 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   41462:	2500      	movs	r5, #0
   41464:	e7d1      	b.n	4140a <z_impl_k_mutex_lock+0x82>
		z_reschedule(&lock, key);
   41466:	4803      	ldr	r0, [pc, #12]	; (41474 <z_impl_k_mutex_lock+0xec>)
   41468:	4631      	mov	r1, r6
   4146a:	f000 fc4b 	bl	41d04 <z_reschedule>
   4146e:	e7f5      	b.n	4145c <z_impl_k_mutex_lock+0xd4>
   41470:	20003aac 	.word	0x20003aac
   41474:	20003c29 	.word	0x20003c29

00041478 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   41478:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   4147a:	6883      	ldr	r3, [r0, #8]
{
   4147c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   4147e:	2b00      	cmp	r3, #0
   41480:	d032      	beq.n	414e8 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   41482:	4a1c      	ldr	r2, [pc, #112]	; (414f4 <z_impl_k_mutex_unlock+0x7c>)
   41484:	6892      	ldr	r2, [r2, #8]
   41486:	4293      	cmp	r3, r2
   41488:	d131      	bne.n	414ee <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   4148a:	7bda      	ldrb	r2, [r3, #15]
   4148c:	3a01      	subs	r2, #1
   4148e:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   41490:	68c3      	ldr	r3, [r0, #12]
   41492:	2b01      	cmp	r3, #1
   41494:	d905      	bls.n	414a2 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   41496:	3b01      	subs	r3, #1
   41498:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   4149a:	f000 fca9 	bl	41df0 <k_sched_unlock>

	return 0;
   4149e:	2000      	movs	r0, #0
}
   414a0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   414a2:	f04f 0320 	mov.w	r3, #32
   414a6:	f3ef 8511 	mrs	r5, BASEPRI
   414aa:	f383 8812 	msr	BASEPRI_MAX, r3
   414ae:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   414b2:	6901      	ldr	r1, [r0, #16]
   414b4:	6880      	ldr	r0, [r0, #8]
   414b6:	f007 f869 	bl	4858c <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   414ba:	4620      	mov	r0, r4
   414bc:	f007 fada 	bl	48a74 <z_unpend_first_thread>
	mutex->owner = new_owner;
   414c0:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   414c2:	b158      	cbz	r0, 414dc <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   414c4:	f990 200e 	ldrsb.w	r2, [r0, #14]
   414c8:	6122      	str	r2, [r4, #16]
   414ca:	2200      	movs	r2, #0
   414cc:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   414ce:	f007 fa9a 	bl	48a06 <z_ready_thread>
		z_reschedule(&lock, key);
   414d2:	4809      	ldr	r0, [pc, #36]	; (414f8 <z_impl_k_mutex_unlock+0x80>)
   414d4:	4629      	mov	r1, r5
   414d6:	f000 fc15 	bl	41d04 <z_reschedule>
   414da:	e7de      	b.n	4149a <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   414dc:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   414de:	f385 8811 	msr	BASEPRI, r5
   414e2:	f3bf 8f6f 	isb	sy
   414e6:	e7d8      	b.n	4149a <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   414e8:	f06f 0015 	mvn.w	r0, #21
   414ec:	e7d8      	b.n	414a0 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   414ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   414f2:	e7d5      	b.n	414a0 <z_impl_k_mutex_unlock+0x28>
   414f4:	20003aac 	.word	0x20003aac
   414f8:	20003c29 	.word	0x20003c29

000414fc <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   414fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   414fe:	4611      	mov	r1, r2
	__asm__ volatile(
   41500:	f04f 0220 	mov.w	r2, #32
   41504:	f3ef 8511 	mrs	r5, BASEPRI
   41508:	f382 8812 	msr	BASEPRI_MAX, r2
   4150c:	f3bf 8f6f 	isb	sy
   41510:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   41512:	b19c      	cbz	r4, 4153c <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   41514:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   41516:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   41518:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   4151c:	4294      	cmp	r4, r2
	list->head = node;
   4151e:	6003      	str	r3, [r0, #0]
	list->tail = node;
   41520:	bf08      	it	eq
   41522:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   41524:	2101      	movs	r1, #1
   41526:	4620      	mov	r0, r4
   41528:	f007 f8a5 	bl	48676 <z_queue_node_peek>
   4152c:	4604      	mov	r4, r0
	__asm__ volatile(
   4152e:	f385 8811 	msr	BASEPRI, r5
   41532:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   41536:	4620      	mov	r0, r4
   41538:	b003      	add	sp, #12
   4153a:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   4153c:	ea51 0203 	orrs.w	r2, r1, r3
   41540:	d0f5      	beq.n	4152e <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   41542:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   41546:	e9cd 1300 	strd	r1, r3, [sp]
   4154a:	4610      	mov	r0, r2
   4154c:	4629      	mov	r1, r5
   4154e:	f000 fb7f 	bl	41c50 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   41552:	2800      	cmp	r0, #0
   41554:	d1ef      	bne.n	41536 <z_impl_k_queue_get+0x3a>
   41556:	4b02      	ldr	r3, [pc, #8]	; (41560 <z_impl_k_queue_get+0x64>)
   41558:	689b      	ldr	r3, [r3, #8]
   4155a:	695c      	ldr	r4, [r3, #20]
   4155c:	e7eb      	b.n	41536 <z_impl_k_queue_get+0x3a>
   4155e:	bf00      	nop
   41560:	20003aac 	.word	0x20003aac

00041564 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   41564:	b538      	push	{r3, r4, r5, lr}
   41566:	4604      	mov	r4, r0
	__asm__ volatile(
   41568:	f04f 0320 	mov.w	r3, #32
   4156c:	f3ef 8511 	mrs	r5, BASEPRI
   41570:	f383 8812 	msr	BASEPRI_MAX, r3
   41574:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   41578:	f007 fa7c 	bl	48a74 <z_unpend_first_thread>

	if (thread != NULL) {
   4157c:	b148      	cbz	r0, 41592 <z_impl_k_sem_give+0x2e>
   4157e:	2200      	movs	r2, #0
   41580:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   41582:	f007 fa40 	bl	48a06 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   41586:	4629      	mov	r1, r5
   41588:	4808      	ldr	r0, [pc, #32]	; (415ac <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   4158a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   4158e:	f000 bbb9 	b.w	41d04 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   41592:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   41596:	429a      	cmp	r2, r3
   41598:	bf18      	it	ne
   4159a:	3301      	addne	r3, #1
   4159c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   4159e:	2102      	movs	r1, #2
   415a0:	f104 0010 	add.w	r0, r4, #16
   415a4:	f007 fcaa 	bl	48efc <z_handle_obj_poll_events>
}
   415a8:	e7ed      	b.n	41586 <z_impl_k_sem_give+0x22>
   415aa:	bf00      	nop
   415ac:	20003c29 	.word	0x20003c29

000415b0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   415b0:	b513      	push	{r0, r1, r4, lr}
   415b2:	f04f 0420 	mov.w	r4, #32
   415b6:	f3ef 8111 	mrs	r1, BASEPRI
   415ba:	f384 8812 	msr	BASEPRI_MAX, r4
   415be:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   415c2:	6884      	ldr	r4, [r0, #8]
   415c4:	b144      	cbz	r4, 415d8 <z_impl_k_sem_take+0x28>
		sem->count--;
   415c6:	3c01      	subs	r4, #1
   415c8:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   415ca:	f381 8811 	msr	BASEPRI, r1
   415ce:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   415d2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   415d4:	b002      	add	sp, #8
   415d6:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   415d8:	ea52 0403 	orrs.w	r4, r2, r3
   415dc:	d106      	bne.n	415ec <z_impl_k_sem_take+0x3c>
   415de:	f381 8811 	msr	BASEPRI, r1
   415e2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   415e6:	f06f 000f 	mvn.w	r0, #15
   415ea:	e7f3      	b.n	415d4 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   415ec:	e9cd 2300 	strd	r2, r3, [sp]
   415f0:	4602      	mov	r2, r0
   415f2:	4802      	ldr	r0, [pc, #8]	; (415fc <z_impl_k_sem_take+0x4c>)
   415f4:	f000 fb2c 	bl	41c50 <z_pend_curr>
	return ret;
   415f8:	e7ec      	b.n	415d4 <z_impl_k_sem_take+0x24>
   415fa:	bf00      	nop
   415fc:	20003c29 	.word	0x20003c29

00041600 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   41600:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   41602:	4b09      	ldr	r3, [pc, #36]	; (41628 <k_sys_work_q_init+0x28>)
   41604:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   41606:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   41608:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   4160a:	9300      	str	r3, [sp, #0]
   4160c:	4907      	ldr	r1, [pc, #28]	; (4162c <k_sys_work_q_init+0x2c>)
   4160e:	4808      	ldr	r0, [pc, #32]	; (41630 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   41610:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   41614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   41618:	f44f 6200 	mov.w	r2, #2048	; 0x800
   4161c:	f000 f92c 	bl	41878 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   41620:	4620      	mov	r0, r4
   41622:	b004      	add	sp, #16
   41624:	bd10      	pop	{r4, pc}
   41626:	bf00      	nop
   41628:	0004b190 	.word	0x0004b190
   4162c:	20006298 	.word	0x20006298
   41630:	200018c0 	.word	0x200018c0

00041634 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   41634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   41638:	f8df 913c 	ldr.w	r9, [pc, #316]	; 41778 <work_queue_main+0x144>
   4163c:	b085      	sub	sp, #20
   4163e:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   41640:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   41644:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	__asm__ volatile(
   41648:	f04f 0320 	mov.w	r3, #32
   4164c:	f3ef 8811 	mrs	r8, BASEPRI
   41650:	f383 8812 	msr	BASEPRI_MAX, r3
   41654:	f3bf 8f6f 	isb	sy
   41658:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   4165c:	b98d      	cbnz	r5, 41682 <work_queue_main+0x4e>
		} else if (flag_test_and_clear(&queue->flags,
   4165e:	2102      	movs	r1, #2
   41660:	f104 0098 	add.w	r0, r4, #152	; 0x98
   41664:	f007 f883 	bl	4876e <flag_test_and_clear>
   41668:	2800      	cmp	r0, #0
   4166a:	d143      	bne.n	416f4 <work_queue_main+0xc0>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   4166c:	2300      	movs	r3, #0
   4166e:	e9cd 6700 	strd	r6, r7, [sp]
   41672:	9302      	str	r3, [sp, #8]
   41674:	f104 0288 	add.w	r2, r4, #136	; 0x88
   41678:	4641      	mov	r1, r8
   4167a:	4840      	ldr	r0, [pc, #256]	; (4177c <work_queue_main+0x148>)
   4167c:	f000 fce4 	bl	42048 <z_sched_wait>
			continue;
   41680:	e7e2      	b.n	41648 <work_queue_main+0x14>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   41682:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   41686:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   41688:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4168c:	4295      	cmp	r5, r2
	list->tail = node;
   4168e:	bf08      	it	eq
   41690:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   41694:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   41698:	f043 0302 	orr.w	r3, r3, #2
   4169c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   416a0:	68eb      	ldr	r3, [r5, #12]
   416a2:	f023 0304 	bic.w	r3, r3, #4
   416a6:	f043 0301 	orr.w	r3, r3, #1
   416aa:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   416ac:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   416ae:	f388 8811 	msr	BASEPRI, r8
   416b2:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   416b6:	4628      	mov	r0, r5
   416b8:	4798      	blx	r3
	__asm__ volatile(
   416ba:	f04f 0320 	mov.w	r3, #32
   416be:	f3ef 8b11 	mrs	fp, BASEPRI
   416c2:	f383 8812 	msr	BASEPRI_MAX, r3
   416c6:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   416ca:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   416cc:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   416ce:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   416d2:	d419      	bmi.n	41708 <work_queue_main+0xd4>
	*flagp &= ~BIT(bit);
   416d4:	60ea      	str	r2, [r5, #12]
   416d6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   416da:	f023 0302 	bic.w	r3, r3, #2
   416de:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   416e2:	f38b 8811 	msr	BASEPRI, fp
   416e6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   416ea:	05db      	lsls	r3, r3, #23
   416ec:	d4ac      	bmi.n	41648 <work_queue_main+0x14>
	z_impl_k_yield();
   416ee:	f000 fba7 	bl	41e40 <z_impl_k_yield>
}
   416f2:	e7a9      	b.n	41648 <work_queue_main+0x14>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   416f4:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   416f8:	2200      	movs	r2, #0
   416fa:	2101      	movs	r1, #1
   416fc:	4628      	mov	r0, r5
   416fe:	f007 fa0f 	bl	48b20 <z_sched_wake>
   41702:	2800      	cmp	r0, #0
   41704:	d1f8      	bne.n	416f8 <work_queue_main+0xc4>
   41706:	e7b1      	b.n	4166c <work_queue_main+0x38>
	*flagp &= ~BIT(bit);
   41708:	f023 0303 	bic.w	r3, r3, #3
   4170c:	60eb      	str	r3, [r5, #12]
	return list->head;
   4170e:	f8d9 3000 	ldr.w	r3, [r9]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   41712:	2b00      	cmp	r3, #0
   41714:	d0df      	beq.n	416d6 <work_queue_main+0xa2>
	return node->next;
   41716:	f04f 0800 	mov.w	r8, #0
   4171a:	f8d3 a000 	ldr.w	sl, [r3]
	parent->next = child;
   4171e:	4641      	mov	r1, r8
   41720:	2b00      	cmp	r3, #0
   41722:	d0d8      	beq.n	416d6 <work_queue_main+0xa2>
		if (wc->work == work) {
   41724:	685a      	ldr	r2, [r3, #4]
   41726:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   41728:	4618      	mov	r0, r3
		if (wc->work == work) {
   4172a:	d112      	bne.n	41752 <work_queue_main+0x11e>
	return node->next;
   4172c:	681a      	ldr	r2, [r3, #0]
	return list->tail;
   4172e:	f8d9 0004 	ldr.w	r0, [r9, #4]
Z_GENLIST_REMOVE(slist, snode)
   41732:	f1b8 0f00 	cmp.w	r8, #0
   41736:	d115      	bne.n	41764 <work_queue_main+0x130>
   41738:	4283      	cmp	r3, r0
	list->head = node;
   4173a:	f8c9 2000 	str.w	r2, [r9]
Z_GENLIST_REMOVE(slist, snode)
   4173e:	d101      	bne.n	41744 <work_queue_main+0x110>
	list->tail = node;
   41740:	f8c9 2004 	str.w	r2, [r9, #4]
	parent->next = child;
   41744:	4618      	mov	r0, r3
   41746:	f840 1b08 	str.w	r1, [r0], #8
	z_impl_k_sem_give(sem);
   4174a:	f7ff ff0b 	bl	41564 <z_impl_k_sem_give>
}
   4174e:	4640      	mov	r0, r8
   41750:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   41752:	f1ba 0f00 	cmp.w	sl, #0
   41756:	d00c      	beq.n	41772 <work_queue_main+0x13e>
	return node->next;
   41758:	f8da 2000 	ldr.w	r2, [sl]
   4175c:	4653      	mov	r3, sl
   4175e:	4680      	mov	r8, r0
   41760:	4692      	mov	sl, r2
   41762:	e7dd      	b.n	41720 <work_queue_main+0xec>
Z_GENLIST_REMOVE(slist, snode)
   41764:	4283      	cmp	r3, r0
	parent->next = child;
   41766:	f8c8 2000 	str.w	r2, [r8]
	list->tail = node;
   4176a:	bf08      	it	eq
   4176c:	f8c9 8004 	streq.w	r8, [r9, #4]
}
   41770:	e7e8      	b.n	41744 <work_queue_main+0x110>
   41772:	4652      	mov	r2, sl
   41774:	e7f2      	b.n	4175c <work_queue_main+0x128>
   41776:	bf00      	nop
   41778:	20003ad4 	.word	0x20003ad4
   4177c:	20003c29 	.word	0x20003c29

00041780 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   41780:	68c3      	ldr	r3, [r0, #12]
{
   41782:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   41784:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   41788:	079b      	lsls	r3, r3, #30
{
   4178a:	4605      	mov	r5, r0
   4178c:	460c      	mov	r4, r1
	if (ret) {
   4178e:	d50d      	bpl.n	417ac <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   41790:	2201      	movs	r2, #1
   41792:	2100      	movs	r1, #0
   41794:	f104 0008 	add.w	r0, r4, #8
   41798:	f006 ffd9 	bl	4874e <z_impl_k_sem_init>
	parent->next = child;
   4179c:	2300      	movs	r3, #0
   4179e:	6023      	str	r3, [r4, #0]
	return list->tail;
   417a0:	4b05      	ldr	r3, [pc, #20]	; (417b8 <cancel_sync_locked+0x38>)
	canceler->work = work;
   417a2:	6065      	str	r5, [r4, #4]
   417a4:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   417a6:	b91a      	cbnz	r2, 417b0 <cancel_sync_locked+0x30>
	list->head = node;
   417a8:	e9c3 4400 	strd	r4, r4, [r3]
}
   417ac:	4630      	mov	r0, r6
   417ae:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   417b0:	6014      	str	r4, [r2, #0]
	list->tail = node;
   417b2:	605c      	str	r4, [r3, #4]
}
   417b4:	e7fa      	b.n	417ac <cancel_sync_locked+0x2c>
   417b6:	bf00      	nop
   417b8:	20003ad4 	.word	0x20003ad4

000417bc <submit_to_queue_locked>:
{
   417bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   417be:	68c3      	ldr	r3, [r0, #12]
{
   417c0:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   417c2:	0799      	lsls	r1, r3, #30
{
   417c4:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   417c6:	f3c3 0640 	ubfx	r6, r3, #1, #1
   417ca:	d42b      	bmi.n	41824 <submit_to_queue_locked+0x68>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   417cc:	075a      	lsls	r2, r3, #29
   417ce:	d419      	bmi.n	41804 <submit_to_queue_locked+0x48>
		if (*queuep == NULL) {
   417d0:	683a      	ldr	r2, [r7, #0]
   417d2:	b90a      	cbnz	r2, 417d8 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   417d4:	6882      	ldr	r2, [r0, #8]
   417d6:	603a      	str	r2, [r7, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   417d8:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   417da:	bf44      	itt	mi
   417dc:	68a3      	ldrmi	r3, [r4, #8]
   417de:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   417e0:	683d      	ldr	r5, [r7, #0]
			ret = 2;
   417e2:	bf4c      	ite	mi
   417e4:	2602      	movmi	r6, #2
		ret = 1;
   417e6:	2601      	movpl	r6, #1
	if (queue == NULL) {
   417e8:	2d00      	cmp	r5, #0
   417ea:	d03a      	beq.n	41862 <submit_to_queue_locked+0xa6>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   417ec:	4b1e      	ldr	r3, [pc, #120]	; (41868 <submit_to_queue_locked+0xac>)
   417ee:	689b      	ldr	r3, [r3, #8]
   417f0:	42ab      	cmp	r3, r5
   417f2:	d00a      	beq.n	4180a <submit_to_queue_locked+0x4e>
	return (*flagp & BIT(bit)) != 0U;
   417f4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   417f8:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   417fa:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   417fe:	d414      	bmi.n	4182a <submit_to_queue_locked+0x6e>
		ret = -EBUSY;
   41800:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   41804:	2300      	movs	r3, #0
   41806:	603b      	str	r3, [r7, #0]
	return ret;
   41808:	e025      	b.n	41856 <submit_to_queue_locked+0x9a>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   4180a:	f006 fead 	bl	48568 <k_is_in_isr>
   4180e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   41812:	2800      	cmp	r0, #0
   41814:	d1f0      	bne.n	417f8 <submit_to_queue_locked+0x3c>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   41816:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   41818:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   4181c:	d5f0      	bpl.n	41800 <submit_to_queue_locked+0x44>
	} else if (plugged && !draining) {
   4181e:	b152      	cbz	r2, 41836 <submit_to_queue_locked+0x7a>
   41820:	075b      	lsls	r3, r3, #29
   41822:	d408      	bmi.n	41836 <submit_to_queue_locked+0x7a>
		ret = -EBUSY;
   41824:	f06f 060f 	mvn.w	r6, #15
   41828:	e7ec      	b.n	41804 <submit_to_queue_locked+0x48>
	} else if (draining && !chained) {
   4182a:	2a00      	cmp	r2, #0
   4182c:	d1fa      	bne.n	41824 <submit_to_queue_locked+0x68>
	return (*flagp & BIT(bit)) != 0U;
   4182e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   41832:	2b00      	cmp	r3, #0
   41834:	d1f6      	bne.n	41824 <submit_to_queue_locked+0x68>
	parent->next = child;
   41836:	2300      	movs	r3, #0
   41838:	6023      	str	r3, [r4, #0]
	return list->tail;
   4183a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   4183e:	b963      	cbnz	r3, 4185a <submit_to_queue_locked+0x9e>
	list->head = node;
   41840:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
   41844:	4628      	mov	r0, r5
   41846:	f006 ffab 	bl	487a0 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   4184a:	68e3      	ldr	r3, [r4, #12]
   4184c:	f043 0304 	orr.w	r3, r3, #4
   41850:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   41852:	683b      	ldr	r3, [r7, #0]
   41854:	60a3      	str	r3, [r4, #8]
}
   41856:	4630      	mov	r0, r6
   41858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   4185a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   4185c:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
   41860:	e7f0      	b.n	41844 <submit_to_queue_locked+0x88>
		return -EINVAL;
   41862:	f06f 0615 	mvn.w	r6, #21
   41866:	e7cd      	b.n	41804 <submit_to_queue_locked+0x48>
   41868:	20003aac 	.word	0x20003aac

0004186c <k_work_submit>:
{
   4186c:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   4186e:	4801      	ldr	r0, [pc, #4]	; (41874 <k_work_submit+0x8>)
   41870:	f006 bff6 	b.w	48860 <k_work_submit_to_queue>
   41874:	200018c0 	.word	0x200018c0

00041878 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   41878:	b5f0      	push	{r4, r5, r6, r7, lr}
   4187a:	b089      	sub	sp, #36	; 0x24
   4187c:	4604      	mov	r4, r0
	list->head = NULL;
   4187e:	2000      	movs	r0, #0
	list->tail = NULL;
   41880:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   41884:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   41886:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   4188a:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   4188e:	f104 0090 	add.w	r0, r4, #144	; 0x90
   41892:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   41896:	b31d      	cbz	r5, 418e0 <k_work_queue_start+0x68>
   41898:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   4189a:	2800      	cmp	r0, #0
   4189c:	f240 1001 	movw	r0, #257	; 0x101
   418a0:	bf08      	it	eq
   418a2:	2001      	moveq	r0, #1
	*flagp = flags;
   418a4:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   418a8:	2000      	movs	r0, #0
   418aa:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   418ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   418b2:	e9cd 3003 	strd	r3, r0, [sp, #12]
   418b6:	e9cd 0001 	strd	r0, r0, [sp, #4]
   418ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
   418be:	4b09      	ldr	r3, [pc, #36]	; (418e4 <k_work_queue_start+0x6c>)
   418c0:	9400      	str	r4, [sp, #0]
   418c2:	4620      	mov	r0, r4
   418c4:	f7ff fc0c 	bl	410e0 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   418c8:	b125      	cbz	r5, 418d4 <k_work_queue_start+0x5c>
   418ca:	6829      	ldr	r1, [r5, #0]
   418cc:	b111      	cbz	r1, 418d4 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   418ce:	4620      	mov	r0, r4
   418d0:	f006 fe50 	bl	48574 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   418d4:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   418d6:	b009      	add	sp, #36	; 0x24
   418d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   418dc:	f006 be4d 	b.w	4857a <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   418e0:	2001      	movs	r0, #1
   418e2:	e7df      	b.n	418a4 <k_work_queue_start+0x2c>
   418e4:	00041635 	.word	0x00041635

000418e8 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   418e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   418ea:	9001      	str	r0, [sp, #4]
   418ec:	4608      	mov	r0, r1
	__asm__ volatile(
   418ee:	f04f 0120 	mov.w	r1, #32
   418f2:	f3ef 8411 	mrs	r4, BASEPRI
   418f6:	f381 8812 	msr	BASEPRI_MAX, r1
   418fa:	f3bf 8f6f 	isb	sy
	return *flagp;
   418fe:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   41900:	f011 0f0e 	tst.w	r1, #14
   41904:	d116      	bne.n	41934 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   41906:	ea53 0502 	orrs.w	r5, r3, r2
   4190a:	d108      	bne.n	4191e <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   4190c:	a901      	add	r1, sp, #4
   4190e:	f7ff ff55 	bl	417bc <submit_to_queue_locked>
	__asm__ volatile(
   41912:	f384 8811 	msr	BASEPRI, r4
   41916:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   4191a:	b003      	add	sp, #12
   4191c:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   4191e:	f041 0108 	orr.w	r1, r1, #8
   41922:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   41924:	9901      	ldr	r1, [sp, #4]
   41926:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   41928:	3010      	adds	r0, #16
   4192a:	4903      	ldr	r1, [pc, #12]	; (41938 <k_work_schedule_for_queue+0x50>)
   4192c:	f000 fc04 	bl	42138 <z_add_timeout>
	return ret;
   41930:	2001      	movs	r0, #1
   41932:	e7ee      	b.n	41912 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   41934:	2000      	movs	r0, #0
   41936:	e7ec      	b.n	41912 <k_work_schedule_for_queue+0x2a>
   41938:	00048811 	.word	0x00048811

0004193c <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   4193c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   4193e:	4801      	ldr	r0, [pc, #4]	; (41944 <k_work_schedule+0x8>)
   41940:	f7ff bfd2 	b.w	418e8 <k_work_schedule_for_queue>
   41944:	200018c0 	.word	0x200018c0

00041948 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   41948:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4194a:	460c      	mov	r4, r1
   4194c:	9001      	str	r0, [sp, #4]
   4194e:	4616      	mov	r6, r2
   41950:	461d      	mov	r5, r3
	__asm__ volatile(
   41952:	f04f 0320 	mov.w	r3, #32
   41956:	f3ef 8711 	mrs	r7, BASEPRI
   4195a:	f383 8812 	msr	BASEPRI_MAX, r3
   4195e:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   41962:	4608      	mov	r0, r1
   41964:	f006 ff0e 	bl	48784 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   41968:	ea55 0306 	orrs.w	r3, r5, r6
   4196c:	d109      	bne.n	41982 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   4196e:	a901      	add	r1, sp, #4
   41970:	4620      	mov	r0, r4
   41972:	f7ff ff23 	bl	417bc <submit_to_queue_locked>
	__asm__ volatile(
   41976:	f387 8811 	msr	BASEPRI, r7
   4197a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   4197e:	b003      	add	sp, #12
   41980:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   41982:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   41984:	4906      	ldr	r1, [pc, #24]	; (419a0 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   41986:	f043 0308 	orr.w	r3, r3, #8
   4198a:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   4198c:	9b01      	ldr	r3, [sp, #4]
   4198e:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   41990:	f104 0010 	add.w	r0, r4, #16
   41994:	4632      	mov	r2, r6
   41996:	462b      	mov	r3, r5
   41998:	f000 fbce 	bl	42138 <z_add_timeout>
	return ret;
   4199c:	2001      	movs	r0, #1
   4199e:	e7ea      	b.n	41976 <k_work_reschedule_for_queue+0x2e>
   419a0:	00048811 	.word	0x00048811

000419a4 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   419a4:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   419a6:	4801      	ldr	r0, [pc, #4]	; (419ac <k_work_reschedule+0x8>)
   419a8:	f7ff bfce 	b.w	41948 <k_work_reschedule_for_queue>
   419ac:	200018c0 	.word	0x200018c0

000419b0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   419b0:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   419b2:	4c08      	ldr	r4, [pc, #32]	; (419d4 <z_reset_time_slice+0x24>)
   419b4:	6823      	ldr	r3, [r4, #0]
   419b6:	b15b      	cbz	r3, 419d0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   419b8:	f7fd fbb0 	bl	3f11c <sys_clock_elapsed>
   419bc:	4603      	mov	r3, r0
   419be:	6820      	ldr	r0, [r4, #0]
   419c0:	4a05      	ldr	r2, [pc, #20]	; (419d8 <z_reset_time_slice+0x28>)
   419c2:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   419c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   419c8:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   419ca:	2100      	movs	r1, #0
   419cc:	f007 b8f1 	b.w	48bb2 <z_set_timeout_expiry>
}
   419d0:	bd10      	pop	{r4, pc}
   419d2:	bf00      	nop
   419d4:	20003ae4 	.word	0x20003ae4
   419d8:	20003aac 	.word	0x20003aac

000419dc <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   419dc:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   419de:	4d0c      	ldr	r5, [pc, #48]	; (41a10 <update_cache+0x34>)
   419e0:	462b      	mov	r3, r5
   419e2:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   419e6:	429c      	cmp	r4, r3
   419e8:	d000      	beq.n	419ec <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   419ea:	b904      	cbnz	r4, 419ee <update_cache+0x12>
   419ec:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   419ee:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   419f0:	b938      	cbnz	r0, 41a02 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   419f2:	7b5a      	ldrb	r2, [r3, #13]
   419f4:	06d2      	lsls	r2, r2, #27
   419f6:	d104      	bne.n	41a02 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   419f8:	69a2      	ldr	r2, [r4, #24]
   419fa:	b912      	cbnz	r2, 41a02 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   419fc:	89da      	ldrh	r2, [r3, #14]
   419fe:	2a7f      	cmp	r2, #127	; 0x7f
   41a00:	d804      	bhi.n	41a0c <update_cache+0x30>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   41a02:	429c      	cmp	r4, r3
   41a04:	d001      	beq.n	41a0a <update_cache+0x2e>
			z_reset_time_slice();
   41a06:	f7ff ffd3 	bl	419b0 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   41a0a:	4623      	mov	r3, r4
   41a0c:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   41a0e:	bd38      	pop	{r3, r4, r5, pc}
   41a10:	20003aac 	.word	0x20003aac

00041a14 <move_thread_to_end_of_prio_q>:
{
   41a14:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   41a16:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   41a1a:	7b43      	ldrb	r3, [r0, #13]
   41a1c:	2a00      	cmp	r2, #0
{
   41a1e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   41a20:	da04      	bge.n	41a2c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   41a22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   41a26:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   41a28:	f006 ff88 	bl	4893c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   41a2c:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   41a2e:	4a15      	ldr	r2, [pc, #84]	; (41a84 <move_thread_to_end_of_prio_q+0x70>)
   41a30:	f063 037f 	orn	r3, r3, #127	; 0x7f
   41a34:	4610      	mov	r0, r2
   41a36:	734b      	strb	r3, [r1, #13]
   41a38:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   41a3c:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   41a3e:	4283      	cmp	r3, r0
   41a40:	bf08      	it	eq
   41a42:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   41a44:	b923      	cbnz	r3, 41a50 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   41a46:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   41a4a:	6021      	str	r1, [r4, #0]
	list->tail = node;
   41a4c:	6251      	str	r1, [r2, #36]	; 0x24
}
   41a4e:	e00c      	b.n	41a6a <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   41a50:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   41a54:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   41a58:	42b5      	cmp	r5, r6
   41a5a:	d00e      	beq.n	41a7a <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   41a5c:	42ae      	cmp	r6, r5
   41a5e:	dd0c      	ble.n	41a7a <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   41a60:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   41a62:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   41a66:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   41a68:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   41a6a:	6890      	ldr	r0, [r2, #8]
   41a6c:	1a43      	subs	r3, r0, r1
   41a6e:	4258      	negs	r0, r3
}
   41a70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   41a74:	4158      	adcs	r0, r3
   41a76:	f7ff bfb1 	b.w	419dc <update_cache>
	return (node == list->tail) ? NULL : node->next;
   41a7a:	429c      	cmp	r4, r3
   41a7c:	d0e3      	beq.n	41a46 <move_thread_to_end_of_prio_q+0x32>
   41a7e:	681b      	ldr	r3, [r3, #0]
   41a80:	e7e0      	b.n	41a44 <move_thread_to_end_of_prio_q+0x30>
   41a82:	bf00      	nop
   41a84:	20003aac 	.word	0x20003aac

00041a88 <ready_thread>:
{
   41a88:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   41a8a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   41a8e:	7b42      	ldrb	r2, [r0, #13]
   41a90:	2b00      	cmp	r3, #0
   41a92:	db29      	blt.n	41ae8 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   41a94:	06d3      	lsls	r3, r2, #27
   41a96:	d127      	bne.n	41ae8 <ready_thread+0x60>
	return node->next != NULL;
   41a98:	6983      	ldr	r3, [r0, #24]
   41a9a:	bb2b      	cbnz	r3, 41ae8 <ready_thread+0x60>
	return list->head == list;
   41a9c:	4913      	ldr	r1, [pc, #76]	; (41aec <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   41a9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   41aa2:	7342      	strb	r2, [r0, #13]
   41aa4:	460a      	mov	r2, r1
   41aa6:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   41aaa:	4294      	cmp	r4, r2
   41aac:	bf18      	it	ne
   41aae:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   41ab0:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   41ab2:	b923      	cbnz	r3, 41abe <ready_thread+0x36>
	node->prev = tail;
   41ab4:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   41ab8:	6020      	str	r0, [r4, #0]
	list->tail = node;
   41aba:	6248      	str	r0, [r1, #36]	; 0x24
}
   41abc:	e00c      	b.n	41ad8 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   41abe:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   41ac2:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   41ac6:	42b5      	cmp	r5, r6
   41ac8:	d00a      	beq.n	41ae0 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   41aca:	42ae      	cmp	r6, r5
   41acc:	dd08      	ble.n	41ae0 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   41ace:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   41ad0:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   41ad4:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   41ad6:	6058      	str	r0, [r3, #4]
}
   41ad8:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   41ada:	2000      	movs	r0, #0
   41adc:	f7ff bf7e 	b.w	419dc <update_cache>
	return (node == list->tail) ? NULL : node->next;
   41ae0:	42a3      	cmp	r3, r4
   41ae2:	d0e7      	beq.n	41ab4 <ready_thread+0x2c>
   41ae4:	681b      	ldr	r3, [r3, #0]
   41ae6:	e7e4      	b.n	41ab2 <ready_thread+0x2a>
}
   41ae8:	bc70      	pop	{r4, r5, r6}
   41aea:	4770      	bx	lr
   41aec:	20003aac 	.word	0x20003aac

00041af0 <unready_thread>:
{
   41af0:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   41af2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   41af6:	7b43      	ldrb	r3, [r0, #13]
   41af8:	2a00      	cmp	r2, #0
{
   41afa:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   41afc:	da04      	bge.n	41b08 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   41afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   41b02:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   41b04:	f006 ff1a 	bl	4893c <sys_dlist_remove>
	update_cache(thread == _current);
   41b08:	4b04      	ldr	r3, [pc, #16]	; (41b1c <unready_thread+0x2c>)
   41b0a:	6898      	ldr	r0, [r3, #8]
   41b0c:	1a43      	subs	r3, r0, r1
   41b0e:	4258      	negs	r0, r3
   41b10:	4158      	adcs	r0, r3
}
   41b12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   41b16:	f7ff bf61 	b.w	419dc <update_cache>
   41b1a:	bf00      	nop
   41b1c:	20003aac 	.word	0x20003aac

00041b20 <pend>:
{
   41b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41b24:	4606      	mov	r6, r0
   41b26:	4615      	mov	r5, r2
   41b28:	461c      	mov	r4, r3
	__asm__ volatile(
   41b2a:	f04f 0320 	mov.w	r3, #32
   41b2e:	f3ef 8711 	mrs	r7, BASEPRI
   41b32:	f383 8812 	msr	BASEPRI_MAX, r3
   41b36:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   41b3a:	f006 ff3c 	bl	489b6 <add_to_waitq_locked>
	__asm__ volatile(
   41b3e:	f387 8811 	msr	BASEPRI, r7
   41b42:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   41b46:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   41b4a:	bf08      	it	eq
   41b4c:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   41b50:	d008      	beq.n	41b64 <pend+0x44>
   41b52:	462a      	mov	r2, r5
   41b54:	4623      	mov	r3, r4
   41b56:	f106 0018 	add.w	r0, r6, #24
   41b5a:	4903      	ldr	r1, [pc, #12]	; (41b68 <pend+0x48>)
}
   41b5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   41b60:	f000 baea 	b.w	42138 <z_add_timeout>
   41b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   41b68:	00048973 	.word	0x00048973

00041b6c <k_sched_time_slice_set>:
{
   41b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41b70:	4604      	mov	r4, r0
   41b72:	460d      	mov	r5, r1
	__asm__ volatile(
   41b74:	f04f 0320 	mov.w	r3, #32
   41b78:	f3ef 8811 	mrs	r8, BASEPRI
   41b7c:	f383 8812 	msr	BASEPRI_MAX, r3
   41b80:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   41b84:	2600      	movs	r6, #0
   41b86:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   41b8a:	f240 30e7 	movw	r0, #999	; 0x3e7
   41b8e:	4631      	mov	r1, r6
   41b90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   41b94:	2300      	movs	r3, #0
   41b96:	fbe4 0107 	umlal	r0, r1, r4, r7
   41b9a:	f7e4 fab1 	bl	26100 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   41b9e:	42b4      	cmp	r4, r6
   41ba0:	dd02      	ble.n	41ba8 <k_sched_time_slice_set+0x3c>
			slice_time = MAX(2, slice_time);
   41ba2:	2802      	cmp	r0, #2
   41ba4:	bfb8      	it	lt
   41ba6:	2002      	movlt	r0, #2
		_current_cpu->slice_ticks = 0;
   41ba8:	4b06      	ldr	r3, [pc, #24]	; (41bc4 <k_sched_time_slice_set+0x58>)
   41baa:	611e      	str	r6, [r3, #16]
		slice_time = k_ms_to_ticks_ceil32(slice);
   41bac:	4b06      	ldr	r3, [pc, #24]	; (41bc8 <k_sched_time_slice_set+0x5c>)
   41bae:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   41bb0:	4b06      	ldr	r3, [pc, #24]	; (41bcc <k_sched_time_slice_set+0x60>)
   41bb2:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   41bb4:	f7ff fefc 	bl	419b0 <z_reset_time_slice>
	__asm__ volatile(
   41bb8:	f388 8811 	msr	BASEPRI, r8
   41bbc:	f3bf 8f6f 	isb	sy
}
   41bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   41bc4:	20003aac 	.word	0x20003aac
   41bc8:	20003ae4 	.word	0x20003ae4
   41bcc:	20003ae0 	.word	0x20003ae0

00041bd0 <z_time_slice>:
{
   41bd0:	b538      	push	{r3, r4, r5, lr}
   41bd2:	4601      	mov	r1, r0
	__asm__ volatile(
   41bd4:	f04f 0320 	mov.w	r3, #32
   41bd8:	f3ef 8411 	mrs	r4, BASEPRI
   41bdc:	f383 8812 	msr	BASEPRI_MAX, r3
   41be0:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   41be4:	4b15      	ldr	r3, [pc, #84]	; (41c3c <z_time_slice+0x6c>)
   41be6:	4a16      	ldr	r2, [pc, #88]	; (41c40 <z_time_slice+0x70>)
   41be8:	6898      	ldr	r0, [r3, #8]
   41bea:	6815      	ldr	r5, [r2, #0]
   41bec:	42a8      	cmp	r0, r5
   41bee:	d106      	bne.n	41bfe <z_time_slice+0x2e>
			z_reset_time_slice();
   41bf0:	f7ff fede 	bl	419b0 <z_reset_time_slice>
	__asm__ volatile(
   41bf4:	f384 8811 	msr	BASEPRI, r4
   41bf8:	f3bf 8f6f 	isb	sy
}
   41bfc:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   41bfe:	2500      	movs	r5, #0
   41c00:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   41c02:	4a10      	ldr	r2, [pc, #64]	; (41c44 <z_time_slice+0x74>)
   41c04:	6812      	ldr	r2, [r2, #0]
   41c06:	b1ba      	cbz	r2, 41c38 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   41c08:	89c2      	ldrh	r2, [r0, #14]
   41c0a:	2a7f      	cmp	r2, #127	; 0x7f
   41c0c:	d814      	bhi.n	41c38 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
   41c0e:	7b42      	ldrb	r2, [r0, #13]
   41c10:	06d2      	lsls	r2, r2, #27
   41c12:	d111      	bne.n	41c38 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   41c14:	4a0c      	ldr	r2, [pc, #48]	; (41c48 <z_time_slice+0x78>)
   41c16:	f990 500e 	ldrsb.w	r5, [r0, #14]
   41c1a:	6812      	ldr	r2, [r2, #0]
   41c1c:	4295      	cmp	r5, r2
   41c1e:	db0b      	blt.n	41c38 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   41c20:	4a0a      	ldr	r2, [pc, #40]	; (41c4c <z_time_slice+0x7c>)
   41c22:	4290      	cmp	r0, r2
   41c24:	d008      	beq.n	41c38 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
   41c26:	691a      	ldr	r2, [r3, #16]
   41c28:	428a      	cmp	r2, r1
   41c2a:	dc02      	bgt.n	41c32 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
   41c2c:	f7ff fef2 	bl	41a14 <move_thread_to_end_of_prio_q>
   41c30:	e7de      	b.n	41bf0 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   41c32:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
   41c34:	611a      	str	r2, [r3, #16]
   41c36:	e7dd      	b.n	41bf4 <z_time_slice+0x24>
   41c38:	2200      	movs	r2, #0
   41c3a:	e7fb      	b.n	41c34 <z_time_slice+0x64>
   41c3c:	20003aac 	.word	0x20003aac
   41c40:	20003adc 	.word	0x20003adc
   41c44:	20003ae4 	.word	0x20003ae4
   41c48:	20003ae0 	.word	0x20003ae0
   41c4c:	200017c0 	.word	0x200017c0

00041c50 <z_pend_curr>:
{
   41c50:	b510      	push	{r4, lr}
	pending_current = _current;
   41c52:	4b07      	ldr	r3, [pc, #28]	; (41c70 <z_pend_curr+0x20>)
   41c54:	6898      	ldr	r0, [r3, #8]
   41c56:	4b07      	ldr	r3, [pc, #28]	; (41c74 <z_pend_curr+0x24>)
{
   41c58:	460c      	mov	r4, r1
	pending_current = _current;
   41c5a:	6018      	str	r0, [r3, #0]
{
   41c5c:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   41c5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   41c62:	f7ff ff5d 	bl	41b20 <pend>
	ret = arch_swap(key);
   41c66:	4620      	mov	r0, r4
}
   41c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   41c6c:	f7e8 bacc 	b.w	2a208 <arch_swap>
   41c70:	20003aac 	.word	0x20003aac
   41c74:	20003adc 	.word	0x20003adc

00041c78 <z_set_prio>:
{
   41c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   41c7a:	4604      	mov	r4, r0
	__asm__ volatile(
   41c7c:	f04f 0320 	mov.w	r3, #32
   41c80:	f3ef 8611 	mrs	r6, BASEPRI
   41c84:	f383 8812 	msr	BASEPRI_MAX, r3
   41c88:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   41c8c:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   41c8e:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   41c90:	b249      	sxtb	r1, r1
   41c92:	d119      	bne.n	41cc8 <z_set_prio+0x50>
	return node->next != NULL;
   41c94:	6985      	ldr	r5, [r0, #24]
   41c96:	b9bd      	cbnz	r5, 41cc8 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   41c98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   41c9c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   41c9e:	f006 fe4d 	bl	4893c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   41ca2:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   41ca4:	4a16      	ldr	r2, [pc, #88]	; (41d00 <z_set_prio+0x88>)
				thread->base.prio = prio;
   41ca6:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   41ca8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   41cac:	7343      	strb	r3, [r0, #13]
   41cae:	4613      	mov	r3, r2
   41cb0:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   41cb4:	4298      	cmp	r0, r3
   41cb6:	bf18      	it	ne
   41cb8:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   41cba:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   41cbc:	b95d      	cbnz	r5, 41cd6 <z_set_prio+0x5e>
	node->prev = tail;
   41cbe:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   41cc2:	6004      	str	r4, [r0, #0]
	list->tail = node;
   41cc4:	6254      	str	r4, [r2, #36]	; 0x24
}
   41cc6:	e011      	b.n	41cec <z_set_prio+0x74>
			thread->base.prio = prio;
   41cc8:	73a1      	strb	r1, [r4, #14]
   41cca:	2000      	movs	r0, #0
	__asm__ volatile(
   41ccc:	f386 8811 	msr	BASEPRI, r6
   41cd0:	f3bf 8f6f 	isb	sy
}
   41cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   41cd6:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   41cda:	42b9      	cmp	r1, r7
   41cdc:	d00b      	beq.n	41cf6 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   41cde:	428f      	cmp	r7, r1
   41ce0:	dd09      	ble.n	41cf6 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   41ce2:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   41ce4:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   41ce8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   41cea:	606c      	str	r4, [r5, #4]
			update_cache(1);
   41cec:	2001      	movs	r0, #1
   41cee:	f7ff fe75 	bl	419dc <update_cache>
   41cf2:	2001      	movs	r0, #1
   41cf4:	e7ea      	b.n	41ccc <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   41cf6:	42a8      	cmp	r0, r5
   41cf8:	d0e1      	beq.n	41cbe <z_set_prio+0x46>
   41cfa:	682d      	ldr	r5, [r5, #0]
   41cfc:	e7de      	b.n	41cbc <z_set_prio+0x44>
   41cfe:	bf00      	nop
   41d00:	20003aac 	.word	0x20003aac

00041d04 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   41d04:	b949      	cbnz	r1, 41d1a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   41d06:	f3ef 8005 	mrs	r0, IPSR
   41d0a:	b930      	cbnz	r0, 41d1a <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   41d0c:	4b05      	ldr	r3, [pc, #20]	; (41d24 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   41d0e:	69da      	ldr	r2, [r3, #28]
   41d10:	689b      	ldr	r3, [r3, #8]
   41d12:	429a      	cmp	r2, r3
   41d14:	d001      	beq.n	41d1a <z_reschedule+0x16>
   41d16:	f7e8 ba77 	b.w	2a208 <arch_swap>
   41d1a:	f381 8811 	msr	BASEPRI, r1
   41d1e:	f3bf 8f6f 	isb	sy
}
   41d22:	4770      	bx	lr
   41d24:	20003aac 	.word	0x20003aac

00041d28 <z_sched_start>:
{
   41d28:	b510      	push	{r4, lr}
	__asm__ volatile(
   41d2a:	f04f 0220 	mov.w	r2, #32
   41d2e:	f3ef 8411 	mrs	r4, BASEPRI
   41d32:	f382 8812 	msr	BASEPRI_MAX, r2
   41d36:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   41d3a:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   41d3c:	0751      	lsls	r1, r2, #29
   41d3e:	d404      	bmi.n	41d4a <z_sched_start+0x22>
	__asm__ volatile(
   41d40:	f384 8811 	msr	BASEPRI, r4
   41d44:	f3bf 8f6f 	isb	sy
}
   41d48:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   41d4a:	f022 0204 	bic.w	r2, r2, #4
   41d4e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   41d50:	f7ff fe9a 	bl	41a88 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   41d54:	4621      	mov	r1, r4
   41d56:	4802      	ldr	r0, [pc, #8]	; (41d60 <z_sched_start+0x38>)
}
   41d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   41d5c:	f7ff bfd2 	b.w	41d04 <z_reschedule>
   41d60:	20003c29 	.word	0x20003c29

00041d64 <z_impl_k_thread_suspend>:
{
   41d64:	b570      	push	{r4, r5, r6, lr}
   41d66:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   41d68:	3018      	adds	r0, #24
   41d6a:	f006 fefc 	bl	48b66 <z_abort_timeout>
	__asm__ volatile(
   41d6e:	f04f 0320 	mov.w	r3, #32
   41d72:	f3ef 8611 	mrs	r6, BASEPRI
   41d76:	f383 8812 	msr	BASEPRI_MAX, r3
   41d7a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   41d7e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   41d82:	7b63      	ldrb	r3, [r4, #13]
   41d84:	2a00      	cmp	r2, #0
   41d86:	da05      	bge.n	41d94 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   41d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   41d8c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   41d8e:	4620      	mov	r0, r4
   41d90:	f006 fdd4 	bl	4893c <sys_dlist_remove>
		update_cache(thread == _current);
   41d94:	4d0b      	ldr	r5, [pc, #44]	; (41dc4 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   41d96:	7b63      	ldrb	r3, [r4, #13]
   41d98:	68a8      	ldr	r0, [r5, #8]
   41d9a:	f043 0310 	orr.w	r3, r3, #16
   41d9e:	7363      	strb	r3, [r4, #13]
   41da0:	1b03      	subs	r3, r0, r4
   41da2:	4258      	negs	r0, r3
   41da4:	4158      	adcs	r0, r3
   41da6:	f7ff fe19 	bl	419dc <update_cache>
	__asm__ volatile(
   41daa:	f386 8811 	msr	BASEPRI, r6
   41dae:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   41db2:	68ab      	ldr	r3, [r5, #8]
   41db4:	42a3      	cmp	r3, r4
   41db6:	d103      	bne.n	41dc0 <z_impl_k_thread_suspend+0x5c>
}
   41db8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   41dbc:	f006 be96 	b.w	48aec <z_reschedule_unlocked>
}
   41dc0:	bd70      	pop	{r4, r5, r6, pc}
   41dc2:	bf00      	nop
   41dc4:	20003aac 	.word	0x20003aac

00041dc8 <k_sched_lock>:
	__asm__ volatile(
   41dc8:	f04f 0320 	mov.w	r3, #32
   41dcc:	f3ef 8111 	mrs	r1, BASEPRI
   41dd0:	f383 8812 	msr	BASEPRI_MAX, r3
   41dd4:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   41dd8:	4b04      	ldr	r3, [pc, #16]	; (41dec <k_sched_lock+0x24>)
   41dda:	689a      	ldr	r2, [r3, #8]
   41ddc:	7bd3      	ldrb	r3, [r2, #15]
   41dde:	3b01      	subs	r3, #1
   41de0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   41de2:	f381 8811 	msr	BASEPRI, r1
   41de6:	f3bf 8f6f 	isb	sy
}
   41dea:	4770      	bx	lr
   41dec:	20003aac 	.word	0x20003aac

00041df0 <k_sched_unlock>:
{
   41df0:	b510      	push	{r4, lr}
	__asm__ volatile(
   41df2:	f04f 0320 	mov.w	r3, #32
   41df6:	f3ef 8411 	mrs	r4, BASEPRI
   41dfa:	f383 8812 	msr	BASEPRI_MAX, r3
   41dfe:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   41e02:	4b08      	ldr	r3, [pc, #32]	; (41e24 <k_sched_unlock+0x34>)
   41e04:	689a      	ldr	r2, [r3, #8]
   41e06:	7bd3      	ldrb	r3, [r2, #15]
   41e08:	3301      	adds	r3, #1
   41e0a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   41e0c:	2000      	movs	r0, #0
   41e0e:	f7ff fde5 	bl	419dc <update_cache>
	__asm__ volatile(
   41e12:	f384 8811 	msr	BASEPRI, r4
   41e16:	f3bf 8f6f 	isb	sy
}
   41e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   41e1e:	f006 be65 	b.w	48aec <z_reschedule_unlocked>
   41e22:	bf00      	nop
   41e24:	20003aac 	.word	0x20003aac

00041e28 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   41e28:	4b04      	ldr	r3, [pc, #16]	; (41e3c <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   41e2a:	2100      	movs	r1, #0
   41e2c:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   41e30:	e9c3 2208 	strd	r2, r2, [r3, #32]
   41e34:	4608      	mov	r0, r1
   41e36:	f7ff be99 	b.w	41b6c <k_sched_time_slice_set>
   41e3a:	bf00      	nop
   41e3c:	20003aac 	.word	0x20003aac

00041e40 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   41e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   41e42:	f04f 0320 	mov.w	r3, #32
   41e46:	f3ef 8511 	mrs	r5, BASEPRI
   41e4a:	f383 8812 	msr	BASEPRI_MAX, r3
   41e4e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   41e52:	4919      	ldr	r1, [pc, #100]	; (41eb8 <z_impl_k_yield+0x78>)
   41e54:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   41e56:	7b43      	ldrb	r3, [r0, #13]
   41e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   41e5c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   41e5e:	f006 fd6d 	bl	4893c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   41e62:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   41e64:	460a      	mov	r2, r1
   41e66:	f063 037f 	orn	r3, r3, #127	; 0x7f
   41e6a:	7343      	strb	r3, [r0, #13]
   41e6c:	f852 3f20 	ldr.w	r3, [r2, #32]!
	return (node == list->tail) ? NULL : node->next;
   41e70:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   41e72:	4293      	cmp	r3, r2
   41e74:	bf08      	it	eq
   41e76:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   41e78:	b923      	cbnz	r3, 41e84 <z_impl_k_yield+0x44>
	node->prev = tail;
   41e7a:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   41e7e:	6020      	str	r0, [r4, #0]
	list->tail = node;
   41e80:	6248      	str	r0, [r1, #36]	; 0x24
}
   41e82:	e00c      	b.n	41e9e <z_impl_k_yield+0x5e>
	int32_t b1 = thread_1->base.prio;
   41e84:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   41e88:	f993 700e 	ldrsb.w	r7, [r3, #14]
	if (b1 != b2) {
   41e8c:	42be      	cmp	r6, r7
   41e8e:	d00e      	beq.n	41eae <z_impl_k_yield+0x6e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   41e90:	42b7      	cmp	r7, r6
   41e92:	dd0c      	ble.n	41eae <z_impl_k_yield+0x6e>
	sys_dnode_t *const prev = successor->prev;
   41e94:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   41e96:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   41e9a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   41e9c:	6058      	str	r0, [r3, #4]
	}
	queue_thread(_current);
	update_cache(1);
   41e9e:	2001      	movs	r0, #1
   41ea0:	f7ff fd9c 	bl	419dc <update_cache>
   41ea4:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   41ea6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   41eaa:	f7e8 b9ad 	b.w	2a208 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   41eae:	42a3      	cmp	r3, r4
   41eb0:	d0e3      	beq.n	41e7a <z_impl_k_yield+0x3a>
   41eb2:	681b      	ldr	r3, [r3, #0]
   41eb4:	e7e0      	b.n	41e78 <z_impl_k_yield+0x38>
   41eb6:	bf00      	nop
   41eb8:	20003aac 	.word	0x20003aac

00041ebc <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   41ebc:	ea50 0301 	orrs.w	r3, r0, r1
{
   41ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41ec4:	4605      	mov	r5, r0
   41ec6:	460e      	mov	r6, r1
	if (ticks == 0) {
   41ec8:	d103      	bne.n	41ed2 <z_tick_sleep+0x16>
	z_impl_k_yield();
   41eca:	f7ff ffb9 	bl	41e40 <z_impl_k_yield>
		k_yield();
		return 0;
   41ece:	2000      	movs	r0, #0
   41ed0:	e02c      	b.n	41f2c <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   41ed2:	1c83      	adds	r3, r0, #2
   41ed4:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   41ed8:	db2a      	blt.n	41f30 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   41eda:	f006 fe86 	bl	48bea <sys_clock_tick_get_32>
   41ede:	1944      	adds	r4, r0, r5
   41ee0:	f04f 0320 	mov.w	r3, #32
   41ee4:	f3ef 8811 	mrs	r8, BASEPRI
   41ee8:	f383 8812 	msr	BASEPRI_MAX, r3
   41eec:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   41ef0:	4f11      	ldr	r7, [pc, #68]	; (41f38 <z_tick_sleep+0x7c>)
   41ef2:	4b12      	ldr	r3, [pc, #72]	; (41f3c <z_tick_sleep+0x80>)
   41ef4:	68b8      	ldr	r0, [r7, #8]
   41ef6:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   41ef8:	f7ff fdfa 	bl	41af0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   41efc:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   41efe:	4910      	ldr	r1, [pc, #64]	; (41f40 <z_tick_sleep+0x84>)
   41f00:	462a      	mov	r2, r5
   41f02:	4633      	mov	r3, r6
   41f04:	3018      	adds	r0, #24
   41f06:	f000 f917 	bl	42138 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   41f0a:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   41f0c:	7b53      	ldrb	r3, [r2, #13]
   41f0e:	f043 0310 	orr.w	r3, r3, #16
   41f12:	7353      	strb	r3, [r2, #13]
   41f14:	4640      	mov	r0, r8
   41f16:	f7e8 f977 	bl	2a208 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   41f1a:	f006 fe66 	bl	48bea <sys_clock_tick_get_32>
   41f1e:	1a20      	subs	r0, r4, r0
   41f20:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   41f24:	2801      	cmp	r0, #1
   41f26:	f173 0300 	sbcs.w	r3, r3, #0
   41f2a:	dbd0      	blt.n	41ece <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   41f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   41f30:	f06f 0401 	mvn.w	r4, #1
   41f34:	1a24      	subs	r4, r4, r0
   41f36:	e7d3      	b.n	41ee0 <z_tick_sleep+0x24>
   41f38:	20003aac 	.word	0x20003aac
   41f3c:	20003adc 	.word	0x20003adc
   41f40:	00048973 	.word	0x00048973

00041f44 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   41f44:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   41f48:	bf08      	it	eq
   41f4a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   41f4e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   41f50:	d106      	bne.n	41f60 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   41f52:	4b08      	ldr	r3, [pc, #32]	; (41f74 <z_impl_k_sleep+0x30>)
   41f54:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   41f56:	f7ff ff05 	bl	41d64 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   41f5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   41f5e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   41f60:	f7ff ffac 	bl	41ebc <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   41f64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   41f68:	fb80 0303 	smull	r0, r3, r0, r3
   41f6c:	0bc0      	lsrs	r0, r0, #15
   41f6e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   41f72:	e7f4      	b.n	41f5e <z_impl_k_sleep+0x1a>
   41f74:	20003aac 	.word	0x20003aac

00041f78 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   41f78:	4b01      	ldr	r3, [pc, #4]	; (41f80 <z_impl_z_current_get+0x8>)
   41f7a:	6898      	ldr	r0, [r3, #8]
   41f7c:	4770      	bx	lr
   41f7e:	bf00      	nop
   41f80:	20003aac 	.word	0x20003aac

00041f84 <z_impl_k_is_preempt_thread>:
   41f84:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   41f88:	b93b      	cbnz	r3, 41f9a <z_impl_k_is_preempt_thread+0x16>
   41f8a:	4b05      	ldr	r3, [pc, #20]	; (41fa0 <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   41f8c:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
   41f8e:	89d8      	ldrh	r0, [r3, #14]
   41f90:	287f      	cmp	r0, #127	; 0x7f
   41f92:	bf8c      	ite	hi
   41f94:	2000      	movhi	r0, #0
   41f96:	2001      	movls	r0, #1
   41f98:	4770      	bx	lr
   41f9a:	2000      	movs	r0, #0
}
   41f9c:	4770      	bx	lr
   41f9e:	bf00      	nop
   41fa0:	20003aac 	.word	0x20003aac

00041fa4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   41fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41fa8:	4604      	mov	r4, r0
   41faa:	f04f 0320 	mov.w	r3, #32
   41fae:	f3ef 8611 	mrs	r6, BASEPRI
   41fb2:	f383 8812 	msr	BASEPRI_MAX, r3
   41fb6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   41fba:	7b43      	ldrb	r3, [r0, #13]
   41fbc:	071a      	lsls	r2, r3, #28
   41fbe:	d505      	bpl.n	41fcc <z_thread_abort+0x28>
	__asm__ volatile(
   41fc0:	f386 8811 	msr	BASEPRI, r6
   41fc4:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   41fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   41fcc:	f023 0220 	bic.w	r2, r3, #32
   41fd0:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   41fd4:	09d2      	lsrs	r2, r2, #7
   41fd6:	d120      	bne.n	4201a <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   41fd8:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   41fda:	68a3      	ldr	r3, [r4, #8]
   41fdc:	b113      	cbz	r3, 41fe4 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   41fde:	4620      	mov	r0, r4
   41fe0:	f006 fcb4 	bl	4894c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   41fe4:	f104 0018 	add.w	r0, r4, #24
   41fe8:	f006 fdbd 	bl	48b66 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   41fec:	f104 0758 	add.w	r7, r4, #88	; 0x58
   41ff0:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   41ff4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   41ff6:	42bd      	cmp	r5, r7
   41ff8:	d000      	beq.n	41ffc <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   41ffa:	b9b5      	cbnz	r5, 4202a <z_thread_abort+0x86>
		update_cache(1);
   41ffc:	2001      	movs	r0, #1
   41ffe:	f7ff fced 	bl	419dc <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   42002:	4b10      	ldr	r3, [pc, #64]	; (42044 <z_thread_abort+0xa0>)
   42004:	689b      	ldr	r3, [r3, #8]
   42006:	42a3      	cmp	r3, r4
   42008:	d1da      	bne.n	41fc0 <z_thread_abort+0x1c>
   4200a:	f3ef 8305 	mrs	r3, IPSR
   4200e:	2b00      	cmp	r3, #0
   42010:	d1d6      	bne.n	41fc0 <z_thread_abort+0x1c>
   42012:	4630      	mov	r0, r6
   42014:	f7e8 f8f8 	bl	2a208 <arch_swap>
	return ret;
   42018:	e7d2      	b.n	41fc0 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   4201a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   4201e:	f043 0308 	orr.w	r3, r3, #8
   42022:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   42024:	f006 fc8a 	bl	4893c <sys_dlist_remove>
}
   42028:	e7d7      	b.n	41fda <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   4202a:	4628      	mov	r0, r5
   4202c:	f006 fc8e 	bl	4894c <unpend_thread_no_timeout>
   42030:	f105 0018 	add.w	r0, r5, #24
   42034:	f006 fd97 	bl	48b66 <z_abort_timeout>
   42038:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   4203c:	4628      	mov	r0, r5
   4203e:	f7ff fd23 	bl	41a88 <ready_thread>
   42042:	e7d7      	b.n	41ff4 <z_thread_abort+0x50>
   42044:	20003aac 	.word	0x20003aac

00042048 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   42048:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   4204a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   4204e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   42050:	e9cd 6700 	strd	r6, r7, [sp]
   42054:	f7ff fdfc 	bl	41c50 <z_pend_curr>

	if (data != NULL) {
   42058:	b11c      	cbz	r4, 42062 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   4205a:	4b03      	ldr	r3, [pc, #12]	; (42068 <z_sched_wait+0x20>)
   4205c:	689b      	ldr	r3, [r3, #8]
   4205e:	695b      	ldr	r3, [r3, #20]
   42060:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   42062:	b002      	add	sp, #8
   42064:	bdd0      	pop	{r4, r6, r7, pc}
   42066:	bf00      	nop
   42068:	20003aac 	.word	0x20003aac

0004206c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   4206c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   4206e:	4806      	ldr	r0, [pc, #24]	; (42088 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   42070:	4a06      	ldr	r2, [pc, #24]	; (4208c <z_data_copy+0x20>)
   42072:	4907      	ldr	r1, [pc, #28]	; (42090 <z_data_copy+0x24>)
   42074:	1a12      	subs	r2, r2, r0
   42076:	f002 fd24 	bl	44ac2 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   4207a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   4207e:	4a05      	ldr	r2, [pc, #20]	; (42094 <z_data_copy+0x28>)
   42080:	4905      	ldr	r1, [pc, #20]	; (42098 <z_data_copy+0x2c>)
   42082:	4806      	ldr	r0, [pc, #24]	; (4209c <z_data_copy+0x30>)
   42084:	f002 bd1d 	b.w	44ac2 <memcpy>
   42088:	20000000 	.word	0x20000000
   4208c:	20000d81 	.word	0x20000d81
   42090:	0004b1cc 	.word	0x0004b1cc
   42094:	00000000 	.word	0x00000000
   42098:	0004b1cc 	.word	0x0004b1cc
   4209c:	20000000 	.word	0x20000000

000420a0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   420a0:	4b03      	ldr	r3, [pc, #12]	; (420b0 <elapsed+0x10>)
   420a2:	681b      	ldr	r3, [r3, #0]
   420a4:	b90b      	cbnz	r3, 420aa <elapsed+0xa>
   420a6:	f7fd b839 	b.w	3f11c <sys_clock_elapsed>
}
   420aa:	2000      	movs	r0, #0
   420ac:	4770      	bx	lr
   420ae:	bf00      	nop
   420b0:	20003ae8 	.word	0x20003ae8

000420b4 <next_timeout>:
	return list->head == list;
   420b4:	4b11      	ldr	r3, [pc, #68]	; (420fc <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   420b6:	b510      	push	{r4, lr}
   420b8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   420ba:	429c      	cmp	r4, r3
   420bc:	d10a      	bne.n	420d4 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   420be:	f7ff ffef 	bl	420a0 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   420c2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   420c6:	4b0e      	ldr	r3, [pc, #56]	; (42100 <next_timeout+0x4c>)
   420c8:	691b      	ldr	r3, [r3, #16]
   420ca:	b113      	cbz	r3, 420d2 <next_timeout+0x1e>
   420cc:	4298      	cmp	r0, r3
   420ce:	bfa8      	it	ge
   420d0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   420d2:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   420d4:	f7ff ffe4 	bl	420a0 <elapsed>
	if ((to == NULL) ||
   420d8:	2c00      	cmp	r4, #0
   420da:	d0f2      	beq.n	420c2 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   420dc:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   420e0:	1a1b      	subs	r3, r3, r0
   420e2:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   420e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   420ea:	f172 0100 	sbcs.w	r1, r2, #0
   420ee:	dae8      	bge.n	420c2 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   420f0:	2a00      	cmp	r2, #0
   420f2:	bfac      	ite	ge
   420f4:	4618      	movge	r0, r3
   420f6:	2000      	movlt	r0, #0
   420f8:	e7e5      	b.n	420c6 <next_timeout+0x12>
   420fa:	bf00      	nop
   420fc:	200008ac 	.word	0x200008ac
   42100:	20003aac 	.word	0x20003aac

00042104 <remove_timeout>:
	return (node == list->tail) ? NULL : node->next;
   42104:	4a0b      	ldr	r2, [pc, #44]	; (42134 <remove_timeout+0x30>)
   42106:	6803      	ldr	r3, [r0, #0]
   42108:	6852      	ldr	r2, [r2, #4]
   4210a:	4290      	cmp	r0, r2
{
   4210c:	b530      	push	{r4, r5, lr}
   4210e:	d009      	beq.n	42124 <remove_timeout+0x20>
	if (next(t) != NULL) {
   42110:	b143      	cbz	r3, 42124 <remove_timeout+0x20>
		next(t)->dticks += t->dticks;
   42112:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   42116:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   4211a:	1912      	adds	r2, r2, r4
   4211c:	eb41 0105 	adc.w	r1, r1, r5
   42120:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   42124:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   42126:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   42128:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   4212a:	2300      	movs	r3, #0
	node->prev = NULL;
   4212c:	e9c0 3300 	strd	r3, r3, [r0]
}
   42130:	bd30      	pop	{r4, r5, pc}
   42132:	bf00      	nop
   42134:	200008ac 	.word	0x200008ac

00042138 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   42138:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   4213c:	bf08      	it	eq
   4213e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   42142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   42144:	4604      	mov	r4, r0
   42146:	461d      	mov	r5, r3
   42148:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   4214a:	d061      	beq.n	42210 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   4214c:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   4214e:	f04f 0320 	mov.w	r3, #32
   42152:	f3ef 8711 	mrs	r7, BASEPRI
   42156:	f383 8812 	msr	BASEPRI_MAX, r3
   4215a:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   4215e:	3201      	adds	r2, #1
   42160:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
   42164:	da24      	bge.n	421b0 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   42166:	4930      	ldr	r1, [pc, #192]	; (42228 <z_add_timeout+0xf0>)
   42168:	e9d1 2000 	ldrd	r2, r0, [r1]
   4216c:	f06f 0301 	mvn.w	r3, #1
   42170:	1a9b      	subs	r3, r3, r2
   42172:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   42176:	eb62 0000 	sbc.w	r0, r2, r0
   4217a:	1b9e      	subs	r6, r3, r6
   4217c:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   42180:	2e01      	cmp	r6, #1
   42182:	f170 0300 	sbcs.w	r3, r0, #0
   42186:	da01      	bge.n	4218c <z_add_timeout+0x54>
   42188:	2601      	movs	r6, #1
   4218a:	2000      	movs	r0, #0
   4218c:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   42190:	4e26      	ldr	r6, [pc, #152]	; (4222c <z_add_timeout+0xf4>)
   42192:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   42196:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   42198:	45b4      	cmp	ip, r6
   4219a:	bf08      	it	eq
   4219c:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   421a0:	f1bc 0f00 	cmp.w	ip, #0
   421a4:	d10d      	bne.n	421c2 <z_add_timeout+0x8a>
	node->prev = tail;
   421a6:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   421aa:	602c      	str	r4, [r5, #0]
	list->tail = node;
   421ac:	6074      	str	r4, [r6, #4]
}
   421ae:	e01c      	b.n	421ea <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   421b0:	f7ff ff76 	bl	420a0 <elapsed>
   421b4:	3601      	adds	r6, #1
   421b6:	f145 0500 	adc.w	r5, r5, #0
   421ba:	1836      	adds	r6, r6, r0
   421bc:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   421c0:	e7e4      	b.n	4218c <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   421c2:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   421c6:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   421ca:	4293      	cmp	r3, r2
   421cc:	eb71 0e00 	sbcs.w	lr, r1, r0
   421d0:	da1f      	bge.n	42212 <z_add_timeout+0xda>
				t->dticks -= to->dticks;
   421d2:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   421d4:	f8dc 3004 	ldr.w	r3, [ip, #4]
   421d8:	eb60 0001 	sbc.w	r0, r0, r1
   421dc:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   421e0:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   421e4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   421e6:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   421ea:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   421ec:	42b3      	cmp	r3, r6
   421ee:	d00b      	beq.n	42208 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   421f0:	429c      	cmp	r4, r3
   421f2:	d109      	bne.n	42208 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   421f4:	f7ff ff5e 	bl	420b4 <next_timeout>

			if (next_time == 0 ||
   421f8:	b118      	cbz	r0, 42202 <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
   421fa:	4b0d      	ldr	r3, [pc, #52]	; (42230 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
   421fc:	691b      	ldr	r3, [r3, #16]
   421fe:	4283      	cmp	r3, r0
   42200:	d002      	beq.n	42208 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
   42202:	2100      	movs	r1, #0
   42204:	f7fc ff58 	bl	3f0b8 <sys_clock_set_timeout>
	__asm__ volatile(
   42208:	f387 8811 	msr	BASEPRI, r7
   4220c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   42210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   42212:	1a9b      	subs	r3, r3, r2
   42214:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   42218:	45ac      	cmp	ip, r5
   4221a:	e9c4 3104 	strd	r3, r1, [r4, #16]
   4221e:	d0c2      	beq.n	421a6 <z_add_timeout+0x6e>
   42220:	f8dc c000 	ldr.w	ip, [ip]
   42224:	e7bc      	b.n	421a0 <z_add_timeout+0x68>
   42226:	bf00      	nop
   42228:	20001960 	.word	0x20001960
   4222c:	200008ac 	.word	0x200008ac
   42230:	20003aac 	.word	0x20003aac

00042234 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   42234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   42238:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   4223a:	f7ff fcc9 	bl	41bd0 <z_time_slice>
	__asm__ volatile(
   4223e:	f04f 0320 	mov.w	r3, #32
   42242:	f3ef 8411 	mrs	r4, BASEPRI
   42246:	f383 8812 	msr	BASEPRI_MAX, r3
   4224a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   4224e:	4e24      	ldr	r6, [pc, #144]	; (422e0 <sys_clock_announce+0xac>)
	return list->head == list;
   42250:	f8df 8090 	ldr.w	r8, [pc, #144]	; 422e4 <sys_clock_announce+0xb0>
   42254:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   42256:	4d24      	ldr	r5, [pc, #144]	; (422e8 <sys_clock_announce+0xb4>)
   42258:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   4225c:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   4225e:	4540      	cmp	r0, r8
		curr_tick += dt;
   42260:	e9d5 1e00 	ldrd	r1, lr, [r5]
   42264:	ea4f 77e2 	mov.w	r7, r2, asr #31
   42268:	d00b      	beq.n	42282 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   4226a:	b150      	cbz	r0, 42282 <sys_clock_announce+0x4e>
   4226c:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   42270:	429a      	cmp	r2, r3
   42272:	eb77 090c 	sbcs.w	r9, r7, ip
   42276:	da16      	bge.n	422a6 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   42278:	1a9b      	subs	r3, r3, r2
   4227a:	eb6c 0c07 	sbc.w	ip, ip, r7
   4227e:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   42282:	1851      	adds	r1, r2, r1
   42284:	eb4e 0707 	adc.w	r7, lr, r7
   42288:	e9c5 1700 	strd	r1, r7, [r5]
	announce_remaining = 0;
   4228c:	2500      	movs	r5, #0
   4228e:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   42290:	f7ff ff10 	bl	420b4 <next_timeout>
   42294:	4629      	mov	r1, r5
   42296:	f7fc ff0f 	bl	3f0b8 <sys_clock_set_timeout>
	__asm__ volatile(
   4229a:	f384 8811 	msr	BASEPRI, r4
   4229e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   422a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   422a6:	1859      	adds	r1, r3, r1
   422a8:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   422ac:	1ad3      	subs	r3, r2, r3
   422ae:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   422b0:	2200      	movs	r2, #0
   422b2:	2300      	movs	r3, #0
   422b4:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   422b8:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   422bc:	f7ff ff22 	bl	42104 <remove_timeout>
   422c0:	f384 8811 	msr	BASEPRI, r4
   422c4:	f3bf 8f6f 	isb	sy
		t->fn(t);
   422c8:	6883      	ldr	r3, [r0, #8]
   422ca:	4798      	blx	r3
	__asm__ volatile(
   422cc:	f04f 0320 	mov.w	r3, #32
   422d0:	f3ef 8411 	mrs	r4, BASEPRI
   422d4:	f383 8812 	msr	BASEPRI_MAX, r3
   422d8:	f3bf 8f6f 	isb	sy
	return k;
   422dc:	e7bc      	b.n	42258 <sys_clock_announce+0x24>
   422de:	bf00      	nop
   422e0:	20003ae8 	.word	0x20003ae8
   422e4:	200008ac 	.word	0x200008ac
   422e8:	20001960 	.word	0x20001960

000422ec <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   422ec:	b510      	push	{r4, lr}
   422ee:	f04f 0320 	mov.w	r3, #32
   422f2:	f3ef 8411 	mrs	r4, BASEPRI
   422f6:	f383 8812 	msr	BASEPRI_MAX, r3
   422fa:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   422fe:	f7fc ff0d 	bl	3f11c <sys_clock_elapsed>
   42302:	4a05      	ldr	r2, [pc, #20]	; (42318 <sys_clock_tick_get+0x2c>)
   42304:	e9d2 3100 	ldrd	r3, r1, [r2]
   42308:	18c0      	adds	r0, r0, r3
   4230a:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   4230e:	f384 8811 	msr	BASEPRI, r4
   42312:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   42316:	bd10      	pop	{r4, pc}
   42318:	20001960 	.word	0x20001960

0004231c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   4231c:	b570      	push	{r4, r5, r6, lr}
   4231e:	4604      	mov	r4, r0
	__asm__ volatile(
   42320:	f04f 0320 	mov.w	r3, #32
   42324:	f3ef 8511 	mrs	r5, BASEPRI
   42328:	f383 8812 	msr	BASEPRI_MAX, r3
   4232c:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   42330:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   42334:	3301      	adds	r3, #1
   42336:	f142 0200 	adc.w	r2, r2, #0
   4233a:	2b02      	cmp	r3, #2
   4233c:	f172 0200 	sbcs.w	r2, r2, #0
   42340:	d304      	bcc.n	4234c <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   42342:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   42346:	4917      	ldr	r1, [pc, #92]	; (423a4 <z_timer_expiration_handler+0x88>)
   42348:	f7ff fef6 	bl	42138 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   4234c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   4234e:	3301      	adds	r3, #1
   42350:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   42352:	6a23      	ldr	r3, [r4, #32]
   42354:	b173      	cbz	r3, 42374 <z_timer_expiration_handler+0x58>
	__asm__ volatile(
   42356:	f385 8811 	msr	BASEPRI, r5
   4235a:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   4235e:	6a23      	ldr	r3, [r4, #32]
   42360:	4620      	mov	r0, r4
   42362:	4798      	blx	r3
	__asm__ volatile(
   42364:	f04f 0320 	mov.w	r3, #32
   42368:	f3ef 8511 	mrs	r5, BASEPRI
   4236c:	f383 8812 	msr	BASEPRI_MAX, r3
   42370:	f3bf 8f6f 	isb	sy
	return list->head == list;
   42374:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   42378:	42a6      	cmp	r6, r4
   4237a:	d000      	beq.n	4237e <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   4237c:	b926      	cbnz	r6, 42388 <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
   4237e:	f385 8811 	msr	BASEPRI, r5
   42382:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   42386:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   42388:	4630      	mov	r0, r6
   4238a:	f006 fb4c 	bl	48a26 <z_unpend_thread_no_timeout>
   4238e:	2300      	movs	r3, #0
   42390:	67f3      	str	r3, [r6, #124]	; 0x7c
   42392:	f385 8811 	msr	BASEPRI, r5
   42396:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   4239a:	4630      	mov	r0, r6
}
   4239c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   423a0:	f006 bb31 	b.w	48a06 <z_ready_thread>
   423a4:	0004231d 	.word	0x0004231d

000423a8 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   423a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   423ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   423b0:	bf08      	it	eq
   423b2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   423b6:	4605      	mov	r5, r0
   423b8:	4614      	mov	r4, r2
   423ba:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   423be:	4619      	mov	r1, r3
   423c0:	4691      	mov	r9, r2
   423c2:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   423c4:	d037      	beq.n	42436 <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   423c6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   423ca:	bf08      	it	eq
   423cc:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   423d0:	4637      	mov	r7, r6
   423d2:	4682      	mov	sl, r0
   423d4:	d011      	beq.n	423fa <z_impl_k_timer_start+0x52>
   423d6:	ea50 0306 	orrs.w	r3, r0, r6
   423da:	d00e      	beq.n	423fa <z_impl_k_timer_start+0x52>
   423dc:	1c72      	adds	r2, r6, #1
   423de:	f170 33ff 	sbcs.w	r3, r0, #4294967295	; 0xffffffff
   423e2:	db0a      	blt.n	423fa <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   423e4:	2e02      	cmp	r6, #2
   423e6:	4684      	mov	ip, r0
   423e8:	f170 0000 	sbcs.w	r0, r0, #0
   423ec:	bfbc      	itt	lt
   423ee:	2702      	movlt	r7, #2
   423f0:	f04f 0c00 	movlt.w	ip, #0
   423f4:	3f01      	subs	r7, #1
   423f6:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   423fa:	1c63      	adds	r3, r4, #1
   423fc:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   42400:	db0a      	blt.n	42418 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   42402:	2c01      	cmp	r4, #1
   42404:	f171 0300 	sbcs.w	r3, r1, #0
   42408:	4622      	mov	r2, r4
   4240a:	bfbc      	itt	lt
   4240c:	2201      	movlt	r2, #1
   4240e:	2100      	movlt	r1, #0
   42410:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
   42414:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   42418:	4628      	mov	r0, r5
   4241a:	f006 fba4 	bl	48b66 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   4241e:	2300      	movs	r3, #0
   42420:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
   42422:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   42426:	464a      	mov	r2, r9
   42428:	4643      	mov	r3, r8
   4242a:	4628      	mov	r0, r5
   4242c:	4903      	ldr	r1, [pc, #12]	; (4243c <z_impl_k_timer_start+0x94>)
		     duration);
}
   4242e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   42432:	f7ff be81 	b.w	42138 <z_add_timeout>
}
   42436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   4243a:	bf00      	nop
   4243c:	0004231d 	.word	0x0004231d

00042440 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   42440:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   42444:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   42446:	4b29      	ldr	r3, [pc, #164]	; (424ec <z_impl_k_poll+0xac>)
   42448:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   4244a:	2301      	movs	r3, #1
   4244c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   42450:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   42454:	ea52 0305 	orrs.w	r3, r2, r5
{
   42458:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   4245a:	bf0c      	ite	eq
   4245c:	2301      	moveq	r3, #1
   4245e:	2300      	movne	r3, #0
   42460:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   42464:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   42466:	f006 fc3a 	bl	48cde <register_events>
   4246a:	4681      	mov	r9, r0
	__asm__ volatile(
   4246c:	f04f 0320 	mov.w	r3, #32
   42470:	f3ef 8a11 	mrs	sl, BASEPRI
   42474:	f383 8812 	msr	BASEPRI_MAX, r3
   42478:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   4247c:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   42480:	b964      	cbnz	r4, 4249c <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   42482:	4601      	mov	r1, r0
   42484:	4652      	mov	r2, sl
   42486:	4640      	mov	r0, r8
   42488:	f006 fcfa 	bl	48e80 <clear_event_registrations>
	__asm__ volatile(
   4248c:	f38a 8811 	msr	BASEPRI, sl
   42490:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   42494:	4620      	mov	r0, r4
   42496:	b002      	add	sp, #8
   42498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   4249c:	2300      	movs	r3, #0
   4249e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   424a2:	ea56 0305 	orrs.w	r3, r6, r5
   424a6:	d106      	bne.n	424b6 <z_impl_k_poll+0x76>
   424a8:	f38a 8811 	msr	BASEPRI, sl
   424ac:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   424b0:	f06f 040a 	mvn.w	r4, #10
   424b4:	e7ee      	b.n	42494 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   424b6:	e9cd 6500 	strd	r6, r5, [sp]
   424ba:	4a0d      	ldr	r2, [pc, #52]	; (424f0 <z_impl_k_poll+0xb0>)
   424bc:	480d      	ldr	r0, [pc, #52]	; (424f4 <z_impl_k_poll+0xb4>)
   424be:	4651      	mov	r1, sl
   424c0:	f7ff fbc6 	bl	41c50 <z_pend_curr>
   424c4:	4604      	mov	r4, r0
	__asm__ volatile(
   424c6:	f04f 0320 	mov.w	r3, #32
   424ca:	f3ef 8511 	mrs	r5, BASEPRI
   424ce:	f383 8812 	msr	BASEPRI_MAX, r3
   424d2:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   424d6:	462a      	mov	r2, r5
   424d8:	4649      	mov	r1, r9
   424da:	4640      	mov	r0, r8
   424dc:	f006 fcd0 	bl	48e80 <clear_event_registrations>
	__asm__ volatile(
   424e0:	f385 8811 	msr	BASEPRI, r5
   424e4:	f3bf 8f6f 	isb	sy
	return swap_rc;
   424e8:	e7d4      	b.n	42494 <z_impl_k_poll+0x54>
   424ea:	bf00      	nop
   424ec:	20003aac 	.word	0x20003aac
   424f0:	200008b4 	.word	0x200008b4
   424f4:	20003c29 	.word	0x20003c29

000424f8 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   424f8:	b538      	push	{r3, r4, r5, lr}
   424fa:	4603      	mov	r3, r0
	__asm__ volatile(
   424fc:	f04f 0220 	mov.w	r2, #32
   42500:	f3ef 8511 	mrs	r5, BASEPRI
   42504:	f382 8812 	msr	BASEPRI_MAX, r2
   42508:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   4250c:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   4250e:	2101      	movs	r1, #1
   42510:	6081      	str	r1, [r0, #8]
	return list->head == list;
   42512:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   42514:	4283      	cmp	r3, r0
   42516:	d106      	bne.n	42526 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   42518:	f385 8811 	msr	BASEPRI, r5
   4251c:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   42520:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   42522:	4620      	mov	r0, r4
   42524:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   42526:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   4252a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   4252c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   4252e:	2300      	movs	r3, #0
	node->prev = NULL;
   42530:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   42534:	f006 fc4a 	bl	48dcc <signal_poll_event>
	z_reschedule(&lock, key);
   42538:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   4253a:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   4253c:	4801      	ldr	r0, [pc, #4]	; (42544 <z_impl_k_poll_signal_raise+0x4c>)
   4253e:	f7ff fbe1 	bl	41d04 <z_reschedule>
	return rc;
   42542:	e7ee      	b.n	42522 <z_impl_k_poll_signal_raise+0x2a>
   42544:	20003c29 	.word	0x20003c29

00042548 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   42548:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   4254a:	4601      	mov	r1, r0
   4254c:	4801      	ldr	r0, [pc, #4]	; (42554 <k_aligned_alloc+0xc>)
   4254e:	f006 bce3 	b.w	48f18 <z_heap_aligned_alloc>
   42552:	bf00      	nop
   42554:	20000af0 	.word	0x20000af0

00042558 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   42558:	4b01      	ldr	r3, [pc, #4]	; (42560 <k_thread_system_pool_assign+0x8>)
   4255a:	6743      	str	r3, [r0, #116]	; 0x74
}
   4255c:	4770      	bx	lr
   4255e:	bf00      	nop
   42560:	20000af0 	.word	0x20000af0

00042564 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   42564:	b538      	push	{r3, r4, r5, lr}
   42566:	4604      	mov	r4, r0
   42568:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   4256a:	f005 fffd 	bl	48568 <k_is_in_isr>
   4256e:	b920      	cbnz	r0, 4257a <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   42570:	4b06      	ldr	r3, [pc, #24]	; (4258c <z_thread_aligned_alloc+0x28>)
   42572:	689b      	ldr	r3, [r3, #8]
   42574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   42576:	b90b      	cbnz	r3, 4257c <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   42578:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   4257a:	4b05      	ldr	r3, [pc, #20]	; (42590 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   4257c:	462a      	mov	r2, r5
   4257e:	4621      	mov	r1, r4
   42580:	4618      	mov	r0, r3
}
   42582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   42586:	f006 bcc7 	b.w	48f18 <z_heap_aligned_alloc>
   4258a:	bf00      	nop
   4258c:	20003aac 	.word	0x20003aac
   42590:	20000af0 	.word	0x20000af0

00042594 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   42594:	4770      	bx	lr

00042596 <zmk_event_manager_raise>:

int zmk_event_manager_raise(zmk_event_t *event) { return zmk_event_manager_handle_from(event, 0); }
   42596:	2100      	movs	r1, #0
   42598:	f7e5 ba52 	b.w	27a40 <zmk_event_manager_handle_from>

0004259c <behavior_reset_init>:
#if DT_HAS_COMPAT_STATUS_OKAY(DT_DRV_COMPAT)
struct behavior_reset_config {
    int type;
};

static int behavior_reset_init(const struct device *dev) { return 0; };
   4259c:	2000      	movs	r0, #0
   4259e:	4770      	bx	lr

000425a0 <on_keymap_binding_pressed>:

static int on_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
   425a0:	b082      	sub	sp, #8
   425a2:	b508      	push	{r3, lr}
   425a4:	a902      	add	r1, sp, #8
   425a6:	e881 000c 	stmia.w	r1, {r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   425aa:	6800      	ldr	r0, [r0, #0]
   425ac:	f7fe fc12 	bl	40dd4 <z_impl_device_get_binding>
    const struct behavior_reset_config *cfg = dev->config;

    // TODO: Correct magic code for going into DFU?
    // See
    // https://github.com/adafruit/Adafruit_nRF52_Bootloader/blob/d6b28e66053eea467166f44875e3c7ec741cb471/src/main.c#L107
    sys_reboot(cfg->type);
   425b0:	6843      	ldr	r3, [r0, #4]
   425b2:	6818      	ldr	r0, [r3, #0]
   425b4:	f7e6 f810 	bl	285d8 <sys_reboot>

000425b8 <ext_power_enable>:
__syscall int ext_power_enable(const struct device *dev);

static inline int z_impl_ext_power_enable(const struct device *dev) {
    const struct ext_power_api *api = (const struct ext_power_api *)dev->api;

    if (api->enable == NULL) {
   425b8:	6883      	ldr	r3, [r0, #8]
   425ba:	681b      	ldr	r3, [r3, #0]
   425bc:	b103      	cbz	r3, 425c0 <ext_power_enable+0x8>
        return -ENOTSUP;
    }

    return api->enable(dev);
   425be:	4718      	bx	r3
		return (int) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_EXT_POWER_ENABLE);
	}
#endif
	compiler_barrier();
	return z_impl_ext_power_enable(dev);
}
   425c0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   425c4:	4770      	bx	lr

000425c6 <ext_power_disable>:
__syscall int ext_power_disable(const struct device *dev);

static inline int z_impl_ext_power_disable(const struct device *dev) {
    const struct ext_power_api *api = (const struct ext_power_api *)dev->api;

    if (api->disable == NULL) {
   425c6:	6883      	ldr	r3, [r0, #8]
   425c8:	685b      	ldr	r3, [r3, #4]
   425ca:	b103      	cbz	r3, 425ce <ext_power_disable+0x8>
        return -ENOTSUP;
    }

    return api->disable(dev);
   425cc:	4718      	bx	r3
		return (int) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_EXT_POWER_DISABLE);
	}
#endif
	compiler_barrier();
	return z_impl_ext_power_disable(dev);
}
   425ce:	f06f 0085 	mvn.w	r0, #133	; 0x85
   425d2:	4770      	bx	lr

000425d4 <ext_power_get>:
__syscall int ext_power_get(const struct device *dev);

static inline int z_impl_ext_power_get(const struct device *dev) {
    const struct ext_power_api *api = (const struct ext_power_api *)dev->api;

    if (api->get == NULL) {
   425d4:	6883      	ldr	r3, [r0, #8]
   425d6:	689b      	ldr	r3, [r3, #8]
   425d8:	b103      	cbz	r3, 425dc <ext_power_get+0x8>
        return -ENOTSUP;
    }

    return api->get(dev);
   425da:	4718      	bx	r3
		return (int) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_EXT_POWER_GET);
	}
#endif
	compiler_barrier();
	return z_impl_ext_power_get(dev);
}
   425dc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   425e0:	4770      	bx	lr

000425e2 <on_keymap_binding_released>:

static int on_keymap_binding_released(struct zmk_behavior_binding *binding,
                                      struct zmk_behavior_binding_event event) {
   425e2:	b082      	sub	sp, #8
   425e4:	e88d 000c 	stmia.w	sp, {r2, r3}
    return ZMK_BEHAVIOR_OPAQUE;
}
   425e8:	2000      	movs	r0, #0
   425ea:	b002      	add	sp, #8
   425ec:	4770      	bx	lr

000425ee <behavior_ext_power_init>:

static int behavior_ext_power_init(const struct device *dev) { return 0; };
   425ee:	2000      	movs	r0, #0
   425f0:	4770      	bx	lr

000425f2 <zmk_battery_work>:
    int rc = zmk_battery_update(battery);
   425f2:	f7e5 baef 	b.w	27bd4 <zmk_battery_update.constprop.0>

000425f6 <split_listener>:
#include <zmk/event_manager.h>
#include <zmk/events/position_state_changed.h>
#include <zmk/hid.h>
#include <zmk/endpoints.h>

int split_listener(const zmk_event_t *eh) {
   425f6:	b508      	push	{r3, lr}
    LOG_DBG("");
    const struct zmk_position_state_changed *ev = as_zmk_position_state_changed(eh);
   425f8:	f7e5 fa78 	bl	27aec <as_zmk_position_state_changed>
    if (ev != NULL) {
   425fc:	4603      	mov	r3, r0
   425fe:	b150      	cbz	r0, 42616 <split_listener+0x20>
        if (ev->state) {
   42600:	7a1b      	ldrb	r3, [r3, #8]
            return zmk_split_bt_position_pressed(ev->position);
   42602:	7900      	ldrb	r0, [r0, #4]
        if (ev->state) {
   42604:	b11b      	cbz	r3, 4260e <split_listener+0x18>
        } else {
            return zmk_split_bt_position_released(ev->position);
        }
    }
    return ZMK_EV_EVENT_BUBBLE;
}
   42606:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return zmk_split_bt_position_pressed(ev->position);
   4260a:	f7e5 bb9b 	b.w	27d44 <zmk_split_bt_position_pressed>
}
   4260e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return zmk_split_bt_position_released(ev->position);
   42612:	f7e5 bba5 	b.w	27d60 <zmk_split_bt_position_released>
}
   42616:	bd08      	pop	{r3, pc}

00042618 <split_svc_pos_state_ccc>:
}
   42618:	4770      	bx	lr

0004261a <split_svc_num_of_positions>:
                                          void *buf, uint16_t len, uint16_t offset) {
   4261a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return bt_gatt_attr_read(conn, attrs, buf, len, offset, attrs->user_data, sizeof(uint8_t));
   4261c:	2401      	movs	r4, #1
   4261e:	9402      	str	r4, [sp, #8]
   42620:	68cc      	ldr	r4, [r1, #12]
   42622:	9401      	str	r4, [sp, #4]
   42624:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   42628:	9400      	str	r4, [sp, #0]
   4262a:	f004 fb9c 	bl	46d66 <bt_gatt_attr_read>
}
   4262e:	b004      	add	sp, #16
   42630:	bd10      	pop	{r4, pc}

00042632 <split_svc_run_behavior>:
                                      uint8_t flags) {
   42632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   42636:	b092      	sub	sp, #72	; 0x48
   42638:	461f      	mov	r7, r3
   4263a:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    uint16_t end_addr = offset + len;
   4263e:	19dd      	adds	r5, r3, r7
                                      uint8_t flags) {
   42640:	460c      	mov	r4, r1
    uint16_t end_addr = offset + len;
   42642:	b2ad      	uxth	r5, r5
    if (end_addr > sizeof(struct zmk_split_run_behavior_payload)) {
   42644:	2d13      	cmp	r5, #19
    struct zmk_split_run_behavior_payload *payload = attrs->user_data;
   42646:	68e4      	ldr	r4, [r4, #12]
                                      uint8_t flags) {
   42648:	4611      	mov	r1, r2
    if (end_addr > sizeof(struct zmk_split_run_behavior_payload)) {
   4264a:	d860      	bhi.n	4270e <split_svc_run_behavior+0xdc>
    memcpy(payload + offset, buf, len);
   4264c:	2013      	movs	r0, #19
   4264e:	463a      	mov	r2, r7
   42650:	fb00 4003 	mla	r0, r0, r3, r4
   42654:	f002 fa35 	bl	44ac2 <memcpy>
    if ((end_addr > sizeof(struct zmk_split_run_behavior_data)) &&
   42658:	2d0a      	cmp	r5, #10
   4265a:	d941      	bls.n	426e0 <split_svc_run_behavior+0xae>
        payload->behavior_dev[end_addr - behavior_dev_offset - 1] == '\0') {
   4265c:	4425      	add	r5, r4
    if ((end_addr > sizeof(struct zmk_split_run_behavior_data)) &&
   4265e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   42662:	2b00      	cmp	r3, #0
   42664:	d13c      	bne.n	426e0 <split_svc_run_behavior+0xae>
            .behavior_dev = payload->behavior_dev,
   42666:	f104 020a 	add.w	r2, r4, #10
        struct zmk_behavior_binding binding = {
   4266a:	9203      	str	r2, [sp, #12]
            .param1 = payload->data.param1,
   4266c:	f8d4 2002 	ldr.w	r2, [r4, #2]
        struct zmk_behavior_binding binding = {
   42670:	9204      	str	r2, [sp, #16]
            .param2 = payload->data.param2,
   42672:	f8d4 2006 	ldr.w	r2, [r4, #6]
        struct zmk_behavior_binding_event event = {.position = payload->data.position,
   42676:	e9cd 2305 	strd	r2, r3, [sp, #20]
   4267a:	f894 8000 	ldrb.w	r8, [r4]
	return z_impl_k_uptime_ticks();
   4267e:	f006 fab8 	bl	48bf2 <z_impl_k_uptime_ticks>
   42682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   42686:	fba0 5c03 	umull	r5, ip, r0, r3
   4268a:	fb03 cc01 	mla	ip, r3, r1, ip
        if (payload->data.state > 0) {
   4268e:	7862      	ldrb	r2, [r4, #1]
   42690:	0bed      	lsrs	r5, r5, #15
   42692:	ea45 454c 	orr.w	r5, r5, ip, lsl #17
   42696:	ea4f 3cdc 	mov.w	ip, ip, lsr #15
   4269a:	e9cd 8507 	strd	r8, r5, [sp, #28]
   4269e:	ac0a      	add	r4, sp, #40	; 0x28
   426a0:	ab06      	add	r3, sp, #24
   426a2:	ae0e      	add	r6, sp, #56	; 0x38
   426a4:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   426a8:	b1f2      	cbz	r2, 426e8 <split_svc_run_behavior+0xb6>
            err = behavior_keymap_binding_pressed(&binding, event);
   426aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   426ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&binding, *(uintptr_t *)&event, K_SYSCALL_BEHAVIOR_KEYMAP_BINDING_PRESSED);
	}
#endif
	compiler_barrier();
	return z_impl_behavior_keymap_binding_pressed(binding, event);
   426b0:	e9cd 850b 	strd	r8, r5, [sp, #44]	; 0x2c
   426b4:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
   426b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   426bc:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
__syscall int behavior_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                              struct zmk_behavior_binding_event event);

static inline int z_impl_behavior_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                                         struct zmk_behavior_binding_event event) {
    const struct device *dev = device_get_binding(binding->behavior_dev);
   426c0:	9803      	ldr	r0, [sp, #12]
   426c2:	f7fe fb87 	bl	40dd4 <z_impl_device_get_binding>

    if (dev == NULL) {
   426c6:	b158      	cbz	r0, 426e0 <split_svc_run_behavior+0xae>
        return -EINVAL;
    }

    const struct behavior_driver_api *api = (const struct behavior_driver_api *)dev->api;

    if (api->binding_pressed == NULL) {
   426c8:	6883      	ldr	r3, [r0, #8]
   426ca:	689c      	ldr	r4, [r3, #8]
        return -EINVAL;
    }

    const struct behavior_driver_api *api = (const struct behavior_driver_api *)dev->api;

    if (api->binding_released == NULL) {
   426cc:	b144      	cbz	r4, 426e0 <split_svc_run_behavior+0xae>
        return -ENOTSUP;
    }

    return api->binding_released(binding, event);
   426ce:	ab12      	add	r3, sp, #72	; 0x48
   426d0:	e913 0003 	ldmdb	r3, {r0, r1}
   426d4:	e88d 0003 	stmia.w	sp, {r0, r1}
   426d8:	a803      	add	r0, sp, #12
   426da:	e896 000c 	ldmia.w	r6, {r2, r3}
   426de:	47a0      	blx	r4
    return len;
   426e0:	4638      	mov	r0, r7
}
   426e2:	b012      	add	sp, #72	; 0x48
   426e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            err = behavior_keymap_binding_released(&binding, event);
   426e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   426ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&binding, *(uintptr_t *)&event, K_SYSCALL_BEHAVIOR_KEYMAP_BINDING_RELEASED);
	}
#endif
	compiler_barrier();
	return z_impl_behavior_keymap_binding_released(binding, event);
   426ee:	e9cd 850b 	strd	r8, r5, [sp, #44]	; 0x2c
   426f2:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
   426f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   426fa:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   426fe:	9803      	ldr	r0, [sp, #12]
   42700:	f7fe fb68 	bl	40dd4 <z_impl_device_get_binding>
    if (dev == NULL) {
   42704:	2800      	cmp	r0, #0
   42706:	d0eb      	beq.n	426e0 <split_svc_run_behavior+0xae>
    if (api->binding_released == NULL) {
   42708:	6883      	ldr	r3, [r0, #8]
   4270a:	68dc      	ldr	r4, [r3, #12]
   4270c:	e7de      	b.n	426cc <split_svc_run_behavior+0x9a>
        return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4270e:	f06f 0006 	mvn.w	r0, #6
   42712:	e7e6      	b.n	426e2 <split_svc_run_behavior+0xb0>

00042714 <security_changed>:
static void security_changed(struct bt_conn *conn, bt_security_t level, enum bt_security_err err) {
   42714:	b500      	push	{lr}
   42716:	b089      	sub	sp, #36	; 0x24
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   42718:	f003 fa31 	bl	45b7e <bt_conn_get_dst>
   4271c:	4669      	mov	r1, sp
   4271e:	f7e5 fb3d 	bl	27d9c <bt_addr_le_to_str.constprop.0.isra.0>
}
   42722:	b009      	add	sp, #36	; 0x24
   42724:	f85d fb04 	ldr.w	pc, [sp], #4

00042728 <le_param_updated>:
                             uint16_t timeout) {
   42728:	b500      	push	{lr}
   4272a:	b089      	sub	sp, #36	; 0x24
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   4272c:	f003 fa27 	bl	45b7e <bt_conn_get_dst>
   42730:	4669      	mov	r1, sp
   42732:	f7e5 fb33 	bl	27d9c <bt_addr_le_to_str.constprop.0.isra.0>
}
   42736:	b009      	add	sp, #36	; 0x24
   42738:	f85d fb04 	ldr.w	pc, [sp], #4

0004273c <raise_usb_status_changed_event>:
static void raise_usb_status_changed_event(struct k_work *_work) {
   4273c:	b508      	push	{r3, lr}
    ZMK_EVENT_RAISE(new_zmk_usb_conn_state_changed(
   4273e:	f7e5 fbbf 	bl	27ec0 <zmk_usb_get_conn_state>
   42742:	f7e5 f9dd 	bl	27b00 <new_zmk_usb_conn_state_changed>
}
   42746:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ZMK_EVENT_RAISE(new_zmk_usb_conn_state_changed(
   4274a:	f7ff bf24 	b.w	42596 <zmk_event_manager_raise>

0004274e <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   4274e:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   42750:	2364      	movs	r3, #100	; 0x64
{
   42752:	4605      	mov	r5, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   42754:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   42756:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   42758:	270a      	movs	r7, #10
	while (buflen > 0 && divisor > 0) {
   4275a:	b969      	cbnz	r1, 42778 <u8_to_dec+0x2a>
	if (buflen) {
		*buf = '\0';
	}

	return num_digits;
}
   4275c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   4275e:	429a      	cmp	r2, r3
   42760:	fbb2 f4f3 	udiv	r4, r2, r3
   42764:	d20c      	bcs.n	42780 <u8_to_dec+0x32>
   42766:	2b01      	cmp	r3, #1
   42768:	d00a      	beq.n	42780 <u8_to_dec+0x32>
   4276a:	b948      	cbnz	r0, 42780 <u8_to_dec+0x32>
		value -= digit * divisor;
   4276c:	fb03 2214 	mls	r2, r3, r4, r2
   42770:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   42772:	240a      	movs	r4, #10
   42774:	fbb3 f3f4 	udiv	r3, r3, r4
	while (buflen > 0 && divisor > 0) {
   42778:	3e01      	subs	r6, #1
   4277a:	d1f0      	bne.n	4275e <u8_to_dec+0x10>
		*buf = '\0';
   4277c:	702e      	strb	r6, [r5, #0]
	return num_digits;
   4277e:	e7ed      	b.n	4275c <u8_to_dec+0xe>
			*buf = (char)digit + '0';
   42780:	3430      	adds	r4, #48	; 0x30
   42782:	f805 4b01 	strb.w	r4, [r5], #1
			buflen--;
   42786:	fbb2 f4f3 	udiv	r4, r2, r3
   4278a:	3901      	subs	r1, #1
   4278c:	fb03 2214 	mls	r2, r3, r4, r2
			num_digits++;
   42790:	3001      	adds	r0, #1
		divisor /= 10;
   42792:	fbb3 f3f7 	udiv	r3, r3, r7
			buflen--;
   42796:	b2c9      	uxtb	r1, r1
			num_digits++;
   42798:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   4279a:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   4279c:	b2db      	uxtb	r3, r3
   4279e:	e7dc      	b.n	4275a <u8_to_dec+0xc>

000427a0 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   427a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   427a4:	b2db      	uxtb	r3, r3
   427a6:	2b09      	cmp	r3, #9
   427a8:	d802      	bhi.n	427b0 <char2hex+0x10>
		*x = c - '0';
   427aa:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   427ac:	2000      	movs	r0, #0
   427ae:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   427b0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   427b4:	2b05      	cmp	r3, #5
   427b6:	d802      	bhi.n	427be <char2hex+0x1e>
		*x = c - 'a' + 10;
   427b8:	3857      	subs	r0, #87	; 0x57
		*x = c - 'A' + 10;
   427ba:	b2c3      	uxtb	r3, r0
   427bc:	e7f5      	b.n	427aa <char2hex+0xa>
	} else if (c >= 'A' && c <= 'F') {
   427be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   427c2:	2b05      	cmp	r3, #5
   427c4:	d801      	bhi.n	427ca <char2hex+0x2a>
		*x = c - 'A' + 10;
   427c6:	3837      	subs	r0, #55	; 0x37
   427c8:	e7f7      	b.n	427ba <char2hex+0x1a>
		return -EINVAL;
   427ca:	f06f 0015 	mvn.w	r0, #21
}
   427ce:	4770      	bx	lr

000427d0 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   427d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   427d2:	4605      	mov	r5, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   427d4:	f001 0001 	and.w	r0, r1, #1
   427d8:	eb00 0651 	add.w	r6, r0, r1, lsr #1
   427dc:	429e      	cmp	r6, r3
   427de:	ea4f 0751 	mov.w	r7, r1, lsr #1
   427e2:	d903      	bls.n	427ec <hex2bin+0x1c>
		return 0;
   427e4:	2600      	movs	r6, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   427e6:	4630      	mov	r0, r6
   427e8:	b003      	add	sp, #12
   427ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   427ec:	b158      	cbz	r0, 42806 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   427ee:	7828      	ldrb	r0, [r5, #0]
   427f0:	f10d 0107 	add.w	r1, sp, #7
   427f4:	f7ff ffd4 	bl	427a0 <char2hex>
   427f8:	2800      	cmp	r0, #0
   427fa:	dbf3      	blt.n	427e4 <hex2bin+0x14>
		buf[0] = dec;
   427fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   42800:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   42804:	3501      	adds	r5, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   42806:	3501      	adds	r5, #1
   42808:	4417      	add	r7, r2
   4280a:	42ba      	cmp	r2, r7
   4280c:	d0eb      	beq.n	427e6 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   4280e:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   42812:	f10d 0107 	add.w	r1, sp, #7
   42816:	f7ff ffc3 	bl	427a0 <char2hex>
   4281a:	2800      	cmp	r0, #0
   4281c:	dbe2      	blt.n	427e4 <hex2bin+0x14>
		buf[i] = dec << 4;
   4281e:	f89d 4007 	ldrb.w	r4, [sp, #7]
   42822:	0124      	lsls	r4, r4, #4
   42824:	b2e4      	uxtb	r4, r4
   42826:	7014      	strb	r4, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   42828:	f815 0b02 	ldrb.w	r0, [r5], #2
   4282c:	f7ff ffb8 	bl	427a0 <char2hex>
   42830:	2800      	cmp	r0, #0
   42832:	dbd7      	blt.n	427e4 <hex2bin+0x14>
		buf[i] += dec;
   42834:	f89d 3007 	ldrb.w	r3, [sp, #7]
   42838:	441c      	add	r4, r3
   4283a:	f802 4b01 	strb.w	r4, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   4283e:	e7e4      	b.n	4280a <hex2bin+0x3a>

00042840 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   42840:	4603      	mov	r3, r0
   42842:	b140      	cbz	r0, 42856 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   42844:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   42846:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   4284a:	2a02      	cmp	r2, #2
   4284c:	d006      	beq.n	4285c <sys_notify_validate+0x1c>
   4284e:	2a03      	cmp	r2, #3
   42850:	d004      	beq.n	4285c <sys_notify_validate+0x1c>
   42852:	2a01      	cmp	r2, #1
   42854:	d005      	beq.n	42862 <sys_notify_validate+0x22>
   42856:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   4285a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   4285c:	681a      	ldr	r2, [r3, #0]
   4285e:	2a00      	cmp	r2, #0
   42860:	d0f9      	beq.n	42856 <sys_notify_validate+0x16>
		notify->result = 0;
   42862:	2000      	movs	r0, #0
   42864:	6098      	str	r0, [r3, #8]
   42866:	4770      	bx	lr

00042868 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   42868:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   4286a:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   4286e:	2a02      	cmp	r2, #2
{
   42870:	b510      	push	{r4, lr}
   42872:	4603      	mov	r3, r0
	notify->result = res;
   42874:	6081      	str	r1, [r0, #8]
	switch (method) {
   42876:	f04f 0400 	mov.w	r4, #0
   4287a:	d007      	beq.n	4288c <sys_notify_finalize+0x24>
   4287c:	2a03      	cmp	r2, #3
   4287e:	d002      	beq.n	42886 <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   42880:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   42882:	2000      	movs	r0, #0
   42884:	e001      	b.n	4288a <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   42886:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   42888:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   4288a:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   4288c:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   4288e:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   42890:	2800      	cmp	r0, #0
   42892:	d0f6      	beq.n	42882 <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   42894:	f7ff fe30 	bl	424f8 <z_impl_k_poll_signal_raise>
   42898:	e7f3      	b.n	42882 <sys_notify_finalize+0x1a>

0004289a <arch_printk_char_out>:
}
   4289a:	2000      	movs	r0, #0
   4289c:	4770      	bx	lr

0004289e <str_out>:
{
   4289e:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   428a0:	688a      	ldr	r2, [r1, #8]
   428a2:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   428a4:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   428a6:	b114      	cbz	r4, 428ae <str_out+0x10>
   428a8:	684b      	ldr	r3, [r1, #4]
   428aa:	4293      	cmp	r3, r2
   428ac:	dc01      	bgt.n	428b2 <str_out+0x14>
		ctx->count++;
   428ae:	608d      	str	r5, [r1, #8]
}
   428b0:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   428b2:	3b01      	subs	r3, #1
   428b4:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   428b6:	bf08      	it	eq
   428b8:	2200      	moveq	r2, #0
   428ba:	608d      	str	r5, [r1, #8]
   428bc:	bf0c      	ite	eq
   428be:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   428c0:	54a0      	strbne	r0, [r4, r2]
   428c2:	e7f5      	b.n	428b0 <str_out+0x12>

000428c4 <printk>:
{
   428c4:	b40f      	push	{r0, r1, r2, r3}
   428c6:	b507      	push	{r0, r1, r2, lr}
   428c8:	a904      	add	r1, sp, #16
   428ca:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   428ce:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   428d0:	f7e5 fb2e 	bl	27f30 <vprintk>
}
   428d4:	b003      	add	sp, #12
   428d6:	f85d eb04 	ldr.w	lr, [sp], #4
   428da:	b004      	add	sp, #16
   428dc:	4770      	bx	lr

000428de <snprintk>:
{
   428de:	b40c      	push	{r2, r3}
   428e0:	b507      	push	{r0, r1, r2, lr}
   428e2:	ab04      	add	r3, sp, #16
   428e4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   428e8:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   428ea:	f7e5 fb2f 	bl	27f4c <vsnprintk>
}
   428ee:	b003      	add	sp, #12
   428f0:	f85d eb04 	ldr.w	lr, [sp], #4
   428f4:	b002      	add	sp, #8
   428f6:	4770      	bx	lr

000428f8 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   428f8:	b510      	push	{r4, lr}
	return list->head;
   428fa:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   428fc:	2200      	movs	r2, #0
   428fe:	b90b      	cbnz	r3, 42904 <sys_slist_find_and_remove+0xc>
   42900:	4618      	mov	r0, r3
   42902:	e00b      	b.n	4291c <sys_slist_find_and_remove+0x24>
   42904:	428b      	cmp	r3, r1
   42906:	d10f      	bne.n	42928 <sys_slist_find_and_remove+0x30>
	return node->next;
   42908:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   4290a:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   4290c:	b93a      	cbnz	r2, 4291e <sys_slist_find_and_remove+0x26>
   4290e:	42a1      	cmp	r1, r4
	list->head = node;
   42910:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   42912:	d100      	bne.n	42916 <sys_slist_find_and_remove+0x1e>
	list->tail = node;
   42914:	6043      	str	r3, [r0, #4]
	parent->next = child;
   42916:	2300      	movs	r3, #0
   42918:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4291a:	2001      	movs	r0, #1
   4291c:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   4291e:	42a1      	cmp	r1, r4
	parent->next = child;
   42920:	6013      	str	r3, [r2, #0]
	list->tail = node;
   42922:	bf08      	it	eq
   42924:	6042      	streq	r2, [r0, #4]
}
   42926:	e7f6      	b.n	42916 <sys_slist_find_and_remove+0x1e>
	return node->next;
   42928:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4292a:	681b      	ldr	r3, [r3, #0]
   4292c:	e7e7      	b.n	428fe <sys_slist_find_and_remove+0x6>

0004292e <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   4292e:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   42930:	f013 0307 	ands.w	r3, r3, #7
   42934:	d105      	bne.n	42942 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   42936:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   42938:	2b00      	cmp	r3, #0
   4293a:	bf0c      	ite	eq
   4293c:	2000      	moveq	r0, #0
   4293e:	2003      	movne	r0, #3
   42940:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   42942:	2b02      	cmp	r3, #2
   42944:	d105      	bne.n	42952 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   42946:	8b40      	ldrh	r0, [r0, #26]
   42948:	fab0 f080 	clz	r0, r0
   4294c:	0940      	lsrs	r0, r0, #5
   4294e:	0080      	lsls	r0, r0, #2
   42950:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   42952:	2b01      	cmp	r3, #1
   42954:	d105      	bne.n	42962 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   42956:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   42958:	2b00      	cmp	r3, #0
   4295a:	bf0c      	ite	eq
   4295c:	2000      	moveq	r0, #0
   4295e:	2005      	movne	r0, #5
   42960:	4770      	bx	lr
	int evt = EVT_NOP;
   42962:	2000      	movs	r0, #0
}
   42964:	4770      	bx	lr

00042966 <validate_args>:
{
   42966:	b510      	push	{r4, lr}
   42968:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   4296a:	b100      	cbz	r0, 4296e <validate_args+0x8>
   4296c:	b911      	cbnz	r1, 42974 <validate_args+0xe>
		return -EINVAL;
   4296e:	f06f 0015 	mvn.w	r0, #21
}
   42972:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   42974:	1d08      	adds	r0, r1, #4
   42976:	f7ff ff63 	bl	42840 <sys_notify_validate>
	if ((rv == 0)
   4297a:	2800      	cmp	r0, #0
   4297c:	d1f9      	bne.n	42972 <validate_args+0xc>
	    && ((cli->notify.flags
   4297e:	68a3      	ldr	r3, [r4, #8]
   42980:	2b03      	cmp	r3, #3
   42982:	d9f6      	bls.n	42972 <validate_args+0xc>
   42984:	e7f3      	b.n	4296e <validate_args+0x8>

00042986 <notify_one>:
{
   42986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4298a:	460d      	mov	r5, r1
   4298c:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   4298e:	4619      	mov	r1, r3
   42990:	1d28      	adds	r0, r5, #4
{
   42992:	4690      	mov	r8, r2
   42994:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   42996:	f7ff ff67 	bl	42868 <sys_notify_finalize>
	if (cb) {
   4299a:	4604      	mov	r4, r0
   4299c:	b138      	cbz	r0, 429ae <notify_one+0x28>
		cb(mgr, cli, state, res);
   4299e:	4633      	mov	r3, r6
   429a0:	4642      	mov	r2, r8
   429a2:	4629      	mov	r1, r5
   429a4:	4638      	mov	r0, r7
   429a6:	46a4      	mov	ip, r4
}
   429a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   429ac:	4760      	bx	ip
}
   429ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000429b2 <transition_complete>:
{
   429b2:	b410      	push	{r4}
	__asm__ volatile(
   429b4:	f04f 0420 	mov.w	r4, #32
   429b8:	f3ef 8211 	mrs	r2, BASEPRI
   429bc:	f384 8812 	msr	BASEPRI_MAX, r4
   429c0:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   429c4:	6141      	str	r1, [r0, #20]
}
   429c6:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   429c8:	2101      	movs	r1, #1
   429ca:	f7e5 bad3 	b.w	27f74 <process_event>

000429ce <onoff_manager_init>:
{
   429ce:	b538      	push	{r3, r4, r5, lr}
   429d0:	460c      	mov	r4, r1
	if ((mgr == NULL)
   429d2:	4605      	mov	r5, r0
   429d4:	b158      	cbz	r0, 429ee <onoff_manager_init+0x20>
	    || (transitions == NULL)
   429d6:	b151      	cbz	r1, 429ee <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   429d8:	680b      	ldr	r3, [r1, #0]
   429da:	b143      	cbz	r3, 429ee <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   429dc:	684b      	ldr	r3, [r1, #4]
   429de:	b133      	cbz	r3, 429ee <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   429e0:	221c      	movs	r2, #28
   429e2:	2100      	movs	r1, #0
   429e4:	f002 f878 	bl	44ad8 <memset>
   429e8:	612c      	str	r4, [r5, #16]
	return 0;
   429ea:	2000      	movs	r0, #0
}
   429ec:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   429ee:	f06f 0015 	mvn.w	r0, #21
   429f2:	e7fb      	b.n	429ec <onoff_manager_init+0x1e>

000429f4 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   429f4:	b570      	push	{r4, r5, r6, lr}
   429f6:	4605      	mov	r5, r0
   429f8:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   429fa:	f7ff ffb4 	bl	42966 <validate_args>

	if (rv < 0) {
   429fe:	1e04      	subs	r4, r0, #0
   42a00:	db15      	blt.n	42a2e <onoff_request+0x3a>
   42a02:	f04f 0320 	mov.w	r3, #32
   42a06:	f3ef 8211 	mrs	r2, BASEPRI
   42a0a:	f383 8812 	msr	BASEPRI_MAX, r3
   42a0e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   42a12:	8b6b      	ldrh	r3, [r5, #26]
   42a14:	8b2c      	ldrh	r4, [r5, #24]
   42a16:	f64f 71ff 	movw	r1, #65535	; 0xffff
   42a1a:	428b      	cmp	r3, r1
   42a1c:	f004 0407 	and.w	r4, r4, #7
   42a20:	d107      	bne.n	42a32 <onoff_request+0x3e>
	__asm__ volatile(
   42a22:	f382 8811 	msr	BASEPRI, r2
   42a26:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   42a2a:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   42a2e:	4620      	mov	r0, r4
   42a30:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   42a32:	2c02      	cmp	r4, #2
   42a34:	d10c      	bne.n	42a50 <onoff_request+0x5c>
		mgr->refs += 1U;
   42a36:	3301      	adds	r3, #1
   42a38:	836b      	strh	r3, [r5, #26]
   42a3a:	f382 8811 	msr	BASEPRI, r2
   42a3e:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   42a42:	2300      	movs	r3, #0
   42a44:	4622      	mov	r2, r4
   42a46:	4631      	mov	r1, r6
   42a48:	4628      	mov	r0, r5
   42a4a:	f7ff ff9c 	bl	42986 <notify_one>
   42a4e:	e7ee      	b.n	42a2e <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   42a50:	2c06      	cmp	r4, #6
   42a52:	d814      	bhi.n	42a7e <onoff_request+0x8a>
   42a54:	e8df f004 	tbb	[pc, r4]
   42a58:	13131304 	.word	0x13131304
   42a5c:	1a04      	.short	0x1a04
   42a5e:	04          	.byte	0x04
   42a5f:	00          	.byte	0x00
	parent->next = child;
   42a60:	2300      	movs	r3, #0
   42a62:	6033      	str	r3, [r6, #0]
	return list->tail;
   42a64:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   42a66:	b93b      	cbnz	r3, 42a78 <onoff_request+0x84>
	list->head = node;
   42a68:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   42a6c:	b9ac      	cbnz	r4, 42a9a <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   42a6e:	2102      	movs	r1, #2
   42a70:	4628      	mov	r0, r5
   42a72:	f7e5 fa7f 	bl	27f74 <process_event>
   42a76:	e7da      	b.n	42a2e <onoff_request+0x3a>
	parent->next = child;
   42a78:	601e      	str	r6, [r3, #0]
	list->tail = node;
   42a7a:	606e      	str	r6, [r5, #4]
}
   42a7c:	e7f6      	b.n	42a6c <onoff_request+0x78>
   42a7e:	f382 8811 	msr	BASEPRI, r2
   42a82:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   42a86:	f06f 0404 	mvn.w	r4, #4
   42a8a:	e7d0      	b.n	42a2e <onoff_request+0x3a>
   42a8c:	f382 8811 	msr	BASEPRI, r2
   42a90:	f3bf 8f6f 	isb	sy
   42a94:	f06f 0485 	mvn.w	r4, #133	; 0x85
   42a98:	e7c9      	b.n	42a2e <onoff_request+0x3a>
   42a9a:	f382 8811 	msr	BASEPRI, r2
   42a9e:	f3bf 8f6f 	isb	sy
		if (notify) {
   42aa2:	e7c4      	b.n	42a2e <onoff_request+0x3a>

00042aa4 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   42aa4:	b510      	push	{r4, lr}
	__asm__ volatile(
   42aa6:	f04f 0320 	mov.w	r3, #32
   42aaa:	f3ef 8211 	mrs	r2, BASEPRI
   42aae:	f383 8812 	msr	BASEPRI_MAX, r3
   42ab2:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   42ab6:	8b04      	ldrh	r4, [r0, #24]
   42ab8:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   42abc:	2c02      	cmp	r4, #2
   42abe:	d00a      	beq.n	42ad6 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   42ac0:	2c01      	cmp	r4, #1
   42ac2:	bf0c      	ite	eq
   42ac4:	f06f 0004 	mvneq.w	r0, #4
   42ac8:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   42acc:	f382 8811 	msr	BASEPRI, r2
   42ad0:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   42ad4:	e008      	b.n	42ae8 <onoff_release+0x44>
	mgr->refs -= 1U;
   42ad6:	8b43      	ldrh	r3, [r0, #26]
   42ad8:	3b01      	subs	r3, #1
   42ada:	b29b      	uxth	r3, r3
   42adc:	8343      	strh	r3, [r0, #26]
	if (stop) {
   42ade:	b923      	cbnz	r3, 42aea <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   42ae0:	4621      	mov	r1, r4
   42ae2:	f7e5 fa47 	bl	27f74 <process_event>
	int rv = state;
   42ae6:	4620      	mov	r0, r4
}
   42ae8:	bd10      	pop	{r4, pc}
	int rv = state;
   42aea:	4620      	mov	r0, r4
   42aec:	e7ee      	b.n	42acc <onoff_release+0x28>

00042aee <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
   42aee:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
   42af0:	b1b0      	cbz	r0, 42b20 <onoff_cancel+0x32>
   42af2:	b1a9      	cbz	r1, 42b20 <onoff_cancel+0x32>
	__asm__ volatile(
   42af4:	f04f 0220 	mov.w	r2, #32
   42af8:	f3ef 8511 	mrs	r5, BASEPRI
   42afc:	f382 8812 	msr	BASEPRI_MAX, r2
   42b00:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   42b04:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
   42b06:	f7ff fef7 	bl	428f8 <sys_slist_find_and_remove>
   42b0a:	b130      	cbz	r0, 42b1a <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
   42b0c:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
   42b10:	f385 8811 	msr	BASEPRI, r5
   42b14:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
   42b18:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
   42b1a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   42b1e:	e7f7      	b.n	42b10 <onoff_cancel+0x22>
		return -EINVAL;
   42b20:	f06f 0015 	mvn.w	r0, #21
   42b24:	e7f8      	b.n	42b18 <onoff_cancel+0x2a>

00042b26 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   42b26:	4604      	mov	r4, r0
   42b28:	b508      	push	{r3, lr}
   42b2a:	4608      	mov	r0, r1
   42b2c:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   42b2e:	461a      	mov	r2, r3
   42b30:	47a0      	blx	r4
	return z_impl_z_current_get();
   42b32:	f7ff fa21 	bl	41f78 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   42b36:	f7e7 fd09 	bl	2a54c <z_impl_k_thread_abort>

00042b3a <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   42b3a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   42b3e:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   42b40:	0840      	lsrs	r0, r0, #1
   42b42:	4770      	bx	lr

00042b44 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   42b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   42b46:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   42b48:	f7ff fff7 	bl	42b3a <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   42b4c:	fab0 f080 	clz	r0, r0
   42b50:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   42b54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   42b58:	00ca      	lsls	r2, r1, #3
   42b5a:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   42b5e:	1d17      	adds	r7, r2, #4
{
   42b60:	460c      	mov	r4, r1
   42b62:	3206      	adds	r2, #6
   42b64:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   42b66:	b956      	cbnz	r6, 42b7e <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   42b68:	2101      	movs	r1, #1
   42b6a:	fa01 f000 	lsl.w	r0, r1, r0
   42b6e:	68d9      	ldr	r1, [r3, #12]
   42b70:	4301      	orrs	r1, r0
   42b72:	60d9      	str	r1, [r3, #12]
		b->next = c;
   42b74:	f8cc 4010 	str.w	r4, [ip, #16]
   42b78:	53dd      	strh	r5, [r3, r7]
   42b7a:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   42b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   42b7e:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   42b80:	3104      	adds	r1, #4
   42b82:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   42b84:	53d8      	strh	r0, [r3, r7]
   42b86:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   42b8a:	529e      	strh	r6, [r3, r2]
   42b8c:	80c5      	strh	r5, [r0, #6]
   42b8e:	525d      	strh	r5, [r3, r1]
   42b90:	e7f4      	b.n	42b7c <free_list_add+0x38>

00042b92 <free_list_remove_bidx>:
{
   42b92:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   42b94:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   42b98:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   42b9a:	4299      	cmp	r1, r3
   42b9c:	f102 0104 	add.w	r1, r2, #4
   42ba0:	d10a      	bne.n	42bb8 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   42ba2:	2301      	movs	r3, #1
   42ba4:	fa03 f202 	lsl.w	r2, r3, r2
   42ba8:	68c3      	ldr	r3, [r0, #12]
   42baa:	ea23 0302 	bic.w	r3, r3, r2
   42bae:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   42bb0:	2300      	movs	r3, #0
   42bb2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   42bb6:	bd10      	pop	{r4, pc}
   42bb8:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   42bba:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   42bbe:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   42bc2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   42bc6:	80cb      	strh	r3, [r1, #6]
   42bc8:	8082      	strh	r2, [r0, #4]
}
   42bca:	e7f4      	b.n	42bb6 <free_list_remove_bidx+0x24>

00042bcc <free_list_remove>:
{
   42bcc:	b508      	push	{r3, lr}
   42bce:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   42bd0:	f7ff ffb3 	bl	42b3a <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   42bd4:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   42bd8:	f1c2 021f 	rsb	r2, r2, #31
   42bdc:	4618      	mov	r0, r3
}
   42bde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   42be2:	f7ff bfd6 	b.w	42b92 <free_list_remove_bidx>

00042be6 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   42be6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   42bea:	fab1 f581 	clz	r5, r1
   42bee:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   42bf2:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   42bf6:	4603      	mov	r3, r0
	if (b->next) {
   42bf8:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   42bfc:	460e      	mov	r6, r1
	if (b->next) {
   42bfe:	b1c2      	cbz	r2, 42c32 <alloc_chunk+0x4c>
   42c00:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   42c02:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   42c06:	4618      	mov	r0, r3
   42c08:	4621      	mov	r1, r4
   42c0a:	f7ff ff96 	bl	42b3a <chunk_size>
   42c0e:	42b0      	cmp	r0, r6
   42c10:	d306      	bcc.n	42c20 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   42c12:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   42c14:	4618      	mov	r0, r3
   42c16:	f7ff ffbc 	bl	42b92 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   42c1a:	4620      	mov	r0, r4
   42c1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   42c20:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   42c24:	3f01      	subs	r7, #1
   42c26:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   42c28:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   42c2c:	d001      	beq.n	42c32 <alloc_chunk+0x4c>
   42c2e:	4282      	cmp	r2, r0
   42c30:	d1e7      	bne.n	42c02 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   42c32:	f1c5 0220 	rsb	r2, r5, #32
   42c36:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   42c3a:	4094      	lsls	r4, r2
   42c3c:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   42c3e:	4014      	ands	r4, r2
   42c40:	d0eb      	beq.n	42c1a <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   42c42:	fa94 f2a4 	rbit	r2, r4
   42c46:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   42c4a:	1d11      	adds	r1, r2, #4
   42c4c:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   42c50:	4621      	mov	r1, r4
   42c52:	e7df      	b.n	42c14 <alloc_chunk+0x2e>

00042c54 <merge_chunks>:
{
   42c54:	b538      	push	{r3, r4, r5, lr}
   42c56:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   42c58:	f7ff ff6f 	bl	42b3a <chunk_size>
{
   42c5c:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   42c5e:	4604      	mov	r4, r0
   42c60:	4611      	mov	r1, r2
   42c62:	4618      	mov	r0, r3
   42c64:	f7ff ff69 	bl	42b3a <chunk_size>
		((uint16_t *)cmem)[f] = val;
   42c68:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   42c6c:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   42c6e:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   42c70:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   42c72:	4618      	mov	r0, r3
   42c74:	f7ff ff61 	bl	42b3a <chunk_size>
	void *cmem = &buf[c];
   42c78:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   42c7a:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   42c7e:	bd38      	pop	{r3, r4, r5, pc}

00042c80 <split_chunks>:
{
   42c80:	b538      	push	{r3, r4, r5, lr}
   42c82:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   42c84:	f7ff ff59 	bl	42b3a <chunk_size>
{
   42c88:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   42c8a:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   42c8c:	1a51      	subs	r1, r2, r1
   42c8e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   42c92:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   42c94:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   42c96:	8060      	strh	r0, [r4, #2]
   42c98:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   42c9c:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   42c9e:	8044      	strh	r4, [r0, #2]
   42ca0:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   42ca4:	4618      	mov	r0, r3
   42ca6:	4611      	mov	r1, r2
   42ca8:	f7ff ff47 	bl	42b3a <chunk_size>
	void *cmem = &buf[c];
   42cac:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   42cae:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   42cb2:	bd38      	pop	{r3, r4, r5, pc}

00042cb4 <free_chunk>:
{
   42cb4:	b538      	push	{r3, r4, r5, lr}
   42cb6:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   42cb8:	f7ff ff3f 	bl	42b3a <chunk_size>
   42cbc:	460c      	mov	r4, r1
   42cbe:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   42cc0:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   42cc4:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   42cc6:	07da      	lsls	r2, r3, #31
   42cc8:	d40a      	bmi.n	42ce0 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   42cca:	4628      	mov	r0, r5
   42ccc:	f7ff ff7e 	bl	42bcc <free_list_remove>
	return c + chunk_size(h, c);
   42cd0:	4621      	mov	r1, r4
   42cd2:	4628      	mov	r0, r5
   42cd4:	f7ff ff31 	bl	42b3a <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   42cd8:	1822      	adds	r2, r4, r0
   42cda:	4628      	mov	r0, r5
   42cdc:	f7ff ffba 	bl	42c54 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   42ce0:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   42ce4:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   42ce6:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   42cea:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   42cec:	07db      	lsls	r3, r3, #31
   42cee:	d40c      	bmi.n	42d0a <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   42cf0:	4628      	mov	r0, r5
   42cf2:	f7ff ff6b 	bl	42bcc <free_list_remove>
		return ((uint16_t *)cmem)[f];
   42cf6:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   42cfa:	4622      	mov	r2, r4
   42cfc:	1a61      	subs	r1, r4, r1
   42cfe:	4628      	mov	r0, r5
   42d00:	f7ff ffa8 	bl	42c54 <merge_chunks>
   42d04:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   42d08:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   42d0a:	4621      	mov	r1, r4
   42d0c:	4628      	mov	r0, r5
}
   42d0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   42d12:	f7ff bf17 	b.w	42b44 <free_list_add>

00042d16 <sys_heap_free>:
	if (mem == NULL) {
   42d16:	b161      	cbz	r1, 42d32 <sys_heap_free+0x1c>
   42d18:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   42d1a:	3904      	subs	r1, #4
   42d1c:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   42d1e:	f021 0307 	bic.w	r3, r1, #7
   42d22:	4403      	add	r3, r0
	free_chunk(h, c);
   42d24:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   42d26:	885a      	ldrh	r2, [r3, #2]
   42d28:	f022 0201 	bic.w	r2, r2, #1
   42d2c:	805a      	strh	r2, [r3, #2]
   42d2e:	f7ff bfc1 	b.w	42cb4 <free_chunk>
}
   42d32:	4770      	bx	lr

00042d34 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   42d34:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   42d36:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   42d38:	b909      	cbnz	r1, 42d3e <sys_heap_alloc+0xa>
		return NULL;
   42d3a:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   42d3c:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   42d3e:	68ab      	ldr	r3, [r5, #8]
   42d40:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   42d44:	d9f9      	bls.n	42d3a <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   42d46:	310b      	adds	r1, #11
   42d48:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   42d4a:	4621      	mov	r1, r4
   42d4c:	4628      	mov	r0, r5
   42d4e:	f7ff ff4a 	bl	42be6 <alloc_chunk>
	if (c == 0U) {
   42d52:	4606      	mov	r6, r0
   42d54:	2800      	cmp	r0, #0
   42d56:	d0f0      	beq.n	42d3a <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   42d58:	4601      	mov	r1, r0
   42d5a:	4628      	mov	r0, r5
   42d5c:	f7ff feed 	bl	42b3a <chunk_size>
   42d60:	42a0      	cmp	r0, r4
   42d62:	d907      	bls.n	42d74 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   42d64:	1932      	adds	r2, r6, r4
   42d66:	4628      	mov	r0, r5
   42d68:	f7ff ff8a 	bl	42c80 <split_chunks>
		free_list_add(h, c + chunk_sz);
   42d6c:	4611      	mov	r1, r2
   42d6e:	4628      	mov	r0, r5
   42d70:	f7ff fee8 	bl	42b44 <free_list_add>
	void *cmem = &buf[c];
   42d74:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   42d78:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   42d7a:	8853      	ldrh	r3, [r2, #2]
   42d7c:	f043 0301 	orr.w	r3, r3, #1
   42d80:	8053      	strh	r3, [r2, #2]
   42d82:	3004      	adds	r0, #4
	return mem;
   42d84:	e7da      	b.n	42d3c <sys_heap_alloc+0x8>

00042d86 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   42d86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   42d8a:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   42d8e:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
   42d92:	6806      	ldr	r6, [r0, #0]
{
   42d94:	460f      	mov	r7, r1
   42d96:	4614      	mov	r4, r2
	if (align != rew) {
   42d98:	d00c      	beq.n	42db4 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   42d9a:	424b      	negs	r3, r1
   42d9c:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   42d9e:	2b04      	cmp	r3, #4
   42da0:	461a      	mov	r2, r3
   42da2:	464f      	mov	r7, r9
   42da4:	bf28      	it	cs
   42da6:	2204      	movcs	r2, #4
	rew = align & -align;
   42da8:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   42daa:	b964      	cbnz	r4, 42dc6 <sys_heap_aligned_alloc+0x40>
		return NULL;
   42dac:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   42dae:	4628      	mov	r0, r5
   42db0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   42db4:	2904      	cmp	r1, #4
   42db6:	d804      	bhi.n	42dc2 <sys_heap_aligned_alloc+0x3c>
}
   42db8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   42dbc:	4611      	mov	r1, r2
   42dbe:	f7ff bfb9 	b.w	42d34 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   42dc2:	2204      	movs	r2, #4
   42dc4:	e7f1      	b.n	42daa <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   42dc6:	68b3      	ldr	r3, [r6, #8]
   42dc8:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   42dcc:	d9ee      	bls.n	42dac <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   42dce:	f104 010b 	add.w	r1, r4, #11
   42dd2:	4439      	add	r1, r7
   42dd4:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   42dd6:	08c9      	lsrs	r1, r1, #3
   42dd8:	4630      	mov	r0, r6
   42dda:	f7ff ff04 	bl	42be6 <alloc_chunk>
	if (c0 == 0) {
   42dde:	4680      	mov	r8, r0
   42de0:	2800      	cmp	r0, #0
   42de2:	d0e3      	beq.n	42dac <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   42de4:	f109 0504 	add.w	r5, r9, #4
   42de8:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   42dec:	1e7b      	subs	r3, r7, #1
   42dee:	4435      	add	r5, r6
   42df0:	441d      	add	r5, r3
   42df2:	427f      	negs	r7, r7
   42df4:	403d      	ands	r5, r7
   42df6:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   42dfa:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   42dfc:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   42dfe:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   42e00:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   42e02:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   42e06:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   42e08:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   42e0c:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   42e10:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   42e14:	d208      	bcs.n	42e28 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   42e16:	4601      	mov	r1, r0
   42e18:	463a      	mov	r2, r7
   42e1a:	4630      	mov	r0, r6
   42e1c:	f7ff ff30 	bl	42c80 <split_chunks>
		free_list_add(h, c0);
   42e20:	4641      	mov	r1, r8
   42e22:	4630      	mov	r0, r6
   42e24:	f7ff fe8e 	bl	42b44 <free_list_add>
	return c + chunk_size(h, c);
   42e28:	4639      	mov	r1, r7
   42e2a:	4630      	mov	r0, r6
   42e2c:	f7ff fe85 	bl	42b3a <chunk_size>
   42e30:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   42e32:	4284      	cmp	r4, r0
   42e34:	d207      	bcs.n	42e46 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   42e36:	4630      	mov	r0, r6
   42e38:	4622      	mov	r2, r4
   42e3a:	f7ff ff21 	bl	42c80 <split_chunks>
		free_list_add(h, c_end);
   42e3e:	4621      	mov	r1, r4
   42e40:	4630      	mov	r0, r6
   42e42:	f7ff fe7f 	bl	42b44 <free_list_add>
	void *cmem = &buf[c];
   42e46:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   42e4a:	8873      	ldrh	r3, [r6, #2]
   42e4c:	f043 0301 	orr.w	r3, r3, #1
   42e50:	8073      	strh	r3, [r6, #2]
   42e52:	e7ac      	b.n	42dae <sys_heap_aligned_alloc+0x28>

00042e54 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   42e54:	3a04      	subs	r2, #4
{
   42e56:	b4f0      	push	{r4, r5, r6, r7}
   42e58:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   42e5a:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   42e5c:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   42e5e:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   42e62:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   42e66:	1a0e      	subs	r6, r1, r0
   42e68:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   42e6a:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
   42e6c:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   42e70:	4604      	mov	r4, r0
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   42e72:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
   42e76:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
   42e78:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   42e7a:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
   42e7c:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   42e80:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   42e82:	f1c2 0220 	rsb	r2, r2, #32
   42e86:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   42e88:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   42e8c:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   42e90:	4294      	cmp	r4, r2
   42e92:	d1fb      	bne.n	42e8c <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   42e94:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   42e96:	f042 0201 	orr.w	r2, r2, #1
   42e9a:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   42e9c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   42ea0:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   42ea2:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   42ea4:	8007      	strh	r7, [r0, #0]
   42ea6:	8065      	strh	r5, [r4, #2]
   42ea8:	1984      	adds	r4, r0, r6
   42eaa:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   42eae:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   42eb2:	8067      	strh	r7, [r4, #2]
   42eb4:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   42eb6:	885a      	ldrh	r2, [r3, #2]
   42eb8:	f042 0201 	orr.w	r2, r2, #1
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   42ebc:	bcf0      	pop	{r4, r5, r6, r7}
   42ebe:	805a      	strh	r2, [r3, #2]
	free_list_add(h, chunk0_size);
   42ec0:	f7ff be40 	b.w	42b44 <free_list_add>

00042ec4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_UF2, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_UF2_FAMILY_ID, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   42ec4:	4770      	bx	lr

00042ec6 <read_str>:
{
   42ec6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   42eca:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   42ece:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   42ed0:	4640      	mov	r0, r8
{
   42ed2:	461f      	mov	r7, r3
   42ed4:	460c      	mov	r4, r1
   42ed6:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   42ed8:	f001 fdbc 	bl	44a54 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   42edc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   42ee0:	9300      	str	r3, [sp, #0]
   42ee2:	b280      	uxth	r0, r0
   42ee4:	e9cd 8001 	strd	r8, r0, [sp, #4]
   42ee8:	463b      	mov	r3, r7
   42eea:	4632      	mov	r2, r6
   42eec:	4621      	mov	r1, r4
   42eee:	4628      	mov	r0, r5
   42ef0:	f003 ff39 	bl	46d66 <bt_gatt_attr_read>
}
   42ef4:	b004      	add	sp, #16
   42ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00042efa <blvl_ccc_cfg_changed>:
}
   42efa:	4770      	bx	lr

00042efc <bas_init>:
}
   42efc:	2000      	movs	r0, #0
   42efe:	4770      	bx	lr

00042f00 <nvs_flash_rd>:
{
   42f00:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   42f02:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   42f04:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   42f06:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   42f08:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   42f0a:	fa16 f181 	uxtah	r1, r6, r1
   42f0e:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   42f12:	6884      	ldr	r4, [r0, #8]
   42f14:	6824      	ldr	r4, [r4, #0]
   42f16:	46a4      	mov	ip, r4
}
   42f18:	bc70      	pop	{r4, r5, r6}
   42f1a:	4760      	bx	ip

00042f1c <nvs_flash_block_cmp>:
{
   42f1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   42f20:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   42f22:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   42f24:	681d      	ldr	r5, [r3, #0]
   42f26:	426d      	negs	r5, r5
{
   42f28:	b089      	sub	sp, #36	; 0x24
   42f2a:	4681      	mov	r9, r0
   42f2c:	460e      	mov	r6, r1
   42f2e:	4617      	mov	r7, r2
	block_size =
   42f30:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   42f34:	b91c      	cbnz	r4, 42f3e <nvs_flash_block_cmp+0x22>
	return 0;
   42f36:	4620      	mov	r0, r4
}
   42f38:	b009      	add	sp, #36	; 0x24
   42f3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   42f3e:	42ac      	cmp	r4, r5
   42f40:	46a0      	mov	r8, r4
   42f42:	bf28      	it	cs
   42f44:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   42f46:	4643      	mov	r3, r8
   42f48:	466a      	mov	r2, sp
   42f4a:	4631      	mov	r1, r6
   42f4c:	4648      	mov	r0, r9
   42f4e:	f7ff ffd7 	bl	42f00 <nvs_flash_rd>
		if (rc) {
   42f52:	2800      	cmp	r0, #0
   42f54:	d1f0      	bne.n	42f38 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   42f56:	4642      	mov	r2, r8
   42f58:	4669      	mov	r1, sp
   42f5a:	4638      	mov	r0, r7
   42f5c:	f001 fda1 	bl	44aa2 <memcmp>
		if (rc) {
   42f60:	b920      	cbnz	r0, 42f6c <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   42f62:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   42f66:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   42f68:	4447      	add	r7, r8
   42f6a:	e7e3      	b.n	42f34 <nvs_flash_block_cmp+0x18>
			return 1;
   42f6c:	2001      	movs	r0, #1
   42f6e:	e7e3      	b.n	42f38 <nvs_flash_block_cmp+0x1c>

00042f70 <nvs_flash_cmp_const>:
{
   42f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   42f74:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   42f76:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   42f78:	681d      	ldr	r5, [r3, #0]
   42f7a:	426d      	negs	r5, r5
{
   42f7c:	b088      	sub	sp, #32
	block_size =
   42f7e:	f005 0520 	and.w	r5, r5, #32
{
   42f82:	4607      	mov	r7, r0
   42f84:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   42f86:	4668      	mov	r0, sp
{
   42f88:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   42f8a:	462a      	mov	r2, r5
   42f8c:	f001 fda4 	bl	44ad8 <memset>
	while (len) {
   42f90:	b91c      	cbnz	r4, 42f9a <nvs_flash_cmp_const+0x2a>
	return 0;
   42f92:	4620      	mov	r0, r4
}
   42f94:	b008      	add	sp, #32
   42f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   42f9a:	42ac      	cmp	r4, r5
   42f9c:	46a0      	mov	r8, r4
   42f9e:	bf28      	it	cs
   42fa0:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   42fa2:	4643      	mov	r3, r8
   42fa4:	466a      	mov	r2, sp
   42fa6:	4631      	mov	r1, r6
   42fa8:	4638      	mov	r0, r7
   42faa:	f7ff ffb7 	bl	42f1c <nvs_flash_block_cmp>
		if (rc) {
   42fae:	2800      	cmp	r0, #0
   42fb0:	d1f0      	bne.n	42f94 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   42fb2:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   42fb6:	4446      	add	r6, r8
   42fb8:	e7ea      	b.n	42f90 <nvs_flash_cmp_const+0x20>

00042fba <nvs_flash_erase_sector>:
{
   42fba:	b538      	push	{r3, r4, r5, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   42fbc:	8982      	ldrh	r2, [r0, #12]
   42fbe:	6803      	ldr	r3, [r0, #0]
	addr &= ADDR_SECT_MASK;
   42fc0:	0c0d      	lsrs	r5, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   42fc2:	0c09      	lsrs	r1, r1, #16
{
   42fc4:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
   42fc6:	042d      	lsls	r5, r5, #16
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   42fc8:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   42fca:	fb02 3101 	mla	r1, r2, r1, r3
	rc = api->erase(dev, offset, size);
   42fce:	6883      	ldr	r3, [r0, #8]
   42fd0:	689b      	ldr	r3, [r3, #8]
   42fd2:	4798      	blx	r3
	if (rc) {
   42fd4:	b950      	cbnz	r0, 42fec <nvs_flash_erase_sector+0x32>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   42fd6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   42fd8:	89a3      	ldrh	r3, [r4, #12]
   42fda:	7912      	ldrb	r2, [r2, #4]
   42fdc:	4629      	mov	r1, r5
   42fde:	4620      	mov	r0, r4
   42fe0:	f7ff ffc6 	bl	42f70 <nvs_flash_cmp_const>
		rc = -ENXIO;
   42fe4:	2800      	cmp	r0, #0
   42fe6:	bf18      	it	ne
   42fe8:	f06f 0005 	mvnne.w	r0, #5
}
   42fec:	bd38      	pop	{r3, r4, r5, pc}

00042fee <nvs_ate_crc8_update>:
{
   42fee:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   42ff0:	4601      	mov	r1, r0
{
   42ff2:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   42ff4:	2207      	movs	r2, #7
   42ff6:	20ff      	movs	r0, #255	; 0xff
   42ff8:	f7e4 ff7c 	bl	27ef4 <crc8_ccitt>
	entry->crc8 = crc8;
   42ffc:	71e0      	strb	r0, [r4, #7]
}
   42ffe:	bd10      	pop	{r4, pc}

00043000 <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   43000:	680b      	ldr	r3, [r1, #0]
   43002:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   43006:	0c1a      	lsrs	r2, r3, #16
   43008:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   4300c:	bf08      	it	eq
   4300e:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
	*addr += (1 << ADDR_SECT_SHIFT);
   43012:	600b      	str	r3, [r1, #0]
}
   43014:	4770      	bx	lr

00043016 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   43016:	7803      	ldrb	r3, [r0, #0]
   43018:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   4301a:	bf81      	itttt	hi
   4301c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   43020:	18c9      	addhi	r1, r1, r3
   43022:	425b      	neghi	r3, r3
   43024:	4019      	andhi	r1, r3
}
   43026:	4608      	mov	r0, r1
   43028:	4770      	bx	lr

0004302a <nvs_ate_valid>:
{
   4302a:	b570      	push	{r4, r5, r6, lr}
   4302c:	460c      	mov	r4, r1
   4302e:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   43030:	2108      	movs	r1, #8
   43032:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   43034:	f7ff ffef 	bl	43016 <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   43038:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4303a:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   4303c:	4621      	mov	r1, r4
   4303e:	20ff      	movs	r0, #255	; 0xff
   43040:	f7e4 ff58 	bl	27ef4 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   43044:	79e3      	ldrb	r3, [r4, #7]
   43046:	4283      	cmp	r3, r0
   43048:	d107      	bne.n	4305a <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   4304a:	89aa      	ldrh	r2, [r5, #12]
   4304c:	8863      	ldrh	r3, [r4, #2]
   4304e:	1b90      	subs	r0, r2, r6
	if ((nvs_ate_crc8_check(entry)) ||
   43050:	4283      	cmp	r3, r0
   43052:	bf2c      	ite	cs
   43054:	2000      	movcs	r0, #0
   43056:	2001      	movcc	r0, #1
}
   43058:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   4305a:	2000      	movs	r0, #0
   4305c:	e7fc      	b.n	43058 <nvs_ate_valid+0x2e>

0004305e <nvs_close_ate_valid>:
{
   4305e:	b538      	push	{r3, r4, r5, lr}
   43060:	4605      	mov	r5, r0
   43062:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   43064:	f7ff ffe1 	bl	4302a <nvs_ate_valid>
   43068:	b1a0      	cbz	r0, 43094 <nvs_close_ate_valid+0x36>
   4306a:	88a0      	ldrh	r0, [r4, #4]
   4306c:	b998      	cbnz	r0, 43096 <nvs_close_ate_valid+0x38>
   4306e:	8822      	ldrh	r2, [r4, #0]
   43070:	f64f 73ff 	movw	r3, #65535	; 0xffff
   43074:	429a      	cmp	r2, r3
   43076:	d10d      	bne.n	43094 <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   43078:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   4307a:	2108      	movs	r1, #8
   4307c:	f7ff ffcb 	bl	43016 <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   43080:	8862      	ldrh	r2, [r4, #2]
   43082:	89ab      	ldrh	r3, [r5, #12]
   43084:	1a9b      	subs	r3, r3, r2
   43086:	fbb3 f2f0 	udiv	r2, r3, r0
   4308a:	fb02 3010 	mls	r0, r2, r0, r3
   4308e:	fab0 f080 	clz	r0, r0
   43092:	0940      	lsrs	r0, r0, #5
}
   43094:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   43096:	2000      	movs	r0, #0
   43098:	e7fc      	b.n	43094 <nvs_close_ate_valid+0x36>

0004309a <nvs_prev_ate>:
{
   4309a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4309c:	4604      	mov	r4, r0
   4309e:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   430a0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   430a2:	2108      	movs	r1, #8
   430a4:	f7ff ffb7 	bl	43016 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   430a8:	6829      	ldr	r1, [r5, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   430aa:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   430ac:	2308      	movs	r3, #8
   430ae:	4620      	mov	r0, r4
   430b0:	f7ff ff26 	bl	42f00 <nvs_flash_rd>
	if (rc) {
   430b4:	4606      	mov	r6, r0
   430b6:	2800      	cmp	r0, #0
   430b8:	d136      	bne.n	43128 <nvs_prev_ate+0x8e>
	*addr += ate_size;
   430ba:	682b      	ldr	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   430bc:	89a2      	ldrh	r2, [r4, #12]
	*addr += ate_size;
   430be:	443b      	add	r3, r7
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   430c0:	b299      	uxth	r1, r3
   430c2:	1bd2      	subs	r2, r2, r7
   430c4:	4291      	cmp	r1, r2
	*addr += ate_size;
   430c6:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   430c8:	d12e      	bne.n	43128 <nvs_prev_ate+0x8e>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   430ca:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   430cc:	bf03      	ittte	eq
   430ce:	89e2      	ldrheq	r2, [r4, #14]
   430d0:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
   430d4:	eb03 4102 	addeq.w	r1, r3, r2, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   430d8:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   430dc:	6029      	str	r1, [r5, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   430de:	2308      	movs	r3, #8
   430e0:	466a      	mov	r2, sp
   430e2:	4620      	mov	r0, r4
   430e4:	f7ff ff0c 	bl	42f00 <nvs_flash_rd>
	if (rc) {
   430e8:	b9e8      	cbnz	r0, 43126 <nvs_prev_ate+0x8c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   430ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   430ec:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   430ee:	466b      	mov	r3, sp
		if (data8[i] != value) {
   430f0:	f813 1b01 	ldrb.w	r1, [r3], #1
   430f4:	428a      	cmp	r2, r1
   430f6:	d10c      	bne.n	43112 <nvs_prev_ate+0x78>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   430f8:	3001      	adds	r0, #1
   430fa:	2808      	cmp	r0, #8
   430fc:	d1f8      	bne.n	430f0 <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   430fe:	6863      	ldr	r3, [r4, #4]
   43100:	e005      	b.n	4310e <nvs_prev_ate+0x74>
		(*addr) &= ADDR_SECT_MASK;
   43102:	682b      	ldr	r3, [r5, #0]
		(*addr) += close_ate.offset;
   43104:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   43108:	0c1b      	lsrs	r3, r3, #16
   4310a:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   4310c:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   4310e:	602b      	str	r3, [r5, #0]
		return 0;
   43110:	e00a      	b.n	43128 <nvs_prev_ate+0x8e>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   43112:	4669      	mov	r1, sp
   43114:	4620      	mov	r0, r4
   43116:	f7ff ffa2 	bl	4305e <nvs_close_ate_valid>
   4311a:	2800      	cmp	r0, #0
   4311c:	d1f1      	bne.n	43102 <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   4311e:	4629      	mov	r1, r5
   43120:	4620      	mov	r0, r4
   43122:	f7e5 fab7 	bl	28694 <nvs_recover_last_ate>
   43126:	4606      	mov	r6, r0
}
   43128:	4630      	mov	r0, r6
   4312a:	b003      	add	sp, #12
   4312c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0004312e <nvs_flash_al_wrt>:
{
   4312e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   43132:	4607      	mov	r7, r0
   43134:	b089      	sub	sp, #36	; 0x24
   43136:	4690      	mov	r8, r2
	if (!len) {
   43138:	461e      	mov	r6, r3
   4313a:	b91b      	cbnz	r3, 43144 <nvs_flash_al_wrt+0x16>
		return 0;
   4313c:	2000      	movs	r0, #0
}
   4313e:	b009      	add	sp, #36	; 0x24
   43140:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	offset += addr & ADDR_OFFS_MASK;
   43144:	683c      	ldr	r4, [r7, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   43146:	8983      	ldrh	r3, [r0, #12]
   43148:	0c08      	lsrs	r0, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   4314a:	fa14 f181 	uxtah	r1, r4, r1
   4314e:	fb00 1403 	mla	r4, r0, r3, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   43152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   43154:	681d      	ldr	r5, [r3, #0]
   43156:	426d      	negs	r5, r5
	if (blen > 0) {
   43158:	4035      	ands	r5, r6
   4315a:	d00c      	beq.n	43176 <nvs_flash_al_wrt+0x48>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   4315c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   4315e:	6883      	ldr	r3, [r0, #8]
   43160:	4621      	mov	r1, r4
   43162:	f8d3 9004 	ldr.w	r9, [r3, #4]
   43166:	462b      	mov	r3, r5
   43168:	47c8      	blx	r9
		if (rc) {
   4316a:	2800      	cmp	r0, #0
   4316c:	d1e7      	bne.n	4313e <nvs_flash_al_wrt+0x10>
	if (len) {
   4316e:	1b76      	subs	r6, r6, r5
   43170:	d0e4      	beq.n	4313c <nvs_flash_al_wrt+0xe>
		offset += blen;
   43172:	442c      	add	r4, r5
		data8 += blen;
   43174:	44a8      	add	r8, r5
		memcpy(buf, data8, len);
   43176:	4632      	mov	r2, r6
   43178:	4641      	mov	r1, r8
   4317a:	4668      	mov	r0, sp
   4317c:	f001 fca1 	bl	44ac2 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   43180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   43182:	681a      	ldr	r2, [r3, #0]
   43184:	7919      	ldrb	r1, [r3, #4]
   43186:	1b92      	subs	r2, r2, r6
   43188:	eb0d 0006 	add.w	r0, sp, r6
   4318c:	f001 fca4 	bl	44ad8 <memset>
				 fs->flash_parameters->write_block_size);
   43190:	e9d7 030a 	ldrd	r0, r3, [r7, #40]	; 0x28
   43194:	681b      	ldr	r3, [r3, #0]
   43196:	6882      	ldr	r2, [r0, #8]
   43198:	4621      	mov	r1, r4
   4319a:	6855      	ldr	r5, [r2, #4]
   4319c:	466a      	mov	r2, sp
   4319e:	47a8      	blx	r5
	return rc;
   431a0:	e7cd      	b.n	4313e <nvs_flash_al_wrt+0x10>

000431a2 <nvs_flash_ate_wrt>:
{
   431a2:	b510      	push	{r4, lr}
   431a4:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   431a6:	2308      	movs	r3, #8
   431a8:	6841      	ldr	r1, [r0, #4]
{
   431aa:	4604      	mov	r4, r0
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   431ac:	f7ff ffbf 	bl	4312e <nvs_flash_al_wrt>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   431b0:	2108      	movs	r1, #8
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   431b2:	4602      	mov	r2, r0
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   431b4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   431b6:	f7ff ff2e 	bl	43016 <nvs_al_size.isra.0>
   431ba:	6863      	ldr	r3, [r4, #4]
   431bc:	1a1b      	subs	r3, r3, r0
   431be:	6063      	str	r3, [r4, #4]
}
   431c0:	4610      	mov	r0, r2
   431c2:	bd10      	pop	{r4, pc}

000431c4 <nvs_add_gc_done_ate>:
{
   431c4:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   431c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   431ca:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   431ce:	2300      	movs	r3, #0
{
   431d0:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   431d2:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   431d6:	6883      	ldr	r3, [r0, #8]
   431d8:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   431dc:	4668      	mov	r0, sp
   431de:	f7ff ff06 	bl	42fee <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   431e2:	4669      	mov	r1, sp
   431e4:	4620      	mov	r0, r4
   431e6:	f7ff ffdc 	bl	431a2 <nvs_flash_ate_wrt>
}
   431ea:	b002      	add	sp, #8
   431ec:	bd10      	pop	{r4, pc}

000431ee <nvs_gc>:
{
   431ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   431f2:	4604      	mov	r4, r0
   431f4:	b095      	sub	sp, #84	; 0x54
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   431f6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   431f8:	2108      	movs	r1, #8
   431fa:	f7ff ff0c 	bl	43016 <nvs_al_size.isra.0>
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   431fe:	6863      	ldr	r3, [r4, #4]
   43200:	0c1b      	lsrs	r3, r3, #16
   43202:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   43204:	4605      	mov	r5, r0
	nvs_sector_advance(fs, &sec_addr);
   43206:	a903      	add	r1, sp, #12
   43208:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   4320a:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   4320c:	f7ff fef8 	bl	43000 <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   43210:	f8dd b00c 	ldr.w	fp, [sp, #12]
   43214:	89a6      	ldrh	r6, [r4, #12]
   43216:	445e      	add	r6, fp
   43218:	1b76      	subs	r6, r6, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   4321a:	aa06      	add	r2, sp, #24
   4321c:	2308      	movs	r3, #8
   4321e:	4631      	mov	r1, r6
   43220:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   43222:	9604      	str	r6, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   43224:	f7ff fe6c 	bl	42f00 <nvs_flash_rd>
	if (rc < 0) {
   43228:	1e02      	subs	r2, r0, #0
   4322a:	f2c0 80a9 	blt.w	43380 <nvs_gc+0x192>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   4322e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   43230:	aa06      	add	r2, sp, #24
   43232:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   43234:	2300      	movs	r3, #0
		if (data8[i] != value) {
   43236:	f812 0b01 	ldrb.w	r0, [r2], #1
   4323a:	4281      	cmp	r1, r0
   4323c:	f040 808f 	bne.w	4335e <nvs_gc+0x170>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   43240:	3301      	adds	r3, #1
   43242:	2b08      	cmp	r3, #8
   43244:	d1f7      	bne.n	43236 <nvs_gc+0x48>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   43246:	68a3      	ldr	r3, [r4, #8]
   43248:	6862      	ldr	r2, [r4, #4]
   4324a:	442b      	add	r3, r5
   4324c:	429a      	cmp	r2, r3
   4324e:	d27e      	bcs.n	4334e <nvs_gc+0x160>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   43250:	4659      	mov	r1, fp
   43252:	4620      	mov	r0, r4
   43254:	f7ff feb1 	bl	42fba <nvs_flash_erase_sector>
   43258:	4602      	mov	r2, r0
	if (rc) {
   4325a:	e091      	b.n	43380 <nvs_gc+0x192>
		gc_addr += close_ate.offset;
   4325c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
   43260:	0c36      	lsrs	r6, r6, #16
   43262:	0436      	lsls	r6, r6, #16
		gc_addr += close_ate.offset;
   43264:	441e      	add	r6, r3
   43266:	9604      	str	r6, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   43268:	aa08      	add	r2, sp, #32
   4326a:	a904      	add	r1, sp, #16
   4326c:	4620      	mov	r0, r4
		gc_prev_addr = gc_addr;
   4326e:	f8dd a010 	ldr.w	sl, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   43272:	f7ff ff12 	bl	4309a <nvs_prev_ate>
		if (rc) {
   43276:	4602      	mov	r2, r0
   43278:	2800      	cmp	r0, #0
   4327a:	f040 8081 	bne.w	43380 <nvs_gc+0x192>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   4327e:	a908      	add	r1, sp, #32
   43280:	4620      	mov	r0, r4
   43282:	f7ff fed2 	bl	4302a <nvs_ate_valid>
   43286:	b918      	cbnz	r0, 43290 <nvs_gc+0xa2>
	} while (gc_prev_addr != stop_addr);
   43288:	9b01      	ldr	r3, [sp, #4]
   4328a:	459a      	cmp	sl, r3
   4328c:	d1ec      	bne.n	43268 <nvs_gc+0x7a>
   4328e:	e7da      	b.n	43246 <nvs_gc+0x58>
		wlk_addr = fs->ate_wra;
   43290:	6863      	ldr	r3, [r4, #4]
   43292:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   43294:	aa0a      	add	r2, sp, #40	; 0x28
   43296:	a905      	add	r1, sp, #20
   43298:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
   4329a:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   4329c:	f7ff fefd 	bl	4309a <nvs_prev_ate>
			if (rc) {
   432a0:	4602      	mov	r2, r0
   432a2:	2800      	cmp	r0, #0
   432a4:	d16c      	bne.n	43380 <nvs_gc+0x192>
			if ((wlk_ate.id == gc_ate.id) &&
   432a6:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   432aa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   432ae:	429a      	cmp	r2, r3
   432b0:	d027      	beq.n	43302 <nvs_gc+0x114>
		} while (wlk_addr != fs->ate_wra);
   432b2:	6862      	ldr	r2, [r4, #4]
   432b4:	9b05      	ldr	r3, [sp, #20]
   432b6:	429a      	cmp	r2, r3
   432b8:	d1ec      	bne.n	43294 <nvs_gc+0xa6>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   432ba:	4556      	cmp	r6, sl
   432bc:	d1e4      	bne.n	43288 <nvs_gc+0x9a>
   432be:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   432c2:	2b00      	cmp	r3, #0
   432c4:	d0e0      	beq.n	43288 <nvs_gc+0x9a>
			data_addr += gc_ate.offset;
   432c6:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   432ca:	ea4f 431a 	mov.w	r3, sl, lsr #16
   432ce:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
   432d0:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
   432d2:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   432d4:	68a3      	ldr	r3, [r4, #8]
   432d6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
   432da:	f7ff fe88 	bl	42fee <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   432de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   432e0:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   432e4:	681e      	ldr	r6, [r3, #0]
   432e6:	4276      	negs	r6, r6
	block_size =
   432e8:	f006 0620 	and.w	r6, r6, #32
	while (len) {
   432ec:	f1b9 0f00 	cmp.w	r9, #0
   432f0:	d10e      	bne.n	43310 <nvs_gc+0x122>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   432f2:	a908      	add	r1, sp, #32
   432f4:	4620      	mov	r0, r4
   432f6:	f7ff ff54 	bl	431a2 <nvs_flash_ate_wrt>
			if (rc) {
   432fa:	4602      	mov	r2, r0
   432fc:	2800      	cmp	r0, #0
   432fe:	d0c3      	beq.n	43288 <nvs_gc+0x9a>
   43300:	e03e      	b.n	43380 <nvs_gc+0x192>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   43302:	a90a      	add	r1, sp, #40	; 0x28
   43304:	4620      	mov	r0, r4
   43306:	f7ff fe90 	bl	4302a <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   4330a:	2800      	cmp	r0, #0
   4330c:	d0d1      	beq.n	432b2 <nvs_gc+0xc4>
   4330e:	e7d4      	b.n	432ba <nvs_gc+0xcc>
		bytes_to_copy = MIN(block_size, len);
   43310:	454e      	cmp	r6, r9
   43312:	46b0      	mov	r8, r6
   43314:	bf28      	it	cs
   43316:	46c8      	movcs	r8, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   43318:	aa0c      	add	r2, sp, #48	; 0x30
   4331a:	4643      	mov	r3, r8
   4331c:	4639      	mov	r1, r7
   4331e:	4620      	mov	r0, r4
   43320:	f7ff fdee 	bl	42f00 <nvs_flash_rd>
		if (rc) {
   43324:	4602      	mov	r2, r0
   43326:	bb58      	cbnz	r0, 43380 <nvs_gc+0x192>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   43328:	4643      	mov	r3, r8
   4332a:	68a1      	ldr	r1, [r4, #8]
   4332c:	aa0c      	add	r2, sp, #48	; 0x30
   4332e:	4620      	mov	r0, r4
   43330:	f7ff fefd 	bl	4312e <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   43334:	4641      	mov	r1, r8
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   43336:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   43338:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   4333a:	f7ff fe6c 	bl	43016 <nvs_al_size.isra.0>
   4333e:	68a3      	ldr	r3, [r4, #8]
   43340:	4403      	add	r3, r0
   43342:	60a3      	str	r3, [r4, #8]
		if (rc) {
   43344:	b9e2      	cbnz	r2, 43380 <nvs_gc+0x192>
		len -= bytes_to_copy;
   43346:	eba9 0908 	sub.w	r9, r9, r8
		addr += bytes_to_copy;
   4334a:	4447      	add	r7, r8
   4334c:	e7ce      	b.n	432ec <nvs_gc+0xfe>
		rc = nvs_add_gc_done_ate(fs);
   4334e:	4620      	mov	r0, r4
   43350:	f7ff ff38 	bl	431c4 <nvs_add_gc_done_ate>
		if (rc) {
   43354:	4602      	mov	r2, r0
   43356:	2800      	cmp	r0, #0
   43358:	f43f af7a 	beq.w	43250 <nvs_gc+0x62>
   4335c:	e010      	b.n	43380 <nvs_gc+0x192>
	stop_addr = gc_addr - ate_size;
   4335e:	1b73      	subs	r3, r6, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   43360:	a906      	add	r1, sp, #24
   43362:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
   43364:	9301      	str	r3, [sp, #4]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   43366:	f7ff fe7a 	bl	4305e <nvs_close_ate_valid>
   4336a:	2800      	cmp	r0, #0
   4336c:	f47f af76 	bne.w	4325c <nvs_gc+0x6e>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   43370:	a904      	add	r1, sp, #16
   43372:	4620      	mov	r0, r4
   43374:	f7e5 f98e 	bl	28694 <nvs_recover_last_ate>
		if (rc) {
   43378:	4602      	mov	r2, r0
   4337a:	2800      	cmp	r0, #0
   4337c:	f43f af74 	beq.w	43268 <nvs_gc+0x7a>
}
   43380:	4610      	mov	r0, r2
   43382:	b015      	add	sp, #84	; 0x54
   43384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00043388 <nvs_delete>:

int nvs_delete(struct nvs_fs *fs, uint16_t id)
{
	return nvs_write(fs, id, NULL, 0);
   43388:	2300      	movs	r3, #0
   4338a:	461a      	mov	r2, r3
   4338c:	f7e5 bb1c 	b.w	289c8 <nvs_write>

00043390 <nvs_read_hist>:
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   43390:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   43394:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   43396:	7c03      	ldrb	r3, [r0, #16]
{
   43398:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
   4339c:	4604      	mov	r4, r0
   4339e:	460f      	mov	r7, r1
   433a0:	4690      	mov	r8, r2
	if (!fs->ready) {
   433a2:	2b00      	cmp	r3, #0
   433a4:	d04e      	beq.n	43444 <nvs_read_hist+0xb4>
		LOG_ERR("NVS not initialized");
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   433a6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   433a8:	2108      	movs	r1, #8
   433aa:	f7ff fe34 	bl	43016 <nvs_al_size.isra.0>

	if (len > (fs->sector_size - 2 * ate_size)) {
   433ae:	89a3      	ldrh	r3, [r4, #12]
   433b0:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   433b4:	429e      	cmp	r6, r3
   433b6:	d848      	bhi.n	4344a <nvs_read_hist+0xba>
		return -EINVAL;
	}

	cnt_his = 0U;

	wlk_addr = fs->ate_wra;
   433b8:	f8d4 a004 	ldr.w	sl, [r4, #4]
   433bc:	f8cd a004 	str.w	sl, [sp, #4]
	cnt_his = 0U;
   433c0:	2500      	movs	r5, #0
	rd_addr = wlk_addr;

	while (cnt_his <= cnt) {
   433c2:	45a9      	cmp	r9, r5
   433c4:	4651      	mov	r1, sl
		rd_addr = wlk_addr;
   433c6:	f8dd a004 	ldr.w	sl, [sp, #4]
	while (cnt_his <= cnt) {
   433ca:	d20b      	bcs.n	433e4 <nvs_read_hist+0x54>
		if (wlk_addr == fs->ate_wra) {
			break;
		}
	}

	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   433cc:	6863      	ldr	r3, [r4, #4]
   433ce:	4553      	cmp	r3, sl
   433d0:	d120      	bne.n	43414 <nvs_read_hist+0x84>
   433d2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   433d6:	42bb      	cmp	r3, r7
   433d8:	d01c      	beq.n	43414 <nvs_read_hist+0x84>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
		return -ENOENT;
   433da:	f06f 0001 	mvn.w	r0, #1

	return wlk_ate.len;

err:
	return rc;
}
   433de:	b004      	add	sp, #16
   433e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   433e4:	aa02      	add	r2, sp, #8
   433e6:	a901      	add	r1, sp, #4
   433e8:	4620      	mov	r0, r4
   433ea:	f7ff fe56 	bl	4309a <nvs_prev_ate>
		if (rc) {
   433ee:	2800      	cmp	r0, #0
   433f0:	d1f5      	bne.n	433de <nvs_read_hist+0x4e>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   433f2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   433f6:	42bb      	cmp	r3, r7
   433f8:	d106      	bne.n	43408 <nvs_read_hist+0x78>
   433fa:	a902      	add	r1, sp, #8
   433fc:	4620      	mov	r0, r4
   433fe:	f7ff fe14 	bl	4302a <nvs_ate_valid>
   43402:	b108      	cbz	r0, 43408 <nvs_read_hist+0x78>
			cnt_his++;
   43404:	3501      	adds	r5, #1
   43406:	b2ad      	uxth	r5, r5
		if (wlk_addr == fs->ate_wra) {
   43408:	6862      	ldr	r2, [r4, #4]
   4340a:	9b01      	ldr	r3, [sp, #4]
   4340c:	429a      	cmp	r2, r3
   4340e:	d1d8      	bne.n	433c2 <nvs_read_hist+0x32>
		rd_addr = wlk_addr;
   43410:	4651      	mov	r1, sl
   43412:	e7de      	b.n	433d2 <nvs_read_hist+0x42>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   43414:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   43418:	2b00      	cmp	r3, #0
   4341a:	d0de      	beq.n	433da <nvs_read_hist+0x4a>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   4341c:	45a9      	cmp	r9, r5
   4341e:	d8dc      	bhi.n	433da <nvs_read_hist+0x4a>
	rd_addr += wlk_ate.offset;
   43420:	f8bd 000a 	ldrh.w	r0, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
   43424:	0c09      	lsrs	r1, r1, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   43426:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   43428:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   4342c:	bf28      	it	cs
   4342e:	4633      	movcs	r3, r6
   43430:	4401      	add	r1, r0
   43432:	4642      	mov	r2, r8
   43434:	4620      	mov	r0, r4
   43436:	f7ff fd63 	bl	42f00 <nvs_flash_rd>
	if (rc) {
   4343a:	2800      	cmp	r0, #0
   4343c:	d1cf      	bne.n	433de <nvs_read_hist+0x4e>
	return wlk_ate.len;
   4343e:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   43442:	e7cc      	b.n	433de <nvs_read_hist+0x4e>
		return -EACCES;
   43444:	f06f 000c 	mvn.w	r0, #12
   43448:	e7c9      	b.n	433de <nvs_read_hist+0x4e>
		return -EINVAL;
   4344a:	f06f 0015 	mvn.w	r0, #21
   4344e:	e7c6      	b.n	433de <nvs_read_hist+0x4e>

00043450 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   43450:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   43452:	2400      	movs	r4, #0
   43454:	9400      	str	r4, [sp, #0]
   43456:	f7ff ff9b 	bl	43390 <nvs_read_hist>
	return rc;
}
   4345a:	b002      	add	sp, #8
   4345c:	bd10      	pop	{r4, pc}

0004345e <usb_write>:
{
   4345e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   43462:	4606      	mov	r6, r0
   43464:	460f      	mov	r7, r1
   43466:	4690      	mov	r8, r2
   43468:	4699      	mov	r9, r3
   4346a:	2504      	movs	r5, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   4346c:	464b      	mov	r3, r9
   4346e:	4642      	mov	r2, r8
   43470:	4639      	mov	r1, r7
   43472:	4630      	mov	r0, r6
   43474:	f7fa facc 	bl	3da10 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
   43478:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   4347c:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
   4347e:	d103      	bne.n	43488 <usb_write+0x2a>
	z_impl_k_yield();
   43480:	f7fe fcde 	bl	41e40 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
   43484:	3d01      	subs	r5, #1
   43486:	d1f1      	bne.n	4346c <usb_write+0xe>
}
   43488:	4620      	mov	r0, r4
   4348a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0004348e <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   4348e:	4770      	bx	lr

00043490 <get_sectors_cb>:
{
   43490:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   43492:	6802      	ldr	r2, [r0, #0]
   43494:	684c      	ldr	r4, [r1, #4]
   43496:	42a2      	cmp	r2, r4
   43498:	d201      	bcs.n	4349e <get_sectors_cb+0xe>
		*bail_value = true;
   4349a:	2001      	movs	r0, #1
}
   4349c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (info->start_offset >= data->area_off + data->area_len) {
   4349e:	688b      	ldr	r3, [r1, #8]
   434a0:	4423      	add	r3, r4
   434a2:	429a      	cmp	r2, r3
   434a4:	d301      	bcc.n	434aa <get_sectors_cb+0x1a>
		*bail_value = false;
   434a6:	2000      	movs	r0, #0
   434a8:	e7f8      	b.n	4349c <get_sectors_cb+0xc>
	} else if (data->ret_idx >= data->ret_len) {
   434aa:	e9d1 5303 	ldrd	r5, r3, [r1, #12]
   434ae:	694e      	ldr	r6, [r1, #20]
   434b0:	42b3      	cmp	r3, r6
   434b2:	d303      	bcc.n	434bc <get_sectors_cb+0x2c>
		data->status = -ENOMEM;
   434b4:	f06f 030b 	mvn.w	r3, #11
   434b8:	618b      	str	r3, [r1, #24]
		return true;
   434ba:	e7f4      	b.n	434a6 <get_sectors_cb+0x16>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   434bc:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   434c0:	1b12      	subs	r2, r2, r4
   434c2:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   434c6:	6842      	ldr	r2, [r0, #4]
   434c8:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   434ca:	3301      	adds	r3, #1
   434cc:	610b      	str	r3, [r1, #16]
	return true;
   434ce:	e7e4      	b.n	4349a <get_sectors_cb+0xa>

000434d0 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   434d0:	2200      	movs	r2, #0
   434d2:	4611      	mov	r1, r2
   434d4:	f7e6 b9ac 	b.w	29830 <settings_save_one>

000434d8 <settings_name_steq>:
{
   434d8:	4603      	mov	r3, r0
   434da:	b510      	push	{r4, lr}
   434dc:	4608      	mov	r0, r1
	if (next) {
   434de:	b10a      	cbz	r2, 434e4 <settings_name_steq+0xc>
		*next = NULL;
   434e0:	2100      	movs	r1, #0
   434e2:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   434e4:	b153      	cbz	r3, 434fc <settings_name_steq+0x24>
   434e6:	b1d0      	cbz	r0, 4351e <settings_name_steq+0x46>
   434e8:	1e41      	subs	r1, r0, #1
	while ((*key != '\0') && (*key == *name) &&
   434ea:	f811 0f01 	ldrb.w	r0, [r1, #1]!
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   434ee:	b180      	cbz	r0, 43512 <settings_name_steq+0x3a>
	while ((*key != '\0') && (*key == *name) &&
   434f0:	f813 4b01 	ldrb.w	r4, [r3], #1
   434f4:	42a0      	cmp	r0, r4
   434f6:	d101      	bne.n	434fc <settings_name_steq+0x24>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   434f8:	283d      	cmp	r0, #61	; 0x3d
   434fa:	d1f6      	bne.n	434ea <settings_name_steq+0x12>
		return 0;
   434fc:	2000      	movs	r0, #0
   434fe:	e00e      	b.n	4351e <settings_name_steq+0x46>
			*next = name + 1;
   43500:	3301      	adds	r3, #1
   43502:	6013      	str	r3, [r2, #0]
   43504:	e00a      	b.n	4351c <settings_name_steq+0x44>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   43506:	283d      	cmp	r0, #61	; 0x3d
   43508:	d008      	beq.n	4351c <settings_name_steq+0x44>
   4350a:	fab0 f080 	clz	r0, r0
   4350e:	0940      	lsrs	r0, r0, #5
   43510:	e005      	b.n	4351e <settings_name_steq+0x46>
	if (*name == SETTINGS_NAME_SEPARATOR) {
   43512:	7818      	ldrb	r0, [r3, #0]
   43514:	282f      	cmp	r0, #47	; 0x2f
   43516:	d1f6      	bne.n	43506 <settings_name_steq+0x2e>
		if (next) {
   43518:	2a00      	cmp	r2, #0
   4351a:	d1f1      	bne.n	43500 <settings_name_steq+0x28>
		return 1;
   4351c:	2001      	movs	r0, #1
}
   4351e:	bd10      	pop	{r4, pc}

00043520 <settings_name_next>:
{
   43520:	b510      	push	{r4, lr}
	if (next) {
   43522:	b109      	cbz	r1, 43528 <settings_name_next+0x8>
		*next = NULL;
   43524:	2300      	movs	r3, #0
   43526:	600b      	str	r3, [r1, #0]
	if (!name) {
   43528:	b158      	cbz	r0, 43542 <settings_name_next+0x22>
   4352a:	4603      	mov	r3, r0
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   4352c:	781a      	ldrb	r2, [r3, #0]
   4352e:	461c      	mov	r4, r3
   43530:	3301      	adds	r3, #1
   43532:	b12a      	cbz	r2, 43540 <settings_name_next+0x20>
   43534:	2a3d      	cmp	r2, #61	; 0x3d
   43536:	d003      	beq.n	43540 <settings_name_next+0x20>
   43538:	2a2f      	cmp	r2, #47	; 0x2f
   4353a:	d1f7      	bne.n	4352c <settings_name_next+0xc>
		if (next) {
   4353c:	b101      	cbz	r1, 43540 <settings_name_next+0x20>
			*next = name + 1;
   4353e:	600b      	str	r3, [r1, #0]
   43540:	1a20      	subs	r0, r4, r0
}
   43542:	bd10      	pop	{r4, pc}

00043544 <settings_call_set_handler>:
{
   43544:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   43548:	f8dd 8020 	ldr.w	r8, [sp, #32]
	const char *name_key = name;
   4354c:	9001      	str	r0, [sp, #4]
{
   4354e:	4607      	mov	r7, r0
   43550:	460c      	mov	r4, r1
   43552:	4615      	mov	r5, r2
   43554:	461e      	mov	r6, r3
	if (load_arg && load_arg->subtree &&
   43556:	f1b8 0f00 	cmp.w	r8, #0
   4355a:	d007      	beq.n	4356c <settings_call_set_handler+0x28>
   4355c:	f8d8 1000 	ldr.w	r1, [r8]
   43560:	b981      	cbnz	r1, 43584 <settings_call_set_handler+0x40>
	if (load_arg && load_arg->cb) {
   43562:	f8d8 e004 	ldr.w	lr, [r8, #4]
   43566:	f1be 0f00 	cmp.w	lr, #0
   4356a:	d114      	bne.n	43596 <settings_call_set_handler+0x52>
		ch = settings_parse_and_lookup(name, &name_key);
   4356c:	a901      	add	r1, sp, #4
   4356e:	4638      	mov	r0, r7
   43570:	f7e6 f9ee 	bl	29950 <settings_parse_and_lookup>
		if (!ch) {
   43574:	b158      	cbz	r0, 4358e <settings_call_set_handler+0x4a>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   43576:	6887      	ldr	r7, [r0, #8]
   43578:	9801      	ldr	r0, [sp, #4]
   4357a:	4633      	mov	r3, r6
   4357c:	462a      	mov	r2, r5
   4357e:	4621      	mov	r1, r4
   43580:	47b8      	blx	r7
		if (rc != 0) {
   43582:	e004      	b.n	4358e <settings_call_set_handler+0x4a>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   43584:	aa01      	add	r2, sp, #4
   43586:	f7ff ffa7 	bl	434d8 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   4358a:	2800      	cmp	r0, #0
   4358c:	d1e9      	bne.n	43562 <settings_call_set_handler+0x1e>
}
   4358e:	2000      	movs	r0, #0
   43590:	b002      	add	sp, #8
   43592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   43596:	f8d8 3008 	ldr.w	r3, [r8, #8]
   4359a:	9801      	ldr	r0, [sp, #4]
   4359c:	9308      	str	r3, [sp, #32]
   4359e:	462a      	mov	r2, r5
   435a0:	4633      	mov	r3, r6
   435a2:	4621      	mov	r1, r4
   435a4:	46f4      	mov	ip, lr
}
   435a6:	b002      	add	sp, #8
   435a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   435ac:	4760      	bx	ip

000435ae <settings_nvs_read_fn>:
{
   435ae:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   435b0:	4613      	mov	r3, r2
{
   435b2:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   435b4:	460a      	mov	r2, r1
   435b6:	8881      	ldrh	r1, [r0, #4]
   435b8:	6800      	ldr	r0, [r0, #0]
   435ba:	f7ff ff49 	bl	43450 <nvs_read>
}
   435be:	42a0      	cmp	r0, r4
   435c0:	bfa8      	it	ge
   435c2:	4620      	movge	r0, r4
   435c4:	bd10      	pop	{r4, pc}

000435c6 <settings_nvs_save>:
{
   435c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   435ca:	b097      	sub	sp, #92	; 0x5c
   435cc:	4604      	mov	r4, r0
   435ce:	9201      	str	r2, [sp, #4]
   435d0:	469a      	mov	sl, r3
	if (!name) {
   435d2:	4689      	mov	r9, r1
   435d4:	2900      	cmp	r1, #0
   435d6:	d07e      	beq.n	436d6 <settings_nvs_save+0x110>
	delete = ((value == NULL) || (val_len == 0));
   435d8:	b1da      	cbz	r2, 43612 <settings_nvs_save+0x4c>
   435da:	faba f78a 	clz	r7, sl
   435de:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   435e0:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   435e2:	3501      	adds	r5, #1
   435e4:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   435e6:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   435e8:	f104 0b08 	add.w	fp, r4, #8
		name_id--;
   435ec:	1e6e      	subs	r6, r5, #1
   435ee:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   435f0:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   435f4:	d040      	beq.n	43678 <settings_nvs_save+0xb2>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   435f6:	234a      	movs	r3, #74	; 0x4a
   435f8:	aa03      	add	r2, sp, #12
   435fa:	4631      	mov	r1, r6
   435fc:	4658      	mov	r0, fp
   435fe:	f7ff ff27 	bl	43450 <nvs_read>
		if (rc < 0) {
   43602:	2800      	cmp	r0, #0
   43604:	da07      	bge.n	43616 <settings_nvs_save+0x50>
		name_id--;
   43606:	f110 0f02 	cmn.w	r0, #2
   4360a:	bf08      	it	eq
   4360c:	46b0      	moveq	r8, r6
   4360e:	4635      	mov	r5, r6
   43610:	e7ec      	b.n	435ec <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   43612:	2701      	movs	r7, #1
   43614:	e7e4      	b.n	435e0 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   43616:	f100 0358 	add.w	r3, r0, #88	; 0x58
   4361a:	eb0d 0003 	add.w	r0, sp, r3
   4361e:	2300      	movs	r3, #0
   43620:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   43624:	a903      	add	r1, sp, #12
   43626:	4648      	mov	r0, r9
   43628:	f001 fa1b 	bl	44a62 <strcmp>
   4362c:	2800      	cmp	r0, #0
   4362e:	d1ee      	bne.n	4360e <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   43630:	b32f      	cbz	r7, 4367e <settings_nvs_save+0xb8>
   43632:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   43634:	42b3      	cmp	r3, r6
   43636:	d008      	beq.n	4364a <settings_nvs_save+0x84>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   43638:	4631      	mov	r1, r6
   4363a:	4658      	mov	r0, fp
   4363c:	f7ff fea4 	bl	43388 <nvs_delete>
			if (rc >= 0) {
   43640:	2800      	cmp	r0, #0
   43642:	da0f      	bge.n	43664 <settings_nvs_save+0x9e>
}
   43644:	b017      	add	sp, #92	; 0x5c
   43646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cf->last_name_id--;
   4364a:	4622      	mov	r2, r4
   4364c:	1e73      	subs	r3, r6, #1
   4364e:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   43652:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   43656:	2302      	movs	r3, #2
   43658:	4658      	mov	r0, fp
   4365a:	f7e5 f9b5 	bl	289c8 <nvs_write>
			if (rc < 0) {
   4365e:	2800      	cmp	r0, #0
   43660:	daea      	bge.n	43638 <settings_nvs_save+0x72>
   43662:	e7ef      	b.n	43644 <settings_nvs_save+0x7e>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   43664:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   43668:	313f      	adds	r1, #63	; 0x3f
   4366a:	b289      	uxth	r1, r1
   4366c:	4658      	mov	r0, fp
   4366e:	f7ff fe8b 	bl	43388 <nvs_delete>
	if (rc < 0) {
   43672:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   43676:	e7e5      	b.n	43644 <settings_nvs_save+0x7e>
	if (delete) {
   43678:	b1ff      	cbz	r7, 436ba <settings_nvs_save+0xf4>
			return 0;
   4367a:	2000      	movs	r0, #0
   4367c:	e7e2      	b.n	43644 <settings_nvs_save+0x7e>
		name_id--;
   4367e:	46b0      	mov	r8, r6
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   43680:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   43684:	d02a      	beq.n	436dc <settings_nvs_save+0x116>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   43686:	f104 0508 	add.w	r5, r4, #8
   4368a:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   4368e:	9a01      	ldr	r2, [sp, #4]
   43690:	4653      	mov	r3, sl
   43692:	b289      	uxth	r1, r1
   43694:	4628      	mov	r0, r5
   43696:	f7e5 f997 	bl	289c8 <nvs_write>
	if (rc < 0) {
   4369a:	2800      	cmp	r0, #0
   4369c:	dbd2      	blt.n	43644 <settings_nvs_save+0x7e>
	if (write_name) {
   4369e:	b977      	cbnz	r7, 436be <settings_nvs_save+0xf8>
	if (write_name_id > cf->last_name_id) {
   436a0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   436a2:	4543      	cmp	r3, r8
   436a4:	d2e9      	bcs.n	4367a <settings_nvs_save+0xb4>
		cf->last_name_id = write_name_id;
   436a6:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   436a8:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   436aa:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   436ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   436b2:	4628      	mov	r0, r5
   436b4:	f7e5 f988 	bl	289c8 <nvs_write>
   436b8:	e7db      	b.n	43672 <settings_nvs_save+0xac>
	write_name = true;
   436ba:	2701      	movs	r7, #1
   436bc:	e7e0      	b.n	43680 <settings_nvs_save+0xba>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   436be:	4648      	mov	r0, r9
   436c0:	f001 f9c8 	bl	44a54 <strlen>
   436c4:	464a      	mov	r2, r9
   436c6:	4603      	mov	r3, r0
   436c8:	4641      	mov	r1, r8
   436ca:	4628      	mov	r0, r5
   436cc:	f7e5 f97c 	bl	289c8 <nvs_write>
		if (rc < 0) {
   436d0:	2800      	cmp	r0, #0
   436d2:	dae5      	bge.n	436a0 <settings_nvs_save+0xda>
   436d4:	e7b6      	b.n	43644 <settings_nvs_save+0x7e>
		return -EINVAL;
   436d6:	f06f 0015 	mvn.w	r0, #21
   436da:	e7b3      	b.n	43644 <settings_nvs_save+0x7e>
		return -ENOMEM;
   436dc:	f06f 000b 	mvn.w	r0, #11
   436e0:	e7b0      	b.n	43644 <settings_nvs_save+0x7e>

000436e2 <settings_nvs_backend_init>:
{
   436e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   436e4:	f100 0608 	add.w	r6, r0, #8
   436e8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
   436ea:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   436ec:	4630      	mov	r0, r6
   436ee:	f7e5 f803 	bl	286f8 <nvs_init>
	if (rc) {
   436f2:	4605      	mov	r5, r0
   436f4:	b970      	cbnz	r0, 43714 <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   436f6:	2302      	movs	r3, #2
   436f8:	f10d 0206 	add.w	r2, sp, #6
   436fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   43700:	4630      	mov	r0, r6
   43702:	f7ff fea5 	bl	43450 <nvs_read>
	if (rc < 0) {
   43706:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   43708:	bfac      	ite	ge
   4370a:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
   4370e:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
   43712:	8723      	strh	r3, [r4, #56]	; 0x38
}
   43714:	4628      	mov	r0, r5
   43716:	b002      	add	sp, #8
   43718:	bd70      	pop	{r4, r5, r6, pc}

0004371a <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   4371a:	b538      	push	{r3, r4, r5, lr}
   4371c:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   4371e:	42ab      	cmp	r3, r5
{
   43720:	4611      	mov	r1, r2
   43722:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   43724:	d804      	bhi.n	43730 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   43726:	461a      	mov	r2, r3
   43728:	f001 f9cb 	bl	44ac2 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   4372c:	4620      	mov	r0, r4
   4372e:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   43730:	2400      	movs	r4, #0
   43732:	e7fb      	b.n	4372c <_copy+0x12>

00043734 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   43734:	f001 b9d0 	b.w	44ad8 <memset>

00043738 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   43738:	09c3      	lsrs	r3, r0, #7
   4373a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   4373e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   43742:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   43746:	b2c0      	uxtb	r0, r0
   43748:	4770      	bx	lr

0004374a <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   4374a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4374e:	4606      	mov	r6, r0
   43750:	b0a9      	sub	sp, #164	; 0xa4
   43752:	4688      	mov	r8, r1
   43754:	4614      	mov	r4, r2
   43756:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   43758:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   4375c:	f7e6 fb92 	bl	29e84 <uECC_get_rng>
		if (!rng_function ||
   43760:	4603      	mov	r3, r0
   43762:	2800      	cmp	r0, #0
   43764:	d03e      	beq.n	437e4 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   43766:	2140      	movs	r1, #64	; 0x40
   43768:	a808      	add	r0, sp, #32
   4376a:	4798      	blx	r3
		if (!rng_function ||
   4376c:	b3d0      	cbz	r0, 437e4 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   4376e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   43772:	f112 031f 	adds.w	r3, r2, #31
   43776:	bf48      	it	mi
   43778:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   4377c:	466d      	mov	r5, sp
   4377e:	464a      	mov	r2, r9
   43780:	a908      	add	r1, sp, #32
   43782:	4628      	mov	r0, r5
   43784:	f343 1347 	sbfx	r3, r3, #5, #8
   43788:	f000 f9f6 	bl	43b78 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   4378c:	4622      	mov	r2, r4
   4378e:	4629      	mov	r1, r5
   43790:	a818      	add	r0, sp, #96	; 0x60
   43792:	f000 fe09 	bl	443a8 <EccPoint_compute_public_key>
   43796:	b318      	cbz	r0, 437e0 <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   43798:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   4379c:	1dd9      	adds	r1, r3, #7
   4379e:	bf48      	it	mi
   437a0:	f103 010e 	addmi.w	r1, r3, #14
   437a4:	462a      	mov	r2, r5
   437a6:	4640      	mov	r0, r8
   437a8:	10c9      	asrs	r1, r1, #3
   437aa:	f000 fe25 	bl	443f8 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   437ae:	f994 1001 	ldrsb.w	r1, [r4, #1]
   437b2:	aa18      	add	r2, sp, #96	; 0x60
   437b4:	4630      	mov	r0, r6
   437b6:	f000 fe1f 	bl	443f8 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   437ba:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   437be:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   437c2:	ab18      	add	r3, sp, #96	; 0x60
   437c4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   437c8:	1870      	adds	r0, r6, r1
   437ca:	f000 fe15 	bl	443f8 <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   437ce:	2220      	movs	r2, #32
   437d0:	2100      	movs	r1, #0
   437d2:	4628      	mov	r0, r5
   437d4:	f001 f980 	bl	44ad8 <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   437d8:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   437da:	b029      	add	sp, #164	; 0xa4
   437dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   437e0:	3f01      	subs	r7, #1
   437e2:	d1bb      	bne.n	4375c <uECC_make_key+0x12>
        		return 0;
   437e4:	2000      	movs	r0, #0
   437e6:	e7f8      	b.n	437da <uECC_make_key+0x90>

000437e8 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   437e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   437ec:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   437ee:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   437f2:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   437f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   437fa:	b0a4      	sub	sp, #144	; 0x90
   437fc:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   437fe:	1dda      	adds	r2, r3, #7
   43800:	bf48      	it	mi
   43802:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   43806:	ad04      	add	r5, sp, #16
{
   43808:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   4380a:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   4380c:	4628      	mov	r0, r5
   4380e:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   43810:	9502      	str	r5, [sp, #8]
   43812:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   43814:	f000 fe04 	bl	44420 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   43818:	463a      	mov	r2, r7
   4381a:	4649      	mov	r1, r9
   4381c:	a814      	add	r0, sp, #80	; 0x50
   4381e:	f000 fdff 	bl	44420 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   43822:	ab14      	add	r3, sp, #80	; 0x50
   43824:	eb09 0107 	add.w	r1, r9, r7
   43828:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   4382c:	463a      	mov	r2, r7
   4382e:	f000 fdf7 	bl	44420 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   43832:	4623      	mov	r3, r4
   43834:	4632      	mov	r2, r6
   43836:	4629      	mov	r1, r5
   43838:	4628      	mov	r0, r5
   4383a:	f000 fd89 	bl	44350 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   4383e:	fab0 f380 	clz	r3, r0
   43842:	9401      	str	r4, [sp, #4]
   43844:	aa24      	add	r2, sp, #144	; 0x90
   43846:	095b      	lsrs	r3, r3, #5
   43848:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   4384c:	8863      	ldrh	r3, [r4, #2]
   4384e:	3301      	adds	r3, #1
   43850:	b21b      	sxth	r3, r3
   43852:	9300      	str	r3, [sp, #0]
   43854:	f851 2c88 	ldr.w	r2, [r1, #-136]
   43858:	a914      	add	r1, sp, #80	; 0x50
   4385a:	2300      	movs	r3, #0
   4385c:	4608      	mov	r0, r1
   4385e:	f000 fcaf 	bl	441c0 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   43862:	aa14      	add	r2, sp, #80	; 0x50
   43864:	4639      	mov	r1, r7
   43866:	4640      	mov	r0, r8
   43868:	f000 fdc6 	bl	443f8 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   4386c:	4621      	mov	r1, r4
   4386e:	a814      	add	r0, sp, #80	; 0x50
   43870:	f000 fc1b 	bl	440aa <EccPoint_isZero>
   43874:	af02      	add	r7, sp, #8
   43876:	4604      	mov	r4, r0
   43878:	2208      	movs	r2, #8
   4387a:	2100      	movs	r1, #0
   4387c:	4638      	mov	r0, r7
   4387e:	f001 f92b 	bl	44ad8 <memset>
   43882:	2220      	movs	r2, #32
   43884:	2100      	movs	r1, #0
   43886:	4630      	mov	r0, r6
   43888:	f001 f926 	bl	44ad8 <memset>
   4388c:	2220      	movs	r2, #32
   4388e:	2100      	movs	r1, #0
   43890:	4628      	mov	r0, r5
   43892:	f001 f921 	bl	44ad8 <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   43896:	fab4 f084 	clz	r0, r4
   4389a:	0940      	lsrs	r0, r0, #5
   4389c:	b024      	add	sp, #144	; 0x90
   4389e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000438a2 <uECC_vli_add>:
{
   438a2:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   438a4:	2400      	movs	r4, #0
{
   438a6:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   438a8:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   438aa:	b265      	sxtb	r5, r4
   438ac:	42ab      	cmp	r3, r5
   438ae:	dc00      	bgt.n	438b2 <uECC_vli_add+0x10>
}
   438b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   438b2:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   438b6:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   438ba:	443d      	add	r5, r7
   438bc:	4405      	add	r5, r0
	return (p_true*(cond)) | (p_false*(!cond));
   438be:	42af      	cmp	r7, r5
   438c0:	f000 0001 	and.w	r0, r0, #1
   438c4:	bf18      	it	ne
   438c6:	2000      	movne	r0, #0
		result[i] = sum;
   438c8:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   438cc:	bf88      	it	hi
   438ce:	f040 0001 	orrhi.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   438d2:	3401      	adds	r4, #1
   438d4:	e7e9      	b.n	438aa <uECC_vli_add+0x8>

000438d6 <uECC_vli_rshift1>:
	vli += num_words;
   438d6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   438da:	2300      	movs	r3, #0
	while (vli-- > end) {
   438dc:	4288      	cmp	r0, r1
   438de:	d300      	bcc.n	438e2 <uECC_vli_rshift1+0xc>
}
   438e0:	4770      	bx	lr
		uECC_word_t temp = *vli;
   438e2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   438e6:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   438ea:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   438ec:	07d3      	lsls	r3, r2, #31
   438ee:	e7f5      	b.n	438dc <uECC_vli_rshift1+0x6>

000438f0 <vli_modInv_update>:
	if (!EVEN(uv)) {
   438f0:	6803      	ldr	r3, [r0, #0]
   438f2:	07db      	lsls	r3, r3, #31
{
   438f4:	b570      	push	{r4, r5, r6, lr}
   438f6:	4605      	mov	r5, r0
   438f8:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   438fa:	d404      	bmi.n	43906 <vli_modInv_update+0x16>
}
   438fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	uECC_vli_rshift1(uv, num_words);
   43900:	4611      	mov	r1, r2
   43902:	f7ff bfe8 	b.w	438d6 <uECC_vli_rshift1>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   43906:	4613      	mov	r3, r2
   43908:	460a      	mov	r2, r1
   4390a:	4601      	mov	r1, r0
   4390c:	f7ff ffc9 	bl	438a2 <uECC_vli_add>
	uECC_vli_rshift1(uv, num_words);
   43910:	4621      	mov	r1, r4
		carry = uECC_vli_add(uv, uv, mod, num_words);
   43912:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   43914:	4628      	mov	r0, r5
   43916:	f7ff ffde 	bl	438d6 <uECC_vli_rshift1>
	if (carry) {
   4391a:	b146      	cbz	r6, 4392e <vli_modInv_update+0x3e>
		uv[num_words - 1] |= HIGH_BIT_SET;
   4391c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   43920:	3c01      	subs	r4, #1
   43922:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   43926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   4392a:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
}
   4392e:	bd70      	pop	{r4, r5, r6, pc}

00043930 <uECC_vli_mult>:
	for (k = 0; k < num_words; ++k) {
   43930:	f04f 0c00 	mov.w	ip, #0
{
   43934:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uECC_word_t r1 = 0;
   43938:	4665      	mov	r5, ip
	uECC_word_t r0 = 0;
   4393a:	4664      	mov	r4, ip
	for (k = 0; k < num_words; ++k) {
   4393c:	fa4f f98c 	sxtb.w	r9, ip
   43940:	454b      	cmp	r3, r9
   43942:	dc16      	bgt.n	43972 <uECC_vli_mult+0x42>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   43944:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   43948:	eb06 0643 	add.w	r6, r6, r3, lsl #1
   4394c:	9601      	str	r6, [sp, #4]
   4394e:	f04f 0800 	mov.w	r8, #0
   43952:	9f01      	ldr	r7, [sp, #4]
   43954:	fa53 fe88 	uxtab	lr, r3, r8
   43958:	fa4f fe8e 	sxtb.w	lr, lr
   4395c:	45be      	cmp	lr, r7
   4395e:	fa5f f688 	uxtb.w	r6, r8
   43962:	db28      	blt.n	439b6 <uECC_vli_mult+0x86>
	result[num_words * 2 - 1] = r0;
   43964:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   43968:	f840 4c04 	str.w	r4, [r0, #-4]
}
   4396c:	b003      	add	sp, #12
   4396e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
   43972:	f04f 0e00 	mov.w	lr, #0
   43976:	eb02 0a8c 	add.w	sl, r2, ip, lsl #2
   4397a:	46f0      	mov	r8, lr
	uECC_dword_t p = (uECC_dword_t)a * b;
   4397c:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   43980:	f85a 6904 	ldr.w	r6, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   43984:	fba6 6707 	umull	r6, r7, r6, r7
   43988:	1936      	adds	r6, r6, r4
		for (i = 0; i <= k; ++i) {
   4398a:	f10e 0e01 	add.w	lr, lr, #1
   4398e:	416f      	adcs	r7, r5
	*r0 = (uECC_word_t)r01;
   43990:	4634      	mov	r4, r6
		for (i = 0; i <= k; ++i) {
   43992:	fa4f f68e 	sxtb.w	r6, lr
   43996:	f04f 0b00 	mov.w	fp, #0
   4399a:	bf28      	it	cs
   4399c:	f04f 0b01 	movcs.w	fp, #1
   439a0:	454e      	cmp	r6, r9
	*r2 += (r01 < p);
   439a2:	44d8      	add	r8, fp
	*r1 = r01 >> uECC_WORD_BITS;
   439a4:	463d      	mov	r5, r7
		for (i = 0; i <= k; ++i) {
   439a6:	dde9      	ble.n	4397c <uECC_vli_mult+0x4c>
		result[k] = r0;
   439a8:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	*r2 += (r01 < p);
   439ac:	4645      	mov	r5, r8
   439ae:	f10c 0c01 	add.w	ip, ip, #1
	*r1 = r01 >> uECC_WORD_BITS;
   439b2:	463c      	mov	r4, r7
   439b4:	e7c2      	b.n	4393c <uECC_vli_mult+0xc>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   439b6:	3601      	adds	r6, #1
   439b8:	46a9      	mov	r9, r5
   439ba:	b276      	sxtb	r6, r6
   439bc:	eb02 0a8e 	add.w	sl, r2, lr, lsl #2
   439c0:	2500      	movs	r5, #0
   439c2:	b277      	sxtb	r7, r6
   439c4:	42bb      	cmp	r3, r7
   439c6:	dc05      	bgt.n	439d4 <uECC_vli_mult+0xa4>
		result[k] = r0;
   439c8:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   439cc:	f108 0801 	add.w	r8, r8, #1
		result[k] = r0;
   439d0:	464c      	mov	r4, r9
   439d2:	e7be      	b.n	43952 <uECC_vli_mult+0x22>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   439d4:	f06f 0703 	mvn.w	r7, #3
   439d8:	4377      	muls	r7, r6
	uECC_dword_t p = (uECC_dword_t)a * b;
   439da:	f851 c026 	ldr.w	ip, [r1, r6, lsl #2]
   439de:	f85a 7007 	ldr.w	r7, [sl, r7]
   439e2:	fba7 7c0c 	umull	r7, ip, r7, ip
   439e6:	193f      	adds	r7, r7, r4
   439e8:	eb5c 0c09 	adcs.w	ip, ip, r9
   439ec:	f04f 0b00 	mov.w	fp, #0
   439f0:	bf28      	it	cs
   439f2:	f04f 0b01 	movcs.w	fp, #1
	*r2 += (r01 < p);
   439f6:	445d      	add	r5, fp
	*r1 = r01 >> uECC_WORD_BITS;
   439f8:	46e1      	mov	r9, ip
	*r0 = (uECC_word_t)r01;
   439fa:	463c      	mov	r4, r7
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   439fc:	3601      	adds	r6, #1
   439fe:	e7e0      	b.n	439c2 <uECC_vli_mult+0x92>

00043a00 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   43a00:	2300      	movs	r3, #0
{
   43a02:	b510      	push	{r4, lr}
		 vli[i] = 0;
   43a04:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   43a06:	b25a      	sxtb	r2, r3
   43a08:	4291      	cmp	r1, r2
   43a0a:	dc00      	bgt.n	43a0e <uECC_vli_clear+0xe>
}
   43a0c:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   43a0e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   43a12:	3301      	adds	r3, #1
   43a14:	e7f7      	b.n	43a06 <uECC_vli_clear+0x6>

00043a16 <uECC_vli_isZero>:
{
   43a16:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   43a18:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   43a1a:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   43a1c:	b25c      	sxtb	r4, r3
   43a1e:	42a1      	cmp	r1, r4
   43a20:	dc03      	bgt.n	43a2a <uECC_vli_isZero+0x14>
}
   43a22:	fab2 f082 	clz	r0, r2
   43a26:	0940      	lsrs	r0, r0, #5
   43a28:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   43a2a:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   43a2e:	3301      	adds	r3, #1
   43a30:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   43a32:	e7f3      	b.n	43a1c <uECC_vli_isZero+0x6>

00043a34 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   43a34:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   43a36:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   43a38:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   43a3c:	f001 011f 	and.w	r1, r1, #31
   43a40:	408b      	lsls	r3, r1
}
   43a42:	4018      	ands	r0, r3
   43a44:	4770      	bx	lr

00043a46 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   43a46:	1e4b      	subs	r3, r1, #1
{
   43a48:	b510      	push	{r4, lr}
   43a4a:	b25b      	sxtb	r3, r3
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   43a4c:	1d04      	adds	r4, r0, #4
   43a4e:	061a      	lsls	r2, r3, #24
   43a50:	d403      	bmi.n	43a5a <uECC_vli_numBits+0x14>
   43a52:	1e5a      	subs	r2, r3, #1
   43a54:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
   43a58:	b171      	cbz	r1, 43a78 <uECC_vli_numBits+0x32>
	return (i + 1);
   43a5a:	3301      	adds	r3, #1
   43a5c:	b25b      	sxtb	r3, r3
	if (num_digits == 0) {
   43a5e:	b183      	cbz	r3, 43a82 <uECC_vli_numBits+0x3c>
	digit = vli[num_digits - 1];
   43a60:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   43a64:	3a01      	subs	r2, #1
   43a66:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
	for (i = 0; digit; ++i) {
   43a6a:	2200      	movs	r2, #0
   43a6c:	b931      	cbnz	r1, 43a7c <uECC_vli_numBits+0x36>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   43a6e:	3b01      	subs	r3, #1
   43a70:	eb02 1243 	add.w	r2, r2, r3, lsl #5
   43a74:	b210      	sxth	r0, r2
}
   43a76:	bd10      	pop	{r4, pc}
   43a78:	4613      	mov	r3, r2
   43a7a:	e7e8      	b.n	43a4e <uECC_vli_numBits+0x8>
		digit >>= 1;
   43a7c:	0849      	lsrs	r1, r1, #1
	for (i = 0; digit; ++i) {
   43a7e:	3201      	adds	r2, #1
   43a80:	e7f4      	b.n	43a6c <uECC_vli_numBits+0x26>
		return 0;
   43a82:	4618      	mov	r0, r3
   43a84:	e7f7      	b.n	43a76 <uECC_vli_numBits+0x30>

00043a86 <uECC_vli_set>:
{
   43a86:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   43a88:	2300      	movs	r3, #0
   43a8a:	b25c      	sxtb	r4, r3
   43a8c:	42a2      	cmp	r2, r4
   43a8e:	dc00      	bgt.n	43a92 <uECC_vli_set+0xc>
}
   43a90:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   43a92:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   43a96:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   43a9a:	3301      	adds	r3, #1
   43a9c:	e7f5      	b.n	43a8a <uECC_vli_set+0x4>

00043a9e <uECC_vli_cmp_unsafe>:
{
   43a9e:	b510      	push	{r4, lr}
	for (i = num_words - 1; i >= 0; --i) {
   43aa0:	3a01      	subs	r2, #1
   43aa2:	b252      	sxtb	r2, r2
   43aa4:	0613      	lsls	r3, r2, #24
   43aa6:	d501      	bpl.n	43aac <uECC_vli_cmp_unsafe+0xe>
	return 0;
   43aa8:	2000      	movs	r0, #0
}
   43aaa:	bd10      	pop	{r4, pc}
		if (left[i] > right[i]) {
   43aac:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   43ab0:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   43ab4:	429c      	cmp	r4, r3
   43ab6:	d805      	bhi.n	43ac4 <uECC_vli_cmp_unsafe+0x26>
		} else if (left[i] < right[i]) {
   43ab8:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
   43abc:	d2f2      	bcs.n	43aa4 <uECC_vli_cmp_unsafe+0x6>
			return -1;
   43abe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   43ac2:	e7f2      	b.n	43aaa <uECC_vli_cmp_unsafe+0xc>
			return 1;
   43ac4:	2001      	movs	r0, #1
   43ac6:	e7f0      	b.n	43aaa <uECC_vli_cmp_unsafe+0xc>

00043ac8 <uECC_vli_equal>:
{
   43ac8:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   43aca:	3a01      	subs	r2, #1
   43acc:	b252      	sxtb	r2, r2
	uECC_word_t diff = 0;
   43ace:	2300      	movs	r3, #0
	for (i = num_words - 1; i >= 0; --i) {
   43ad0:	0614      	lsls	r4, r2, #24
   43ad2:	d503      	bpl.n	43adc <uECC_vli_equal+0x14>
}
   43ad4:	1e18      	subs	r0, r3, #0
   43ad6:	bf18      	it	ne
   43ad8:	2001      	movne	r0, #1
   43ada:	bd30      	pop	{r4, r5, pc}
		diff |= (left[i] ^ right[i]);
   43adc:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   43ae0:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   43ae4:	406c      	eors	r4, r5
   43ae6:	4323      	orrs	r3, r4
	for (i = num_words - 1; i >= 0; --i) {
   43ae8:	3a01      	subs	r2, #1
   43aea:	e7f1      	b.n	43ad0 <uECC_vli_equal+0x8>

00043aec <uECC_vli_sub>:
{
   43aec:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   43aee:	2400      	movs	r4, #0
{
   43af0:	4606      	mov	r6, r0
   43af2:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   43af4:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   43af6:	b265      	sxtb	r5, r4
   43af8:	4565      	cmp	r5, ip
   43afa:	db00      	blt.n	43afe <uECC_vli_sub+0x12>
}
   43afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   43afe:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   43b02:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   43b06:	1a3d      	subs	r5, r7, r0
   43b08:	1aed      	subs	r5, r5, r3
	return (p_true*(cond)) | (p_false*(!cond));
   43b0a:	42af      	cmp	r7, r5
   43b0c:	f000 0001 	and.w	r0, r0, #1
   43b10:	bf18      	it	ne
   43b12:	2000      	movne	r0, #0
		result[i] = diff;
   43b14:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   43b18:	bf38      	it	cc
   43b1a:	f040 0001 	orrcc.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   43b1e:	3401      	adds	r4, #1
   43b20:	e7e9      	b.n	43af6 <uECC_vli_sub+0xa>

00043b22 <uECC_vli_modAdd>:
{
   43b22:	b570      	push	{r4, r5, r6, lr}
   43b24:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   43b28:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   43b2a:	4633      	mov	r3, r6
{
   43b2c:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   43b2e:	f7ff feb8 	bl	438a2 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   43b32:	b930      	cbnz	r0, 43b42 <uECC_vli_modAdd+0x20>
   43b34:	4632      	mov	r2, r6
   43b36:	4621      	mov	r1, r4
   43b38:	4628      	mov	r0, r5
   43b3a:	f7ff ffb0 	bl	43a9e <uECC_vli_cmp_unsafe>
   43b3e:	2801      	cmp	r0, #1
   43b40:	d007      	beq.n	43b52 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   43b42:	4633      	mov	r3, r6
   43b44:	462a      	mov	r2, r5
   43b46:	4621      	mov	r1, r4
   43b48:	4620      	mov	r0, r4
}
   43b4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   43b4e:	f7ff bfcd 	b.w	43aec <uECC_vli_sub>
}
   43b52:	bd70      	pop	{r4, r5, r6, pc}

00043b54 <uECC_vli_modSub>:
{
   43b54:	b570      	push	{r4, r5, r6, lr}
   43b56:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   43b5a:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   43b5c:	4633      	mov	r3, r6
{
   43b5e:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   43b60:	f7ff ffc4 	bl	43aec <uECC_vli_sub>
	if (l_borrow) {
   43b64:	b138      	cbz	r0, 43b76 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   43b66:	4633      	mov	r3, r6
   43b68:	462a      	mov	r2, r5
   43b6a:	4621      	mov	r1, r4
   43b6c:	4620      	mov	r0, r4
}
   43b6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   43b72:	f7ff be96 	b.w	438a2 <uECC_vli_add>
}
   43b76:	bd70      	pop	{r4, r5, r6, pc}

00043b78 <uECC_vli_mmod>:
{
   43b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   43b7c:	b0a5      	sub	sp, #148	; 0x94
   43b7e:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   43b80:	ab14      	add	r3, sp, #80	; 0x50
   43b82:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   43b86:	9001      	str	r0, [sp, #4]
			   uECC_vli_numBits(mod, num_words);
   43b88:	4629      	mov	r1, r5
   43b8a:	4610      	mov	r0, r2
{
   43b8c:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   43b8e:	f7ff ff5a 	bl	43a46 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   43b92:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   43b96:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   43b98:	2c00      	cmp	r4, #0
   43b9a:	4621      	mov	r1, r4
   43b9c:	bfb8      	it	lt
   43b9e:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   43ba2:	4263      	negs	r3, r4
   43ba4:	f003 031f 	and.w	r3, r3, #31
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   43ba8:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   43bac:	f004 061f 	and.w	r6, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   43bb0:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   43bb2:	bf58      	it	pl
   43bb4:	425e      	negpl	r6, r3
	uECC_vli_clear(mod_multiple, word_shift);
   43bb6:	f7ff ff23 	bl	43a00 <uECC_vli_clear>
	if (bit_shift > 0) {
   43bba:	2e00      	cmp	r6, #0
   43bbc:	ea4f 0081 	mov.w	r0, r1, lsl #2
   43bc0:	dd2d      	ble.n	43c1e <uECC_vli_mmod+0xa6>
   43bc2:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   43bc4:	2200      	movs	r2, #0
   43bc6:	4418      	add	r0, r3
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   43bc8:	f1c6 0e20 	rsb	lr, r6, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   43bcc:	4613      	mov	r3, r2
   43bce:	429d      	cmp	r5, r3
   43bd0:	d81a      	bhi.n	43c08 <uECC_vli_mmod+0x90>
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   43bd2:	ab04      	add	r3, sp, #16
   43bd4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   43bd8:	9300      	str	r3, [sp, #0]
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   43bda:	1e6f      	subs	r7, r5, #1
   43bdc:	ab24      	add	r3, sp, #144	; 0x90
		for (i = 0; i < num_words * 2; ++i) {
   43bde:	ea4f 0845 	mov.w	r8, r5, lsl #1
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   43be2:	ea4f 0985 	mov.w	r9, r5, lsl #2
   43be6:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   43be8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   43bec:	2c00      	cmp	r4, #0
   43bee:	da53      	bge.n	43c98 <uECC_vli_mmod+0x120>
	uECC_vli_set(result, v[index], num_words);
   43bf0:	ab24      	add	r3, sp, #144	; 0x90
   43bf2:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   43bf6:	9801      	ldr	r0, [sp, #4]
   43bf8:	f856 1c88 	ldr.w	r1, [r6, #-136]
   43bfc:	462a      	mov	r2, r5
   43bfe:	f7ff ff42 	bl	43a86 <uECC_vli_set>
}
   43c02:	b025      	add	sp, #148	; 0x94
   43c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   43c08:	f857 c023 	ldr.w	ip, [r7, r3, lsl #2]
   43c0c:	fa0c f106 	lsl.w	r1, ip, r6
   43c10:	430a      	orrs	r2, r1
   43c12:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   43c16:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   43c18:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   43c1c:	e7d7      	b.n	43bce <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   43c1e:	ab04      	add	r3, sp, #16
   43c20:	462a      	mov	r2, r5
   43c22:	4639      	mov	r1, r7
   43c24:	4418      	add	r0, r3
   43c26:	f7ff ff2e 	bl	43a86 <uECC_vli_set>
   43c2a:	e7d2      	b.n	43bd2 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   43c2c:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   43c30:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   43c34:	ab24      	add	r3, sp, #144	; 0x90
   43c36:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   43c3a:	f10c 0c01 	add.w	ip, ip, #1
   43c3e:	f853 3c80 	ldr.w	r3, [r3, #-128]
   43c42:	440b      	add	r3, r1
   43c44:	1ad3      	subs	r3, r2, r3
   43c46:	bf34      	ite	cc
   43c48:	f04f 0b01 	movcc.w	fp, #1
   43c4c:	f04f 0b00 	movcs.w	fp, #0
			if (diff != v[index][i]) {
   43c50:	429a      	cmp	r2, r3
			v[1 - index][i] = diff;
   43c52:	f85e 2c88 	ldr.w	r2, [lr, #-136]
   43c56:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
				borrow = (diff > v[index][i]);
   43c5a:	bf18      	it	ne
   43c5c:	4659      	movne	r1, fp
		for (i = 0; i < num_words * 2; ++i) {
   43c5e:	fa4f f08c 	sxtb.w	r0, ip
   43c62:	4540      	cmp	r0, r8
   43c64:	dbe2      	blt.n	43c2c <uECC_vli_mmod+0xb4>
		index = !(index ^ borrow);
   43c66:	1a73      	subs	r3, r6, r1
   43c68:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   43c6a:	4629      	mov	r1, r5
   43c6c:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   43c6e:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   43c70:	f7ff fe31 	bl	438d6 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   43c74:	f109 0390 	add.w	r3, r9, #144	; 0x90
   43c78:	446b      	add	r3, sp
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   43c7a:	9800      	ldr	r0, [sp, #0]
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   43c7c:	f853 2c80 	ldr.w	r2, [r3, #-128]
   43c80:	f857 3c80 	ldr.w	r3, [r7, #-128]
   43c84:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   43c88:	f847 3c80 	str.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   43c8c:	4629      	mov	r1, r5
   43c8e:	3c01      	subs	r4, #1
   43c90:	f7ff fe21 	bl	438d6 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   43c94:	b224      	sxth	r4, r4
   43c96:	e7a9      	b.n	43bec <uECC_vli_mmod+0x74>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   43c98:	ab24      	add	r3, sp, #144	; 0x90
   43c9a:	f04f 0c00 	mov.w	ip, #0
			v[1 - index][i] = diff;
   43c9e:	f1c6 0e01 	rsb	lr, r6, #1
		uECC_word_t borrow = 0;
   43ca2:	4661      	mov	r1, ip
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   43ca4:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   43ca8:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
   43cac:	e7d7      	b.n	43c5e <uECC_vli_mmod+0xe6>

00043cae <uECC_vli_modMult_fast>:
{
   43cae:	b530      	push	{r4, r5, lr}
   43cb0:	461c      	mov	r4, r3
   43cb2:	b091      	sub	sp, #68	; 0x44
   43cb4:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   43cb6:	f993 3000 	ldrsb.w	r3, [r3]
   43cba:	4668      	mov	r0, sp
   43cbc:	f7ff fe38 	bl	43930 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   43cc0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   43cc4:	4669      	mov	r1, sp
   43cc6:	4628      	mov	r0, r5
   43cc8:	4798      	blx	r3
}
   43cca:	b011      	add	sp, #68	; 0x44
   43ccc:	bd30      	pop	{r4, r5, pc}

00043cce <uECC_vli_modSquare_fast>:
{
   43cce:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   43cd0:	460a      	mov	r2, r1
   43cd2:	f7ff bfec 	b.w	43cae <uECC_vli_modMult_fast>

00043cd6 <double_jacobian_default>:
{
   43cd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   43cda:	f993 6000 	ldrsb.w	r6, [r3]
{
   43cde:	b092      	sub	sp, #72	; 0x48
   43ce0:	4604      	mov	r4, r0
   43ce2:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   43ce4:	4610      	mov	r0, r2
   43ce6:	4631      	mov	r1, r6
{
   43ce8:	4615      	mov	r5, r2
   43cea:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   43cec:	f7ff fe93 	bl	43a16 <uECC_vli_isZero>
   43cf0:	2800      	cmp	r0, #0
   43cf2:	f040 8091 	bne.w	43e18 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   43cf6:	463a      	mov	r2, r7
   43cf8:	4649      	mov	r1, r9
   43cfa:	a802      	add	r0, sp, #8
   43cfc:	f7ff ffe7 	bl	43cce <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   43d00:	463b      	mov	r3, r7
   43d02:	aa02      	add	r2, sp, #8
   43d04:	4621      	mov	r1, r4
   43d06:	a80a      	add	r0, sp, #40	; 0x28
   43d08:	f7ff ffd1 	bl	43cae <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   43d0c:	a902      	add	r1, sp, #8
   43d0e:	4608      	mov	r0, r1
   43d10:	463a      	mov	r2, r7
   43d12:	f7ff ffdc 	bl	43cce <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   43d16:	463b      	mov	r3, r7
   43d18:	462a      	mov	r2, r5
   43d1a:	4649      	mov	r1, r9
   43d1c:	4648      	mov	r0, r9
   43d1e:	f7ff ffc6 	bl	43cae <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   43d22:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   43d26:	463a      	mov	r2, r7
   43d28:	4629      	mov	r1, r5
   43d2a:	4628      	mov	r0, r5
   43d2c:	f7ff ffcf 	bl	43cce <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   43d30:	4643      	mov	r3, r8
   43d32:	462a      	mov	r2, r5
   43d34:	4621      	mov	r1, r4
   43d36:	4620      	mov	r0, r4
   43d38:	9600      	str	r6, [sp, #0]
   43d3a:	f7ff fef2 	bl	43b22 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   43d3e:	4643      	mov	r3, r8
   43d40:	462a      	mov	r2, r5
   43d42:	4629      	mov	r1, r5
   43d44:	4628      	mov	r0, r5
   43d46:	9600      	str	r6, [sp, #0]
   43d48:	f7ff feeb 	bl	43b22 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   43d4c:	4643      	mov	r3, r8
   43d4e:	462a      	mov	r2, r5
   43d50:	4621      	mov	r1, r4
   43d52:	4628      	mov	r0, r5
   43d54:	9600      	str	r6, [sp, #0]
   43d56:	f7ff fefd 	bl	43b54 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   43d5a:	463b      	mov	r3, r7
   43d5c:	462a      	mov	r2, r5
   43d5e:	4621      	mov	r1, r4
   43d60:	4620      	mov	r0, r4
   43d62:	f7ff ffa4 	bl	43cae <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   43d66:	4643      	mov	r3, r8
   43d68:	4622      	mov	r2, r4
   43d6a:	4621      	mov	r1, r4
   43d6c:	4628      	mov	r0, r5
   43d6e:	9600      	str	r6, [sp, #0]
   43d70:	f7ff fed7 	bl	43b22 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   43d74:	4643      	mov	r3, r8
   43d76:	9600      	str	r6, [sp, #0]
   43d78:	462a      	mov	r2, r5
   43d7a:	4621      	mov	r1, r4
   43d7c:	4620      	mov	r0, r4
   43d7e:	f7ff fed0 	bl	43b22 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   43d82:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   43d84:	07db      	lsls	r3, r3, #31
   43d86:	d54a      	bpl.n	43e1e <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   43d88:	4633      	mov	r3, r6
   43d8a:	4642      	mov	r2, r8
   43d8c:	4621      	mov	r1, r4
   43d8e:	4620      	mov	r0, r4
   43d90:	f7ff fd87 	bl	438a2 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   43d94:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   43d96:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   43d98:	4620      	mov	r0, r4
   43d9a:	f7ff fd9c 	bl	438d6 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   43d9e:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   43da2:	3b01      	subs	r3, #1
   43da4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   43da8:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   43dac:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   43db0:	463a      	mov	r2, r7
   43db2:	4621      	mov	r1, r4
   43db4:	4628      	mov	r0, r5
   43db6:	f7ff ff8a 	bl	43cce <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   43dba:	4643      	mov	r3, r8
   43dbc:	aa0a      	add	r2, sp, #40	; 0x28
   43dbe:	4629      	mov	r1, r5
   43dc0:	4628      	mov	r0, r5
   43dc2:	9600      	str	r6, [sp, #0]
   43dc4:	f7ff fec6 	bl	43b54 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   43dc8:	4643      	mov	r3, r8
   43dca:	aa0a      	add	r2, sp, #40	; 0x28
   43dcc:	4629      	mov	r1, r5
   43dce:	4628      	mov	r0, r5
   43dd0:	9600      	str	r6, [sp, #0]
   43dd2:	f7ff febf 	bl	43b54 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   43dd6:	a90a      	add	r1, sp, #40	; 0x28
   43dd8:	4608      	mov	r0, r1
   43dda:	4643      	mov	r3, r8
   43ddc:	462a      	mov	r2, r5
   43dde:	9600      	str	r6, [sp, #0]
   43de0:	f7ff feb8 	bl	43b54 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   43de4:	463b      	mov	r3, r7
   43de6:	aa0a      	add	r2, sp, #40	; 0x28
   43de8:	4621      	mov	r1, r4
   43dea:	4620      	mov	r0, r4
   43dec:	f7ff ff5f 	bl	43cae <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   43df0:	aa02      	add	r2, sp, #8
   43df2:	4643      	mov	r3, r8
   43df4:	4610      	mov	r0, r2
   43df6:	4621      	mov	r1, r4
   43df8:	9600      	str	r6, [sp, #0]
   43dfa:	f7ff feab 	bl	43b54 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   43dfe:	4632      	mov	r2, r6
   43e00:	4629      	mov	r1, r5
   43e02:	4620      	mov	r0, r4
   43e04:	f7ff fe3f 	bl	43a86 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   43e08:	4649      	mov	r1, r9
   43e0a:	4628      	mov	r0, r5
   43e0c:	f7ff fe3b 	bl	43a86 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   43e10:	a902      	add	r1, sp, #8
   43e12:	4648      	mov	r0, r9
   43e14:	f7ff fe37 	bl	43a86 <uECC_vli_set>
}
   43e18:	b012      	add	sp, #72	; 0x48
   43e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   43e1e:	4631      	mov	r1, r6
   43e20:	4620      	mov	r0, r4
   43e22:	f7ff fd58 	bl	438d6 <uECC_vli_rshift1>
   43e26:	e7c3      	b.n	43db0 <double_jacobian_default+0xda>

00043e28 <x_side_default>:
{
   43e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   43e2c:	4615      	mov	r5, r2
   43e2e:	b08a      	sub	sp, #40	; 0x28
   43e30:	4604      	mov	r4, r0
   43e32:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   43e34:	221c      	movs	r2, #28
   43e36:	2100      	movs	r1, #0
   43e38:	a803      	add	r0, sp, #12
   43e3a:	f000 fe4d 	bl	44ad8 <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   43e3e:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   43e40:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   43e44:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   43e46:	462a      	mov	r2, r5
   43e48:	4631      	mov	r1, r6
   43e4a:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   43e4c:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   43e4e:	f7ff ff3e 	bl	43cce <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   43e52:	463b      	mov	r3, r7
   43e54:	aa02      	add	r2, sp, #8
   43e56:	4621      	mov	r1, r4
   43e58:	4620      	mov	r0, r4
   43e5a:	f8cd 8000 	str.w	r8, [sp]
   43e5e:	f7ff fe79 	bl	43b54 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   43e62:	462b      	mov	r3, r5
   43e64:	4632      	mov	r2, r6
   43e66:	4621      	mov	r1, r4
   43e68:	4620      	mov	r0, r4
   43e6a:	f7ff ff20 	bl	43cae <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   43e6e:	f8cd 8000 	str.w	r8, [sp]
   43e72:	463b      	mov	r3, r7
   43e74:	f105 0284 	add.w	r2, r5, #132	; 0x84
   43e78:	4621      	mov	r1, r4
   43e7a:	4620      	mov	r0, r4
   43e7c:	f7ff fe51 	bl	43b22 <uECC_vli_modAdd>
}
   43e80:	b00a      	add	sp, #40	; 0x28
   43e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00043e86 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   43e86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   43e8a:	b09a      	sub	sp, #104	; 0x68
   43e8c:	4616      	mov	r6, r2
   43e8e:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   43e92:	4644      	mov	r4, r8
{
   43e94:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   43e96:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   43e9a:	9500      	str	r5, [sp, #0]
{
   43e9c:	4607      	mov	r7, r0
   43e9e:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   43ea0:	4623      	mov	r3, r4
   43ea2:	4602      	mov	r2, r0
   43ea4:	4631      	mov	r1, r6
   43ea6:	a802      	add	r0, sp, #8
   43ea8:	f7ff fe54 	bl	43b54 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   43eac:	a902      	add	r1, sp, #8
   43eae:	4642      	mov	r2, r8
   43eb0:	4608      	mov	r0, r1
   43eb2:	f7ff ff0c 	bl	43cce <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   43eb6:	4643      	mov	r3, r8
   43eb8:	aa02      	add	r2, sp, #8
   43eba:	4639      	mov	r1, r7
   43ebc:	4638      	mov	r0, r7
   43ebe:	f7ff fef6 	bl	43cae <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   43ec2:	4643      	mov	r3, r8
   43ec4:	aa02      	add	r2, sp, #8
   43ec6:	4631      	mov	r1, r6
   43ec8:	4630      	mov	r0, r6
   43eca:	f7ff fef0 	bl	43cae <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   43ece:	4623      	mov	r3, r4
   43ed0:	4652      	mov	r2, sl
   43ed2:	4649      	mov	r1, r9
   43ed4:	a802      	add	r0, sp, #8
   43ed6:	9500      	str	r5, [sp, #0]
   43ed8:	f7ff fe23 	bl	43b22 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   43edc:	4623      	mov	r3, r4
   43ede:	4652      	mov	r2, sl
   43ee0:	4649      	mov	r1, r9
   43ee2:	4648      	mov	r0, r9
   43ee4:	9500      	str	r5, [sp, #0]
   43ee6:	f7ff fe35 	bl	43b54 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   43eea:	4623      	mov	r3, r4
   43eec:	463a      	mov	r2, r7
   43eee:	4631      	mov	r1, r6
   43ef0:	a80a      	add	r0, sp, #40	; 0x28
   43ef2:	9500      	str	r5, [sp, #0]
   43ef4:	f7ff fe2e 	bl	43b54 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   43ef8:	4643      	mov	r3, r8
   43efa:	aa0a      	add	r2, sp, #40	; 0x28
   43efc:	4651      	mov	r1, sl
   43efe:	4650      	mov	r0, sl
   43f00:	f7ff fed5 	bl	43cae <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   43f04:	4623      	mov	r3, r4
   43f06:	4632      	mov	r2, r6
   43f08:	4639      	mov	r1, r7
   43f0a:	a80a      	add	r0, sp, #40	; 0x28
   43f0c:	9500      	str	r5, [sp, #0]
   43f0e:	f7ff fe08 	bl	43b22 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   43f12:	4642      	mov	r2, r8
   43f14:	4649      	mov	r1, r9
   43f16:	4630      	mov	r0, r6
   43f18:	f7ff fed9 	bl	43cce <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   43f1c:	4623      	mov	r3, r4
   43f1e:	aa0a      	add	r2, sp, #40	; 0x28
   43f20:	4631      	mov	r1, r6
   43f22:	4630      	mov	r0, r6
   43f24:	9500      	str	r5, [sp, #0]
   43f26:	f7ff fe15 	bl	43b54 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   43f2a:	4623      	mov	r3, r4
   43f2c:	4632      	mov	r2, r6
   43f2e:	4639      	mov	r1, r7
   43f30:	a812      	add	r0, sp, #72	; 0x48
   43f32:	9500      	str	r5, [sp, #0]
   43f34:	f7ff fe0e 	bl	43b54 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   43f38:	4643      	mov	r3, r8
   43f3a:	aa12      	add	r2, sp, #72	; 0x48
   43f3c:	4649      	mov	r1, r9
   43f3e:	4648      	mov	r0, r9
   43f40:	f7ff feb5 	bl	43cae <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   43f44:	4623      	mov	r3, r4
   43f46:	4652      	mov	r2, sl
   43f48:	4649      	mov	r1, r9
   43f4a:	4648      	mov	r0, r9
   43f4c:	9500      	str	r5, [sp, #0]
   43f4e:	f7ff fe01 	bl	43b54 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   43f52:	4642      	mov	r2, r8
   43f54:	a902      	add	r1, sp, #8
   43f56:	a812      	add	r0, sp, #72	; 0x48
   43f58:	f7ff feb9 	bl	43cce <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   43f5c:	a912      	add	r1, sp, #72	; 0x48
   43f5e:	4623      	mov	r3, r4
   43f60:	aa0a      	add	r2, sp, #40	; 0x28
   43f62:	4608      	mov	r0, r1
   43f64:	9500      	str	r5, [sp, #0]
   43f66:	f7ff fdf5 	bl	43b54 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   43f6a:	4623      	mov	r3, r4
   43f6c:	463a      	mov	r2, r7
   43f6e:	a912      	add	r1, sp, #72	; 0x48
   43f70:	a80a      	add	r0, sp, #40	; 0x28
   43f72:	9500      	str	r5, [sp, #0]
   43f74:	f7ff fdee 	bl	43b54 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   43f78:	a90a      	add	r1, sp, #40	; 0x28
   43f7a:	4643      	mov	r3, r8
   43f7c:	aa02      	add	r2, sp, #8
   43f7e:	4608      	mov	r0, r1
   43f80:	f7ff fe95 	bl	43cae <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   43f84:	4623      	mov	r3, r4
   43f86:	4652      	mov	r2, sl
   43f88:	a90a      	add	r1, sp, #40	; 0x28
   43f8a:	4650      	mov	r0, sl
   43f8c:	9500      	str	r5, [sp, #0]
   43f8e:	f7ff fde1 	bl	43b54 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   43f92:	462a      	mov	r2, r5
   43f94:	a912      	add	r1, sp, #72	; 0x48
   43f96:	4638      	mov	r0, r7
   43f98:	f7ff fd75 	bl	43a86 <uECC_vli_set>
}
   43f9c:	b01a      	add	sp, #104	; 0x68
   43f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00043fa2 <uECC_vli_modInv>:
{
   43fa2:	b5f0      	push	{r4, r5, r6, r7, lr}
   43fa4:	460f      	mov	r7, r1
   43fa6:	b0a1      	sub	sp, #132	; 0x84
   43fa8:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   43faa:	4619      	mov	r1, r3
   43fac:	4638      	mov	r0, r7
{
   43fae:	4615      	mov	r5, r2
   43fb0:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   43fb2:	f7ff fd30 	bl	43a16 <uECC_vli_isZero>
   43fb6:	b128      	cbz	r0, 43fc4 <uECC_vli_modInv+0x22>
		uECC_vli_clear(result, num_words);
   43fb8:	4630      	mov	r0, r6
}
   43fba:	b021      	add	sp, #132	; 0x84
   43fbc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		uECC_vli_clear(result, num_words);
   43fc0:	f7ff bd1e 	b.w	43a00 <uECC_vli_clear>
	uECC_vli_set(a, input, num_words);
   43fc4:	4622      	mov	r2, r4
   43fc6:	4639      	mov	r1, r7
   43fc8:	4668      	mov	r0, sp
   43fca:	f7ff fd5c 	bl	43a86 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   43fce:	4629      	mov	r1, r5
   43fd0:	a808      	add	r0, sp, #32
   43fd2:	f7ff fd58 	bl	43a86 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   43fd6:	a810      	add	r0, sp, #64	; 0x40
   43fd8:	4621      	mov	r1, r4
   43fda:	f7ff fd11 	bl	43a00 <uECC_vli_clear>
	u[0] = 1;
   43fde:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   43fe0:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   43fe2:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   43fe4:	f7ff fd0c 	bl	43a00 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   43fe8:	4622      	mov	r2, r4
   43fea:	a908      	add	r1, sp, #32
   43fec:	4668      	mov	r0, sp
   43fee:	f7ff fd56 	bl	43a9e <uECC_vli_cmp_unsafe>
   43ff2:	b930      	cbnz	r0, 44002 <uECC_vli_modInv+0x60>
  	uECC_vli_set(result, u, num_words);
   43ff4:	4622      	mov	r2, r4
   43ff6:	a910      	add	r1, sp, #64	; 0x40
   43ff8:	4630      	mov	r0, r6
   43ffa:	f7ff fd44 	bl	43a86 <uECC_vli_set>
}
   43ffe:	b021      	add	sp, #132	; 0x84
   44000:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (EVEN(a)) {
   44002:	9b00      	ldr	r3, [sp, #0]
   44004:	07da      	lsls	r2, r3, #31
   44006:	d409      	bmi.n	4401c <uECC_vli_modInv+0x7a>
			uECC_vli_rshift1(a, num_words);
   44008:	4621      	mov	r1, r4
   4400a:	4668      	mov	r0, sp
   4400c:	f7ff fc63 	bl	438d6 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   44010:	4622      	mov	r2, r4
   44012:	4629      	mov	r1, r5
   44014:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   44016:	f7ff fc6b 	bl	438f0 <vli_modInv_update>
   4401a:	e7e5      	b.n	43fe8 <uECC_vli_modInv+0x46>
    		} else if (EVEN(b)) {
   4401c:	9b08      	ldr	r3, [sp, #32]
   4401e:	07db      	lsls	r3, r3, #31
   44020:	d407      	bmi.n	44032 <uECC_vli_modInv+0x90>
			uECC_vli_rshift1(b, num_words);
   44022:	4621      	mov	r1, r4
   44024:	a808      	add	r0, sp, #32
   44026:	f7ff fc56 	bl	438d6 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   4402a:	4622      	mov	r2, r4
   4402c:	4629      	mov	r1, r5
   4402e:	a818      	add	r0, sp, #96	; 0x60
   44030:	e7f1      	b.n	44016 <uECC_vli_modInv+0x74>
		} else if (cmpResult > 0) {
   44032:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   44034:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   44036:	dd1c      	ble.n	44072 <uECC_vli_modInv+0xd0>
			uECC_vli_sub(a, a, b, num_words);
   44038:	aa08      	add	r2, sp, #32
   4403a:	4669      	mov	r1, sp
   4403c:	4668      	mov	r0, sp
   4403e:	f7ff fd55 	bl	43aec <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   44042:	4621      	mov	r1, r4
   44044:	4668      	mov	r0, sp
   44046:	f7ff fc46 	bl	438d6 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   4404a:	4622      	mov	r2, r4
   4404c:	a918      	add	r1, sp, #96	; 0x60
   4404e:	a810      	add	r0, sp, #64	; 0x40
   44050:	f7ff fd25 	bl	43a9e <uECC_vli_cmp_unsafe>
   44054:	2800      	cmp	r0, #0
   44056:	da05      	bge.n	44064 <uECC_vli_modInv+0xc2>
        			uECC_vli_add(u, u, mod, num_words);
   44058:	a910      	add	r1, sp, #64	; 0x40
   4405a:	4623      	mov	r3, r4
   4405c:	462a      	mov	r2, r5
   4405e:	4608      	mov	r0, r1
   44060:	f7ff fc1f 	bl	438a2 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   44064:	a910      	add	r1, sp, #64	; 0x40
   44066:	4623      	mov	r3, r4
   44068:	aa18      	add	r2, sp, #96	; 0x60
   4406a:	4608      	mov	r0, r1
   4406c:	f7ff fd3e 	bl	43aec <uECC_vli_sub>
   44070:	e7ce      	b.n	44010 <uECC_vli_modInv+0x6e>
      			uECC_vli_sub(b, b, a, num_words);
   44072:	466a      	mov	r2, sp
   44074:	a808      	add	r0, sp, #32
   44076:	f7ff fd39 	bl	43aec <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   4407a:	4621      	mov	r1, r4
   4407c:	a808      	add	r0, sp, #32
   4407e:	f7ff fc2a 	bl	438d6 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   44082:	4622      	mov	r2, r4
   44084:	a910      	add	r1, sp, #64	; 0x40
   44086:	a818      	add	r0, sp, #96	; 0x60
   44088:	f7ff fd09 	bl	43a9e <uECC_vli_cmp_unsafe>
   4408c:	2800      	cmp	r0, #0
   4408e:	da05      	bge.n	4409c <uECC_vli_modInv+0xfa>
        			uECC_vli_add(v, v, mod, num_words);
   44090:	a918      	add	r1, sp, #96	; 0x60
   44092:	4623      	mov	r3, r4
   44094:	462a      	mov	r2, r5
   44096:	4608      	mov	r0, r1
   44098:	f7ff fc03 	bl	438a2 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   4409c:	a918      	add	r1, sp, #96	; 0x60
   4409e:	4623      	mov	r3, r4
   440a0:	aa10      	add	r2, sp, #64	; 0x40
   440a2:	4608      	mov	r0, r1
   440a4:	f7ff fd22 	bl	43aec <uECC_vli_sub>
   440a8:	e7bf      	b.n	4402a <uECC_vli_modInv+0x88>

000440aa <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   440aa:	7809      	ldrb	r1, [r1, #0]
   440ac:	0049      	lsls	r1, r1, #1
   440ae:	b249      	sxtb	r1, r1
   440b0:	f7ff bcb1 	b.w	43a16 <uECC_vli_isZero>

000440b4 <apply_z>:
{
   440b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   440b6:	4615      	mov	r5, r2
   440b8:	b089      	sub	sp, #36	; 0x24
   440ba:	461c      	mov	r4, r3
   440bc:	4607      	mov	r7, r0
   440be:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   440c0:	461a      	mov	r2, r3
   440c2:	4629      	mov	r1, r5
   440c4:	4668      	mov	r0, sp
   440c6:	f7ff fe02 	bl	43cce <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   440ca:	4623      	mov	r3, r4
   440cc:	466a      	mov	r2, sp
   440ce:	4639      	mov	r1, r7
   440d0:	4638      	mov	r0, r7
   440d2:	f7ff fdec 	bl	43cae <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   440d6:	4623      	mov	r3, r4
   440d8:	462a      	mov	r2, r5
   440da:	4669      	mov	r1, sp
   440dc:	4668      	mov	r0, sp
   440de:	f7ff fde6 	bl	43cae <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   440e2:	4623      	mov	r3, r4
   440e4:	466a      	mov	r2, sp
   440e6:	4631      	mov	r1, r6
   440e8:	4630      	mov	r0, r6
   440ea:	f7ff fde0 	bl	43cae <uECC_vli_modMult_fast>
}
   440ee:	b009      	add	sp, #36	; 0x24
   440f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000440f2 <XYcZ_add>:
{
   440f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   440f6:	b08a      	sub	sp, #40	; 0x28
   440f8:	4614      	mov	r4, r2
   440fa:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   440fe:	4655      	mov	r5, sl
{
   44100:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   44102:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   44106:	9600      	str	r6, [sp, #0]
{
   44108:	4680      	mov	r8, r0
   4410a:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   4410c:	462b      	mov	r3, r5
   4410e:	4602      	mov	r2, r0
   44110:	4621      	mov	r1, r4
   44112:	a802      	add	r0, sp, #8
   44114:	f7ff fd1e 	bl	43b54 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   44118:	a902      	add	r1, sp, #8
   4411a:	4652      	mov	r2, sl
   4411c:	4608      	mov	r0, r1
   4411e:	f7ff fdd6 	bl	43cce <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   44122:	4653      	mov	r3, sl
   44124:	aa02      	add	r2, sp, #8
   44126:	4641      	mov	r1, r8
   44128:	4640      	mov	r0, r8
   4412a:	f7ff fdc0 	bl	43cae <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   4412e:	4653      	mov	r3, sl
   44130:	aa02      	add	r2, sp, #8
   44132:	4621      	mov	r1, r4
   44134:	4620      	mov	r0, r4
   44136:	f7ff fdba 	bl	43cae <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   4413a:	462b      	mov	r3, r5
   4413c:	464a      	mov	r2, r9
   4413e:	4639      	mov	r1, r7
   44140:	4638      	mov	r0, r7
   44142:	9600      	str	r6, [sp, #0]
   44144:	f7ff fd06 	bl	43b54 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   44148:	4652      	mov	r2, sl
   4414a:	4639      	mov	r1, r7
   4414c:	a802      	add	r0, sp, #8
   4414e:	f7ff fdbe 	bl	43cce <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   44152:	a902      	add	r1, sp, #8
   44154:	462b      	mov	r3, r5
   44156:	4642      	mov	r2, r8
   44158:	4608      	mov	r0, r1
   4415a:	9600      	str	r6, [sp, #0]
   4415c:	f7ff fcfa 	bl	43b54 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   44160:	a902      	add	r1, sp, #8
   44162:	462b      	mov	r3, r5
   44164:	4622      	mov	r2, r4
   44166:	4608      	mov	r0, r1
   44168:	9600      	str	r6, [sp, #0]
   4416a:	f7ff fcf3 	bl	43b54 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   4416e:	462b      	mov	r3, r5
   44170:	4642      	mov	r2, r8
   44172:	4621      	mov	r1, r4
   44174:	4620      	mov	r0, r4
   44176:	9600      	str	r6, [sp, #0]
   44178:	f7ff fcec 	bl	43b54 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   4417c:	4653      	mov	r3, sl
   4417e:	4622      	mov	r2, r4
   44180:	4649      	mov	r1, r9
   44182:	4648      	mov	r0, r9
   44184:	f7ff fd93 	bl	43cae <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   44188:	462b      	mov	r3, r5
   4418a:	aa02      	add	r2, sp, #8
   4418c:	4641      	mov	r1, r8
   4418e:	4620      	mov	r0, r4
   44190:	9600      	str	r6, [sp, #0]
   44192:	f7ff fcdf 	bl	43b54 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   44196:	4653      	mov	r3, sl
   44198:	4622      	mov	r2, r4
   4419a:	4639      	mov	r1, r7
   4419c:	4638      	mov	r0, r7
   4419e:	f7ff fd86 	bl	43cae <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   441a2:	462b      	mov	r3, r5
   441a4:	464a      	mov	r2, r9
   441a6:	4639      	mov	r1, r7
   441a8:	4638      	mov	r0, r7
   441aa:	9600      	str	r6, [sp, #0]
   441ac:	f7ff fcd2 	bl	43b54 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   441b0:	4632      	mov	r2, r6
   441b2:	a902      	add	r1, sp, #8
   441b4:	4620      	mov	r0, r4
   441b6:	f7ff fc66 	bl	43a86 <uECC_vli_set>
}
   441ba:	b00a      	add	sp, #40	; 0x28
   441bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000441c0 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   441c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   441c4:	b0af      	sub	sp, #188	; 0xbc
   441c6:	4691      	mov	r9, r2
   441c8:	9c39      	ldr	r4, [sp, #228]	; 0xe4
   441ca:	9002      	str	r0, [sp, #8]
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   441cc:	f994 6000 	ldrsb.w	r6, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   441d0:	a816      	add	r0, sp, #88	; 0x58
   441d2:	4632      	mov	r2, r6
{
   441d4:	461d      	mov	r5, r3
	uECC_vli_set(Rx[1], point, num_words);
   441d6:	f7ff fc56 	bl	43a86 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   441da:	00b3      	lsls	r3, r6, #2
   441dc:	9303      	str	r3, [sp, #12]
   441de:	eb01 0386 	add.w	r3, r1, r6, lsl #2
{
   441e2:	4688      	mov	r8, r1
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   441e4:	a826      	add	r0, sp, #152	; 0x98
   441e6:	4619      	mov	r1, r3
   441e8:	9304      	str	r3, [sp, #16]
   441ea:	f7ff fc4c 	bl	43a86 <uECC_vli_set>
	if (initial_Z) {
   441ee:	2d00      	cmp	r5, #0
   441f0:	f000 8081 	beq.w	442f6 <EccPoint_mult+0x136>
		uECC_vli_set(z, initial_Z, num_words);
   441f4:	4629      	mov	r1, r5
   441f6:	a806      	add	r0, sp, #24
   441f8:	f7ff fc45 	bl	43a86 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   441fc:	4632      	mov	r2, r6
   441fe:	a916      	add	r1, sp, #88	; 0x58
   44200:	a80e      	add	r0, sp, #56	; 0x38
   44202:	f7ff fc40 	bl	43a86 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   44206:	a926      	add	r1, sp, #152	; 0x98
   44208:	a81e      	add	r0, sp, #120	; 0x78
   4420a:	f7ff fc3c 	bl	43a86 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   4420e:	4623      	mov	r3, r4
   44210:	aa06      	add	r2, sp, #24
   44212:	a816      	add	r0, sp, #88	; 0x58
   44214:	f7ff ff4e 	bl	440b4 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   44218:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   4421c:	4623      	mov	r3, r4
   4421e:	aa06      	add	r2, sp, #24
   44220:	a926      	add	r1, sp, #152	; 0x98
   44222:	a816      	add	r0, sp, #88	; 0x58
   44224:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   44226:	4623      	mov	r3, r4
   44228:	aa06      	add	r2, sp, #24
   4422a:	a91e      	add	r1, sp, #120	; 0x78
   4422c:	a80e      	add	r0, sp, #56	; 0x38
   4422e:	f7ff ff41 	bl	440b4 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   44232:	f9bd 50e0 	ldrsh.w	r5, [sp, #224]	; 0xe0
   44236:	3d02      	subs	r5, #2
   44238:	b22d      	sxth	r5, r5
   4423a:	2d00      	cmp	r5, #0
   4423c:	dc62      	bgt.n	44304 <EccPoint_mult+0x144>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   4423e:	f8d9 5000 	ldr.w	r5, [r9]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   44242:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   44244:	f005 0701 	and.w	r7, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   44248:	ab0e      	add	r3, sp, #56	; 0x38
   4424a:	eb03 1947 	add.w	r9, r3, r7, lsl #5
   4424e:	43ed      	mvns	r5, r5
   44250:	ab1e      	add	r3, sp, #120	; 0x78
   44252:	eb03 1747 	add.w	r7, r3, r7, lsl #5
   44256:	f005 0501 	and.w	r5, r5, #1
   4425a:	ab0e      	add	r3, sp, #56	; 0x38
   4425c:	eb03 1a45 	add.w	sl, r3, r5, lsl #5
   44260:	ab1e      	add	r3, sp, #120	; 0x78
   44262:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   44266:	462b      	mov	r3, r5
   44268:	4652      	mov	r2, sl
   4426a:	4639      	mov	r1, r7
   4426c:	4648      	mov	r0, r9

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   4426e:	f104 0b04 	add.w	fp, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   44272:	f7ff fe08 	bl	43e86 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   44276:	465b      	mov	r3, fp
   44278:	aa0e      	add	r2, sp, #56	; 0x38
   4427a:	a916      	add	r1, sp, #88	; 0x58
   4427c:	a806      	add	r0, sp, #24
   4427e:	9600      	str	r6, [sp, #0]
   44280:	f7ff fc68 	bl	43b54 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   44284:	a906      	add	r1, sp, #24
   44286:	4623      	mov	r3, r4
   44288:	463a      	mov	r2, r7
   4428a:	4608      	mov	r0, r1
   4428c:	f7ff fd0f 	bl	43cae <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   44290:	a906      	add	r1, sp, #24
   44292:	4623      	mov	r3, r4
   44294:	4642      	mov	r2, r8
   44296:	4608      	mov	r0, r1
   44298:	f7ff fd09 	bl	43cae <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   4429c:	a906      	add	r1, sp, #24
   4429e:	4633      	mov	r3, r6
   442a0:	465a      	mov	r2, fp
   442a2:	4608      	mov	r0, r1
   442a4:	f7ff fe7d 	bl	43fa2 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   442a8:	a906      	add	r1, sp, #24
   442aa:	9a04      	ldr	r2, [sp, #16]
   442ac:	4623      	mov	r3, r4
   442ae:	4608      	mov	r0, r1
   442b0:	f7ff fcfd 	bl	43cae <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   442b4:	a906      	add	r1, sp, #24
   442b6:	4623      	mov	r3, r4
   442b8:	464a      	mov	r2, r9
   442ba:	4608      	mov	r0, r1
   442bc:	f7ff fcf7 	bl	43cae <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   442c0:	463b      	mov	r3, r7
   442c2:	464a      	mov	r2, r9
   442c4:	4629      	mov	r1, r5
   442c6:	4650      	mov	r0, sl
   442c8:	9400      	str	r4, [sp, #0]
   442ca:	f7ff ff12 	bl	440f2 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   442ce:	4623      	mov	r3, r4
   442d0:	aa06      	add	r2, sp, #24
   442d2:	a91e      	add	r1, sp, #120	; 0x78
   442d4:	a80e      	add	r0, sp, #56	; 0x38
   442d6:	f7ff feed 	bl	440b4 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   442da:	9802      	ldr	r0, [sp, #8]
   442dc:	4632      	mov	r2, r6
   442de:	a90e      	add	r1, sp, #56	; 0x38
   442e0:	f7ff fbd1 	bl	43a86 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   442e4:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
   442e8:	a91e      	add	r1, sp, #120	; 0x78
   442ea:	4418      	add	r0, r3
   442ec:	f7ff fbcb 	bl	43a86 <uECC_vli_set>
}
   442f0:	b02f      	add	sp, #188	; 0xbc
   442f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   442f6:	4631      	mov	r1, r6
   442f8:	a806      	add	r0, sp, #24
   442fa:	f7ff fb81 	bl	43a00 <uECC_vli_clear>
		z[0] = 1;
   442fe:	2301      	movs	r3, #1
   44300:	9306      	str	r3, [sp, #24]
   44302:	e77b      	b.n	441fc <EccPoint_mult+0x3c>
		nb = !uECC_vli_testBit(scalar, i);
   44304:	4629      	mov	r1, r5
   44306:	4648      	mov	r0, r9
   44308:	f7ff fb94 	bl	43a34 <uECC_vli_testBit>
   4430c:	fab0 f780 	clz	r7, r0
   44310:	097f      	lsrs	r7, r7, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   44312:	f1c7 0101 	rsb	r1, r7, #1
   44316:	ab0e      	add	r3, sp, #56	; 0x38
   44318:	eb03 1b41 	add.w	fp, r3, r1, lsl #5
   4431c:	ab1e      	add	r3, sp, #120	; 0x78
   4431e:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   44322:	ab0e      	add	r3, sp, #56	; 0x38
   44324:	eb03 1a47 	add.w	sl, r3, r7, lsl #5
   44328:	ab1e      	add	r3, sp, #120	; 0x78
   4432a:	eb03 1747 	add.w	r7, r3, r7, lsl #5
   4432e:	463b      	mov	r3, r7
   44330:	4652      	mov	r2, sl
   44332:	4658      	mov	r0, fp
   44334:	9400      	str	r4, [sp, #0]
   44336:	9105      	str	r1, [sp, #20]
   44338:	f7ff fda5 	bl	43e86 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   4433c:	9905      	ldr	r1, [sp, #20]
   4433e:	9400      	str	r4, [sp, #0]
   44340:	460b      	mov	r3, r1
   44342:	465a      	mov	r2, fp
   44344:	4639      	mov	r1, r7
   44346:	4650      	mov	r0, sl
   44348:	f7ff fed3 	bl	440f2 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   4434c:	3d01      	subs	r5, #1
   4434e:	e773      	b.n	44238 <EccPoint_mult+0x78>

00044350 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   44350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   44354:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   44358:	f119 061f 	adds.w	r6, r9, #31
   4435c:	bf48      	it	mi
   4435e:	f109 063e 	addmi.w	r6, r9, #62	; 0x3e
{
   44362:	460f      	mov	r7, r1

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   44364:	f103 0524 	add.w	r5, r3, #36	; 0x24
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   44368:	f346 1647 	sbfx	r6, r6, #5, #8
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   4436c:	4601      	mov	r1, r0
{
   4436e:	4690      	mov	r8, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   44370:	4633      	mov	r3, r6
   44372:	462a      	mov	r2, r5
   44374:	4638      	mov	r0, r7
   44376:	f7ff fa94 	bl	438a2 <uECC_vli_add>
   4437a:	4604      	mov	r4, r0
   4437c:	b990      	cbnz	r0, 443a4 <regularize_k+0x54>
   4437e:	ebb9 1f46 	cmp.w	r9, r6, lsl #5
   44382:	da06      	bge.n	44392 <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   44384:	4649      	mov	r1, r9
   44386:	4638      	mov	r0, r7
   44388:	f7ff fb54 	bl	43a34 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   4438c:	1e04      	subs	r4, r0, #0
   4438e:	bf18      	it	ne
   44390:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   44392:	4633      	mov	r3, r6
   44394:	462a      	mov	r2, r5
   44396:	4639      	mov	r1, r7
   44398:	4640      	mov	r0, r8
   4439a:	f7ff fa82 	bl	438a2 <uECC_vli_add>

	return carry;
}
   4439e:	4620      	mov	r0, r4
   443a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   443a4:	2401      	movs	r4, #1
   443a6:	e7f4      	b.n	44392 <regularize_k+0x42>

000443a8 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   443a8:	b530      	push	{r4, r5, lr}
   443aa:	4614      	mov	r4, r2
   443ac:	b095      	sub	sp, #84	; 0x54
   443ae:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   443b0:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   443b2:	4623      	mov	r3, r4
{
   443b4:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   443b6:	a904      	add	r1, sp, #16
   443b8:	9102      	str	r1, [sp, #8]
   443ba:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   443bc:	f7ff ffc8 	bl	44350 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   443c0:	fab0 f380 	clz	r3, r0
   443c4:	9401      	str	r4, [sp, #4]
   443c6:	095b      	lsrs	r3, r3, #5
   443c8:	aa14      	add	r2, sp, #80	; 0x50
   443ca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   443ce:	8863      	ldrh	r3, [r4, #2]
   443d0:	3301      	adds	r3, #1
   443d2:	b21b      	sxth	r3, r3
   443d4:	9300      	str	r3, [sp, #0]
   443d6:	f852 2c48 	ldr.w	r2, [r2, #-72]
   443da:	2300      	movs	r3, #0
   443dc:	f104 0144 	add.w	r1, r4, #68	; 0x44
   443e0:	4628      	mov	r0, r5
   443e2:	f7ff feed 	bl	441c0 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   443e6:	4621      	mov	r1, r4
   443e8:	4628      	mov	r0, r5
   443ea:	f7ff fe5e 	bl	440aa <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   443ee:	fab0 f080 	clz	r0, r0
   443f2:	0940      	lsrs	r0, r0, #5
   443f4:	b015      	add	sp, #84	; 0x54
   443f6:	bd30      	pop	{r4, r5, pc}

000443f8 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   443f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   443fa:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   443fc:	1e4f      	subs	r7, r1, #1
   443fe:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   44400:	428c      	cmp	r4, r1
   44402:	f105 0501 	add.w	r5, r5, #1
   44406:	db00      	blt.n	4440a <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   44408:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   4440a:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   4440c:	f023 0603 	bic.w	r6, r3, #3
   44410:	f003 0303 	and.w	r3, r3, #3
   44414:	5996      	ldr	r6, [r2, r6]
   44416:	00db      	lsls	r3, r3, #3
   44418:	fa26 f303 	lsr.w	r3, r6, r3
   4441c:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   4441e:	e7ee      	b.n	443fe <uECC_vli_nativeToBytes+0x6>

00044420 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   44420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   44422:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   44424:	1cd1      	adds	r1, r2, #3
   44426:	bf48      	it	mi
   44428:	1d91      	addmi	r1, r2, #6
   4442a:	f341 0187 	sbfx	r1, r1, #2, #8
{
   4442e:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   44430:	f7ff fae6 	bl	43a00 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   44434:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   44436:	1e67      	subs	r7, r4, #1
   44438:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   4443a:	42a2      	cmp	r2, r4
   4443c:	f105 0501 	add.w	r5, r5, #1
   44440:	db00      	blt.n	44444 <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   44442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   44444:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   44446:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   4444a:	5cb2      	ldrb	r2, [r6, r2]
   4444c:	f003 0303 	and.w	r3, r3, #3
   44450:	00db      	lsls	r3, r3, #3
   44452:	409a      	lsls	r2, r3
		native[b / uECC_WORD_SIZE] |=
   44454:	5843      	ldr	r3, [r0, r1]
   44456:	4313      	orrs	r3, r2
   44458:	5043      	str	r3, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   4445a:	e7ed      	b.n	44438 <uECC_vli_bytesToNative+0x18>

0004445c <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   4445c:	b5f0      	push	{r4, r5, r6, r7, lr}
   4445e:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   44460:	f991 6000 	ldrsb.w	r6, [r1]
{
   44464:	4605      	mov	r5, r0
   44466:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   44468:	f7ff fe1f 	bl	440aa <EccPoint_isZero>
   4446c:	bb28      	cbnz	r0, 444ba <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   4446e:	1d27      	adds	r7, r4, #4
   44470:	4632      	mov	r2, r6
   44472:	4629      	mov	r1, r5
   44474:	4638      	mov	r0, r7
   44476:	f7ff fb12 	bl	43a9e <uECC_vli_cmp_unsafe>
   4447a:	2801      	cmp	r0, #1
   4447c:	d120      	bne.n	444c0 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   4447e:	4632      	mov	r2, r6
   44480:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   44484:	4638      	mov	r0, r7
   44486:	f7ff fb0a 	bl	43a9e <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   4448a:	2801      	cmp	r0, #1
   4448c:	d118      	bne.n	444c0 <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   4448e:	4622      	mov	r2, r4
   44490:	4668      	mov	r0, sp
   44492:	f7ff fc1c 	bl	43cce <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   44496:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   4449a:	4622      	mov	r2, r4
   4449c:	4629      	mov	r1, r5
   4449e:	a808      	add	r0, sp, #32
   444a0:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   444a2:	4632      	mov	r2, r6
   444a4:	a908      	add	r1, sp, #32
   444a6:	4668      	mov	r0, sp
   444a8:	f7ff fb0e 	bl	43ac8 <uECC_vli_equal>
		return -3;

	return 0;
   444ac:	2800      	cmp	r0, #0
   444ae:	bf14      	ite	ne
   444b0:	f06f 0002 	mvnne.w	r0, #2
   444b4:	2000      	moveq	r0, #0
}
   444b6:	b011      	add	sp, #68	; 0x44
   444b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   444ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   444be:	e7fa      	b.n	444b6 <uECC_valid_point+0x5a>
		return -2;
   444c0:	f06f 0001 	mvn.w	r0, #1
   444c4:	e7f7      	b.n	444b6 <uECC_valid_point+0x5a>

000444c6 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   444c6:	b5f0      	push	{r4, r5, r6, r7, lr}
   444c8:	460c      	mov	r4, r1

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   444ca:	f991 7001 	ldrsb.w	r7, [r1, #1]
{
   444ce:	b091      	sub	sp, #68	; 0x44
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   444d0:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   444d2:	4601      	mov	r1, r0
{
   444d4:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   444d6:	463a      	mov	r2, r7
   444d8:	4668      	mov	r0, sp
   444da:	f7ff ffa1 	bl	44420 <uECC_vli_bytesToNative>
	_public + curve->num_words,
   444de:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   444e2:	463a      	mov	r2, r7
   444e4:	19e9      	adds	r1, r5, r7
   444e6:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   444ea:	f7ff ff99 	bl	44420 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   444ee:	2210      	movs	r2, #16
   444f0:	4631      	mov	r1, r6
   444f2:	4668      	mov	r0, sp
   444f4:	f7ff fad3 	bl	43a9e <uECC_vli_cmp_unsafe>
   444f8:	b128      	cbz	r0, 44506 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   444fa:	4621      	mov	r1, r4
   444fc:	4668      	mov	r0, sp
   444fe:	f7ff ffad 	bl	4445c <uECC_valid_point>
}
   44502:	b011      	add	sp, #68	; 0x44
   44504:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -4;
   44506:	f06f 0003 	mvn.w	r0, #3
   4450a:	e7fa      	b.n	44502 <uECC_valid_public_key+0x3c>

0004450c <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   4450c:	78cb      	ldrb	r3, [r1, #3]
   4450e:	7802      	ldrb	r2, [r0, #0]
   44510:	4053      	eors	r3, r2
   44512:	7003      	strb	r3, [r0, #0]
   44514:	884b      	ldrh	r3, [r1, #2]
   44516:	7842      	ldrb	r2, [r0, #1]
   44518:	4053      	eors	r3, r2
   4451a:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   4451c:	680a      	ldr	r2, [r1, #0]
   4451e:	7883      	ldrb	r3, [r0, #2]
   44520:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   44524:	7083      	strb	r3, [r0, #2]
   44526:	680a      	ldr	r2, [r1, #0]
   44528:	78c3      	ldrb	r3, [r0, #3]
   4452a:	4053      	eors	r3, r2
   4452c:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   4452e:	79cb      	ldrb	r3, [r1, #7]
   44530:	7902      	ldrb	r2, [r0, #4]
   44532:	4053      	eors	r3, r2
   44534:	7103      	strb	r3, [r0, #4]
   44536:	88cb      	ldrh	r3, [r1, #6]
   44538:	7942      	ldrb	r2, [r0, #5]
   4453a:	4053      	eors	r3, r2
   4453c:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   4453e:	684a      	ldr	r2, [r1, #4]
   44540:	7983      	ldrb	r3, [r0, #6]
   44542:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   44546:	7183      	strb	r3, [r0, #6]
   44548:	684a      	ldr	r2, [r1, #4]
   4454a:	79c3      	ldrb	r3, [r0, #7]
   4454c:	4053      	eors	r3, r2
   4454e:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   44550:	7acb      	ldrb	r3, [r1, #11]
   44552:	7a02      	ldrb	r2, [r0, #8]
   44554:	4053      	eors	r3, r2
   44556:	7203      	strb	r3, [r0, #8]
   44558:	7a42      	ldrb	r2, [r0, #9]
   4455a:	894b      	ldrh	r3, [r1, #10]
   4455c:	4053      	eors	r3, r2
   4455e:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   44560:	688a      	ldr	r2, [r1, #8]
   44562:	7a83      	ldrb	r3, [r0, #10]
   44564:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   44568:	7283      	strb	r3, [r0, #10]
   4456a:	688a      	ldr	r2, [r1, #8]
   4456c:	7ac3      	ldrb	r3, [r0, #11]
   4456e:	4053      	eors	r3, r2
   44570:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   44572:	7bcb      	ldrb	r3, [r1, #15]
   44574:	7b02      	ldrb	r2, [r0, #12]
   44576:	4053      	eors	r3, r2
   44578:	7303      	strb	r3, [r0, #12]
   4457a:	89cb      	ldrh	r3, [r1, #14]
   4457c:	7b42      	ldrb	r2, [r0, #13]
   4457e:	4053      	eors	r3, r2
   44580:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   44582:	68ca      	ldr	r2, [r1, #12]
   44584:	7b83      	ldrb	r3, [r0, #14]
   44586:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   4458a:	7383      	strb	r3, [r0, #14]
   4458c:	68ca      	ldr	r2, [r1, #12]
   4458e:	7bc3      	ldrb	r3, [r0, #15]
   44590:	4053      	eors	r3, r2
   44592:	73c3      	strb	r3, [r0, #15]
}
   44594:	4770      	bx	lr

00044596 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   44596:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   44598:	7802      	ldrb	r2, [r0, #0]
   4459a:	f88d 2000 	strb.w	r2, [sp]
   4459e:	7942      	ldrb	r2, [r0, #5]
   445a0:	f88d 2001 	strb.w	r2, [sp, #1]
   445a4:	7a82      	ldrb	r2, [r0, #10]
   445a6:	f88d 2002 	strb.w	r2, [sp, #2]
   445aa:	7bc2      	ldrb	r2, [r0, #15]
   445ac:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   445b0:	7902      	ldrb	r2, [r0, #4]
   445b2:	f88d 2004 	strb.w	r2, [sp, #4]
   445b6:	7a42      	ldrb	r2, [r0, #9]
   445b8:	f88d 2005 	strb.w	r2, [sp, #5]
   445bc:	7b82      	ldrb	r2, [r0, #14]
   445be:	f88d 2006 	strb.w	r2, [sp, #6]
   445c2:	78c2      	ldrb	r2, [r0, #3]
   445c4:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   445c8:	7a02      	ldrb	r2, [r0, #8]
   445ca:	f88d 2008 	strb.w	r2, [sp, #8]
   445ce:	7b42      	ldrb	r2, [r0, #13]
   445d0:	f88d 2009 	strb.w	r2, [sp, #9]
   445d4:	7882      	ldrb	r2, [r0, #2]
   445d6:	f88d 200a 	strb.w	r2, [sp, #10]
   445da:	79c2      	ldrb	r2, [r0, #7]
   445dc:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   445e0:	7b02      	ldrb	r2, [r0, #12]
   445e2:	f88d 200c 	strb.w	r2, [sp, #12]
   445e6:	7842      	ldrb	r2, [r0, #1]
   445e8:	7ac3      	ldrb	r3, [r0, #11]
   445ea:	f88d 200d 	strb.w	r2, [sp, #13]
   445ee:	7982      	ldrb	r2, [r0, #6]
   445f0:	f88d 200e 	strb.w	r2, [sp, #14]
   445f4:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   445f8:	2310      	movs	r3, #16
   445fa:	466a      	mov	r2, sp
   445fc:	4619      	mov	r1, r3
   445fe:	f7ff f88c 	bl	4371a <_copy>
}
   44602:	b005      	add	sp, #20
   44604:	f85d fb04 	ldr.w	pc, [sp], #4

00044608 <mult_row_column>:
{
   44608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4460a:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   4460c:	7808      	ldrb	r0, [r1, #0]
{
   4460e:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   44610:	f7ff f892 	bl	43738 <_double_byte>
   44614:	4605      	mov	r5, r0
   44616:	7860      	ldrb	r0, [r4, #1]
   44618:	f7ff f88e 	bl	43738 <_double_byte>
   4461c:	78a2      	ldrb	r2, [r4, #2]
   4461e:	7863      	ldrb	r3, [r4, #1]
   44620:	4053      	eors	r3, r2
   44622:	78e2      	ldrb	r2, [r4, #3]
   44624:	4053      	eors	r3, r2
   44626:	405d      	eors	r5, r3
   44628:	4068      	eors	r0, r5
   4462a:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   4462c:	7860      	ldrb	r0, [r4, #1]
   4462e:	7827      	ldrb	r7, [r4, #0]
   44630:	f7ff f882 	bl	43738 <_double_byte>
   44634:	4605      	mov	r5, r0
   44636:	78a0      	ldrb	r0, [r4, #2]
   44638:	f7ff f87e 	bl	43738 <_double_byte>
   4463c:	78a3      	ldrb	r3, [r4, #2]
   4463e:	405f      	eors	r7, r3
   44640:	78e3      	ldrb	r3, [r4, #3]
   44642:	405f      	eors	r7, r3
   44644:	407d      	eors	r5, r7
   44646:	4068      	eors	r0, r5
   44648:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   4464a:	7863      	ldrb	r3, [r4, #1]
   4464c:	7827      	ldrb	r7, [r4, #0]
   4464e:	78a0      	ldrb	r0, [r4, #2]
   44650:	405f      	eors	r7, r3
   44652:	f7ff f871 	bl	43738 <_double_byte>
   44656:	4605      	mov	r5, r0
   44658:	78e0      	ldrb	r0, [r4, #3]
   4465a:	f7ff f86d 	bl	43738 <_double_byte>
   4465e:	78e3      	ldrb	r3, [r4, #3]
   44660:	405f      	eors	r7, r3
   44662:	407d      	eors	r5, r7
   44664:	4068      	eors	r0, r5
   44666:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   44668:	7820      	ldrb	r0, [r4, #0]
   4466a:	f7ff f865 	bl	43738 <_double_byte>
   4466e:	7862      	ldrb	r2, [r4, #1]
   44670:	7823      	ldrb	r3, [r4, #0]
   44672:	4053      	eors	r3, r2
   44674:	78a2      	ldrb	r2, [r4, #2]
   44676:	4053      	eors	r3, r2
   44678:	ea80 0503 	eor.w	r5, r0, r3
   4467c:	78e0      	ldrb	r0, [r4, #3]
   4467e:	f7ff f85b 	bl	43738 <_double_byte>
   44682:	b2ed      	uxtb	r5, r5
   44684:	4045      	eors	r5, r0
   44686:	70f5      	strb	r5, [r6, #3]
}
   44688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004468a <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   4468a:	b570      	push	{r4, r5, r6, lr}
   4468c:	4614      	mov	r4, r2
   4468e:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   44690:	4605      	mov	r5, r0
   44692:	2800      	cmp	r0, #0
   44694:	d049      	beq.n	4472a <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   44696:	2900      	cmp	r1, #0
   44698:	d049      	beq.n	4472e <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   4469a:	2a00      	cmp	r2, #0
   4469c:	d049      	beq.n	44732 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   4469e:	2310      	movs	r3, #16
   446a0:	460a      	mov	r2, r1
   446a2:	4668      	mov	r0, sp
   446a4:	4619      	mov	r1, r3
   446a6:	f7ff f838 	bl	4371a <_copy>
	add_round_key(state, s->words);
   446aa:	4621      	mov	r1, r4
   446ac:	4668      	mov	r0, sp
   446ae:	f7ff ff2d 	bl	4450c <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   446b2:	3410      	adds	r4, #16
   446b4:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   446b8:	4668      	mov	r0, sp
   446ba:	f7e5 fcab 	bl	2a014 <sub_bytes>
		shift_rows(state);
   446be:	4668      	mov	r0, sp
   446c0:	f7ff ff69 	bl	44596 <shift_rows>
	mult_row_column(t, s);
   446c4:	4669      	mov	r1, sp
   446c6:	a804      	add	r0, sp, #16
   446c8:	f7ff ff9e 	bl	44608 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   446cc:	a901      	add	r1, sp, #4
   446ce:	a805      	add	r0, sp, #20
   446d0:	f7ff ff9a 	bl	44608 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   446d4:	a902      	add	r1, sp, #8
   446d6:	a806      	add	r0, sp, #24
   446d8:	f7ff ff96 	bl	44608 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   446dc:	a903      	add	r1, sp, #12
   446de:	a807      	add	r0, sp, #28
   446e0:	f7ff ff92 	bl	44608 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   446e4:	2310      	movs	r3, #16
   446e6:	4619      	mov	r1, r3
   446e8:	eb0d 0203 	add.w	r2, sp, r3
   446ec:	4668      	mov	r0, sp
   446ee:	f7ff f814 	bl	4371a <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   446f2:	4621      	mov	r1, r4
   446f4:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   446f6:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   446f8:	f7ff ff08 	bl	4450c <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   446fc:	42b4      	cmp	r4, r6
   446fe:	d1db      	bne.n	446b8 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   44700:	f7e5 fc88 	bl	2a014 <sub_bytes>
	shift_rows(state);
   44704:	4668      	mov	r0, sp
   44706:	f7ff ff46 	bl	44596 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   4470a:	4621      	mov	r1, r4
   4470c:	4668      	mov	r0, sp
   4470e:	f7ff fefd 	bl	4450c <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   44712:	2310      	movs	r3, #16
   44714:	4619      	mov	r1, r3
   44716:	466a      	mov	r2, sp
   44718:	4628      	mov	r0, r5
   4471a:	f7fe fffe 	bl	4371a <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   4471e:	4668      	mov	r0, sp
   44720:	2210      	movs	r2, #16
   44722:	2100      	movs	r1, #0
   44724:	f7ff f806 	bl	43734 <_set>

	return TC_CRYPTO_SUCCESS;
   44728:	2001      	movs	r0, #1
}
   4472a:	b008      	add	sp, #32
   4472c:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   4472e:	4608      	mov	r0, r1
   44730:	e7fb      	b.n	4472a <tc_aes_encrypt+0xa0>
   44732:	4610      	mov	r0, r2
   44734:	e7f9      	b.n	4472a <tc_aes_encrypt+0xa0>

00044736 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   44736:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   44738:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   4473a:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   4473c:	f912 3b10 	ldrsb.w	r3, [r2], #16
   44740:	2b00      	cmp	r3, #0
   44742:	bfac      	ite	ge
   44744:	2300      	movge	r3, #0
   44746:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   44748:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   4474c:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   44750:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   44752:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   44756:	d002      	beq.n	4475e <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   44758:	7813      	ldrb	r3, [r2, #0]
   4475a:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   4475c:	e7f4      	b.n	44748 <gf_double+0x12>
	}
}
   4475e:	bd10      	pop	{r4, pc}

00044760 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   44760:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   44762:	b120      	cbz	r0, 4476e <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   44764:	2258      	movs	r2, #88	; 0x58
   44766:	2100      	movs	r1, #0
   44768:	f7fe ffe4 	bl	43734 <_set>
   4476c:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   4476e:	bd08      	pop	{r3, pc}

00044770 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   44770:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   44772:	4604      	mov	r4, r0
   44774:	b188      	cbz	r0, 4479a <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   44776:	2210      	movs	r2, #16
   44778:	2100      	movs	r1, #0
   4477a:	f7fe ffdb 	bl	43734 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   4477e:	2210      	movs	r2, #16
   44780:	f104 0030 	add.w	r0, r4, #48	; 0x30
   44784:	2100      	movs	r1, #0
   44786:	f7fe ffd5 	bl	43734 <_set>
	s->leftover_offset = 0;
   4478a:	2300      	movs	r3, #0
   4478c:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   4478e:	2200      	movs	r2, #0
   44790:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   44794:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   44798:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   4479a:	bd10      	pop	{r4, pc}

0004479c <tc_cmac_setup>:
{
   4479c:	b570      	push	{r4, r5, r6, lr}
   4479e:	4604      	mov	r4, r0
   447a0:	460d      	mov	r5, r1
   447a2:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   447a4:	b310      	cbz	r0, 447ec <tc_cmac_setup+0x50>
   447a6:	b311      	cbz	r1, 447ee <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   447a8:	2258      	movs	r2, #88	; 0x58
   447aa:	2100      	movs	r1, #0
   447ac:	f7fe ffc2 	bl	43734 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   447b0:	4629      	mov	r1, r5
	s->sched = sched;
   447b2:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   447b4:	4630      	mov	r0, r6
   447b6:	f7e5 fc39 	bl	2a02c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   447ba:	2210      	movs	r2, #16
   447bc:	2100      	movs	r1, #0
   447be:	4620      	mov	r0, r4
   447c0:	f7fe ffb8 	bl	43734 <_set>
	gf_double (s->K1, s->iv);
   447c4:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   447c8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   447ca:	4621      	mov	r1, r4
   447cc:	4620      	mov	r0, r4
   447ce:	f7ff ff5c 	bl	4468a <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   447d2:	4621      	mov	r1, r4
   447d4:	4628      	mov	r0, r5
   447d6:	f7ff ffae 	bl	44736 <gf_double>
	gf_double (s->K2, s->K1);
   447da:	4629      	mov	r1, r5
   447dc:	f104 0020 	add.w	r0, r4, #32
   447e0:	f7ff ffa9 	bl	44736 <gf_double>
	tc_cmac_init(s);
   447e4:	4620      	mov	r0, r4
   447e6:	f7ff ffc3 	bl	44770 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   447ea:	2001      	movs	r0, #1
}
   447ec:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   447ee:	4608      	mov	r0, r1
   447f0:	e7fc      	b.n	447ec <tc_cmac_setup+0x50>

000447f2 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   447f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   447f6:	460e      	mov	r6, r1
   447f8:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   447fa:	4604      	mov	r4, r0
   447fc:	2800      	cmp	r0, #0
   447fe:	d060      	beq.n	448c2 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   44800:	b1fa      	cbz	r2, 44842 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   44802:	2900      	cmp	r1, #0
   44804:	d05d      	beq.n	448c2 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   44806:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   4480a:	ea53 0102 	orrs.w	r1, r3, r2
   4480e:	d058      	beq.n	448c2 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   44810:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   44812:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   44816:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   4481a:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   4481e:	f1b8 0f00 	cmp.w	r8, #0
   44822:	d02c      	beq.n	4487e <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   44824:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   44828:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   4482c:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   4482e:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   44830:	d20a      	bcs.n	44848 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   44832:	462b      	mov	r3, r5
   44834:	4632      	mov	r2, r6
   44836:	4629      	mov	r1, r5
   44838:	f7fe ff6f 	bl	4371a <_copy>
			s->leftover_offset += data_length;
   4483c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   4483e:	442b      	add	r3, r5
   44840:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   44842:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   44844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   44848:	463b      	mov	r3, r7
   4484a:	4632      	mov	r2, r6
   4484c:	4639      	mov	r1, r7
   4484e:	f7fe ff64 	bl	4371a <_copy>
		data_length -= remaining_space;
   44852:	3d10      	subs	r5, #16
		s->leftover_offset = 0;
   44854:	2300      	movs	r3, #0
   44856:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   44858:	4445      	add	r5, r8
		data += remaining_space;
   4485a:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4485c:	1e63      	subs	r3, r4, #1
   4485e:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   44862:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   44866:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4486a:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   4486c:	ea82 0200 	eor.w	r2, r2, r0
   44870:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   44872:	d1f6      	bne.n	44862 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   44874:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   44876:	4621      	mov	r1, r4
   44878:	4620      	mov	r0, r4
   4487a:	f7ff ff06 	bl	4468a <tc_aes_encrypt>
   4487e:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   44882:	2d10      	cmp	r5, #16
   44884:	d80a      	bhi.n	4489c <tc_cmac_update+0xaa>
	if (data_length > 0) {
   44886:	2d00      	cmp	r5, #0
   44888:	d0db      	beq.n	44842 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   4488a:	462b      	mov	r3, r5
   4488c:	4632      	mov	r2, r6
   4488e:	4629      	mov	r1, r5
   44890:	f104 0030 	add.w	r0, r4, #48	; 0x30
   44894:	f7fe ff41 	bl	4371a <_copy>
		s->leftover_offset = data_length;
   44898:	6465      	str	r5, [r4, #68]	; 0x44
   4489a:	e7d2      	b.n	44842 <tc_cmac_update+0x50>
   4489c:	1e63      	subs	r3, r4, #1
   4489e:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   448a0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   448a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   448a8:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   448aa:	ea82 0200 	eor.w	r2, r2, r0
   448ae:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   448b0:	d1f6      	bne.n	448a0 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   448b2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   448b4:	4621      	mov	r1, r4
   448b6:	4620      	mov	r0, r4
   448b8:	f7ff fee7 	bl	4468a <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   448bc:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   448be:	3d10      	subs	r5, #16
   448c0:	e7df      	b.n	44882 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   448c2:	2000      	movs	r0, #0
   448c4:	e7be      	b.n	44844 <tc_cmac_update+0x52>

000448c6 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   448c6:	b570      	push	{r4, r5, r6, lr}
   448c8:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   448ca:	4605      	mov	r5, r0
   448cc:	b1e8      	cbz	r0, 4490a <tc_cmac_final+0x44>
   448ce:	b369      	cbz	r1, 4492c <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   448d0:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   448d2:	2a10      	cmp	r2, #16
   448d4:	d11a      	bne.n	4490c <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   448d6:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   448d8:	1e63      	subs	r3, r4, #1
   448da:	3901      	subs	r1, #1
   448dc:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   448e0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   448e4:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   448e8:	4072      	eors	r2, r6
   448ea:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   448ee:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   448f0:	ea82 0206 	eor.w	r2, r2, r6
   448f4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   448f6:	d1f3      	bne.n	448e0 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   448f8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   448fa:	4621      	mov	r1, r4
   448fc:	4628      	mov	r0, r5
   448fe:	f7ff fec4 	bl	4468a <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   44902:	4620      	mov	r0, r4
   44904:	f7ff ff2c 	bl	44760 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   44908:	2001      	movs	r0, #1
}
   4490a:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   4490c:	f102 0030 	add.w	r0, r2, #48	; 0x30
   44910:	2100      	movs	r1, #0
   44912:	f1c2 0210 	rsb	r2, r2, #16
   44916:	4420      	add	r0, r4
   44918:	f7fe ff0c 	bl	43734 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   4491c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   4491e:	4423      	add	r3, r4
   44920:	2280      	movs	r2, #128	; 0x80
   44922:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   44926:	f104 0120 	add.w	r1, r4, #32
   4492a:	e7d5      	b.n	448d8 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   4492c:	4608      	mov	r0, r1
   4492e:	e7ec      	b.n	4490a <tc_cmac_final+0x44>

00044930 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   44930:	f003 bd70 	b.w	48414 <z_fatal_error>

00044934 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   44934:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   44936:	6800      	ldr	r0, [r0, #0]
   44938:	f003 bd6c 	b.w	48414 <z_fatal_error>

0004493c <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   4493c:	2100      	movs	r1, #0
   4493e:	2001      	movs	r0, #1
   44940:	f7ff bff6 	b.w	44930 <z_arm_fatal_error>

00044944 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   44944:	b508      	push	{r3, lr}
	handler();
   44946:	f7e5 fc37 	bl	2a1b8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   4494a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   4494e:	f7e5 bcf7 	b.w	2a340 <z_arm_exc_exit>

00044952 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   44952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   44956:	4684      	mov	ip, r0
   44958:	460f      	mov	r7, r1
	register const char *s = nptr;
   4495a:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   4495c:	4621      	mov	r1, r4
   4495e:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
}

static inline int isspace(int c)
{
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   44962:	2b20      	cmp	r3, #32
   44964:	d0fa      	beq.n	4495c <strtoul+0xa>
   44966:	f1a3 0009 	sub.w	r0, r3, #9
   4496a:	2804      	cmp	r0, #4
   4496c:	d9f6      	bls.n	4495c <strtoul+0xa>
	} while (isspace(c));
	if (c == '-') {
   4496e:	2b2d      	cmp	r3, #45	; 0x2d
   44970:	d125      	bne.n	449be <strtoul+0x6c>
		neg = 1;
		c = *s++;
   44972:	784b      	ldrb	r3, [r1, #1]
   44974:	1c8c      	adds	r4, r1, #2
		neg = 1;
   44976:	f04f 0e01 	mov.w	lr, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   4497a:	bb3a      	cbnz	r2, 449cc <strtoul+0x7a>
   4497c:	2b30      	cmp	r3, #48	; 0x30
   4497e:	d032      	beq.n	449e6 <strtoul+0x94>
		s += 2;
		base = 16;
	}

	if (base == 0) {
		base = c == '0' ? 8 : 10;
   44980:	220a      	movs	r2, #10
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   44982:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   44986:	2500      	movs	r5, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   44988:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   4498c:	fb02 f801 	mul.w	r8, r2, r1
   44990:	ea6f 0808 	mvn.w	r8, r8
	for (acc = 0, any = 0;; c = *s++) {
   44994:	4628      	mov	r0, r5
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   44996:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
		if (isdigit(c)) {
   4499a:	2e09      	cmp	r6, #9
   4499c:	d82a      	bhi.n	449f4 <strtoul+0xa2>
			c -= '0';
   4499e:	4633      	mov	r3, r6
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   449a0:	429a      	cmp	r2, r3
   449a2:	dd37      	ble.n	44a14 <strtoul+0xc2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   449a4:	1c6e      	adds	r6, r5, #1
   449a6:	d007      	beq.n	449b8 <strtoul+0x66>
   449a8:	4288      	cmp	r0, r1
   449aa:	d830      	bhi.n	44a0e <strtoul+0xbc>
   449ac:	d101      	bne.n	449b2 <strtoul+0x60>
   449ae:	4543      	cmp	r3, r8
   449b0:	dc2d      	bgt.n	44a0e <strtoul+0xbc>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   449b2:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   449b6:	2501      	movs	r5, #1
	for (acc = 0, any = 0;; c = *s++) {
   449b8:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   449bc:	e7eb      	b.n	44996 <strtoul+0x44>
	} else if (c == '+') {
   449be:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   449c0:	bf04      	itt	eq
   449c2:	784b      	ldrbeq	r3, [r1, #1]
   449c4:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   449c6:	f04f 0e00 	mov.w	lr, #0
   449ca:	e7d6      	b.n	4497a <strtoul+0x28>
	if ((base == 0 || base == 16) &&
   449cc:	2a10      	cmp	r2, #16
   449ce:	d1d8      	bne.n	44982 <strtoul+0x30>
   449d0:	2b30      	cmp	r3, #48	; 0x30
   449d2:	d1d6      	bne.n	44982 <strtoul+0x30>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   449d4:	7821      	ldrb	r1, [r4, #0]
   449d6:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   449da:	2958      	cmp	r1, #88	; 0x58
   449dc:	d1d1      	bne.n	44982 <strtoul+0x30>
		c = s[1];
   449de:	7863      	ldrb	r3, [r4, #1]
		base = 16;
   449e0:	2210      	movs	r2, #16
		s += 2;
   449e2:	3402      	adds	r4, #2
	if (base == 0) {
   449e4:	e7cd      	b.n	44982 <strtoul+0x30>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   449e6:	7822      	ldrb	r2, [r4, #0]
   449e8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   449ec:	2a58      	cmp	r2, #88	; 0x58
   449ee:	d0f6      	beq.n	449de <strtoul+0x8c>
		base = c == '0' ? 8 : 10;
   449f0:	2208      	movs	r2, #8
   449f2:	e7c6      	b.n	44982 <strtoul+0x30>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   449f4:	f043 0620 	orr.w	r6, r3, #32
   449f8:	3e61      	subs	r6, #97	; 0x61
		} else if (isalpha(c)) {
   449fa:	2e19      	cmp	r6, #25
   449fc:	d80a      	bhi.n	44a14 <strtoul+0xc2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   449fe:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   44a02:	2e1a      	cmp	r6, #26
   44a04:	bf34      	ite	cc
   44a06:	2637      	movcc	r6, #55	; 0x37
   44a08:	2657      	movcs	r6, #87	; 0x57
   44a0a:	1b9b      	subs	r3, r3, r6
   44a0c:	e7c8      	b.n	449a0 <strtoul+0x4e>
			any = -1;
   44a0e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   44a12:	e7d1      	b.n	449b8 <strtoul+0x66>
		}
	}
	if (any < 0) {
   44a14:	1c6b      	adds	r3, r5, #1
   44a16:	d107      	bne.n	44a28 <strtoul+0xd6>
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   44a18:	f7fc fa06 	bl	40e28 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   44a1c:	2322      	movs	r3, #34	; 0x22
   44a1e:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   44a20:	4628      	mov	r0, r5
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   44a22:	b947      	cbnz	r7, 44a36 <strtoul+0xe4>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   44a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   44a28:	f1be 0f00 	cmp.w	lr, #0
   44a2c:	d000      	beq.n	44a30 <strtoul+0xde>
		acc = -acc;
   44a2e:	4240      	negs	r0, r0
	if (endptr != NULL) {
   44a30:	2f00      	cmp	r7, #0
   44a32:	d0f7      	beq.n	44a24 <strtoul+0xd2>
		*endptr = (char *)(any ? s - 1 : nptr);
   44a34:	b10d      	cbz	r5, 44a3a <strtoul+0xe8>
   44a36:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   44a3a:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   44a3e:	e7f1      	b.n	44a24 <strtoul+0xd2>

00044a40 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   44a40:	3901      	subs	r1, #1
   44a42:	4603      	mov	r3, r0
   44a44:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   44a48:	b90a      	cbnz	r2, 44a4e <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   44a4a:	701a      	strb	r2, [r3, #0]

	return dest;
}
   44a4c:	4770      	bx	lr
		*d = *s;
   44a4e:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   44a52:	e7f7      	b.n	44a44 <strcpy+0x4>

00044a54 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   44a54:	4603      	mov	r3, r0
	size_t n = 0;
   44a56:	2000      	movs	r0, #0

	while (*s != '\0') {
   44a58:	5c1a      	ldrb	r2, [r3, r0]
   44a5a:	b902      	cbnz	r2, 44a5e <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   44a5c:	4770      	bx	lr
		n++;
   44a5e:	3001      	adds	r0, #1
   44a60:	e7fa      	b.n	44a58 <strlen+0x4>

00044a62 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   44a62:	1e43      	subs	r3, r0, #1
   44a64:	3901      	subs	r1, #1
   44a66:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   44a6a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   44a6e:	4282      	cmp	r2, r0
   44a70:	d101      	bne.n	44a76 <strcmp+0x14>
   44a72:	2a00      	cmp	r2, #0
   44a74:	d1f7      	bne.n	44a66 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   44a76:	1a10      	subs	r0, r2, r0
   44a78:	4770      	bx	lr

00044a7a <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   44a7a:	b570      	push	{r4, r5, r6, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   44a7c:	460b      	mov	r3, r1
   44a7e:	4605      	mov	r5, r0
   44a80:	b16a      	cbz	r2, 44a9e <strncmp+0x24>
   44a82:	f810 6b01 	ldrb.w	r6, [r0], #1
   44a86:	781c      	ldrb	r4, [r3, #0]
   44a88:	42b4      	cmp	r4, r6
   44a8a:	f101 0101 	add.w	r1, r1, #1
   44a8e:	d100      	bne.n	44a92 <strncmp+0x18>
   44a90:	b91c      	cbnz	r4, 44a9a <strncmp+0x20>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   44a92:	782a      	ldrb	r2, [r5, #0]
   44a94:	781b      	ldrb	r3, [r3, #0]
   44a96:	1ad0      	subs	r0, r2, r3
   44a98:	e002      	b.n	44aa0 <strncmp+0x26>
		n--;
   44a9a:	3a01      	subs	r2, #1
   44a9c:	e7ee      	b.n	44a7c <strncmp+0x2>
	return (n == 0) ? 0 : (*s1 - *s2);
   44a9e:	4610      	mov	r0, r2
}
   44aa0:	bd70      	pop	{r4, r5, r6, pc}

00044aa2 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   44aa2:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   44aa4:	b15a      	cbz	r2, 44abe <memcmp+0x1c>
   44aa6:	3901      	subs	r1, #1
   44aa8:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   44aaa:	f810 2b01 	ldrb.w	r2, [r0], #1
   44aae:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   44ab2:	42a0      	cmp	r0, r4
   44ab4:	d001      	beq.n	44aba <memcmp+0x18>
   44ab6:	429a      	cmp	r2, r3
   44ab8:	d0f7      	beq.n	44aaa <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   44aba:	1ad0      	subs	r0, r2, r3
}
   44abc:	bd10      	pop	{r4, pc}
		return 0;
   44abe:	4610      	mov	r0, r2
   44ac0:	e7fc      	b.n	44abc <memcmp+0x1a>

00044ac2 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   44ac2:	b510      	push	{r4, lr}
   44ac4:	1e43      	subs	r3, r0, #1
   44ac6:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   44ac8:	4291      	cmp	r1, r2
   44aca:	d100      	bne.n	44ace <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   44acc:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   44ace:	f811 4b01 	ldrb.w	r4, [r1], #1
   44ad2:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   44ad6:	e7f7      	b.n	44ac8 <memcpy+0x6>

00044ad8 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   44ad8:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   44ada:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   44adc:	4603      	mov	r3, r0
	while (n > 0) {
   44ade:	4293      	cmp	r3, r2
   44ae0:	d100      	bne.n	44ae4 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   44ae2:	4770      	bx	lr
		*(d_byte++) = c_byte;
   44ae4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   44ae8:	e7f9      	b.n	44ade <memset+0x6>

00044aea <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   44aea:	b084      	sub	sp, #16
   44aec:	ab04      	add	r3, sp, #16
   44aee:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   44af2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   44af6:	2b06      	cmp	r3, #6
   44af8:	d108      	bne.n	44b0c <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   44afa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   44afe:	2201      	movs	r2, #1
   44b00:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   44b04:	f3bf 8f4f 	dsb	sy
        __WFE();
   44b08:	bf20      	wfe
    while (true)
   44b0a:	e7fd      	b.n	44b08 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   44b0c:	b004      	add	sp, #16
   44b0e:	4770      	bx	lr

00044b10 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   44b10:	b084      	sub	sp, #16
   44b12:	ab04      	add	r3, sp, #16
   44b14:	e903 0007 	stmdb	r3, {r0, r1, r2}
   44b18:	2300      	movs	r3, #0
   44b1a:	f383 8811 	msr	BASEPRI, r3
   44b1e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   44b22:	b004      	add	sp, #16
   44b24:	4770      	bx	lr

00044b26 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   44b26:	b530      	push	{r4, r5, lr}
   44b28:	b085      	sub	sp, #20
   44b2a:	4604      	mov	r4, r0
   44b2c:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   44b2e:	4668      	mov	r0, sp
   44b30:	2203      	movs	r2, #3
   44b32:	f7ff ffc6 	bl	44ac2 <memcpy>
	(void)memset(res + 3, 0, 13);
   44b36:	220d      	movs	r2, #13
   44b38:	2100      	movs	r1, #0
   44b3a:	f10d 0003 	add.w	r0, sp, #3
   44b3e:	f7ff ffcb 	bl	44ad8 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   44b42:	4620      	mov	r0, r4
   44b44:	466a      	mov	r2, sp
   44b46:	4669      	mov	r1, sp
   44b48:	f7ed fd88 	bl	3265c <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   44b4c:	4604      	mov	r4, r0
   44b4e:	b920      	cbnz	r0, 44b5a <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   44b50:	2203      	movs	r2, #3
   44b52:	4669      	mov	r1, sp
   44b54:	4628      	mov	r0, r5
   44b56:	f7ff ffb4 	bl	44ac2 <memcpy>

	return 0;
}
   44b5a:	4620      	mov	r0, r4
   44b5c:	b005      	add	sp, #20
   44b5e:	bd30      	pop	{r4, r5, pc}

00044b60 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   44b60:	b513      	push	{r0, r1, r4, lr}
   44b62:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   44b64:	aa01      	add	r2, sp, #4
   44b66:	3103      	adds	r1, #3
   44b68:	f7ff ffdd 	bl	44b26 <ah>
	if (err) {
   44b6c:	b948      	cbnz	r0, 44b82 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   44b6e:	2203      	movs	r2, #3
   44b70:	a901      	add	r1, sp, #4
   44b72:	4620      	mov	r0, r4
   44b74:	f7ff ff95 	bl	44aa2 <memcmp>
   44b78:	fab0 f080 	clz	r0, r0
   44b7c:	0940      	lsrs	r0, r0, #5
}
   44b7e:	b002      	add	sp, #8
   44b80:	bd10      	pop	{r4, pc}
		return false;
   44b82:	2000      	movs	r0, #0
   44b84:	e7fb      	b.n	44b7e <bt_rpa_irk_matches+0x1e>

00044b86 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   44b86:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   44b88:	1cce      	adds	r6, r1, #3
{
   44b8a:	4605      	mov	r5, r0
   44b8c:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   44b8e:	4630      	mov	r0, r6
   44b90:	2103      	movs	r1, #3
   44b92:	f7ed fd61 	bl	32658 <bt_rand>
	if (err) {
   44b96:	b960      	cbnz	r0, 44bb2 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   44b98:	7963      	ldrb	r3, [r4, #5]
   44b9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   44b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   44ba2:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   44ba4:	4622      	mov	r2, r4
   44ba6:	4631      	mov	r1, r6
   44ba8:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   44baa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   44bae:	f7ff bfba 	b.w	44b26 <ah>
}
   44bb2:	bd70      	pop	{r4, r5, r6, pc}

00044bb4 <send_cmd_status>:
{
   44bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   44bb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   44bbc:	4606      	mov	r6, r0
   44bbe:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   44bc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   44bc4:	2100      	movs	r1, #0
   44bc6:	200f      	movs	r0, #15
   44bc8:	f7e6 f88e 	bl	2ace8 <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   44bcc:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   44bce:	f100 0808 	add.w	r8, r0, #8
   44bd2:	4604      	mov	r4, r0
   44bd4:	7507      	strb	r7, [r0, #20]
   44bd6:	2102      	movs	r1, #2
   44bd8:	4640      	mov	r0, r8
   44bda:	f002 fea5 	bl	47928 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   44bde:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   44be0:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   44be2:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   44be4:	7041      	strb	r1, [r0, #1]
   44be6:	4640      	mov	r0, r8
   44be8:	f002 fe9e 	bl	47928 <net_buf_simple_add>
	evt->ncmd = 1U;
   44bec:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   44bee:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   44bf0:	8046      	strh	r6, [r0, #2]
		bt_recv_prio(buf);
   44bf2:	4620      	mov	r0, r4
}
   44bf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   44bf8:	f7e6 bd18 	b.w	2b62c <bt_recv_prio>

00044bfc <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   44bfc:	f101 0320 	add.w	r3, r1, #32
   44c00:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   44c02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   44c06:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   44c0a:	428b      	cmp	r3, r1
   44c0c:	d1f9      	bne.n	44c02 <sys_memcpy_swap.constprop.0+0x6>
}
   44c0e:	4770      	bx	lr

00044c10 <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(2);
   44c10:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   44c14:	f043 0306 	orr.w	r3, r3, #6
   44c18:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   44c1c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   44c20:	f043 0304 	orr.w	r3, r3, #4
   44c24:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   44c28:	4770      	bx	lr

00044c2a <default_CSPRNG>:
{
   44c2a:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   44c2c:	f7ed fd14 	bl	32658 <bt_rand>
}
   44c30:	fab0 f080 	clz	r0, r0
   44c34:	0940      	lsrs	r0, r0, #5
   44c36:	bd08      	pop	{r3, pc}

00044c38 <bt_settings_decode_key>:
{
   44c38:	b570      	push	{r4, r5, r6, lr}
   44c3a:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   44c3c:	2100      	movs	r1, #0
{
   44c3e:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   44c40:	f7fe fc6e 	bl	43520 <settings_name_next>
   44c44:	280d      	cmp	r0, #13
   44c46:	d118      	bne.n	44c7a <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   44c48:	7b23      	ldrb	r3, [r4, #12]
   44c4a:	2b30      	cmp	r3, #48	; 0x30
   44c4c:	d013      	beq.n	44c76 <bt_settings_decode_key+0x3e>
	} else if (key[12] == '1') {
   44c4e:	2b31      	cmp	r3, #49	; 0x31
   44c50:	d113      	bne.n	44c7a <bt_settings_decode_key+0x42>
   44c52:	2301      	movs	r3, #1
		addr->type = BT_ADDR_LE_PUBLIC;
   44c54:	f805 3b06 	strb.w	r3, [r5], #6
   44c58:	f104 060c 	add.w	r6, r4, #12
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   44c5c:	462a      	mov	r2, r5
   44c5e:	4620      	mov	r0, r4
   44c60:	2301      	movs	r3, #1
   44c62:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   44c64:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   44c66:	f7fd fdb3 	bl	427d0 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   44c6a:	42b4      	cmp	r4, r6
   44c6c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   44c70:	d1f4      	bne.n	44c5c <bt_settings_decode_key+0x24>
	return 0;
   44c72:	2000      	movs	r0, #0
}
   44c74:	bd70      	pop	{r4, r5, r6, pc}
   44c76:	2300      	movs	r3, #0
   44c78:	e7ec      	b.n	44c54 <bt_settings_decode_key+0x1c>
		return -EINVAL;
   44c7a:	f06f 0015 	mvn.w	r0, #21
   44c7e:	e7f9      	b.n	44c74 <bt_settings_decode_key+0x3c>

00044c80 <bt_settings_init>:
{
	int err;

	BT_DBG("");

	err = settings_subsys_init();
   44c80:	f7e4 beea 	b.w	29a58 <settings_subsys_init>

00044c84 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   44c84:	b510      	push	{r4, lr}
   44c86:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   44c88:	7801      	ldrb	r1, [r0, #0]
   44c8a:	7822      	ldrb	r2, [r4, #0]
   44c8c:	428a      	cmp	r2, r1
{
   44c8e:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   44c90:	d00f      	beq.n	44cb2 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   44c92:	4669      	mov	r1, sp
   44c94:	f7e5 ffc8 	bl	2ac28 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   44c98:	a905      	add	r1, sp, #20
   44c9a:	4620      	mov	r0, r4
   44c9c:	f7e5 ffc4 	bl	2ac28 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   44ca0:	2210      	movs	r2, #16
   44ca2:	f10d 0115 	add.w	r1, sp, #21
   44ca6:	f10d 0001 	add.w	r0, sp, #1
   44caa:	f7ff fefa 	bl	44aa2 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   44cae:	b00a      	add	sp, #40	; 0x28
   44cb0:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   44cb2:	2a01      	cmp	r2, #1
   44cb4:	d006      	beq.n	44cc4 <bt_uuid_cmp+0x40>
   44cb6:	2a02      	cmp	r2, #2
   44cb8:	d007      	beq.n	44cca <bt_uuid_cmp+0x46>
   44cba:	b972      	cbnz	r2, 44cda <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   44cbc:	8840      	ldrh	r0, [r0, #2]
   44cbe:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   44cc0:	1ac0      	subs	r0, r0, r3
   44cc2:	e7f4      	b.n	44cae <bt_uuid_cmp+0x2a>
   44cc4:	6840      	ldr	r0, [r0, #4]
   44cc6:	6863      	ldr	r3, [r4, #4]
   44cc8:	e7fa      	b.n	44cc0 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   44cca:	2210      	movs	r2, #16
   44ccc:	1c61      	adds	r1, r4, #1
   44cce:	3001      	adds	r0, #1
}
   44cd0:	b00a      	add	sp, #40	; 0x28
   44cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   44cd6:	f7ff bee4 	b.w	44aa2 <memcmp>
	switch (u1->type) {
   44cda:	f06f 0015 	mvn.w	r0, #21
   44cde:	e7e6      	b.n	44cae <bt_uuid_cmp+0x2a>

00044ce0 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   44ce0:	2a04      	cmp	r2, #4
{
   44ce2:	b510      	push	{r4, lr}
	switch (data_len) {
   44ce4:	d00a      	beq.n	44cfc <bt_uuid_create+0x1c>
   44ce6:	2a10      	cmp	r2, #16
   44ce8:	d00d      	beq.n	44d06 <bt_uuid_create+0x26>
   44cea:	2a02      	cmp	r2, #2
   44cec:	f04f 0300 	mov.w	r3, #0
   44cf0:	d10f      	bne.n	44d12 <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   44cf2:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   44cf4:	880b      	ldrh	r3, [r1, #0]
   44cf6:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   44cf8:	2001      	movs	r0, #1
}
   44cfa:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   44cfc:	2301      	movs	r3, #1
   44cfe:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   44d00:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   44d02:	6043      	str	r3, [r0, #4]
		break;
   44d04:	e7f8      	b.n	44cf8 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   44d06:	2302      	movs	r3, #2
   44d08:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   44d0c:	f7ff fed9 	bl	44ac2 <memcpy>
		break;
   44d10:	e7f2      	b.n	44cf8 <bt_uuid_create+0x18>
	switch (data_len) {
   44d12:	4618      	mov	r0, r3
   44d14:	e7f1      	b.n	44cfa <bt_uuid_create+0x1a>

00044d16 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   44d16:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   44d18:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   44d1a:	2106      	movs	r1, #6
{
   44d1c:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   44d1e:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   44d22:	f7ed fc99 	bl	32658 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   44d26:	b918      	cbnz	r0, 44d30 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   44d28:	79a3      	ldrb	r3, [r4, #6]
   44d2a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   44d2e:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   44d30:	bd10      	pop	{r4, pc}

00044d32 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   44d32:	280f      	cmp	r0, #15
   44d34:	d807      	bhi.n	44d46 <bt_hci_evt_get_flags+0x14>
   44d36:	280d      	cmp	r0, #13
   44d38:	d80b      	bhi.n	44d52 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   44d3a:	2805      	cmp	r0, #5
   44d3c:	bf08      	it	eq
   44d3e:	2003      	moveq	r0, #3
   44d40:	bf18      	it	ne
   44d42:	2002      	movne	r0, #2
   44d44:	4770      	bx	lr
	switch (evt) {
   44d46:	2813      	cmp	r0, #19
   44d48:	d003      	beq.n	44d52 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   44d4a:	281a      	cmp	r0, #26
   44d4c:	bf08      	it	eq
   44d4e:	2001      	moveq	r0, #1
   44d50:	e7f6      	b.n	44d40 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   44d52:	2001      	movs	r0, #1
	}
}
   44d54:	4770      	bx	lr

00044d56 <handle_event>:
{
   44d56:	b430      	push	{r4, r5}
   44d58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   44d5c:	4604      	mov	r4, r0
   44d5e:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   44d60:	429a      	cmp	r2, r3
   44d62:	d101      	bne.n	44d68 <handle_event+0x12>
}
   44d64:	bc30      	pop	{r4, r5}
   44d66:	4770      	bx	lr
		if (handler->event != event) {
   44d68:	4611      	mov	r1, r2
   44d6a:	f811 5b08 	ldrb.w	r5, [r1], #8
   44d6e:	42a5      	cmp	r5, r4
   44d70:	d106      	bne.n	44d80 <handle_event+0x2a>
		if (buf->len < handler->min_len) {
   44d72:	8981      	ldrh	r1, [r0, #12]
   44d74:	7853      	ldrb	r3, [r2, #1]
   44d76:	4299      	cmp	r1, r3
   44d78:	d3f4      	bcc.n	44d64 <handle_event+0xe>
}
   44d7a:	bc30      	pop	{r4, r5}
		handler->handler(buf);
   44d7c:	6853      	ldr	r3, [r2, #4]
   44d7e:	4718      	bx	r3
   44d80:	460a      	mov	r2, r1
   44d82:	e7ed      	b.n	44d60 <handle_event+0xa>

00044d84 <hci_data_buf_overflow>:
}
   44d84:	4770      	bx	lr

00044d86 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   44d86:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   44d8a:	b183      	cbz	r3, 44dae <update_sec_level+0x28>
   44d8c:	7b5a      	ldrb	r2, [r3, #13]
   44d8e:	07d1      	lsls	r1, r2, #31
   44d90:	d50d      	bpl.n	44dae <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   44d92:	06d2      	lsls	r2, r2, #27
   44d94:	d50d      	bpl.n	44db2 <update_sec_level+0x2c>
   44d96:	7b1b      	ldrb	r3, [r3, #12]
   44d98:	2b10      	cmp	r3, #16
   44d9a:	bf14      	ite	ne
   44d9c:	2303      	movne	r3, #3
   44d9e:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   44da0:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   44da2:	7a80      	ldrb	r0, [r0, #10]
}
   44da4:	4298      	cmp	r0, r3
   44da6:	bf8c      	ite	hi
   44da8:	2000      	movhi	r0, #0
   44daa:	2001      	movls	r0, #1
   44dac:	4770      	bx	lr
   44dae:	2302      	movs	r3, #2
   44db0:	e7f6      	b.n	44da0 <update_sec_level+0x1a>
   44db2:	2303      	movs	r3, #3
   44db4:	e7f4      	b.n	44da0 <update_sec_level+0x1a>

00044db6 <atomic_or>:
{
   44db6:	b510      	push	{r4, lr}
   44db8:	4603      	mov	r3, r0
}
   44dba:	f3bf 8f5b 	dmb	ish
   44dbe:	e853 0f00 	ldrex	r0, [r3]
   44dc2:	ea40 0201 	orr.w	r2, r0, r1
   44dc6:	e843 2400 	strex	r4, r2, [r3]
   44dca:	2c00      	cmp	r4, #0
   44dcc:	d1f7      	bne.n	44dbe <atomic_or+0x8>
   44dce:	f3bf 8f5b 	dmb	ish
   44dd2:	bd10      	pop	{r4, pc}

00044dd4 <hci_disconn_complete>:
{
   44dd4:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   44dd6:	6885      	ldr	r5, [r0, #8]
	if (evt->status) {
   44dd8:	782e      	ldrb	r6, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   44dda:	f8b5 0001 	ldrh.w	r0, [r5, #1]
	if (evt->status) {
   44dde:	b96e      	cbnz	r6, 44dfc <hci_disconn_complete+0x28>
	conn = bt_conn_lookup_handle(handle);
   44de0:	f7e7 fca6 	bl	2c730 <bt_conn_lookup_handle>
	if (!conn) {
   44de4:	4604      	mov	r4, r0
   44de6:	b148      	cbz	r0, 44dfc <hci_disconn_complete+0x28>
	conn->err = evt->reason;
   44de8:	78eb      	ldrb	r3, [r5, #3]
   44dea:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   44dec:	4631      	mov	r1, r6
   44dee:	f7e7 fca7 	bl	2c740 <bt_conn_set_state>
		bt_conn_unref(conn);
   44df2:	4620      	mov	r0, r4
}
   44df4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   44df8:	f000 be03 	b.w	45a02 <bt_conn_unref>
}
   44dfc:	bd70      	pop	{r4, r5, r6, pc}

00044dfe <le_data_len_change>:
{
   44dfe:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   44e00:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   44e02:	8818      	ldrh	r0, [r3, #0]
   44e04:	f7e7 fc94 	bl	2c730 <bt_conn_lookup_handle>
	if (!conn) {
   44e08:	b118      	cbz	r0, 44e12 <le_data_len_change+0x14>
}
   44e0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   44e0e:	f000 bdf8 	b.w	45a02 <bt_conn_unref>
}
   44e12:	bd08      	pop	{r3, pc}

00044e14 <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   44e14:	2101      	movs	r1, #1
   44e16:	3008      	adds	r0, #8
   44e18:	f002 bdad 	b.w	47976 <net_buf_simple_pull_mem>

00044e1c <le_conn_update_complete>:
{
   44e1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   44e1e:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   44e20:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   44e24:	f7e7 fc84 	bl	2c730 <bt_conn_lookup_handle>
	if (!conn) {
   44e28:	4604      	mov	r4, r0
   44e2a:	b390      	cbz	r0, 44e92 <le_conn_update_complete+0x76>
	if (!evt->status) {
   44e2c:	782b      	ldrb	r3, [r5, #0]
   44e2e:	b9cb      	cbnz	r3, 44e64 <le_conn_update_complete+0x48>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   44e30:	792a      	ldrb	r2, [r5, #4]
   44e32:	78eb      	ldrb	r3, [r5, #3]
   44e34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   44e38:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   44e3c:	79aa      	ldrb	r2, [r5, #6]
   44e3e:	796b      	ldrb	r3, [r5, #5]
   44e40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   44e44:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   44e48:	79eb      	ldrb	r3, [r5, #7]
   44e4a:	7a2a      	ldrb	r2, [r5, #8]
   44e4c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   44e50:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   44e54:	f7e7 fd3e 	bl	2c8d4 <notify_le_param_updated>
	bt_conn_unref(conn);
   44e58:	4620      	mov	r0, r4
}
   44e5a:	b003      	add	sp, #12
   44e5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_conn_unref(conn);
   44e60:	f000 bdcf 	b.w	45a02 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   44e64:	2b1a      	cmp	r3, #26
   44e66:	d1f7      	bne.n	44e58 <le_conn_update_complete+0x3c>
   44e68:	78c3      	ldrb	r3, [r0, #3]
   44e6a:	2b01      	cmp	r3, #1
   44e6c:	d1f4      	bne.n	44e58 <le_conn_update_complete+0x3c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   44e6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   44e72:	3004      	adds	r0, #4
   44e74:	f7ff ff9f 	bl	44db6 <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   44e78:	0543      	lsls	r3, r0, #21
   44e7a:	d4ed      	bmi.n	44e58 <le_conn_update_complete+0x3c>
		param.interval_min = conn->le.interval_min;
   44e7c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   44e80:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   44e82:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   44e84:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   44e88:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   44e8a:	4620      	mov	r0, r4
   44e8c:	f7e8 f826 	bl	2cedc <bt_l2cap_update_conn_param>
   44e90:	e7e2      	b.n	44e58 <le_conn_update_complete+0x3c>
}
   44e92:	b003      	add	sp, #12
   44e94:	bd30      	pop	{r4, r5, pc}

00044e96 <hci_vendor_event>:
static void hci_vendor_event(struct net_buf *buf)
   44e96:	4770      	bx	lr

00044e98 <sys_put_le64>:
	dst[1] = val >> 8;
   44e98:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   44e9c:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   44e9e:	0e00      	lsrs	r0, r0, #24
   44ea0:	7053      	strb	r3, [r2, #1]
   44ea2:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   44ea4:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   44ea6:	f3c1 2007 	ubfx	r0, r1, #8, #8
   44eaa:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   44eac:	7093      	strb	r3, [r2, #2]
   44eae:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   44eb0:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   44eb2:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   44eb4:	71d1      	strb	r1, [r2, #7]
}
   44eb6:	4770      	bx	lr

00044eb8 <hci_num_completed_packets>:
{
   44eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < evt->num_handles; i++) {
   44ebc:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   44ebe:	6887      	ldr	r7, [r0, #8]
			tx->pending_no_cb = 0U;
   44ec0:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   44ec2:	783b      	ldrb	r3, [r7, #0]
   44ec4:	429d      	cmp	r5, r3
   44ec6:	db01      	blt.n	44ecc <hci_num_completed_packets+0x14>
}
   44ec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   44ecc:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   44ed0:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   44ed4:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   44ed8:	f7e7 fc2a 	bl	2c730 <bt_conn_lookup_handle>
		if (!conn) {
   44edc:	4604      	mov	r4, r0
   44ede:	b318      	cbz	r0, 44f28 <hci_num_completed_packets+0x70>
			k_work_submit(&conn->tx_complete_work);
   44ee0:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   44ee4:	b1ee      	cbz	r6, 44f22 <hci_num_completed_packets+0x6a>
	__asm__ volatile(
   44ee6:	f04f 0320 	mov.w	r3, #32
   44eea:	f3ef 8211 	mrs	r2, BASEPRI
   44eee:	f383 8812 	msr	BASEPRI_MAX, r3
   44ef2:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   44ef6:	69e3      	ldr	r3, [r4, #28]
   44ef8:	b16b      	cbz	r3, 44f16 <hci_num_completed_packets+0x5e>
				conn->pending_no_cb--;
   44efa:	3b01      	subs	r3, #1
   44efc:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   44efe:	f382 8811 	msr	BASEPRI, r2
   44f02:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   44f06:	4620      	mov	r0, r4
   44f08:	f7e7 fb72 	bl	2c5f0 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   44f0c:	3e01      	subs	r6, #1
   44f0e:	f7fc fb29 	bl	41564 <z_impl_k_sem_give>
   44f12:	b2b6      	uxth	r6, r6
   44f14:	e7e6      	b.n	44ee4 <hci_num_completed_packets+0x2c>
	return list->head;
   44f16:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   44f18:	b943      	cbnz	r3, 44f2c <hci_num_completed_packets+0x74>
   44f1a:	f382 8811 	msr	BASEPRI, r2
   44f1e:	f3bf 8f6f 	isb	sy
		bt_conn_unref(conn);
   44f22:	4620      	mov	r0, r4
   44f24:	f000 fd6d 	bl	45a02 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   44f28:	3501      	adds	r5, #1
   44f2a:	e7ca      	b.n	44ec2 <hci_num_completed_packets+0xa>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   44f2c:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   44f2e:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   44f30:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   44f32:	428b      	cmp	r3, r1
	list->tail = node;
   44f34:	bf08      	it	eq
   44f36:	61a0      	streq	r0, [r4, #24]
   44f38:	f382 8811 	msr	BASEPRI, r2
   44f3c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   44f40:	f04f 0220 	mov.w	r2, #32
   44f44:	f3ef 8111 	mrs	r1, BASEPRI
   44f48:	f382 8812 	msr	BASEPRI_MAX, r2
   44f4c:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   44f50:	68da      	ldr	r2, [r3, #12]
   44f52:	61e2      	str	r2, [r4, #28]
	return list->tail;
   44f54:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   44f56:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   44f5a:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   44f5e:	b94a      	cbnz	r2, 44f74 <hci_num_completed_packets+0xbc>
	list->head = node;
   44f60:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   44f64:	f381 8811 	msr	BASEPRI, r1
   44f68:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   44f6c:	4648      	mov	r0, r9
   44f6e:	f7fc fc7d 	bl	4186c <k_work_submit>
   44f72:	e7c8      	b.n	44f06 <hci_num_completed_packets+0x4e>
	parent->next = child;
   44f74:	6013      	str	r3, [r2, #0]
	list->tail = node;
   44f76:	6263      	str	r3, [r4, #36]	; 0x24
}
   44f78:	e7f4      	b.n	44f64 <hci_num_completed_packets+0xac>

00044f7a <le_ltk_request>:
{
   44f7a:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   44f7c:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   44f7e:	8826      	ldrh	r6, [r4, #0]
{
   44f80:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   44f82:	b2b0      	uxth	r0, r6
   44f84:	f7e7 fbd4 	bl	2c730 <bt_conn_lookup_handle>
	if (!conn) {
   44f88:	4605      	mov	r5, r0
   44f8a:	b318      	cbz	r0, 44fd4 <le_ltk_request+0x5a>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   44f8c:	af02      	add	r7, sp, #8
   44f8e:	f8d4 2002 	ldr.w	r2, [r4, #2]
   44f92:	f8d4 3006 	ldr.w	r3, [r4, #6]
   44f96:	9701      	str	r7, [sp, #4]
   44f98:	8961      	ldrh	r1, [r4, #10]
   44f9a:	9100      	str	r1, [sp, #0]
   44f9c:	f002 f9f1 	bl	47382 <bt_smp_request_ltk>
   44fa0:	b1d0      	cbz	r0, 44fd8 <le_ltk_request+0x5e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   44fa2:	2112      	movs	r1, #18
   44fa4:	f242 001a 	movw	r0, #8218	; 0x201a
   44fa8:	f7e6 f856 	bl	2b058 <bt_hci_cmd_create>
	if (!buf) {
   44fac:	4604      	mov	r4, r0
   44fae:	b170      	cbz	r0, 44fce <le_ltk_request+0x54>
	return net_buf_simple_add(&buf->b, len);
   44fb0:	2112      	movs	r1, #18
   44fb2:	3008      	adds	r0, #8
   44fb4:	f002 fcb8 	bl	47928 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   44fb8:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   44fba:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   44fbe:	2210      	movs	r2, #16
   44fc0:	f7ff fd7f 	bl	44ac2 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   44fc4:	4621      	mov	r1, r4
   44fc6:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   44fca:	f7e6 f87f 	bl	2b0cc <bt_hci_cmd_send>
	bt_conn_unref(conn);
   44fce:	4628      	mov	r0, r5
   44fd0:	f000 fd17 	bl	45a02 <bt_conn_unref>
}
   44fd4:	b007      	add	sp, #28
   44fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   44fd8:	2102      	movs	r1, #2
   44fda:	f242 001b 	movw	r0, #8219	; 0x201b
   44fde:	f7e6 f83b 	bl	2b058 <bt_hci_cmd_create>
	if (!buf) {
   44fe2:	4604      	mov	r4, r0
   44fe4:	2800      	cmp	r0, #0
   44fe6:	d0f2      	beq.n	44fce <le_ltk_request+0x54>
   44fe8:	2102      	movs	r1, #2
   44fea:	3008      	adds	r0, #8
   44fec:	f002 fc9c 	bl	47928 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   44ff0:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   44ff2:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   44ff4:	f242 001b 	movw	r0, #8219	; 0x201b
   44ff8:	e7e7      	b.n	44fca <le_ltk_request+0x50>

00044ffa <le_conn_param_neg_reply>:
{
   44ffa:	b570      	push	{r4, r5, r6, lr}
   44ffc:	4606      	mov	r6, r0
   44ffe:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   45000:	f242 0021 	movw	r0, #8225	; 0x2021
   45004:	2103      	movs	r1, #3
   45006:	f7e6 f827 	bl	2b058 <bt_hci_cmd_create>
	if (!buf) {
   4500a:	4604      	mov	r4, r0
   4500c:	b160      	cbz	r0, 45028 <le_conn_param_neg_reply+0x2e>
   4500e:	2103      	movs	r1, #3
   45010:	3008      	adds	r0, #8
   45012:	f002 fc89 	bl	47928 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   45016:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   45018:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   4501a:	4621      	mov	r1, r4
   4501c:	f242 0021 	movw	r0, #8225	; 0x2021
}
   45020:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   45024:	f7e6 b852 	b.w	2b0cc <bt_hci_cmd_send>
}
   45028:	bd70      	pop	{r4, r5, r6, pc}

0004502a <le_conn_param_req>:
{
   4502a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   4502c:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   4502e:	78d9      	ldrb	r1, [r3, #3]
   45030:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   45032:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   45034:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   45038:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   4503c:	7959      	ldrb	r1, [r3, #5]
   4503e:	791a      	ldrb	r2, [r3, #4]
   45040:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   45044:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   45048:	799a      	ldrb	r2, [r3, #6]
   4504a:	79d9      	ldrb	r1, [r3, #7]
   4504c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   45050:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   45054:	7a1a      	ldrb	r2, [r3, #8]
   45056:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   45058:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   4505a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   4505e:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   45060:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   45064:	f7e7 fb64 	bl	2c730 <bt_conn_lookup_handle>
	if (!conn) {
   45068:	4606      	mov	r6, r0
   4506a:	b928      	cbnz	r0, 45078 <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   4506c:	2102      	movs	r1, #2
   4506e:	4620      	mov	r0, r4
   45070:	f7ff ffc3 	bl	44ffa <le_conn_param_neg_reply>
}
   45074:	b003      	add	sp, #12
   45076:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   45078:	4669      	mov	r1, sp
   4507a:	f7e7 fc8f 	bl	2c99c <le_param_req>
   4507e:	b938      	cbnz	r0, 45090 <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   45080:	211e      	movs	r1, #30
   45082:	4620      	mov	r0, r4
   45084:	f7ff ffb9 	bl	44ffa <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   45088:	4630      	mov	r0, r6
   4508a:	f000 fcba 	bl	45a02 <bt_conn_unref>
   4508e:	e7f1      	b.n	45074 <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   45090:	210e      	movs	r1, #14
   45092:	f242 0020 	movw	r0, #8224	; 0x2020
   45096:	f7e5 ffdf 	bl	2b058 <bt_hci_cmd_create>
	if (!buf) {
   4509a:	4605      	mov	r5, r0
   4509c:	2800      	cmp	r0, #0
   4509e:	d0f3      	beq.n	45088 <le_conn_param_req+0x5e>
   450a0:	210e      	movs	r1, #14
   450a2:	3008      	adds	r0, #8
   450a4:	f002 fc40 	bl	47928 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   450a8:	220e      	movs	r2, #14
   450aa:	4604      	mov	r4, r0
   450ac:	2100      	movs	r1, #0
   450ae:	f7ff fd13 	bl	44ad8 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   450b2:	f8bd 3000 	ldrh.w	r3, [sp]
   450b6:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   450b8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   450bc:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   450be:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   450c2:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   450c4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   450c8:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   450ca:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   450cc:	4629      	mov	r1, r5
   450ce:	f242 0020 	movw	r0, #8224	; 0x2020
   450d2:	f7e5 fffb 	bl	2b0cc <bt_hci_cmd_send>
   450d6:	e7d7      	b.n	45088 <le_conn_param_req+0x5e>

000450d8 <hci_le_read_max_data_len>:
{
   450d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   450da:	4606      	mov	r6, r0
   450dc:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   450de:	aa01      	add	r2, sp, #4
   450e0:	2100      	movs	r1, #0
   450e2:	f242 002f 	movw	r0, #8239	; 0x202f
   450e6:	f7e6 f813 	bl	2b110 <bt_hci_cmd_send_sync>
	if (err) {
   450ea:	4604      	mov	r4, r0
   450ec:	b948      	cbnz	r0, 45102 <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   450ee:	9801      	ldr	r0, [sp, #4]
   450f0:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   450f2:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   450f6:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   450f8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   450fc:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   450fe:	f7f7 ffd3 	bl	3d0a8 <net_buf_unref>
}
   45102:	4620      	mov	r0, r4
   45104:	b002      	add	sp, #8
   45106:	bd70      	pop	{r4, r5, r6, pc}

00045108 <bt_hci_disconnect>:
{
   45108:	b570      	push	{r4, r5, r6, lr}
   4510a:	4606      	mov	r6, r0
   4510c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   4510e:	f240 4006 	movw	r0, #1030	; 0x406
   45112:	2103      	movs	r1, #3
   45114:	f7e5 ffa0 	bl	2b058 <bt_hci_cmd_create>
	if (!buf) {
   45118:	4604      	mov	r4, r0
   4511a:	b168      	cbz	r0, 45138 <bt_hci_disconnect+0x30>
   4511c:	2103      	movs	r1, #3
   4511e:	3008      	adds	r0, #8
   45120:	f002 fc02 	bl	47928 <net_buf_simple_add>
	disconn->reason = reason;
   45124:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   45126:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   45128:	4621      	mov	r1, r4
   4512a:	2200      	movs	r2, #0
}
   4512c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   45130:	f240 4006 	movw	r0, #1030	; 0x406
   45134:	f7e5 bfec 	b.w	2b110 <bt_hci_cmd_send_sync>
}
   45138:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4513c:	bd70      	pop	{r4, r5, r6, pc}

0004513e <bt_le_set_data_len>:
{
   4513e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   45140:	4607      	mov	r7, r0
   45142:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   45144:	f242 0022 	movw	r0, #8226	; 0x2022
   45148:	2106      	movs	r1, #6
{
   4514a:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   4514c:	f7e5 ff84 	bl	2b058 <bt_hci_cmd_create>
	if (!buf) {
   45150:	4604      	mov	r4, r0
   45152:	b170      	cbz	r0, 45172 <bt_le_set_data_len+0x34>
   45154:	2106      	movs	r1, #6
   45156:	3008      	adds	r0, #8
   45158:	f002 fbe6 	bl	47928 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   4515c:	883b      	ldrh	r3, [r7, #0]
   4515e:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   45160:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   45162:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   45164:	4621      	mov	r1, r4
   45166:	f242 0022 	movw	r0, #8226	; 0x2022
}
   4516a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   4516e:	f7e5 bfad 	b.w	2b0cc <bt_hci_cmd_send>
}
   45172:	f06f 0068 	mvn.w	r0, #104	; 0x68
   45176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00045178 <bt_le_set_phy>:
{
   45178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4517c:	4681      	mov	r9, r0
   4517e:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   45180:	f242 0032 	movw	r0, #8242	; 0x2032
   45184:	2107      	movs	r1, #7
{
   45186:	f89d a020 	ldrb.w	sl, [sp, #32]
   4518a:	4617      	mov	r7, r2
   4518c:	461e      	mov	r6, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   4518e:	f7e5 ff63 	bl	2b058 <bt_hci_cmd_create>
	if (!buf) {
   45192:	4605      	mov	r5, r0
   45194:	b198      	cbz	r0, 451be <bt_le_set_phy+0x46>
   45196:	2107      	movs	r1, #7
   45198:	3008      	adds	r0, #8
   4519a:	f002 fbc5 	bl	47928 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   4519e:	f8b9 3000 	ldrh.w	r3, [r9]
	cp->all_phys = all_phys;
   451a2:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   451a6:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   451a8:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   451aa:	f8a0 a005 	strh.w	sl, [r0, #5]
	cp->handle = sys_cpu_to_le16(conn->handle);
   451ae:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   451b0:	4629      	mov	r1, r5
   451b2:	f242 0032 	movw	r0, #8242	; 0x2032
}
   451b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   451ba:	f7e5 bf87 	b.w	2b0cc <bt_hci_cmd_send>
}
   451be:	f06f 0068 	mvn.w	r0, #104	; 0x68
   451c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000451c6 <le_phy_update_complete>:
{
   451c6:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
   451c8:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   451ca:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   451ce:	f7e7 faaf 	bl	2c730 <bt_conn_lookup_handle>
	if (!conn) {
   451d2:	4604      	mov	r4, r0
   451d4:	b338      	cbz	r0, 45226 <le_phy_update_complete+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   451d6:	f3bf 8f5b 	dmb	ish
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   451da:	3004      	adds	r0, #4
   451dc:	e850 3f00 	ldrex	r3, [r0]
   451e0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
   451e4:	e840 2100 	strex	r1, r2, [r0]
   451e8:	2900      	cmp	r1, #0
   451ea:	d1f7      	bne.n	451dc <le_phy_update_complete+0x16>
   451ec:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   451f0:	061b      	lsls	r3, r3, #24
   451f2:	d506      	bpl.n	45202 <le_phy_update_complete+0x3c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   451f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   451f8:	f7ff fddd 	bl	44db6 <atomic_or>
		conn_auto_initiate(conn);
   451fc:	4620      	mov	r0, r4
   451fe:	f7e5 fff3 	bl	2b1e8 <conn_auto_initiate>
	conn->le.phy.tx_phy = bt_get_phy(evt->tx_phy);
   45202:	78e8      	ldrb	r0, [r5, #3]
   45204:	f7e5 ffe6 	bl	2b1d4 <bt_get_phy>
   45208:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
	conn->le.phy.rx_phy = bt_get_phy(evt->rx_phy);
   4520c:	7928      	ldrb	r0, [r5, #4]
   4520e:	f7e5 ffe1 	bl	2b1d4 <bt_get_phy>
   45212:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
	notify_le_phy_updated(conn);
   45216:	4620      	mov	r0, r4
   45218:	f7e7 fb9e 	bl	2c958 <notify_le_phy_updated>
	bt_conn_unref(conn);
   4521c:	4620      	mov	r0, r4
}
   4521e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   45222:	f000 bbee 	b.w	45a02 <bt_conn_unref>
}
   45226:	bd38      	pop	{r3, r4, r5, pc}

00045228 <le_remote_feat_complete>:
{
   45228:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   4522a:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4522c:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   45230:	f7e7 fa7e 	bl	2c730 <bt_conn_lookup_handle>
	if (!conn) {
   45234:	4604      	mov	r4, r0
   45236:	b198      	cbz	r0, 45260 <le_remote_feat_complete+0x38>
	if (!evt->status) {
   45238:	782b      	ldrb	r3, [r5, #0]
   4523a:	b923      	cbnz	r3, 45246 <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
   4523c:	2208      	movs	r2, #8
   4523e:	1ce9      	adds	r1, r5, #3
   45240:	30ac      	adds	r0, #172	; 0xac
   45242:	f7ff fc3e 	bl	44ac2 <memcpy>
   45246:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   4524a:	1d20      	adds	r0, r4, #4
   4524c:	f7ff fdb3 	bl	44db6 <atomic_or>
	conn_auto_initiate(conn);
   45250:	4620      	mov	r0, r4
   45252:	f7e5 ffc9 	bl	2b1e8 <conn_auto_initiate>
	bt_conn_unref(conn);
   45256:	4620      	mov	r0, r4
}
   45258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   4525c:	f000 bbd1 	b.w	45a02 <bt_conn_unref>
}
   45260:	bd38      	pop	{r3, r4, r5, pc}

00045262 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   45262:	6880      	ldr	r0, [r0, #8]
   45264:	f7e6 b824 	b.w	2b2b0 <bt_hci_le_enh_conn_complete>

00045268 <le_legacy_conn_complete>:
{
   45268:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   4526a:	6881      	ldr	r1, [r0, #8]
{
   4526c:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   4526e:	780b      	ldrb	r3, [r1, #0]
   45270:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   45274:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   45278:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   4527c:	78cb      	ldrb	r3, [r1, #3]
   4527e:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   45282:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   45286:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   4528a:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   4528e:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   45292:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   45296:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   4529a:	7c4b      	ldrb	r3, [r1, #17]
   4529c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	memcpy(dst, src, sizeof(*dst));
   452a0:	2207      	movs	r2, #7
   452a2:	3104      	adds	r1, #4
   452a4:	a803      	add	r0, sp, #12
   452a6:	f7ff fc0c 	bl	44ac2 <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   452aa:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   452ac:	4669      	mov	r1, sp
   452ae:	2206      	movs	r2, #6
   452b0:	f10d 0013 	add.w	r0, sp, #19
   452b4:	9400      	str	r4, [sp, #0]
   452b6:	f8ad 4004 	strh.w	r4, [sp, #4]
   452ba:	f7ff fc02 	bl	44ac2 <memcpy>
   452be:	2206      	movs	r2, #6
   452c0:	4669      	mov	r1, sp
   452c2:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   452c6:	9400      	str	r4, [sp, #0]
   452c8:	f8ad 4004 	strh.w	r4, [sp, #4]
   452cc:	f7ff fbf9 	bl	44ac2 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   452d0:	a802      	add	r0, sp, #8
   452d2:	f7e5 ffed 	bl	2b2b0 <bt_hci_le_enh_conn_complete>
}
   452d6:	b00a      	add	sp, #40	; 0x28
   452d8:	bd10      	pop	{r4, pc}

000452da <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   452da:	8803      	ldrh	r3, [r0, #0]
   452dc:	8842      	ldrh	r2, [r0, #2]
   452de:	4293      	cmp	r3, r2
{
   452e0:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   452e2:	d819      	bhi.n	45318 <bt_le_conn_params_valid+0x3e>
   452e4:	2b05      	cmp	r3, #5
   452e6:	d917      	bls.n	45318 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   452e8:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   452ec:	d814      	bhi.n	45318 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   452ee:	8883      	ldrh	r3, [r0, #4]
   452f0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   452f4:	d210      	bcs.n	45318 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   452f6:	88c0      	ldrh	r0, [r0, #6]
   452f8:	f1a0 010a 	sub.w	r1, r0, #10
   452fc:	b289      	uxth	r1, r1
   452fe:	f640 4476 	movw	r4, #3190	; 0xc76
   45302:	42a1      	cmp	r1, r4
   45304:	d808      	bhi.n	45318 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   45306:	3301      	adds	r3, #1
   45308:	b29b      	uxth	r3, r3
   4530a:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   4530c:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   45310:	bf34      	ite	cc
   45312:	2001      	movcc	r0, #1
   45314:	2000      	movcs	r0, #0
}
   45316:	bd10      	pop	{r4, pc}
		return false;
   45318:	2000      	movs	r0, #0
   4531a:	e7fc      	b.n	45316 <bt_le_conn_params_valid+0x3c>

0004531c <hci_encrypt_key_refresh_complete>:
{
   4531c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   4531e:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   45320:	f8b3 0001 	ldrh.w	r0, [r3, #1]
	uint8_t status = evt->status;
   45324:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   45326:	f7e7 fa03 	bl	2c730 <bt_conn_lookup_handle>
	if (!conn) {
   4532a:	4604      	mov	r4, r0
   4532c:	b320      	cbz	r0, 45378 <hci_encrypt_key_refresh_complete+0x5c>
	if (status) {
   4532e:	b165      	cbz	r5, 4534a <hci_encrypt_key_refresh_complete+0x2e>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   45330:	4628      	mov	r0, r5
   45332:	f7e6 f89d 	bl	2b470 <bt_security_err_get>
   45336:	4629      	mov	r1, r5
   45338:	4602      	mov	r2, r0
   4533a:	4620      	mov	r0, r4
   4533c:	f7e7 fb96 	bl	2ca6c <bt_conn_security_changed>
	bt_conn_unref(conn);
   45340:	4620      	mov	r0, r4
}
   45342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   45346:	f000 bb5c 	b.w	45a02 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   4534a:	7883      	ldrb	r3, [r0, #2]
   4534c:	2b01      	cmp	r3, #1
   4534e:	d1ef      	bne.n	45330 <hci_encrypt_key_refresh_complete+0x14>
		bt_smp_update_keys(conn);
   45350:	f002 f9bd 	bl	476ce <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   45354:	4620      	mov	r0, r4
   45356:	f7ff fd16 	bl	44d86 <update_sec_level>
   4535a:	2800      	cmp	r0, #0
   4535c:	d1e8      	bne.n	45330 <hci_encrypt_key_refresh_complete+0x14>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   4535e:	2005      	movs	r0, #5
   45360:	f7e6 f886 	bl	2b470 <bt_security_err_get>
   45364:	2105      	movs	r1, #5
   45366:	4602      	mov	r2, r0
   45368:	4620      	mov	r0, r4
   4536a:	f7e7 fb7f 	bl	2ca6c <bt_conn_security_changed>
		bt_conn_disconnect(conn, status);
   4536e:	2105      	movs	r1, #5
   45370:	4620      	mov	r0, r4
   45372:	f000 fb8a 	bl	45a8a <bt_conn_disconnect>
   45376:	e7e3      	b.n	45340 <hci_encrypt_key_refresh_complete+0x24>
}
   45378:	bd38      	pop	{r3, r4, r5, pc}

0004537a <hci_encrypt_change>:
{
   4537a:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   4537c:	6886      	ldr	r6, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4537e:	f8b6 0001 	ldrh.w	r0, [r6, #1]
	uint8_t status = evt->status;
   45382:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   45384:	f7e7 f9d4 	bl	2c730 <bt_conn_lookup_handle>
	if (!conn) {
   45388:	4604      	mov	r4, r0
   4538a:	b368      	cbz	r0, 453e8 <hci_encrypt_change+0x6e>
	if (status) {
   4538c:	b165      	cbz	r5, 453a8 <hci_encrypt_change+0x2e>
		bt_conn_security_changed(conn, status,
   4538e:	4628      	mov	r0, r5
   45390:	f7e6 f86e 	bl	2b470 <bt_security_err_get>
   45394:	4629      	mov	r1, r5
   45396:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   45398:	4620      	mov	r0, r4
   4539a:	f7e7 fb67 	bl	2ca6c <bt_conn_security_changed>
	bt_conn_unref(conn);
   4539e:	4620      	mov	r0, r4
}
   453a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   453a4:	f000 bb2d 	b.w	45a02 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   453a8:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   453aa:	78f3      	ldrb	r3, [r6, #3]
   453ac:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   453ae:	2a01      	cmp	r2, #1
   453b0:	d005      	beq.n	453be <hci_encrypt_change+0x44>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   453b2:	2000      	movs	r0, #0
   453b4:	f7e6 f85c 	bl	2b470 <bt_security_err_get>
   453b8:	2100      	movs	r1, #0
   453ba:	4602      	mov	r2, r0
   453bc:	e7ec      	b.n	45398 <hci_encrypt_change+0x1e>
		if (conn->encrypt) {
   453be:	b10b      	cbz	r3, 453c4 <hci_encrypt_change+0x4a>
			bt_smp_update_keys(conn);
   453c0:	f002 f985 	bl	476ce <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   453c4:	4620      	mov	r0, r4
   453c6:	f7ff fcde 	bl	44d86 <update_sec_level>
   453ca:	2800      	cmp	r0, #0
   453cc:	d1f1      	bne.n	453b2 <hci_encrypt_change+0x38>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   453ce:	2005      	movs	r0, #5
   453d0:	f7e6 f84e 	bl	2b470 <bt_security_err_get>
   453d4:	2105      	movs	r1, #5
   453d6:	4602      	mov	r2, r0
   453d8:	4620      	mov	r0, r4
   453da:	f7e7 fb47 	bl	2ca6c <bt_conn_security_changed>
		bt_conn_disconnect(conn, status);
   453de:	2105      	movs	r1, #5
   453e0:	4620      	mov	r0, r4
   453e2:	f000 fb52 	bl	45a8a <bt_conn_disconnect>
   453e6:	e7da      	b.n	4539e <hci_encrypt_change+0x24>
}
   453e8:	bd70      	pop	{r4, r5, r6, pc}

000453ea <bt_send>:
		return bt_hci_ecc_send(buf);
   453ea:	f7e5 bae5 	b.w	2a9b8 <bt_hci_ecc_send>

000453ee <bt_addr_le_is_bonded>:

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   453ee:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   453f0:	f7ea fa6c 	bl	2f8cc <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   453f4:	b118      	cbz	r0, 453fe <bt_addr_le_is_bonded+0x10>
   453f6:	89c0      	ldrh	r0, [r0, #14]
   453f8:	3800      	subs	r0, #0
   453fa:	bf18      	it	ne
   453fc:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   453fe:	bd08      	pop	{r3, pc}

00045400 <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   45400:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   45402:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   45406:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   45408:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4540c:	2100      	movs	r1, #0
{
   4540e:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   45410:	f7e5 fc6a 	bl	2ace8 <bt_buf_get_evt>
   45414:	2102      	movs	r1, #2
   45416:	4604      	mov	r4, r0
   45418:	3008      	adds	r0, #8
   4541a:	f002 fa85 	bl	47928 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   4541e:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   45420:	7045      	strb	r5, [r0, #1]

	return buf;
}
   45422:	4620      	mov	r0, r4
   45424:	bd70      	pop	{r4, r5, r6, pc}

00045426 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   45426:	3103      	adds	r1, #3
{
   45428:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   4542a:	b2c9      	uxtb	r1, r1
{
   4542c:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   4542e:	200e      	movs	r0, #14
   45430:	f7ff ffe6 	bl	45400 <bt_hci_evt_create>
   45434:	2103      	movs	r1, #3
   45436:	4604      	mov	r4, r0
   45438:	3008      	adds	r0, #8
   4543a:	f002 fa75 	bl	47928 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   4543e:	2301      	movs	r3, #1
   45440:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   45442:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   45446:	4620      	mov	r0, r4
   45448:	bd38      	pop	{r3, r4, r5, pc}

0004544a <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   4544a:	b570      	push	{r4, r5, r6, lr}
   4544c:	4605      	mov	r5, r0
   4544e:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   45450:	200f      	movs	r0, #15
   45452:	2104      	movs	r1, #4
   45454:	f7ff ffd4 	bl	45400 <bt_hci_evt_create>
   45458:	2104      	movs	r1, #4
   4545a:	4604      	mov	r4, r0
   4545c:	3008      	adds	r0, #8
   4545e:	f002 fa63 	bl	47928 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   45462:	2201      	movs	r2, #1
	cs->status = status;
   45464:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   45466:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   45468:	8045      	strh	r5, [r0, #2]

	return buf;
}
   4546a:	4620      	mov	r0, r4
   4546c:	bd70      	pop	{r4, r5, r6, pc}

0004546e <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   4546e:	2207      	movs	r2, #7
   45470:	f7ff bb27 	b.w	44ac2 <memcpy>

00045474 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   45474:	f3bf 8f5b 	dmb	ish
   45478:	6800      	ldr	r0, [r0, #0]
   4547a:	f3bf 8f5b 	dmb	ish
}
   4547e:	4770      	bx	lr

00045480 <adv_unpause_enabled>:
{
   45480:	b410      	push	{r4}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   45482:	f100 0310 	add.w	r3, r0, #16
   45486:	f3bf 8f5b 	dmb	ish
   4548a:	e853 2f00 	ldrex	r2, [r3]
   4548e:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
   45492:	e843 1400 	strex	r4, r1, [r3]
   45496:	2c00      	cmp	r4, #0
   45498:	d1f7      	bne.n	4548a <adv_unpause_enabled+0xa>
   4549a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   4549e:	0453      	lsls	r3, r2, #17
   454a0:	d503      	bpl.n	454aa <adv_unpause_enabled+0x2a>
}
   454a2:	bc10      	pop	{r4}
		bt_le_adv_set_enable(adv, true);
   454a4:	2101      	movs	r1, #1
   454a6:	f000 b9db 	b.w	45860 <bt_le_adv_set_enable>
}
   454aa:	bc10      	pop	{r4}
   454ac:	4770      	bx	lr

000454ae <hci_id_add.constprop.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   454ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   454b0:	4607      	mov	r7, r0
   454b2:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   454b4:	f242 0027 	movw	r0, #8231	; 0x2027
   454b8:	2127      	movs	r1, #39	; 0x27
   454ba:	f7e5 fdcd 	bl	2b058 <bt_hci_cmd_create>
	if (!buf) {
   454be:	4604      	mov	r4, r0
   454c0:	b1d0      	cbz	r0, 454f8 <hci_id_add.constprop.0+0x4a>
   454c2:	2127      	movs	r1, #39	; 0x27
   454c4:	3008      	adds	r0, #8
   454c6:	f002 fa2f 	bl	47928 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   454ca:	4639      	mov	r1, r7
   454cc:	4605      	mov	r5, r0
   454ce:	f7ff ffce 	bl	4546e <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   454d2:	4631      	mov	r1, r6
   454d4:	2210      	movs	r2, #16
   454d6:	1de8      	adds	r0, r5, #7
   454d8:	f7ff faf3 	bl	44ac2 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   454dc:	2210      	movs	r2, #16
   454de:	2100      	movs	r1, #0
   454e0:	f105 0017 	add.w	r0, r5, #23
   454e4:	f7ff faf8 	bl	44ad8 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   454e8:	4621      	mov	r1, r4
   454ea:	2200      	movs	r2, #0
}
   454ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   454f0:	f242 0027 	movw	r0, #8231	; 0x2027
   454f4:	f7e5 be0c 	b.w	2b110 <bt_hci_cmd_send_sync>
}
   454f8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   454fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000454fe <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   454fe:	7a03      	ldrb	r3, [r0, #8]
   45500:	075b      	lsls	r3, r3, #29
   45502:	d504      	bpl.n	4550e <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   45504:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   45508:	3001      	adds	r0, #1
   4550a:	f7ff bfd0 	b.w	454ae <hci_id_add.constprop.0>
}
   4550e:	4770      	bx	lr

00045510 <addr_res_enable>:
{
   45510:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   45512:	2101      	movs	r1, #1
{
   45514:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   45516:	f242 002d 	movw	r0, #8237	; 0x202d
   4551a:	f7e5 fd9d 	bl	2b058 <bt_hci_cmd_create>
	if (!buf) {
   4551e:	4604      	mov	r4, r0
   45520:	b158      	cbz	r0, 4553a <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   45522:	4629      	mov	r1, r5
   45524:	3008      	adds	r0, #8
   45526:	f002 fa0e 	bl	47946 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   4552a:	4621      	mov	r1, r4
   4552c:	2200      	movs	r2, #0
}
   4552e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   45532:	f242 002d 	movw	r0, #8237	; 0x202d
   45536:	f7e5 bdeb 	b.w	2b110 <bt_hci_cmd_send_sync>
}
   4553a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4553e:	bd38      	pop	{r3, r4, r5, pc}

00045540 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   45540:	f100 0210 	add.w	r2, r0, #16
{
   45544:	b508      	push	{r3, lr}
   45546:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   45548:	4610      	mov	r0, r2
   4554a:	f7ff ff93 	bl	45474 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   4554e:	0641      	lsls	r1, r0, #25
   45550:	d511      	bpl.n	45576 <adv_pause_enabled+0x36>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   45552:	f3bf 8f5b 	dmb	ish
   45556:	e852 0f00 	ldrex	r0, [r2]
   4555a:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
   4555e:	e842 0100 	strex	r1, r0, [r2]
   45562:	2900      	cmp	r1, #0
   45564:	d1f7      	bne.n	45556 <adv_pause_enabled+0x16>
   45566:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
   4556a:	4618      	mov	r0, r3
   4556c:	2100      	movs	r1, #0
}
   4556e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_set_enable(adv, false);
   45572:	f000 b975 	b.w	45860 <bt_le_adv_set_enable>
}
   45576:	bd08      	pop	{r3, pc}

00045578 <bt_lookup_id_addr>:
{
   45578:	b510      	push	{r4, lr}
   4557a:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   4557c:	f7ea f962 	bl	2f844 <bt_keys_find_irk>
		if (keys) {
   45580:	b100      	cbz	r0, 45584 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   45582:	1c44      	adds	r4, r0, #1
}
   45584:	4620      	mov	r0, r4
   45586:	bd10      	pop	{r4, pc}

00045588 <bt_id_set_adv_private_addr>:
{
   45588:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   4558a:	2106      	movs	r1, #6
   4558c:	4668      	mov	r0, sp
   4558e:	f7ed f863 	bl	32658 <bt_rand>
	if (err) {
   45592:	b940      	cbnz	r0, 455a6 <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   45594:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   45598:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   4559a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   4559e:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   455a2:	f7e6 f8f7 	bl	2b794 <set_random_address>
}
   455a6:	b003      	add	sp, #12
   455a8:	f85d fb04 	ldr.w	pc, [sp], #4

000455ac <bt_id_adv_random_addr_check>:
}
   455ac:	2001      	movs	r0, #1
   455ae:	4770      	bx	lr

000455b0 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   455b0:	7a03      	ldrb	r3, [r0, #8]
   455b2:	07d9      	lsls	r1, r3, #31
   455b4:	d504      	bpl.n	455c0 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   455b6:	f023 0301 	bic.w	r3, r3, #1
   455ba:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   455bc:	f7e6 b96c 	b.w	2b898 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   455c0:	0799      	lsls	r1, r3, #30
   455c2:	d504      	bpl.n	455ce <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   455c4:	f023 0302 	bic.w	r3, r3, #2
   455c8:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   455ca:	f7e6 b9f9 	b.w	2b9c0 <bt_id_del>
}
   455ce:	4770      	bx	lr

000455d0 <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   455d0:	2000      	movs	r0, #0
   455d2:	4770      	bx	lr

000455d4 <get_adv_channel_map>:
{
   455d4:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   455d6:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   455da:	bf0c      	ite	eq
   455dc:	2007      	moveq	r0, #7
   455de:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   455e0:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   455e2:	bf48      	it	mi
   455e4:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   455e8:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   455ea:	bf48      	it	mi
   455ec:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   455f0:	4770      	bx	lr

000455f2 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   455f2:	f3bf 8f5b 	dmb	ish
   455f6:	6800      	ldr	r0, [r0, #0]
   455f8:	f3bf 8f5b 	dmb	ish
}
   455fc:	4770      	bx	lr

000455fe <atomic_and>:
{
   455fe:	b510      	push	{r4, lr}
   45600:	4603      	mov	r3, r0
}
   45602:	f3bf 8f5b 	dmb	ish
   45606:	e853 0f00 	ldrex	r0, [r3]
   4560a:	ea00 0201 	and.w	r2, r0, r1
   4560e:	e843 2400 	strex	r4, r2, [r3]
   45612:	2c00      	cmp	r4, #0
   45614:	d1f7      	bne.n	45606 <atomic_and+0x8>
   45616:	f3bf 8f5b 	dmb	ish
   4561a:	bd10      	pop	{r4, pc}

0004561c <hci_set_ad>:
{
   4561c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45620:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   45622:	2120      	movs	r1, #32
{
   45624:	9000      	str	r0, [sp, #0]
   45626:	4692      	mov	sl, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   45628:	f7e5 fd16 	bl	2b058 <bt_hci_cmd_create>
	if (!buf) {
   4562c:	4605      	mov	r5, r0
   4562e:	2800      	cmp	r0, #0
   45630:	d050      	beq.n	456d4 <hci_set_ad+0xb8>
	return net_buf_simple_add(&buf->b, len);
   45632:	2120      	movs	r1, #32
   45634:	3008      	adds	r0, #8
   45636:	f002 f977 	bl	47928 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   4563a:	2220      	movs	r2, #32
   4563c:	2100      	movs	r1, #0
   4563e:	4681      	mov	r9, r0
   45640:	f7ff fa4a 	bl	44ad8 <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   45644:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   45648:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
	uint8_t set_data_len = 0;
   4564c:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   4564e:	f8d4 8000 	ldr.w	r8, [r4]
   45652:	2300      	movs	r3, #0
   45654:	6862      	ldr	r2, [r4, #4]
   45656:	4293      	cmp	r3, r2
   45658:	d30c      	bcc.n	45674 <hci_set_ad+0x58>
	for (size_t i = 0; i < ad_len; i++) {
   4565a:	3408      	adds	r4, #8
   4565c:	45a2      	cmp	sl, r4
   4565e:	d1f6      	bne.n	4564e <hci_set_ad+0x32>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   45660:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
   45662:	f889 6000 	strb.w	r6, [r9]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   45666:	2200      	movs	r2, #0
   45668:	4629      	mov	r1, r5
}
   4566a:	b003      	add	sp, #12
   4566c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   45670:	f7e5 bd4e 	b.w	2b110 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   45674:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   45678:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   4567c:	1cb0      	adds	r0, r6, #2
   4567e:	1811      	adds	r1, r2, r0
   45680:	291f      	cmp	r1, #31
   45682:	d908      	bls.n	45696 <hci_set_ad+0x7a>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   45684:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   45688:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   4568c:	d11a      	bne.n	456c4 <hci_set_ad+0xa8>
   4568e:	2a00      	cmp	r2, #0
   45690:	dd18      	ble.n	456c4 <hci_set_ad+0xa8>
				type = BT_DATA_NAME_SHORTENED;
   45692:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   45696:	b2d7      	uxtb	r7, r2
   45698:	1c79      	adds	r1, r7, #1
   4569a:	f80b 1006 	strb.w	r1, [fp, r6]
   4569e:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   456a0:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   456a2:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   456a6:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   456aa:	f8d8 1004 	ldr.w	r1, [r8, #4]
   456ae:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   456b0:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   456b2:	f7ff fa06 	bl	44ac2 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   456b6:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   456b8:	4437      	add	r7, r6
   456ba:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   456bc:	3301      	adds	r3, #1
   456be:	f108 0808 	add.w	r8, r8, #8
   456c2:	e7c7      	b.n	45654 <hci_set_ad+0x38>
		net_buf_unref(buf);
   456c4:	4628      	mov	r0, r5
   456c6:	f7f7 fcef 	bl	3d0a8 <net_buf_unref>
		return err;
   456ca:	f06f 0015 	mvn.w	r0, #21
}
   456ce:	b003      	add	sp, #12
   456d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOBUFS;
   456d4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   456d8:	e7f9      	b.n	456ce <hci_set_ad+0xb2>

000456da <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   456da:	2301      	movs	r3, #1
{
   456dc:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   456de:	fa03 f101 	lsl.w	r1, r3, r1
{
   456e2:	4604      	mov	r4, r0
	if (val) {
   456e4:	b162      	cbz	r2, 45700 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   456e6:	f3bf 8f5b 	dmb	ish
   456ea:	e854 3f00 	ldrex	r3, [r4]
   456ee:	430b      	orrs	r3, r1
   456f0:	e844 3200 	strex	r2, r3, [r4]
   456f4:	2a00      	cmp	r2, #0
   456f6:	d1f8      	bne.n	456ea <atomic_set_bit_to+0x10>
   456f8:	f3bf 8f5b 	dmb	ish
	}
}
   456fc:	bc10      	pop	{r4}
   456fe:	4770      	bx	lr
   45700:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   45702:	43c9      	mvns	r1, r1
   45704:	f7ff bf7b 	b.w	455fe <atomic_and>

00045708 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   45708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4570c:	b087      	sub	sp, #28
   4570e:	4605      	mov	r5, r0
   45710:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   45714:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   45718:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   4571c:	460c      	mov	r4, r1
   4571e:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   45720:	2100      	movs	r1, #0
   45722:	2210      	movs	r2, #16
   45724:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   45726:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   45728:	f7ff f9d6 	bl	44ad8 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   4572c:	b9ee      	cbnz	r6, 4576a <le_adv_update.constprop.0+0x62>
		d[0].len = ad_len;
   4572e:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   45732:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   45734:	a902      	add	r1, sp, #8
   45736:	f242 0008 	movw	r0, #8200	; 0x2008
   4573a:	f7ff ff6f 	bl	4561c <hci_set_ad>
		if (err) {
   4573e:	4604      	mov	r4, r0
   45740:	b978      	cbnz	r0, 45762 <le_adv_update.constprop.0+0x5a>
	if (scannable) {
   45742:	f1ba 0f00 	cmp.w	sl, #0
   45746:	d13e      	bne.n	457c6 <le_adv_update.constprop.0+0xbe>
   45748:	3510      	adds	r5, #16
   4574a:	f3bf 8f5b 	dmb	ish
   4574e:	e855 3f00 	ldrex	r3, [r5]
   45752:	f043 0304 	orr.w	r3, r3, #4
   45756:	e845 3200 	strex	r2, r3, [r5]
   4575a:	2a00      	cmp	r2, #0
   4575c:	d1f7      	bne.n	4574e <le_adv_update.constprop.0+0x46>
   4575e:	f3bf 8f5b 	dmb	ish
}
   45762:	4620      	mov	r0, r4
   45764:	b007      	add	sp, #28
   45766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   4576a:	f7e5 fff5 	bl	2b758 <bt_get_name>
   4576e:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   45770:	b9e4      	cbnz	r4, 457ac <le_adv_update.constprop.0+0xa4>
   45772:	bb37      	cbnz	r7, 457c2 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   45774:	4658      	mov	r0, fp
   45776:	f7ff f96d 	bl	44a54 <strlen>
   4577a:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   4577c:	2e01      	cmp	r6, #1
		d[0].data = ad;
   4577e:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   45782:	f88d 3000 	strb.w	r3, [sp]
   45786:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   4578a:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   4578e:	d1d0      	bne.n	45732 <le_adv_update.constprop.0+0x2a>
			d[1].data = &data;
   45790:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   45794:	9605      	str	r6, [sp, #20]
			d_len = 2;
   45796:	2202      	movs	r2, #2
   45798:	e7cc      	b.n	45734 <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   4579a:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   4579e:	3a08      	subs	r2, #8
   457a0:	2a01      	cmp	r2, #1
   457a2:	d925      	bls.n	457f0 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   457a4:	3301      	adds	r3, #1
   457a6:	4598      	cmp	r8, r3
   457a8:	d1f7      	bne.n	4579a <le_adv_update.constprop.0+0x92>
   457aa:	e7e2      	b.n	45772 <le_adv_update.constprop.0+0x6a>
   457ac:	2300      	movs	r3, #0
   457ae:	e7fa      	b.n	457a6 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   457b0:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   457b4:	3a08      	subs	r2, #8
   457b6:	2a01      	cmp	r2, #1
   457b8:	d91a      	bls.n	457f0 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   457ba:	3301      	adds	r3, #1
   457bc:	4599      	cmp	r9, r3
   457be:	d1f7      	bne.n	457b0 <le_adv_update.constprop.0+0xa8>
   457c0:	e7d8      	b.n	45774 <le_adv_update.constprop.0+0x6c>
   457c2:	2300      	movs	r3, #0
   457c4:	e7fa      	b.n	457bc <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   457c6:	2e02      	cmp	r6, #2
   457c8:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   457cc:	bf08      	it	eq
   457ce:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   457d0:	a902      	add	r1, sp, #8
			d_len = 2;
   457d2:	bf08      	it	eq
   457d4:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   457d6:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   457da:	bf08      	it	eq
   457dc:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   457e0:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   457e4:	f7ff ff1a 	bl	4561c <hci_set_ad>
		if (err) {
   457e8:	2800      	cmp	r0, #0
   457ea:	d0ad      	beq.n	45748 <le_adv_update.constprop.0+0x40>
   457ec:	4604      	mov	r4, r0
   457ee:	e7b8      	b.n	45762 <le_adv_update.constprop.0+0x5a>
			return -EINVAL;
   457f0:	f06f 0415 	mvn.w	r4, #21
   457f4:	e7b5      	b.n	45762 <le_adv_update.constprop.0+0x5a>

000457f6 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   457f6:	6843      	ldr	r3, [r0, #4]
   457f8:	f013 0008 	ands.w	r0, r3, #8
   457fc:	d00a      	beq.n	45814 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   457fe:	035a      	lsls	r2, r3, #13
   45800:	d407      	bmi.n	45812 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   45802:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   45806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   4580a:	bf14      	ite	ne
   4580c:	2002      	movne	r0, #2
   4580e:	2001      	moveq	r0, #1
   45810:	4770      	bx	lr
   45812:	2001      	movs	r0, #1
}
   45814:	4770      	bx	lr

00045816 <bt_le_adv_set_enable_legacy>:
{
   45816:	b570      	push	{r4, r5, r6, lr}
   45818:	4606      	mov	r6, r0
   4581a:	b086      	sub	sp, #24
   4581c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   4581e:	f242 000a 	movw	r0, #8202	; 0x200a
   45822:	2101      	movs	r1, #1
   45824:	f7e5 fc18 	bl	2b058 <bt_hci_cmd_create>
	if (!buf) {
   45828:	4604      	mov	r4, r0
   4582a:	b1b0      	cbz	r0, 4585a <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   4582c:	3008      	adds	r0, #8
	if (enable) {
   4582e:	b195      	cbz	r5, 45856 <bt_le_adv_set_enable_legacy+0x40>
   45830:	2101      	movs	r1, #1
   45832:	f002 f888 	bl	47946 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   45836:	f106 0210 	add.w	r2, r6, #16
   4583a:	a903      	add	r1, sp, #12
   4583c:	4620      	mov	r0, r4
   4583e:	9500      	str	r5, [sp, #0]
   45840:	2306      	movs	r3, #6
   45842:	f7e5 fbf7 	bl	2b034 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   45846:	2200      	movs	r2, #0
   45848:	4621      	mov	r1, r4
   4584a:	f242 000a 	movw	r0, #8202	; 0x200a
   4584e:	f7e5 fc5f 	bl	2b110 <bt_hci_cmd_send_sync>
}
   45852:	b006      	add	sp, #24
   45854:	bd70      	pop	{r4, r5, r6, pc}
   45856:	4629      	mov	r1, r5
   45858:	e7eb      	b.n	45832 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   4585a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4585e:	e7f8      	b.n	45852 <bt_le_adv_set_enable_legacy+0x3c>

00045860 <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   45860:	f7ff bfd9 	b.w	45816 <bt_le_adv_set_enable_legacy>

00045864 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   45864:	3018      	adds	r0, #24
   45866:	f003 b824 	b.w	488b2 <k_work_cancel_delayable>

0004586a <adv_timeout>:
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   4586a:	f7e6 bc55 	b.w	2c118 <bt_le_adv_stop>

0004586e <atomic_and>:
{
   4586e:	b510      	push	{r4, lr}
   45870:	4603      	mov	r3, r0
}
   45872:	f3bf 8f5b 	dmb	ish
   45876:	e853 0f00 	ldrex	r0, [r3]
   4587a:	ea00 0201 	and.w	r2, r0, r1
   4587e:	e843 2400 	strex	r4, r2, [r3]
   45882:	2c00      	cmp	r4, #0
   45884:	d1f7      	bne.n	45876 <atomic_and+0x8>
   45886:	f3bf 8f5b 	dmb	ish
   4588a:	bd10      	pop	{r4, pc}

0004588c <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4588c:	f3bf 8f5b 	dmb	ish
   45890:	6800      	ldr	r0, [r0, #0]
   45892:	f3bf 8f5b 	dmb	ish
}
   45896:	4770      	bx	lr

00045898 <tx_notify>:
{
   45898:	b570      	push	{r4, r5, r6, lr}
   4589a:	4604      	mov	r4, r0
	__asm__ volatile(
   4589c:	f04f 0220 	mov.w	r2, #32
   458a0:	f3ef 8311 	mrs	r3, BASEPRI
   458a4:	f382 8812 	msr	BASEPRI_MAX, r2
   458a8:	f3bf 8f6f 	isb	sy
	return list->head;
   458ac:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   458ae:	b920      	cbnz	r0, 458ba <tx_notify+0x22>
	__asm__ volatile(
   458b0:	f383 8811 	msr	BASEPRI, r3
   458b4:	f3bf 8f6f 	isb	sy
}
   458b8:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   458ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   458bc:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   458be:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   458c0:	4288      	cmp	r0, r1
	list->tail = node;
   458c2:	bf08      	it	eq
   458c4:	6262      	streq	r2, [r4, #36]	; 0x24
   458c6:	f383 8811 	msr	BASEPRI, r3
   458ca:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   458ce:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   458d2:	f7e6 fdcb 	bl	2c46c <tx_free>
		cb(conn, user_data);
   458d6:	4631      	mov	r1, r6
   458d8:	4620      	mov	r0, r4
   458da:	47a8      	blx	r5
	while (1) {
   458dc:	e7de      	b.n	4589c <tx_notify+0x4>

000458de <tx_complete_work>:
	tx_notify(conn);
   458de:	3828      	subs	r0, #40	; 0x28
   458e0:	f7ff bfda 	b.w	45898 <tx_notify>

000458e4 <bt_conn_reset_rx_state>:
{
   458e4:	b510      	push	{r4, lr}
   458e6:	4604      	mov	r4, r0
	if (!conn->rx) {
   458e8:	6900      	ldr	r0, [r0, #16]
   458ea:	b118      	cbz	r0, 458f4 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   458ec:	f7f7 fbdc 	bl	3d0a8 <net_buf_unref>
	conn->rx = NULL;
   458f0:	2300      	movs	r3, #0
   458f2:	6123      	str	r3, [r4, #16]
}
   458f4:	bd10      	pop	{r4, pc}

000458f6 <conn_cleanup>:
{
   458f6:	b570      	push	{r4, r5, r6, lr}
   458f8:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   458fa:	f100 0638 	add.w	r6, r0, #56	; 0x38
   458fe:	2200      	movs	r2, #0
   45900:	2300      	movs	r3, #0
   45902:	4630      	mov	r0, r6
   45904:	f001 ffb3 	bl	4786e <net_buf_get>
   45908:	4605      	mov	r5, r0
   4590a:	b950      	cbnz	r0, 45922 <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   4590c:	4620      	mov	r0, r4
   4590e:	f7ff ffe9 	bl	458e4 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   45912:	f104 0058 	add.w	r0, r4, #88	; 0x58
   45916:	2200      	movs	r2, #0
}
   45918:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   4591c:	2300      	movs	r3, #0
   4591e:	f7fc b841 	b.w	419a4 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   45922:	6968      	ldr	r0, [r5, #20]
   45924:	b108      	cbz	r0, 4592a <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   45926:	f7e6 fda1 	bl	2c46c <tx_free>
		net_buf_unref(buf);
   4592a:	4628      	mov	r0, r5
   4592c:	f7f7 fbbc 	bl	3d0a8 <net_buf_unref>
   45930:	e7e5      	b.n	458fe <conn_cleanup+0x8>

00045932 <bt_conn_recv>:
{
   45932:	b570      	push	{r4, r5, r6, lr}
   45934:	4616      	mov	r6, r2
   45936:	4604      	mov	r4, r0
   45938:	460d      	mov	r5, r1
	tx_notify(conn);
   4593a:	f7ff ffad 	bl	45898 <tx_notify>
	switch (flags) {
   4593e:	2e01      	cmp	r6, #1
   45940:	d017      	beq.n	45972 <bt_conn_recv+0x40>
   45942:	2e02      	cmp	r6, #2
   45944:	d117      	bne.n	45976 <bt_conn_recv+0x44>
		if (conn->rx) {
   45946:	6923      	ldr	r3, [r4, #16]
   45948:	b113      	cbz	r3, 45950 <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   4594a:	4620      	mov	r0, r4
   4594c:	f7ff ffca 	bl	458e4 <bt_conn_reset_rx_state>
		conn->rx = buf;
   45950:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   45952:	6921      	ldr	r1, [r4, #16]
   45954:	898a      	ldrh	r2, [r1, #12]
   45956:	2a01      	cmp	r2, #1
   45958:	d937      	bls.n	459ca <bt_conn_recv+0x98>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   4595a:	688b      	ldr	r3, [r1, #8]
   4595c:	881b      	ldrh	r3, [r3, #0]
   4595e:	3304      	adds	r3, #4
   45960:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   45962:	429a      	cmp	r2, r3
   45964:	d331      	bcc.n	459ca <bt_conn_recv+0x98>
	if (conn->rx->len > acl_total_len) {
   45966:	d928      	bls.n	459ba <bt_conn_recv+0x88>
		bt_conn_reset_rx_state(conn);
   45968:	4620      	mov	r0, r4
}
   4596a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   4596e:	f7ff bfb9 	b.w	458e4 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   45972:	6920      	ldr	r0, [r4, #16]
   45974:	b918      	cbnz	r0, 4597e <bt_conn_recv+0x4c>
		bt_conn_reset_rx_state(conn);
   45976:	4620      	mov	r0, r4
   45978:	f7ff ffb4 	bl	458e4 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   4597c:	e001      	b.n	45982 <bt_conn_recv+0x50>
		if (!buf->len) {
   4597e:	89ae      	ldrh	r6, [r5, #12]
   45980:	b926      	cbnz	r6, 4598c <bt_conn_recv+0x5a>
			net_buf_unref(buf);
   45982:	4628      	mov	r0, r5
}
   45984:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   45988:	f7f7 bb8e 	b.w	3d0a8 <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   4598c:	3008      	adds	r0, #8
   4598e:	f002 f806 	bl	4799e <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   45992:	4286      	cmp	r6, r0
   45994:	d907      	bls.n	459a6 <bt_conn_recv+0x74>
			bt_l2cap_recv(conn, conn->rx, false);
   45996:	6921      	ldr	r1, [r4, #16]
   45998:	2200      	movs	r2, #0
   4599a:	4620      	mov	r0, r4
   4599c:	f000 fa0b 	bl	45db6 <bt_l2cap_recv>
			conn->rx = NULL;
   459a0:	2300      	movs	r3, #0
   459a2:	6123      	str	r3, [r4, #16]
   459a4:	e7ed      	b.n	45982 <bt_conn_recv+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   459a6:	6920      	ldr	r0, [r4, #16]
   459a8:	89aa      	ldrh	r2, [r5, #12]
   459aa:	68a9      	ldr	r1, [r5, #8]
   459ac:	3008      	adds	r0, #8
   459ae:	f001 ffc1 	bl	47934 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   459b2:	4628      	mov	r0, r5
   459b4:	f7f7 fb78 	bl	3d0a8 <net_buf_unref>
		break;
   459b8:	e7cb      	b.n	45952 <bt_conn_recv+0x20>
	conn->rx = NULL;
   459ba:	2300      	movs	r3, #0
   459bc:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   459be:	4620      	mov	r0, r4
   459c0:	2201      	movs	r2, #1
}
   459c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   459c6:	f000 b9f6 	b.w	45db6 <bt_l2cap_recv>
}
   459ca:	bd70      	pop	{r4, r5, r6, pc}

000459cc <bt_conn_ref>:
{
   459cc:	b510      	push	{r4, lr}
   459ce:	4603      	mov	r3, r0
		old = atomic_get(&conn->ref);
   459d0:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
   459d4:	4610      	mov	r0, r2
   459d6:	f7ff ff59 	bl	4588c <atomic_get>
		if (!old) {
   459da:	b180      	cbz	r0, 459fe <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   459dc:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   459e0:	1c41      	adds	r1, r0, #1
   459e2:	e852 4f00 	ldrex	r4, [r2]
   459e6:	4284      	cmp	r4, r0
   459e8:	d104      	bne.n	459f4 <bt_conn_ref+0x28>
   459ea:	e842 1c00 	strex	ip, r1, [r2]
   459ee:	f1bc 0f00 	cmp.w	ip, #0
   459f2:	d1f6      	bne.n	459e2 <bt_conn_ref+0x16>
   459f4:	f3bf 8f5b 	dmb	ish
   459f8:	d1ec      	bne.n	459d4 <bt_conn_ref+0x8>
}
   459fa:	4618      	mov	r0, r3
   459fc:	bd10      	pop	{r4, pc}
			return NULL;
   459fe:	4603      	mov	r3, r0
   45a00:	e7fb      	b.n	459fa <bt_conn_ref+0x2e>

00045a02 <bt_conn_unref>:
{
   45a02:	b508      	push	{r3, lr}
   45a04:	4603      	mov	r3, r0
	old = atomic_dec(&conn->ref);
   45a06:	30bc      	adds	r0, #188	; 0xbc
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   45a08:	f3bf 8f5b 	dmb	ish
   45a0c:	e850 2f00 	ldrex	r2, [r0]
   45a10:	3a01      	subs	r2, #1
   45a12:	e840 2100 	strex	r1, r2, [r0]
   45a16:	2900      	cmp	r1, #0
   45a18:	d1f8      	bne.n	45a0c <bt_conn_unref+0xa>
   45a1a:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   45a1e:	789b      	ldrb	r3, [r3, #2]
   45a20:	2b01      	cmp	r3, #1
   45a22:	d106      	bne.n	45a32 <bt_conn_unref+0x30>
	    atomic_get(&conn->ref) == 0) {
   45a24:	f7ff ff32 	bl	4588c <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   45a28:	b918      	cbnz	r0, 45a32 <bt_conn_unref+0x30>
}
   45a2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_resume();
   45a2e:	f7e6 bbc3 	b.w	2c1b8 <bt_le_adv_resume>
}
   45a32:	bd08      	pop	{r3, pc}

00045a34 <conn_lookup_handle>:
{
   45a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   45a38:	4607      	mov	r7, r0
   45a3a:	460e      	mov	r6, r1
   45a3c:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   45a3e:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   45a40:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   45a44:	42b4      	cmp	r4, r6
   45a46:	d103      	bne.n	45a50 <conn_lookup_handle+0x1c>
	return NULL;
   45a48:	2300      	movs	r3, #0
}
   45a4a:	4618      	mov	r0, r3
   45a4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   45a50:	fb09 7004 	mla	r0, r9, r4, r7
   45a54:	f7ff ffba 	bl	459cc <bt_conn_ref>
   45a58:	4603      	mov	r3, r0
		if (!conn) {
   45a5a:	b158      	cbz	r0, 45a74 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   45a5c:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   45a5e:	2d01      	cmp	r5, #1
   45a60:	d002      	beq.n	45a68 <conn_lookup_handle+0x34>
   45a62:	3d07      	subs	r5, #7
   45a64:	2d01      	cmp	r5, #1
   45a66:	d803      	bhi.n	45a70 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   45a68:	881a      	ldrh	r2, [r3, #0]
   45a6a:	4542      	cmp	r2, r8
   45a6c:	d0ed      	beq.n	45a4a <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   45a6e:	4618      	mov	r0, r3
   45a70:	f7ff ffc7 	bl	45a02 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   45a74:	3401      	adds	r4, #1
   45a76:	e7e5      	b.n	45a44 <conn_lookup_handle+0x10>

00045a78 <bt_conn_connected>:
{
   45a78:	b510      	push	{r4, lr}
   45a7a:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   45a7c:	f7e7 f9d2 	bl	2ce24 <bt_l2cap_connected>
	notify_connected(conn);
   45a80:	4620      	mov	r0, r4
}
   45a82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   45a86:	f7e6 bcfb 	b.w	2c480 <notify_connected>

00045a8a <bt_conn_disconnect>:
{
   45a8a:	b510      	push	{r4, lr}
	switch (conn->state) {
   45a8c:	7b43      	ldrb	r3, [r0, #13]
   45a8e:	3b02      	subs	r3, #2
{
   45a90:	4604      	mov	r4, r0
	switch (conn->state) {
   45a92:	2b06      	cmp	r3, #6
   45a94:	d816      	bhi.n	45ac4 <bt_conn_disconnect+0x3a>
   45a96:	e8df f003 	tbb	[pc, r3]
   45a9a:	1504      	.short	0x1504
   45a9c:	0b091515 	.word	0x0b091515
   45aa0:	09          	.byte	0x09
   45aa1:	00          	.byte	0x00
		conn->err = reason;
   45aa2:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   45aa4:	2100      	movs	r1, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   45aa6:	4620      	mov	r0, r4
   45aa8:	f7e6 fe4a 	bl	2c740 <bt_conn_set_state>
{
   45aac:	2000      	movs	r0, #0
}
   45aae:	bd10      	pop	{r4, pc}
	err = bt_hci_disconnect(conn->handle, reason);
   45ab0:	8800      	ldrh	r0, [r0, #0]
   45ab2:	f7ff fb29 	bl	45108 <bt_hci_disconnect>
	if (err) {
   45ab6:	2800      	cmp	r0, #0
   45ab8:	d1f9      	bne.n	45aae <bt_conn_disconnect+0x24>
	if (conn->state == BT_CONN_CONNECTED) {
   45aba:	7b63      	ldrb	r3, [r4, #13]
   45abc:	2b07      	cmp	r3, #7
   45abe:	d1f5      	bne.n	45aac <bt_conn_disconnect+0x22>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   45ac0:	2108      	movs	r1, #8
   45ac2:	e7f0      	b.n	45aa6 <bt_conn_disconnect+0x1c>
		return -ENOTCONN;
   45ac4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   45ac8:	e7f1      	b.n	45aae <bt_conn_disconnect+0x24>

00045aca <bt_conn_set_security>:
{
   45aca:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   45acc:	7b43      	ldrb	r3, [r0, #13]
   45ace:	2b07      	cmp	r3, #7
{
   45ad0:	4604      	mov	r4, r0
   45ad2:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   45ad4:	d126      	bne.n	45b24 <bt_conn_set_security+0x5a>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   45ad6:	7a43      	ldrb	r3, [r0, #9]
   45ad8:	428b      	cmp	r3, r1
   45ada:	d219      	bcs.n	45b10 <bt_conn_set_security+0x46>
   45adc:	7a83      	ldrb	r3, [r0, #10]
   45ade:	428b      	cmp	r3, r1
   45ae0:	d216      	bcs.n	45b10 <bt_conn_set_security+0x46>
	if (val) {
   45ae2:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   45ae4:	f100 0004 	add.w	r0, r0, #4
   45ae8:	d514      	bpl.n	45b14 <bt_conn_set_security+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   45aea:	f3bf 8f5b 	dmb	ish
   45aee:	e850 3f00 	ldrex	r3, [r0]
   45af2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   45af6:	e840 3200 	strex	r2, r3, [r0]
   45afa:	2a00      	cmp	r2, #0
   45afc:	d1f7      	bne.n	45aee <bt_conn_set_security+0x24>
   45afe:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   45b02:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   45b06:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   45b08:	4620      	mov	r0, r4
   45b0a:	f7e9 fc07 	bl	2f31c <bt_smp_start_security>
	if (err) {
   45b0e:	b930      	cbnz	r0, 45b1e <bt_conn_set_security+0x54>
		return -ENOTCONN;
   45b10:	2000      	movs	r0, #0
}
   45b12:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   45b14:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   45b18:	f7ff fea9 	bl	4586e <atomic_and>
   45b1c:	e7f1      	b.n	45b02 <bt_conn_set_security+0x38>
		conn->required_sec_level = conn->sec_level;
   45b1e:	7a63      	ldrb	r3, [r4, #9]
   45b20:	72a3      	strb	r3, [r4, #10]
   45b22:	e7f6      	b.n	45b12 <bt_conn_set_security+0x48>
		return -ENOTCONN;
   45b24:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   45b28:	e7f3      	b.n	45b12 <bt_conn_set_security+0x48>

00045b2a <bt_conn_get_security>:
}
   45b2a:	7a40      	ldrb	r0, [r0, #9]
   45b2c:	4770      	bx	lr

00045b2e <bt_conn_is_peer_addr_le>:
{
   45b2e:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   45b30:	7a03      	ldrb	r3, [r0, #8]
   45b32:	428b      	cmp	r3, r1
{
   45b34:	4604      	mov	r4, r0
   45b36:	4615      	mov	r5, r2
	if (id != conn->id) {
   45b38:	d115      	bne.n	45b66 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   45b3a:	f100 0188 	add.w	r1, r0, #136	; 0x88
   45b3e:	2207      	movs	r2, #7
   45b40:	4628      	mov	r0, r5
   45b42:	f7fe ffae 	bl	44aa2 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   45b46:	b180      	cbz	r0, 45b6a <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   45b48:	78e3      	ldrb	r3, [r4, #3]
   45b4a:	2207      	movs	r2, #7
   45b4c:	b943      	cbnz	r3, 45b60 <bt_conn_is_peer_addr_le+0x32>
   45b4e:	f104 0196 	add.w	r1, r4, #150	; 0x96
   45b52:	4628      	mov	r0, r5
   45b54:	f7fe ffa5 	bl	44aa2 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   45b58:	fab0 f080 	clz	r0, r0
   45b5c:	0940      	lsrs	r0, r0, #5
}
   45b5e:	bd38      	pop	{r3, r4, r5, pc}
   45b60:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   45b64:	e7f5      	b.n	45b52 <bt_conn_is_peer_addr_le+0x24>
		return false;
   45b66:	2000      	movs	r0, #0
   45b68:	e7f9      	b.n	45b5e <bt_conn_is_peer_addr_le+0x30>
		return true;
   45b6a:	2001      	movs	r0, #1
   45b6c:	e7f7      	b.n	45b5e <bt_conn_is_peer_addr_le+0x30>

00045b6e <bt_conn_exists_le>:
{
   45b6e:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   45b70:	f7e6 ffc6 	bl	2cb00 <bt_conn_lookup_addr_le>
	if (conn) {
   45b74:	b110      	cbz	r0, 45b7c <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   45b76:	f7ff ff44 	bl	45a02 <bt_conn_unref>
		return true;
   45b7a:	2001      	movs	r0, #1
}
   45b7c:	bd08      	pop	{r3, pc}

00045b7e <bt_conn_get_dst>:
}
   45b7e:	3088      	adds	r0, #136	; 0x88
   45b80:	4770      	bx	lr

00045b82 <bt_conn_le_conn_update>:
{
   45b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   45b84:	4607      	mov	r7, r0
   45b86:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   45b88:	f242 0013 	movw	r0, #8211	; 0x2013
   45b8c:	210e      	movs	r1, #14
   45b8e:	f7e5 fa63 	bl	2b058 <bt_hci_cmd_create>
	if (!buf) {
   45b92:	4606      	mov	r6, r0
   45b94:	b1d0      	cbz	r0, 45bcc <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   45b96:	210e      	movs	r1, #14
   45b98:	3008      	adds	r0, #8
   45b9a:	f001 fec5 	bl	47928 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   45b9e:	220e      	movs	r2, #14
   45ba0:	4604      	mov	r4, r0
   45ba2:	2100      	movs	r1, #0
   45ba4:	f7fe ff98 	bl	44ad8 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   45ba8:	883b      	ldrh	r3, [r7, #0]
   45baa:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   45bac:	882b      	ldrh	r3, [r5, #0]
   45bae:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   45bb0:	886b      	ldrh	r3, [r5, #2]
   45bb2:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   45bb4:	88ab      	ldrh	r3, [r5, #4]
   45bb6:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   45bb8:	88eb      	ldrh	r3, [r5, #6]
   45bba:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   45bbc:	4631      	mov	r1, r6
   45bbe:	2200      	movs	r2, #0
}
   45bc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   45bc4:	f242 0013 	movw	r0, #8211	; 0x2013
   45bc8:	f7e5 baa2 	b.w	2b110 <bt_hci_cmd_send_sync>
}
   45bcc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   45bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00045bd2 <l2cap_connected>:
}
   45bd2:	4770      	bx	lr

00045bd4 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   45bd4:	3010      	adds	r0, #16
   45bd6:	f002 be6c 	b.w	488b2 <k_work_cancel_delayable>

00045bda <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   45bda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   45bdc:	4607      	mov	r7, r0
   45bde:	460e      	mov	r6, r1
   45be0:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   45be2:	2300      	movs	r3, #0
   45be4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   45be8:	2104      	movs	r1, #4
   45bea:	2000      	movs	r0, #0
   45bec:	f7e6 fe60 	bl	2c8b0 <bt_conn_create_pdu_timeout>
	if (!buf) {
   45bf0:	4604      	mov	r4, r0
   45bf2:	b130      	cbz	r0, 45c02 <l2cap_create_le_sig_pdu.constprop.0+0x28>
   45bf4:	2104      	movs	r1, #4
   45bf6:	3008      	adds	r0, #8
   45bf8:	f001 fe96 	bl	47928 <net_buf_simple_add>
	hdr->code = code;
   45bfc:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   45bfe:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   45c00:	8045      	strh	r5, [r0, #2]
}
   45c02:	4620      	mov	r0, r4
   45c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00045c06 <bt_l2cap_chan_remove>:
	return list->head;
   45c06:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   45c08:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   45c0a:	b173      	cbz	r3, 45c2a <bt_l2cap_chan_remove+0x24>
   45c0c:	3b08      	subs	r3, #8
   45c0e:	2500      	movs	r5, #0
	return node->next;
   45c10:	461a      	mov	r2, r3
		if (chan == ch) {
   45c12:	428b      	cmp	r3, r1
   45c14:	f852 4f08 	ldr.w	r4, [r2, #8]!
   45c18:	d10d      	bne.n	45c36 <bt_l2cap_chan_remove+0x30>
	return list->tail;
   45c1a:	6d41      	ldr	r1, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   45c1c:	b935      	cbnz	r5, 45c2c <bt_l2cap_chan_remove+0x26>
   45c1e:	428a      	cmp	r2, r1
	list->head = node;
   45c20:	6504      	str	r4, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   45c22:	d100      	bne.n	45c26 <bt_l2cap_chan_remove+0x20>
	list->tail = node;
   45c24:	6544      	str	r4, [r0, #84]	; 0x54
	parent->next = child;
   45c26:	2200      	movs	r2, #0
   45c28:	609a      	str	r2, [r3, #8]
}
   45c2a:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   45c2c:	428a      	cmp	r2, r1
	parent->next = child;
   45c2e:	602c      	str	r4, [r5, #0]
	list->tail = node;
   45c30:	bf08      	it	eq
   45c32:	6545      	streq	r5, [r0, #84]	; 0x54
}
   45c34:	e7f7      	b.n	45c26 <bt_l2cap_chan_remove+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   45c36:	2c00      	cmp	r4, #0
   45c38:	d0f7      	beq.n	45c2a <bt_l2cap_chan_remove+0x24>
   45c3a:	f1a4 0308 	sub.w	r3, r4, #8
			sys_slist_remove(&conn->channels, prev, &chan->node);
   45c3e:	4615      	mov	r5, r2
   45c40:	e7e6      	b.n	45c10 <bt_l2cap_chan_remove+0xa>

00045c42 <bt_l2cap_chan_del>:
{
   45c42:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   45c44:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   45c48:	4604      	mov	r4, r0
	if (!chan->conn) {
   45c4a:	b123      	cbz	r3, 45c56 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   45c4c:	686b      	ldr	r3, [r5, #4]
   45c4e:	b103      	cbz	r3, 45c52 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   45c50:	4798      	blx	r3
	chan->conn = NULL;
   45c52:	2300      	movs	r3, #0
   45c54:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   45c56:	68e3      	ldr	r3, [r4, #12]
   45c58:	b10b      	cbz	r3, 45c5e <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   45c5a:	4620      	mov	r0, r4
   45c5c:	4798      	blx	r3
	if (ops->released) {
   45c5e:	69eb      	ldr	r3, [r5, #28]
   45c60:	b11b      	cbz	r3, 45c6a <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   45c62:	4620      	mov	r0, r4
}
   45c64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   45c68:	4718      	bx	r3
}
   45c6a:	bd70      	pop	{r4, r5, r6, pc}

00045c6c <l2cap_rtx_timeout>:
{
   45c6c:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(conn, &chan->chan);
   45c6e:	f1a0 0410 	sub.w	r4, r0, #16
   45c72:	4621      	mov	r1, r4
   45c74:	f850 0c10 	ldr.w	r0, [r0, #-16]
   45c78:	f7ff ffc5 	bl	45c06 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   45c7c:	4620      	mov	r0, r4
}
   45c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_l2cap_chan_del(&chan->chan);
   45c82:	f7ff bfde 	b.w	45c42 <bt_l2cap_chan_del>

00045c86 <bt_l2cap_disconnected>:
	return list->head;
   45c86:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   45c88:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   45c8a:	b130      	cbz	r0, 45c9a <bt_l2cap_disconnected+0x14>
	return node->next;
   45c8c:	f850 4908 	ldr.w	r4, [r0], #-8
   45c90:	b104      	cbz	r4, 45c94 <bt_l2cap_disconnected+0xe>
   45c92:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   45c94:	f7ff ffd5 	bl	45c42 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   45c98:	b904      	cbnz	r4, 45c9c <bt_l2cap_disconnected+0x16>
}
   45c9a:	bd38      	pop	{r3, r4, r5, pc}
   45c9c:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   45c9e:	b12d      	cbz	r5, 45cac <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   45ca0:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   45ca2:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   45ca4:	f7ff ffcd 	bl	45c42 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   45ca8:	462c      	mov	r4, r5
   45caa:	e7f7      	b.n	45c9c <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   45cac:	4620      	mov	r0, r4
}
   45cae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   45cb2:	f7ff bfc6 	b.w	45c42 <bt_l2cap_chan_del>

00045cb6 <bt_l2cap_security_changed>:
{
   45cb6:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   45cb8:	6d03      	ldr	r3, [r0, #80]	; 0x50
   45cba:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   45cbc:	b1bb      	cbz	r3, 45cee <bt_l2cap_security_changed+0x38>
   45cbe:	4618      	mov	r0, r3
	return node->next;
   45cc0:	f850 4908 	ldr.w	r4, [r0], #-8
   45cc4:	b104      	cbz	r4, 45cc8 <bt_l2cap_security_changed+0x12>
   45cc6:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   45cc8:	f853 3c04 	ldr.w	r3, [r3, #-4]
   45ccc:	689b      	ldr	r3, [r3, #8]
   45cce:	b10b      	cbz	r3, 45cd4 <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   45cd0:	4629      	mov	r1, r5
   45cd2:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   45cd4:	b15c      	cbz	r4, 45cee <bt_l2cap_security_changed+0x38>
   45cd6:	4620      	mov	r0, r4
   45cd8:	68a4      	ldr	r4, [r4, #8]
   45cda:	6843      	ldr	r3, [r0, #4]
   45cdc:	b124      	cbz	r4, 45ce8 <bt_l2cap_security_changed+0x32>
		if (chan->ops->encrypt_change) {
   45cde:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   45ce0:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   45ce2:	2b00      	cmp	r3, #0
   45ce4:	d1f4      	bne.n	45cd0 <bt_l2cap_security_changed+0x1a>
   45ce6:	e7f6      	b.n	45cd6 <bt_l2cap_security_changed+0x20>
   45ce8:	689b      	ldr	r3, [r3, #8]
   45cea:	2b00      	cmp	r3, #0
   45cec:	d1f0      	bne.n	45cd0 <bt_l2cap_security_changed+0x1a>
}
   45cee:	bd38      	pop	{r3, r4, r5, pc}

00045cf0 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   45cf0:	3104      	adds	r1, #4
   45cf2:	f7e6 bddd 	b.w	2c8b0 <bt_conn_create_pdu_timeout>

00045cf6 <bt_l2cap_send_cb>:
{
   45cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   45cfa:	4614      	mov	r4, r2
   45cfc:	4605      	mov	r5, r0
   45cfe:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   45d00:	f102 0008 	add.w	r0, r2, #8
   45d04:	2104      	movs	r1, #4
   45d06:	461e      	mov	r6, r3
   45d08:	f8dd 8018 	ldr.w	r8, [sp, #24]
   45d0c:	f001 fe23 	bl	47956 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   45d10:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   45d12:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   45d14:	3a04      	subs	r2, #4
   45d16:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   45d18:	4643      	mov	r3, r8
   45d1a:	4632      	mov	r2, r6
   45d1c:	4621      	mov	r1, r4
   45d1e:	4628      	mov	r0, r5
}
   45d20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   45d24:	f7e6 bc9a 	b.w	2c65c <bt_conn_send_cb>

00045d28 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   45d28:	898b      	ldrh	r3, [r1, #12]
   45d2a:	2b03      	cmp	r3, #3
{
   45d2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   45d2e:	4605      	mov	r5, r0
   45d30:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   45d32:	d927      	bls.n	45d84 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   45d34:	2104      	movs	r1, #4
   45d36:	f104 0008 	add.w	r0, r4, #8
   45d3a:	f001 fe1c 	bl	47976 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   45d3e:	89a3      	ldrh	r3, [r4, #12]
   45d40:	8842      	ldrh	r2, [r0, #2]
   45d42:	429a      	cmp	r2, r3
   45d44:	d11e      	bne.n	45d84 <l2cap_recv+0x5c>
	if (!hdr->ident) {
   45d46:	7841      	ldrb	r1, [r0, #1]
   45d48:	b1e1      	cbz	r1, 45d84 <l2cap_recv+0x5c>
	switch (hdr->code) {
   45d4a:	7803      	ldrb	r3, [r0, #0]
   45d4c:	2b01      	cmp	r3, #1
   45d4e:	d019      	beq.n	45d84 <l2cap_recv+0x5c>
   45d50:	2b13      	cmp	r3, #19
   45d52:	d017      	beq.n	45d84 <l2cap_recv+0x5c>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   45d54:	2202      	movs	r2, #2
   45d56:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   45d58:	682d      	ldr	r5, [r5, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   45d5a:	f7ff ff3e 	bl	45bda <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   45d5e:	4604      	mov	r4, r0
   45d60:	b180      	cbz	r0, 45d84 <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   45d62:	2102      	movs	r1, #2
   45d64:	3008      	adds	r0, #8
   45d66:	f001 fddf 	bl	47928 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   45d6a:	2300      	movs	r3, #0
   45d6c:	7003      	strb	r3, [r0, #0]
   45d6e:	7043      	strb	r3, [r0, #1]
   45d70:	4622      	mov	r2, r4
   45d72:	9300      	str	r3, [sp, #0]
   45d74:	2105      	movs	r1, #5
   45d76:	4628      	mov	r0, r5
   45d78:	f7ff ffbd 	bl	45cf6 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   45d7c:	b110      	cbz	r0, 45d84 <l2cap_recv+0x5c>
		net_buf_unref(buf);
   45d7e:	4620      	mov	r0, r4
   45d80:	f7f7 f992 	bl	3d0a8 <net_buf_unref>
}
   45d84:	2000      	movs	r0, #0
   45d86:	b003      	add	sp, #12
   45d88:	bd30      	pop	{r4, r5, pc}

00045d8a <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   45d8a:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   45d8c:	b138      	cbz	r0, 45d9e <bt_l2cap_le_lookup_tx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   45d8e:	f8b0 3078 	ldrh.w	r3, [r0, #120]	; 0x78
   45d92:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   45d94:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   45d98:	d001      	beq.n	45d9e <bt_l2cap_le_lookup_tx_cid+0x14>
	return node->next;
   45d9a:	6880      	ldr	r0, [r0, #8]
   45d9c:	e7f6      	b.n	45d8c <bt_l2cap_le_lookup_tx_cid+0x2>
}
   45d9e:	4770      	bx	lr

00045da0 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   45da0:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   45da2:	b138      	cbz	r0, 45db4 <bt_l2cap_le_lookup_rx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   45da4:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
   45da8:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   45daa:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   45dae:	d001      	beq.n	45db4 <bt_l2cap_le_lookup_rx_cid+0x14>
	return node->next;
   45db0:	6880      	ldr	r0, [r0, #8]
   45db2:	e7f6      	b.n	45da2 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   45db4:	4770      	bx	lr

00045db6 <bt_l2cap_recv>:
{
   45db6:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   45db8:	898b      	ldrh	r3, [r1, #12]
   45dba:	2b03      	cmp	r3, #3
{
   45dbc:	4605      	mov	r5, r0
   45dbe:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   45dc0:	d804      	bhi.n	45dcc <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   45dc2:	4620      	mov	r0, r4
}
   45dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   45dc8:	f7f7 b96e 	b.w	3d0a8 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   45dcc:	2104      	movs	r1, #4
   45dce:	f104 0008 	add.w	r0, r4, #8
   45dd2:	f001 fdd0 	bl	47976 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   45dd6:	8841      	ldrh	r1, [r0, #2]
   45dd8:	4628      	mov	r0, r5
   45dda:	f7ff ffe1 	bl	45da0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   45dde:	2800      	cmp	r0, #0
   45de0:	d0ef      	beq.n	45dc2 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   45de2:	6843      	ldr	r3, [r0, #4]
   45de4:	4621      	mov	r1, r4
   45de6:	691b      	ldr	r3, [r3, #16]
   45de8:	4798      	blx	r3
   45dea:	e7ea      	b.n	45dc2 <bt_l2cap_recv+0xc>

00045dec <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   45dec:	4770      	bx	lr

00045dee <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   45dee:	4603      	mov	r3, r0
	return list->head;
   45df0:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   45df2:	b128      	cbz	r0, 45e00 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   45df4:	6859      	ldr	r1, [r3, #4]
	return node->next;
   45df6:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   45df8:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   45dfa:	4288      	cmp	r0, r1
	list->tail = node;
   45dfc:	bf08      	it	eq
   45dfe:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   45e00:	4770      	bx	lr

00045e02 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   45e02:	4603      	mov	r3, r0
	size_t bytes = 0;
   45e04:	2000      	movs	r0, #0

	while (buf) {
   45e06:	b903      	cbnz	r3, 45e0a <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   45e08:	4770      	bx	lr
		bytes += buf->len;
   45e0a:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   45e0c:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   45e0e:	4410      	add	r0, r2
		buf = buf->frags;
   45e10:	e7f9      	b.n	45e06 <net_buf_frags_len+0x4>

00045e12 <att_sent>:
	if (chan->ops->sent) {
   45e12:	684b      	ldr	r3, [r1, #4]
   45e14:	695b      	ldr	r3, [r3, #20]
{
   45e16:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   45e18:	b103      	cbz	r3, 45e1c <att_sent+0xa>
		chan->ops->sent(chan);
   45e1a:	4718      	bx	r3
}
   45e1c:	4770      	bx	lr

00045e1e <attr_read_type_cb>:
{
   45e1e:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   45e20:	68d4      	ldr	r4, [r2, #12]
   45e22:	7823      	ldrb	r3, [r4, #0]
   45e24:	3102      	adds	r1, #2
   45e26:	b913      	cbnz	r3, 45e2e <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   45e28:	7021      	strb	r1, [r4, #0]
	return true;
   45e2a:	2001      	movs	r0, #1
}
   45e2c:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   45e2e:	428b      	cmp	r3, r1
   45e30:	d0fb      	beq.n	45e2a <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   45e32:	8983      	ldrh	r3, [r0, #12]
   45e34:	3b02      	subs	r3, #2
   45e36:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   45e38:	2000      	movs	r0, #0
   45e3a:	6110      	str	r0, [r2, #16]
		return false;
   45e3c:	e7f6      	b.n	45e2c <attr_read_type_cb+0xe>

00045e3e <att_prepare_write_req>:
}
   45e3e:	2006      	movs	r0, #6
   45e40:	4770      	bx	lr

00045e42 <att_get>:
{
   45e42:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   45e44:	7b43      	ldrb	r3, [r0, #13]
   45e46:	2b07      	cmp	r3, #7
   45e48:	d001      	beq.n	45e4e <att_get+0xc>
		return NULL;
   45e4a:	2000      	movs	r0, #0
}
   45e4c:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   45e4e:	2104      	movs	r1, #4
   45e50:	f7ff ffa6 	bl	45da0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   45e54:	2800      	cmp	r0, #0
   45e56:	d0f8      	beq.n	45e4a <att_get+0x8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   45e58:	f3bf 8f5b 	dmb	ish
   45e5c:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   45e60:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   45e64:	075b      	lsls	r3, r3, #29
   45e66:	d4f0      	bmi.n	45e4a <att_get+0x8>
	return att_chan->att;
   45e68:	f850 0c08 	ldr.w	r0, [r0, #-8]
   45e6c:	e7ee      	b.n	45e4c <att_get+0xa>

00045e6e <write_cb>:
{
   45e6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   45e70:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   45e72:	4601      	mov	r1, r0
{
   45e74:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   45e76:	222a      	movs	r2, #42	; 0x2a
   45e78:	6820      	ldr	r0, [r4, #0]
   45e7a:	f000 ffe4 	bl	46e46 <bt_gatt_check_perm>
   45e7e:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   45e80:	bb00      	cbnz	r0, 45ec4 <write_cb+0x56>
	if (!data->req) {
   45e82:	7a23      	ldrb	r3, [r4, #8]
   45e84:	b1b3      	cbz	r3, 45eb4 <write_cb+0x46>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   45e86:	f1a3 0218 	sub.w	r2, r3, #24
   45e8a:	4253      	negs	r3, r2
   45e8c:	4153      	adcs	r3, r2
   45e8e:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   45e90:	9301      	str	r3, [sp, #4]
   45e92:	8a63      	ldrh	r3, [r4, #18]
   45e94:	9300      	str	r3, [sp, #0]
   45e96:	68ae      	ldr	r6, [r5, #8]
   45e98:	8a23      	ldrh	r3, [r4, #16]
   45e9a:	68e2      	ldr	r2, [r4, #12]
   45e9c:	6820      	ldr	r0, [r4, #0]
   45e9e:	4629      	mov	r1, r5
   45ea0:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   45ea2:	2800      	cmp	r0, #0
   45ea4:	db08      	blt.n	45eb8 <write_cb+0x4a>
   45ea6:	8a23      	ldrh	r3, [r4, #16]
   45ea8:	4298      	cmp	r0, r3
   45eaa:	d10e      	bne.n	45eca <write_cb+0x5c>
	data->err = 0U;
   45eac:	2300      	movs	r3, #0
   45eae:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   45eb0:	2001      	movs	r0, #1
   45eb2:	e008      	b.n	45ec6 <write_cb+0x58>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   45eb4:	2302      	movs	r3, #2
   45eb6:	e7eb      	b.n	45e90 <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   45eb8:	f110 0fff 	cmn.w	r0, #255	; 0xff
   45ebc:	d305      	bcc.n	45eca <write_cb+0x5c>
		return -err;
   45ebe:	4240      	negs	r0, r0
   45ec0:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   45ec2:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   45ec4:	2000      	movs	r0, #0
}
   45ec6:	b002      	add	sp, #8
   45ec8:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   45eca:	200e      	movs	r0, #14
   45ecc:	e7f9      	b.n	45ec2 <write_cb+0x54>

00045ece <bt_gatt_foreach_attr>:
{
   45ece:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   45ed0:	e9cd 2301 	strd	r2, r3, [sp, #4]
   45ed4:	2300      	movs	r3, #0
   45ed6:	9300      	str	r3, [sp, #0]
   45ed8:	461a      	mov	r2, r3
   45eda:	f7e8 f8a1 	bl	2e020 <bt_gatt_foreach_attr_type>
}
   45ede:	b005      	add	sp, #20
   45ee0:	f85d fb04 	ldr.w	pc, [sp], #4

00045ee4 <find_type_cb>:
{
   45ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   45ee8:	f8d2 9000 	ldr.w	r9, [r2]
{
   45eec:	b091      	sub	sp, #68	; 0x44
   45eee:	4607      	mov	r7, r0
   45ef0:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   45ef2:	2500      	movs	r5, #0
   45ef4:	f642 0301 	movw	r3, #10241	; 0x2801
   45ef8:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   45efa:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   45efe:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   45f02:	a90b      	add	r1, sp, #44	; 0x2c
{
   45f04:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   45f06:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   45f0a:	f7fe febb 	bl	44c84 <bt_uuid_cmp>
   45f0e:	2800      	cmp	r0, #0
   45f10:	d079      	beq.n	46006 <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   45f12:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   45f16:	6838      	ldr	r0, [r7, #0]
   45f18:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   45f1c:	a90b      	add	r1, sp, #44	; 0x2c
   45f1e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   45f22:	f7fe feaf 	bl	44c84 <bt_uuid_cmp>
   45f26:	b138      	cbz	r0, 45f38 <find_type_cb+0x54>
		if (data->group &&
   45f28:	68a3      	ldr	r3, [r4, #8]
   45f2a:	b11b      	cbz	r3, 45f34 <find_type_cb+0x50>
   45f2c:	885a      	ldrh	r2, [r3, #2]
   45f2e:	42b2      	cmp	r2, r6
   45f30:	d200      	bcs.n	45f34 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   45f32:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   45f34:	2001      	movs	r0, #1
   45f36:	e009      	b.n	45f4c <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   45f38:	6861      	ldr	r1, [r4, #4]
   45f3a:	4608      	mov	r0, r1
   45f3c:	f7ff ff61 	bl	45e02 <net_buf_frags_len>
   45f40:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   45f44:	1a1b      	subs	r3, r3, r0
   45f46:	2b03      	cmp	r3, #3
   45f48:	d803      	bhi.n	45f52 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   45f4a:	2000      	movs	r0, #0
}
   45f4c:	b011      	add	sp, #68	; 0x44
   45f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   45f52:	4608      	mov	r0, r1
   45f54:	f001 fcba 	bl	478cc <net_buf_frag_last>
   45f58:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   45f5a:	6860      	ldr	r0, [r4, #4]
   45f5c:	f7ff ff51 	bl	45e02 <net_buf_frags_len>
   45f60:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   45f64:	f105 0b08 	add.w	fp, r5, #8
   45f68:	ebaa 0a00 	sub.w	sl, sl, r0
   45f6c:	4658      	mov	r0, fp
   45f6e:	f001 fd16 	bl	4799e <net_buf_simple_tailroom>
   45f72:	4582      	cmp	sl, r0
   45f74:	d23f      	bcs.n	45ff6 <find_type_cb+0x112>
   45f76:	6860      	ldr	r0, [r4, #4]
   45f78:	f7ff ff43 	bl	45e02 <net_buf_frags_len>
   45f7c:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   45f80:	1a18      	subs	r0, r3, r0
	if (!len) {
   45f82:	b970      	cbnz	r0, 45fa2 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   45f84:	6863      	ldr	r3, [r4, #4]
   45f86:	7998      	ldrb	r0, [r3, #6]
   45f88:	f7f6 ffcc 	bl	3cf24 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   45f8c:	2200      	movs	r2, #0
   45f8e:	2300      	movs	r3, #0
   45f90:	f001 fc68 	bl	47864 <net_buf_alloc_fixed>
		if (!frag) {
   45f94:	4605      	mov	r5, r0
   45f96:	2800      	cmp	r0, #0
   45f98:	d0d7      	beq.n	45f4a <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   45f9a:	4601      	mov	r1, r0
   45f9c:	6860      	ldr	r0, [r4, #4]
   45f9e:	f001 fca6 	bl	478ee <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   45fa2:	2300      	movs	r3, #0
   45fa4:	9300      	str	r3, [sp, #0]
   45fa6:	f8d7 9004 	ldr.w	r9, [r7, #4]
   45faa:	4639      	mov	r1, r7
   45fac:	2310      	movs	r3, #16
   45fae:	aa02      	add	r2, sp, #8
   45fb0:	4640      	mov	r0, r8
   45fb2:	47c8      	blx	r9
	if (read < 0) {
   45fb4:	1e07      	subs	r7, r0, #0
   45fb6:	db26      	blt.n	46006 <find_type_cb+0x122>
	if (read != data->value_len) {
   45fb8:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   45fba:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   45fbc:	42ba      	cmp	r2, r7
   45fbe:	d01e      	beq.n	45ffe <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   45fc0:	4601      	mov	r1, r0
   45fc2:	a80b      	add	r0, sp, #44	; 0x2c
   45fc4:	f7fe fe8c 	bl	44ce0 <bt_uuid_create>
   45fc8:	b1e8      	cbz	r0, 46006 <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   45fca:	b2fa      	uxtb	r2, r7
   45fcc:	a902      	add	r1, sp, #8
   45fce:	a806      	add	r0, sp, #24
   45fd0:	f7fe fe86 	bl	44ce0 <bt_uuid_create>
   45fd4:	b1b8      	cbz	r0, 46006 <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   45fd6:	a906      	add	r1, sp, #24
   45fd8:	a80b      	add	r0, sp, #44	; 0x2c
   45fda:	f7fe fe53 	bl	44c84 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   45fde:	b990      	cbnz	r0, 46006 <find_type_cb+0x122>
	data->err = 0x00;
   45fe0:	2300      	movs	r3, #0
   45fe2:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   45fe4:	2104      	movs	r1, #4
   45fe6:	f105 0008 	add.w	r0, r5, #8
   45fea:	f001 fc9d 	bl	47928 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   45fee:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   45ff0:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   45ff2:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   45ff4:	e79e      	b.n	45f34 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   45ff6:	4658      	mov	r0, fp
   45ff8:	f001 fcd1 	bl	4799e <net_buf_simple_tailroom>
   45ffc:	e7c1      	b.n	45f82 <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   45ffe:	a902      	add	r1, sp, #8
   46000:	f7fe fd4f 	bl	44aa2 <memcmp>
   46004:	e7eb      	b.n	45fde <find_type_cb+0xfa>
	data->group = NULL;
   46006:	2300      	movs	r3, #0
   46008:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   4600a:	e793      	b.n	45f34 <find_type_cb+0x50>

0004600c <find_info_cb>:
{
   4600c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   4600e:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   46010:	6817      	ldr	r7, [r2, #0]
{
   46012:	4605      	mov	r5, r0
   46014:	460e      	mov	r6, r1
   46016:	4614      	mov	r4, r2
	if (!data->rsp) {
   46018:	b963      	cbnz	r3, 46034 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   4601a:	6850      	ldr	r0, [r2, #4]
   4601c:	2101      	movs	r1, #1
   4601e:	3008      	adds	r0, #8
   46020:	f001 fc82 	bl	47928 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   46024:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   46026:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   46028:	781b      	ldrb	r3, [r3, #0]
   4602a:	2b00      	cmp	r3, #0
   4602c:	bf14      	ite	ne
   4602e:	2302      	movne	r3, #2
   46030:	2301      	moveq	r3, #1
   46032:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   46034:	68a3      	ldr	r3, [r4, #8]
   46036:	781b      	ldrb	r3, [r3, #0]
   46038:	2b01      	cmp	r3, #1
   4603a:	d003      	beq.n	46044 <find_info_cb+0x38>
   4603c:	2b02      	cmp	r3, #2
   4603e:	d019      	beq.n	46074 <find_info_cb+0x68>
   46040:	2000      	movs	r0, #0
   46042:	e016      	b.n	46072 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   46044:	682b      	ldr	r3, [r5, #0]
   46046:	781b      	ldrb	r3, [r3, #0]
   46048:	2b00      	cmp	r3, #0
   4604a:	d1f9      	bne.n	46040 <find_info_cb+0x34>
   4604c:	6860      	ldr	r0, [r4, #4]
   4604e:	2104      	movs	r1, #4
   46050:	3008      	adds	r0, #8
   46052:	f001 fc69 	bl	47928 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   46056:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   46058:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   4605a:	885b      	ldrh	r3, [r3, #2]
   4605c:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   4605e:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   46060:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   46062:	899b      	ldrh	r3, [r3, #12]
   46064:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   46068:	1ac0      	subs	r0, r0, r3
   4606a:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   4606c:	bf94      	ite	ls
   4606e:	2000      	movls	r0, #0
   46070:	2001      	movhi	r0, #1
}
   46072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   46074:	682b      	ldr	r3, [r5, #0]
   46076:	781b      	ldrb	r3, [r3, #0]
   46078:	2b02      	cmp	r3, #2
   4607a:	d1e1      	bne.n	46040 <find_info_cb+0x34>
   4607c:	6860      	ldr	r0, [r4, #4]
   4607e:	2112      	movs	r1, #18
   46080:	3008      	adds	r0, #8
   46082:	f001 fc51 	bl	47928 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   46086:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   46088:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   4608a:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   4608c:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   46090:	3101      	adds	r1, #1
   46092:	f7fe fd16 	bl	44ac2 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   46096:	6863      	ldr	r3, [r4, #4]
   46098:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   4609c:	899b      	ldrh	r3, [r3, #12]
   4609e:	1ac0      	subs	r0, r0, r3
   460a0:	2812      	cmp	r0, #18
   460a2:	e7e3      	b.n	4606c <find_info_cb+0x60>

000460a4 <att_chan_mtu_updated>:
{
   460a4:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   460a6:	6805      	ldr	r5, [r0, #0]
	return list->head;
   460a8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   460aa:	b382      	cbz	r2, 4610e <att_chan_mtu_updated+0x6a>
	return node->next;
   460ac:	6813      	ldr	r3, [r2, #0]
   460ae:	b10b      	cbz	r3, 460b4 <att_chan_mtu_updated+0x10>
   460b0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   460b4:	f5a2 74a2 	sub.w	r4, r2, #324	; 0x144
   460b8:	2200      	movs	r2, #0
   460ba:	4611      	mov	r1, r2
   460bc:	e001      	b.n	460c2 <att_chan_mtu_updated+0x1e>
   460be:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (chan == updated_chan) {
   460c2:	4284      	cmp	r4, r0
   460c4:	d009      	beq.n	460da <att_chan_mtu_updated+0x36>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   460c6:	f8b4 608a 	ldrh.w	r6, [r4, #138]	; 0x8a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   460ca:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   460ce:	42b1      	cmp	r1, r6
   460d0:	bf38      	it	cc
   460d2:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   460d4:	42a2      	cmp	r2, r4
   460d6:	bf38      	it	cc
   460d8:	4622      	movcc	r2, r4
   460da:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   460dc:	b12b      	cbz	r3, 460ea <att_chan_mtu_updated+0x46>
   460de:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   460e2:	2b00      	cmp	r3, #0
   460e4:	d1eb      	bne.n	460be <att_chan_mtu_updated+0x1a>
		if (chan == updated_chan) {
   460e6:	4284      	cmp	r4, r0
   460e8:	d1ed      	bne.n	460c6 <att_chan_mtu_updated+0x22>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   460ea:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   460ee:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   460f2:	428b      	cmp	r3, r1
   460f4:	d801      	bhi.n	460fa <att_chan_mtu_updated+0x56>
   460f6:	4290      	cmp	r0, r2
   460f8:	d90b      	bls.n	46112 <att_chan_mtu_updated+0x6e>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   460fa:	4282      	cmp	r2, r0
   460fc:	bf38      	it	cc
   460fe:	4602      	movcc	r2, r0
   46100:	4299      	cmp	r1, r3
   46102:	6828      	ldr	r0, [r5, #0]
   46104:	bf38      	it	cc
   46106:	4619      	movcc	r1, r3
}
   46108:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   4610a:	f7e8 bb5d 	b.w	2e7c8 <bt_gatt_att_max_mtu_changed>
   4610e:	4611      	mov	r1, r2
   46110:	e7eb      	b.n	460ea <att_chan_mtu_updated+0x46>
}
   46112:	bc70      	pop	{r4, r5, r6}
   46114:	4770      	bx	lr

00046116 <attr_read_group_cb>:
	if (!data->rsp->len) {
   46116:	68d0      	ldr	r0, [r2, #12]
   46118:	7803      	ldrb	r3, [r0, #0]
   4611a:	3104      	adds	r1, #4
   4611c:	b913      	cbnz	r3, 46124 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   4611e:	7001      	strb	r1, [r0, #0]
	return true;
   46120:	2001      	movs	r0, #1
   46122:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   46124:	428b      	cmp	r3, r1
   46126:	d0fb      	beq.n	46120 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   46128:	6891      	ldr	r1, [r2, #8]
   4612a:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   4612c:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   4612e:	3b04      	subs	r3, #4
   46130:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   46132:	6110      	str	r0, [r2, #16]
}
   46134:	4770      	bx	lr

00046136 <chan_req_sent>:
	if (chan->req) {
   46136:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   4613a:	b133      	cbz	r3, 4614a <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   4613c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   46140:	2300      	movs	r3, #0
   46142:	f500 7088 	add.w	r0, r0, #272	; 0x110
   46146:	f7fb bc2d 	b.w	419a4 <k_work_reschedule>
}
   4614a:	4770      	bx	lr

0004614c <att_chan_read>:
{
   4614c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   46150:	4680      	mov	r8, r0
   46152:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   46154:	4610      	mov	r0, r2
{
   46156:	4699      	mov	r9, r3
   46158:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   4615a:	f7ff fe52 	bl	45e02 <net_buf_frags_len>
   4615e:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   46162:	4283      	cmp	r3, r0
{
   46164:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   46166:	d97a      	bls.n	4625e <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   46168:	f8d8 3008 	ldr.w	r3, [r8, #8]
   4616c:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   4616e:	4630      	mov	r0, r6
   46170:	f001 fbac 	bl	478cc <net_buf_frag_last>
	size_t len, total = 0;
   46174:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   46178:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   4617a:	4630      	mov	r0, r6
   4617c:	f7ff fe41 	bl	45e02 <net_buf_frags_len>
   46180:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   46184:	f105 0708 	add.w	r7, r5, #8
   46188:	1a24      	subs	r4, r4, r0
   4618a:	4638      	mov	r0, r7
   4618c:	f001 fc07 	bl	4799e <net_buf_simple_tailroom>
   46190:	4284      	cmp	r4, r0
   46192:	d211      	bcs.n	461b8 <att_chan_read+0x6c>
   46194:	4630      	mov	r0, r6
   46196:	f7ff fe34 	bl	45e02 <net_buf_frags_len>
   4619a:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   4619e:	1a24      	subs	r4, r4, r0
		if (!len) {
   461a0:	bb34      	cbnz	r4, 461f0 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   461a2:	79b0      	ldrb	r0, [r6, #6]
   461a4:	f7f6 febe 	bl	3cf24 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   461a8:	2200      	movs	r2, #0
   461aa:	2300      	movs	r3, #0
   461ac:	f001 fb5a 	bl	47864 <net_buf_alloc_fixed>
			if (!frag) {
   461b0:	4605      	mov	r5, r0
   461b2:	b930      	cbnz	r0, 461c2 <att_chan_read+0x76>
	return total;
   461b4:	4657      	mov	r7, sl
   461b6:	e02c      	b.n	46212 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   461b8:	4638      	mov	r0, r7
   461ba:	f001 fbf0 	bl	4799e <net_buf_simple_tailroom>
   461be:	4604      	mov	r4, r0
   461c0:	e7ee      	b.n	461a0 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   461c2:	4601      	mov	r1, r0
   461c4:	4630      	mov	r0, r6
   461c6:	f001 fb92 	bl	478ee <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   461ca:	4630      	mov	r0, r6
   461cc:	f7ff fe19 	bl	45e02 <net_buf_frags_len>
   461d0:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   461d4:	f105 0708 	add.w	r7, r5, #8
   461d8:	1a24      	subs	r4, r4, r0
   461da:	4638      	mov	r0, r7
   461dc:	f001 fbdf 	bl	4799e <net_buf_simple_tailroom>
   461e0:	4284      	cmp	r4, r0
   461e2:	d21a      	bcs.n	4621a <att_chan_read+0xce>
   461e4:	4630      	mov	r0, r6
   461e6:	f7ff fe0c 	bl	45e02 <net_buf_frags_len>
   461ea:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   461ee:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   461f0:	68a9      	ldr	r1, [r5, #8]
   461f2:	89aa      	ldrh	r2, [r5, #12]
   461f4:	f8cd 9000 	str.w	r9, [sp]
   461f8:	f8db 7004 	ldr.w	r7, [fp, #4]
   461fc:	9803      	ldr	r0, [sp, #12]
   461fe:	440a      	add	r2, r1
   46200:	b2a3      	uxth	r3, r4
   46202:	4659      	mov	r1, fp
   46204:	47b8      	blx	r7
		if (read < 0) {
   46206:	1e07      	subs	r7, r0, #0
   46208:	da0c      	bge.n	46224 <att_chan_read+0xd8>
				return total;
   4620a:	f1ba 0f00 	cmp.w	sl, #0
   4620e:	bf18      	it	ne
   46210:	4657      	movne	r7, sl
}
   46212:	4638      	mov	r0, r7
   46214:	b005      	add	sp, #20
   46216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4621a:	4638      	mov	r0, r7
   4621c:	f001 fbbf 	bl	4799e <net_buf_simple_tailroom>
   46220:	4604      	mov	r4, r0
   46222:	e7e5      	b.n	461f0 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   46224:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   46226:	b993      	cbnz	r3, 4624e <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   46228:	4639      	mov	r1, r7
   4622a:	f105 0008 	add.w	r0, r5, #8
   4622e:	f001 fb7b 	bl	47928 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   46232:	4630      	mov	r0, r6
   46234:	f7ff fde5 	bl	45e02 <net_buf_frags_len>
   46238:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   4623c:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   4623e:	4283      	cmp	r3, r0
		total += read;
   46240:	44ba      	add	sl, r7
		offset += read;
   46242:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   46246:	d9b5      	bls.n	461b4 <att_chan_read+0x68>
   46248:	42a7      	cmp	r7, r4
   4624a:	d096      	beq.n	4617a <att_chan_read+0x2e>
   4624c:	e7b2      	b.n	461b4 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   4624e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   46250:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   46252:	4639      	mov	r1, r7
   46254:	4628      	mov	r0, r5
   46256:	4798      	blx	r3
   46258:	2800      	cmp	r0, #0
   4625a:	d1e5      	bne.n	46228 <att_chan_read+0xdc>
   4625c:	e7aa      	b.n	461b4 <att_chan_read+0x68>
		return 0;
   4625e:	2700      	movs	r7, #0
   46260:	e7d7      	b.n	46212 <att_chan_read+0xc6>

00046262 <chan_req_send>:
{
   46262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   46264:	688f      	ldr	r7, [r1, #8]
{
   46266:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   46268:	4638      	mov	r0, r7
   4626a:	f7ff fdca 	bl	45e02 <net_buf_frags_len>
   4626e:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
   46272:	4283      	cmp	r3, r0
{
   46274:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   46276:	d30d      	bcc.n	46294 <chan_req_send+0x32>
	req->buf = NULL;
   46278:	2600      	movs	r6, #0
	chan->req = req;
   4627a:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   4627e:	4632      	mov	r2, r6
	req->buf = NULL;
   46280:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   46282:	4620      	mov	r0, r4
   46284:	4639      	mov	r1, r7
   46286:	f7e6 ff4f 	bl	2d128 <chan_send>
	if (err) {
   4628a:	b110      	cbz	r0, 46292 <chan_req_send+0x30>
		req->buf = buf;
   4628c:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   4628e:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
}
   46292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   46294:	f06f 0079 	mvn.w	r0, #121	; 0x79
   46298:	e7fb      	b.n	46292 <chan_req_send+0x30>

0004629a <process_queue>:
{
   4629a:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   4629c:	2200      	movs	r2, #0
{
   4629e:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   462a0:	2300      	movs	r3, #0
   462a2:	4608      	mov	r0, r1
{
   462a4:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   462a6:	f001 fae2 	bl	4786e <net_buf_get>
	if (buf) {
   462aa:	4605      	mov	r5, r0
   462ac:	b160      	cbz	r0, 462c8 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   462ae:	4601      	mov	r1, r0
   462b0:	2200      	movs	r2, #0
   462b2:	4620      	mov	r0, r4
   462b4:	f7e6 ff38 	bl	2d128 <chan_send>
		if (err) {
   462b8:	4604      	mov	r4, r0
   462ba:	b118      	cbz	r0, 462c4 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   462bc:	4629      	mov	r1, r5
   462be:	4630      	mov	r0, r6
   462c0:	f002 f9fc 	bl	486bc <k_queue_prepend>
}
   462c4:	4620      	mov	r0, r4
   462c6:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   462c8:	f06f 0401 	mvn.w	r4, #1
   462cc:	e7fa      	b.n	462c4 <process_queue+0x2a>

000462ce <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   462ce:	b510      	push	{r4, lr}
	return list->head;
   462d0:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   462d2:	2200      	movs	r2, #0
   462d4:	b153      	cbz	r3, 462ec <sys_slist_find_and_remove.isra.0+0x1e>
   462d6:	428b      	cmp	r3, r1
   462d8:	d10e      	bne.n	462f8 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   462da:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   462dc:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   462de:	b932      	cbnz	r2, 462ee <sys_slist_find_and_remove.isra.0+0x20>
   462e0:	42a1      	cmp	r1, r4
	list->head = node;
   462e2:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   462e4:	d100      	bne.n	462e8 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   462e6:	6043      	str	r3, [r0, #4]
	parent->next = child;
   462e8:	2300      	movs	r3, #0
   462ea:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   462ec:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   462ee:	42a1      	cmp	r1, r4
	parent->next = child;
   462f0:	6013      	str	r3, [r2, #0]
	list->tail = node;
   462f2:	bf08      	it	eq
   462f4:	6042      	streq	r2, [r0, #4]
}
   462f6:	e7f7      	b.n	462e8 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   462f8:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   462fa:	681b      	ldr	r3, [r3, #0]
   462fc:	e7ea      	b.n	462d4 <sys_slist_find_and_remove.isra.0+0x6>

000462fe <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   462fe:	2006      	movs	r0, #6
   46300:	4770      	bx	lr

00046302 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   46302:	30f0      	adds	r0, #240	; 0xf0
   46304:	f3bf 8f5b 	dmb	ish
   46308:	e850 3f00 	ldrex	r3, [r0]
   4630c:	f023 0301 	bic.w	r3, r3, #1
   46310:	e840 3200 	strex	r2, r3, [r0]
   46314:	2a00      	cmp	r2, #0
   46316:	d1f7      	bne.n	46308 <chan_rsp_sent+0x6>
   46318:	f3bf 8f5b 	dmb	ish
}
   4631c:	4770      	bx	lr

0004631e <chan_cfm_sent>:
   4631e:	30f0      	adds	r0, #240	; 0xf0
   46320:	f3bf 8f5b 	dmb	ish
   46324:	e850 3f00 	ldrex	r3, [r0]
   46328:	f023 0302 	bic.w	r3, r3, #2
   4632c:	e840 3200 	strex	r2, r3, [r0]
   46330:	2a00      	cmp	r2, #0
   46332:	d1f7      	bne.n	46324 <chan_cfm_sent+0x6>
   46334:	f3bf 8f5b 	dmb	ish
}
   46338:	4770      	bx	lr

0004633a <read_cb>:
{
   4633a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   4633c:	6816      	ldr	r6, [r2, #0]
{
   4633e:	4605      	mov	r5, r0
	data->err = 0x00;
   46340:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   46342:	68b0      	ldr	r0, [r6, #8]
	data->err = 0x00;
   46344:	7313      	strb	r3, [r2, #12]
{
   46346:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   46348:	4629      	mov	r1, r5
   4634a:	2215      	movs	r2, #21
   4634c:	f000 fd7b 	bl	46e46 <bt_gatt_check_perm>
   46350:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   46352:	b980      	cbnz	r0, 46376 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   46354:	e9cd 0000 	strd	r0, r0, [sp]
   46358:	4629      	mov	r1, r5
   4635a:	88a3      	ldrh	r3, [r4, #4]
   4635c:	68a2      	ldr	r2, [r4, #8]
   4635e:	4630      	mov	r0, r6
   46360:	f7ff fef4 	bl	4614c <att_chan_read>
	if (ret < 0) {
   46364:	2800      	cmp	r0, #0
   46366:	da09      	bge.n	4637c <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   46368:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   4636c:	bf26      	itte	cs
   4636e:	4240      	negcs	r0, r0
   46370:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   46372:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   46374:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   46376:	2000      	movs	r0, #0
}
   46378:	b002      	add	sp, #8
   4637a:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   4637c:	2001      	movs	r0, #1
   4637e:	e7fb      	b.n	46378 <read_cb+0x3e>

00046380 <bt_att_sent>:
{
   46380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   46382:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   46386:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   4638a:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   4638c:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   46390:	b10b      	cbz	r3, 46396 <bt_att_sent+0x16>
		chan->sent(chan);
   46392:	4638      	mov	r0, r7
   46394:	4798      	blx	r3
   46396:	f3bf 8f5b 	dmb	ish
   4639a:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   4639e:	e853 1f00 	ldrex	r1, [r3]
   463a2:	f021 0110 	bic.w	r1, r1, #16
   463a6:	e843 1200 	strex	r2, r1, [r3]
   463aa:	2a00      	cmp	r2, #0
   463ac:	d1f7      	bne.n	4639e <bt_att_sent+0x1e>
   463ae:	f3bf 8f5b 	dmb	ish
	if (!att) {
   463b2:	b30c      	cbz	r4, 463f8 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   463b4:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   463b8:	b98b      	cbnz	r3, 463de <bt_att_sent+0x5e>
   463ba:	6863      	ldr	r3, [r4, #4]
   463bc:	b17b      	cbz	r3, 463de <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   463be:	1d20      	adds	r0, r4, #4
   463c0:	f7ff fd15 	bl	45dee <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   463c4:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   463c6:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   463c8:	4638      	mov	r0, r7
   463ca:	f7ff ff4a 	bl	46262 <chan_req_send>
   463ce:	2800      	cmp	r0, #0
   463d0:	da12      	bge.n	463f8 <bt_att_sent+0x78>
	parent->next = child;
   463d2:	6863      	ldr	r3, [r4, #4]
   463d4:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   463d6:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   463d8:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   463da:	b903      	cbnz	r3, 463de <bt_att_sent+0x5e>
	list->tail = node;
   463dc:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   463de:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   463e2:	4638      	mov	r0, r7
   463e4:	f7ff ff59 	bl	4629a <process_queue>
	if (!err) {
   463e8:	b130      	cbz	r0, 463f8 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   463ea:	f104 010c 	add.w	r1, r4, #12
   463ee:	4638      	mov	r0, r7
}
   463f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   463f4:	f7ff bf51 	b.w	4629a <process_queue>
}
   463f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000463fa <att_req_send_process>:
{
   463fa:	b570      	push	{r4, r5, r6, lr}
   463fc:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   463fe:	3004      	adds	r0, #4
   46400:	f7ff fcf5 	bl	45dee <sys_slist_get>
	if (!node) {
   46404:	4606      	mov	r6, r0
   46406:	b1d0      	cbz	r0, 4643e <att_req_send_process+0x44>
	return list->head;
   46408:	6a68      	ldr	r0, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4640a:	b1e8      	cbz	r0, 46448 <att_req_send_process+0x4e>
	return node->next;
   4640c:	6804      	ldr	r4, [r0, #0]
   4640e:	b10c      	cbz	r4, 46414 <att_req_send_process+0x1a>
   46410:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
		if (!chan->req) {
   46414:	f850 3c50 	ldr.w	r3, [r0, #-80]
   46418:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   4641c:	b153      	cbz	r3, 46434 <att_req_send_process+0x3a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4641e:	b19c      	cbz	r4, 46448 <att_req_send_process+0x4e>
   46420:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   46424:	4620      	mov	r0, r4
   46426:	b15b      	cbz	r3, 46440 <att_req_send_process+0x46>
   46428:	f5a3 74a2 	sub.w	r4, r3, #324	; 0x144
		if (!chan->req) {
   4642c:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   46430:	2b00      	cmp	r3, #0
   46432:	d1f5      	bne.n	46420 <att_req_send_process+0x26>
	return chan_req_send(chan, req);
   46434:	4631      	mov	r1, r6
   46436:	f7ff ff14 	bl	46262 <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   4643a:	2800      	cmp	r0, #0
   4643c:	dbef      	blt.n	4641e <att_req_send_process+0x24>
}
   4643e:	bd70      	pop	{r4, r5, r6, pc}
		if (!chan->req) {
   46440:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
   46444:	2c00      	cmp	r4, #0
   46446:	d0f5      	beq.n	46434 <att_req_send_process+0x3a>
	parent->next = child;
   46448:	686b      	ldr	r3, [r5, #4]
   4644a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   4644c:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   4644e:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   46450:	2b00      	cmp	r3, #0
   46452:	d1f4      	bne.n	4643e <att_req_send_process+0x44>
	list->tail = node;
   46454:	60ae      	str	r6, [r5, #8]
}
   46456:	e7f2      	b.n	4643e <att_req_send_process+0x44>

00046458 <bt_att_status>:
{
   46458:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4645a:	f3bf 8f5b 	dmb	ish
   4645e:	680b      	ldr	r3, [r1, #0]
   46460:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   46464:	07db      	lsls	r3, r3, #31
{
   46466:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   46468:	d519      	bpl.n	4649e <bt_att_status+0x46>
	if (!chan->att) {
   4646a:	f850 0c08 	ldr.w	r0, [r0, #-8]
   4646e:	b1b0      	cbz	r0, 4649e <bt_att_status+0x46>
	if (chan->req) {
   46470:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   46474:	b99b      	cbnz	r3, 4649e <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   46476:	3004      	adds	r0, #4
   46478:	f7ff fcb9 	bl	45dee <sys_slist_get>
	if (!node) {
   4647c:	4604      	mov	r4, r0
   4647e:	b170      	cbz	r0, 4649e <bt_att_status+0x46>
	return chan_req_send(chan, req);
   46480:	4601      	mov	r1, r0
   46482:	f1a5 0008 	sub.w	r0, r5, #8
   46486:	f7ff feec 	bl	46262 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   4648a:	2800      	cmp	r0, #0
   4648c:	da07      	bge.n	4649e <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   4648e:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   46492:	685a      	ldr	r2, [r3, #4]
   46494:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   46496:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   46498:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   4649a:	b902      	cbnz	r2, 4649e <bt_att_status+0x46>
	list->tail = node;
   4649c:	609c      	str	r4, [r3, #8]
}
   4649e:	bd38      	pop	{r3, r4, r5, pc}

000464a0 <bt_att_chan_create_pdu>:
{
   464a0:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   464a2:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   464a6:	3201      	adds	r2, #1
   464a8:	429a      	cmp	r2, r3
{
   464aa:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   464ac:	d80f      	bhi.n	464ce <bt_att_chan_create_pdu+0x2e>
	switch (att_op_get_type(op)) {
   464ae:	4608      	mov	r0, r1
   464b0:	f7e6 fd5e 	bl	2cf70 <att_op_get_type>
   464b4:	2802      	cmp	r0, #2
   464b6:	d001      	beq.n	464bc <bt_att_chan_create_pdu+0x1c>
   464b8:	2804      	cmp	r0, #4
   464ba:	d10b      	bne.n	464d4 <bt_att_chan_create_pdu+0x34>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   464bc:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   464c0:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   464c2:	2100      	movs	r1, #0
   464c4:	4608      	mov	r0, r1
   464c6:	f7ff fc13 	bl	45cf0 <bt_l2cap_create_pdu_timeout>
   464ca:	4604      	mov	r4, r0
	if (!buf) {
   464cc:	b938      	cbnz	r0, 464de <bt_att_chan_create_pdu+0x3e>
		return NULL;
   464ce:	2400      	movs	r4, #0
}
   464d0:	4620      	mov	r0, r4
   464d2:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   464d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   464d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   464dc:	e7f1      	b.n	464c2 <bt_att_chan_create_pdu+0x22>
   464de:	2101      	movs	r1, #1
   464e0:	3008      	adds	r0, #8
   464e2:	f001 fa21 	bl	47928 <net_buf_simple_add>
	hdr->code = op;
   464e6:	7005      	strb	r5, [r0, #0]
	return buf;
   464e8:	e7f2      	b.n	464d0 <bt_att_chan_create_pdu+0x30>

000464ea <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   464ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   464ee:	4688      	mov	r8, r1
   464f0:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   464f2:	2101      	movs	r1, #1
   464f4:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   464f6:	4605      	mov	r5, r0
   464f8:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   464fa:	f7ff ffd1 	bl	464a0 <bt_att_chan_create_pdu>
	if (!buf) {
   464fe:	4604      	mov	r4, r0
   46500:	b170      	cbz	r0, 46520 <send_err_rsp.part.0+0x36>
   46502:	2104      	movs	r1, #4
   46504:	3008      	adds	r0, #8
   46506:	f001 fa0f 	bl	47928 <net_buf_simple_add>
	rsp->request = req;
   4650a:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   4650e:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   46510:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   46514:	4621      	mov	r1, r4
   46516:	4628      	mov	r0, r5
}
   46518:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   4651c:	f7e6 be66 	b.w	2d1ec <bt_att_chan_send_rsp.constprop.0>
}
   46520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00046524 <att_write_req>:
{
   46524:	b537      	push	{r0, r1, r2, r4, r5, lr}
   46526:	460c      	mov	r4, r1
   46528:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   4652a:	f101 0008 	add.w	r0, r1, #8
   4652e:	f001 fa2a 	bl	47986 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   46532:	89a2      	ldrh	r2, [r4, #12]
   46534:	9201      	str	r2, [sp, #4]
   46536:	68a2      	ldr	r2, [r4, #8]
   46538:	9200      	str	r2, [sp, #0]
   4653a:	4603      	mov	r3, r0
   4653c:	2213      	movs	r2, #19
   4653e:	2112      	movs	r1, #18
   46540:	4628      	mov	r0, r5
   46542:	f7e6 ff65 	bl	2d410 <att_write_rsp.constprop.0>
}
   46546:	b003      	add	sp, #12
   46548:	bd30      	pop	{r4, r5, pc}

0004654a <att_write_cmd>:
{
   4654a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4654c:	460c      	mov	r4, r1
   4654e:	4605      	mov	r5, r0
   46550:	f101 0008 	add.w	r0, r1, #8
   46554:	f001 fa17 	bl	47986 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   46558:	89a2      	ldrh	r2, [r4, #12]
   4655a:	9201      	str	r2, [sp, #4]
   4655c:	68a2      	ldr	r2, [r4, #8]
   4655e:	9200      	str	r2, [sp, #0]
   46560:	2200      	movs	r2, #0
   46562:	4603      	mov	r3, r0
   46564:	4611      	mov	r1, r2
   46566:	4628      	mov	r0, r5
   46568:	f7e6 ff52 	bl	2d410 <att_write_rsp.constprop.0>
}
   4656c:	b003      	add	sp, #12
   4656e:	bd30      	pop	{r4, r5, pc}

00046570 <bt_att_create_pdu>:
{
   46570:	b538      	push	{r3, r4, r5, lr}
   46572:	460d      	mov	r5, r1
   46574:	4614      	mov	r4, r2
	att = att_get(conn);
   46576:	f7ff fc64 	bl	45e42 <att_get>
	if (!att) {
   4657a:	b168      	cbz	r0, 46598 <bt_att_create_pdu+0x28>
	return list->head;
   4657c:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4657e:	b15b      	cbz	r3, 46598 <bt_att_create_pdu+0x28>
   46580:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
	return node->next;
   46584:	681b      	ldr	r3, [r3, #0]
   46586:	b10b      	cbz	r3, 4658c <bt_att_create_pdu+0x1c>
   46588:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   4658c:	1c62      	adds	r2, r4, #1
   4658e:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   46592:	428a      	cmp	r2, r1
   46594:	d90d      	bls.n	465b2 <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   46596:	b90b      	cbnz	r3, 4659c <bt_att_create_pdu+0x2c>
}
   46598:	2000      	movs	r0, #0
   4659a:	bd38      	pop	{r3, r4, r5, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4659c:	4618      	mov	r0, r3
   4659e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   465a2:	2b00      	cmp	r3, #0
   465a4:	d0f3      	beq.n	4658e <bt_att_create_pdu+0x1e>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   465a6:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   465aa:	428a      	cmp	r2, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   465ac:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   465b0:	d8f4      	bhi.n	4659c <bt_att_create_pdu+0x2c>
		return bt_att_chan_create_pdu(chan, op, len);
   465b2:	4622      	mov	r2, r4
   465b4:	4629      	mov	r1, r5
}
   465b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   465ba:	f7ff bf71 	b.w	464a0 <bt_att_chan_create_pdu>

000465be <att_read_blob_req>:
{
   465be:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   465c0:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   465c2:	8813      	ldrh	r3, [r2, #0]
   465c4:	8852      	ldrh	r2, [r2, #2]
   465c6:	9200      	str	r2, [sp, #0]
   465c8:	210c      	movs	r1, #12
   465ca:	220d      	movs	r2, #13
   465cc:	f7e7 f83a 	bl	2d644 <att_read_rsp>
}
   465d0:	b003      	add	sp, #12
   465d2:	f85d fb04 	ldr.w	pc, [sp], #4

000465d6 <att_read_req>:
{
   465d6:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   465d8:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   465da:	2200      	movs	r2, #0
   465dc:	881b      	ldrh	r3, [r3, #0]
   465de:	9200      	str	r2, [sp, #0]
   465e0:	210a      	movs	r1, #10
   465e2:	220b      	movs	r2, #11
   465e4:	f7e7 f82e 	bl	2d644 <att_read_rsp>
}
   465e8:	b003      	add	sp, #12
   465ea:	f85d fb04 	ldr.w	pc, [sp], #4

000465ee <att_mtu_req>:
{
   465ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   465f0:	6803      	ldr	r3, [r0, #0]
{
   465f2:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   465f4:	6818      	ldr	r0, [r3, #0]
   465f6:	f3bf 8f5b 	dmb	ish
   465fa:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   465fe:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   46602:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   46606:	071b      	lsls	r3, r3, #28
   46608:	d420      	bmi.n	4664c <att_mtu_req+0x5e>
	mtu_client = sys_le16_to_cpu(req->mtu);
   4660a:	688b      	ldr	r3, [r1, #8]
   4660c:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   4660e:	2e16      	cmp	r6, #22
   46610:	d91e      	bls.n	46650 <att_mtu_req+0x62>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   46612:	2202      	movs	r2, #2
   46614:	2103      	movs	r1, #3
   46616:	f7ff ffab 	bl	46570 <bt_att_create_pdu>
	if (!pdu) {
   4661a:	4607      	mov	r7, r0
   4661c:	b1d0      	cbz	r0, 46654 <att_mtu_req+0x66>
	return net_buf_simple_add(&buf->b, len);
   4661e:	2102      	movs	r1, #2
   46620:	3008      	adds	r0, #8
   46622:	f001 f981 	bl	47928 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   46626:	2341      	movs	r3, #65	; 0x41
   46628:	7003      	strb	r3, [r0, #0]
   4662a:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   4662c:	4639      	mov	r1, r7
   4662e:	4620      	mov	r0, r4
   46630:	f7e6 fddc 	bl	2d1ec <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   46634:	2e41      	cmp	r6, #65	; 0x41
   46636:	bf28      	it	cs
   46638:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   4663a:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   4663c:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   46640:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   46644:	f7ff fd2e 	bl	460a4 <att_chan_mtu_updated>
	return 0;
   46648:	4628      	mov	r0, r5
}
   4664a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   4664c:	2006      	movs	r0, #6
   4664e:	e7fc      	b.n	4664a <att_mtu_req+0x5c>
		return BT_ATT_ERR_INVALID_PDU;
   46650:	2004      	movs	r0, #4
   46652:	e7fa      	b.n	4664a <att_mtu_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
   46654:	200e      	movs	r0, #14
   46656:	e7f8      	b.n	4664a <att_mtu_req+0x5c>

00046658 <bt_att_init>:
	bt_gatt_init();
   46658:	f7e7 bc4e 	b.w	2def8 <bt_gatt_init>

0004665c <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   4665c:	898a      	ldrh	r2, [r1, #12]
   4665e:	6889      	ldr	r1, [r1, #8]
   46660:	2300      	movs	r3, #0
   46662:	f7e7 b963 	b.w	2d92c <att_handle_rsp>

00046666 <bt_att_encrypt_change>:
{
   46666:	b570      	push	{r4, r5, r6, lr}
	if (!att_chan->att) {
   46668:	f850 3c08 	ldr.w	r3, [r0, #-8]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   4666c:	4605      	mov	r5, r0
{
   4666e:	4604      	mov	r4, r0
	struct bt_conn *conn = ch->chan.conn;
   46670:	f855 6908 	ldr.w	r6, [r5], #-8
	if (!att_chan->att) {
   46674:	2b00      	cmp	r3, #0
   46676:	d035      	beq.n	466e4 <bt_att_encrypt_change+0x7e>
	if (hci_status) {
   46678:	b139      	cbz	r1, 4668a <bt_att_encrypt_change+0x24>
		if (att_chan->req && att_chan->req->retrying) {
   4667a:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   4667e:	b38b      	cbz	r3, 466e4 <bt_att_encrypt_change+0x7e>
   46680:	7c1b      	ldrb	r3, [r3, #16]
   46682:	07da      	lsls	r2, r3, #31
   46684:	d52e      	bpl.n	466e4 <bt_att_encrypt_change+0x7e>
		return BT_ATT_ERR_AUTHENTICATION;
   46686:	2305      	movs	r3, #5
   46688:	e01f      	b.n	466ca <bt_att_encrypt_change+0x64>
	bt_gatt_encrypt_change(conn);
   4668a:	4630      	mov	r0, r6
   4668c:	f7e8 f8b0 	bl	2e7f0 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   46690:	7a73      	ldrb	r3, [r6, #9]
   46692:	2b01      	cmp	r3, #1
   46694:	d026      	beq.n	466e4 <bt_att_encrypt_change+0x7e>
	if (!(att_chan->req && att_chan->req->retrying)) {
   46696:	f8d4 40ec 	ldr.w	r4, [r4, #236]	; 0xec
   4669a:	b31c      	cbz	r4, 466e4 <bt_att_encrypt_change+0x7e>
   4669c:	7c23      	ldrb	r3, [r4, #16]
   4669e:	07db      	lsls	r3, r3, #31
   466a0:	d520      	bpl.n	466e4 <bt_att_encrypt_change+0x7e>
	if (!req->encode) {
   466a2:	68e3      	ldr	r3, [r4, #12]
   466a4:	2b00      	cmp	r3, #0
   466a6:	d0ee      	beq.n	46686 <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   466a8:	6962      	ldr	r2, [r4, #20]
   466aa:	7c61      	ldrb	r1, [r4, #17]
   466ac:	4628      	mov	r0, r5
   466ae:	f7ff fef7 	bl	464a0 <bt_att_chan_create_pdu>
	if (!buf) {
   466b2:	4606      	mov	r6, r0
   466b4:	b140      	cbz	r0, 466c8 <bt_att_encrypt_change+0x62>
	if (req->encode(buf, req->len, req->user_data)) {
   466b6:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   466ba:	68e3      	ldr	r3, [r4, #12]
   466bc:	4798      	blx	r3
   466be:	4602      	mov	r2, r0
   466c0:	b150      	cbz	r0, 466d8 <bt_att_encrypt_change+0x72>
		net_buf_unref(buf);
   466c2:	4630      	mov	r0, r6
   466c4:	f7f6 fcf0 	bl	3d0a8 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   466c8:	230e      	movs	r3, #14
		att_handle_rsp(att_chan, NULL, 0, err);
   466ca:	2200      	movs	r2, #0
   466cc:	4628      	mov	r0, r5
   466ce:	4611      	mov	r1, r2
}
   466d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   466d4:	f7e7 b92a 	b.w	2d92c <att_handle_rsp>
	if (chan_send(att_chan, buf, NULL)) {
   466d8:	4631      	mov	r1, r6
   466da:	4628      	mov	r0, r5
   466dc:	f7e6 fd24 	bl	2d128 <chan_send>
   466e0:	2800      	cmp	r0, #0
   466e2:	d1ee      	bne.n	466c2 <bt_att_encrypt_change+0x5c>
}
   466e4:	bd70      	pop	{r4, r5, r6, pc}

000466e6 <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   466e6:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
   466ea:	f7e7 b957 	b.w	2d99c <bt_att_disconnected>

000466ee <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   466ee:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   466f2:	4607      	mov	r7, r0
   466f4:	460d      	mov	r5, r1
   466f6:	4616      	mov	r6, r2
   466f8:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   466fa:	f7ff fba2 	bl	45e42 <att_get>
	if (!att) {
   466fe:	4604      	mov	r4, r0
   46700:	b938      	cbnz	r0, 46712 <bt_att_send+0x24>
		net_buf_unref(buf);
   46702:	4628      	mov	r0, r5
   46704:	f7f6 fcd0 	bl	3d0a8 <net_buf_unref>
		return -ENOTCONN;
   46708:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   4670c:	b002      	add	sp, #8
   4670e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   46712:	b146      	cbz	r6, 46726 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   46714:	f8cd 8000 	str.w	r8, [sp]
   46718:	4633      	mov	r3, r6
   4671a:	462a      	mov	r2, r5
   4671c:	2104      	movs	r1, #4
   4671e:	4638      	mov	r0, r7
   46720:	f7ff fae9 	bl	45cf6 <bt_l2cap_send_cb>
   46724:	e7f2      	b.n	4670c <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   46726:	f100 060c 	add.w	r6, r0, #12
   4672a:	4629      	mov	r1, r5
   4672c:	4630      	mov	r0, r6
   4672e:	f001 f8bc 	bl	478aa <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   46732:	2200      	movs	r2, #0
   46734:	2300      	movs	r3, #0
   46736:	4630      	mov	r0, r6
   46738:	f001 f899 	bl	4786e <net_buf_get>
	if (!buf) {
   4673c:	4605      	mov	r5, r0
   4673e:	b908      	cbnz	r0, 46744 <bt_att_send+0x56>
	return 0;
   46740:	2000      	movs	r0, #0
   46742:	e7e3      	b.n	4670c <bt_att_send+0x1e>
	return list->head;
   46744:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   46746:	b1a3      	cbz	r3, 46772 <bt_att_send+0x84>
	return node->next;
   46748:	681c      	ldr	r4, [r3, #0]
   4674a:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   4674e:	b10c      	cbz	r4, 46754 <bt_att_send+0x66>
   46750:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   46754:	2200      	movs	r2, #0
   46756:	4629      	mov	r1, r5
   46758:	f7e6 fce6 	bl	2d128 <chan_send>
		if (err >= 0) {
   4675c:	2800      	cmp	r0, #0
   4675e:	daef      	bge.n	46740 <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   46760:	b13c      	cbz	r4, 46772 <bt_att_send+0x84>
   46762:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   46766:	b10b      	cbz	r3, 4676c <bt_att_send+0x7e>
   46768:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   4676c:	4620      	mov	r0, r4
   4676e:	461c      	mov	r4, r3
   46770:	e7f0      	b.n	46754 <bt_att_send+0x66>
		k_queue_prepend(&att->tx_queue._queue, buf);
   46772:	4629      	mov	r1, r5
   46774:	4630      	mov	r0, r6
   46776:	f001 ffa1 	bl	486bc <k_queue_prepend>
   4677a:	e7e1      	b.n	46740 <bt_att_send+0x52>

0004677c <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   4677c:	b510      	push	{r4, lr}
   4677e:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   46780:	f7ff fb5f 	bl	45e42 <att_get>
	if (!att) {
   46784:	b160      	cbz	r0, 467a0 <bt_att_req_send+0x24>
	parent->next = child;
   46786:	2300      	movs	r3, #0
   46788:	6023      	str	r3, [r4, #0]
	return list->tail;
   4678a:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   4678c:	b92b      	cbnz	r3, 4679a <bt_att_req_send+0x1e>
	list->head = node;
   4678e:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   46792:	f7ff fe32 	bl	463fa <att_req_send_process>

	return 0;
   46796:	2000      	movs	r0, #0
}
   46798:	bd10      	pop	{r4, pc}
	parent->next = child;
   4679a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   4679c:	6084      	str	r4, [r0, #8]
}
   4679e:	e7f8      	b.n	46792 <bt_att_req_send+0x16>
		return -ENOTCONN;
   467a0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   467a4:	e7f8      	b.n	46798 <bt_att_req_send+0x1c>

000467a6 <gatt_ccc_changed>:
{
   467a6:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   467a8:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   467aa:	895a      	ldrh	r2, [r3, #10]
   467ac:	428a      	cmp	r2, r1
   467ae:	d003      	beq.n	467b8 <gatt_ccc_changed+0x12>
		ccc->value = value;
   467b0:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   467b2:	68db      	ldr	r3, [r3, #12]
   467b4:	b103      	cbz	r3, 467b8 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   467b6:	4718      	bx	r3
}
   467b8:	4770      	bx	lr

000467ba <gatt_indicate_rsp>:
{
   467ba:	b510      	push	{r4, lr}
   467bc:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   467be:	68a3      	ldr	r3, [r4, #8]
{
   467c0:	460a      	mov	r2, r1
	if (params->func) {
   467c2:	b10b      	cbz	r3, 467c8 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   467c4:	4621      	mov	r1, r4
   467c6:	4798      	blx	r3
	params->_ref--;
   467c8:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   467ca:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   467cc:	3b01      	subs	r3, #1
   467ce:	b2db      	uxtb	r3, r3
   467d0:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   467d2:	b122      	cbz	r2, 467de <gatt_indicate_rsp+0x24>
   467d4:	b91b      	cbnz	r3, 467de <gatt_indicate_rsp+0x24>
		params->destroy(params);
   467d6:	4620      	mov	r0, r4
}
   467d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   467dc:	4710      	bx	r2
}
   467de:	bd10      	pop	{r4, pc}

000467e0 <match_uuid>:
	data->attr = attr;
   467e0:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   467e2:	8091      	strh	r1, [r2, #4]
}
   467e4:	2000      	movs	r0, #0
   467e6:	4770      	bx	lr

000467e8 <ccc_set_cb>:
}
   467e8:	2000      	movs	r0, #0
   467ea:	4770      	bx	lr

000467ec <atomic_get>:
   467ec:	f3bf 8f5b 	dmb	ish
   467f0:	6800      	ldr	r0, [r0, #0]
   467f2:	f3bf 8f5b 	dmb	ish
}
   467f6:	4770      	bx	lr

000467f8 <gen_hash_m>:
{
   467f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   467fa:	6807      	ldr	r7, [r0, #0]
   467fc:	783d      	ldrb	r5, [r7, #0]
{
   467fe:	b089      	sub	sp, #36	; 0x24
   46800:	4606      	mov	r6, r0
   46802:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   46804:	b9dd      	cbnz	r5, 4683e <gen_hash_m+0x46>
	switch (u16->val) {
   46806:	887b      	ldrh	r3, [r7, #2]
   46808:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   4680c:	d004      	beq.n	46818 <gen_hash_m+0x20>
   4680e:	d810      	bhi.n	46832 <gen_hash_m+0x3a>
   46810:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   46814:	2b03      	cmp	r3, #3
   46816:	d812      	bhi.n	4683e <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   46818:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   4681c:	2202      	movs	r2, #2
   4681e:	f10d 010a 	add.w	r1, sp, #10
   46822:	4620      	mov	r0, r4
   46824:	f7fd ffe5 	bl	447f2 <tc_cmac_update>
   46828:	b968      	cbnz	r0, 46846 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   4682a:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   4682e:	65a2      	str	r2, [r4, #88]	; 0x58
   46830:	e006      	b.n	46840 <gen_hash_m+0x48>
	switch (u16->val) {
   46832:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   46836:	33ff      	adds	r3, #255	; 0xff
   46838:	b29b      	uxth	r3, r3
   4683a:	2b04      	cmp	r3, #4
   4683c:	d91e      	bls.n	4687c <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   4683e:	2501      	movs	r5, #1
}
   46840:	4628      	mov	r0, r5
   46842:	b009      	add	sp, #36	; 0x24
   46844:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   46846:	887b      	ldrh	r3, [r7, #2]
   46848:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   4684c:	2202      	movs	r2, #2
   4684e:	f10d 010a 	add.w	r1, sp, #10
   46852:	4620      	mov	r0, r4
   46854:	f7fd ffcd 	bl	447f2 <tc_cmac_update>
   46858:	2800      	cmp	r0, #0
   4685a:	d0e6      	beq.n	4682a <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   4685c:	2000      	movs	r0, #0
   4685e:	9000      	str	r0, [sp, #0]
   46860:	aa03      	add	r2, sp, #12
   46862:	6877      	ldr	r7, [r6, #4]
   46864:	2313      	movs	r3, #19
   46866:	4631      	mov	r1, r6
   46868:	47b8      	blx	r7
		if (len < 0) {
   4686a:	1e02      	subs	r2, r0, #0
   4686c:	dbdf      	blt.n	4682e <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   4686e:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   46870:	4620      	mov	r0, r4
   46872:	f7fd ffbe 	bl	447f2 <tc_cmac_update>
   46876:	2800      	cmp	r0, #0
   46878:	d1e1      	bne.n	4683e <gen_hash_m+0x46>
   4687a:	e7d6      	b.n	4682a <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   4687c:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   46880:	2202      	movs	r2, #2
   46882:	f10d 010a 	add.w	r1, sp, #10
   46886:	4620      	mov	r0, r4
   46888:	f7fd ffb3 	bl	447f2 <tc_cmac_update>
   4688c:	2800      	cmp	r0, #0
   4688e:	d0cc      	beq.n	4682a <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   46890:	887b      	ldrh	r3, [r7, #2]
   46892:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   46896:	2202      	movs	r2, #2
   46898:	f10d 010a 	add.w	r1, sp, #10
   4689c:	e7e8      	b.n	46870 <gen_hash_m+0x78>

0004689e <atomic_or>:
{
   4689e:	b510      	push	{r4, lr}
   468a0:	4603      	mov	r3, r0
}
   468a2:	f3bf 8f5b 	dmb	ish
   468a6:	e853 0f00 	ldrex	r0, [r3]
   468aa:	ea40 0201 	orr.w	r2, r0, r1
   468ae:	e843 2400 	strex	r4, r2, [r3]
   468b2:	2c00      	cmp	r4, #0
   468b4:	d1f7      	bne.n	468a6 <atomic_or+0x8>
   468b6:	f3bf 8f5b 	dmb	ish
   468ba:	bd10      	pop	{r4, pc}

000468bc <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   468bc:	2207      	movs	r2, #7
   468be:	f7fe b900 	b.w	44ac2 <memcpy>

000468c2 <cf_write>:
{
   468c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   468c6:	461f      	mov	r7, r3
   468c8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   468cc:	2b01      	cmp	r3, #1
{
   468ce:	4606      	mov	r6, r0
   468d0:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   468d2:	d82e      	bhi.n	46932 <cf_write+0x70>
	if (offset + len > sizeof(cfg->data)) {
   468d4:	443b      	add	r3, r7
   468d6:	2b01      	cmp	r3, #1
   468d8:	463d      	mov	r5, r7
   468da:	dc2d      	bgt.n	46938 <cf_write+0x76>
	cfg = find_cf_cfg(conn);
   468dc:	f7e7 f8c4 	bl	2da68 <find_cf_cfg>
	if (!cfg) {
   468e0:	4604      	mov	r4, r0
   468e2:	b918      	cbnz	r0, 468ec <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   468e4:	f7e7 f8c0 	bl	2da68 <find_cf_cfg>
	if (!cfg) {
   468e8:	4604      	mov	r4, r0
   468ea:	b340      	cbz	r0, 4693e <cf_write+0x7c>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   468ec:	b197      	cbz	r7, 46914 <cf_write+0x52>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   468ee:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   468f0:	f898 2000 	ldrb.w	r2, [r8]
   468f4:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   468f6:	fa21 f003 	lsr.w	r0, r1, r3
   468fa:	07c7      	lsls	r7, r0, #31
   468fc:	d503      	bpl.n	46906 <cf_write+0x44>
		    !(value[i / 8] & BIT(i % 8))) {
   468fe:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   46902:	07c0      	lsls	r0, r0, #31
   46904:	d51e      	bpl.n	46944 <cf_write+0x82>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   46906:	3301      	adds	r3, #1
   46908:	2b03      	cmp	r3, #3
   4690a:	d1f4      	bne.n	468f6 <cf_write+0x34>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   4690c:	f002 0207 	and.w	r2, r2, #7
   46910:	4311      	orrs	r1, r2
   46912:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   46914:	f106 0188 	add.w	r1, r6, #136	; 0x88
   46918:	1c60      	adds	r0, r4, #1
   4691a:	f7ff ffcf 	bl	468bc <bt_addr_le_copy>
	cfg->id = conn->id;
   4691e:	4620      	mov	r0, r4
   46920:	7a33      	ldrb	r3, [r6, #8]
   46922:	f800 3b0c 	strb.w	r3, [r0], #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   46926:	2101      	movs	r1, #1
   46928:	f7ff ffb9 	bl	4689e <atomic_or>
}
   4692c:	4628      	mov	r0, r5
   4692e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   46932:	f06f 0506 	mvn.w	r5, #6
   46936:	e7f9      	b.n	4692c <cf_write+0x6a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   46938:	f06f 050c 	mvn.w	r5, #12
   4693c:	e7f6      	b.n	4692c <cf_write+0x6a>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   4693e:	f06f 0510 	mvn.w	r5, #16
   46942:	e7f3      	b.n	4692c <cf_write+0x6a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   46944:	f06f 0512 	mvn.w	r5, #18
   46948:	e7f0      	b.n	4692c <cf_write+0x6a>

0004694a <clear_ccc_cfg>:
{
   4694a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   4694c:	2500      	movs	r5, #0
{
   4694e:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   46950:	4669      	mov	r1, sp
   46952:	3001      	adds	r0, #1
   46954:	9500      	str	r5, [sp, #0]
   46956:	f8cd 5003 	str.w	r5, [sp, #3]
   4695a:	f7ff ffaf 	bl	468bc <bt_addr_le_copy>
	cfg->id = 0U;
   4695e:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   46960:	8125      	strh	r5, [r4, #8]
}
   46962:	b003      	add	sp, #12
   46964:	bd30      	pop	{r4, r5, pc}

00046966 <atomic_and>:
{
   46966:	b510      	push	{r4, lr}
   46968:	4603      	mov	r3, r0
}
   4696a:	f3bf 8f5b 	dmb	ish
   4696e:	e853 0f00 	ldrex	r0, [r3]
   46972:	ea00 0201 	and.w	r2, r0, r1
   46976:	e843 2400 	strex	r4, r2, [r3]
   4697a:	2c00      	cmp	r4, #0
   4697c:	d1f7      	bne.n	4696e <atomic_and+0x8>
   4697e:	f3bf 8f5b 	dmb	ish
   46982:	bd10      	pop	{r4, pc}

00046984 <clear_cf_cfg>:
{
   46984:	b537      	push	{r0, r1, r2, r4, r5, lr}
   46986:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   46988:	2500      	movs	r5, #0
   4698a:	4669      	mov	r1, sp
   4698c:	3001      	adds	r0, #1
   4698e:	9500      	str	r5, [sp, #0]
   46990:	f8cd 5003 	str.w	r5, [sp, #3]
   46994:	f7ff ff92 	bl	468bc <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   46998:	f104 0008 	add.w	r0, r4, #8
   4699c:	2201      	movs	r2, #1
   4699e:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   469a0:	340c      	adds	r4, #12
   469a2:	f7fe f899 	bl	44ad8 <memset>
   469a6:	f3bf 8f5b 	dmb	ish
   469aa:	e854 3f00 	ldrex	r3, [r4]
   469ae:	e844 5200 	strex	r2, r5, [r4]
   469b2:	2a00      	cmp	r2, #0
   469b4:	d1f9      	bne.n	469aa <clear_cf_cfg+0x26>
   469b6:	f3bf 8f5b 	dmb	ish
}
   469ba:	b003      	add	sp, #12
   469bc:	bd30      	pop	{r4, r5, pc}

000469be <read_appearance>:
{
   469be:	b513      	push	{r0, r1, r4, lr}
   469c0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   469c4:	4610      	mov	r0, r2
	if (offset > value_len) {
   469c6:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   469c8:	f240 32c1 	movw	r2, #961	; 0x3c1
   469cc:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   469d0:	d80d      	bhi.n	469ee <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   469d2:	f1c1 0402 	rsb	r4, r1, #2
   469d6:	429c      	cmp	r4, r3
   469d8:	bfa8      	it	ge
   469da:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   469dc:	f10d 0306 	add.w	r3, sp, #6
   469e0:	4622      	mov	r2, r4
   469e2:	4419      	add	r1, r3
   469e4:	f7fe f86d 	bl	44ac2 <memcpy>
}
   469e8:	4620      	mov	r0, r4
   469ea:	b002      	add	sp, #8
   469ec:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   469ee:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   469f2:	e7f9      	b.n	469e8 <read_appearance+0x2a>

000469f4 <read_name>:
{
   469f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   469f8:	4698      	mov	r8, r3
   469fa:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   469fe:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   46a00:	f7e4 feaa 	bl	2b758 <bt_get_name>
   46a04:	4607      	mov	r7, r0
				 strlen(name));
   46a06:	f7fe f825 	bl	44a54 <strlen>
	if (offset > value_len) {
   46a0a:	b283      	uxth	r3, r0
   46a0c:	42b3      	cmp	r3, r6
   46a0e:	d30c      	bcc.n	46a2a <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   46a10:	1b9c      	subs	r4, r3, r6
   46a12:	4544      	cmp	r4, r8
   46a14:	bfa8      	it	ge
   46a16:	4644      	movge	r4, r8
   46a18:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   46a1a:	4622      	mov	r2, r4
   46a1c:	19b9      	adds	r1, r7, r6
   46a1e:	4628      	mov	r0, r5
   46a20:	f7fe f84f 	bl	44ac2 <memcpy>
}
   46a24:	4620      	mov	r0, r4
   46a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   46a2a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   46a2e:	e7f9      	b.n	46a24 <read_name+0x30>

00046a30 <cf_read>:
{
   46a30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   46a32:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   46a34:	2300      	movs	r3, #0
{
   46a36:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   46a3a:	f88d 3004 	strb.w	r3, [sp, #4]
{
   46a3e:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   46a40:	f7e7 f812 	bl	2da68 <find_cf_cfg>
	if (cfg) {
   46a44:	b128      	cbz	r0, 46a52 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   46a46:	f100 0108 	add.w	r1, r0, #8
   46a4a:	2201      	movs	r2, #1
   46a4c:	a801      	add	r0, sp, #4
   46a4e:	f7fe f838 	bl	44ac2 <memcpy>
	if (offset > value_len) {
   46a52:	2e01      	cmp	r6, #1
   46a54:	d80d      	bhi.n	46a72 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   46a56:	f1c6 0401 	rsb	r4, r6, #1
   46a5a:	42bc      	cmp	r4, r7
   46a5c:	bfa8      	it	ge
   46a5e:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   46a60:	ab01      	add	r3, sp, #4
   46a62:	4622      	mov	r2, r4
   46a64:	1999      	adds	r1, r3, r6
   46a66:	4628      	mov	r0, r5
   46a68:	f7fe f82b 	bl	44ac2 <memcpy>
}
   46a6c:	4620      	mov	r0, r4
   46a6e:	b003      	add	sp, #12
   46a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   46a72:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   46a76:	e7f9      	b.n	46a6c <cf_read+0x3c>

00046a78 <bt_gatt_attr_read_service>:
{
   46a78:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   46a7a:	68c9      	ldr	r1, [r1, #12]
{
   46a7c:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   46a7e:	780a      	ldrb	r2, [r1, #0]
{
   46a80:	461c      	mov	r4, r3
   46a82:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   46a86:	b992      	cbnz	r2, 46aae <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   46a88:	884a      	ldrh	r2, [r1, #2]
   46a8a:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   46a8e:	2b02      	cmp	r3, #2
   46a90:	d818      	bhi.n	46ac4 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   46a92:	f1c3 0202 	rsb	r2, r3, #2
   46a96:	4294      	cmp	r4, r2
   46a98:	bfa8      	it	ge
   46a9a:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   46a9c:	4622      	mov	r2, r4
   46a9e:	f10d 0106 	add.w	r1, sp, #6
   46aa2:	4419      	add	r1, r3
   46aa4:	f7fe f80d 	bl	44ac2 <memcpy>
}
   46aa8:	4620      	mov	r0, r4
   46aaa:	b002      	add	sp, #8
   46aac:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   46aae:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   46ab0:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   46ab4:	d806      	bhi.n	46ac4 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   46ab6:	f1c3 0210 	rsb	r2, r3, #16
   46aba:	4294      	cmp	r4, r2
   46abc:	bfa8      	it	ge
   46abe:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   46ac0:	4622      	mov	r2, r4
   46ac2:	e7ee      	b.n	46aa2 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   46ac4:	f06f 0406 	mvn.w	r4, #6
   46ac8:	e7ee      	b.n	46aa8 <bt_gatt_attr_read_service+0x30>

00046aca <cf_set>:
{
   46aca:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   46ace:	4688      	mov	r8, r1
   46ad0:	4616      	mov	r6, r2
   46ad2:	461f      	mov	r7, r3
	if (!name) {
   46ad4:	4605      	mov	r5, r0
   46ad6:	b928      	cbnz	r0, 46ae4 <cf_set+0x1a>
		return -EINVAL;
   46ad8:	f06f 0415 	mvn.w	r4, #21
}
   46adc:	4620      	mov	r0, r4
   46ade:	b004      	add	sp, #16
   46ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   46ae4:	a902      	add	r1, sp, #8
   46ae6:	f7fe f8a7 	bl	44c38 <bt_settings_decode_key>
	if (err) {
   46aea:	4604      	mov	r4, r0
   46aec:	2800      	cmp	r0, #0
   46aee:	d1f3      	bne.n	46ad8 <cf_set+0xe>
	settings_name_next(name, &next);
   46af0:	a901      	add	r1, sp, #4
   46af2:	4628      	mov	r0, r5
   46af4:	f7fc fd14 	bl	43520 <settings_name_next>
	if (!next) {
   46af8:	9801      	ldr	r0, [sp, #4]
   46afa:	b9d0      	cbnz	r0, 46b32 <cf_set+0x68>
	cfg = find_cf_cfg_by_addr(id, &addr);
   46afc:	a902      	add	r1, sp, #8
   46afe:	2000      	movs	r0, #0
   46b00:	f7e7 f83a 	bl	2db78 <find_cf_cfg_by_addr>
	if (!cfg) {
   46b04:	4605      	mov	r5, r0
   46b06:	b948      	cbnz	r0, 46b1c <cf_set+0x52>
		cfg = find_cf_cfg(NULL);
   46b08:	f7e6 ffae 	bl	2da68 <find_cf_cfg>
		if (!cfg) {
   46b0c:	4605      	mov	r5, r0
   46b0e:	b1d8      	cbz	r0, 46b48 <cf_set+0x7e>
		cfg->id = id;
   46b10:	2300      	movs	r3, #0
   46b12:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   46b16:	a902      	add	r1, sp, #8
   46b18:	f7ff fed0 	bl	468bc <bt_addr_le_copy>
	if (len_rd) {
   46b1c:	f1b8 0f00 	cmp.w	r8, #0
   46b20:	d00e      	beq.n	46b40 <cf_set+0x76>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   46b22:	2201      	movs	r2, #1
   46b24:	f105 0108 	add.w	r1, r5, #8
   46b28:	4638      	mov	r0, r7
   46b2a:	47b0      	blx	r6
		if (len < 0) {
   46b2c:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   46b30:	e7d4      	b.n	46adc <cf_set+0x12>
		unsigned long next_id = strtoul(next, NULL, 10);
   46b32:	220a      	movs	r2, #10
   46b34:	4621      	mov	r1, r4
   46b36:	f7fd ff0c 	bl	44952 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   46b3a:	2800      	cmp	r0, #0
   46b3c:	d0de      	beq.n	46afc <cf_set+0x32>
   46b3e:	e7cb      	b.n	46ad8 <cf_set+0xe>
		clear_cf_cfg(cfg);
   46b40:	4628      	mov	r0, r5
   46b42:	f7ff ff1f 	bl	46984 <clear_cf_cfg>
   46b46:	e7c9      	b.n	46adc <cf_set+0x12>
			return -ENOMEM;
   46b48:	f06f 040b 	mvn.w	r4, #11
   46b4c:	e7c6      	b.n	46adc <cf_set+0x12>

00046b4e <ccc_find_cfg>:
{
   46b4e:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   46b50:	7803      	ldrb	r3, [r0, #0]
   46b52:	4293      	cmp	r3, r2
{
   46b54:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   46b56:	d106      	bne.n	46b66 <ccc_find_cfg+0x18>
	return memcmp(a, b, sizeof(*a));
   46b58:	2207      	movs	r2, #7
   46b5a:	3001      	adds	r0, #1
   46b5c:	f7fd ffa1 	bl	44aa2 <memcmp>
   46b60:	b908      	cbnz	r0, 46b66 <ccc_find_cfg+0x18>
			return &ccc->cfg[i];
   46b62:	4620      	mov	r0, r4
}
   46b64:	bd10      	pop	{r4, pc}
	return NULL;
   46b66:	2000      	movs	r0, #0
   46b68:	e7fc      	b.n	46b64 <ccc_find_cfg+0x16>

00046b6a <find_ccc_cfg>:
{
   46b6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   46b6c:	460c      	mov	r4, r1
						    &cfg->peer)) {
   46b6e:	1c4d      	adds	r5, r1, #1
		if (conn) {
   46b70:	b138      	cbz	r0, 46b82 <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   46b72:	7809      	ldrb	r1, [r1, #0]
   46b74:	462a      	mov	r2, r5
   46b76:	f7fe ffda 	bl	45b2e <bt_conn_is_peer_addr_le>
   46b7a:	b960      	cbnz	r0, 46b96 <find_ccc_cfg+0x2c>
	return NULL;
   46b7c:	2000      	movs	r0, #0
}
   46b7e:	b003      	add	sp, #12
   46b80:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   46b82:	9000      	str	r0, [sp, #0]
   46b84:	2207      	movs	r2, #7
   46b86:	f8cd 0003 	str.w	r0, [sp, #3]
   46b8a:	4669      	mov	r1, sp
   46b8c:	4628      	mov	r0, r5
   46b8e:	f7fd ff88 	bl	44aa2 <memcmp>
   46b92:	2800      	cmp	r0, #0
   46b94:	d1f2      	bne.n	46b7c <find_ccc_cfg+0x12>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   46b96:	4620      	mov	r0, r4
   46b98:	e7f1      	b.n	46b7e <find_ccc_cfg+0x14>

00046b9a <bt_gatt_attr_read_ccc>:
{
   46b9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   46b9c:	68c9      	ldr	r1, [r1, #12]
{
   46b9e:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   46ba2:	4615      	mov	r5, r2
   46ba4:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   46ba6:	f7ff ffe0 	bl	46b6a <find_ccc_cfg>
	if (cfg) {
   46baa:	b100      	cbz	r0, 46bae <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   46bac:	8900      	ldrh	r0, [r0, #8]
   46bae:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   46bb2:	2e02      	cmp	r6, #2
   46bb4:	d80e      	bhi.n	46bd4 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   46bb6:	f1c6 0402 	rsb	r4, r6, #2
   46bba:	42bc      	cmp	r4, r7
   46bbc:	bfa8      	it	ge
   46bbe:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   46bc0:	f10d 0306 	add.w	r3, sp, #6
   46bc4:	4622      	mov	r2, r4
   46bc6:	1999      	adds	r1, r3, r6
   46bc8:	4628      	mov	r0, r5
   46bca:	f7fd ff7a 	bl	44ac2 <memcpy>
}
   46bce:	4620      	mov	r0, r4
   46bd0:	b003      	add	sp, #12
   46bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   46bd4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   46bd8:	e7f9      	b.n	46bce <bt_gatt_attr_read_ccc+0x34>

00046bda <sc_save>:
{
   46bda:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   46bde:	4680      	mov	r8, r0
   46be0:	460f      	mov	r7, r1
   46be2:	4616      	mov	r6, r2
   46be4:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   46be6:	f7e7 f8d1 	bl	2dd8c <find_sc_cfg>
	if (!cfg) {
   46bea:	4604      	mov	r4, r0
   46bec:	b960      	cbnz	r0, 46c08 <sc_save+0x2e>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   46bee:	4669      	mov	r1, sp
   46bf0:	9000      	str	r0, [sp, #0]
   46bf2:	f8cd 0003 	str.w	r0, [sp, #3]
   46bf6:	f7e7 f8c9 	bl	2dd8c <find_sc_cfg>
		if (!cfg) {
   46bfa:	4604      	mov	r4, r0
   46bfc:	b1d0      	cbz	r0, 46c34 <sc_save+0x5a>
		cfg->id = id;
   46bfe:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   46c02:	4639      	mov	r1, r7
   46c04:	f7ff fe5a 	bl	468bc <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   46c08:	8922      	ldrh	r2, [r4, #8]
   46c0a:	8963      	ldrh	r3, [r4, #10]
   46c0c:	b972      	cbnz	r2, 46c2c <sc_save+0x52>
   46c0e:	b97b      	cbnz	r3, 46c30 <sc_save+0x56>
		cfg->data.start = start;
   46c10:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   46c12:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   46c14:	4621      	mov	r1, r4
   46c16:	f811 0b01 	ldrb.w	r0, [r1], #1
   46c1a:	f7fe fbe8 	bl	453ee <bt_addr_le_is_bonded>
   46c1e:	b148      	cbz	r0, 46c34 <sc_save+0x5a>
		sc_store(cfg);
   46c20:	4620      	mov	r0, r4
}
   46c22:	b002      	add	sp, #8
   46c24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   46c28:	f7e6 bf40 	b.w	2daac <sc_store>
	if (new_start >= *start && new_end <= *end) {
   46c2c:	4296      	cmp	r6, r2
   46c2e:	d304      	bcc.n	46c3a <sc_save+0x60>
   46c30:	42ab      	cmp	r3, r5
   46c32:	d3ee      	bcc.n	46c12 <sc_save+0x38>
}
   46c34:	b002      	add	sp, #8
   46c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (*end < new_end) {
   46c3a:	42ab      	cmp	r3, r5
		*start = new_start;
   46c3c:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   46c3e:	d2e9      	bcs.n	46c14 <sc_save+0x3a>
   46c40:	e7e7      	b.n	46c12 <sc_save+0x38>

00046c42 <sc_clear>:
{
   46c42:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   46c44:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   46c48:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   46c4a:	4631      	mov	r1, r6
   46c4c:	7a00      	ldrb	r0, [r0, #8]
   46c4e:	f7fe fbce 	bl	453ee <bt_addr_le_is_bonded>
   46c52:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   46c54:	4631      	mov	r1, r6
   46c56:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   46c58:	b11d      	cbz	r5, 46c62 <sc_clear+0x20>
}
   46c5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   46c5e:	f7e7 b8b7 	b.w	2ddd0 <bt_gatt_clear_sc>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   46c62:	f7e7 f893 	bl	2dd8c <find_sc_cfg>
		if (cfg) {
   46c66:	b128      	cbz	r0, 46c74 <sc_clear+0x32>
	memset(cfg, 0, sizeof(*cfg));
   46c68:	4629      	mov	r1, r5
   46c6a:	220c      	movs	r2, #12
}
   46c6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   46c70:	f7fd bf32 	b.w	44ad8 <memset>
}
   46c74:	bd70      	pop	{r4, r5, r6, pc}

00046c76 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   46c76:	2a02      	cmp	r2, #2
{
   46c78:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   46c7a:	d108      	bne.n	46c8e <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   46c7c:	2300      	movs	r3, #0
   46c7e:	f100 0188 	add.w	r1, r0, #136	; 0x88
   46c82:	461a      	mov	r2, r3
   46c84:	7a00      	ldrb	r0, [r0, #8]
   46c86:	f7ff ffa8 	bl	46bda <sc_save>
}
   46c8a:	2002      	movs	r0, #2
   46c8c:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   46c8e:	f7ff ffd8 	bl	46c42 <sc_clear>
   46c92:	e7fa      	b.n	46c8a <sc_ccc_cfg_write+0x14>

00046c94 <sc_set>:
{
   46c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   46c98:	460e      	mov	r6, r1
   46c9a:	b086      	sub	sp, #24
   46c9c:	4617      	mov	r7, r2
   46c9e:	4698      	mov	r8, r3
	if (!name) {
   46ca0:	4605      	mov	r5, r0
   46ca2:	b928      	cbnz	r0, 46cb0 <sc_set+0x1c>
		return -EINVAL;
   46ca4:	f06f 0415 	mvn.w	r4, #21
}
   46ca8:	4620      	mov	r0, r4
   46caa:	b006      	add	sp, #24
   46cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   46cb0:	a902      	add	r1, sp, #8
   46cb2:	f7fd ffc1 	bl	44c38 <bt_settings_decode_key>
	if (err) {
   46cb6:	4604      	mov	r4, r0
   46cb8:	2800      	cmp	r0, #0
   46cba:	d1f3      	bne.n	46ca4 <sc_set+0x10>
	settings_name_next(name, &next);
   46cbc:	a901      	add	r1, sp, #4
   46cbe:	4628      	mov	r0, r5
   46cc0:	f7fc fc2e 	bl	43520 <settings_name_next>
	if (!next) {
   46cc4:	9801      	ldr	r0, [sp, #4]
   46cc6:	b998      	cbnz	r0, 46cf0 <sc_set+0x5c>
	cfg = find_sc_cfg(id, &addr);
   46cc8:	a902      	add	r1, sp, #8
   46cca:	2000      	movs	r0, #0
   46ccc:	f7e7 f85e 	bl	2dd8c <find_sc_cfg>
	if (!cfg && len_rd) {
   46cd0:	4605      	mov	r5, r0
   46cd2:	bb08      	cbnz	r0, 46d18 <sc_set+0x84>
   46cd4:	2e00      	cmp	r6, #0
   46cd6:	d0e7      	beq.n	46ca8 <sc_set+0x14>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   46cd8:	a904      	add	r1, sp, #16
   46cda:	9004      	str	r0, [sp, #16]
   46cdc:	4604      	mov	r4, r0
   46cde:	f8cd 0013 	str.w	r0, [sp, #19]
   46ce2:	f7e7 f853 	bl	2dd8c <find_sc_cfg>
		if (!cfg) {
   46ce6:	4605      	mov	r5, r0
   46ce8:	b948      	cbnz	r0, 46cfe <sc_set+0x6a>
			return -ENOMEM;
   46cea:	f06f 040b 	mvn.w	r4, #11
   46cee:	e7db      	b.n	46ca8 <sc_set+0x14>
		unsigned long next_id = strtoul(next, NULL, 10);
   46cf0:	220a      	movs	r2, #10
   46cf2:	4621      	mov	r1, r4
   46cf4:	f7fd fe2d 	bl	44952 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   46cf8:	2800      	cmp	r0, #0
   46cfa:	d0e5      	beq.n	46cc8 <sc_set+0x34>
   46cfc:	e7d2      	b.n	46ca4 <sc_set+0x10>
		cfg->id = id;
   46cfe:	f800 4b01 	strb.w	r4, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   46d02:	a902      	add	r1, sp, #8
   46d04:	f7ff fdda 	bl	468bc <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   46d08:	2204      	movs	r2, #4
   46d0a:	f105 0108 	add.w	r1, r5, #8
   46d0e:	4640      	mov	r0, r8
   46d10:	47b8      	blx	r7
		if (len < 0) {
   46d12:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   46d16:	e7c7      	b.n	46ca8 <sc_set+0x14>
	if (len_rd) {
   46d18:	2e00      	cmp	r6, #0
   46d1a:	d1f5      	bne.n	46d08 <sc_set+0x74>
		memset(cfg, 0, sizeof(*cfg));
   46d1c:	220c      	movs	r2, #12
   46d1e:	4631      	mov	r1, r6
   46d20:	f7fd feda 	bl	44ad8 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   46d24:	e7c0      	b.n	46ca8 <sc_set+0x14>

00046d26 <sc_restore_rsp>:
{
   46d26:	b538      	push	{r3, r4, r5, lr}
   46d28:	4604      	mov	r4, r0
   46d2a:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   46d2c:	f7e6 fe9c 	bl	2da68 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   46d30:	b130      	cbz	r0, 46d40 <sc_restore_rsp+0x1a>
   46d32:	7a03      	ldrb	r3, [r0, #8]
   46d34:	07db      	lsls	r3, r3, #31
   46d36:	d503      	bpl.n	46d40 <sc_restore_rsp+0x1a>
   46d38:	2101      	movs	r1, #1
   46d3a:	300c      	adds	r0, #12
   46d3c:	f7ff fdaf 	bl	4689e <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   46d40:	b985      	cbnz	r5, 46d64 <sc_restore_rsp+0x3e>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   46d42:	7a20      	ldrb	r0, [r4, #8]
   46d44:	f104 0188 	add.w	r1, r4, #136	; 0x88
   46d48:	f7e7 f820 	bl	2dd8c <find_sc_cfg>
		if (sc_cfg) {
   46d4c:	4604      	mov	r4, r0
   46d4e:	b148      	cbz	r0, 46d64 <sc_restore_rsp+0x3e>
	memset(&cfg->data, 0, sizeof(cfg->data));
   46d50:	4629      	mov	r1, r5
   46d52:	2204      	movs	r2, #4
   46d54:	3008      	adds	r0, #8
   46d56:	f7fd febf 	bl	44ad8 <memset>
		sc_store(cfg);
   46d5a:	4620      	mov	r0, r4
}
   46d5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   46d60:	f7e6 bea4 	b.w	2daac <sc_store>
}
   46d64:	bd38      	pop	{r3, r4, r5, pc}

00046d66 <bt_gatt_attr_read>:
{
   46d66:	b510      	push	{r4, lr}
   46d68:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   46d6c:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   46d70:	42a1      	cmp	r1, r4
{
   46d72:	4610      	mov	r0, r2
	if (offset > value_len) {
   46d74:	d80b      	bhi.n	46d8e <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   46d76:	1a64      	subs	r4, r4, r1
   46d78:	429c      	cmp	r4, r3
   46d7a:	bfa8      	it	ge
   46d7c:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   46d7e:	9b03      	ldr	r3, [sp, #12]
   46d80:	b2a4      	uxth	r4, r4
   46d82:	4622      	mov	r2, r4
   46d84:	4419      	add	r1, r3
   46d86:	f7fd fe9c 	bl	44ac2 <memcpy>
}
   46d8a:	4620      	mov	r0, r4
   46d8c:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   46d8e:	f06f 0406 	mvn.w	r4, #6
   46d92:	e7fa      	b.n	46d8a <bt_gatt_attr_read+0x24>

00046d94 <bt_gatt_attr_value_handle>:
{
   46d94:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   46d96:	4604      	mov	r4, r0
   46d98:	b910      	cbnz	r0, 46da0 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   46d9a:	2000      	movs	r0, #0
}
   46d9c:	b002      	add	sp, #8
   46d9e:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   46da0:	2300      	movs	r3, #0
   46da2:	f88d 3004 	strb.w	r3, [sp, #4]
   46da6:	6800      	ldr	r0, [r0, #0]
   46da8:	f642 0303 	movw	r3, #10243	; 0x2803
   46dac:	a901      	add	r1, sp, #4
   46dae:	f8ad 3006 	strh.w	r3, [sp, #6]
   46db2:	f7fd ff67 	bl	44c84 <bt_uuid_cmp>
   46db6:	2800      	cmp	r0, #0
   46db8:	d1ef      	bne.n	46d9a <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   46dba:	68e3      	ldr	r3, [r4, #12]
   46dbc:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   46dbe:	2800      	cmp	r0, #0
   46dc0:	d1ec      	bne.n	46d9c <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   46dc2:	4620      	mov	r0, r4
   46dc4:	f7e7 f8fc 	bl	2dfc0 <bt_gatt_attr_get_handle>
   46dc8:	3001      	adds	r0, #1
   46dca:	b280      	uxth	r0, r0
	return handle;
   46dcc:	e7e6      	b.n	46d9c <bt_gatt_attr_value_handle+0x8>

00046dce <bt_gatt_attr_read_chrc>:
{
   46dce:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   46dd0:	68cc      	ldr	r4, [r1, #12]
{
   46dd2:	b087      	sub	sp, #28
   46dd4:	4608      	mov	r0, r1
   46dd6:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   46dd8:	79a3      	ldrb	r3, [r4, #6]
   46dda:	f88d 3004 	strb.w	r3, [sp, #4]
{
   46dde:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   46de2:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   46de4:	f7ff ffd6 	bl	46d94 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   46de8:	6821      	ldr	r1, [r4, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   46dea:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   46dee:	780b      	ldrb	r3, [r1, #0]
   46df0:	b99b      	cbnz	r3, 46e1a <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   46df2:	884b      	ldrh	r3, [r1, #2]
   46df4:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   46df8:	2405      	movs	r4, #5
	if (offset > value_len) {
   46dfa:	42b4      	cmp	r4, r6
   46dfc:	d315      	bcc.n	46e2a <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   46dfe:	1ba4      	subs	r4, r4, r6
   46e00:	42bc      	cmp	r4, r7
   46e02:	bfa8      	it	ge
   46e04:	463c      	movge	r4, r7
   46e06:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   46e08:	ab01      	add	r3, sp, #4
   46e0a:	4622      	mov	r2, r4
   46e0c:	1999      	adds	r1, r3, r6
   46e0e:	4628      	mov	r0, r5
   46e10:	f7fd fe57 	bl	44ac2 <memcpy>
}
   46e14:	4620      	mov	r0, r4
   46e16:	b007      	add	sp, #28
   46e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   46e1a:	2210      	movs	r2, #16
   46e1c:	3101      	adds	r1, #1
   46e1e:	f10d 0007 	add.w	r0, sp, #7
   46e22:	f7fd fe4e 	bl	44ac2 <memcpy>
		value_len += 16U;
   46e26:	2413      	movs	r4, #19
   46e28:	e7e7      	b.n	46dfa <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   46e2a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   46e2e:	e7f1      	b.n	46e14 <bt_gatt_attr_read_chrc+0x46>

00046e30 <bt_gatt_foreach_attr>:
{
   46e30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   46e32:	e9cd 2301 	strd	r2, r3, [sp, #4]
   46e36:	2300      	movs	r3, #0
   46e38:	9300      	str	r3, [sp, #0]
   46e3a:	461a      	mov	r2, r3
   46e3c:	f7e7 f8f0 	bl	2e020 <bt_gatt_foreach_attr_type>
}
   46e40:	b005      	add	sp, #20
   46e42:	f85d fb04 	ldr.w	pc, [sp], #4

00046e46 <bt_gatt_check_perm>:
{
   46e46:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   46e48:	07d4      	lsls	r4, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   46e4a:	7c8b      	ldrb	r3, [r1, #18]
{
   46e4c:	4605      	mov	r5, r0
	if ((mask & BT_GATT_PERM_READ) &&
   46e4e:	d504      	bpl.n	46e5a <bt_gatt_check_perm+0x14>
   46e50:	f013 0f15 	tst.w	r3, #21
   46e54:	d01e      	beq.n	46e94 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   46e56:	6848      	ldr	r0, [r1, #4]
   46e58:	b1e0      	cbz	r0, 46e94 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   46e5a:	0790      	lsls	r0, r2, #30
   46e5c:	d504      	bpl.n	46e68 <bt_gatt_check_perm+0x22>
   46e5e:	f013 0f2a 	tst.w	r3, #42	; 0x2a
   46e62:	d019      	beq.n	46e98 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   46e64:	6889      	ldr	r1, [r1, #8]
   46e66:	b1b9      	cbz	r1, 46e98 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   46e68:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   46e6c:	f014 0f30 	tst.w	r4, #48	; 0x30
   46e70:	d103      	bne.n	46e7a <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   46e72:	f014 000c 	ands.w	r0, r4, #12
   46e76:	d107      	bne.n	46e88 <bt_gatt_check_perm+0x42>
}
   46e78:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   46e7a:	4628      	mov	r0, r5
   46e7c:	f7fe fe55 	bl	45b2a <bt_conn_get_security>
   46e80:	2802      	cmp	r0, #2
   46e82:	d8f6      	bhi.n	46e72 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   46e84:	2005      	movs	r0, #5
   46e86:	e7f7      	b.n	46e78 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   46e88:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   46e8a:	2b00      	cmp	r3, #0
   46e8c:	bf14      	ite	ne
   46e8e:	2000      	movne	r0, #0
   46e90:	200f      	moveq	r0, #15
   46e92:	e7f1      	b.n	46e78 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   46e94:	2002      	movs	r0, #2
   46e96:	e7ef      	b.n	46e78 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   46e98:	2003      	movs	r0, #3
   46e9a:	e7ed      	b.n	46e78 <bt_gatt_check_perm+0x32>

00046e9c <gatt_notify>:
{
   46e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   46ea0:	4614      	mov	r4, r2
   46ea2:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   46ea4:	2214      	movs	r2, #20
   46ea6:	6861      	ldr	r1, [r4, #4]
{
   46ea8:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   46eaa:	f7ff ffcc 	bl	46e46 <bt_gatt_check_perm>
   46eae:	bb08      	cbnz	r0, 46ef4 <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   46eb0:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   46eb2:	211b      	movs	r1, #27
   46eb4:	3202      	adds	r2, #2
   46eb6:	4638      	mov	r0, r7
   46eb8:	f7ff fb5a 	bl	46570 <bt_att_create_pdu>
	if (!buf) {
   46ebc:	4605      	mov	r5, r0
   46ebe:	b1e8      	cbz	r0, 46efc <gatt_notify+0x60>
   46ec0:	f100 0908 	add.w	r9, r0, #8
   46ec4:	2102      	movs	r1, #2
   46ec6:	4648      	mov	r0, r9
   46ec8:	f000 fd2e 	bl	47928 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   46ecc:	4606      	mov	r6, r0
   46ece:	89a1      	ldrh	r1, [r4, #12]
   46ed0:	f826 8b02 	strh.w	r8, [r6], #2
   46ed4:	4648      	mov	r0, r9
   46ed6:	f000 fd27 	bl	47928 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   46eda:	89a2      	ldrh	r2, [r4, #12]
   46edc:	68a1      	ldr	r1, [r4, #8]
   46ede:	4630      	mov	r0, r6
   46ee0:	f7fd fdef 	bl	44ac2 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   46ee4:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   46ee8:	4629      	mov	r1, r5
   46eea:	4638      	mov	r0, r7
}
   46eec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   46ef0:	f7ff bbfd 	b.w	466ee <bt_att_send>
		return -EPERM;
   46ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   46ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   46efc:	f06f 000b 	mvn.w	r0, #11
   46f00:	e7fa      	b.n	46ef8 <gatt_notify+0x5c>

00046f02 <bt_gatt_change_aware>:
{
   46f02:	b570      	push	{r4, r5, r6, lr}
   46f04:	460e      	mov	r6, r1
	cfg = find_cf_cfg(conn);
   46f06:	f7e6 fdaf 	bl	2da68 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   46f0a:	b1c8      	cbz	r0, 46f40 <bt_gatt_change_aware+0x3e>
   46f0c:	7a03      	ldrb	r3, [r0, #8]
   46f0e:	07da      	lsls	r2, r3, #31
   46f10:	d516      	bpl.n	46f40 <bt_gatt_change_aware+0x3e>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   46f12:	f100 040c 	add.w	r4, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   46f16:	4620      	mov	r0, r4
   46f18:	f7ff fc68 	bl	467ec <atomic_get>
   46f1c:	f010 0501 	ands.w	r5, r0, #1
   46f20:	d10e      	bne.n	46f40 <bt_gatt_change_aware+0x3e>
	if (!req) {
   46f22:	b176      	cbz	r6, 46f42 <bt_gatt_change_aware+0x40>
   46f24:	4620      	mov	r0, r4
   46f26:	f7ff fc61 	bl	467ec <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   46f2a:	0783      	lsls	r3, r0, #30
   46f2c:	d50b      	bpl.n	46f46 <bt_gatt_change_aware+0x44>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   46f2e:	f06f 0102 	mvn.w	r1, #2
   46f32:	4620      	mov	r0, r4
   46f34:	f7ff fd17 	bl	46966 <atomic_and>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   46f38:	2101      	movs	r1, #1
   46f3a:	4620      	mov	r0, r4
   46f3c:	f7ff fcaf 	bl	4689e <atomic_or>
		return true;
   46f40:	2501      	movs	r5, #1
}
   46f42:	4628      	mov	r0, r5
   46f44:	bd70      	pop	{r4, r5, r6, pc}
   46f46:	2102      	movs	r1, #2
   46f48:	4620      	mov	r0, r4
   46f4a:	f7ff fca8 	bl	4689e <atomic_or>
}
   46f4e:	e7f8      	b.n	46f42 <bt_gatt_change_aware+0x40>

00046f50 <ccc_delayed_store>:
{
   46f50:	b570      	push	{r4, r5, r6, lr}
		struct bt_conn *conn = ccc_store->conn_list[i];
   46f52:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   46f56:	4605      	mov	r5, r0
		if (!conn) {
   46f58:	b184      	cbz	r4, 46f7c <ccc_delayed_store+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   46f5a:	f104 0688 	add.w	r6, r4, #136	; 0x88
   46f5e:	7a20      	ldrb	r0, [r4, #8]
   46f60:	4631      	mov	r1, r6
   46f62:	f7fe fa44 	bl	453ee <bt_addr_le_is_bonded>
   46f66:	b148      	cbz	r0, 46f7c <ccc_delayed_store+0x2c>
			ccc_store->conn_list[i] = NULL;
   46f68:	2300      	movs	r3, #0
   46f6a:	f845 3c08 	str.w	r3, [r5, #-8]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   46f6e:	7a20      	ldrb	r0, [r4, #8]
   46f70:	4631      	mov	r1, r6
   46f72:	f7e7 fc7d 	bl	2e870 <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   46f76:	4620      	mov	r0, r4
   46f78:	f7fe fd43 	bl	45a02 <bt_conn_unref>
}
   46f7c:	bd70      	pop	{r4, r5, r6, pc}

00046f7e <sys_memcpy_swap>:
	psrc += length - 1;
   46f7e:	1e53      	subs	r3, r2, #1
   46f80:	4419      	add	r1, r3
	for (; length > 0; length--) {
   46f82:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   46f84:	f811 3901 	ldrb.w	r3, [r1], #-1
   46f88:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   46f8c:	4290      	cmp	r0, r2
   46f8e:	d1f9      	bne.n	46f84 <sys_memcpy_swap+0x6>
}
   46f90:	4770      	bx	lr

00046f92 <smp_encrypt_info>:
}
   46f92:	2007      	movs	r0, #7
   46f94:	4770      	bx	lr

00046f96 <smp_chan_get>:
{
   46f96:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   46f98:	2106      	movs	r1, #6
   46f9a:	f7fe ff01 	bl	45da0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   46f9e:	b100      	cbz	r0, 46fa2 <smp_chan_get+0xc>
	return CONTAINER_OF(chan, struct bt_smp, chan);
   46fa0:	38f0      	subs	r0, #240	; 0xf0
}
   46fa2:	bd08      	pop	{r3, pc}

00046fa4 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   46fa4:	2301      	movs	r3, #1
   46fa6:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   46fa8:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   46faa:	f3bf 8f5b 	dmb	ish
   46fae:	e850 2f00 	ldrex	r2, [r0]
   46fb2:	401a      	ands	r2, r3
   46fb4:	e840 2100 	strex	r1, r2, [r0]
   46fb8:	2900      	cmp	r1, #0
   46fba:	d1f8      	bne.n	46fae <atomic_clear_bit+0xa>
   46fbc:	f3bf 8f5b 	dmb	ish
}
   46fc0:	4770      	bx	lr

00046fc2 <bt_smp_aes_cmac>:
{
   46fc2:	b570      	push	{r4, r5, r6, lr}
   46fc4:	b0c2      	sub	sp, #264	; 0x108
   46fc6:	460d      	mov	r5, r1
   46fc8:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   46fca:	4601      	mov	r1, r0
   46fcc:	aa16      	add	r2, sp, #88	; 0x58
   46fce:	4668      	mov	r0, sp
{
   46fd0:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   46fd2:	f7fd fbe3 	bl	4479c <tc_cmac_setup>
   46fd6:	b918      	cbnz	r0, 46fe0 <bt_smp_aes_cmac+0x1e>
		return -EIO;
   46fd8:	f06f 0004 	mvn.w	r0, #4
}
   46fdc:	b042      	add	sp, #264	; 0x108
   46fde:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   46fe0:	4632      	mov	r2, r6
   46fe2:	4629      	mov	r1, r5
   46fe4:	4668      	mov	r0, sp
   46fe6:	f7fd fc04 	bl	447f2 <tc_cmac_update>
   46fea:	2800      	cmp	r0, #0
   46fec:	d0f4      	beq.n	46fd8 <bt_smp_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   46fee:	4669      	mov	r1, sp
   46ff0:	4620      	mov	r0, r4
   46ff2:	f7fd fc68 	bl	448c6 <tc_cmac_final>
   46ff6:	2800      	cmp	r0, #0
   46ff8:	d0ee      	beq.n	46fd8 <bt_smp_aes_cmac+0x16>
	return 0;
   46ffa:	2000      	movs	r0, #0
   46ffc:	e7ee      	b.n	46fdc <bt_smp_aes_cmac+0x1a>

00046ffe <smp_security_request>:
static uint8_t smp_security_request(struct bt_smp *smp, struct net_buf *buf)
   46ffe:	2007      	movs	r0, #7
   47000:	4770      	bx	lr

00047002 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   47002:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   47004:	2300      	movs	r3, #0
   47006:	9300      	str	r3, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   47008:	4604      	mov	r4, r0
   4700a:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   4700c:	460a      	mov	r2, r1
   4700e:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
   47012:	2106      	movs	r1, #6
   47014:	f7fe fe6f 	bl	45cf6 <bt_l2cap_send_cb>
   47018:	b128      	cbz	r0, 47026 <smp_send.constprop.0+0x24>
		net_buf_unref(buf);
   4701a:	4628      	mov	r0, r5
}
   4701c:	b003      	add	sp, #12
   4701e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   47022:	f7f6 b841 	b.w	3d0a8 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   47026:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   4702a:	2300      	movs	r3, #0
   4702c:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
}
   47030:	b003      	add	sp, #12
   47032:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   47036:	f7fa bcb5 	b.w	419a4 <k_work_reschedule>

0004703a <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   4703a:	b510      	push	{r4, lr}
   4703c:	1e43      	subs	r3, r0, #1
   4703e:	f100 0210 	add.w	r2, r0, #16
   47042:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   47044:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   47048:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   4704c:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   4704e:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   47050:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   47052:	d1f7      	bne.n	47044 <sys_mem_swap.constprop.0+0xa>
	}
}
   47054:	bd10      	pop	{r4, pc}

00047056 <smp_f6>:
{
   47056:	b5f0      	push	{r4, r5, r6, r7, lr}
   47058:	b097      	sub	sp, #92	; 0x5c
   4705a:	4605      	mov	r5, r0
   4705c:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   4705e:	a805      	add	r0, sp, #20
   47060:	2210      	movs	r2, #16
{
   47062:	461c      	mov	r4, r3
   47064:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   47066:	f7ff ff8a 	bl	46f7e <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   4706a:	2210      	movs	r2, #16
   4706c:	4631      	mov	r1, r6
   4706e:	a809      	add	r0, sp, #36	; 0x24
   47070:	f7ff ff85 	bl	46f7e <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   47074:	4621      	mov	r1, r4
   47076:	2210      	movs	r2, #16
   47078:	a80d      	add	r0, sp, #52	; 0x34
   4707a:	f7ff ff80 	bl	46f7e <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   4707e:	991c      	ldr	r1, [sp, #112]	; 0x70
   47080:	2203      	movs	r2, #3
   47082:	a811      	add	r0, sp, #68	; 0x44
   47084:	f7ff ff7b 	bl	46f7e <sys_memcpy_swap>
	m[51] = a1->type;
   47088:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   4708a:	f814 3b01 	ldrb.w	r3, [r4], #1
   4708e:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   47092:	4621      	mov	r1, r4
   47094:	2206      	movs	r2, #6
   47096:	a812      	add	r0, sp, #72	; 0x48
   47098:	f7fd fd13 	bl	44ac2 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   4709c:	4621      	mov	r1, r4
   4709e:	2206      	movs	r2, #6
   470a0:	a812      	add	r0, sp, #72	; 0x48
   470a2:	f7ff ff6c 	bl	46f7e <sys_memcpy_swap>
	m[58] = a2->type;
   470a6:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   470a8:	f814 3b01 	ldrb.w	r3, [r4], #1
   470ac:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   470b0:	4621      	mov	r1, r4
   470b2:	2206      	movs	r2, #6
   470b4:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   470b8:	f7fd fd03 	bl	44ac2 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   470bc:	4621      	mov	r1, r4
   470be:	2206      	movs	r2, #6
   470c0:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   470c4:	f7ff ff5b 	bl	46f7e <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   470c8:	2210      	movs	r2, #16
   470ca:	4629      	mov	r1, r5
   470cc:	a801      	add	r0, sp, #4
   470ce:	f7ff ff56 	bl	46f7e <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   470d2:	463b      	mov	r3, r7
   470d4:	2241      	movs	r2, #65	; 0x41
   470d6:	a905      	add	r1, sp, #20
   470d8:	a801      	add	r0, sp, #4
   470da:	f7ff ff72 	bl	46fc2 <bt_smp_aes_cmac>
	if (err) {
   470de:	4604      	mov	r4, r0
   470e0:	b910      	cbnz	r0, 470e8 <smp_f6+0x92>
	sys_mem_swap(check, 16);
   470e2:	4638      	mov	r0, r7
   470e4:	f7ff ffa9 	bl	4703a <sys_mem_swap.constprop.0>
}
   470e8:	4620      	mov	r0, r4
   470ea:	b017      	add	sp, #92	; 0x5c
   470ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

000470ee <smp_f4>:
{
   470ee:	b5f0      	push	{r4, r5, r6, r7, lr}
   470f0:	b097      	sub	sp, #92	; 0x5c
   470f2:	4614      	mov	r4, r2
   470f4:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   470f6:	2220      	movs	r2, #32
   470f8:	4601      	mov	r1, r0
   470fa:	a805      	add	r0, sp, #20
{
   470fc:	461d      	mov	r5, r3
   470fe:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   47100:	f7ff ff3d 	bl	46f7e <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   47104:	2220      	movs	r2, #32
   47106:	4631      	mov	r1, r6
   47108:	a80d      	add	r0, sp, #52	; 0x34
   4710a:	f7ff ff38 	bl	46f7e <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   4710e:	4621      	mov	r1, r4
   47110:	2210      	movs	r2, #16
   47112:	a801      	add	r0, sp, #4
	m[64] = z;
   47114:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   47118:	f7ff ff31 	bl	46f7e <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   4711c:	463b      	mov	r3, r7
   4711e:	2241      	movs	r2, #65	; 0x41
   47120:	a905      	add	r1, sp, #20
   47122:	a801      	add	r0, sp, #4
   47124:	f7ff ff4d 	bl	46fc2 <bt_smp_aes_cmac>
	if (err) {
   47128:	4604      	mov	r4, r0
   4712a:	b910      	cbnz	r0, 47132 <smp_f4+0x44>
	sys_mem_swap(res, 16);
   4712c:	4638      	mov	r0, r7
   4712e:	f7ff ff84 	bl	4703a <sys_mem_swap.constprop.0>
}
   47132:	4620      	mov	r0, r4
   47134:	b017      	add	sp, #92	; 0x5c
   47136:	bdf0      	pop	{r4, r5, r6, r7, pc}

00047138 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   47138:	2301      	movs	r3, #1
   4713a:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   4713c:	f3bf 8f5b 	dmb	ish
   47140:	e850 2f00 	ldrex	r2, [r0]
   47144:	431a      	orrs	r2, r3
   47146:	e840 2100 	strex	r1, r2, [r0]
   4714a:	2900      	cmp	r1, #0
   4714c:	d1f8      	bne.n	47140 <atomic_set_bit+0x8>
   4714e:	f3bf 8f5b 	dmb	ish
}
   47152:	4770      	bx	lr

00047154 <smp_keypress_notif>:
{
   47154:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   47156:	210e      	movs	r1, #14
   47158:	f7ff ffee 	bl	47138 <atomic_set_bit>
}
   4715c:	2000      	movs	r0, #0
   4715e:	bd08      	pop	{r3, pc}

00047160 <smp_central_ident>:
static uint8_t smp_central_ident(struct bt_smp *smp, struct net_buf *buf)
   47160:	2007      	movs	r0, #7
   47162:	4770      	bx	lr

00047164 <smp_pairing_rsp>:
static uint8_t smp_pairing_rsp(struct bt_smp *smp, struct net_buf *buf)
   47164:	2007      	movs	r0, #7
   47166:	4770      	bx	lr

00047168 <smp_signing_info>:
static uint8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
   47168:	2007      	movs	r0, #7
   4716a:	4770      	bx	lr

0004716c <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4716c:	f3bf 8f5b 	dmb	ish
   47170:	6800      	ldr	r0, [r0, #0]
   47172:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   47176:	4108      	asrs	r0, r1
}
   47178:	f000 0001 	and.w	r0, r0, #1
   4717c:	4770      	bx	lr

0004717e <update_keys_check>:
{
   4717e:	b510      	push	{r4, lr}
   47180:	4603      	mov	r3, r0
	if (!keys ||
   47182:	b1d9      	cbz	r1, 471bc <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   47184:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   47186:	f010 0f24 	tst.w	r0, #36	; 0x24
   4718a:	d017      	beq.n	471bc <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   4718c:	7d1a      	ldrb	r2, [r3, #20]
   4718e:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   47190:	7b09      	ldrb	r1, [r1, #12]
   47192:	42a2      	cmp	r2, r4
   47194:	bf28      	it	cs
   47196:	4622      	movcs	r2, r4
   47198:	4291      	cmp	r1, r2
   4719a:	d901      	bls.n	471a0 <update_keys_check+0x22>
		return false;
   4719c:	2000      	movs	r0, #0
}
   4719e:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   471a0:	0682      	lsls	r2, r0, #26
   471a2:	d404      	bmi.n	471ae <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   471a4:	7a18      	ldrb	r0, [r3, #8]
   471a6:	3800      	subs	r0, #0
   471a8:	bf18      	it	ne
   471aa:	2001      	movne	r0, #1
   471ac:	e7f7      	b.n	4719e <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   471ae:	2105      	movs	r1, #5
   471b0:	1d18      	adds	r0, r3, #4
   471b2:	f7ff ffdb 	bl	4716c <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   471b6:	2800      	cmp	r0, #0
   471b8:	d1f4      	bne.n	471a4 <update_keys_check+0x26>
   471ba:	e7ef      	b.n	4719c <update_keys_check+0x1e>
	return true;
   471bc:	2001      	movs	r0, #1
   471be:	e7ee      	b.n	4719e <update_keys_check+0x20>

000471c0 <smp_ident_info>:
{
   471c0:	b538      	push	{r3, r4, r5, lr}
   471c2:	4604      	mov	r4, r0
   471c4:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   471c6:	3004      	adds	r0, #4
   471c8:	210d      	movs	r1, #13
   471ca:	f7ff ffcf 	bl	4716c <atomic_test_bit>
   471ce:	b170      	cbz	r0, 471ee <smp_ident_info+0x2e>
		struct bt_smp_ident_info *req = (void *)buf->data;
   471d0:	689d      	ldr	r5, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   471d2:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   471d6:	2002      	movs	r0, #2
   471d8:	7a19      	ldrb	r1, [r3, #8]
   471da:	f103 0288 	add.w	r2, r3, #136	; 0x88
   471de:	f000 faeb 	bl	477b8 <bt_keys_get_type>
		if (!keys) {
   471e2:	b150      	cbz	r0, 471fa <smp_ident_info+0x3a>
		memcpy(keys->irk.val, req->irk, 16);
   471e4:	2210      	movs	r2, #16
   471e6:	4629      	mov	r1, r5
   471e8:	302a      	adds	r0, #42	; 0x2a
   471ea:	f7fd fc6a 	bl	44ac2 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   471ee:	4620      	mov	r0, r4
   471f0:	2109      	movs	r1, #9
   471f2:	f7ff ffa1 	bl	47138 <atomic_set_bit>
	return 0;
   471f6:	2000      	movs	r0, #0
}
   471f8:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   471fa:	2008      	movs	r0, #8
   471fc:	e7fc      	b.n	471f8 <smp_ident_info+0x38>

000471fe <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   471fe:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   47200:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   47202:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   47204:	4628      	mov	r0, r5
   47206:	2104      	movs	r1, #4
   47208:	f7ff ffb0 	bl	4716c <atomic_test_bit>
   4720c:	b168      	cbz	r0, 4722a <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   4720e:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   47210:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   47212:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   47214:	4608      	mov	r0, r1
   47216:	f7fe fd6b 	bl	45cf0 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   4721a:	4604      	mov	r4, r0
   4721c:	b940      	cbnz	r0, 47230 <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   4721e:	2104      	movs	r1, #4
   47220:	4628      	mov	r0, r5
   47222:	f7ff ff89 	bl	47138 <atomic_set_bit>
}
   47226:	4620      	mov	r0, r4
   47228:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   4722a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   4722e:	e7ef      	b.n	47210 <smp_create_pdu.constprop.0+0x12>
   47230:	2101      	movs	r1, #1
   47232:	3008      	adds	r0, #8
   47234:	f000 fb78 	bl	47928 <net_buf_simple_add>
	hdr->code = op;
   47238:	7006      	strb	r6, [r0, #0]
	return buf;
   4723a:	e7f4      	b.n	47226 <smp_create_pdu.constprop.0+0x28>

0004723c <smp_send_pairing_random>:
{
   4723c:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   4723e:	2104      	movs	r1, #4
{
   47240:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   47242:	f7ff ffdc 	bl	471fe <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   47246:	4604      	mov	r4, r0
   47248:	b170      	cbz	r0, 47268 <smp_send_pairing_random+0x2c>
   4724a:	2110      	movs	r1, #16
   4724c:	3008      	adds	r0, #8
   4724e:	f000 fb6b 	bl	47928 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   47252:	2210      	movs	r2, #16
   47254:	f105 0127 	add.w	r1, r5, #39	; 0x27
   47258:	f7fd fc33 	bl	44ac2 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   4725c:	4628      	mov	r0, r5
   4725e:	4621      	mov	r1, r4
   47260:	f7ff fecf 	bl	47002 <smp_send.constprop.0>
	return 0;
   47264:	2000      	movs	r0, #0
}
   47266:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   47268:	2008      	movs	r0, #8
   4726a:	e7fc      	b.n	47266 <smp_send_pairing_random+0x2a>

0004726c <smp_dhkey_check>:
{
   4726c:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   4726e:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   47272:	78db      	ldrb	r3, [r3, #3]
   47274:	2b01      	cmp	r3, #1
{
   47276:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   47278:	d114      	bne.n	472a4 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   4727a:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   4727c:	1d05      	adds	r5, r0, #4
   4727e:	2110      	movs	r1, #16
   47280:	4628      	mov	r0, r5
   47282:	f7ff fe8f 	bl	46fa4 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   47286:	4631      	mov	r1, r6
   47288:	2210      	movs	r2, #16
   4728a:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   4728e:	f7fd fc18 	bl	44ac2 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   47292:	2107      	movs	r1, #7
   47294:	4628      	mov	r0, r5
   47296:	f7ff ff69 	bl	4716c <atomic_test_bit>
   4729a:	b128      	cbz	r0, 472a8 <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   4729c:	2109      	movs	r1, #9
   4729e:	4628      	mov	r0, r5
   472a0:	f7ff ff4a 	bl	47138 <atomic_set_bit>
}
   472a4:	2000      	movs	r0, #0
   472a6:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   472a8:	210a      	movs	r1, #10
   472aa:	4628      	mov	r0, r5
   472ac:	f7ff ff5e 	bl	4716c <atomic_test_bit>
   472b0:	2800      	cmp	r0, #0
   472b2:	d1f3      	bne.n	4729c <smp_dhkey_check+0x30>
		return compute_and_check_and_send_periph_dhcheck(smp);
   472b4:	4620      	mov	r0, r4
}
   472b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   472ba:	f7e7 bcf9 	b.w	2ecb0 <compute_and_check_and_send_periph_dhcheck>

000472be <smp_pairing_confirm>:
{
   472be:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   472c0:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   472c2:	1d05      	adds	r5, r0, #4
{
   472c4:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   472c6:	210b      	movs	r1, #11
   472c8:	4628      	mov	r0, r5
   472ca:	f7ff fe6b 	bl	46fa4 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   472ce:	2210      	movs	r2, #16
   472d0:	4631      	mov	r1, r6
   472d2:	f104 0017 	add.w	r0, r4, #23
   472d6:	f7fd fbf4 	bl	44ac2 <memcpy>
	switch (smp->method) {
   472da:	7a23      	ldrb	r3, [r4, #8]
   472dc:	2b01      	cmp	r3, #1
   472de:	d009      	beq.n	472f4 <smp_pairing_confirm+0x36>
   472e0:	2b02      	cmp	r3, #2
   472e2:	d113      	bne.n	4730c <smp_pairing_confirm+0x4e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   472e4:	4620      	mov	r0, r4
   472e6:	2104      	movs	r1, #4
   472e8:	f7ff ff26 	bl	47138 <atomic_set_bit>
}
   472ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   472f0:	f7e7 bdc4 	b.w	2ee7c <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   472f4:	210a      	movs	r1, #10
   472f6:	4628      	mov	r0, r5
   472f8:	f7ff ff38 	bl	4716c <atomic_test_bit>
   472fc:	2800      	cmp	r0, #0
   472fe:	d0f1      	beq.n	472e4 <smp_pairing_confirm+0x26>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   47300:	4628      	mov	r0, r5
   47302:	2100      	movs	r1, #0
   47304:	f7ff ff18 	bl	47138 <atomic_set_bit>
			return 0;
   47308:	2000      	movs	r0, #0
}
   4730a:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   4730c:	2008      	movs	r0, #8
   4730e:	e7fc      	b.n	4730a <smp_pairing_confirm+0x4c>

00047310 <atomic_test_and_clear_bit>:
{
   47310:	b530      	push	{r4, r5, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   47312:	2301      	movs	r3, #1
   47314:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   47318:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   4731a:	f3bf 8f5b 	dmb	ish
   4731e:	e850 3f00 	ldrex	r3, [r0]
   47322:	ea03 0402 	and.w	r4, r3, r2
   47326:	e840 4500 	strex	r5, r4, [r0]
   4732a:	2d00      	cmp	r5, #0
   4732c:	d1f7      	bne.n	4731e <atomic_test_and_clear_bit+0xe>
   4732e:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   47332:	4219      	tst	r1, r3
}
   47334:	bf14      	ite	ne
   47336:	2001      	movne	r0, #1
   47338:	2000      	moveq	r0, #0
   4733a:	bd30      	pop	{r4, r5, pc}

0004733c <smp_reset>:
{
   4733c:	b538      	push	{r3, r4, r5, lr}
   4733e:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   47340:	1d03      	adds	r3, r0, #4
   47342:	2500      	movs	r5, #0
   47344:	f3bf 8f5b 	dmb	ish
   47348:	e853 2f00 	ldrex	r2, [r3]
   4734c:	e843 5100 	strex	r1, r5, [r3]
   47350:	2900      	cmp	r1, #0
   47352:	d1f9      	bne.n	47348 <smp_reset+0xc>
   47354:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   47358:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
   4735c:	f001 faa9 	bl	488b2 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   47360:	7225      	strb	r5, [r4, #8]
   47362:	f3bf 8f5b 	dmb	ish
   47366:	e854 3f00 	ldrex	r3, [r4]
   4736a:	e844 5200 	strex	r2, r5, [r4]
   4736e:	2a00      	cmp	r2, #0
   47370:	d1f9      	bne.n	47366 <smp_reset+0x2a>
   47372:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   47376:	4620      	mov	r0, r4
   47378:	2101      	movs	r1, #1
}
   4737a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   4737e:	f7ff bedb 	b.w	47138 <atomic_set_bit>

00047382 <bt_smp_request_ltk>:
{
   47382:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   47386:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   4738a:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   4738e:	4604      	mov	r4, r0
   47390:	4692      	mov	sl, r2
   47392:	461f      	mov	r7, r3
	smp = smp_chan_get(conn);
   47394:	f7ff fdff 	bl	46f96 <smp_chan_get>
	if (!smp) {
   47398:	4605      	mov	r5, r0
   4739a:	2800      	cmp	r0, #0
   4739c:	d05a      	beq.n	47454 <bt_smp_request_ltk+0xd2>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   4739e:	1d06      	adds	r6, r0, #4
	if (ediv == 0U && rand == 0U &&
   473a0:	f1b9 0f00 	cmp.w	r9, #0
   473a4:	d127      	bne.n	473f6 <bt_smp_request_ltk+0x74>
   473a6:	ea5a 0307 	orrs.w	r3, sl, r7
   473aa:	d124      	bne.n	473f6 <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   473ac:	2103      	movs	r1, #3
   473ae:	4630      	mov	r0, r6
   473b0:	f7ff fedc 	bl	4716c <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   473b4:	b3d0      	cbz	r0, 4742c <bt_smp_request_ltk+0xaa>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   473b6:	2101      	movs	r1, #1
   473b8:	4630      	mov	r0, r6
   473ba:	f7ff fed7 	bl	4716c <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   473be:	b3a8      	cbz	r0, 4742c <bt_smp_request_ltk+0xaa>
	return MIN(req->max_key_size, rsp->max_key_size);
   473c0:	7d2c      	ldrb	r4, [r5, #20]
   473c2:	7b6b      	ldrb	r3, [r5, #13]
   473c4:	429c      	cmp	r4, r3
   473c6:	bf28      	it	cs
   473c8:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   473ca:	4622      	mov	r2, r4
   473cc:	f105 0147 	add.w	r1, r5, #71	; 0x47
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   473d0:	4640      	mov	r0, r8
   473d2:	f7fd fb76 	bl	44ac2 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   473d6:	2c0f      	cmp	r4, #15
   473d8:	d806      	bhi.n	473e8 <bt_smp_request_ltk+0x66>
			(void)memset(ltk + enc_size, 0,
   473da:	f1c4 0210 	rsb	r2, r4, #16
   473de:	2100      	movs	r1, #0
   473e0:	eb08 0004 	add.w	r0, r8, r4
   473e4:	f7fd fb78 	bl	44ad8 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   473e8:	4630      	mov	r0, r6
   473ea:	2101      	movs	r1, #1
   473ec:	f7ff fea4 	bl	47138 <atomic_set_bit>
		return true;
   473f0:	2001      	movs	r0, #1
}
   473f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!conn->le.keys) {
   473f6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   473fa:	b9f3      	cbnz	r3, 4743a <bt_smp_request_ltk+0xb8>
					     &conn->le.dst);
   473fc:	f104 0b88 	add.w	fp, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   47400:	7a21      	ldrb	r1, [r4, #8]
   47402:	465a      	mov	r2, fp
   47404:	2020      	movs	r0, #32
   47406:	f7e8 f9f9 	bl	2f7fc <bt_keys_find>
   4740a:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   4740e:	b930      	cbnz	r0, 4741e <bt_smp_request_ltk+0x9c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   47410:	7a21      	ldrb	r1, [r4, #8]
   47412:	465a      	mov	r2, fp
   47414:	2001      	movs	r0, #1
   47416:	f7e8 f9f1 	bl	2f7fc <bt_keys_find>
   4741a:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   4741e:	f1b9 0f00 	cmp.w	r9, #0
   47422:	d10a      	bne.n	4743a <bt_smp_request_ltk+0xb8>
   47424:	ea5a 0707 	orrs.w	r7, sl, r7
   47428:	d004      	beq.n	47434 <bt_smp_request_ltk+0xb2>
   4742a:	e006      	b.n	4743a <bt_smp_request_ltk+0xb8>
	if (!conn->le.keys) {
   4742c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   47430:	2b00      	cmp	r3, #0
   47432:	d0e3      	beq.n	473fc <bt_smp_request_ltk+0x7a>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   47434:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   47438:	b971      	cbnz	r1, 47458 <bt_smp_request_ltk+0xd6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   4743a:	210f      	movs	r1, #15
   4743c:	4630      	mov	r0, r6
   4743e:	f7ff fe95 	bl	4716c <atomic_test_bit>
   47442:	b120      	cbz	r0, 4744e <bt_smp_request_ltk+0xcc>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   47444:	2202      	movs	r2, #2
   47446:	2106      	movs	r1, #6
   47448:	4620      	mov	r0, r4
   4744a:	f7e5 fb0f 	bl	2ca6c <bt_conn_security_changed>
	smp_reset(smp);
   4744e:	4628      	mov	r0, r5
   47450:	f7ff ff74 	bl	4733c <smp_reset>
		return false;
   47454:	2000      	movs	r0, #0
   47456:	e7cc      	b.n	473f2 <bt_smp_request_ltk+0x70>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   47458:	89cb      	ldrh	r3, [r1, #14]
   4745a:	069b      	lsls	r3, r3, #26
   4745c:	d5ed      	bpl.n	4743a <bt_smp_request_ltk+0xb8>
		enc_size = conn->le.keys->enc_size;
   4745e:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   47460:	311a      	adds	r1, #26
   47462:	4622      	mov	r2, r4
   47464:	e7b4      	b.n	473d0 <bt_smp_request_ltk+0x4e>

00047466 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   47466:	f06f 0085 	mvn.w	r0, #133	; 0x85
   4746a:	4770      	bx	lr

0004746c <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   4746c:	1d03      	adds	r3, r0, #4
{
   4746e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   47470:	4605      	mov	r5, r0
   47472:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   47474:	4618      	mov	r0, r3
   47476:	2103      	movs	r1, #3
   47478:	f7ff fe78 	bl	4716c <atomic_test_bit>
   4747c:	b1d0      	cbz	r0, 474b4 <smp_error+0x48>
		smp_pairing_complete(smp, reason);
   4747e:	4631      	mov	r1, r6
   47480:	4628      	mov	r0, r5
   47482:	f7e8 f809 	bl	2f498 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   47486:	2105      	movs	r1, #5
   47488:	4628      	mov	r0, r5
   4748a:	f7ff feb8 	bl	471fe <smp_create_pdu.constprop.0>
	if (!buf) {
   4748e:	4604      	mov	r4, r0
   47490:	b308      	cbz	r0, 474d6 <smp_error+0x6a>
   47492:	2101      	movs	r1, #1
   47494:	3008      	adds	r0, #8
   47496:	f000 fa47 	bl	47928 <net_buf_simple_add>
   4749a:	2300      	movs	r3, #0
	rsp->reason = reason;
   4749c:	7006      	strb	r6, [r0, #0]
   4749e:	9300      	str	r3, [sp, #0]
   474a0:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
   474a4:	4622      	mov	r2, r4
   474a6:	2106      	movs	r1, #6
   474a8:	f7fe fc25 	bl	45cf6 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   474ac:	b978      	cbnz	r0, 474ce <smp_error+0x62>
	return 0;
   474ae:	2000      	movs	r0, #0
}
   474b0:	b002      	add	sp, #8
   474b2:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   474b4:	2101      	movs	r1, #1
   474b6:	4618      	mov	r0, r3
   474b8:	f7ff fe58 	bl	4716c <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   474bc:	2800      	cmp	r0, #0
   474be:	d1de      	bne.n	4747e <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   474c0:	210f      	movs	r1, #15
   474c2:	4618      	mov	r0, r3
   474c4:	f7ff fe52 	bl	4716c <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   474c8:	2800      	cmp	r0, #0
   474ca:	d1d8      	bne.n	4747e <smp_error+0x12>
   474cc:	e7db      	b.n	47486 <smp_error+0x1a>
		net_buf_unref(buf);
   474ce:	4620      	mov	r0, r4
   474d0:	f7f5 fdea 	bl	3d0a8 <net_buf_unref>
   474d4:	e7eb      	b.n	474ae <smp_error+0x42>
		return -ENOBUFS;
   474d6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   474da:	e7e9      	b.n	474b0 <smp_error+0x44>

000474dc <bt_smp_dhkey_ready>:
{
   474dc:	b570      	push	{r4, r5, r6, lr}
   474de:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   474e0:	2008      	movs	r0, #8
   474e2:	f7e7 fb05 	bl	2eaf0 <smp_find>
	if (smp) {
   474e6:	4604      	mov	r4, r0
   474e8:	b1b8      	cbz	r0, 4751a <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   474ea:	1d05      	adds	r5, r0, #4
   474ec:	2108      	movs	r1, #8
   474ee:	4628      	mov	r0, r5
   474f0:	f7ff fd58 	bl	46fa4 <atomic_clear_bit>
	if (!dhkey) {
   474f4:	b38e      	cbz	r6, 4755a <bt_smp_dhkey_ready+0x7e>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   474f6:	2107      	movs	r1, #7
   474f8:	f7ff fd54 	bl	46fa4 <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   474fc:	4631      	mov	r1, r6
   474fe:	2220      	movs	r2, #32
   47500:	f104 0097 	add.w	r0, r4, #151	; 0x97
   47504:	f7fd fadd 	bl	44ac2 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   47508:	210a      	movs	r1, #10
   4750a:	4628      	mov	r0, r5
   4750c:	f7ff fe2e 	bl	4716c <atomic_test_bit>
   47510:	b168      	cbz	r0, 4752e <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   47512:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   47514:	4628      	mov	r0, r5
   47516:	f7ff fe0f 	bl	47138 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   4751a:	2007      	movs	r0, #7
   4751c:	f7e7 fae8 	bl	2eaf0 <smp_find>
		if (smp) {
   47520:	4604      	mov	r4, r0
   47522:	b118      	cbz	r0, 4752c <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   47524:	f7e7 face 	bl	2eac4 <smp_dhkey_generate>
			if (err) {
   47528:	4601      	mov	r1, r0
   4752a:	b990      	cbnz	r0, 47552 <bt_smp_dhkey_ready+0x76>
}
   4752c:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   4752e:	2110      	movs	r1, #16
   47530:	4628      	mov	r0, r5
   47532:	f7ff fe1b 	bl	4716c <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   47536:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   47538:	2800      	cmp	r0, #0
   4753a:	d1eb      	bne.n	47514 <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   4753c:	4628      	mov	r0, r5
   4753e:	f7ff fe15 	bl	4716c <atomic_test_bit>
   47542:	2800      	cmp	r0, #0
   47544:	d0e9      	beq.n	4751a <bt_smp_dhkey_ready+0x3e>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   47546:	4620      	mov	r0, r4
   47548:	f7e7 fbb2 	bl	2ecb0 <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   4754c:	4601      	mov	r1, r0
   4754e:	2800      	cmp	r0, #0
   47550:	d0e3      	beq.n	4751a <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   47552:	4620      	mov	r0, r4
   47554:	f7ff ff8a 	bl	4746c <smp_error>
   47558:	e7df      	b.n	4751a <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   4755a:	210b      	movs	r1, #11
   4755c:	e7f9      	b.n	47552 <bt_smp_dhkey_ready+0x76>

0004755e <smp_ident_addr_info>:
{
   4755e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   47562:	688f      	ldr	r7, [r1, #8]
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   47564:	783b      	ldrb	r3, [r7, #0]
{
   47566:	4604      	mov	r4, r0
   47568:	b123      	cbz	r3, 47574 <smp_ident_addr_info+0x16>
	if (!bt_addr_le_is_identity(&req->addr)) {
   4756a:	79bb      	ldrb	r3, [r7, #6]
   4756c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   47570:	2bc0      	cmp	r3, #192	; 0xc0
   47572:	d16a      	bne.n	4764a <smp_ident_addr_info+0xec>
	struct bt_conn *conn = smp->chan.chan.conn;
   47574:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   47578:	f105 0888 	add.w	r8, r5, #136	; 0x88
	return memcmp(a, b, sizeof(*a));
   4757c:	2207      	movs	r2, #7
   4757e:	4639      	mov	r1, r7
   47580:	4640      	mov	r0, r8
   47582:	f7fd fa8e 	bl	44aa2 <memcmp>
   47586:	b180      	cbz	r0, 475aa <smp_ident_addr_info+0x4c>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   47588:	7a28      	ldrb	r0, [r5, #8]
   4758a:	4639      	mov	r1, r7
   4758c:	f7e8 f99e 	bl	2f8cc <bt_keys_find_addr>
		if (keys) {
   47590:	4606      	mov	r6, r0
   47592:	b150      	cbz	r0, 475aa <smp_ident_addr_info+0x4c>
			if (!update_keys_check(smp, keys)) {
   47594:	4601      	mov	r1, r0
   47596:	4620      	mov	r0, r4
   47598:	f7ff fdf1 	bl	4717e <update_keys_check>
   4759c:	b910      	cbnz	r0, 475a4 <smp_ident_addr_info+0x46>
				return BT_SMP_ERR_UNSPECIFIED;
   4759e:	2008      	movs	r0, #8
}
   475a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_keys_clear(keys);
   475a4:	4630      	mov	r0, r6
   475a6:	f7e8 f9a1 	bl	2f8ec <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   475aa:	210d      	movs	r1, #13
   475ac:	1d20      	adds	r0, r4, #4
   475ae:	f7ff fddd 	bl	4716c <atomic_test_bit>
   475b2:	b390      	cbz	r0, 4761a <smp_ident_addr_info+0xbc>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   475b4:	7a29      	ldrb	r1, [r5, #8]
   475b6:	4642      	mov	r2, r8
   475b8:	2002      	movs	r0, #2
   475ba:	f000 f8fd 	bl	477b8 <bt_keys_get_type>
		if (!keys) {
   475be:	4606      	mov	r6, r0
   475c0:	2800      	cmp	r0, #0
   475c2:	d0ec      	beq.n	4759e <smp_ident_addr_info+0x40>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   475c4:	78eb      	ldrb	r3, [r5, #3]
   475c6:	bbcb      	cbnz	r3, 4763c <smp_ident_addr_info+0xde>
			dst = &conn->le.resp_addr;
   475c8:	f105 0196 	add.w	r1, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   475cc:	780b      	ldrb	r3, [r1, #0]
   475ce:	2b01      	cmp	r3, #1
   475d0:	d120      	bne.n	47614 <smp_ident_addr_info+0xb6>
		if (bt_addr_le_is_rpa(dst)) {
   475d2:	798b      	ldrb	r3, [r1, #6]
   475d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   475d8:	2b40      	cmp	r3, #64	; 0x40
   475da:	d11b      	bne.n	47614 <smp_ident_addr_info+0xb6>
	memcpy(dst, src, sizeof(*dst));
   475dc:	2206      	movs	r2, #6
   475de:	3101      	adds	r1, #1
   475e0:	f106 003a 	add.w	r0, r6, #58	; 0x3a
   475e4:	f7fd fa6d 	bl	44ac2 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   475e8:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
   475ec:	b193      	cbz	r3, 47614 <smp_ident_addr_info+0xb6>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   475ee:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   475f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   475f6:	2bc0      	cmp	r3, #192	; 0xc0
   475f8:	d00c      	beq.n	47614 <smp_ident_addr_info+0xb6>
	memcpy(dst, src, sizeof(*dst));
   475fa:	2207      	movs	r2, #7
   475fc:	4639      	mov	r1, r7
   475fe:	1c70      	adds	r0, r6, #1
   47600:	f7fd fa5f 	bl	44ac2 <memcpy>
   47604:	2207      	movs	r2, #7
   47606:	4639      	mov	r1, r7
   47608:	4640      	mov	r0, r8
   4760a:	f7fd fa5a 	bl	44ac2 <memcpy>
				bt_conn_identity_resolved(conn);
   4760e:	4628      	mov	r0, r5
   47610:	f7e5 f9fe 	bl	2ca10 <bt_conn_identity_resolved>
		bt_id_add(keys);
   47614:	4630      	mov	r0, r6
   47616:	f7e4 f93f 	bl	2b898 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   4761a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   4761e:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   47622:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   47624:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   47628:	d503      	bpl.n	47632 <smp_ident_addr_info+0xd4>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   4762a:	210a      	movs	r1, #10
   4762c:	4620      	mov	r0, r4
   4762e:	f7ff fd83 	bl	47138 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   47632:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   47636:	b121      	cbz	r1, 47642 <smp_ident_addr_info+0xe4>
	return 0;
   47638:	2000      	movs	r0, #0
   4763a:	e7b1      	b.n	475a0 <smp_ident_addr_info+0x42>
			dst = &conn->le.init_addr;
   4763c:	f105 018f 	add.w	r1, r5, #143	; 0x8f
   47640:	e7c4      	b.n	475cc <smp_ident_addr_info+0x6e>
		smp_pairing_complete(smp, 0);
   47642:	4620      	mov	r0, r4
   47644:	f7e7 ff28 	bl	2f498 <smp_pairing_complete>
   47648:	e7f6      	b.n	47638 <smp_ident_addr_info+0xda>
		return BT_SMP_ERR_INVALID_PARAMS;
   4764a:	200a      	movs	r0, #10
   4764c:	e7a8      	b.n	475a0 <smp_ident_addr_info+0x42>

0004764e <bt_smp_disconnected>:
{
   4764e:	b570      	push	{r4, r5, r6, lr}
   47650:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   47652:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	struct bt_keys *keys = chan->conn->le.keys;
   47656:	f850 3be8 	ldr.w	r3, [r0], #232
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   4765a:	3cec      	subs	r4, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   4765c:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	(void)k_work_cancel_delayable(&smp->work);
   47660:	f001 f927 	bl	488b2 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   47664:	2103      	movs	r1, #3
   47666:	4620      	mov	r0, r4
   47668:	f7ff fd80 	bl	4716c <atomic_test_bit>
   4766c:	b1a0      	cbz	r0, 47698 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   4766e:	2108      	movs	r1, #8
   47670:	4630      	mov	r0, r6
   47672:	f7e7 ff11 	bl	2f498 <smp_pairing_complete>
	if (keys) {
   47676:	b13d      	cbz	r5, 47688 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   47678:	89eb      	ldrh	r3, [r5, #14]
   4767a:	b113      	cbz	r3, 47682 <bt_smp_disconnected+0x34>
   4767c:	7b6b      	ldrb	r3, [r5, #13]
   4767e:	079b      	lsls	r3, r3, #30
   47680:	d502      	bpl.n	47688 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   47682:	4628      	mov	r0, r5
   47684:	f7e8 f932 	bl	2f8ec <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   47688:	4630      	mov	r0, r6
   4768a:	f44f 7202 	mov.w	r2, #520	; 0x208
}
   4768e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   47692:	2100      	movs	r1, #0
   47694:	f7fd ba20 	b.w	44ad8 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   47698:	2101      	movs	r1, #1
   4769a:	4620      	mov	r0, r4
   4769c:	f7ff fd66 	bl	4716c <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   476a0:	2800      	cmp	r0, #0
   476a2:	d1e4      	bne.n	4766e <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   476a4:	210f      	movs	r1, #15
   476a6:	4620      	mov	r0, r4
   476a8:	f7ff fd60 	bl	4716c <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   476ac:	2800      	cmp	r0, #0
   476ae:	d1de      	bne.n	4766e <bt_smp_disconnected+0x20>
   476b0:	e7e1      	b.n	47676 <bt_smp_disconnected+0x28>

000476b2 <smp_timeout>:
{
   476b2:	b510      	push	{r4, lr}
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   476b4:	2108      	movs	r1, #8
{
   476b6:	4604      	mov	r4, r0
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   476b8:	f5a0 70ec 	sub.w	r0, r0, #472	; 0x1d8
   476bc:	f7e7 feec 	bl	2f498 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   476c0:	f5a4 70ea 	sub.w	r0, r4, #468	; 0x1d4
   476c4:	2104      	movs	r1, #4
}
   476c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   476ca:	f7ff bd35 	b.w	47138 <atomic_set_bit>

000476ce <bt_smp_update_keys>:
{
   476ce:	b570      	push	{r4, r5, r6, lr}
   476d0:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   476d2:	f7ff fc60 	bl	46f96 <smp_chan_get>
	if (!smp) {
   476d6:	4605      	mov	r5, r0
   476d8:	2800      	cmp	r0, #0
   476da:	d06a      	beq.n	477b2 <bt_smp_update_keys+0xe4>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   476dc:	1d06      	adds	r6, r0, #4
   476de:	2103      	movs	r1, #3
   476e0:	4630      	mov	r0, r6
   476e2:	f7ff fd43 	bl	4716c <atomic_test_bit>
   476e6:	2800      	cmp	r0, #0
   476e8:	d063      	beq.n	477b2 <bt_smp_update_keys+0xe4>
	if (conn->le.keys) {
   476ea:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   476ee:	b108      	cbz	r0, 476f4 <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   476f0:	f7e8 f8fc 	bl	2f8ec <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   476f4:	7a20      	ldrb	r0, [r4, #8]
   476f6:	f104 0188 	add.w	r1, r4, #136	; 0x88
   476fa:	f7e8 f83d 	bl	2f778 <bt_keys_get_addr>
   476fe:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   47702:	b928      	cbnz	r0, 47710 <bt_smp_update_keys+0x42>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   47704:	4628      	mov	r0, r5
   47706:	2108      	movs	r1, #8
}
   47708:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   4770c:	f7ff beae 	b.w	4746c <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   47710:	210e      	movs	r1, #14
   47712:	4630      	mov	r0, r6
   47714:	f7ff fd2a 	bl	4716c <atomic_test_bit>
   47718:	b128      	cbz	r0, 47726 <bt_smp_update_keys+0x58>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   4771a:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   4771e:	7b53      	ldrb	r3, [r2, #13]
   47720:	f043 0302 	orr.w	r3, r3, #2
   47724:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   47726:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   47728:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
   4772c:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   4772e:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   47730:	d836      	bhi.n	477a0 <bt_smp_update_keys+0xd2>
   47732:	b3c2      	cbz	r2, 477a6 <bt_smp_update_keys+0xd8>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   47734:	f043 0301 	orr.w	r3, r3, #1
   47738:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   4773a:	7b6b      	ldrb	r3, [r5, #13]
   4773c:	7d2a      	ldrb	r2, [r5, #20]
   4773e:	4293      	cmp	r3, r2
   47740:	bf28      	it	cs
   47742:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   47744:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   47746:	4630      	mov	r0, r6
   47748:	2105      	movs	r1, #5
   4774a:	f7ff fd0f 	bl	4716c <atomic_test_bit>
   4774e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   47752:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   47754:	b350      	cbz	r0, 477ac <bt_smp_update_keys+0xde>
		conn->le.keys->flags |= BT_KEYS_SC;
   47756:	f042 0210 	orr.w	r2, r2, #16
   4775a:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   4775c:	210d      	movs	r1, #13
   4775e:	4630      	mov	r0, r6
   47760:	f7ff fd04 	bl	4716c <atomic_test_bit>
   47764:	b328      	cbz	r0, 477b2 <bt_smp_update_keys+0xe4>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   47766:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   4776a:	2120      	movs	r1, #32
   4776c:	f000 f834 	bl	477d8 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   47770:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   47774:	f105 0147 	add.w	r1, r5, #71	; 0x47
   47778:	2210      	movs	r2, #16
   4777a:	301a      	adds	r0, #26
   4777c:	f7fd f9a1 	bl	44ac2 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   47780:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   47784:	2208      	movs	r2, #8
   47786:	2100      	movs	r1, #0
   47788:	3010      	adds	r0, #16
   4778a:	f7fd f9a5 	bl	44ad8 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   4778e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   47792:	2202      	movs	r2, #2
}
   47794:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   47798:	2100      	movs	r1, #0
   4779a:	3018      	adds	r0, #24
   4779c:	f7fd b99c 	b.w	44ad8 <memset>
	switch (smp->method) {
   477a0:	3a05      	subs	r2, #5
   477a2:	2a01      	cmp	r2, #1
   477a4:	d9c6      	bls.n	47734 <bt_smp_update_keys+0x66>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   477a6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		break;
   477aa:	e7c5      	b.n	47738 <bt_smp_update_keys+0x6a>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   477ac:	f022 0210 	bic.w	r2, r2, #16
   477b0:	735a      	strb	r2, [r3, #13]
}
   477b2:	bd70      	pop	{r4, r5, r6, pc}

000477b4 <id_add>:
	bt_id_add(keys);
   477b4:	f7e4 b870 	b.w	2b898 <bt_id_add>

000477b8 <bt_keys_get_type>:
{
   477b8:	b570      	push	{r4, r5, r6, lr}
   477ba:	4604      	mov	r4, r0
   477bc:	460d      	mov	r5, r1
   477be:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   477c0:	f7e8 f81c 	bl	2f7fc <bt_keys_find>
	if (keys) {
   477c4:	b938      	cbnz	r0, 477d6 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   477c6:	4631      	mov	r1, r6
   477c8:	4628      	mov	r0, r5
   477ca:	f7e7 ffd5 	bl	2f778 <bt_keys_get_addr>
	if (!keys) {
   477ce:	b110      	cbz	r0, 477d6 <bt_keys_get_type+0x1e>
	keys->keys |= type;
   477d0:	89c3      	ldrh	r3, [r0, #14]
   477d2:	431c      	orrs	r4, r3
   477d4:	81c4      	strh	r4, [r0, #14]
}
   477d6:	bd70      	pop	{r4, r5, r6, pc}

000477d8 <bt_keys_add_type>:
	keys->keys |= type;
   477d8:	89c3      	ldrh	r3, [r0, #14]
   477da:	4319      	orrs	r1, r3
   477dc:	81c1      	strh	r1, [r0, #14]
}
   477de:	4770      	bx	lr

000477e0 <keys_set>:
{
   477e0:	b570      	push	{r4, r5, r6, lr}
   477e2:	4606      	mov	r6, r0
   477e4:	b090      	sub	sp, #64	; 0x40
   477e6:	4614      	mov	r4, r2
   477e8:	4618      	mov	r0, r3
	if (!name) {
   477ea:	b326      	cbz	r6, 47836 <keys_set+0x56>
	len = read_cb(cb_arg, val, sizeof(val));
   477ec:	2234      	movs	r2, #52	; 0x34
   477ee:	a903      	add	r1, sp, #12
   477f0:	47a0      	blx	r4
	if (len < 0) {
   477f2:	1e04      	subs	r4, r0, #0
   477f4:	db1f      	blt.n	47836 <keys_set+0x56>
	err = bt_settings_decode_key(name, &addr);
   477f6:	a901      	add	r1, sp, #4
   477f8:	4630      	mov	r0, r6
   477fa:	f7fd fa1d 	bl	44c38 <bt_settings_decode_key>
	if (err) {
   477fe:	4605      	mov	r5, r0
   47800:	b9c8      	cbnz	r0, 47836 <keys_set+0x56>
	settings_name_next(name, &next);
   47802:	4669      	mov	r1, sp
   47804:	4630      	mov	r0, r6
   47806:	f7fb fe8b 	bl	43520 <settings_name_next>
	if (!next) {
   4780a:	9800      	ldr	r0, [sp, #0]
   4780c:	b968      	cbnz	r0, 4782a <keys_set+0x4a>
	if (!len) {
   4780e:	b9ac      	cbnz	r4, 4783c <keys_set+0x5c>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   47810:	aa01      	add	r2, sp, #4
   47812:	4621      	mov	r1, r4
   47814:	203f      	movs	r0, #63	; 0x3f
   47816:	f7e7 fff1 	bl	2f7fc <bt_keys_find>
		if (keys) {
   4781a:	b118      	cbz	r0, 47824 <keys_set+0x44>
			(void)memset(keys, 0, sizeof(*keys));
   4781c:	2240      	movs	r2, #64	; 0x40
   4781e:	4621      	mov	r1, r4
   47820:	f7fd f95a 	bl	44ad8 <memset>
}
   47824:	4628      	mov	r0, r5
   47826:	b010      	add	sp, #64	; 0x40
   47828:	bd70      	pop	{r4, r5, r6, pc}
		unsigned long next_id = strtoul(next, NULL, 10);
   4782a:	220a      	movs	r2, #10
   4782c:	4629      	mov	r1, r5
   4782e:	f7fd f890 	bl	44952 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   47832:	2800      	cmp	r0, #0
   47834:	d0eb      	beq.n	4780e <keys_set+0x2e>
		return -EINVAL;
   47836:	f06f 0515 	mvn.w	r5, #21
   4783a:	e7f3      	b.n	47824 <keys_set+0x44>
	keys = bt_keys_get_addr(id, &addr);
   4783c:	a901      	add	r1, sp, #4
   4783e:	2000      	movs	r0, #0
   47840:	f7e7 ff9a 	bl	2f778 <bt_keys_get_addr>
	if (!keys) {
   47844:	b150      	cbz	r0, 4785c <keys_set+0x7c>
	if (len != BT_KEYS_STORAGE_LEN) {
   47846:	2c34      	cmp	r4, #52	; 0x34
   47848:	d002      	beq.n	47850 <keys_set+0x70>
			bt_keys_clear(keys);
   4784a:	f7e8 f84f 	bl	2f8ec <bt_keys_clear>
			return -EINVAL;
   4784e:	e7f2      	b.n	47836 <keys_set+0x56>
		memcpy(keys->storage_start, val, len);
   47850:	4622      	mov	r2, r4
   47852:	a903      	add	r1, sp, #12
   47854:	300c      	adds	r0, #12
   47856:	f7fd f934 	bl	44ac2 <memcpy>
	return 0;
   4785a:	e7e3      	b.n	47824 <keys_set+0x44>
		return -ENOMEM;
   4785c:	f06f 050b 	mvn.w	r5, #11
   47860:	e7e0      	b.n	47824 <keys_set+0x44>

00047862 <fixed_data_unref>:
}
   47862:	4770      	bx	lr

00047864 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   47864:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   47866:	6849      	ldr	r1, [r1, #4]
   47868:	6809      	ldr	r1, [r1, #0]
   4786a:	f7f5 bb8b 	b.w	3cf84 <net_buf_alloc_len>

0004786e <net_buf_get>:
{
   4786e:	b570      	push	{r4, r5, r6, lr}
   47870:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   47872:	f7f9 fe43 	bl	414fc <z_impl_k_queue_get>
	if (!buf) {
   47876:	4605      	mov	r5, r0
   47878:	b128      	cbz	r0, 47886 <net_buf_get+0x18>
   4787a:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   4787c:	7963      	ldrb	r3, [r4, #5]
   4787e:	f013 0301 	ands.w	r3, r3, #1
   47882:	d102      	bne.n	4788a <net_buf_get+0x1c>
	frag->frags = NULL;
   47884:	6023      	str	r3, [r4, #0]
}
   47886:	4628      	mov	r0, r5
   47888:	bd70      	pop	{r4, r5, r6, pc}
   4788a:	2300      	movs	r3, #0
   4788c:	2200      	movs	r2, #0
   4788e:	4630      	mov	r0, r6
   47890:	f7f9 fe34 	bl	414fc <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   47894:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   47896:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   47898:	f023 0301 	bic.w	r3, r3, #1
   4789c:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   4789e:	4604      	mov	r4, r0
   478a0:	e7ec      	b.n	4787c <net_buf_get+0xe>

000478a2 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   478a2:	6883      	ldr	r3, [r0, #8]
   478a4:	440b      	add	r3, r1
   478a6:	6003      	str	r3, [r0, #0]
}
   478a8:	4770      	bx	lr

000478aa <net_buf_put>:
{
   478aa:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   478ac:	460a      	mov	r2, r1
   478ae:	6814      	ldr	r4, [r2, #0]
   478b0:	b914      	cbnz	r4, 478b8 <net_buf_put+0xe>
}
   478b2:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   478b4:	f000 bf0c 	b.w	486d0 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   478b8:	7953      	ldrb	r3, [r2, #5]
   478ba:	f043 0301 	orr.w	r3, r3, #1
   478be:	7153      	strb	r3, [r2, #5]
   478c0:	4622      	mov	r2, r4
   478c2:	e7f4      	b.n	478ae <net_buf_put+0x4>

000478c4 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   478c4:	7902      	ldrb	r2, [r0, #4]
   478c6:	3201      	adds	r2, #1
   478c8:	7102      	strb	r2, [r0, #4]
	return buf;
}
   478ca:	4770      	bx	lr

000478cc <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   478cc:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   478ce:	4618      	mov	r0, r3
   478d0:	681b      	ldr	r3, [r3, #0]
   478d2:	2b00      	cmp	r3, #0
   478d4:	d1fb      	bne.n	478ce <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   478d6:	4770      	bx	lr

000478d8 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   478d8:	6802      	ldr	r2, [r0, #0]
{
   478da:	b510      	push	{r4, lr}
	if (parent->frags) {
   478dc:	b12a      	cbz	r2, 478ea <net_buf_frag_insert+0x12>
   478de:	460b      	mov	r3, r1
	while (buf->frags) {
   478e0:	461c      	mov	r4, r3
   478e2:	681b      	ldr	r3, [r3, #0]
   478e4:	2b00      	cmp	r3, #0
   478e6:	d1fb      	bne.n	478e0 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   478e8:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   478ea:	6001      	str	r1, [r0, #0]
}
   478ec:	bd10      	pop	{r4, pc}

000478ee <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   478ee:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   478f0:	4604      	mov	r4, r0
   478f2:	b920      	cbnz	r0, 478fe <net_buf_frag_add+0x10>
	buf->ref++;
   478f4:	790b      	ldrb	r3, [r1, #4]
   478f6:	3301      	adds	r3, #1
   478f8:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   478fa:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   478fc:	bd10      	pop	{r4, pc}
   478fe:	4603      	mov	r3, r0
	while (buf->frags) {
   47900:	4618      	mov	r0, r3
   47902:	681b      	ldr	r3, [r3, #0]
   47904:	2b00      	cmp	r3, #0
   47906:	d1fb      	bne.n	47900 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   47908:	f7ff ffe6 	bl	478d8 <net_buf_frag_insert>
   4790c:	4620      	mov	r0, r4
   4790e:	e7f5      	b.n	478fc <net_buf_frag_add+0xe>

00047910 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   47910:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);

	if (parent) {
   47912:	b108      	cbz	r0, 47918 <net_buf_frag_del+0x8>
		__ASSERT_NO_MSG(parent->frags);
		__ASSERT_NO_MSG(parent->frags == frag);
		parent->frags = frag->frags;
   47914:	680b      	ldr	r3, [r1, #0]
   47916:	6003      	str	r3, [r0, #0]
	}

	next_frag = frag->frags;
   47918:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   4791a:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   4791c:	4608      	mov	r0, r1
	frag->frags = NULL;
   4791e:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   47920:	f7f5 fbc2 	bl	3d0a8 <net_buf_unref>
#endif

	return next_frag;
}
   47924:	4620      	mov	r0, r4
   47926:	bd10      	pop	{r4, pc}

00047928 <net_buf_simple_add>:
	return buf->data + buf->len;
   47928:	8883      	ldrh	r3, [r0, #4]
   4792a:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   4792c:	4419      	add	r1, r3
   4792e:	8081      	strh	r1, [r0, #4]
	return tail;
}
   47930:	18d0      	adds	r0, r2, r3
   47932:	4770      	bx	lr

00047934 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   47934:	b430      	push	{r4, r5}
   47936:	8884      	ldrh	r4, [r0, #4]
   47938:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   4793a:	18a3      	adds	r3, r4, r2
   4793c:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   4793e:	1928      	adds	r0, r5, r4
}
   47940:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   47942:	f7fd b8be 	b.w	44ac2 <memcpy>

00047946 <net_buf_simple_add_u8>:
   47946:	8883      	ldrh	r3, [r0, #4]
   47948:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   4794a:	b510      	push	{r4, lr}
	buf->len += len;
   4794c:	1c5c      	adds	r4, r3, #1
   4794e:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   47950:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   47952:	18d0      	adds	r0, r2, r3
   47954:	bd10      	pop	{r4, pc}

00047956 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   47956:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   47958:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   4795a:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   4795c:	1a40      	subs	r0, r0, r1
	buf->len += len;
   4795e:	4411      	add	r1, r2
	buf->data -= len;
   47960:	6018      	str	r0, [r3, #0]
	buf->len += len;
   47962:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   47964:	4770      	bx	lr

00047966 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   47966:	8882      	ldrh	r2, [r0, #4]
   47968:	1a52      	subs	r2, r2, r1
{
   4796a:	4603      	mov	r3, r0
	buf->len -= len;
   4796c:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   4796e:	6800      	ldr	r0, [r0, #0]
   47970:	4408      	add	r0, r1
   47972:	6018      	str	r0, [r3, #0]
}
   47974:	4770      	bx	lr

00047976 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   47976:	4603      	mov	r3, r0
	void *data = buf->data;
   47978:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   4797a:	889a      	ldrh	r2, [r3, #4]
   4797c:	1a52      	subs	r2, r2, r1
	buf->data += len;
   4797e:	4401      	add	r1, r0
	buf->len -= len;
   47980:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   47982:	6019      	str	r1, [r3, #0]

	return data;
}
   47984:	4770      	bx	lr

00047986 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   47986:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   47988:	6803      	ldr	r3, [r0, #0]
   4798a:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   4798c:	2102      	movs	r1, #2
   4798e:	f7ff ffea 	bl	47966 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   47992:	4620      	mov	r0, r4
   47994:	bd10      	pop	{r4, pc}

00047996 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   47996:	6802      	ldr	r2, [r0, #0]
   47998:	6880      	ldr	r0, [r0, #8]
}
   4799a:	1a10      	subs	r0, r2, r0
   4799c:	4770      	bx	lr

0004799e <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   4799e:	8883      	ldrh	r3, [r0, #4]
   479a0:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   479a2:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   479a4:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   479a6:	6803      	ldr	r3, [r0, #0]
   479a8:	1a5b      	subs	r3, r3, r1
}
   479aa:	1ad0      	subs	r0, r2, r3
   479ac:	4770      	bx	lr

000479ae <ep_ctx_reset>:
	ep_ctx->buf.data = ep_ctx->buf.block.data;
   479ae:	6903      	ldr	r3, [r0, #16]
{
   479b0:	b510      	push	{r4, lr}
	ep_ctx->buf.curr = ep_ctx->buf.data;
   479b2:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
   479b6:	2300      	movs	r3, #0
   479b8:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
   479ba:	7f83      	ldrb	r3, [r0, #30]
{
   479bc:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
   479be:	b113      	cbz	r3, 479c6 <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   479c0:	7a40      	ldrb	r0, [r0, #9]
   479c2:	f000 fb51 	bl	48068 <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
   479c6:	2301      	movs	r3, #1
   479c8:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
   479ca:	2300      	movs	r3, #0
   479cc:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
   479ce:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
   479d0:	77a3      	strb	r3, [r4, #30]
}
   479d2:	bd10      	pop	{r4, pc}

000479d4 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   479d4:	f7f9 bcd8 	b.w	41388 <z_impl_k_mutex_lock>

000479d8 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   479d8:	f7f9 bd4e 	b.w	41478 <z_impl_k_mutex_unlock>

000479dc <usb_dc_ep_check_cap>:
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   479dc:	7803      	ldrb	r3, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   479de:	7901      	ldrb	r1, [r0, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   479e0:	f003 020f 	and.w	r2, r3, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   479e4:	b921      	cbnz	r1, 479f0 <usb_dc_ep_check_cap+0x14>
   479e6:	3a00      	subs	r2, #0
   479e8:	bf18      	it	ne
   479ea:	2201      	movne	r2, #1
   479ec:	4250      	negs	r0, r2
   479ee:	4770      	bx	lr
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
   479f0:	2a08      	cmp	r2, #8
   479f2:	d806      	bhi.n	47a02 <usb_dc_ep_check_cap+0x26>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
   479f4:	2901      	cmp	r1, #1
   479f6:	d107      	bne.n	47a08 <usb_dc_ep_check_cap+0x2c>
   479f8:	f083 0008 	eor.w	r0, r3, #8
   479fc:	f340 00c0 	sbfx	r0, r0, #3, #1
   47a00:	4770      	bx	lr
		return -1;
   47a02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   47a06:	4770      	bx	lr
	return 0;
   47a08:	2000      	movs	r0, #0
}
   47a0a:	4770      	bx	lr

00047a0c <usb_dc_ep_read>:
{
   47a0c:	b570      	push	{r4, r5, r6, lr}
   47a0e:	4604      	mov	r4, r0
   47a10:	460e      	mov	r6, r1
   47a12:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
   47a14:	f7f6 f878 	bl	3db08 <usb_dc_ep_read_wait>
	if (ret) {
   47a18:	b930      	cbnz	r0, 47a28 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
   47a1a:	b906      	cbnz	r6, 47a1e <usb_dc_ep_read+0x12>
   47a1c:	b125      	cbz	r5, 47a28 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
   47a1e:	4620      	mov	r0, r4
}
   47a20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
   47a24:	f7f6 b8b8 	b.w	3db98 <usb_dc_ep_read_continue>
}
   47a28:	bd70      	pop	{r4, r5, r6, pc}

00047a2a <adc_context_on_timer_expired>:
{
   47a2a:	b410      	push	{r4}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   47a2c:	f1a0 0308 	sub.w	r3, r0, #8
   47a30:	f3bf 8f5b 	dmb	ish
   47a34:	e853 2f00 	ldrex	r2, [r3]
   47a38:	1c51      	adds	r1, r2, #1
   47a3a:	e843 1400 	strex	r4, r1, [r3]
   47a3e:	2c00      	cmp	r4, #0
   47a40:	d1f8      	bne.n	47a34 <adc_context_on_timer_expired+0xa>
   47a42:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   47a46:	b922      	cbnz	r2, 47a52 <adc_context_on_timer_expired+0x28>
		adc_context_start_sampling(ctx);
   47a48:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
}
   47a4c:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   47a4e:	f7f6 b991 	b.w	3dd74 <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
   47a52:	f06f 030f 	mvn.w	r3, #15
}
   47a56:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   47a58:	6683      	str	r3, [r0, #104]	; 0x68
}
   47a5a:	4770      	bx	lr

00047a5c <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   47a5c:	6903      	ldr	r3, [r0, #16]
   47a5e:	b2c9      	uxtb	r1, r1
   47a60:	220c      	movs	r2, #12
   47a62:	fb01 3302 	mla	r3, r1, r2, r3
   47a66:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   47a68:	f000 0007 	and.w	r0, r0, #7
   47a6c:	4770      	bx	lr

00047a6e <set_on_state>:
	__asm__ volatile(
   47a6e:	f04f 0320 	mov.w	r3, #32
   47a72:	f3ef 8211 	mrs	r2, BASEPRI
   47a76:	f383 8812 	msr	BASEPRI_MAX, r3
   47a7a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   47a7e:	6803      	ldr	r3, [r0, #0]
   47a80:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   47a84:	f043 0302 	orr.w	r3, r3, #2
   47a88:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   47a8a:	f382 8811 	msr	BASEPRI, r2
   47a8e:	f3bf 8f6f 	isb	sy
}
   47a92:	4770      	bx	lr

00047a94 <stop>:
{
   47a94:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   47a96:	6903      	ldr	r3, [r0, #16]
	return &data->subsys[type];
   47a98:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   47a9a:	f04f 0420 	mov.w	r4, #32
   47a9e:	f3ef 8511 	mrs	r5, BASEPRI
   47aa2:	f384 8812 	msr	BASEPRI_MAX, r4
   47aa6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   47aaa:	260c      	movs	r6, #12
   47aac:	fb06 3401 	mla	r4, r6, r1, r3
   47ab0:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   47ab2:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   47ab6:	d008      	beq.n	47aca <stop+0x36>
   47ab8:	42a2      	cmp	r2, r4
   47aba:	d006      	beq.n	47aca <stop+0x36>
	__asm__ volatile(
   47abc:	f385 8811 	msr	BASEPRI, r5
   47ac0:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   47ac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   47ac8:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   47aca:	fb06 3301 	mla	r3, r6, r1, r3
   47ace:	2201      	movs	r2, #1
   47ad0:	641a      	str	r2, [r3, #64]	; 0x40
   47ad2:	f385 8811 	msr	BASEPRI, r5
   47ad6:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   47ada:	6843      	ldr	r3, [r0, #4]
   47adc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   47ae0:	685b      	ldr	r3, [r3, #4]
   47ae2:	4798      	blx	r3
	return 0;
   47ae4:	2000      	movs	r0, #0
   47ae6:	e7ef      	b.n	47ac8 <stop+0x34>

00047ae8 <api_stop>:
	return stop(dev, subsys, CTX_API);
   47ae8:	2280      	movs	r2, #128	; 0x80
   47aea:	f7ff bfd3 	b.w	47a94 <stop>

00047aee <async_start>:
{
   47aee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   47af0:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   47af2:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   47af4:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   47af6:	f04f 0520 	mov.w	r5, #32
   47afa:	f3ef 8611 	mrs	r6, BASEPRI
   47afe:	f385 8812 	msr	BASEPRI_MAX, r5
   47b02:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   47b06:	250c      	movs	r5, #12
   47b08:	fb05 4401 	mla	r4, r5, r1, r4
   47b0c:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   47b0e:	f005 0c07 	and.w	ip, r5, #7
   47b12:	f1bc 0f01 	cmp.w	ip, #1
   47b16:	d10c      	bne.n	47b32 <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   47b18:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   47b1a:	f386 8811 	msr	BASEPRI, r6
   47b1e:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   47b22:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   47b26:	6843      	ldr	r3, [r0, #4]
   47b28:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   47b2c:	4798      	blx	r3
	return 0;
   47b2e:	2000      	movs	r0, #0
}
   47b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   47b32:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   47b36:	42af      	cmp	r7, r5
   47b38:	f386 8811 	msr	BASEPRI, r6
   47b3c:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   47b40:	bf0c      	ite	eq
   47b42:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   47b46:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   47b4a:	e7f1      	b.n	47b30 <async_start+0x42>

00047b4c <api_start>:
{
   47b4c:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   47b4e:	2480      	movs	r4, #128	; 0x80
   47b50:	9400      	str	r4, [sp, #0]
   47b52:	f7ff ffcc 	bl	47aee <async_start>
}
   47b56:	b002      	add	sp, #8
   47b58:	bd10      	pop	{r4, pc}

00047b5a <onoff_started_callback>:
	return &data->mgr[type];
   47b5a:	6900      	ldr	r0, [r0, #16]
{
   47b5c:	b410      	push	{r4}
	return &data->mgr[type];
   47b5e:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   47b60:	241c      	movs	r4, #28
   47b62:	fb03 0004 	mla	r0, r3, r4, r0
   47b66:	2100      	movs	r1, #0
}
   47b68:	bc10      	pop	{r4}
	notify(mgr, 0);
   47b6a:	4710      	bx	r2

00047b6c <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   47b6c:	2000      	movs	r0, #0
   47b6e:	f000 b922 	b.w	47db6 <nrfx_clock_start>

00047b72 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   47b72:	2000      	movs	r0, #0
   47b74:	f7f7 bc38 	b.w	3f3e8 <nrfx_clock_stop>

00047b78 <blocking_start_callback>:
{
   47b78:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   47b7a:	f7f9 bcf3 	b.w	41564 <z_impl_k_sem_give>

00047b7e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   47b7e:	6843      	ldr	r3, [r0, #4]
   47b80:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   47b82:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   47b86:	600b      	str	r3, [r1, #0]
}
   47b88:	2000      	movs	r0, #0
   47b8a:	4770      	bx	lr

00047b8c <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   47b8c:	6843      	ldr	r3, [r0, #4]
   47b8e:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   47b90:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   47b94:	4042      	eors	r2, r0
   47b96:	400a      	ands	r2, r1
   47b98:	4042      	eors	r2, r0
    p_reg->OUT = value;
   47b9a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   47b9e:	2000      	movs	r0, #0
   47ba0:	4770      	bx	lr

00047ba2 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   47ba2:	6843      	ldr	r3, [r0, #4]
   47ba4:	685b      	ldr	r3, [r3, #4]
}
   47ba6:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   47ba8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   47bac:	4770      	bx	lr

00047bae <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   47bae:	6843      	ldr	r3, [r0, #4]
   47bb0:	685b      	ldr	r3, [r3, #4]
}
   47bb2:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   47bb4:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   47bb8:	4770      	bx	lr

00047bba <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   47bba:	6843      	ldr	r3, [r0, #4]
   47bbc:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   47bbe:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   47bc2:	404b      	eors	r3, r1
    p_reg->OUT = value;
   47bc4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   47bc8:	2000      	movs	r0, #0
   47bca:	4770      	bx	lr

00047bcc <gpio_nrfx_manage_callback>:
	return port->data;
   47bcc:	6903      	ldr	r3, [r0, #16]
	return list->head;
   47bce:	6858      	ldr	r0, [r3, #4]
{
   47bd0:	b510      	push	{r4, lr}
	if (!sys_slist_is_empty(callbacks)) {
   47bd2:	b148      	cbz	r0, 47be8 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   47bd4:	4288      	cmp	r0, r1
   47bd6:	d113      	bne.n	47c00 <gpio_nrfx_manage_callback+0x34>
Z_GENLIST_REMOVE(slist, snode)
   47bd8:	689c      	ldr	r4, [r3, #8]
	return node->next;
   47bda:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   47bdc:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   47bde:	42a1      	cmp	r1, r4
   47be0:	d100      	bne.n	47be4 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   47be2:	6098      	str	r0, [r3, #8]
	parent->next = child;
   47be4:	2000      	movs	r0, #0
   47be6:	6008      	str	r0, [r1, #0]
	if (set) {
   47be8:	b97a      	cbnz	r2, 47c0a <gpio_nrfx_manage_callback+0x3e>
	return 0;
   47bea:	2000      	movs	r0, #0
}
   47bec:	bd10      	pop	{r4, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   47bee:	4281      	cmp	r1, r0
   47bf0:	d106      	bne.n	47c00 <gpio_nrfx_manage_callback+0x34>
	return node->next;
   47bf2:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   47bf4:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   47bf6:	6898      	ldr	r0, [r3, #8]
   47bf8:	4281      	cmp	r1, r0
   47bfa:	d1f3      	bne.n	47be4 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   47bfc:	609c      	str	r4, [r3, #8]
}
   47bfe:	e7f1      	b.n	47be4 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   47c00:	4604      	mov	r4, r0
   47c02:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   47c04:	2800      	cmp	r0, #0
   47c06:	d1f2      	bne.n	47bee <gpio_nrfx_manage_callback+0x22>
			if (!set) {
   47c08:	b13a      	cbz	r2, 47c1a <gpio_nrfx_manage_callback+0x4e>
	parent->next = child;
   47c0a:	685a      	ldr	r2, [r3, #4]
   47c0c:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   47c0e:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   47c10:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   47c12:	2a00      	cmp	r2, #0
   47c14:	d1e9      	bne.n	47bea <gpio_nrfx_manage_callback+0x1e>
	list->tail = node;
   47c16:	6099      	str	r1, [r3, #8]
}
   47c18:	e7e7      	b.n	47bea <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   47c1a:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   47c1e:	e7e5      	b.n	47bec <gpio_nrfx_manage_callback+0x20>

00047c20 <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   47c20:	b573      	push	{r0, r1, r4, r5, r6, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   47c22:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));

	if (length > sizeof(dev_id.id)) {
   47c26:	2908      	cmp	r1, #8
   47c28:	6e66      	ldr	r6, [r4, #100]	; 0x64
   47c2a:	6e65      	ldr	r5, [r4, #100]	; 0x64
   47c2c:	6e62      	ldr	r2, [r4, #100]	; 0x64
   47c2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
   47c30:	ea4f 2515 	mov.w	r5, r5, lsr #8
   47c34:	ea4f 6303 	mov.w	r3, r3, lsl #24
   47c38:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   47c3c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
   47c40:	ea4f 2202 	mov.w	r2, r2, lsl #8
   47c44:	ea43 0305 	orr.w	r3, r3, r5
   47c48:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   47c4c:	ea43 0302 	orr.w	r3, r3, r2
   47c50:	9300      	str	r3, [sp, #0]
   47c52:	6e26      	ldr	r6, [r4, #96]	; 0x60
   47c54:	6e25      	ldr	r5, [r4, #96]	; 0x60
   47c56:	6e22      	ldr	r2, [r4, #96]	; 0x60
   47c58:	6e23      	ldr	r3, [r4, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   47c5a:	ea4f 2415 	mov.w	r4, r5, lsr #8
   47c5e:	ea4f 6303 	mov.w	r3, r3, lsl #24
   47c62:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   47c66:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   47c6a:	ea43 0304 	orr.w	r3, r3, r4
   47c6e:	ea4f 2402 	mov.w	r4, r2, lsl #8
	if (length > sizeof(dev_id.id)) {
   47c72:	bf28      	it	cs
   47c74:	2108      	movcs	r1, #8
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   47c76:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
   47c7a:	4323      	orrs	r3, r4
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
   47c7c:	460a      	mov	r2, r1
	if (length > sizeof(dev_id.id)) {
   47c7e:	460c      	mov	r4, r1
	memcpy(buffer, dev_id.id, length);
   47c80:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   47c82:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
   47c84:	f7fc ff1d 	bl	44ac2 <memcpy>

	return length;
}
   47c88:	4620      	mov	r0, r4
   47c8a:	b002      	add	sp, #8
   47c8c:	bd70      	pop	{r4, r5, r6, pc}

00047c8e <is_regular_addr_valid>:
{
   47c8e:	b538      	push	{r3, r4, r5, lr}
   47c90:	4605      	mov	r5, r0
   47c92:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   47c94:	f000 f913 	bl	47ebe <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   47c98:	2d00      	cmp	r5, #0
   47c9a:	db07      	blt.n	47cac <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   47c9c:	42a8      	cmp	r0, r5
   47c9e:	d905      	bls.n	47cac <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   47ca0:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   47ca2:	4284      	cmp	r4, r0
   47ca4:	bf8c      	ite	hi
   47ca6:	2000      	movhi	r0, #0
   47ca8:	2001      	movls	r0, #1
}
   47caa:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   47cac:	2000      	movs	r0, #0
   47cae:	e7fc      	b.n	47caa <is_regular_addr_valid+0x1c>

00047cb0 <flash_nrf_read>:
{
   47cb0:	b570      	push	{r4, r5, r6, lr}
   47cb2:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   47cb4:	4628      	mov	r0, r5
   47cb6:	4619      	mov	r1, r3
{
   47cb8:	4616      	mov	r6, r2
   47cba:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   47cbc:	f7ff ffe7 	bl	47c8e <is_regular_addr_valid>
   47cc0:	b138      	cbz	r0, 47cd2 <flash_nrf_read+0x22>
	if (!len) {
   47cc2:	b124      	cbz	r4, 47cce <flash_nrf_read+0x1e>
	memcpy(data, (void *)addr, len);
   47cc4:	4622      	mov	r2, r4
   47cc6:	4629      	mov	r1, r5
   47cc8:	4630      	mov	r0, r6
   47cca:	f7fc fefa 	bl	44ac2 <memcpy>
		return 0;
   47cce:	2000      	movs	r0, #0
}
   47cd0:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   47cd2:	f06f 0015 	mvn.w	r0, #21
   47cd6:	e7fb      	b.n	47cd0 <flash_nrf_read+0x20>

00047cd8 <nrf_flash_sync_is_required>:
	return ticker_is_initialized(0);
   47cd8:	2000      	movs	r0, #0
   47cda:	f7e9 b87f 	b.w	30ddc <ticker_is_initialized>

00047cde <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   47cde:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   47ce2:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   47ce4:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   47ce6:	f04f 0800 	mov.w	r8, #0
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
   47cea:	691b      	ldr	r3, [r3, #16]
	info->start_offset = 0;
   47cec:	f8c4 8000 	str.w	r8, [r4]
{
   47cf0:	460d      	mov	r5, r1
   47cf2:	4616      	mov	r6, r2
	info->index = 0U;
   47cf4:	f8c4 8008 	str.w	r8, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
   47cf8:	aa01      	add	r2, sp, #4
   47cfa:	4669      	mov	r1, sp
   47cfc:	4798      	blx	r3

	while (layout_size--) {
   47cfe:	e9dd 7c00 	ldrd	r7, ip, [sp]
   47d02:	4640      	mov	r0, r8
		info->size = layout->pages_size;
   47d04:	f107 0e04 	add.w	lr, r7, #4
	while (layout_size--) {
   47d08:	4560      	cmp	r0, ip
   47d0a:	d104      	bne.n	47d16 <flash_get_page_info+0x38>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   47d0c:	f06f 0015 	mvn.w	r0, #21
}
   47d10:	b003      	add	sp, #12
   47d12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
   47d16:	f85e 9030 	ldr.w	r9, [lr, r0, lsl #3]
			index_jmp = index - info->index;
   47d1a:	68a1      	ldr	r1, [r4, #8]
			index_jmp = (offs - info->start_offset) / info->size;
   47d1c:	6822      	ldr	r2, [r4, #0]
		info->size = layout->pages_size;
   47d1e:	f8c4 9004 	str.w	r9, [r4, #4]
		if (offs == 0) {
   47d22:	b985      	cbnz	r5, 47d46 <flash_get_page_info+0x68>
			index_jmp = index - info->index;
   47d24:	1a73      	subs	r3, r6, r1
		index_jmp = MIN(index_jmp, layout->pages_count);
   47d26:	f857 8030 	ldr.w	r8, [r7, r0, lsl #3]
   47d2a:	4543      	cmp	r3, r8
   47d2c:	bf28      	it	cs
   47d2e:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
   47d30:	fb03 2209 	mla	r2, r3, r9, r2
		info->index += index_jmp;
   47d34:	4419      	add	r1, r3
		if (index_jmp < layout->pages_count) {
   47d36:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
   47d38:	6022      	str	r2, [r4, #0]
		info->index += index_jmp;
   47d3a:	60a1      	str	r1, [r4, #8]
		if (index_jmp < layout->pages_count) {
   47d3c:	f100 0001 	add.w	r0, r0, #1
   47d40:	d9e2      	bls.n	47d08 <flash_get_page_info+0x2a>
			return 0;
   47d42:	2000      	movs	r0, #0
   47d44:	e7e4      	b.n	47d10 <flash_get_page_info+0x32>
			index_jmp = (offs - info->start_offset) / info->size;
   47d46:	1aab      	subs	r3, r5, r2
   47d48:	fbb3 f3f9 	udiv	r3, r3, r9
   47d4c:	e7eb      	b.n	47d26 <flash_get_page_info+0x48>

00047d4e <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   47d4e:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   47d50:	2200      	movs	r2, #0
   47d52:	f7ff bfc4 	b.w	47cde <flash_get_page_info>

00047d56 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   47d56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   47d5a:	6883      	ldr	r3, [r0, #8]
{
   47d5c:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   47d5e:	691b      	ldr	r3, [r3, #16]
{
   47d60:	4688      	mov	r8, r1
   47d62:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   47d64:	a901      	add	r1, sp, #4
   47d66:	aa02      	add	r2, sp, #8
   47d68:	4798      	blx	r3
	off_t off = 0;
   47d6a:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   47d6c:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   47d6e:	4625      	mov	r5, r4
   47d70:	9b02      	ldr	r3, [sp, #8]
   47d72:	42ab      	cmp	r3, r5
   47d74:	d802      	bhi.n	47d7c <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   47d76:	b006      	add	sp, #24
   47d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   47d7c:	9f01      	ldr	r7, [sp, #4]
   47d7e:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   47d82:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   47d84:	687b      	ldr	r3, [r7, #4]
   47d86:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   47d88:	683a      	ldr	r2, [r7, #0]
   47d8a:	42b2      	cmp	r2, r6
   47d8c:	eb0a 0306 	add.w	r3, sl, r6
   47d90:	d802      	bhi.n	47d98 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   47d92:	3501      	adds	r5, #1
   47d94:	469a      	mov	sl, r3
   47d96:	e7eb      	b.n	47d70 <flash_page_foreach+0x1a>
			page_info.start_offset = off;
   47d98:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   47d9a:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   47d9c:	4649      	mov	r1, r9
   47d9e:	a803      	add	r0, sp, #12
   47da0:	47c0      	blx	r8
   47da2:	2800      	cmp	r0, #0
   47da4:	d0e7      	beq.n	47d76 <flash_page_foreach+0x20>
			off += page_info.size;
   47da6:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   47da8:	3601      	adds	r6, #1
			off += page_info.size;
   47daa:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   47dac:	e7ec      	b.n	47d88 <flash_page_foreach+0x32>

00047dae <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   47dae:	4770      	bx	lr

00047db0 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   47db0:	4700      	bx	r0

00047db2 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   47db2:	f000 bf20 	b.w	48bf6 <z_impl_k_busy_wait>

00047db6 <nrfx_clock_start>:
    switch (domain)
   47db6:	b110      	cbz	r0, 47dbe <nrfx_clock_start+0x8>
   47db8:	2801      	cmp	r0, #1
   47dba:	d01d      	beq.n	47df8 <nrfx_clock_start+0x42>
   47dbc:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   47dbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   47dc2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   47dc6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   47dca:	03c9      	lsls	r1, r1, #15
   47dcc:	d512      	bpl.n	47df4 <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   47dce:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   47dd2:	2a01      	cmp	r2, #1
   47dd4:	d10e      	bne.n	47df4 <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   47dd6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   47dda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   47dde:	2200      	movs	r2, #0
   47de0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   47de4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   47de8:	2202      	movs	r2, #2
   47dea:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   47dee:	2201      	movs	r2, #1
   47df0:	609a      	str	r2, [r3, #8]
}
   47df2:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   47df4:	2200      	movs	r2, #0
   47df6:	e7ee      	b.n	47dd6 <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   47df8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   47dfc:	2200      	movs	r2, #0
   47dfe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   47e02:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   47e06:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   47e0a:	6018      	str	r0, [r3, #0]
}
   47e0c:	4770      	bx	lr

00047e0e <nrf_gpio_reconfigure>:
{
   47e0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   47e10:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   47e12:	a801      	add	r0, sp, #4
{
   47e14:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   47e18:	4616      	mov	r6, r2
   47e1a:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   47e1c:	f7f7 fb54 	bl	3f4c8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   47e20:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   47e22:	f1b6 0c00 	subs.w	ip, r6, #0
   47e26:	bf18      	it	ne
   47e28:	f04f 0c01 	movne.w	ip, #1
   47e2c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   47e30:	1e0b      	subs	r3, r1, #0
   47e32:	bf18      	it	ne
   47e34:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   47e36:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   47e38:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   47e3c:	bf14      	ite	ne
   47e3e:	f04f 0c0c 	movne.w	ip, #12
   47e42:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   47e46:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   47e48:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   47e4c:	bf14      	ite	ne
   47e4e:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   47e52:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   47e56:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   47e58:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   47e5c:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   47e60:	bf14      	ite	ne
   47e62:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   47e66:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   47e6a:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   47e6e:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   47e72:	b101      	cbz	r1, 47e76 <nrf_gpio_reconfigure+0x68>
   47e74:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   47e76:	b10e      	cbz	r6, 47e7c <nrf_gpio_reconfigure+0x6e>
   47e78:	7836      	ldrb	r6, [r6, #0]
   47e7a:	0076      	lsls	r6, r6, #1
   47e7c:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   47e7e:	b10d      	cbz	r5, 47e84 <nrf_gpio_reconfigure+0x76>
   47e80:	782d      	ldrb	r5, [r5, #0]
   47e82:	00ad      	lsls	r5, r5, #2
   47e84:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   47e86:	b10c      	cbz	r4, 47e8c <nrf_gpio_reconfigure+0x7e>
   47e88:	7824      	ldrb	r4, [r4, #0]
   47e8a:	0224      	lsls	r4, r4, #8
   47e8c:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   47e8e:	b10f      	cbz	r7, 47e94 <nrf_gpio_reconfigure+0x86>
   47e90:	783f      	ldrb	r7, [r7, #0]
   47e92:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   47e94:	430c      	orrs	r4, r1
   47e96:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   47e98:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   47e9c:	b003      	add	sp, #12
   47e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00047ea0 <nrf_gpio_cfg_sense_set>:
{
   47ea0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   47ea2:	f10d 030f 	add.w	r3, sp, #15
   47ea6:	9301      	str	r3, [sp, #4]
   47ea8:	2300      	movs	r3, #0
{
   47eaa:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   47eae:	9300      	str	r3, [sp, #0]
   47eb0:	461a      	mov	r2, r3
   47eb2:	4619      	mov	r1, r3
   47eb4:	f7ff ffab 	bl	47e0e <nrf_gpio_reconfigure>
}
   47eb8:	b005      	add	sp, #20
   47eba:	f85d fb04 	ldr.w	pc, [sp], #4

00047ebe <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
   47ebe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   47ec2:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
   47ec4:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   47ec6:	4350      	muls	r0, r2
   47ec8:	4770      	bx	lr

00047eca <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   47eca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   47ece:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   47ed0:	4770      	bx	lr

00047ed2 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   47ed2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   47ed6:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   47ed8:	4770      	bx	lr

00047eda <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   47eda:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   47ede:	681a      	ldr	r2, [r3, #0]
   47ee0:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   47ee2:	bf1f      	itttt	ne
   47ee4:	2200      	movne	r2, #0
   47ee6:	601a      	strne	r2, [r3, #0]
   47ee8:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   47eea:	2001      	movne	r0, #1
   47eec:	bf08      	it	eq
   47eee:	2000      	moveq	r0, #0
}
   47ef0:	4770      	bx	lr

00047ef2 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
   47ef2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   47ef6:	f44f 7260 	mov.w	r2, #896	; 0x380
   47efa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   47efe:	4770      	bx	lr

00047f00 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
   47f00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   47f04:	f44f 7260 	mov.w	r2, #896	; 0x380
   47f08:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   47f0c:	4770      	bx	lr

00047f0e <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
   47f0e:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
   47f10:	f7f7 fec8 	bl	3fca4 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
   47f14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
   47f18:	f7f7 baa2 	b.w	3f460 <nrfx_clock_irq_handler>

00047f1c <nrfx_usbd_consumer>:
{
   47f1c:	b530      	push	{r4, r5, lr}
        p_next->p_data = p_transfer->p_data;
   47f1e:	e9d1 5400 	ldrd	r5, r4, [r1]
    if (size < data_size)
   47f22:	42a3      	cmp	r3, r4
        p_next->p_data = p_transfer->p_data;
   47f24:	bf97      	itett	ls
   47f26:	e9c0 5300 	strdls	r5, r3, [r0]
        p_next->size = 0;
   47f2a:	2100      	movhi	r1, #0
        size -= data_size;
   47f2c:	1ae4      	subls	r4, r4, r3
        p_transfer->p_data.addr += data_size;
   47f2e:	18ed      	addls	r5, r5, r3
        p_next->p_data = p_transfer->p_data;
   47f30:	bf8e      	itee	hi
   47f32:	e9c0 5100 	strdhi	r5, r1, [r0]
        p_transfer->size = size;
   47f36:	604c      	strls	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
   47f38:	600d      	strls	r5, [r1, #0]
    return (ep_size == data_size) && (size != 0);
   47f3a:	429a      	cmp	r2, r3
   47f3c:	d103      	bne.n	47f46 <nrfx_usbd_consumer+0x2a>
   47f3e:	1e20      	subs	r0, r4, #0
   47f40:	bf18      	it	ne
   47f42:	2001      	movne	r0, #1
}
   47f44:	bd30      	pop	{r4, r5, pc}
    return (ep_size == data_size) && (size != 0);
   47f46:	2000      	movs	r0, #0
   47f48:	e7fc      	b.n	47f44 <nrfx_usbd_consumer+0x28>

00047f4a <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
   47f4a:	684b      	ldr	r3, [r1, #4]
{
   47f4c:	b510      	push	{r4, lr}
   47f4e:	429a      	cmp	r2, r3
    p_next->p_data = p_transfer->p_data;
   47f50:	680c      	ldr	r4, [r1, #0]
   47f52:	bf28      	it	cs
   47f54:	461a      	movcs	r2, r3
    p_next->size = tx_size;
   47f56:	e9c0 4200 	strd	r4, r2, [r0]
    p_transfer->size -= tx_size;
   47f5a:	1a98      	subs	r0, r3, r2
    p_transfer->p_data.addr += tx_size;
   47f5c:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
   47f5e:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   47f60:	4413      	add	r3, r2
}
   47f62:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   47f64:	600b      	str	r3, [r1, #0]
}
   47f66:	bf18      	it	ne
   47f68:	2001      	movne	r0, #1
   47f6a:	bd10      	pop	{r4, pc}

00047f6c <nrfx_usbd_feeder_ram_zlp>:
{
   47f6c:	b530      	push	{r4, r5, lr}
    size_t tx_size = p_transfer->size;
   47f6e:	684c      	ldr	r4, [r1, #4]
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   47f70:	680b      	ldr	r3, [r1, #0]
   47f72:	42a2      	cmp	r2, r4
   47f74:	bf28      	it	cs
   47f76:	4622      	movcs	r2, r4
   47f78:	2a00      	cmp	r2, #0
   47f7a:	bf14      	ite	ne
   47f7c:	461d      	movne	r5, r3
   47f7e:	2500      	moveq	r5, #0
    p_transfer->size -= tx_size;
   47f80:	eba4 0402 	sub.w	r4, r4, r2
    p_transfer->p_data.addr += tx_size;
   47f84:	4413      	add	r3, r2
    p_next->size = tx_size;
   47f86:	e9c0 5200 	strd	r5, r2, [r0]
    p_transfer->size -= tx_size;
   47f8a:	604c      	str	r4, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   47f8c:	600b      	str	r3, [r1, #0]
}
   47f8e:	bf14      	ite	ne
   47f90:	2001      	movne	r0, #1
   47f92:	2000      	moveq	r0, #0
   47f94:	bd30      	pop	{r4, r5, pc}

00047f96 <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
   47f96:	43c3      	mvns	r3, r0
   47f98:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   47f9c:	f000 000f 	and.w	r0, r0, #15
}
   47fa0:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   47fa4:	4770      	bx	lr

00047fa6 <ev_started_handler>:
}
   47fa6:	4770      	bx	lr

00047fa8 <nrf_usbd_epin_dma_handler>:
{
   47fa8:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
   47faa:	f7f7 ffe9 	bl	3ff80 <usbd_dma_pending_clear>
{
   47fae:	4601      	mov	r1, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
   47fb0:	f7f7 fedc 	bl	3fd6c <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   47fb4:	7b83      	ldrb	r3, [r0, #14]
   47fb6:	2b03      	cmp	r3, #3
   47fb8:	d10a      	bne.n	47fd0 <nrf_usbd_epin_dma_handler+0x28>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   47fba:	4608      	mov	r0, r1
   47fbc:	f7ff ffeb 	bl	47f96 <ep2bit>
   47fc0:	2301      	movs	r3, #1
   47fc2:	fa03 f000 	lsl.w	r0, r3, r0
   47fc6:	43c0      	mvns	r0, r0
}
   47fc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   47fcc:	f7f7 bfc8 	b.w	3ff60 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   47fd0:	6803      	ldr	r3, [r0, #0]
   47fd2:	2b00      	cmp	r3, #0
   47fd4:	d0f1      	beq.n	47fba <nrf_usbd_epin_dma_handler+0x12>
}
   47fd6:	bd08      	pop	{r3, pc}

00047fd8 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
   47fd8:	2087      	movs	r0, #135	; 0x87
   47fda:	f7ff bfe5 	b.w	47fa8 <nrf_usbd_epin_dma_handler>

00047fde <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
   47fde:	2086      	movs	r0, #134	; 0x86
   47fe0:	f7ff bfe2 	b.w	47fa8 <nrf_usbd_epin_dma_handler>

00047fe4 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
   47fe4:	2085      	movs	r0, #133	; 0x85
   47fe6:	f7ff bfdf 	b.w	47fa8 <nrf_usbd_epin_dma_handler>

00047fea <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
   47fea:	2084      	movs	r0, #132	; 0x84
   47fec:	f7ff bfdc 	b.w	47fa8 <nrf_usbd_epin_dma_handler>

00047ff0 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
   47ff0:	2083      	movs	r0, #131	; 0x83
   47ff2:	f7ff bfd9 	b.w	47fa8 <nrf_usbd_epin_dma_handler>

00047ff6 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
   47ff6:	2082      	movs	r0, #130	; 0x82
   47ff8:	f7ff bfd6 	b.w	47fa8 <nrf_usbd_epin_dma_handler>

00047ffc <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
   47ffc:	2081      	movs	r0, #129	; 0x81
   47ffe:	f7ff bfd3 	b.w	47fa8 <nrf_usbd_epin_dma_handler>

00048002 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
   48002:	f7f7 bfcf 	b.w	3ffa4 <nrf_usbd_ep0in_dma_handler>

00048006 <nrfx_usbd_ep_max_packet_size_set>:
{
   48006:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
   48008:	f7f7 feb0 	bl	3fd6c <ep_state_access>
    p_state->max_packet_size = size;
   4800c:	8181      	strh	r1, [r0, #12]
}
   4800e:	bd08      	pop	{r3, pc}

00048010 <nrfx_usbd_ep_status_get>:
{
   48010:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
   48012:	f7f7 feab 	bl	3fd6c <ep_state_access>
	__asm__ volatile(
   48016:	f04f 0220 	mov.w	r2, #32
   4801a:	f3ef 8311 	mrs	r3, BASEPRI
   4801e:	f382 8812 	msr	BASEPRI_MAX, r2
   48022:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
   48026:	6882      	ldr	r2, [r0, #8]
   48028:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   4802a:	6802      	ldr	r2, [r0, #0]
   4802c:	b92a      	cbnz	r2, 4803a <nrfx_usbd_ep_status_get+0x2a>
   4802e:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
   48030:	f383 8811 	msr	BASEPRI, r3
   48034:	f3bf 8f6f 	isb	sy
}
   48038:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   4803a:	2004      	movs	r0, #4
   4803c:	e7f8      	b.n	48030 <nrfx_usbd_ep_status_get+0x20>

0004803e <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
   4803e:	2007      	movs	r0, #7
   48040:	f7f8 baf0 	b.w	40624 <nrf_usbd_epout_dma_handler>

00048044 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
   48044:	2006      	movs	r0, #6
   48046:	f7f8 baed 	b.w	40624 <nrf_usbd_epout_dma_handler>

0004804a <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
   4804a:	2005      	movs	r0, #5
   4804c:	f7f8 baea 	b.w	40624 <nrf_usbd_epout_dma_handler>

00048050 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
   48050:	2004      	movs	r0, #4
   48052:	f7f8 bae7 	b.w	40624 <nrf_usbd_epout_dma_handler>

00048056 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
   48056:	2003      	movs	r0, #3
   48058:	f7f8 bae4 	b.w	40624 <nrf_usbd_epout_dma_handler>

0004805c <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
   4805c:	2002      	movs	r0, #2
   4805e:	f7f8 bae1 	b.w	40624 <nrf_usbd_epout_dma_handler>

00048062 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
   48062:	2001      	movs	r0, #1
   48064:	f7f8 bade 	b.w	40624 <nrf_usbd_epout_dma_handler>

00048068 <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
   48068:	f7f8 bbd2 	b.w	40810 <usbd_ep_abort>

0004806c <debounce_update>:
        state->counter -= elapsed_ms;
    }
}

void debounce_update(struct debounce_state *state, const bool active, const int elapsed_ms,
                     const struct debounce_config *config) {
   4806c:	b570      	push	{r4, r5, r6, lr}
    // This uses a variation of the integrator debouncing described at
    // https://www.kennethkuhn.com/electronics/debounce.c
    // Every update where "active" does not match the current state, we increment
    // a counter, otherwise we decrement it. When the counter reaches a
    // threshold, the state flips and we reset the counter.
    state->changed = false;
   4806e:	7804      	ldrb	r4, [r0, #0]
   48070:	f36f 0441 	bfc	r4, #1, #1
   48074:	7004      	strb	r4, [r0, #0]

    if (active == state->pressed) {
   48076:	f004 0501 	and.w	r5, r4, #1
    if (state->counter < elapsed_ms) {
   4807a:	8804      	ldrh	r4, [r0, #0]
    if (active == state->pressed) {
   4807c:	428d      	cmp	r5, r1
    if (state->counter < elapsed_ms) {
   4807e:	f3c4 068d 	ubfx	r6, r4, #2, #14
    if (active == state->pressed) {
   48082:	d109      	bne.n	48098 <debounce_update+0x2c>
    if (state->counter < elapsed_ms) {
   48084:	42b2      	cmp	r2, r6
   48086:	dd03      	ble.n	48090 <debounce_update+0x24>
        state->counter = 0;
   48088:	f36f 048f 	bfc	r4, #2, #14
    if (state->counter < flip_threshold) {
        increment_counter(state, elapsed_ms);
        return;
    }

    state->pressed = !state->pressed;
   4808c:	8004      	strh	r4, [r0, #0]
    state->counter = 0;
    state->changed = true;
}
   4808e:	bd70      	pop	{r4, r5, r6, pc}
        state->counter -= elapsed_ms;
   48090:	1ab6      	subs	r6, r6, r2
        state->counter += elapsed_ms;
   48092:	f366 048f 	bfi	r4, r6, #2, #14
   48096:	e7f9      	b.n	4808c <debounce_update+0x20>
    return state->pressed ? config->debounce_release_ms : config->debounce_press_ms;
   48098:	e9d3 1300 	ldrd	r1, r3, [r3]
   4809c:	f014 0f01 	tst.w	r4, #1
   480a0:	bf18      	it	ne
   480a2:	4619      	movne	r1, r3
    if (state->counter < flip_threshold) {
   480a4:	428e      	cmp	r6, r1
   480a6:	d208      	bcs.n	480ba <debounce_update+0x4e>
    if (state->counter + elapsed_ms > DEBOUNCE_COUNTER_MAX) {
   480a8:	4416      	add	r6, r2
   480aa:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
   480ae:	d3f0      	bcc.n	48092 <debounce_update+0x26>
        state->counter = DEBOUNCE_COUNTER_MAX;
   480b0:	f643 73ff 	movw	r3, #16383	; 0x3fff
   480b4:	f363 048f 	bfi	r4, r3, #2, #14
   480b8:	e7e8      	b.n	4808c <debounce_update+0x20>
    state->pressed = !state->pressed;
   480ba:	f085 0401 	eor.w	r4, r5, #1
   480be:	f044 0402 	orr.w	r4, r4, #2
   480c2:	e7e3      	b.n	4808c <debounce_update+0x20>

000480c4 <debounce_is_active>:

bool debounce_is_active(const struct debounce_state *state) {
    return state->pressed || state->counter > 0;
   480c4:	8800      	ldrh	r0, [r0, #0]
   480c6:	f020 0002 	bic.w	r0, r0, #2
   480ca:	b280      	uxth	r0, r0
}
   480cc:	3800      	subs	r0, #0
   480ce:	bf18      	it	ne
   480d0:	2001      	movne	r0, #1
   480d2:	4770      	bx	lr

000480d4 <debounce_is_pressed>:

bool debounce_is_pressed(const struct debounce_state *state) { return state->pressed; }
   480d4:	7800      	ldrb	r0, [r0, #0]
   480d6:	f000 0001 	and.w	r0, r0, #1
   480da:	4770      	bx	lr

000480dc <debounce_get_changed>:

   480dc:	7800      	ldrb	r0, [r0, #0]
   480de:	f3c0 0040 	ubfx	r0, r0, #1, #1
   480e2:	4770      	bx	lr

000480e4 <z_impl_gpio_pin_configure>:
{
   480e4:	b4f0      	push	{r4, r5, r6, r7}
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   480e6:	04d4      	lsls	r4, r2, #19
	const struct gpio_driver_api *api =
   480e8:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
   480ea:	6906      	ldr	r6, [r0, #16]
{
   480ec:	4613      	mov	r3, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   480ee:	d506      	bpl.n	480fe <z_impl_gpio_pin_configure+0x1a>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   480f0:	f412 6f40 	tst.w	r2, #3072	; 0xc00
   480f4:	d003      	beq.n	480fe <z_impl_gpio_pin_configure+0x1a>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   480f6:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   480f8:	bf48      	it	mi
   480fa:	f483 6340 	eormi.w	r3, r3, #3072	; 0xc00
		data->invert |= (gpio_port_pins_t)BIT(pin);
   480fe:	6834      	ldr	r4, [r6, #0]
   48100:	2501      	movs	r5, #1
   48102:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   48104:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   48108:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   4810a:	bf4c      	ite	mi
   4810c:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   4810e:	43ac      	bicpl	r4, r5
	return api->pin_configure(port, pin, flags);
   48110:	683b      	ldr	r3, [r7, #0]
   48112:	6034      	str	r4, [r6, #0]
}
   48114:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
   48116:	4718      	bx	r3

00048118 <kscan_direct_configure>:
    struct kscan_direct_data *data = dev->data;
   48118:	6903      	ldr	r3, [r0, #16]
    if (!callback) {
   4811a:	b111      	cbz	r1, 48122 <kscan_direct_configure+0xa>
    data->callback = callback;
   4811c:	6059      	str	r1, [r3, #4]
    return 0;
   4811e:	2000      	movs	r0, #0
   48120:	4770      	bx	lr
        return -EINVAL;
   48122:	f06f 0015 	mvn.w	r0, #21
}
   48126:	4770      	bx	lr

00048128 <kscan_direct_interrupt_configure.isra.0>:
static int kscan_direct_interrupt_configure(const struct device *dev, const gpio_flags_t flags) {
   48128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   4812c:	4606      	mov	r6, r0
   4812e:	460c      	mov	r4, r1
    for (int i = 0; i < config->inputs.len; i++) {
   48130:	2500      	movs	r5, #0
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   48132:	f401 4700 	and.w	r7, r1, #32768	; 0x8000
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   48136:	f04f 0801 	mov.w	r8, #1
   4813a:	6873      	ldr	r3, [r6, #4]
   4813c:	42ab      	cmp	r3, r5
   4813e:	d802      	bhi.n	48146 <kscan_direct_interrupt_configure.isra.0+0x1e>
    return 0;
   48140:	2000      	movs	r0, #0
}
   48142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        const struct gpio_dt_spec *gpio = &config->inputs.gpios[i];
   48146:	6833      	ldr	r3, [r6, #0]
   48148:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   4814c:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
   48150:	7911      	ldrb	r1, [r2, #4]
	const struct gpio_driver_api *api =
   48152:	f8d0 c008 	ldr.w	ip, [r0, #8]
	const struct gpio_driver_data *const data =
   48156:	6902      	ldr	r2, [r0, #16]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   48158:	b18f      	cbz	r7, 4817e <kscan_direct_interrupt_configure.isra.0+0x56>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   4815a:	6812      	ldr	r2, [r2, #0]
   4815c:	fa08 f301 	lsl.w	r3, r8, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   48160:	4213      	tst	r3, r2
   48162:	d00c      	beq.n	4817e <kscan_direct_interrupt_configure.isra.0+0x56>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   48164:	f484 22c0 	eor.w	r2, r4, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   48168:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
   4816c:	f8dc 9018 	ldr.w	r9, [ip, #24]
   48170:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
   48174:	47c8      	blx	r9
        if (err) {
   48176:	2800      	cmp	r0, #0
   48178:	d1e3      	bne.n	48142 <kscan_direct_interrupt_configure.isra.0+0x1a>
    for (int i = 0; i < config->inputs.len; i++) {
   4817a:	3501      	adds	r5, #1
   4817c:	e7dd      	b.n	4813a <kscan_direct_interrupt_configure.isra.0+0x12>
   4817e:	4622      	mov	r2, r4
   48180:	e7f2      	b.n	48168 <kscan_direct_interrupt_configure.isra.0+0x40>

00048182 <kscan_direct_irq_callback_handler>:
    struct kscan_direct_data *data = irq_data->dev->data;
   48182:	f851 3c04 	ldr.w	r3, [r1, #-4]
                                              const gpio_port_pins_t pin) {
   48186:	b510      	push	{r4, lr}
    struct kscan_direct_data *data = irq_data->dev->data;
   48188:	691c      	ldr	r4, [r3, #16]
    return kscan_direct_interrupt_configure(dev, GPIO_INT_DISABLE);
   4818a:	6823      	ldr	r3, [r4, #0]
   4818c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   48190:	6858      	ldr	r0, [r3, #4]
   48192:	f7ff ffc9 	bl	48128 <kscan_direct_interrupt_configure.isra.0>
	return z_impl_k_uptime_ticks();
   48196:	f000 fd2c 	bl	48bf2 <z_impl_k_uptime_ticks>
   4819a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   4819e:	fba0 0302 	umull	r0, r3, r0, r2
   481a2:	fb02 3101 	mla	r1, r2, r1, r3
   481a6:	0bc0      	lsrs	r0, r0, #15
   481a8:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   481ac:	0bc9      	lsrs	r1, r1, #15
    data->scan_time = k_uptime_get();
   481ae:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
    k_work_reschedule(&data->work, K_NO_WAIT);
   481b2:	2200      	movs	r2, #0
   481b4:	f104 0008 	add.w	r0, r4, #8
   481b8:	2300      	movs	r3, #0
}
   481ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    k_work_reschedule(&data->work, K_NO_WAIT);
   481be:	f7f9 bbf1 	b.w	419a4 <k_work_reschedule>

000481c2 <kscan_direct_read>:
static int kscan_direct_read(const struct device *dev) {
   481c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const struct kscan_direct_config *config = dev->config;
   481c6:	6844      	ldr	r4, [r0, #4]
    struct kscan_direct_data *data = dev->data;
   481c8:	f8d0 8010 	ldr.w	r8, [r0, #16]
static int kscan_direct_read(const struct device *dev) {
   481cc:	4606      	mov	r6, r0
    for (int i = 0; i < config->inputs.len; i++) {
   481ce:	2500      	movs	r5, #0
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   481d0:	f04f 0901 	mov.w	r9, #1
        debounce_update(&data->pin_state[i], active, config->debounce_scan_period_ms,
   481d4:	f104 0a08 	add.w	sl, r4, #8
    for (int i = 0; i < config->inputs.len; i++) {
   481d8:	6863      	ldr	r3, [r4, #4]
   481da:	42ab      	cmp	r3, r5
   481dc:	d835      	bhi.n	4824a <kscan_direct_read+0x88>
    for (int i = 0; i < config->inputs.len; i++) {
   481de:	f04f 0900 	mov.w	r9, #0
    bool continue_scan = false;
   481e2:	464d      	mov	r5, r9
    for (int i = 0; i < config->inputs.len; i++) {
   481e4:	6863      	ldr	r3, [r4, #4]
   481e6:	454b      	cmp	r3, r9
   481e8:	d853      	bhi.n	48292 <kscan_direct_read+0xd0>
    const struct kscan_direct_config *config = dev->config;
   481ea:	6870      	ldr	r0, [r6, #4]
    if (continue_scan) {
   481ec:	2d00      	cmp	r5, #0
   481ee:	f000 809e 	beq.w	4832e <kscan_direct_read+0x16c>
    struct kscan_direct_data *data = dev->data;
   481f2:	6934      	ldr	r4, [r6, #16]
    data->scan_time += config->debounce_scan_period_ms;
   481f4:	6903      	ldr	r3, [r0, #16]
   481f6:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	; 0x40
   481fa:	1818      	adds	r0, r3, r0
   481fc:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   48200:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
   48204:	03c9      	lsls	r1, r1, #15
   48206:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   4820a:	f240 33e7 	movw	r3, #999	; 0x3e7
   4820e:	03c0      	lsls	r0, r0, #15
   48210:	18c0      	adds	r0, r0, r3
   48212:	f141 0100 	adc.w	r1, r1, #0
    k_work_reschedule(&data->work, K_TIMEOUT_ABS_MS(data->scan_time));
   48216:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   4821a:	f171 0300 	sbcs.w	r3, r1, #0
   4821e:	f104 0408 	add.w	r4, r4, #8
   48222:	d37f      	bcc.n	48324 <kscan_direct_read+0x162>
   48224:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   48228:	2300      	movs	r3, #0
   4822a:	f7dd ff69 	bl	26100 <__aeabi_uldivmod>
   4822e:	f06f 0201 	mvn.w	r2, #1
   48232:	1a12      	subs	r2, r2, r0
   48234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   48238:	eb63 0301 	sbc.w	r3, r3, r1
   4823c:	4620      	mov	r0, r4
   4823e:	f7f9 fbb1 	bl	419a4 <k_work_reschedule>
}
   48242:	2000      	movs	r0, #0
   48244:	b003      	add	sp, #12
   48246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        const struct gpio_dt_spec *gpio = &config->inputs.gpios[i];
   4824a:	6823      	ldr	r3, [r4, #0]
	return gpio_pin_get(spec->port, spec->pin);
   4824c:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
   48250:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
	const struct gpio_driver_data *const data =
   48254:	f8d0 b010 	ldr.w	fp, [r0, #16]
	return gpio_pin_get(spec->port, spec->pin);
   48258:	7917      	ldrb	r7, [r2, #4]
	return api->port_get_raw(port, value);
   4825a:	6883      	ldr	r3, [r0, #8]
   4825c:	a901      	add	r1, sp, #4
   4825e:	685b      	ldr	r3, [r3, #4]
   48260:	4798      	blx	r3
	if (ret == 0) {
   48262:	b948      	cbnz	r0, 48278 <kscan_direct_read+0xb6>
		*value ^= data->invert;
   48264:	f8db 2000 	ldr.w	r2, [fp]
   48268:	9b01      	ldr	r3, [sp, #4]
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   4826a:	fa09 f707 	lsl.w	r7, r9, r7
		*value ^= data->invert;
   4826e:	4053      	eors	r3, r2
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   48270:	423b      	tst	r3, r7
   48272:	bf14      	ite	ne
   48274:	2001      	movne	r0, #1
   48276:	2000      	moveq	r0, #0
        debounce_update(&data->pin_state[i], active, config->debounce_scan_period_ms,
   48278:	f8d8 7048 	ldr.w	r7, [r8, #72]	; 0x48
   4827c:	6922      	ldr	r2, [r4, #16]
   4827e:	1e01      	subs	r1, r0, #0
   48280:	4653      	mov	r3, sl
   48282:	eb07 0045 	add.w	r0, r7, r5, lsl #1
   48286:	bf18      	it	ne
   48288:	2101      	movne	r1, #1
   4828a:	f7ff feef 	bl	4806c <debounce_update>
    for (int i = 0; i < config->inputs.len; i++) {
   4828e:	3501      	adds	r5, #1
   48290:	e7a2      	b.n	481d8 <kscan_direct_read+0x16>
        struct debounce_state *state = &data->pin_state[i];
   48292:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
   48296:	eb03 0a49 	add.w	sl, r3, r9, lsl #1
        if (debounce_get_changed(state)) {
   4829a:	4650      	mov	r0, sl
   4829c:	f7ff ff1e 	bl	480dc <debounce_get_changed>
   482a0:	b948      	cbnz	r0, 482b6 <kscan_direct_read+0xf4>
        continue_scan = continue_scan || debounce_is_active(state);
   482a2:	2d00      	cmp	r5, #0
   482a4:	d13c      	bne.n	48320 <kscan_direct_read+0x15e>
   482a6:	4650      	mov	r0, sl
   482a8:	f7ff ff0c 	bl	480c4 <debounce_is_active>
   482ac:	f000 0501 	and.w	r5, r0, #1
    for (int i = 0; i < config->inputs.len; i++) {
   482b0:	f109 0901 	add.w	r9, r9, #1
   482b4:	e796      	b.n	481e4 <kscan_direct_read+0x22>
            const bool pressed = debounce_is_pressed(state);
   482b6:	4650      	mov	r0, sl
   482b8:	f7ff ff0c 	bl	480d4 <debounce_is_pressed>
            data->callback(dev, 0, i, pressed);
   482bc:	f8d8 c004 	ldr.w	ip, [r8, #4]
   482c0:	4603      	mov	r3, r0
            const bool pressed = debounce_is_pressed(state);
   482c2:	4607      	mov	r7, r0
            data->callback(dev, 0, i, pressed);
   482c4:	464a      	mov	r2, r9
   482c6:	2100      	movs	r1, #0
   482c8:	4630      	mov	r0, r6
   482ca:	47e0      	blx	ip
            if (config->toggle_mode && pressed) {
   482cc:	7e23      	ldrb	r3, [r4, #24]
   482ce:	2b00      	cmp	r3, #0
   482d0:	d0e7      	beq.n	482a2 <kscan_direct_read+0xe0>
   482d2:	2f00      	cmp	r7, #0
   482d4:	d0e5      	beq.n	482a2 <kscan_direct_read+0xe0>
                kscan_inputs_set_flags(&config->inputs, &config->inputs.gpios[i]);
   482d6:	6823      	ldr	r3, [r4, #0]
    for (int i = 0; i < inputs->len; i++) {
   482d8:	2700      	movs	r7, #0
                kscan_inputs_set_flags(&config->inputs, &config->inputs.gpios[i]);
   482da:	eb03 0bc9 	add.w	fp, r3, r9, lsl #3
    for (int i = 0; i < inputs->len; i++) {
   482de:	6863      	ldr	r3, [r4, #4]
   482e0:	42bb      	cmp	r3, r7
   482e2:	d9de      	bls.n	482a2 <kscan_direct_read+0xe0>
        extra_flags = GPIO_INPUT | kscan_gpio_get_extra_flags(&inputs->gpios[i],
   482e4:	6821      	ldr	r1, [r4, #0]
   482e6:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
    if (!active) {
   482ea:	459b      	cmp	fp, r3
   482ec:	795a      	ldrb	r2, [r3, #5]
        extra_flags = GPIO_INPUT | kscan_gpio_get_extra_flags(&inputs->gpios[i],
   482ee:	ea4f 00c7 	mov.w	r0, r7, lsl #3
    if (!active) {
   482f2:	d012      	beq.n	4831a <kscan_direct_read+0x158>
        return ((BIT(0) & gpio->dt_flags) ? GPIO_PULL_UP : GPIO_PULL_DOWN);
   482f4:	f012 0f01 	tst.w	r2, #1
   482f8:	bf0c      	ite	eq
   482fa:	f04f 0c20 	moveq.w	ip, #32
   482fe:	f04f 0c10 	movne.w	ip, #16
	return gpio_pin_configure(spec->port,
   48302:	5808      	ldr	r0, [r1, r0]
				  spec->pin,
   48304:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
   48306:	ea42 020c 	orr.w	r2, r2, ip
   4830a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   4830e:	f7ff fee9 	bl	480e4 <z_impl_gpio_pin_configure>
        if (err) {
   48312:	2800      	cmp	r0, #0
   48314:	d1c5      	bne.n	482a2 <kscan_direct_read+0xe0>
    for (int i = 0; i < inputs->len; i++) {
   48316:	3701      	adds	r7, #1
   48318:	e7e1      	b.n	482de <kscan_direct_read+0x11c>
    return 0;
   4831a:	f04f 0c00 	mov.w	ip, #0
   4831e:	e7f0      	b.n	48302 <kscan_direct_read+0x140>
        continue_scan = continue_scan || debounce_is_active(state);
   48320:	2001      	movs	r0, #1
   48322:	e7c3      	b.n	482ac <kscan_direct_read+0xea>
    k_work_reschedule(&data->work, K_TIMEOUT_ABS_MS(data->scan_time));
   48324:	f06f 0201 	mvn.w	r2, #1
   48328:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4832c:	e786      	b.n	4823c <kscan_direct_read+0x7a>
    return kscan_direct_interrupt_configure(dev, GPIO_INT_LEVEL_ACTIVE);
   4832e:	f44f 2198 	mov.w	r1, #311296	; 0x4c000
   48332:	f7ff fef9 	bl	48128 <kscan_direct_interrupt_configure.isra.0>
   48336:	e784      	b.n	48242 <kscan_direct_read+0x80>

00048338 <kscan_direct_enable>:
static int kscan_direct_enable(const struct device *dev) {
   48338:	b570      	push	{r4, r5, r6, lr}
    struct kscan_direct_data *data = dev->data;
   4833a:	6906      	ldr	r6, [r0, #16]
static int kscan_direct_enable(const struct device *dev) {
   4833c:	4604      	mov	r4, r0
   4833e:	f000 fc58 	bl	48bf2 <z_impl_k_uptime_ticks>
   48342:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   48346:	fba0 3205 	umull	r3, r2, r0, r5
   4834a:	fb05 2101 	mla	r1, r5, r1, r2
   4834e:	0bdb      	lsrs	r3, r3, #15
   48350:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   48354:	0bc9      	lsrs	r1, r1, #15
    data->scan_time = k_uptime_get();
   48356:	e9c6 3110 	strd	r3, r1, [r6, #64]	; 0x40
    return kscan_direct_read(dev);
   4835a:	4620      	mov	r0, r4
}
   4835c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return kscan_direct_read(dev);
   48360:	f7ff bf2f 	b.w	481c2 <kscan_direct_read>

00048364 <kscan_direct_work_handler>:
    kscan_direct_read(data->dev);
   48364:	f850 0c08 	ldr.w	r0, [r0, #-8]
   48368:	f7ff bf2b 	b.w	481c2 <kscan_direct_read>

0004836c <kscan_direct_disable>:
static int kscan_direct_disable(const struct device *dev) {
   4836c:	b510      	push	{r4, lr}
   4836e:	4604      	mov	r4, r0
    k_work_cancel_delayable(&data->work);
   48370:	6900      	ldr	r0, [r0, #16]
   48372:	3008      	adds	r0, #8
   48374:	f000 fa9d 	bl	488b2 <k_work_cancel_delayable>
    return kscan_direct_interrupt_configure(dev, GPIO_INT_DISABLE);
   48378:	6860      	ldr	r0, [r4, #4]
   4837a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
}
   4837e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return kscan_direct_interrupt_configure(dev, GPIO_INT_DISABLE);
   48382:	f7ff bed1 	b.w	48128 <kscan_direct_interrupt_configure.isra.0>

00048386 <battery_channel_get>:

#include "battery_common.h"

int battery_channel_get(const struct battery_value *value, enum sensor_channel chan,
                        struct sensor_value *val_out) {
    switch (chan) {
   48386:	2927      	cmp	r1, #39	; 0x27
                        struct sensor_value *val_out) {
   48388:	b510      	push	{r4, lr}
    switch (chan) {
   4838a:	d004      	beq.n	48396 <battery_channel_get+0x10>
   4838c:	292c      	cmp	r1, #44	; 0x2c
   4838e:	d010      	beq.n	483b2 <battery_channel_get+0x2c>
   48390:	f06f 0085 	mvn.w	r0, #133	; 0x85
    default:
        return -ENOTSUP;
    }

    return 0;
}
   48394:	bd10      	pop	{r4, pc}
        val_out->val1 = value->millivolts / 1000;
   48396:	8843      	ldrh	r3, [r0, #2]
   48398:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   4839c:	fbb3 f4f1 	udiv	r4, r3, r1
        val_out->val2 = (value->millivolts % 1000) * 1000U;
   483a0:	fb01 3314 	mls	r3, r1, r4, r3
   483a4:	b29b      	uxth	r3, r3
        val_out->val1 = value->millivolts / 1000;
   483a6:	b2a0      	uxth	r0, r4
        val_out->val2 = (value->millivolts % 1000) * 1000U;
   483a8:	434b      	muls	r3, r1
   483aa:	e9c2 0300 	strd	r0, r3, [r2]
    return 0;
   483ae:	2000      	movs	r0, #0
   483b0:	e7f0      	b.n	48394 <battery_channel_get+0xe>
        val_out->val1 = value->state_of_charge;
   483b2:	7900      	ldrb	r0, [r0, #4]
        break;
   483b4:	2300      	movs	r3, #0
   483b6:	e7f8      	b.n	483aa <battery_channel_get+0x24>

000483b8 <lithium_ion_mv_to_pct>:

uint8_t lithium_ion_mv_to_pct(int16_t bat_mv) {
    // Simple linear approximation of a battery based off adafruit's discharge graph:
    // https://learn.adafruit.com/li-ion-and-lipoly-batteries/voltages

    if (bat_mv >= 4200) {
   483b8:	f241 0367 	movw	r3, #4199	; 0x1067
   483bc:	4298      	cmp	r0, r3
   483be:	dc0a      	bgt.n	483d6 <lithium_ion_mv_to_pct+0x1e>
        return 100;
    } else if (bat_mv <= 3450) {
   483c0:	f640 537a 	movw	r3, #3450	; 0xd7a
   483c4:	4298      	cmp	r0, r3
   483c6:	dd08      	ble.n	483da <lithium_ion_mv_to_pct+0x22>
        return 0;
    }

    return bat_mv * 2 / 15 - 459;
   483c8:	230f      	movs	r3, #15
   483ca:	0040      	lsls	r0, r0, #1
   483cc:	fbb0 f0f3 	udiv	r0, r0, r3
   483d0:	3035      	adds	r0, #53	; 0x35
   483d2:	b2c0      	uxtb	r0, r0
   483d4:	4770      	bx	lr
        return 100;
   483d6:	2064      	movs	r0, #100	; 0x64
   483d8:	4770      	bx	lr
        return 0;
   483da:	2000      	movs	r0, #0
   483dc:	4770      	bx	lr

000483de <vddh_channel_get>:
    return battery_channel_get(&drv_data->value, chan, val);
   483de:	6900      	ldr	r0, [r0, #16]
   483e0:	301c      	adds	r0, #28
   483e2:	f7ff bfd0 	b.w	48386 <battery_channel_get>

000483e6 <z_device_state_init>:
}
   483e6:	4770      	bx	lr

000483e8 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   483e8:	b138      	cbz	r0, 483fa <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   483ea:	68c3      	ldr	r3, [r0, #12]
   483ec:	8818      	ldrh	r0, [r3, #0]
   483ee:	f3c0 0008 	ubfx	r0, r0, #0, #9
   483f2:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   483f6:	4258      	negs	r0, r3
   483f8:	4158      	adcs	r0, r3
}
   483fa:	4770      	bx	lr

000483fc <arch_system_halt>:
	__asm__ volatile(
   483fc:	f04f 0220 	mov.w	r2, #32
   48400:	f3ef 8311 	mrs	r3, BASEPRI
   48404:	f382 8812 	msr	BASEPRI_MAX, r2
   48408:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
   4840c:	e7fe      	b.n	4840c <arch_system_halt+0x10>

0004840e <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   4840e:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
   48410:	f7ff fff4 	bl	483fc <arch_system_halt>

00048414 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   48414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   48416:	4605      	mov	r5, r0
   48418:	460e      	mov	r6, r1
   4841a:	f04f 0320 	mov.w	r3, #32
   4841e:	f3ef 8711 	mrs	r7, BASEPRI
   48422:	f383 8812 	msr	BASEPRI_MAX, r3
   48426:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   4842a:	f7f9 fda5 	bl	41f78 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   4842e:	4631      	mov	r1, r6
   48430:	4604      	mov	r4, r0
   48432:	4628      	mov	r0, r5
   48434:	f7ff ffeb 	bl	4840e <k_sys_fatal_error_handler>
	__asm__ volatile(
   48438:	f387 8811 	msr	BASEPRI, r7
   4843c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   48440:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   48442:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   48446:	f7e2 b881 	b.w	2a54c <z_impl_k_thread_abort>

0004844a <k_heap_init>:
{
   4844a:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   4844c:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   48450:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   48454:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   48456:	f7fa bcfd 	b.w	42e54 <sys_heap_init>

0004845a <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   4845a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4845e:	b085      	sub	sp, #20
   48460:	4606      	mov	r6, r0
   48462:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   48464:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   48468:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   4846a:	f000 fbc8 	bl	48bfe <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   4846e:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   48472:	4605      	mov	r5, r0
   48474:	460f      	mov	r7, r1
	__asm__ volatile(
   48476:	f04f 0320 	mov.w	r3, #32
   4847a:	f3ef 8411 	mrs	r4, BASEPRI
   4847e:	f383 8812 	msr	BASEPRI_MAX, r3
   48482:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   48486:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   4848a:	464a      	mov	r2, r9
   4848c:	4641      	mov	r1, r8
   4848e:	4630      	mov	r0, r6
   48490:	f7fa fc79 	bl	42d86 <sys_heap_aligned_alloc>
   48494:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   48496:	f7f9 ff29 	bl	422ec <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   4849a:	9b03      	ldr	r3, [sp, #12]
   4849c:	b13b      	cbz	r3, 484ae <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   4849e:	f384 8811 	msr	BASEPRI, r4
   484a2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   484a6:	4618      	mov	r0, r3
   484a8:	b005      	add	sp, #20
   484aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   484ae:	1a28      	subs	r0, r5, r0
   484b0:	eb67 0101 	sbc.w	r1, r7, r1
   484b4:	2801      	cmp	r0, #1
   484b6:	f171 0200 	sbcs.w	r2, r1, #0
   484ba:	dbf0      	blt.n	4849e <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   484bc:	e9cd 0100 	strd	r0, r1, [sp]
   484c0:	465a      	mov	r2, fp
   484c2:	4621      	mov	r1, r4
   484c4:	4650      	mov	r0, sl
   484c6:	f7f9 fbc3 	bl	41c50 <z_pend_curr>
	__asm__ volatile(
   484ca:	f04f 0320 	mov.w	r3, #32
   484ce:	f3ef 8411 	mrs	r4, BASEPRI
   484d2:	f383 8812 	msr	BASEPRI_MAX, r3
   484d6:	f3bf 8f6f 	isb	sy
   484da:	e7d6      	b.n	4848a <k_heap_aligned_alloc+0x30>

000484dc <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   484dc:	b538      	push	{r3, r4, r5, lr}
   484de:	4604      	mov	r4, r0
   484e0:	f04f 0320 	mov.w	r3, #32
   484e4:	f3ef 8511 	mrs	r5, BASEPRI
   484e8:	f383 8812 	msr	BASEPRI_MAX, r3
   484ec:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   484f0:	f7fa fc11 	bl	42d16 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   484f4:	f104 000c 	add.w	r0, r4, #12
   484f8:	f000 fb02 	bl	48b00 <z_unpend_all>
   484fc:	b130      	cbz	r0, 4850c <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   484fe:	4629      	mov	r1, r5
   48500:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   48504:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   48508:	f7f9 bbfc 	b.w	41d04 <z_reschedule>
	__asm__ volatile(
   4850c:	f385 8811 	msr	BASEPRI, r5
   48510:	f3bf 8f6f 	isb	sy
}
   48514:	bd38      	pop	{r3, r4, r5, pc}

00048516 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   48516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   48518:	4604      	mov	r4, r0
   4851a:	460d      	mov	r5, r1
	__asm__ volatile(
   4851c:	f04f 0320 	mov.w	r3, #32
   48520:	f3ef 8611 	mrs	r6, BASEPRI
   48524:	f383 8812 	msr	BASEPRI_MAX, r3
   48528:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   4852c:	6947      	ldr	r7, [r0, #20]
   4852e:	b977      	cbnz	r7, 4854e <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   48530:	f000 faa0 	bl	48a74 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   48534:	b158      	cbz	r0, 4854e <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   48536:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   48538:	6142      	str	r2, [r0, #20]
   4853a:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   4853c:	f000 fa63 	bl	48a06 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   48540:	4631      	mov	r1, r6
   48542:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   48546:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   4854a:	f7f9 bbdb 	b.w	41d04 <z_reschedule>
	**(char ***) mem = slab->free_list;
   4854e:	682b      	ldr	r3, [r5, #0]
   48550:	6962      	ldr	r2, [r4, #20]
   48552:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   48554:	682b      	ldr	r3, [r5, #0]
   48556:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   48558:	69a3      	ldr	r3, [r4, #24]
   4855a:	3b01      	subs	r3, #1
   4855c:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   4855e:	f386 8811 	msr	BASEPRI, r6
   48562:	f3bf 8f6f 	isb	sy
}
   48566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00048568 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   48568:	f3ef 8005 	mrs	r0, IPSR
}
   4856c:	3800      	subs	r0, #0
   4856e:	bf18      	it	ne
   48570:	2001      	movne	r0, #1
   48572:	4770      	bx	lr

00048574 <z_impl_k_thread_name_set>:
}
   48574:	f06f 0057 	mvn.w	r0, #87	; 0x57
   48578:	4770      	bx	lr

0004857a <z_impl_k_thread_start>:
	z_sched_start(thread);
   4857a:	f7f9 bbd5 	b.w	41d28 <z_sched_start>

0004857e <z_pm_save_idle_exit>:
{
   4857e:	b508      	push	{r3, lr}
	pm_system_resume();
   48580:	f7e1 fb6c 	bl	29c5c <pm_system_resume>
}
   48584:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   48588:	f7ff bc11 	b.w	47dae <sys_clock_idle_exit>

0004858c <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   4858c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   48590:	428b      	cmp	r3, r1
   48592:	d001      	beq.n	48598 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   48594:	f7f9 bb70 	b.w	41c78 <z_set_prio>
}
   48598:	2000      	movs	r0, #0
   4859a:	4770      	bx	lr

0004859c <z_impl_k_mutex_init>:
{
   4859c:	4603      	mov	r3, r0
	mutex->owner = NULL;
   4859e:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   485a0:	e9c3 0002 	strd	r0, r0, [r3, #8]
   485a4:	e9c3 3300 	strd	r3, r3, [r3]
}
   485a8:	4770      	bx	lr

000485aa <queue_insert>:
{
   485aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   485ae:	4699      	mov	r9, r3
   485b0:	4604      	mov	r4, r0
   485b2:	f89d 3020 	ldrb.w	r3, [sp, #32]
   485b6:	460d      	mov	r5, r1
   485b8:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   485ba:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   485be:	f04f 0220 	mov.w	r2, #32
   485c2:	f3ef 8711 	mrs	r7, BASEPRI
   485c6:	f382 8812 	msr	BASEPRI_MAX, r2
   485ca:	f3bf 8f6f 	isb	sy
	if (is_append) {
   485ce:	b103      	cbz	r3, 485d2 <queue_insert+0x28>
	return list->tail;
   485d0:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   485d2:	4630      	mov	r0, r6
   485d4:	f000 fa4e 	bl	48a74 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   485d8:	b158      	cbz	r0, 485f2 <queue_insert+0x48>
   485da:	2300      	movs	r3, #0
   485dc:	67c3      	str	r3, [r0, #124]	; 0x7c
   485de:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   485e2:	f000 fa10 	bl	48a06 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   485e6:	4630      	mov	r0, r6
   485e8:	4639      	mov	r1, r7
   485ea:	f7f9 fb8b 	bl	41d04 <z_reschedule>
		return 0;
   485ee:	2000      	movs	r0, #0
   485f0:	e00c      	b.n	4860c <queue_insert+0x62>
	if (alloc) {
   485f2:	f1b9 0f00 	cmp.w	r9, #0
   485f6:	d01b      	beq.n	48630 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   485f8:	2108      	movs	r1, #8
   485fa:	f7f9 ffb3 	bl	42564 <z_thread_aligned_alloc>
		if (anode == NULL) {
   485fe:	b938      	cbnz	r0, 48610 <queue_insert+0x66>
	__asm__ volatile(
   48600:	f387 8811 	msr	BASEPRI, r7
   48604:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   48608:	f06f 000b 	mvn.w	r0, #11
}
   4860c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   48610:	2201      	movs	r2, #1
		anode->data = data;
   48612:	f8c0 8004 	str.w	r8, [r0, #4]
   48616:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   48618:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   4861a:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   4861e:	b95d      	cbnz	r5, 48638 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   48620:	6822      	ldr	r2, [r4, #0]
   48622:	430a      	orrs	r2, r1
   48624:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   48626:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   48628:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   4862a:	b96a      	cbnz	r2, 48648 <queue_insert+0x9e>
	list->tail = node;
   4862c:	6060      	str	r0, [r4, #4]
}
   4862e:	e00b      	b.n	48648 <queue_insert+0x9e>
	node->next_and_flags = flags;
   48630:	f8c8 9000 	str.w	r9, [r8]
}
   48634:	4640      	mov	r0, r8
   48636:	e7ef      	b.n	48618 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   48638:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   4863a:	2a03      	cmp	r2, #3
   4863c:	d810      	bhi.n	48660 <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   4863e:	6001      	str	r1, [r0, #0]
	return list->tail;
   48640:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   48642:	b939      	cbnz	r1, 48654 <queue_insert+0xaa>
	list->head = node;
   48644:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   48648:	2104      	movs	r1, #4
   4864a:	f104 0010 	add.w	r0, r4, #16
   4864e:	f000 fc55 	bl	48efc <z_handle_obj_poll_events>
   48652:	e7c8      	b.n	485e6 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   48654:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   48656:	f002 0203 	and.w	r2, r2, #3
   4865a:	4302      	orrs	r2, r0
   4865c:	600a      	str	r2, [r1, #0]
   4865e:	e7e5      	b.n	4862c <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   48660:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   48664:	430a      	orrs	r2, r1
   48666:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   48668:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   4866a:	f002 0203 	and.w	r2, r2, #3
   4866e:	ea40 0302 	orr.w	r3, r0, r2
   48672:	602b      	str	r3, [r5, #0]
}
   48674:	e7e8      	b.n	48648 <queue_insert+0x9e>

00048676 <z_queue_node_peek>:
{
   48676:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   48678:	4604      	mov	r4, r0
   4867a:	b130      	cbz	r0, 4868a <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   4867c:	6802      	ldr	r2, [r0, #0]
   4867e:	0793      	lsls	r3, r2, #30
   48680:	d003      	beq.n	4868a <z_queue_node_peek+0x14>
		ret = anode->data;
   48682:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   48684:	b109      	cbz	r1, 4868a <z_queue_node_peek+0x14>
			k_free(anode);
   48686:	f000 fc5a 	bl	48f3e <k_free>
}
   4868a:	4620      	mov	r0, r4
   4868c:	bd10      	pop	{r4, pc}

0004868e <z_impl_k_queue_init>:
	list->head = NULL;
   4868e:	2300      	movs	r3, #0
	list->tail = NULL;
   48690:	e9c0 3300 	strd	r3, r3, [r0]
   48694:	f100 0308 	add.w	r3, r0, #8
   48698:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   4869c:	f100 0310 	add.w	r3, r0, #16
   486a0:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   486a4:	4770      	bx	lr

000486a6 <k_queue_append>:
{
   486a6:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   486a8:	2301      	movs	r3, #1
   486aa:	9300      	str	r3, [sp, #0]
   486ac:	2300      	movs	r3, #0
{
   486ae:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   486b0:	4619      	mov	r1, r3
   486b2:	f7ff ff7a 	bl	485aa <queue_insert>
}
   486b6:	b003      	add	sp, #12
   486b8:	f85d fb04 	ldr.w	pc, [sp], #4

000486bc <k_queue_prepend>:
{
   486bc:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   486be:	2300      	movs	r3, #0
{
   486c0:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   486c2:	9300      	str	r3, [sp, #0]
   486c4:	4619      	mov	r1, r3
   486c6:	f7ff ff70 	bl	485aa <queue_insert>
}
   486ca:	b003      	add	sp, #12
   486cc:	f85d fb04 	ldr.w	pc, [sp], #4

000486d0 <k_queue_append_list>:
{
   486d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   486d4:	4680      	mov	r8, r0
   486d6:	4615      	mov	r5, r2
	CHECKIF(head == NULL || tail == NULL) {
   486d8:	460c      	mov	r4, r1
   486da:	b3a9      	cbz	r1, 48748 <k_queue_append_list+0x78>
   486dc:	b3a2      	cbz	r2, 48748 <k_queue_append_list+0x78>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   486de:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   486e2:	f04f 0320 	mov.w	r3, #32
   486e6:	f3ef 8711 	mrs	r7, BASEPRI
   486ea:	f383 8812 	msr	BASEPRI_MAX, r3
   486ee:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   486f2:	4630      	mov	r0, r6
   486f4:	f000 f9be 	bl	48a74 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   486f8:	b168      	cbz	r0, 48716 <k_queue_append_list+0x46>
   486fa:	f04f 0900 	mov.w	r9, #0
	thread->base.swap_data = data;
   486fe:	6144      	str	r4, [r0, #20]
   48700:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   48704:	f000 f97f 	bl	48a06 <z_ready_thread>
		head = *(void **)head;
   48708:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   4870a:	4630      	mov	r0, r6
   4870c:	f000 f9b2 	bl	48a74 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   48710:	b144      	cbz	r4, 48724 <k_queue_append_list+0x54>
   48712:	2800      	cmp	r0, #0
   48714:	d1f3      	bne.n	486fe <k_queue_append_list+0x2e>
	return list->tail;
   48716:	f8d8 3004 	ldr.w	r3, [r8, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   4871a:	b97b      	cbnz	r3, 4873c <k_queue_append_list+0x6c>
	list->head = node;
   4871c:	f8c8 4000 	str.w	r4, [r8]
	list->tail = node;
   48720:	f8c8 5004 	str.w	r5, [r8, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   48724:	2104      	movs	r1, #4
   48726:	f108 0010 	add.w	r0, r8, #16
   4872a:	f000 fbe7 	bl	48efc <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   4872e:	4630      	mov	r0, r6
   48730:	4639      	mov	r1, r7
   48732:	f7f9 fae7 	bl	41d04 <z_reschedule>
	return 0;
   48736:	2000      	movs	r0, #0
}
   48738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   4873c:	681a      	ldr	r2, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   4873e:	f002 0203 	and.w	r2, r2, #3
   48742:	4314      	orrs	r4, r2
   48744:	601c      	str	r4, [r3, #0]
}
   48746:	e7eb      	b.n	48720 <k_queue_append_list+0x50>
		return -EINVAL;
   48748:	f06f 0015 	mvn.w	r0, #21
   4874c:	e7f4      	b.n	48738 <k_queue_append_list+0x68>

0004874e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   4874e:	b15a      	cbz	r2, 48768 <z_impl_k_sem_init+0x1a>
   48750:	428a      	cmp	r2, r1
   48752:	d309      	bcc.n	48768 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   48754:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   48758:	e9c0 1202 	strd	r1, r2, [r0, #8]
   4875c:	e9c0 0000 	strd	r0, r0, [r0]
   48760:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   48764:	2000      	movs	r0, #0
   48766:	4770      	bx	lr
		return -EINVAL;
   48768:	f06f 0015 	mvn.w	r0, #21
}
   4876c:	4770      	bx	lr

0004876e <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   4876e:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   48770:	2301      	movs	r3, #1
   48772:	408b      	lsls	r3, r1
   48774:	ea22 0303 	bic.w	r3, r2, r3
   48778:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   4877a:	fa22 f001 	lsr.w	r0, r2, r1
}
   4877e:	f000 0001 	and.w	r0, r0, #1
   48782:	4770      	bx	lr

00048784 <unschedule_locked>:
{
   48784:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   48786:	2103      	movs	r1, #3
{
   48788:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   4878a:	300c      	adds	r0, #12
   4878c:	f7ff ffef 	bl	4876e <flag_test_and_clear>
   48790:	4604      	mov	r4, r0
   48792:	b118      	cbz	r0, 4879c <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   48794:	f105 0010 	add.w	r0, r5, #16
   48798:	f000 f9e5 	bl	48b66 <z_abort_timeout>
}
   4879c:	4620      	mov	r0, r4
   4879e:	bd38      	pop	{r3, r4, r5, pc}

000487a0 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   487a0:	b120      	cbz	r0, 487ac <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   487a2:	2200      	movs	r2, #0
   487a4:	4611      	mov	r1, r2
   487a6:	3088      	adds	r0, #136	; 0x88
   487a8:	f000 b9ba 	b.w	48b20 <z_sched_wake>
}
   487ac:	4770      	bx	lr

000487ae <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   487ae:	68c3      	ldr	r3, [r0, #12]
{
   487b0:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   487b2:	f3c3 0540 	ubfx	r5, r3, #1, #1
   487b6:	079b      	lsls	r3, r3, #30
{
   487b8:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   487ba:	d416      	bmi.n	487ea <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   487bc:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   487be:	2102      	movs	r1, #2
   487c0:	300c      	adds	r0, #12
   487c2:	f7ff ffd4 	bl	4876e <flag_test_and_clear>
   487c6:	b180      	cbz	r0, 487ea <cancel_async_locked+0x3c>
	return list->head;
   487c8:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   487cc:	b16a      	cbz	r2, 487ea <cancel_async_locked+0x3c>
   487ce:	4294      	cmp	r4, r2
   487d0:	d11b      	bne.n	4880a <cancel_async_locked+0x5c>
	return node->next;
   487d2:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   487d4:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   487d8:	b98d      	cbnz	r5, 487fe <cancel_async_locked+0x50>
   487da:	428c      	cmp	r4, r1
	list->head = node;
   487dc:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   487e0:	d101      	bne.n	487e6 <cancel_async_locked+0x38>
	list->tail = node;
   487e2:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   487e6:	2300      	movs	r3, #0
   487e8:	6023      	str	r3, [r4, #0]
	return *flagp;
   487ea:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   487ec:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   487f0:	bf1e      	ittt	ne
   487f2:	f043 0302 	orrne.w	r3, r3, #2
   487f6:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   487f8:	f040 0002 	orrne.w	r0, r0, #2
}
   487fc:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   487fe:	428c      	cmp	r4, r1
	parent->next = child;
   48800:	602a      	str	r2, [r5, #0]
	list->tail = node;
   48802:	bf08      	it	eq
   48804:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   48808:	e7ed      	b.n	487e6 <cancel_async_locked+0x38>
	return node->next;
   4880a:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4880c:	6812      	ldr	r2, [r2, #0]
   4880e:	e7dd      	b.n	487cc <cancel_async_locked+0x1e>

00048810 <work_timeout>:
{
   48810:	b573      	push	{r0, r1, r4, r5, r6, lr}
   48812:	4604      	mov	r4, r0
   48814:	f04f 0320 	mov.w	r3, #32
   48818:	f3ef 8511 	mrs	r5, BASEPRI
   4881c:	f383 8812 	msr	BASEPRI_MAX, r3
   48820:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   48824:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   48826:	f1a0 0610 	sub.w	r6, r0, #16
   4882a:	2103      	movs	r1, #3
   4882c:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   4882e:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   48830:	f7ff ff9d 	bl	4876e <flag_test_and_clear>
   48834:	b128      	cbz	r0, 48842 <work_timeout+0x32>
		queue = dw->queue;
   48836:	69a3      	ldr	r3, [r4, #24]
   48838:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   4883a:	a901      	add	r1, sp, #4
   4883c:	4630      	mov	r0, r6
   4883e:	f7f8 ffbd 	bl	417bc <submit_to_queue_locked>
	__asm__ volatile(
   48842:	f385 8811 	msr	BASEPRI, r5
   48846:	f3bf 8f6f 	isb	sy
}
   4884a:	b002      	add	sp, #8
   4884c:	bd70      	pop	{r4, r5, r6, pc}

0004884e <k_work_init>:
{
   4884e:	b538      	push	{r3, r4, r5, lr}
   48850:	4604      	mov	r4, r0
   48852:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   48854:	2210      	movs	r2, #16
   48856:	2100      	movs	r1, #0
   48858:	f7fc f93e 	bl	44ad8 <memset>
   4885c:	6065      	str	r5, [r4, #4]
}
   4885e:	bd38      	pop	{r3, r4, r5, pc}

00048860 <k_work_submit_to_queue>:
{
   48860:	b537      	push	{r0, r1, r2, r4, r5, lr}
   48862:	9001      	str	r0, [sp, #4]
   48864:	4608      	mov	r0, r1
	__asm__ volatile(
   48866:	f04f 0320 	mov.w	r3, #32
   4886a:	f3ef 8511 	mrs	r5, BASEPRI
   4886e:	f383 8812 	msr	BASEPRI_MAX, r3
   48872:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   48876:	a901      	add	r1, sp, #4
   48878:	f7f8 ffa0 	bl	417bc <submit_to_queue_locked>
   4887c:	4604      	mov	r4, r0
	__asm__ volatile(
   4887e:	f385 8811 	msr	BASEPRI, r5
   48882:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   48886:	2800      	cmp	r0, #0
   48888:	dd04      	ble.n	48894 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   4888a:	f7f9 fb7b 	bl	41f84 <z_impl_k_is_preempt_thread>
   4888e:	b108      	cbz	r0, 48894 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   48890:	f7f9 fad6 	bl	41e40 <z_impl_k_yield>
}
   48894:	4620      	mov	r0, r4
   48896:	b003      	add	sp, #12
   48898:	bd30      	pop	{r4, r5, pc}

0004889a <k_work_init_delayable>:
{
   4889a:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   4889c:	2230      	movs	r2, #48	; 0x30
{
   4889e:	4604      	mov	r4, r0
   488a0:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   488a2:	2100      	movs	r1, #0
   488a4:	f7fc f918 	bl	44ad8 <memset>
   488a8:	f44f 7380 	mov.w	r3, #256	; 0x100
   488ac:	6065      	str	r5, [r4, #4]
   488ae:	60e3      	str	r3, [r4, #12]
}
   488b0:	bd38      	pop	{r3, r4, r5, pc}

000488b2 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   488b2:	b538      	push	{r3, r4, r5, lr}
   488b4:	4604      	mov	r4, r0
	__asm__ volatile(
   488b6:	f04f 0320 	mov.w	r3, #32
   488ba:	f3ef 8511 	mrs	r5, BASEPRI
   488be:	f383 8812 	msr	BASEPRI_MAX, r3
   488c2:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   488c6:	f7ff ff5d 	bl	48784 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   488ca:	4620      	mov	r0, r4
   488cc:	f7ff ff6f 	bl	487ae <cancel_async_locked>
	__asm__ volatile(
   488d0:	f385 8811 	msr	BASEPRI, r5
   488d4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   488d8:	bd38      	pop	{r3, r4, r5, pc}

000488da <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   488da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   488dc:	4604      	mov	r4, r0
   488de:	460d      	mov	r5, r1
	__asm__ volatile(
   488e0:	f04f 0320 	mov.w	r3, #32
   488e4:	f3ef 8611 	mrs	r6, BASEPRI
   488e8:	f383 8812 	msr	BASEPRI_MAX, r3
   488ec:	f3bf 8f6f 	isb	sy
	return *flagp;
   488f0:	68c3      	ldr	r3, [r0, #12]
   488f2:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   488f6:	2b00      	cmp	r3, #0
   488f8:	bf14      	ite	ne
   488fa:	2701      	movne	r7, #1
   488fc:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   488fe:	d105      	bne.n	4890c <k_work_cancel_delayable_sync+0x32>
	__asm__ volatile(
   48900:	f386 8811 	msr	BASEPRI, r6
   48904:	f3bf 8f6f 	isb	sy
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   48908:	4638      	mov	r0, r7
   4890a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)unschedule_locked(dwork);
   4890c:	f7ff ff3a 	bl	48784 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   48910:	4620      	mov	r0, r4
   48912:	f7ff ff4c 	bl	487ae <cancel_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   48916:	4629      	mov	r1, r5
   48918:	4620      	mov	r0, r4
   4891a:	f7f8 ff31 	bl	41780 <cancel_sync_locked>
   4891e:	f386 8811 	msr	BASEPRI, r6
   48922:	f3bf 8f6f 	isb	sy
	if (need_wait) {
   48926:	2800      	cmp	r0, #0
   48928:	d0ee      	beq.n	48908 <k_work_cancel_delayable_sync+0x2e>
	return z_impl_k_sem_take(sem, timeout);
   4892a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4892e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   48932:	f105 0008 	add.w	r0, r5, #8
   48936:	f7f8 fe3b 	bl	415b0 <z_impl_k_sem_take>
   4893a:	e7e5      	b.n	48908 <k_work_cancel_delayable_sync+0x2e>

0004893c <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   4893c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   48940:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   48942:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   48944:	2300      	movs	r3, #0
	node->prev = NULL;
   48946:	e9c0 3300 	strd	r3, r3, [r0]
}
   4894a:	4770      	bx	lr

0004894c <unpend_thread_no_timeout>:
{
   4894c:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   4894e:	f7ff fff5 	bl	4893c <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   48952:	7b43      	ldrb	r3, [r0, #13]
   48954:	f023 0302 	bic.w	r3, r3, #2
   48958:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   4895a:	2300      	movs	r3, #0
   4895c:	6083      	str	r3, [r0, #8]
}
   4895e:	bd08      	pop	{r3, pc}

00048960 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   48960:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   48964:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   48968:	4283      	cmp	r3, r0
		return b2 - b1;
   4896a:	bf14      	ite	ne
   4896c:	1ac0      	subne	r0, r0, r3
	return 0;
   4896e:	2000      	moveq	r0, #0
}
   48970:	4770      	bx	lr

00048972 <z_thread_timeout>:
{
   48972:	b510      	push	{r4, lr}
   48974:	4601      	mov	r1, r0
	__asm__ volatile(
   48976:	f04f 0320 	mov.w	r3, #32
   4897a:	f3ef 8411 	mrs	r4, BASEPRI
   4897e:	f383 8812 	msr	BASEPRI_MAX, r3
   48982:	f3bf 8f6f 	isb	sy
		if (!killed) {
   48986:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   4898a:	f013 0f28 	tst.w	r3, #40	; 0x28
   4898e:	d10d      	bne.n	489ac <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   48990:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   48994:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   48996:	b10b      	cbz	r3, 4899c <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   48998:	f7ff ffd8 	bl	4894c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   4899c:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   489a0:	f023 0314 	bic.w	r3, r3, #20
   489a4:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   489a8:	f7f9 f86e 	bl	41a88 <ready_thread>
	__asm__ volatile(
   489ac:	f384 8811 	msr	BASEPRI, r4
   489b0:	f3bf 8f6f 	isb	sy
}
   489b4:	bd10      	pop	{r4, pc}

000489b6 <add_to_waitq_locked>:
{
   489b6:	b538      	push	{r3, r4, r5, lr}
   489b8:	4604      	mov	r4, r0
   489ba:	460d      	mov	r5, r1
	unready_thread(thread);
   489bc:	f7f9 f898 	bl	41af0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   489c0:	7b63      	ldrb	r3, [r4, #13]
   489c2:	f043 0302 	orr.w	r3, r3, #2
   489c6:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   489c8:	b1e5      	cbz	r5, 48a04 <add_to_waitq_locked+0x4e>
	return list->head == list;
   489ca:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   489cc:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   489ce:	429d      	cmp	r5, r3
   489d0:	d109      	bne.n	489e6 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   489d2:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   489d4:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   489d8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   489da:	606c      	str	r4, [r5, #4]
}
   489dc:	e012      	b.n	48a04 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   489de:	686a      	ldr	r2, [r5, #4]
   489e0:	4293      	cmp	r3, r2
   489e2:	d0f6      	beq.n	489d2 <add_to_waitq_locked+0x1c>
   489e4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   489e6:	2b00      	cmp	r3, #0
   489e8:	d0f3      	beq.n	489d2 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   489ea:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   489ee:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   489f2:	428a      	cmp	r2, r1
   489f4:	d0f3      	beq.n	489de <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   489f6:	4291      	cmp	r1, r2
   489f8:	ddf1      	ble.n	489de <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   489fa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   489fc:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   48a00:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   48a02:	605c      	str	r4, [r3, #4]
}
   48a04:	bd38      	pop	{r3, r4, r5, pc}

00048a06 <z_ready_thread>:
{
   48a06:	b510      	push	{r4, lr}
	__asm__ volatile(
   48a08:	f04f 0320 	mov.w	r3, #32
   48a0c:	f3ef 8411 	mrs	r4, BASEPRI
   48a10:	f383 8812 	msr	BASEPRI_MAX, r3
   48a14:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   48a18:	f7f9 f836 	bl	41a88 <ready_thread>
	__asm__ volatile(
   48a1c:	f384 8811 	msr	BASEPRI, r4
   48a20:	f3bf 8f6f 	isb	sy
}
   48a24:	bd10      	pop	{r4, pc}

00048a26 <z_unpend_thread_no_timeout>:
{
   48a26:	b508      	push	{r3, lr}
	__asm__ volatile(
   48a28:	f04f 0320 	mov.w	r3, #32
   48a2c:	f3ef 8111 	mrs	r1, BASEPRI
   48a30:	f383 8812 	msr	BASEPRI_MAX, r3
   48a34:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   48a38:	f7ff ff88 	bl	4894c <unpend_thread_no_timeout>
	__asm__ volatile(
   48a3c:	f381 8811 	msr	BASEPRI, r1
   48a40:	f3bf 8f6f 	isb	sy
}
   48a44:	bd08      	pop	{r3, pc}

00048a46 <z_unpend1_no_timeout>:
{
   48a46:	b508      	push	{r3, lr}
   48a48:	4603      	mov	r3, r0
	__asm__ volatile(
   48a4a:	f04f 0220 	mov.w	r2, #32
   48a4e:	f3ef 8111 	mrs	r1, BASEPRI
   48a52:	f382 8812 	msr	BASEPRI_MAX, r2
   48a56:	f3bf 8f6f 	isb	sy
	return list->head == list;
   48a5a:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48a5c:	4283      	cmp	r3, r0
   48a5e:	d007      	beq.n	48a70 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   48a60:	b108      	cbz	r0, 48a66 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   48a62:	f7ff ff73 	bl	4894c <unpend_thread_no_timeout>
	__asm__ volatile(
   48a66:	f381 8811 	msr	BASEPRI, r1
   48a6a:	f3bf 8f6f 	isb	sy
}
   48a6e:	bd08      	pop	{r3, pc}
   48a70:	2000      	movs	r0, #0
   48a72:	e7f8      	b.n	48a66 <z_unpend1_no_timeout+0x20>

00048a74 <z_unpend_first_thread>:
{
   48a74:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   48a76:	f04f 0320 	mov.w	r3, #32
   48a7a:	f3ef 8511 	mrs	r5, BASEPRI
   48a7e:	f383 8812 	msr	BASEPRI_MAX, r3
   48a82:	f3bf 8f6f 	isb	sy
	return list->head == list;
   48a86:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48a88:	42a0      	cmp	r0, r4
   48a8a:	d00d      	beq.n	48aa8 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   48a8c:	b134      	cbz	r4, 48a9c <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   48a8e:	4620      	mov	r0, r4
   48a90:	f7ff ff5c 	bl	4894c <unpend_thread_no_timeout>
   48a94:	f104 0018 	add.w	r0, r4, #24
   48a98:	f000 f865 	bl	48b66 <z_abort_timeout>
	__asm__ volatile(
   48a9c:	f385 8811 	msr	BASEPRI, r5
   48aa0:	f3bf 8f6f 	isb	sy
}
   48aa4:	4620      	mov	r0, r4
   48aa6:	bd38      	pop	{r3, r4, r5, pc}
   48aa8:	2400      	movs	r4, #0
   48aaa:	e7f7      	b.n	48a9c <z_unpend_first_thread+0x28>

00048aac <z_unpend_thread>:
{
   48aac:	b510      	push	{r4, lr}
	__asm__ volatile(
   48aae:	f04f 0320 	mov.w	r3, #32
   48ab2:	f3ef 8411 	mrs	r4, BASEPRI
   48ab6:	f383 8812 	msr	BASEPRI_MAX, r3
   48aba:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   48abe:	f7ff ff45 	bl	4894c <unpend_thread_no_timeout>
	__asm__ volatile(
   48ac2:	f384 8811 	msr	BASEPRI, r4
   48ac6:	f3bf 8f6f 	isb	sy
}
   48aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   48ace:	3018      	adds	r0, #24
   48ad0:	f000 b849 	b.w	48b66 <z_abort_timeout>

00048ad4 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   48ad4:	4603      	mov	r3, r0
   48ad6:	b920      	cbnz	r0, 48ae2 <z_reschedule_irqlock+0xe>
   48ad8:	f3ef 8205 	mrs	r2, IPSR
   48adc:	b90a      	cbnz	r2, 48ae2 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   48ade:	f7e1 bb93 	b.w	2a208 <arch_swap>
   48ae2:	f383 8811 	msr	BASEPRI, r3
   48ae6:	f3bf 8f6f 	isb	sy
}
   48aea:	4770      	bx	lr

00048aec <z_reschedule_unlocked>:
	__asm__ volatile(
   48aec:	f04f 0320 	mov.w	r3, #32
   48af0:	f3ef 8011 	mrs	r0, BASEPRI
   48af4:	f383 8812 	msr	BASEPRI_MAX, r3
   48af8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   48afc:	f7ff bfea 	b.w	48ad4 <z_reschedule_irqlock>

00048b00 <z_unpend_all>:
{
   48b00:	b538      	push	{r3, r4, r5, lr}
   48b02:	4605      	mov	r5, r0
	int need_sched = 0;
   48b04:	2000      	movs	r0, #0
	return list->head == list;
   48b06:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48b08:	42a5      	cmp	r5, r4
   48b0a:	d000      	beq.n	48b0e <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   48b0c:	b904      	cbnz	r4, 48b10 <z_unpend_all+0x10>
}
   48b0e:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   48b10:	4620      	mov	r0, r4
   48b12:	f7ff ffcb 	bl	48aac <z_unpend_thread>
		z_ready_thread(thread);
   48b16:	4620      	mov	r0, r4
   48b18:	f7ff ff75 	bl	48a06 <z_ready_thread>
		need_sched = 1;
   48b1c:	2001      	movs	r0, #1
   48b1e:	e7f2      	b.n	48b06 <z_unpend_all+0x6>

00048b20 <z_sched_wake>:
{
   48b20:	b538      	push	{r3, r4, r5, lr}
   48b22:	f04f 0320 	mov.w	r3, #32
   48b26:	f3ef 8511 	mrs	r5, BASEPRI
   48b2a:	f383 8812 	msr	BASEPRI_MAX, r3
   48b2e:	f3bf 8f6f 	isb	sy
	return list->head == list;
   48b32:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48b34:	42a0      	cmp	r0, r4
   48b36:	d012      	beq.n	48b5e <z_sched_wake+0x3e>
		if (thread != NULL) {
   48b38:	b19c      	cbz	r4, 48b62 <z_sched_wake+0x42>
   48b3a:	67e1      	str	r1, [r4, #124]	; 0x7c
   48b3c:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   48b3e:	4620      	mov	r0, r4
   48b40:	f7ff ff04 	bl	4894c <unpend_thread_no_timeout>
   48b44:	f104 0018 	add.w	r0, r4, #24
   48b48:	f000 f80d 	bl	48b66 <z_abort_timeout>
			ready_thread(thread);
   48b4c:	4620      	mov	r0, r4
   48b4e:	f7f8 ff9b 	bl	41a88 <ready_thread>
			ret = true;
   48b52:	2001      	movs	r0, #1
	__asm__ volatile(
   48b54:	f385 8811 	msr	BASEPRI, r5
   48b58:	f3bf 8f6f 	isb	sy
}
   48b5c:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   48b5e:	2000      	movs	r0, #0
   48b60:	e7f8      	b.n	48b54 <z_sched_wake+0x34>
   48b62:	4620      	mov	r0, r4
   48b64:	e7f6      	b.n	48b54 <z_sched_wake+0x34>

00048b66 <z_abort_timeout>:
{
   48b66:	b510      	push	{r4, lr}
	__asm__ volatile(
   48b68:	f04f 0220 	mov.w	r2, #32
   48b6c:	f3ef 8411 	mrs	r4, BASEPRI
   48b70:	f382 8812 	msr	BASEPRI_MAX, r2
   48b74:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   48b78:	6803      	ldr	r3, [r0, #0]
   48b7a:	b13b      	cbz	r3, 48b8c <z_abort_timeout+0x26>
			remove_timeout(to);
   48b7c:	f7f9 fac2 	bl	42104 <remove_timeout>
			ret = 0;
   48b80:	2000      	movs	r0, #0
	__asm__ volatile(
   48b82:	f384 8811 	msr	BASEPRI, r4
   48b86:	f3bf 8f6f 	isb	sy
}
   48b8a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   48b8c:	f06f 0015 	mvn.w	r0, #21
   48b90:	e7f7      	b.n	48b82 <z_abort_timeout+0x1c>

00048b92 <z_get_next_timeout_expiry>:
{
   48b92:	b510      	push	{r4, lr}
	__asm__ volatile(
   48b94:	f04f 0320 	mov.w	r3, #32
   48b98:	f3ef 8411 	mrs	r4, BASEPRI
   48b9c:	f383 8812 	msr	BASEPRI_MAX, r3
   48ba0:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   48ba4:	f7f9 fa86 	bl	420b4 <next_timeout>
	__asm__ volatile(
   48ba8:	f384 8811 	msr	BASEPRI, r4
   48bac:	f3bf 8f6f 	isb	sy
}
   48bb0:	bd10      	pop	{r4, pc}

00048bb2 <z_set_timeout_expiry>:
{
   48bb2:	b570      	push	{r4, r5, r6, lr}
   48bb4:	4604      	mov	r4, r0
   48bb6:	460d      	mov	r5, r1
	__asm__ volatile(
   48bb8:	f04f 0320 	mov.w	r3, #32
   48bbc:	f3ef 8611 	mrs	r6, BASEPRI
   48bc0:	f383 8812 	msr	BASEPRI_MAX, r3
   48bc4:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   48bc8:	f7f9 fa74 	bl	420b4 <next_timeout>
			      || (ticks <= next_to);
   48bcc:	2801      	cmp	r0, #1
   48bce:	dd07      	ble.n	48be0 <z_set_timeout_expiry+0x2e>
   48bd0:	42a0      	cmp	r0, r4
   48bd2:	db05      	blt.n	48be0 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   48bd4:	42a0      	cmp	r0, r4
   48bd6:	4629      	mov	r1, r5
   48bd8:	bfa8      	it	ge
   48bda:	4620      	movge	r0, r4
   48bdc:	f7f6 fa6c 	bl	3f0b8 <sys_clock_set_timeout>
	__asm__ volatile(
   48be0:	f386 8811 	msr	BASEPRI, r6
   48be4:	f3bf 8f6f 	isb	sy
}
   48be8:	bd70      	pop	{r4, r5, r6, pc}

00048bea <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   48bea:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   48bec:	f7f9 fb7e 	bl	422ec <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   48bf0:	bd08      	pop	{r3, pc}

00048bf2 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   48bf2:	f7f9 bb7b 	b.w	422ec <sys_clock_tick_get>

00048bf6 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   48bf6:	b108      	cbz	r0, 48bfc <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   48bf8:	f7e1 bd88 	b.w	2a70c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   48bfc:	4770      	bx	lr

00048bfe <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   48bfe:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   48c02:	bf08      	it	eq
   48c04:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   48c08:	b538      	push	{r3, r4, r5, lr}
   48c0a:	460c      	mov	r4, r1
   48c0c:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   48c0e:	d014      	beq.n	48c3a <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   48c10:	4308      	orrs	r0, r1
   48c12:	d103      	bne.n	48c1c <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   48c14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   48c18:	f7f9 bb68 	b.w	422ec <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   48c1c:	f06f 0001 	mvn.w	r0, #1
   48c20:	1b40      	subs	r0, r0, r5
   48c22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   48c26:	eb63 0101 	sbc.w	r1, r3, r1
   48c2a:	2900      	cmp	r1, #0
   48c2c:	da04      	bge.n	48c38 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   48c2e:	f7f9 fb5d 	bl	422ec <sys_clock_tick_get>
   48c32:	1940      	adds	r0, r0, r5
   48c34:	eb41 0104 	adc.w	r1, r1, r4
}
   48c38:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   48c3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   48c3e:	4601      	mov	r1, r0
   48c40:	e7fa      	b.n	48c38 <sys_clock_timeout_end_calc+0x3a>

00048c42 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   48c42:	b510      	push	{r4, lr}
   48c44:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   48c46:	f7ff ff8e 	bl	48b66 <z_abort_timeout>

	if (inactive) {
   48c4a:	b9b0      	cbnz	r0, 48c7a <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   48c4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   48c4e:	b10b      	cbz	r3, 48c54 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   48c50:	4620      	mov	r0, r4
   48c52:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   48c54:	f104 0018 	add.w	r0, r4, #24
   48c58:	f7ff fef5 	bl	48a46 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   48c5c:	b168      	cbz	r0, 48c7a <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   48c5e:	f7ff fed2 	bl	48a06 <z_ready_thread>
	__asm__ volatile(
   48c62:	f04f 0320 	mov.w	r3, #32
   48c66:	f3ef 8011 	mrs	r0, BASEPRI
   48c6a:	f383 8812 	msr	BASEPRI_MAX, r3
   48c6e:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   48c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   48c76:	f7ff bf2d 	b.w	48ad4 <z_reschedule_irqlock>
   48c7a:	bd10      	pop	{r4, pc}

00048c7c <add_event>:
{
   48c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   48c7e:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   48c80:	e9d0 1300 	ldrd	r1, r3, [r0]
   48c84:	4288      	cmp	r0, r1
   48c86:	4604      	mov	r4, r0
   48c88:	d105      	bne.n	48c96 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   48c8a:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   48c8c:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   48c90:	601d      	str	r5, [r3, #0]
	list->tail = node;
   48c92:	6065      	str	r5, [r4, #4]
   48c94:	e01d      	b.n	48cd2 <add_event+0x56>
	if ((pending == NULL) ||
   48c96:	2b00      	cmp	r3, #0
   48c98:	d0f7      	beq.n	48c8a <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   48c9a:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   48c9c:	b100      	cbz	r0, 48ca0 <add_event+0x24>
   48c9e:	3860      	subs	r0, #96	; 0x60
   48ca0:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   48ca4:	4639      	mov	r1, r7
   48ca6:	f7ff fe5b 	bl	48960 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   48caa:	2800      	cmp	r0, #0
   48cac:	dced      	bgt.n	48c8a <add_event+0xe>
	return list->head == list;
   48cae:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48cb0:	42b4      	cmp	r4, r6
   48cb2:	d0ea      	beq.n	48c8a <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   48cb4:	2e00      	cmp	r6, #0
   48cb6:	d0e8      	beq.n	48c8a <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   48cb8:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   48cba:	b101      	cbz	r1, 48cbe <add_event+0x42>
   48cbc:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   48cbe:	4638      	mov	r0, r7
   48cc0:	f7ff fe4e 	bl	48960 <z_sched_prio_cmp>
   48cc4:	2800      	cmp	r0, #0
   48cc6:	dd05      	ble.n	48cd4 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   48cc8:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   48cca:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   48cce:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   48cd0:	6075      	str	r5, [r6, #4]
}
   48cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   48cd4:	6863      	ldr	r3, [r4, #4]
   48cd6:	429e      	cmp	r6, r3
   48cd8:	d0d7      	beq.n	48c8a <add_event+0xe>
   48cda:	6836      	ldr	r6, [r6, #0]
   48cdc:	e7ea      	b.n	48cb4 <add_event+0x38>

00048cde <register_events>:
{
   48cde:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   48ce2:	2500      	movs	r5, #0
{
   48ce4:	468b      	mov	fp, r1
   48ce6:	4614      	mov	r4, r2
   48ce8:	461f      	mov	r7, r3
   48cea:	4682      	mov	sl, r0
	int events_registered = 0;
   48cec:	462e      	mov	r6, r5
	event->poller = NULL;
   48cee:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   48cf0:	455d      	cmp	r5, fp
   48cf2:	db02      	blt.n	48cfa <register_events+0x1c>
}
   48cf4:	4630      	mov	r0, r6
   48cf6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   48cfa:	f04f 0320 	mov.w	r3, #32
   48cfe:	f3ef 8911 	mrs	r9, BASEPRI
   48d02:	f383 8812 	msr	BASEPRI_MAX, r3
   48d06:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   48d0a:	f89a 300d 	ldrb.w	r3, [sl, #13]
   48d0e:	f003 031f 	and.w	r3, r3, #31
   48d12:	3b01      	subs	r3, #1
   48d14:	2b07      	cmp	r3, #7
   48d16:	d80f      	bhi.n	48d38 <register_events+0x5a>
   48d18:	e8df f003 	tbb	[pc, r3]
   48d1c:	0a0e041e 	.word	0x0a0e041e
   48d20:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   48d24:	f8da 3010 	ldr.w	r3, [sl, #16]
   48d28:	689b      	ldr	r3, [r3, #8]
   48d2a:	b12b      	cbz	r3, 48d38 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   48d2c:	2302      	movs	r3, #2
   48d2e:	e020      	b.n	48d72 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   48d30:	f8da 3010 	ldr.w	r3, [sl, #16]
   48d34:	681b      	ldr	r3, [r3, #0]
   48d36:	bb8b      	cbnz	r3, 48d9c <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   48d38:	bb47      	cbnz	r7, 48d8c <register_events+0xae>
   48d3a:	7823      	ldrb	r3, [r4, #0]
   48d3c:	b333      	cbz	r3, 48d8c <register_events+0xae>
	switch (event->type) {
   48d3e:	f89a 300d 	ldrb.w	r3, [sl, #13]
   48d42:	f003 031f 	and.w	r3, r3, #31
   48d46:	3b01      	subs	r3, #1
   48d48:	2b07      	cmp	r3, #7
   48d4a:	d830      	bhi.n	48dae <register_events+0xd0>
   48d4c:	e8df f003 	tbb	[pc, r3]
   48d50:	282f2833 	.word	0x282f2833
   48d54:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   48d58:	f8da 3010 	ldr.w	r3, [sl, #16]
   48d5c:	689b      	ldr	r3, [r3, #8]
   48d5e:	2b00      	cmp	r3, #0
   48d60:	d0ea      	beq.n	48d38 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   48d62:	2301      	movs	r3, #1
   48d64:	e005      	b.n	48d72 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   48d66:	f8da 3010 	ldr.w	r3, [sl, #16]
   48d6a:	6a1b      	ldr	r3, [r3, #32]
   48d6c:	2b00      	cmp	r3, #0
   48d6e:	d0e3      	beq.n	48d38 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   48d70:	2310      	movs	r3, #16
	event->state |= state;
   48d72:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   48d76:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   48d7a:	f3c2 3145 	ubfx	r1, r2, #13, #6
   48d7e:	430b      	orrs	r3, r1
   48d80:	f363 3252 	bfi	r2, r3, #13, #6
   48d84:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   48d88:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   48d8c:	f389 8811 	msr	BASEPRI, r9
   48d90:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   48d94:	3501      	adds	r5, #1
   48d96:	f10a 0a14 	add.w	sl, sl, #20
   48d9a:	e7a9      	b.n	48cf0 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   48d9c:	2304      	movs	r3, #4
   48d9e:	e7e8      	b.n	48d72 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   48da0:	f8da 0010 	ldr.w	r0, [sl, #16]
   48da4:	4622      	mov	r2, r4
   48da6:	4651      	mov	r1, sl
   48da8:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   48daa:	f7ff ff67 	bl	48c7c <add_event>
	event->poller = poller;
   48dae:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   48db2:	3601      	adds	r6, #1
   48db4:	e7ea      	b.n	48d8c <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   48db6:	f8da 0010 	ldr.w	r0, [sl, #16]
   48dba:	4622      	mov	r2, r4
   48dbc:	4651      	mov	r1, sl
   48dbe:	e7f4      	b.n	48daa <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   48dc0:	f8da 0010 	ldr.w	r0, [sl, #16]
   48dc4:	4622      	mov	r2, r4
   48dc6:	4651      	mov	r1, sl
   48dc8:	3024      	adds	r0, #36	; 0x24
   48dca:	e7ee      	b.n	48daa <register_events+0xcc>

00048dcc <signal_poll_event>:
{
   48dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   48dd0:	6884      	ldr	r4, [r0, #8]
{
   48dd2:	4605      	mov	r5, r0
   48dd4:	460e      	mov	r6, r1
	if (poller != NULL) {
   48dd6:	b144      	cbz	r4, 48dea <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   48dd8:	7863      	ldrb	r3, [r4, #1]
   48dda:	2b01      	cmp	r3, #1
   48ddc:	d12e      	bne.n	48e3c <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   48dde:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   48de2:	f013 0302 	ands.w	r3, r3, #2
   48de6:	d10a      	bne.n	48dfe <signal_poll_event+0x32>
		poller->is_polling = false;
   48de8:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   48dea:	68eb      	ldr	r3, [r5, #12]
   48dec:	f3c3 3245 	ubfx	r2, r3, #13, #6
   48df0:	4316      	orrs	r6, r2
	event->poller = NULL;
   48df2:	2000      	movs	r0, #0
	event->state |= state;
   48df4:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   48df8:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   48dfa:	60eb      	str	r3, [r5, #12]
	return retcode;
   48dfc:	e03e      	b.n	48e7c <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   48dfe:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   48e02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   48e06:	bf08      	it	eq
   48e08:	f112 0f02 	cmneq.w	r2, #2
   48e0c:	d032      	beq.n	48e74 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   48e0e:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   48e12:	4640      	mov	r0, r8
   48e14:	f7ff fe4a 	bl	48aac <z_unpend_thread>
	arch_thread_return_value_set(thread,
   48e18:	2e08      	cmp	r6, #8
   48e1a:	bf0c      	ite	eq
   48e1c:	f06f 0303 	mvneq.w	r3, #3
   48e20:	2300      	movne	r3, #0
   48e22:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   48e24:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   48e28:	06db      	lsls	r3, r3, #27
   48e2a:	d109      	bne.n	48e40 <signal_poll_event+0x74>
   48e2c:	f854 7c48 	ldr.w	r7, [r4, #-72]
   48e30:	b937      	cbnz	r7, 48e40 <signal_poll_event+0x74>
	z_ready_thread(thread);
   48e32:	4640      	mov	r0, r8
   48e34:	f7ff fde7 	bl	48a06 <z_ready_thread>
		poller->is_polling = false;
   48e38:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   48e3a:	e7d6      	b.n	48dea <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   48e3c:	2b02      	cmp	r3, #2
   48e3e:	d001      	beq.n	48e44 <signal_poll_event+0x78>
		poller->is_polling = false;
   48e40:	2300      	movs	r3, #0
   48e42:	e7d1      	b.n	48de8 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   48e44:	7823      	ldrb	r3, [r4, #0]
   48e46:	2b00      	cmp	r3, #0
   48e48:	d0cf      	beq.n	48dea <signal_poll_event+0x1e>
   48e4a:	f854 7c04 	ldr.w	r7, [r4, #-4]
   48e4e:	2f00      	cmp	r7, #0
   48e50:	d0f2      	beq.n	48e38 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   48e52:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   48e56:	f1a4 0914 	sub.w	r9, r4, #20
   48e5a:	f104 0014 	add.w	r0, r4, #20
   48e5e:	f7ff fe82 	bl	48b66 <z_abort_timeout>
		twork->poll_result = 0;
   48e62:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   48e66:	4649      	mov	r1, r9
   48e68:	4638      	mov	r0, r7
   48e6a:	f7ff fcf9 	bl	48860 <k_work_submit_to_queue>
		poller->is_polling = false;
   48e6e:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   48e72:	e7ba      	b.n	48dea <signal_poll_event+0x1e>
		poller->is_polling = false;
   48e74:	2300      	movs	r3, #0
   48e76:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   48e78:	f06f 000a 	mvn.w	r0, #10
}
   48e7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00048e80 <clear_event_registrations>:
	while (num_events--) {
   48e80:	2314      	movs	r3, #20
{
   48e82:	b5f0      	push	{r4, r5, r6, r7, lr}
   48e84:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   48e88:	2400      	movs	r4, #0
	switch (event->type) {
   48e8a:	f44f 768b 	mov.w	r6, #278	; 0x116
	while (num_events--) {
   48e8e:	b901      	cbnz	r1, 48e92 <clear_event_registrations+0x12>
}
   48e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   48e92:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   48e96:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   48e9a:	f003 031f 	and.w	r3, r3, #31
   48e9e:	2b08      	cmp	r3, #8
   48ea0:	f1a0 0714 	sub.w	r7, r0, #20
   48ea4:	d80c      	bhi.n	48ec0 <clear_event_registrations+0x40>
   48ea6:	fa26 f303 	lsr.w	r3, r6, r3
   48eaa:	07db      	lsls	r3, r3, #31
   48eac:	d508      	bpl.n	48ec0 <clear_event_registrations+0x40>
	return node->next != NULL;
   48eae:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   48eb2:	b12b      	cbz	r3, 48ec0 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   48eb4:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   48eb8:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   48eba:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   48ebc:	e940 4405 	strd	r4, r4, [r0, #-20]
   48ec0:	f382 8811 	msr	BASEPRI, r2
   48ec4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   48ec8:	f04f 0320 	mov.w	r3, #32
   48ecc:	f3ef 8211 	mrs	r2, BASEPRI
   48ed0:	f383 8812 	msr	BASEPRI_MAX, r3
   48ed4:	f3bf 8f6f 	isb	sy
   48ed8:	3901      	subs	r1, #1
   48eda:	4638      	mov	r0, r7
   48edc:	e7d7      	b.n	48e8e <clear_event_registrations+0xe>

00048ede <k_poll_event_init>:
{
   48ede:	b510      	push	{r4, lr}
	event->type = type;
   48ee0:	04d2      	lsls	r2, r2, #19
   48ee2:	0209      	lsls	r1, r1, #8
   48ee4:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   48ee8:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   48eec:	430a      	orrs	r2, r1
   48eee:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   48ef0:	2400      	movs	r4, #0
	event->type = type;
   48ef2:	430a      	orrs	r2, r1
	event->obj = obj;
   48ef4:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   48ef8:	6084      	str	r4, [r0, #8]
}
   48efa:	bd10      	pop	{r4, pc}

00048efc <z_handle_obj_poll_events>:
{
   48efc:	4603      	mov	r3, r0
	return list->head == list;
   48efe:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   48f00:	4283      	cmp	r3, r0
   48f02:	d008      	beq.n	48f16 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   48f04:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   48f08:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   48f0a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   48f0c:	2300      	movs	r3, #0
	node->prev = NULL;
   48f0e:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   48f12:	f7ff bf5b 	b.w	48dcc <signal_poll_event>
}
   48f16:	4770      	bx	lr

00048f18 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   48f18:	3204      	adds	r2, #4
{
   48f1a:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   48f1c:	4604      	mov	r4, r0
   48f1e:	d208      	bcs.n	48f32 <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   48f20:	2600      	movs	r6, #0
   48f22:	2700      	movs	r7, #0
   48f24:	e9cd 6700 	strd	r6, r7, [sp]
   48f28:	f041 0104 	orr.w	r1, r1, #4
   48f2c:	f7ff fa95 	bl	4845a <k_heap_aligned_alloc>
	if (mem == NULL) {
   48f30:	b910      	cbnz	r0, 48f38 <z_heap_aligned_alloc+0x20>
		return NULL;
   48f32:	2000      	movs	r0, #0
}
   48f34:	b002      	add	sp, #8
   48f36:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   48f38:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   48f3c:	e7fa      	b.n	48f34 <z_heap_aligned_alloc+0x1c>

00048f3e <k_free>:
	if (ptr != NULL) {
   48f3e:	b120      	cbz	r0, 48f4a <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   48f40:	1f01      	subs	r1, r0, #4
   48f42:	f850 0c04 	ldr.w	r0, [r0, #-4]
   48f46:	f7ff bac9 	b.w	484dc <k_heap_free>
}
   48f4a:	4770      	bx	lr

00048f4c <k_malloc>:
{
   48f4c:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   48f4e:	2004      	movs	r0, #4
   48f50:	f7f9 bafa 	b.w	42548 <k_aligned_alloc>

00048f54 <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   48f54:	4770      	bx	lr
	...

00048f58 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   48f58:	f7f6 b904 	b.w	3f164 <SystemInit>
